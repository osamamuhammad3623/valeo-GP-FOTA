
blue_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ac  080601ac  080601ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08063258  08063258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08063270  08063270  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08063270  08063270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08063278  08063278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08063278  08063278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806327c  0806327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08063280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007bc  200007bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f07d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d62  00000000  00000000  0002f0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00030e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b08  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002450d  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ced1  00000000  00000000  000569e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbe51  00000000  00000000  000638b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f707  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000315c  00000000  00000000  0013f758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601ac <__do_global_dtors_aux>:
 80601ac:	b510      	push	{r4, lr}
 80601ae:	4c05      	ldr	r4, [pc, #20]	; (80601c4 <__do_global_dtors_aux+0x18>)
 80601b0:	7823      	ldrb	r3, [r4, #0]
 80601b2:	b933      	cbnz	r3, 80601c2 <__do_global_dtors_aux+0x16>
 80601b4:	4b04      	ldr	r3, [pc, #16]	; (80601c8 <__do_global_dtors_aux+0x1c>)
 80601b6:	b113      	cbz	r3, 80601be <__do_global_dtors_aux+0x12>
 80601b8:	4804      	ldr	r0, [pc, #16]	; (80601cc <__do_global_dtors_aux+0x20>)
 80601ba:	f3af 8000 	nop.w
 80601be:	2301      	movs	r3, #1
 80601c0:	7023      	strb	r3, [r4, #0]
 80601c2:	bd10      	pop	{r4, pc}
 80601c4:	2000000c 	.word	0x2000000c
 80601c8:	00000000 	.word	0x00000000
 80601cc:	08063240 	.word	0x08063240

080601d0 <frame_dummy>:
 80601d0:	b508      	push	{r3, lr}
 80601d2:	4b03      	ldr	r3, [pc, #12]	; (80601e0 <frame_dummy+0x10>)
 80601d4:	b11b      	cbz	r3, 80601de <frame_dummy+0xe>
 80601d6:	4903      	ldr	r1, [pc, #12]	; (80601e4 <frame_dummy+0x14>)
 80601d8:	4803      	ldr	r0, [pc, #12]	; (80601e8 <frame_dummy+0x18>)
 80601da:	f3af 8000 	nop.w
 80601de:	bd08      	pop	{r3, pc}
 80601e0:	00000000 	.word	0x00000000
 80601e4:	20000010 	.word	0x20000010
 80601e8:	08063240 	.word	0x08063240

080601ec <__aeabi_uldivmod>:
 80601ec:	b953      	cbnz	r3, 8060204 <__aeabi_uldivmod+0x18>
 80601ee:	b94a      	cbnz	r2, 8060204 <__aeabi_uldivmod+0x18>
 80601f0:	2900      	cmp	r1, #0
 80601f2:	bf08      	it	eq
 80601f4:	2800      	cmpeq	r0, #0
 80601f6:	bf1c      	itt	ne
 80601f8:	f04f 31ff 	movne.w	r1, #4294967295
 80601fc:	f04f 30ff 	movne.w	r0, #4294967295
 8060200:	f000 b974 	b.w	80604ec <__aeabi_idiv0>
 8060204:	f1ad 0c08 	sub.w	ip, sp, #8
 8060208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 806020c:	f000 f806 	bl	806021c <__udivmoddi4>
 8060210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060218:	b004      	add	sp, #16
 806021a:	4770      	bx	lr

0806021c <__udivmoddi4>:
 806021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060220:	9d08      	ldr	r5, [sp, #32]
 8060222:	4604      	mov	r4, r0
 8060224:	468e      	mov	lr, r1
 8060226:	2b00      	cmp	r3, #0
 8060228:	d14d      	bne.n	80602c6 <__udivmoddi4+0xaa>
 806022a:	428a      	cmp	r2, r1
 806022c:	4694      	mov	ip, r2
 806022e:	d969      	bls.n	8060304 <__udivmoddi4+0xe8>
 8060230:	fab2 f282 	clz	r2, r2
 8060234:	b152      	cbz	r2, 806024c <__udivmoddi4+0x30>
 8060236:	fa01 f302 	lsl.w	r3, r1, r2
 806023a:	f1c2 0120 	rsb	r1, r2, #32
 806023e:	fa20 f101 	lsr.w	r1, r0, r1
 8060242:	fa0c fc02 	lsl.w	ip, ip, r2
 8060246:	ea41 0e03 	orr.w	lr, r1, r3
 806024a:	4094      	lsls	r4, r2
 806024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8060250:	0c21      	lsrs	r1, r4, #16
 8060252:	fbbe f6f8 	udiv	r6, lr, r8
 8060256:	fa1f f78c 	uxth.w	r7, ip
 806025a:	fb08 e316 	mls	r3, r8, r6, lr
 806025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8060262:	fb06 f107 	mul.w	r1, r6, r7
 8060266:	4299      	cmp	r1, r3
 8060268:	d90a      	bls.n	8060280 <__udivmoddi4+0x64>
 806026a:	eb1c 0303 	adds.w	r3, ip, r3
 806026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8060272:	f080 811f 	bcs.w	80604b4 <__udivmoddi4+0x298>
 8060276:	4299      	cmp	r1, r3
 8060278:	f240 811c 	bls.w	80604b4 <__udivmoddi4+0x298>
 806027c:	3e02      	subs	r6, #2
 806027e:	4463      	add	r3, ip
 8060280:	1a5b      	subs	r3, r3, r1
 8060282:	b2a4      	uxth	r4, r4
 8060284:	fbb3 f0f8 	udiv	r0, r3, r8
 8060288:	fb08 3310 	mls	r3, r8, r0, r3
 806028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060290:	fb00 f707 	mul.w	r7, r0, r7
 8060294:	42a7      	cmp	r7, r4
 8060296:	d90a      	bls.n	80602ae <__udivmoddi4+0x92>
 8060298:	eb1c 0404 	adds.w	r4, ip, r4
 806029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80602a0:	f080 810a 	bcs.w	80604b8 <__udivmoddi4+0x29c>
 80602a4:	42a7      	cmp	r7, r4
 80602a6:	f240 8107 	bls.w	80604b8 <__udivmoddi4+0x29c>
 80602aa:	4464      	add	r4, ip
 80602ac:	3802      	subs	r0, #2
 80602ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80602b2:	1be4      	subs	r4, r4, r7
 80602b4:	2600      	movs	r6, #0
 80602b6:	b11d      	cbz	r5, 80602c0 <__udivmoddi4+0xa4>
 80602b8:	40d4      	lsrs	r4, r2
 80602ba:	2300      	movs	r3, #0
 80602bc:	e9c5 4300 	strd	r4, r3, [r5]
 80602c0:	4631      	mov	r1, r6
 80602c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80602c6:	428b      	cmp	r3, r1
 80602c8:	d909      	bls.n	80602de <__udivmoddi4+0xc2>
 80602ca:	2d00      	cmp	r5, #0
 80602cc:	f000 80ef 	beq.w	80604ae <__udivmoddi4+0x292>
 80602d0:	2600      	movs	r6, #0
 80602d2:	e9c5 0100 	strd	r0, r1, [r5]
 80602d6:	4630      	mov	r0, r6
 80602d8:	4631      	mov	r1, r6
 80602da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80602de:	fab3 f683 	clz	r6, r3
 80602e2:	2e00      	cmp	r6, #0
 80602e4:	d14a      	bne.n	806037c <__udivmoddi4+0x160>
 80602e6:	428b      	cmp	r3, r1
 80602e8:	d302      	bcc.n	80602f0 <__udivmoddi4+0xd4>
 80602ea:	4282      	cmp	r2, r0
 80602ec:	f200 80f9 	bhi.w	80604e2 <__udivmoddi4+0x2c6>
 80602f0:	1a84      	subs	r4, r0, r2
 80602f2:	eb61 0303 	sbc.w	r3, r1, r3
 80602f6:	2001      	movs	r0, #1
 80602f8:	469e      	mov	lr, r3
 80602fa:	2d00      	cmp	r5, #0
 80602fc:	d0e0      	beq.n	80602c0 <__udivmoddi4+0xa4>
 80602fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8060302:	e7dd      	b.n	80602c0 <__udivmoddi4+0xa4>
 8060304:	b902      	cbnz	r2, 8060308 <__udivmoddi4+0xec>
 8060306:	deff      	udf	#255	; 0xff
 8060308:	fab2 f282 	clz	r2, r2
 806030c:	2a00      	cmp	r2, #0
 806030e:	f040 8092 	bne.w	8060436 <__udivmoddi4+0x21a>
 8060312:	eba1 010c 	sub.w	r1, r1, ip
 8060316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 806031a:	fa1f fe8c 	uxth.w	lr, ip
 806031e:	2601      	movs	r6, #1
 8060320:	0c20      	lsrs	r0, r4, #16
 8060322:	fbb1 f3f7 	udiv	r3, r1, r7
 8060326:	fb07 1113 	mls	r1, r7, r3, r1
 806032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 806032e:	fb0e f003 	mul.w	r0, lr, r3
 8060332:	4288      	cmp	r0, r1
 8060334:	d908      	bls.n	8060348 <__udivmoddi4+0x12c>
 8060336:	eb1c 0101 	adds.w	r1, ip, r1
 806033a:	f103 38ff 	add.w	r8, r3, #4294967295
 806033e:	d202      	bcs.n	8060346 <__udivmoddi4+0x12a>
 8060340:	4288      	cmp	r0, r1
 8060342:	f200 80cb 	bhi.w	80604dc <__udivmoddi4+0x2c0>
 8060346:	4643      	mov	r3, r8
 8060348:	1a09      	subs	r1, r1, r0
 806034a:	b2a4      	uxth	r4, r4
 806034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8060350:	fb07 1110 	mls	r1, r7, r0, r1
 8060354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8060358:	fb0e fe00 	mul.w	lr, lr, r0
 806035c:	45a6      	cmp	lr, r4
 806035e:	d908      	bls.n	8060372 <__udivmoddi4+0x156>
 8060360:	eb1c 0404 	adds.w	r4, ip, r4
 8060364:	f100 31ff 	add.w	r1, r0, #4294967295
 8060368:	d202      	bcs.n	8060370 <__udivmoddi4+0x154>
 806036a:	45a6      	cmp	lr, r4
 806036c:	f200 80bb 	bhi.w	80604e6 <__udivmoddi4+0x2ca>
 8060370:	4608      	mov	r0, r1
 8060372:	eba4 040e 	sub.w	r4, r4, lr
 8060376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 806037a:	e79c      	b.n	80602b6 <__udivmoddi4+0x9a>
 806037c:	f1c6 0720 	rsb	r7, r6, #32
 8060380:	40b3      	lsls	r3, r6
 8060382:	fa22 fc07 	lsr.w	ip, r2, r7
 8060386:	ea4c 0c03 	orr.w	ip, ip, r3
 806038a:	fa20 f407 	lsr.w	r4, r0, r7
 806038e:	fa01 f306 	lsl.w	r3, r1, r6
 8060392:	431c      	orrs	r4, r3
 8060394:	40f9      	lsrs	r1, r7
 8060396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 806039a:	fa00 f306 	lsl.w	r3, r0, r6
 806039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80603a2:	0c20      	lsrs	r0, r4, #16
 80603a4:	fa1f fe8c 	uxth.w	lr, ip
 80603a8:	fb09 1118 	mls	r1, r9, r8, r1
 80603ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80603b0:	fb08 f00e 	mul.w	r0, r8, lr
 80603b4:	4288      	cmp	r0, r1
 80603b6:	fa02 f206 	lsl.w	r2, r2, r6
 80603ba:	d90b      	bls.n	80603d4 <__udivmoddi4+0x1b8>
 80603bc:	eb1c 0101 	adds.w	r1, ip, r1
 80603c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80603c4:	f080 8088 	bcs.w	80604d8 <__udivmoddi4+0x2bc>
 80603c8:	4288      	cmp	r0, r1
 80603ca:	f240 8085 	bls.w	80604d8 <__udivmoddi4+0x2bc>
 80603ce:	f1a8 0802 	sub.w	r8, r8, #2
 80603d2:	4461      	add	r1, ip
 80603d4:	1a09      	subs	r1, r1, r0
 80603d6:	b2a4      	uxth	r4, r4
 80603d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80603dc:	fb09 1110 	mls	r1, r9, r0, r1
 80603e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80603e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80603e8:	458e      	cmp	lr, r1
 80603ea:	d908      	bls.n	80603fe <__udivmoddi4+0x1e2>
 80603ec:	eb1c 0101 	adds.w	r1, ip, r1
 80603f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80603f4:	d26c      	bcs.n	80604d0 <__udivmoddi4+0x2b4>
 80603f6:	458e      	cmp	lr, r1
 80603f8:	d96a      	bls.n	80604d0 <__udivmoddi4+0x2b4>
 80603fa:	3802      	subs	r0, #2
 80603fc:	4461      	add	r1, ip
 80603fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8060402:	fba0 9402 	umull	r9, r4, r0, r2
 8060406:	eba1 010e 	sub.w	r1, r1, lr
 806040a:	42a1      	cmp	r1, r4
 806040c:	46c8      	mov	r8, r9
 806040e:	46a6      	mov	lr, r4
 8060410:	d356      	bcc.n	80604c0 <__udivmoddi4+0x2a4>
 8060412:	d053      	beq.n	80604bc <__udivmoddi4+0x2a0>
 8060414:	b15d      	cbz	r5, 806042e <__udivmoddi4+0x212>
 8060416:	ebb3 0208 	subs.w	r2, r3, r8
 806041a:	eb61 010e 	sbc.w	r1, r1, lr
 806041e:	fa01 f707 	lsl.w	r7, r1, r7
 8060422:	fa22 f306 	lsr.w	r3, r2, r6
 8060426:	40f1      	lsrs	r1, r6
 8060428:	431f      	orrs	r7, r3
 806042a:	e9c5 7100 	strd	r7, r1, [r5]
 806042e:	2600      	movs	r6, #0
 8060430:	4631      	mov	r1, r6
 8060432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060436:	f1c2 0320 	rsb	r3, r2, #32
 806043a:	40d8      	lsrs	r0, r3
 806043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8060440:	fa21 f303 	lsr.w	r3, r1, r3
 8060444:	4091      	lsls	r1, r2
 8060446:	4301      	orrs	r1, r0
 8060448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 806044c:	fa1f fe8c 	uxth.w	lr, ip
 8060450:	fbb3 f0f7 	udiv	r0, r3, r7
 8060454:	fb07 3610 	mls	r6, r7, r0, r3
 8060458:	0c0b      	lsrs	r3, r1, #16
 806045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 806045e:	fb00 f60e 	mul.w	r6, r0, lr
 8060462:	429e      	cmp	r6, r3
 8060464:	fa04 f402 	lsl.w	r4, r4, r2
 8060468:	d908      	bls.n	806047c <__udivmoddi4+0x260>
 806046a:	eb1c 0303 	adds.w	r3, ip, r3
 806046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8060472:	d22f      	bcs.n	80604d4 <__udivmoddi4+0x2b8>
 8060474:	429e      	cmp	r6, r3
 8060476:	d92d      	bls.n	80604d4 <__udivmoddi4+0x2b8>
 8060478:	3802      	subs	r0, #2
 806047a:	4463      	add	r3, ip
 806047c:	1b9b      	subs	r3, r3, r6
 806047e:	b289      	uxth	r1, r1
 8060480:	fbb3 f6f7 	udiv	r6, r3, r7
 8060484:	fb07 3316 	mls	r3, r7, r6, r3
 8060488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 806048c:	fb06 f30e 	mul.w	r3, r6, lr
 8060490:	428b      	cmp	r3, r1
 8060492:	d908      	bls.n	80604a6 <__udivmoddi4+0x28a>
 8060494:	eb1c 0101 	adds.w	r1, ip, r1
 8060498:	f106 38ff 	add.w	r8, r6, #4294967295
 806049c:	d216      	bcs.n	80604cc <__udivmoddi4+0x2b0>
 806049e:	428b      	cmp	r3, r1
 80604a0:	d914      	bls.n	80604cc <__udivmoddi4+0x2b0>
 80604a2:	3e02      	subs	r6, #2
 80604a4:	4461      	add	r1, ip
 80604a6:	1ac9      	subs	r1, r1, r3
 80604a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80604ac:	e738      	b.n	8060320 <__udivmoddi4+0x104>
 80604ae:	462e      	mov	r6, r5
 80604b0:	4628      	mov	r0, r5
 80604b2:	e705      	b.n	80602c0 <__udivmoddi4+0xa4>
 80604b4:	4606      	mov	r6, r0
 80604b6:	e6e3      	b.n	8060280 <__udivmoddi4+0x64>
 80604b8:	4618      	mov	r0, r3
 80604ba:	e6f8      	b.n	80602ae <__udivmoddi4+0x92>
 80604bc:	454b      	cmp	r3, r9
 80604be:	d2a9      	bcs.n	8060414 <__udivmoddi4+0x1f8>
 80604c0:	ebb9 0802 	subs.w	r8, r9, r2
 80604c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80604c8:	3801      	subs	r0, #1
 80604ca:	e7a3      	b.n	8060414 <__udivmoddi4+0x1f8>
 80604cc:	4646      	mov	r6, r8
 80604ce:	e7ea      	b.n	80604a6 <__udivmoddi4+0x28a>
 80604d0:	4620      	mov	r0, r4
 80604d2:	e794      	b.n	80603fe <__udivmoddi4+0x1e2>
 80604d4:	4640      	mov	r0, r8
 80604d6:	e7d1      	b.n	806047c <__udivmoddi4+0x260>
 80604d8:	46d0      	mov	r8, sl
 80604da:	e77b      	b.n	80603d4 <__udivmoddi4+0x1b8>
 80604dc:	3b02      	subs	r3, #2
 80604de:	4461      	add	r1, ip
 80604e0:	e732      	b.n	8060348 <__udivmoddi4+0x12c>
 80604e2:	4630      	mov	r0, r6
 80604e4:	e709      	b.n	80602fa <__udivmoddi4+0xde>
 80604e6:	4464      	add	r4, ip
 80604e8:	3802      	subs	r0, #2
 80604ea:	e742      	b.n	8060372 <__udivmoddi4+0x156>

080604ec <__aeabi_idiv0>:
 80604ec:	4770      	bx	lr
 80604ee:	bf00      	nop

080604f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80604f0:	b580      	push	{r7, lr}
 80604f2:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80604f4:	b662      	cpsie	i
}
 80604f6:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80604f8:	f000 fc26 	bl	8060d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80604fc:	f000 f81a 	bl	8060534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8060500:	f000 f93c 	bl	806077c <MX_GPIO_Init>
  MX_ETH_Init();
 8060504:	f000 f880 	bl	8060608 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8060508:	f000 f8e0 	bl	80606cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 806050c:	f000 f908 	bl	8060720 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8060510:	f000 f8c8 	bl	80606a4 <MX_RNG_Init>
  HAL_RNG_DeInit(&hrng);
 8060514:	4805      	ldr	r0, [pc, #20]	; (806052c <main+0x3c>)
 8060516:	f002 f879 	bl	806260c <HAL_RNG_DeInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 806051a:	2180      	movs	r1, #128	; 0x80
 806051c:	4804      	ldr	r0, [pc, #16]	; (8060530 <main+0x40>)
 806051e:	f001 fa7c 	bl	8061a1a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8060522:	2064      	movs	r0, #100	; 0x64
 8060524:	f000 fc82 	bl	8060e2c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8060528:	e7f7      	b.n	806051a <main+0x2a>
 806052a:	bf00      	nop
 806052c:	20000250 	.word	0x20000250
 8060530:	40020400 	.word	0x40020400

08060534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8060534:	b580      	push	{r7, lr}
 8060536:	b094      	sub	sp, #80	; 0x50
 8060538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 806053a:	f107 0320 	add.w	r3, r7, #32
 806053e:	2230      	movs	r2, #48	; 0x30
 8060540:	2100      	movs	r1, #0
 8060542:	4618      	mov	r0, r3
 8060544:	f002 fe74 	bl	8063230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8060548:	f107 030c 	add.w	r3, r7, #12
 806054c:	2200      	movs	r2, #0
 806054e:	601a      	str	r2, [r3, #0]
 8060550:	605a      	str	r2, [r3, #4]
 8060552:	609a      	str	r2, [r3, #8]
 8060554:	60da      	str	r2, [r3, #12]
 8060556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8060558:	2300      	movs	r3, #0
 806055a:	60bb      	str	r3, [r7, #8]
 806055c:	4b28      	ldr	r3, [pc, #160]	; (8060600 <SystemClock_Config+0xcc>)
 806055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060560:	4a27      	ldr	r2, [pc, #156]	; (8060600 <SystemClock_Config+0xcc>)
 8060562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8060566:	6413      	str	r3, [r2, #64]	; 0x40
 8060568:	4b25      	ldr	r3, [pc, #148]	; (8060600 <SystemClock_Config+0xcc>)
 806056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8060570:	60bb      	str	r3, [r7, #8]
 8060572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8060574:	2300      	movs	r3, #0
 8060576:	607b      	str	r3, [r7, #4]
 8060578:	4b22      	ldr	r3, [pc, #136]	; (8060604 <SystemClock_Config+0xd0>)
 806057a:	681b      	ldr	r3, [r3, #0]
 806057c:	4a21      	ldr	r2, [pc, #132]	; (8060604 <SystemClock_Config+0xd0>)
 806057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8060582:	6013      	str	r3, [r2, #0]
 8060584:	4b1f      	ldr	r3, [pc, #124]	; (8060604 <SystemClock_Config+0xd0>)
 8060586:	681b      	ldr	r3, [r3, #0]
 8060588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 806058c:	607b      	str	r3, [r7, #4]
 806058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8060590:	2301      	movs	r3, #1
 8060592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8060594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8060598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 806059a:	2302      	movs	r3, #2
 806059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 806059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80605a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80605a4:	2304      	movs	r3, #4
 80605a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80605a8:	23a8      	movs	r3, #168	; 0xa8
 80605aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80605ac:	2302      	movs	r3, #2
 80605ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80605b0:	2307      	movs	r3, #7
 80605b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80605b4:	f107 0320 	add.w	r3, r7, #32
 80605b8:	4618      	mov	r0, r3
 80605ba:	f001 fb65 	bl	8061c88 <HAL_RCC_OscConfig>
 80605be:	4603      	mov	r3, r0
 80605c0:	2b00      	cmp	r3, #0
 80605c2:	d001      	beq.n	80605c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80605c4:	f000 f988 	bl	80608d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80605c8:	230f      	movs	r3, #15
 80605ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80605cc:	2302      	movs	r3, #2
 80605ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80605d0:	2300      	movs	r3, #0
 80605d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80605d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80605d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80605da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80605de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80605e0:	f107 030c 	add.w	r3, r7, #12
 80605e4:	2105      	movs	r1, #5
 80605e6:	4618      	mov	r0, r3
 80605e8:	f001 fdc6 	bl	8062178 <HAL_RCC_ClockConfig>
 80605ec:	4603      	mov	r3, r0
 80605ee:	2b00      	cmp	r3, #0
 80605f0:	d001      	beq.n	80605f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80605f2:	f000 f971 	bl	80608d8 <Error_Handler>
  }
}
 80605f6:	bf00      	nop
 80605f8:	3750      	adds	r7, #80	; 0x50
 80605fa:	46bd      	mov	sp, r7
 80605fc:	bd80      	pop	{r7, pc}
 80605fe:	bf00      	nop
 8060600:	40023800 	.word	0x40023800
 8060604:	40007000 	.word	0x40007000

08060608 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8060608:	b580      	push	{r7, lr}
 806060a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 806060c:	4b1f      	ldr	r3, [pc, #124]	; (806068c <MX_ETH_Init+0x84>)
 806060e:	4a20      	ldr	r2, [pc, #128]	; (8060690 <MX_ETH_Init+0x88>)
 8060610:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8060612:	4b20      	ldr	r3, [pc, #128]	; (8060694 <MX_ETH_Init+0x8c>)
 8060614:	2200      	movs	r2, #0
 8060616:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8060618:	4b1e      	ldr	r3, [pc, #120]	; (8060694 <MX_ETH_Init+0x8c>)
 806061a:	2280      	movs	r2, #128	; 0x80
 806061c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 806061e:	4b1d      	ldr	r3, [pc, #116]	; (8060694 <MX_ETH_Init+0x8c>)
 8060620:	22e1      	movs	r2, #225	; 0xe1
 8060622:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8060624:	4b1b      	ldr	r3, [pc, #108]	; (8060694 <MX_ETH_Init+0x8c>)
 8060626:	2200      	movs	r2, #0
 8060628:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 806062a:	4b1a      	ldr	r3, [pc, #104]	; (8060694 <MX_ETH_Init+0x8c>)
 806062c:	2200      	movs	r2, #0
 806062e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8060630:	4b18      	ldr	r3, [pc, #96]	; (8060694 <MX_ETH_Init+0x8c>)
 8060632:	2200      	movs	r2, #0
 8060634:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8060636:	4b15      	ldr	r3, [pc, #84]	; (806068c <MX_ETH_Init+0x84>)
 8060638:	4a16      	ldr	r2, [pc, #88]	; (8060694 <MX_ETH_Init+0x8c>)
 806063a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 806063c:	4b13      	ldr	r3, [pc, #76]	; (806068c <MX_ETH_Init+0x84>)
 806063e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8060642:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8060644:	4b11      	ldr	r3, [pc, #68]	; (806068c <MX_ETH_Init+0x84>)
 8060646:	4a14      	ldr	r2, [pc, #80]	; (8060698 <MX_ETH_Init+0x90>)
 8060648:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 806064a:	4b10      	ldr	r3, [pc, #64]	; (806068c <MX_ETH_Init+0x84>)
 806064c:	4a13      	ldr	r2, [pc, #76]	; (806069c <MX_ETH_Init+0x94>)
 806064e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8060650:	4b0e      	ldr	r3, [pc, #56]	; (806068c <MX_ETH_Init+0x84>)
 8060652:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8060656:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8060658:	480c      	ldr	r0, [pc, #48]	; (806068c <MX_ETH_Init+0x84>)
 806065a:	f000 fcf1 	bl	8061040 <HAL_ETH_Init>
 806065e:	4603      	mov	r3, r0
 8060660:	2b00      	cmp	r3, #0
 8060662:	d001      	beq.n	8060668 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8060664:	f000 f938 	bl	80608d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8060668:	2238      	movs	r2, #56	; 0x38
 806066a:	2100      	movs	r1, #0
 806066c:	480c      	ldr	r0, [pc, #48]	; (80606a0 <MX_ETH_Init+0x98>)
 806066e:	f002 fddf 	bl	8063230 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8060672:	4b0b      	ldr	r3, [pc, #44]	; (80606a0 <MX_ETH_Init+0x98>)
 8060674:	2221      	movs	r2, #33	; 0x21
 8060676:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8060678:	4b09      	ldr	r3, [pc, #36]	; (80606a0 <MX_ETH_Init+0x98>)
 806067a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 806067e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8060680:	4b07      	ldr	r3, [pc, #28]	; (80606a0 <MX_ETH_Init+0x98>)
 8060682:	2200      	movs	r2, #0
 8060684:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8060686:	bf00      	nop
 8060688:	bd80      	pop	{r7, pc}
 806068a:	bf00      	nop
 806068c:	200001a0 	.word	0x200001a0
 8060690:	40028000 	.word	0x40028000
 8060694:	200007b0 	.word	0x200007b0
 8060698:	20000100 	.word	0x20000100
 806069c:	20000060 	.word	0x20000060
 80606a0:	20000028 	.word	0x20000028

080606a4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80606a4:	b580      	push	{r7, lr}
 80606a6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80606a8:	4b06      	ldr	r3, [pc, #24]	; (80606c4 <MX_RNG_Init+0x20>)
 80606aa:	4a07      	ldr	r2, [pc, #28]	; (80606c8 <MX_RNG_Init+0x24>)
 80606ac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80606ae:	4805      	ldr	r0, [pc, #20]	; (80606c4 <MX_RNG_Init+0x20>)
 80606b0:	f001 ff82 	bl	80625b8 <HAL_RNG_Init>
 80606b4:	4603      	mov	r3, r0
 80606b6:	2b00      	cmp	r3, #0
 80606b8:	d001      	beq.n	80606be <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80606ba:	f000 f90d 	bl	80608d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80606be:	bf00      	nop
 80606c0:	bd80      	pop	{r7, pc}
 80606c2:	bf00      	nop
 80606c4:	20000250 	.word	0x20000250
 80606c8:	50060800 	.word	0x50060800

080606cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80606cc:	b580      	push	{r7, lr}
 80606ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80606d0:	4b11      	ldr	r3, [pc, #68]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606d2:	4a12      	ldr	r2, [pc, #72]	; (806071c <MX_USART3_UART_Init+0x50>)
 80606d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80606d6:	4b10      	ldr	r3, [pc, #64]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80606dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80606de:	4b0e      	ldr	r3, [pc, #56]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606e0:	2200      	movs	r2, #0
 80606e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80606e4:	4b0c      	ldr	r3, [pc, #48]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606e6:	2200      	movs	r2, #0
 80606e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80606ea:	4b0b      	ldr	r3, [pc, #44]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606ec:	2200      	movs	r2, #0
 80606ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80606f0:	4b09      	ldr	r3, [pc, #36]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606f2:	220c      	movs	r2, #12
 80606f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80606f6:	4b08      	ldr	r3, [pc, #32]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606f8:	2200      	movs	r2, #0
 80606fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80606fc:	4b06      	ldr	r3, [pc, #24]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 80606fe:	2200      	movs	r2, #0
 8060700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8060702:	4805      	ldr	r0, [pc, #20]	; (8060718 <MX_USART3_UART_Init+0x4c>)
 8060704:	f001 ffac 	bl	8062660 <HAL_UART_Init>
 8060708:	4603      	mov	r3, r0
 806070a:	2b00      	cmp	r3, #0
 806070c:	d001      	beq.n	8060712 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 806070e:	f000 f8e3 	bl	80608d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8060712:	bf00      	nop
 8060714:	bd80      	pop	{r7, pc}
 8060716:	bf00      	nop
 8060718:	20000260 	.word	0x20000260
 806071c:	40004800 	.word	0x40004800

08060720 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8060720:	b580      	push	{r7, lr}
 8060722:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8060724:	4b14      	ldr	r3, [pc, #80]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060726:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 806072a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 806072c:	4b12      	ldr	r3, [pc, #72]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 806072e:	2204      	movs	r2, #4
 8060730:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8060732:	4b11      	ldr	r3, [pc, #68]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060734:	2202      	movs	r2, #2
 8060736:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8060738:	4b0f      	ldr	r3, [pc, #60]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 806073a:	2200      	movs	r2, #0
 806073c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 806073e:	4b0e      	ldr	r3, [pc, #56]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060740:	2202      	movs	r2, #2
 8060742:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8060744:	4b0c      	ldr	r3, [pc, #48]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060746:	2201      	movs	r2, #1
 8060748:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 806074a:	4b0b      	ldr	r3, [pc, #44]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 806074c:	2200      	movs	r2, #0
 806074e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8060750:	4b09      	ldr	r3, [pc, #36]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060752:	2200      	movs	r2, #0
 8060754:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8060756:	4b08      	ldr	r3, [pc, #32]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060758:	2201      	movs	r2, #1
 806075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 806075c:	4b06      	ldr	r3, [pc, #24]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 806075e:	2200      	movs	r2, #0
 8060760:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8060762:	4805      	ldr	r0, [pc, #20]	; (8060778 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8060764:	f001 f973 	bl	8061a4e <HAL_PCD_Init>
 8060768:	4603      	mov	r3, r0
 806076a:	2b00      	cmp	r3, #0
 806076c:	d001      	beq.n	8060772 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 806076e:	f000 f8b3 	bl	80608d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8060772:	bf00      	nop
 8060774:	bd80      	pop	{r7, pc}
 8060776:	bf00      	nop
 8060778:	200002a4 	.word	0x200002a4

0806077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 806077c:	b580      	push	{r7, lr}
 806077e:	b08c      	sub	sp, #48	; 0x30
 8060780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060782:	f107 031c 	add.w	r3, r7, #28
 8060786:	2200      	movs	r2, #0
 8060788:	601a      	str	r2, [r3, #0]
 806078a:	605a      	str	r2, [r3, #4]
 806078c:	609a      	str	r2, [r3, #8]
 806078e:	60da      	str	r2, [r3, #12]
 8060790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8060792:	2300      	movs	r3, #0
 8060794:	61bb      	str	r3, [r7, #24]
 8060796:	4b4c      	ldr	r3, [pc, #304]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806079a:	4a4b      	ldr	r2, [pc, #300]	; (80608c8 <MX_GPIO_Init+0x14c>)
 806079c:	f043 0304 	orr.w	r3, r3, #4
 80607a0:	6313      	str	r3, [r2, #48]	; 0x30
 80607a2:	4b49      	ldr	r3, [pc, #292]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607a6:	f003 0304 	and.w	r3, r3, #4
 80607aa:	61bb      	str	r3, [r7, #24]
 80607ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80607ae:	2300      	movs	r3, #0
 80607b0:	617b      	str	r3, [r7, #20]
 80607b2:	4b45      	ldr	r3, [pc, #276]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607b6:	4a44      	ldr	r2, [pc, #272]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80607bc:	6313      	str	r3, [r2, #48]	; 0x30
 80607be:	4b42      	ldr	r3, [pc, #264]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80607c6:	617b      	str	r3, [r7, #20]
 80607c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80607ca:	2300      	movs	r3, #0
 80607cc:	613b      	str	r3, [r7, #16]
 80607ce:	4b3e      	ldr	r3, [pc, #248]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607d2:	4a3d      	ldr	r2, [pc, #244]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607d4:	f043 0301 	orr.w	r3, r3, #1
 80607d8:	6313      	str	r3, [r2, #48]	; 0x30
 80607da:	4b3b      	ldr	r3, [pc, #236]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607de:	f003 0301 	and.w	r3, r3, #1
 80607e2:	613b      	str	r3, [r7, #16]
 80607e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80607e6:	2300      	movs	r3, #0
 80607e8:	60fb      	str	r3, [r7, #12]
 80607ea:	4b37      	ldr	r3, [pc, #220]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607ee:	4a36      	ldr	r2, [pc, #216]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607f0:	f043 0302 	orr.w	r3, r3, #2
 80607f4:	6313      	str	r3, [r2, #48]	; 0x30
 80607f6:	4b34      	ldr	r3, [pc, #208]	; (80608c8 <MX_GPIO_Init+0x14c>)
 80607f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80607fa:	f003 0302 	and.w	r3, r3, #2
 80607fe:	60fb      	str	r3, [r7, #12]
 8060800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8060802:	2300      	movs	r3, #0
 8060804:	60bb      	str	r3, [r7, #8]
 8060806:	4b30      	ldr	r3, [pc, #192]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806080a:	4a2f      	ldr	r2, [pc, #188]	; (80608c8 <MX_GPIO_Init+0x14c>)
 806080c:	f043 0308 	orr.w	r3, r3, #8
 8060810:	6313      	str	r3, [r2, #48]	; 0x30
 8060812:	4b2d      	ldr	r3, [pc, #180]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060816:	f003 0308 	and.w	r3, r3, #8
 806081a:	60bb      	str	r3, [r7, #8]
 806081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 806081e:	2300      	movs	r3, #0
 8060820:	607b      	str	r3, [r7, #4]
 8060822:	4b29      	ldr	r3, [pc, #164]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060826:	4a28      	ldr	r2, [pc, #160]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806082c:	6313      	str	r3, [r2, #48]	; 0x30
 806082e:	4b26      	ldr	r3, [pc, #152]	; (80608c8 <MX_GPIO_Init+0x14c>)
 8060830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8060836:	607b      	str	r3, [r7, #4]
 8060838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 806083a:	2200      	movs	r2, #0
 806083c:	f244 0181 	movw	r1, #16513	; 0x4081
 8060840:	4822      	ldr	r0, [pc, #136]	; (80608cc <MX_GPIO_Init+0x150>)
 8060842:	f001 f8d1 	bl	80619e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8060846:	2200      	movs	r2, #0
 8060848:	2140      	movs	r1, #64	; 0x40
 806084a:	4821      	ldr	r0, [pc, #132]	; (80608d0 <MX_GPIO_Init+0x154>)
 806084c:	f001 f8cc 	bl	80619e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8060850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8060854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8060856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 806085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806085c:	2300      	movs	r3, #0
 806085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8060860:	f107 031c 	add.w	r3, r7, #28
 8060864:	4619      	mov	r1, r3
 8060866:	481b      	ldr	r0, [pc, #108]	; (80608d4 <MX_GPIO_Init+0x158>)
 8060868:	f000 ff12 	bl	8061690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 806086c:	f244 0381 	movw	r3, #16513	; 0x4081
 8060870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8060872:	2301      	movs	r3, #1
 8060874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060876:	2300      	movs	r3, #0
 8060878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 806087a:	2300      	movs	r3, #0
 806087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 806087e:	f107 031c 	add.w	r3, r7, #28
 8060882:	4619      	mov	r1, r3
 8060884:	4811      	ldr	r0, [pc, #68]	; (80608cc <MX_GPIO_Init+0x150>)
 8060886:	f000 ff03 	bl	8061690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 806088a:	2340      	movs	r3, #64	; 0x40
 806088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806088e:	2301      	movs	r3, #1
 8060890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060892:	2300      	movs	r3, #0
 8060894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060896:	2300      	movs	r3, #0
 8060898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 806089a:	f107 031c 	add.w	r3, r7, #28
 806089e:	4619      	mov	r1, r3
 80608a0:	480b      	ldr	r0, [pc, #44]	; (80608d0 <MX_GPIO_Init+0x154>)
 80608a2:	f000 fef5 	bl	8061690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80608a6:	2380      	movs	r3, #128	; 0x80
 80608a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80608aa:	2300      	movs	r3, #0
 80608ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80608ae:	2300      	movs	r3, #0
 80608b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80608b2:	f107 031c 	add.w	r3, r7, #28
 80608b6:	4619      	mov	r1, r3
 80608b8:	4805      	ldr	r0, [pc, #20]	; (80608d0 <MX_GPIO_Init+0x154>)
 80608ba:	f000 fee9 	bl	8061690 <HAL_GPIO_Init>

}
 80608be:	bf00      	nop
 80608c0:	3730      	adds	r7, #48	; 0x30
 80608c2:	46bd      	mov	sp, r7
 80608c4:	bd80      	pop	{r7, pc}
 80608c6:	bf00      	nop
 80608c8:	40023800 	.word	0x40023800
 80608cc:	40020400 	.word	0x40020400
 80608d0:	40021800 	.word	0x40021800
 80608d4:	40020800 	.word	0x40020800

080608d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80608d8:	b480      	push	{r7}
 80608da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80608dc:	b672      	cpsid	i
}
 80608de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80608e0:	e7fe      	b.n	80608e0 <Error_Handler+0x8>
	...

080608e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80608e4:	b480      	push	{r7}
 80608e6:	b083      	sub	sp, #12
 80608e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80608ea:	2300      	movs	r3, #0
 80608ec:	607b      	str	r3, [r7, #4]
 80608ee:	4b10      	ldr	r3, [pc, #64]	; (8060930 <HAL_MspInit+0x4c>)
 80608f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80608f2:	4a0f      	ldr	r2, [pc, #60]	; (8060930 <HAL_MspInit+0x4c>)
 80608f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80608f8:	6453      	str	r3, [r2, #68]	; 0x44
 80608fa:	4b0d      	ldr	r3, [pc, #52]	; (8060930 <HAL_MspInit+0x4c>)
 80608fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80608fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8060902:	607b      	str	r3, [r7, #4]
 8060904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8060906:	2300      	movs	r3, #0
 8060908:	603b      	str	r3, [r7, #0]
 806090a:	4b09      	ldr	r3, [pc, #36]	; (8060930 <HAL_MspInit+0x4c>)
 806090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806090e:	4a08      	ldr	r2, [pc, #32]	; (8060930 <HAL_MspInit+0x4c>)
 8060910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8060914:	6413      	str	r3, [r2, #64]	; 0x40
 8060916:	4b06      	ldr	r3, [pc, #24]	; (8060930 <HAL_MspInit+0x4c>)
 8060918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 806091e:	603b      	str	r3, [r7, #0]
 8060920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8060922:	bf00      	nop
 8060924:	370c      	adds	r7, #12
 8060926:	46bd      	mov	sp, r7
 8060928:	f85d 7b04 	ldr.w	r7, [sp], #4
 806092c:	4770      	bx	lr
 806092e:	bf00      	nop
 8060930:	40023800 	.word	0x40023800

08060934 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8060934:	b580      	push	{r7, lr}
 8060936:	b08e      	sub	sp, #56	; 0x38
 8060938:	af00      	add	r7, sp, #0
 806093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8060940:	2200      	movs	r2, #0
 8060942:	601a      	str	r2, [r3, #0]
 8060944:	605a      	str	r2, [r3, #4]
 8060946:	609a      	str	r2, [r3, #8]
 8060948:	60da      	str	r2, [r3, #12]
 806094a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 806094c:	687b      	ldr	r3, [r7, #4]
 806094e:	681b      	ldr	r3, [r3, #0]
 8060950:	4a55      	ldr	r2, [pc, #340]	; (8060aa8 <HAL_ETH_MspInit+0x174>)
 8060952:	4293      	cmp	r3, r2
 8060954:	f040 80a4 	bne.w	8060aa0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8060958:	2300      	movs	r3, #0
 806095a:	623b      	str	r3, [r7, #32]
 806095c:	4b53      	ldr	r3, [pc, #332]	; (8060aac <HAL_ETH_MspInit+0x178>)
 806095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060960:	4a52      	ldr	r2, [pc, #328]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8060966:	6313      	str	r3, [r2, #48]	; 0x30
 8060968:	4b50      	ldr	r3, [pc, #320]	; (8060aac <HAL_ETH_MspInit+0x178>)
 806096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8060970:	623b      	str	r3, [r7, #32]
 8060972:	6a3b      	ldr	r3, [r7, #32]
 8060974:	2300      	movs	r3, #0
 8060976:	61fb      	str	r3, [r7, #28]
 8060978:	4b4c      	ldr	r3, [pc, #304]	; (8060aac <HAL_ETH_MspInit+0x178>)
 806097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806097c:	4a4b      	ldr	r2, [pc, #300]	; (8060aac <HAL_ETH_MspInit+0x178>)
 806097e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8060982:	6313      	str	r3, [r2, #48]	; 0x30
 8060984:	4b49      	ldr	r3, [pc, #292]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 806098c:	61fb      	str	r3, [r7, #28]
 806098e:	69fb      	ldr	r3, [r7, #28]
 8060990:	2300      	movs	r3, #0
 8060992:	61bb      	str	r3, [r7, #24]
 8060994:	4b45      	ldr	r3, [pc, #276]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060998:	4a44      	ldr	r2, [pc, #272]	; (8060aac <HAL_ETH_MspInit+0x178>)
 806099a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 806099e:	6313      	str	r3, [r2, #48]	; 0x30
 80609a0:	4b42      	ldr	r3, [pc, #264]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80609a8:	61bb      	str	r3, [r7, #24]
 80609aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80609ac:	2300      	movs	r3, #0
 80609ae:	617b      	str	r3, [r7, #20]
 80609b0:	4b3e      	ldr	r3, [pc, #248]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609b4:	4a3d      	ldr	r2, [pc, #244]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609b6:	f043 0304 	orr.w	r3, r3, #4
 80609ba:	6313      	str	r3, [r2, #48]	; 0x30
 80609bc:	4b3b      	ldr	r3, [pc, #236]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609c0:	f003 0304 	and.w	r3, r3, #4
 80609c4:	617b      	str	r3, [r7, #20]
 80609c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80609c8:	2300      	movs	r3, #0
 80609ca:	613b      	str	r3, [r7, #16]
 80609cc:	4b37      	ldr	r3, [pc, #220]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609d0:	4a36      	ldr	r2, [pc, #216]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609d2:	f043 0301 	orr.w	r3, r3, #1
 80609d6:	6313      	str	r3, [r2, #48]	; 0x30
 80609d8:	4b34      	ldr	r3, [pc, #208]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609dc:	f003 0301 	and.w	r3, r3, #1
 80609e0:	613b      	str	r3, [r7, #16]
 80609e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80609e4:	2300      	movs	r3, #0
 80609e6:	60fb      	str	r3, [r7, #12]
 80609e8:	4b30      	ldr	r3, [pc, #192]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609ec:	4a2f      	ldr	r2, [pc, #188]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609ee:	f043 0302 	orr.w	r3, r3, #2
 80609f2:	6313      	str	r3, [r2, #48]	; 0x30
 80609f4:	4b2d      	ldr	r3, [pc, #180]	; (8060aac <HAL_ETH_MspInit+0x178>)
 80609f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80609f8:	f003 0302 	and.w	r3, r3, #2
 80609fc:	60fb      	str	r3, [r7, #12]
 80609fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8060a00:	2300      	movs	r3, #0
 8060a02:	60bb      	str	r3, [r7, #8]
 8060a04:	4b29      	ldr	r3, [pc, #164]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060a08:	4a28      	ldr	r2, [pc, #160]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8060a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8060a10:	4b26      	ldr	r3, [pc, #152]	; (8060aac <HAL_ETH_MspInit+0x178>)
 8060a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8060a18:	60bb      	str	r3, [r7, #8]
 8060a1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8060a1c:	2332      	movs	r3, #50	; 0x32
 8060a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060a20:	2302      	movs	r3, #2
 8060a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060a24:	2300      	movs	r3, #0
 8060a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060a28:	2303      	movs	r3, #3
 8060a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8060a2c:	230b      	movs	r3, #11
 8060a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8060a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8060a34:	4619      	mov	r1, r3
 8060a36:	481e      	ldr	r0, [pc, #120]	; (8060ab0 <HAL_ETH_MspInit+0x17c>)
 8060a38:	f000 fe2a 	bl	8061690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8060a3c:	2386      	movs	r3, #134	; 0x86
 8060a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060a40:	2302      	movs	r3, #2
 8060a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060a44:	2300      	movs	r3, #0
 8060a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060a48:	2303      	movs	r3, #3
 8060a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8060a4c:	230b      	movs	r3, #11
 8060a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8060a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8060a54:	4619      	mov	r1, r3
 8060a56:	4817      	ldr	r0, [pc, #92]	; (8060ab4 <HAL_ETH_MspInit+0x180>)
 8060a58:	f000 fe1a 	bl	8061690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8060a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8060a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060a62:	2302      	movs	r3, #2
 8060a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060a66:	2300      	movs	r3, #0
 8060a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060a6a:	2303      	movs	r3, #3
 8060a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8060a6e:	230b      	movs	r3, #11
 8060a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8060a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8060a76:	4619      	mov	r1, r3
 8060a78:	480f      	ldr	r0, [pc, #60]	; (8060ab8 <HAL_ETH_MspInit+0x184>)
 8060a7a:	f000 fe09 	bl	8061690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8060a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8060a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060a84:	2302      	movs	r3, #2
 8060a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060a88:	2300      	movs	r3, #0
 8060a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060a8c:	2303      	movs	r3, #3
 8060a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8060a90:	230b      	movs	r3, #11
 8060a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8060a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8060a98:	4619      	mov	r1, r3
 8060a9a:	4808      	ldr	r0, [pc, #32]	; (8060abc <HAL_ETH_MspInit+0x188>)
 8060a9c:	f000 fdf8 	bl	8061690 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8060aa0:	bf00      	nop
 8060aa2:	3738      	adds	r7, #56	; 0x38
 8060aa4:	46bd      	mov	sp, r7
 8060aa6:	bd80      	pop	{r7, pc}
 8060aa8:	40028000 	.word	0x40028000
 8060aac:	40023800 	.word	0x40023800
 8060ab0:	40020800 	.word	0x40020800
 8060ab4:	40020000 	.word	0x40020000
 8060ab8:	40020400 	.word	0x40020400
 8060abc:	40021800 	.word	0x40021800

08060ac0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8060ac0:	b480      	push	{r7}
 8060ac2:	b085      	sub	sp, #20
 8060ac4:	af00      	add	r7, sp, #0
 8060ac6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8060ac8:	687b      	ldr	r3, [r7, #4]
 8060aca:	681b      	ldr	r3, [r3, #0]
 8060acc:	4a0b      	ldr	r2, [pc, #44]	; (8060afc <HAL_RNG_MspInit+0x3c>)
 8060ace:	4293      	cmp	r3, r2
 8060ad0:	d10d      	bne.n	8060aee <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8060ad2:	2300      	movs	r3, #0
 8060ad4:	60fb      	str	r3, [r7, #12]
 8060ad6:	4b0a      	ldr	r3, [pc, #40]	; (8060b00 <HAL_RNG_MspInit+0x40>)
 8060ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8060ada:	4a09      	ldr	r2, [pc, #36]	; (8060b00 <HAL_RNG_MspInit+0x40>)
 8060adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8060ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8060ae2:	4b07      	ldr	r3, [pc, #28]	; (8060b00 <HAL_RNG_MspInit+0x40>)
 8060ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8060ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8060aea:	60fb      	str	r3, [r7, #12]
 8060aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8060aee:	bf00      	nop
 8060af0:	3714      	adds	r7, #20
 8060af2:	46bd      	mov	sp, r7
 8060af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060af8:	4770      	bx	lr
 8060afa:	bf00      	nop
 8060afc:	50060800 	.word	0x50060800
 8060b00:	40023800 	.word	0x40023800

08060b04 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8060b04:	b480      	push	{r7}
 8060b06:	b083      	sub	sp, #12
 8060b08:	af00      	add	r7, sp, #0
 8060b0a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8060b0c:	687b      	ldr	r3, [r7, #4]
 8060b0e:	681b      	ldr	r3, [r3, #0]
 8060b10:	4a07      	ldr	r2, [pc, #28]	; (8060b30 <HAL_RNG_MspDeInit+0x2c>)
 8060b12:	4293      	cmp	r3, r2
 8060b14:	d105      	bne.n	8060b22 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8060b16:	4b07      	ldr	r3, [pc, #28]	; (8060b34 <HAL_RNG_MspDeInit+0x30>)
 8060b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8060b1a:	4a06      	ldr	r2, [pc, #24]	; (8060b34 <HAL_RNG_MspDeInit+0x30>)
 8060b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8060b20:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8060b22:	bf00      	nop
 8060b24:	370c      	adds	r7, #12
 8060b26:	46bd      	mov	sp, r7
 8060b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060b2c:	4770      	bx	lr
 8060b2e:	bf00      	nop
 8060b30:	50060800 	.word	0x50060800
 8060b34:	40023800 	.word	0x40023800

08060b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8060b38:	b580      	push	{r7, lr}
 8060b3a:	b08a      	sub	sp, #40	; 0x28
 8060b3c:	af00      	add	r7, sp, #0
 8060b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060b40:	f107 0314 	add.w	r3, r7, #20
 8060b44:	2200      	movs	r2, #0
 8060b46:	601a      	str	r2, [r3, #0]
 8060b48:	605a      	str	r2, [r3, #4]
 8060b4a:	609a      	str	r2, [r3, #8]
 8060b4c:	60da      	str	r2, [r3, #12]
 8060b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8060b50:	687b      	ldr	r3, [r7, #4]
 8060b52:	681b      	ldr	r3, [r3, #0]
 8060b54:	4a19      	ldr	r2, [pc, #100]	; (8060bbc <HAL_UART_MspInit+0x84>)
 8060b56:	4293      	cmp	r3, r2
 8060b58:	d12c      	bne.n	8060bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8060b5a:	2300      	movs	r3, #0
 8060b5c:	613b      	str	r3, [r7, #16]
 8060b5e:	4b18      	ldr	r3, [pc, #96]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060b62:	4a17      	ldr	r2, [pc, #92]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8060b68:	6413      	str	r3, [r2, #64]	; 0x40
 8060b6a:	4b15      	ldr	r3, [pc, #84]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8060b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8060b72:	613b      	str	r3, [r7, #16]
 8060b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8060b76:	2300      	movs	r3, #0
 8060b78:	60fb      	str	r3, [r7, #12]
 8060b7a:	4b11      	ldr	r3, [pc, #68]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060b7e:	4a10      	ldr	r2, [pc, #64]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b80:	f043 0308 	orr.w	r3, r3, #8
 8060b84:	6313      	str	r3, [r2, #48]	; 0x30
 8060b86:	4b0e      	ldr	r3, [pc, #56]	; (8060bc0 <HAL_UART_MspInit+0x88>)
 8060b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060b8a:	f003 0308 	and.w	r3, r3, #8
 8060b8e:	60fb      	str	r3, [r7, #12]
 8060b90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8060b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8060b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060b98:	2302      	movs	r3, #2
 8060b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060b9c:	2300      	movs	r3, #0
 8060b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060ba0:	2303      	movs	r3, #3
 8060ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8060ba4:	2307      	movs	r3, #7
 8060ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8060ba8:	f107 0314 	add.w	r3, r7, #20
 8060bac:	4619      	mov	r1, r3
 8060bae:	4805      	ldr	r0, [pc, #20]	; (8060bc4 <HAL_UART_MspInit+0x8c>)
 8060bb0:	f000 fd6e 	bl	8061690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8060bb4:	bf00      	nop
 8060bb6:	3728      	adds	r7, #40	; 0x28
 8060bb8:	46bd      	mov	sp, r7
 8060bba:	bd80      	pop	{r7, pc}
 8060bbc:	40004800 	.word	0x40004800
 8060bc0:	40023800 	.word	0x40023800
 8060bc4:	40020c00 	.word	0x40020c00

08060bc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8060bc8:	b580      	push	{r7, lr}
 8060bca:	b08a      	sub	sp, #40	; 0x28
 8060bcc:	af00      	add	r7, sp, #0
 8060bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060bd0:	f107 0314 	add.w	r3, r7, #20
 8060bd4:	2200      	movs	r2, #0
 8060bd6:	601a      	str	r2, [r3, #0]
 8060bd8:	605a      	str	r2, [r3, #4]
 8060bda:	609a      	str	r2, [r3, #8]
 8060bdc:	60da      	str	r2, [r3, #12]
 8060bde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8060be0:	687b      	ldr	r3, [r7, #4]
 8060be2:	681b      	ldr	r3, [r3, #0]
 8060be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8060be8:	d13f      	bne.n	8060c6a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8060bea:	2300      	movs	r3, #0
 8060bec:	613b      	str	r3, [r7, #16]
 8060bee:	4b21      	ldr	r3, [pc, #132]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060bf2:	4a20      	ldr	r2, [pc, #128]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060bf4:	f043 0301 	orr.w	r3, r3, #1
 8060bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8060bfa:	4b1e      	ldr	r3, [pc, #120]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060bfe:	f003 0301 	and.w	r3, r3, #1
 8060c02:	613b      	str	r3, [r7, #16]
 8060c04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8060c06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8060c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060c0c:	2302      	movs	r3, #2
 8060c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060c10:	2300      	movs	r3, #0
 8060c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8060c14:	2303      	movs	r3, #3
 8060c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8060c18:	230a      	movs	r3, #10
 8060c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8060c1c:	f107 0314 	add.w	r3, r7, #20
 8060c20:	4619      	mov	r1, r3
 8060c22:	4815      	ldr	r0, [pc, #84]	; (8060c78 <HAL_PCD_MspInit+0xb0>)
 8060c24:	f000 fd34 	bl	8061690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8060c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8060c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8060c2e:	2300      	movs	r3, #0
 8060c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060c32:	2300      	movs	r3, #0
 8060c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8060c36:	f107 0314 	add.w	r3, r7, #20
 8060c3a:	4619      	mov	r1, r3
 8060c3c:	480e      	ldr	r0, [pc, #56]	; (8060c78 <HAL_PCD_MspInit+0xb0>)
 8060c3e:	f000 fd27 	bl	8061690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8060c42:	4b0c      	ldr	r3, [pc, #48]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8060c46:	4a0b      	ldr	r2, [pc, #44]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8060c4c:	6353      	str	r3, [r2, #52]	; 0x34
 8060c4e:	2300      	movs	r3, #0
 8060c50:	60fb      	str	r3, [r7, #12]
 8060c52:	4b08      	ldr	r3, [pc, #32]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8060c56:	4a07      	ldr	r2, [pc, #28]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8060c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8060c5e:	4b05      	ldr	r3, [pc, #20]	; (8060c74 <HAL_PCD_MspInit+0xac>)
 8060c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8060c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8060c66:	60fb      	str	r3, [r7, #12]
 8060c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8060c6a:	bf00      	nop
 8060c6c:	3728      	adds	r7, #40	; 0x28
 8060c6e:	46bd      	mov	sp, r7
 8060c70:	bd80      	pop	{r7, pc}
 8060c72:	bf00      	nop
 8060c74:	40023800 	.word	0x40023800
 8060c78:	40020000 	.word	0x40020000

08060c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8060c7c:	b480      	push	{r7}
 8060c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8060c80:	e7fe      	b.n	8060c80 <NMI_Handler+0x4>

08060c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8060c82:	b480      	push	{r7}
 8060c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8060c86:	e7fe      	b.n	8060c86 <HardFault_Handler+0x4>

08060c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8060c88:	b480      	push	{r7}
 8060c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8060c8c:	e7fe      	b.n	8060c8c <MemManage_Handler+0x4>

08060c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8060c8e:	b480      	push	{r7}
 8060c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8060c92:	e7fe      	b.n	8060c92 <BusFault_Handler+0x4>

08060c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8060c94:	b480      	push	{r7}
 8060c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8060c98:	e7fe      	b.n	8060c98 <UsageFault_Handler+0x4>

08060c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8060c9a:	b480      	push	{r7}
 8060c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8060c9e:	bf00      	nop
 8060ca0:	46bd      	mov	sp, r7
 8060ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060ca6:	4770      	bx	lr

08060ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8060ca8:	b480      	push	{r7}
 8060caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8060cac:	bf00      	nop
 8060cae:	46bd      	mov	sp, r7
 8060cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060cb4:	4770      	bx	lr

08060cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8060cb6:	b480      	push	{r7}
 8060cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8060cba:	bf00      	nop
 8060cbc:	46bd      	mov	sp, r7
 8060cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060cc2:	4770      	bx	lr

08060cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8060cc4:	b580      	push	{r7, lr}
 8060cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8060cc8:	f000 f890 	bl	8060dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8060ccc:	bf00      	nop
 8060cce:	bd80      	pop	{r7, pc}

08060cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8060cd0:	b480      	push	{r7}
 8060cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8060cd4:	4b06      	ldr	r3, [pc, #24]	; (8060cf0 <SystemInit+0x20>)
 8060cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8060cda:	4a05      	ldr	r2, [pc, #20]	; (8060cf0 <SystemInit+0x20>)
 8060cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8060ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8060ce4:	bf00      	nop
 8060ce6:	46bd      	mov	sp, r7
 8060ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060cec:	4770      	bx	lr
 8060cee:	bf00      	nop
 8060cf0:	e000ed00 	.word	0xe000ed00

08060cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8060cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8060d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8060cf8:	480d      	ldr	r0, [pc, #52]	; (8060d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8060cfa:	490e      	ldr	r1, [pc, #56]	; (8060d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8060cfc:	4a0e      	ldr	r2, [pc, #56]	; (8060d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8060cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8060d00:	e002      	b.n	8060d08 <LoopCopyDataInit>

08060d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8060d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8060d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8060d06:	3304      	adds	r3, #4

08060d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8060d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8060d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8060d0c:	d3f9      	bcc.n	8060d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8060d0e:	4a0b      	ldr	r2, [pc, #44]	; (8060d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8060d10:	4c0b      	ldr	r4, [pc, #44]	; (8060d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8060d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8060d14:	e001      	b.n	8060d1a <LoopFillZerobss>

08060d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8060d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8060d18:	3204      	adds	r2, #4

08060d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8060d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8060d1c:	d3fb      	bcc.n	8060d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8060d1e:	f7ff ffd7 	bl	8060cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8060d22:	f002 fa61 	bl	80631e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8060d26:	f7ff fbe3 	bl	80604f0 <main>
  bx  lr    
 8060d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8060d2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8060d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8060d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8060d38:	08063280 	.word	0x08063280
  ldr r2, =_sbss
 8060d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8060d40:	200007bc 	.word	0x200007bc

08060d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8060d44:	e7fe      	b.n	8060d44 <ADC_IRQHandler>
	...

08060d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8060d48:	b580      	push	{r7, lr}
 8060d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8060d4c:	4b0e      	ldr	r3, [pc, #56]	; (8060d88 <HAL_Init+0x40>)
 8060d4e:	681b      	ldr	r3, [r3, #0]
 8060d50:	4a0d      	ldr	r2, [pc, #52]	; (8060d88 <HAL_Init+0x40>)
 8060d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8060d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8060d58:	4b0b      	ldr	r3, [pc, #44]	; (8060d88 <HAL_Init+0x40>)
 8060d5a:	681b      	ldr	r3, [r3, #0]
 8060d5c:	4a0a      	ldr	r2, [pc, #40]	; (8060d88 <HAL_Init+0x40>)
 8060d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8060d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8060d64:	4b08      	ldr	r3, [pc, #32]	; (8060d88 <HAL_Init+0x40>)
 8060d66:	681b      	ldr	r3, [r3, #0]
 8060d68:	4a07      	ldr	r2, [pc, #28]	; (8060d88 <HAL_Init+0x40>)
 8060d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8060d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8060d70:	2003      	movs	r0, #3
 8060d72:	f000 f931 	bl	8060fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8060d76:	2000      	movs	r0, #0
 8060d78:	f000 f808 	bl	8060d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8060d7c:	f7ff fdb2 	bl	80608e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8060d80:	2300      	movs	r3, #0
}
 8060d82:	4618      	mov	r0, r3
 8060d84:	bd80      	pop	{r7, pc}
 8060d86:	bf00      	nop
 8060d88:	40023c00 	.word	0x40023c00

08060d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8060d8c:	b580      	push	{r7, lr}
 8060d8e:	b082      	sub	sp, #8
 8060d90:	af00      	add	r7, sp, #0
 8060d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8060d94:	4b12      	ldr	r3, [pc, #72]	; (8060de0 <HAL_InitTick+0x54>)
 8060d96:	681a      	ldr	r2, [r3, #0]
 8060d98:	4b12      	ldr	r3, [pc, #72]	; (8060de4 <HAL_InitTick+0x58>)
 8060d9a:	781b      	ldrb	r3, [r3, #0]
 8060d9c:	4619      	mov	r1, r3
 8060d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8060da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8060da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8060daa:	4618      	mov	r0, r3
 8060dac:	f000 f93b 	bl	8061026 <HAL_SYSTICK_Config>
 8060db0:	4603      	mov	r3, r0
 8060db2:	2b00      	cmp	r3, #0
 8060db4:	d001      	beq.n	8060dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8060db6:	2301      	movs	r3, #1
 8060db8:	e00e      	b.n	8060dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8060dba:	687b      	ldr	r3, [r7, #4]
 8060dbc:	2b0f      	cmp	r3, #15
 8060dbe:	d80a      	bhi.n	8060dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8060dc0:	2200      	movs	r2, #0
 8060dc2:	6879      	ldr	r1, [r7, #4]
 8060dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8060dc8:	f000 f911 	bl	8060fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8060dcc:	4a06      	ldr	r2, [pc, #24]	; (8060de8 <HAL_InitTick+0x5c>)
 8060dce:	687b      	ldr	r3, [r7, #4]
 8060dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8060dd2:	2300      	movs	r3, #0
 8060dd4:	e000      	b.n	8060dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8060dd6:	2301      	movs	r3, #1
}
 8060dd8:	4618      	mov	r0, r3
 8060dda:	3708      	adds	r7, #8
 8060ddc:	46bd      	mov	sp, r7
 8060dde:	bd80      	pop	{r7, pc}
 8060de0:	20000000 	.word	0x20000000
 8060de4:	20000008 	.word	0x20000008
 8060de8:	20000004 	.word	0x20000004

08060dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8060dec:	b480      	push	{r7}
 8060dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8060df0:	4b06      	ldr	r3, [pc, #24]	; (8060e0c <HAL_IncTick+0x20>)
 8060df2:	781b      	ldrb	r3, [r3, #0]
 8060df4:	461a      	mov	r2, r3
 8060df6:	4b06      	ldr	r3, [pc, #24]	; (8060e10 <HAL_IncTick+0x24>)
 8060df8:	681b      	ldr	r3, [r3, #0]
 8060dfa:	4413      	add	r3, r2
 8060dfc:	4a04      	ldr	r2, [pc, #16]	; (8060e10 <HAL_IncTick+0x24>)
 8060dfe:	6013      	str	r3, [r2, #0]
}
 8060e00:	bf00      	nop
 8060e02:	46bd      	mov	sp, r7
 8060e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e08:	4770      	bx	lr
 8060e0a:	bf00      	nop
 8060e0c:	20000008 	.word	0x20000008
 8060e10:	200007b8 	.word	0x200007b8

08060e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8060e14:	b480      	push	{r7}
 8060e16:	af00      	add	r7, sp, #0
  return uwTick;
 8060e18:	4b03      	ldr	r3, [pc, #12]	; (8060e28 <HAL_GetTick+0x14>)
 8060e1a:	681b      	ldr	r3, [r3, #0]
}
 8060e1c:	4618      	mov	r0, r3
 8060e1e:	46bd      	mov	sp, r7
 8060e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e24:	4770      	bx	lr
 8060e26:	bf00      	nop
 8060e28:	200007b8 	.word	0x200007b8

08060e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8060e2c:	b580      	push	{r7, lr}
 8060e2e:	b084      	sub	sp, #16
 8060e30:	af00      	add	r7, sp, #0
 8060e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8060e34:	f7ff ffee 	bl	8060e14 <HAL_GetTick>
 8060e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8060e3a:	687b      	ldr	r3, [r7, #4]
 8060e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8060e3e:	68fb      	ldr	r3, [r7, #12]
 8060e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8060e44:	d005      	beq.n	8060e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8060e46:	4b0a      	ldr	r3, [pc, #40]	; (8060e70 <HAL_Delay+0x44>)
 8060e48:	781b      	ldrb	r3, [r3, #0]
 8060e4a:	461a      	mov	r2, r3
 8060e4c:	68fb      	ldr	r3, [r7, #12]
 8060e4e:	4413      	add	r3, r2
 8060e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8060e52:	bf00      	nop
 8060e54:	f7ff ffde 	bl	8060e14 <HAL_GetTick>
 8060e58:	4602      	mov	r2, r0
 8060e5a:	68bb      	ldr	r3, [r7, #8]
 8060e5c:	1ad3      	subs	r3, r2, r3
 8060e5e:	68fa      	ldr	r2, [r7, #12]
 8060e60:	429a      	cmp	r2, r3
 8060e62:	d8f7      	bhi.n	8060e54 <HAL_Delay+0x28>
  {
  }
}
 8060e64:	bf00      	nop
 8060e66:	bf00      	nop
 8060e68:	3710      	adds	r7, #16
 8060e6a:	46bd      	mov	sp, r7
 8060e6c:	bd80      	pop	{r7, pc}
 8060e6e:	bf00      	nop
 8060e70:	20000008 	.word	0x20000008

08060e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060e74:	b480      	push	{r7}
 8060e76:	b085      	sub	sp, #20
 8060e78:	af00      	add	r7, sp, #0
 8060e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8060e7c:	687b      	ldr	r3, [r7, #4]
 8060e7e:	f003 0307 	and.w	r3, r3, #7
 8060e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8060e84:	4b0c      	ldr	r3, [pc, #48]	; (8060eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8060e86:	68db      	ldr	r3, [r3, #12]
 8060e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8060e8a:	68ba      	ldr	r2, [r7, #8]
 8060e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8060e90:	4013      	ands	r3, r2
 8060e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8060e94:	68fb      	ldr	r3, [r7, #12]
 8060e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8060e98:	68bb      	ldr	r3, [r7, #8]
 8060e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8060e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8060ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8060ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8060ea6:	4a04      	ldr	r2, [pc, #16]	; (8060eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8060ea8:	68bb      	ldr	r3, [r7, #8]
 8060eaa:	60d3      	str	r3, [r2, #12]
}
 8060eac:	bf00      	nop
 8060eae:	3714      	adds	r7, #20
 8060eb0:	46bd      	mov	sp, r7
 8060eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060eb6:	4770      	bx	lr
 8060eb8:	e000ed00 	.word	0xe000ed00

08060ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8060ebc:	b480      	push	{r7}
 8060ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8060ec0:	4b04      	ldr	r3, [pc, #16]	; (8060ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8060ec2:	68db      	ldr	r3, [r3, #12]
 8060ec4:	0a1b      	lsrs	r3, r3, #8
 8060ec6:	f003 0307 	and.w	r3, r3, #7
}
 8060eca:	4618      	mov	r0, r3
 8060ecc:	46bd      	mov	sp, r7
 8060ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060ed2:	4770      	bx	lr
 8060ed4:	e000ed00 	.word	0xe000ed00

08060ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8060ed8:	b480      	push	{r7}
 8060eda:	b083      	sub	sp, #12
 8060edc:	af00      	add	r7, sp, #0
 8060ede:	4603      	mov	r3, r0
 8060ee0:	6039      	str	r1, [r7, #0]
 8060ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8060ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060ee8:	2b00      	cmp	r3, #0
 8060eea:	db0a      	blt.n	8060f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060eec:	683b      	ldr	r3, [r7, #0]
 8060eee:	b2da      	uxtb	r2, r3
 8060ef0:	490c      	ldr	r1, [pc, #48]	; (8060f24 <__NVIC_SetPriority+0x4c>)
 8060ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060ef6:	0112      	lsls	r2, r2, #4
 8060ef8:	b2d2      	uxtb	r2, r2
 8060efa:	440b      	add	r3, r1
 8060efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8060f00:	e00a      	b.n	8060f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060f02:	683b      	ldr	r3, [r7, #0]
 8060f04:	b2da      	uxtb	r2, r3
 8060f06:	4908      	ldr	r1, [pc, #32]	; (8060f28 <__NVIC_SetPriority+0x50>)
 8060f08:	79fb      	ldrb	r3, [r7, #7]
 8060f0a:	f003 030f 	and.w	r3, r3, #15
 8060f0e:	3b04      	subs	r3, #4
 8060f10:	0112      	lsls	r2, r2, #4
 8060f12:	b2d2      	uxtb	r2, r2
 8060f14:	440b      	add	r3, r1
 8060f16:	761a      	strb	r2, [r3, #24]
}
 8060f18:	bf00      	nop
 8060f1a:	370c      	adds	r7, #12
 8060f1c:	46bd      	mov	sp, r7
 8060f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060f22:	4770      	bx	lr
 8060f24:	e000e100 	.word	0xe000e100
 8060f28:	e000ed00 	.word	0xe000ed00

08060f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8060f2c:	b480      	push	{r7}
 8060f2e:	b089      	sub	sp, #36	; 0x24
 8060f30:	af00      	add	r7, sp, #0
 8060f32:	60f8      	str	r0, [r7, #12]
 8060f34:	60b9      	str	r1, [r7, #8]
 8060f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8060f38:	68fb      	ldr	r3, [r7, #12]
 8060f3a:	f003 0307 	and.w	r3, r3, #7
 8060f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8060f40:	69fb      	ldr	r3, [r7, #28]
 8060f42:	f1c3 0307 	rsb	r3, r3, #7
 8060f46:	2b04      	cmp	r3, #4
 8060f48:	bf28      	it	cs
 8060f4a:	2304      	movcs	r3, #4
 8060f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8060f4e:	69fb      	ldr	r3, [r7, #28]
 8060f50:	3304      	adds	r3, #4
 8060f52:	2b06      	cmp	r3, #6
 8060f54:	d902      	bls.n	8060f5c <NVIC_EncodePriority+0x30>
 8060f56:	69fb      	ldr	r3, [r7, #28]
 8060f58:	3b03      	subs	r3, #3
 8060f5a:	e000      	b.n	8060f5e <NVIC_EncodePriority+0x32>
 8060f5c:	2300      	movs	r3, #0
 8060f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060f60:	f04f 32ff 	mov.w	r2, #4294967295
 8060f64:	69bb      	ldr	r3, [r7, #24]
 8060f66:	fa02 f303 	lsl.w	r3, r2, r3
 8060f6a:	43da      	mvns	r2, r3
 8060f6c:	68bb      	ldr	r3, [r7, #8]
 8060f6e:	401a      	ands	r2, r3
 8060f70:	697b      	ldr	r3, [r7, #20]
 8060f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8060f74:	f04f 31ff 	mov.w	r1, #4294967295
 8060f78:	697b      	ldr	r3, [r7, #20]
 8060f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8060f7e:	43d9      	mvns	r1, r3
 8060f80:	687b      	ldr	r3, [r7, #4]
 8060f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060f84:	4313      	orrs	r3, r2
         );
}
 8060f86:	4618      	mov	r0, r3
 8060f88:	3724      	adds	r7, #36	; 0x24
 8060f8a:	46bd      	mov	sp, r7
 8060f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060f90:	4770      	bx	lr
	...

08060f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8060f94:	b580      	push	{r7, lr}
 8060f96:	b082      	sub	sp, #8
 8060f98:	af00      	add	r7, sp, #0
 8060f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8060f9c:	687b      	ldr	r3, [r7, #4]
 8060f9e:	3b01      	subs	r3, #1
 8060fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8060fa4:	d301      	bcc.n	8060faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8060fa6:	2301      	movs	r3, #1
 8060fa8:	e00f      	b.n	8060fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8060faa:	4a0a      	ldr	r2, [pc, #40]	; (8060fd4 <SysTick_Config+0x40>)
 8060fac:	687b      	ldr	r3, [r7, #4]
 8060fae:	3b01      	subs	r3, #1
 8060fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8060fb2:	210f      	movs	r1, #15
 8060fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8060fb8:	f7ff ff8e 	bl	8060ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8060fbc:	4b05      	ldr	r3, [pc, #20]	; (8060fd4 <SysTick_Config+0x40>)
 8060fbe:	2200      	movs	r2, #0
 8060fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8060fc2:	4b04      	ldr	r3, [pc, #16]	; (8060fd4 <SysTick_Config+0x40>)
 8060fc4:	2207      	movs	r2, #7
 8060fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8060fc8:	2300      	movs	r3, #0
}
 8060fca:	4618      	mov	r0, r3
 8060fcc:	3708      	adds	r7, #8
 8060fce:	46bd      	mov	sp, r7
 8060fd0:	bd80      	pop	{r7, pc}
 8060fd2:	bf00      	nop
 8060fd4:	e000e010 	.word	0xe000e010

08060fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060fd8:	b580      	push	{r7, lr}
 8060fda:	b082      	sub	sp, #8
 8060fdc:	af00      	add	r7, sp, #0
 8060fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8060fe0:	6878      	ldr	r0, [r7, #4]
 8060fe2:	f7ff ff47 	bl	8060e74 <__NVIC_SetPriorityGrouping>
}
 8060fe6:	bf00      	nop
 8060fe8:	3708      	adds	r7, #8
 8060fea:	46bd      	mov	sp, r7
 8060fec:	bd80      	pop	{r7, pc}

08060fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8060fee:	b580      	push	{r7, lr}
 8060ff0:	b086      	sub	sp, #24
 8060ff2:	af00      	add	r7, sp, #0
 8060ff4:	4603      	mov	r3, r0
 8060ff6:	60b9      	str	r1, [r7, #8]
 8060ff8:	607a      	str	r2, [r7, #4]
 8060ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8060ffc:	2300      	movs	r3, #0
 8060ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8061000:	f7ff ff5c 	bl	8060ebc <__NVIC_GetPriorityGrouping>
 8061004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8061006:	687a      	ldr	r2, [r7, #4]
 8061008:	68b9      	ldr	r1, [r7, #8]
 806100a:	6978      	ldr	r0, [r7, #20]
 806100c:	f7ff ff8e 	bl	8060f2c <NVIC_EncodePriority>
 8061010:	4602      	mov	r2, r0
 8061012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8061016:	4611      	mov	r1, r2
 8061018:	4618      	mov	r0, r3
 806101a:	f7ff ff5d 	bl	8060ed8 <__NVIC_SetPriority>
}
 806101e:	bf00      	nop
 8061020:	3718      	adds	r7, #24
 8061022:	46bd      	mov	sp, r7
 8061024:	bd80      	pop	{r7, pc}

08061026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8061026:	b580      	push	{r7, lr}
 8061028:	b082      	sub	sp, #8
 806102a:	af00      	add	r7, sp, #0
 806102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 806102e:	6878      	ldr	r0, [r7, #4]
 8061030:	f7ff ffb0 	bl	8060f94 <SysTick_Config>
 8061034:	4603      	mov	r3, r0
}
 8061036:	4618      	mov	r0, r3
 8061038:	3708      	adds	r7, #8
 806103a:	46bd      	mov	sp, r7
 806103c:	bd80      	pop	{r7, pc}
	...

08061040 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8061040:	b580      	push	{r7, lr}
 8061042:	b084      	sub	sp, #16
 8061044:	af00      	add	r7, sp, #0
 8061046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8061048:	687b      	ldr	r3, [r7, #4]
 806104a:	2b00      	cmp	r3, #0
 806104c:	d101      	bne.n	8061052 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 806104e:	2301      	movs	r3, #1
 8061050:	e06c      	b.n	806112c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8061052:	687b      	ldr	r3, [r7, #4]
 8061054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8061058:	2b00      	cmp	r3, #0
 806105a:	d106      	bne.n	806106a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 806105c:	687b      	ldr	r3, [r7, #4]
 806105e:	2223      	movs	r2, #35	; 0x23
 8061060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8061064:	6878      	ldr	r0, [r7, #4]
 8061066:	f7ff fc65 	bl	8060934 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 806106a:	2300      	movs	r3, #0
 806106c:	60bb      	str	r3, [r7, #8]
 806106e:	4b31      	ldr	r3, [pc, #196]	; (8061134 <HAL_ETH_Init+0xf4>)
 8061070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8061072:	4a30      	ldr	r2, [pc, #192]	; (8061134 <HAL_ETH_Init+0xf4>)
 8061074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8061078:	6453      	str	r3, [r2, #68]	; 0x44
 806107a:	4b2e      	ldr	r3, [pc, #184]	; (8061134 <HAL_ETH_Init+0xf4>)
 806107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8061082:	60bb      	str	r3, [r7, #8]
 8061084:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8061086:	4b2c      	ldr	r3, [pc, #176]	; (8061138 <HAL_ETH_Init+0xf8>)
 8061088:	685b      	ldr	r3, [r3, #4]
 806108a:	4a2b      	ldr	r2, [pc, #172]	; (8061138 <HAL_ETH_Init+0xf8>)
 806108c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8061090:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8061092:	4b29      	ldr	r3, [pc, #164]	; (8061138 <HAL_ETH_Init+0xf8>)
 8061094:	685a      	ldr	r2, [r3, #4]
 8061096:	687b      	ldr	r3, [r7, #4]
 8061098:	689b      	ldr	r3, [r3, #8]
 806109a:	4927      	ldr	r1, [pc, #156]	; (8061138 <HAL_ETH_Init+0xf8>)
 806109c:	4313      	orrs	r3, r2
 806109e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80610a0:	4b25      	ldr	r3, [pc, #148]	; (8061138 <HAL_ETH_Init+0xf8>)
 80610a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80610a4:	687b      	ldr	r3, [r7, #4]
 80610a6:	681b      	ldr	r3, [r3, #0]
 80610a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80610ac:	681b      	ldr	r3, [r3, #0]
 80610ae:	687a      	ldr	r2, [r7, #4]
 80610b0:	6812      	ldr	r2, [r2, #0]
 80610b2:	f043 0301 	orr.w	r3, r3, #1
 80610b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80610ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80610bc:	f7ff feaa 	bl	8060e14 <HAL_GetTick>
 80610c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80610c2:	e011      	b.n	80610e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80610c4:	f7ff fea6 	bl	8060e14 <HAL_GetTick>
 80610c8:	4602      	mov	r2, r0
 80610ca:	68fb      	ldr	r3, [r7, #12]
 80610cc:	1ad3      	subs	r3, r2, r3
 80610ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80610d2:	d909      	bls.n	80610e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80610d4:	687b      	ldr	r3, [r7, #4]
 80610d6:	2204      	movs	r2, #4
 80610d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80610dc:	687b      	ldr	r3, [r7, #4]
 80610de:	22e0      	movs	r2, #224	; 0xe0
 80610e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80610e4:	2301      	movs	r3, #1
 80610e6:	e021      	b.n	806112c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80610e8:	687b      	ldr	r3, [r7, #4]
 80610ea:	681b      	ldr	r3, [r3, #0]
 80610ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80610f0:	681b      	ldr	r3, [r3, #0]
 80610f2:	f003 0301 	and.w	r3, r3, #1
 80610f6:	2b00      	cmp	r3, #0
 80610f8:	d1e4      	bne.n	80610c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80610fa:	6878      	ldr	r0, [r7, #4]
 80610fc:	f000 f958 	bl	80613b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8061100:	6878      	ldr	r0, [r7, #4]
 8061102:	f000 f9ff 	bl	8061504 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8061106:	6878      	ldr	r0, [r7, #4]
 8061108:	f000 fa55 	bl	80615b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 806110c:	687b      	ldr	r3, [r7, #4]
 806110e:	685b      	ldr	r3, [r3, #4]
 8061110:	461a      	mov	r2, r3
 8061112:	2100      	movs	r1, #0
 8061114:	6878      	ldr	r0, [r7, #4]
 8061116:	f000 f9bd 	bl	8061494 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 806111a:	687b      	ldr	r3, [r7, #4]
 806111c:	2200      	movs	r2, #0
 806111e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8061122:	687b      	ldr	r3, [r7, #4]
 8061124:	2210      	movs	r2, #16
 8061126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 806112a:	2300      	movs	r3, #0
}
 806112c:	4618      	mov	r0, r3
 806112e:	3710      	adds	r7, #16
 8061130:	46bd      	mov	sp, r7
 8061132:	bd80      	pop	{r7, pc}
 8061134:	40023800 	.word	0x40023800
 8061138:	40013800 	.word	0x40013800

0806113c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 806113c:	b580      	push	{r7, lr}
 806113e:	b084      	sub	sp, #16
 8061140:	af00      	add	r7, sp, #0
 8061142:	6078      	str	r0, [r7, #4]
 8061144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8061146:	687b      	ldr	r3, [r7, #4]
 8061148:	681b      	ldr	r3, [r3, #0]
 806114a:	681b      	ldr	r3, [r3, #0]
 806114c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 806114e:	68fa      	ldr	r2, [r7, #12]
 8061150:	4b51      	ldr	r3, [pc, #324]	; (8061298 <ETH_SetMACConfig+0x15c>)
 8061152:	4013      	ands	r3, r2
 8061154:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8061156:	683b      	ldr	r3, [r7, #0]
 8061158:	7c1b      	ldrb	r3, [r3, #16]
 806115a:	2b00      	cmp	r3, #0
 806115c:	d102      	bne.n	8061164 <ETH_SetMACConfig+0x28>
 806115e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8061162:	e000      	b.n	8061166 <ETH_SetMACConfig+0x2a>
 8061164:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8061166:	683b      	ldr	r3, [r7, #0]
 8061168:	7c5b      	ldrb	r3, [r3, #17]
 806116a:	2b00      	cmp	r3, #0
 806116c:	d102      	bne.n	8061174 <ETH_SetMACConfig+0x38>
 806116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8061172:	e000      	b.n	8061176 <ETH_SetMACConfig+0x3a>
 8061174:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8061176:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8061178:	683b      	ldr	r3, [r7, #0]
 806117a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 806117c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 806117e:	683b      	ldr	r3, [r7, #0]
 8061180:	7fdb      	ldrb	r3, [r3, #31]
 8061182:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8061184:	431a      	orrs	r2, r3
                        macconf->Speed |
 8061186:	683b      	ldr	r3, [r7, #0]
 8061188:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 806118a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 806118c:	683a      	ldr	r2, [r7, #0]
 806118e:	7f92      	ldrb	r2, [r2, #30]
 8061190:	2a00      	cmp	r2, #0
 8061192:	d102      	bne.n	806119a <ETH_SetMACConfig+0x5e>
 8061194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8061198:	e000      	b.n	806119c <ETH_SetMACConfig+0x60>
 806119a:	2200      	movs	r2, #0
                        macconf->Speed |
 806119c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 806119e:	683b      	ldr	r3, [r7, #0]
 80611a0:	7f1b      	ldrb	r3, [r3, #28]
 80611a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80611a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80611a6:	683b      	ldr	r3, [r7, #0]
 80611a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80611aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80611ac:	683b      	ldr	r3, [r7, #0]
 80611ae:	791b      	ldrb	r3, [r3, #4]
 80611b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80611b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80611b4:	683a      	ldr	r2, [r7, #0]
 80611b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80611ba:	2a00      	cmp	r2, #0
 80611bc:	d102      	bne.n	80611c4 <ETH_SetMACConfig+0x88>
 80611be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80611c2:	e000      	b.n	80611c6 <ETH_SetMACConfig+0x8a>
 80611c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80611c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80611c8:	683b      	ldr	r3, [r7, #0]
 80611ca:	7bdb      	ldrb	r3, [r3, #15]
 80611cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80611ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80611d0:	683b      	ldr	r3, [r7, #0]
 80611d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80611d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80611d6:	683b      	ldr	r3, [r7, #0]
 80611d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80611dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80611de:	4313      	orrs	r3, r2
 80611e0:	68fa      	ldr	r2, [r7, #12]
 80611e2:	4313      	orrs	r3, r2
 80611e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80611e6:	687b      	ldr	r3, [r7, #4]
 80611e8:	681b      	ldr	r3, [r3, #0]
 80611ea:	68fa      	ldr	r2, [r7, #12]
 80611ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80611ee:	687b      	ldr	r3, [r7, #4]
 80611f0:	681b      	ldr	r3, [r3, #0]
 80611f2:	681b      	ldr	r3, [r3, #0]
 80611f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80611f6:	2001      	movs	r0, #1
 80611f8:	f7ff fe18 	bl	8060e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80611fc:	687b      	ldr	r3, [r7, #4]
 80611fe:	681b      	ldr	r3, [r3, #0]
 8061200:	68fa      	ldr	r2, [r7, #12]
 8061202:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8061204:	687b      	ldr	r3, [r7, #4]
 8061206:	681b      	ldr	r3, [r3, #0]
 8061208:	699b      	ldr	r3, [r3, #24]
 806120a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 806120c:	68fa      	ldr	r2, [r7, #12]
 806120e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8061212:	4013      	ands	r3, r2
 8061214:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8061216:	683b      	ldr	r3, [r7, #0]
 8061218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 806121a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 806121c:	683a      	ldr	r2, [r7, #0]
 806121e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8061222:	2a00      	cmp	r2, #0
 8061224:	d101      	bne.n	806122a <ETH_SetMACConfig+0xee>
 8061226:	2280      	movs	r2, #128	; 0x80
 8061228:	e000      	b.n	806122c <ETH_SetMACConfig+0xf0>
 806122a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 806122c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 806122e:	683b      	ldr	r3, [r7, #0]
 8061230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8061232:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8061234:	683a      	ldr	r2, [r7, #0]
 8061236:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 806123a:	2a01      	cmp	r2, #1
 806123c:	d101      	bne.n	8061242 <ETH_SetMACConfig+0x106>
 806123e:	2208      	movs	r2, #8
 8061240:	e000      	b.n	8061244 <ETH_SetMACConfig+0x108>
 8061242:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8061244:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8061246:	683a      	ldr	r2, [r7, #0]
 8061248:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 806124c:	2a01      	cmp	r2, #1
 806124e:	d101      	bne.n	8061254 <ETH_SetMACConfig+0x118>
 8061250:	2204      	movs	r2, #4
 8061252:	e000      	b.n	8061256 <ETH_SetMACConfig+0x11a>
 8061254:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8061256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8061258:	683a      	ldr	r2, [r7, #0]
 806125a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 806125e:	2a01      	cmp	r2, #1
 8061260:	d101      	bne.n	8061266 <ETH_SetMACConfig+0x12a>
 8061262:	2202      	movs	r2, #2
 8061264:	e000      	b.n	8061268 <ETH_SetMACConfig+0x12c>
 8061266:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8061268:	4313      	orrs	r3, r2
 806126a:	68fa      	ldr	r2, [r7, #12]
 806126c:	4313      	orrs	r3, r2
 806126e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8061270:	687b      	ldr	r3, [r7, #4]
 8061272:	681b      	ldr	r3, [r3, #0]
 8061274:	68fa      	ldr	r2, [r7, #12]
 8061276:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8061278:	687b      	ldr	r3, [r7, #4]
 806127a:	681b      	ldr	r3, [r3, #0]
 806127c:	699b      	ldr	r3, [r3, #24]
 806127e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8061280:	2001      	movs	r0, #1
 8061282:	f7ff fdd3 	bl	8060e2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8061286:	687b      	ldr	r3, [r7, #4]
 8061288:	681b      	ldr	r3, [r3, #0]
 806128a:	68fa      	ldr	r2, [r7, #12]
 806128c:	619a      	str	r2, [r3, #24]
}
 806128e:	bf00      	nop
 8061290:	3710      	adds	r7, #16
 8061292:	46bd      	mov	sp, r7
 8061294:	bd80      	pop	{r7, pc}
 8061296:	bf00      	nop
 8061298:	ff20810f 	.word	0xff20810f

0806129c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 806129c:	b580      	push	{r7, lr}
 806129e:	b084      	sub	sp, #16
 80612a0:	af00      	add	r7, sp, #0
 80612a2:	6078      	str	r0, [r7, #4]
 80612a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80612a6:	687b      	ldr	r3, [r7, #4]
 80612a8:	681b      	ldr	r3, [r3, #0]
 80612aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80612ae:	699b      	ldr	r3, [r3, #24]
 80612b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80612b2:	68fa      	ldr	r2, [r7, #12]
 80612b4:	4b3d      	ldr	r3, [pc, #244]	; (80613ac <ETH_SetDMAConfig+0x110>)
 80612b6:	4013      	ands	r3, r2
 80612b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80612ba:	683b      	ldr	r3, [r7, #0]
 80612bc:	7b1b      	ldrb	r3, [r3, #12]
 80612be:	2b00      	cmp	r3, #0
 80612c0:	d102      	bne.n	80612c8 <ETH_SetDMAConfig+0x2c>
 80612c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80612c6:	e000      	b.n	80612ca <ETH_SetDMAConfig+0x2e>
 80612c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80612ca:	683b      	ldr	r3, [r7, #0]
 80612cc:	7b5b      	ldrb	r3, [r3, #13]
 80612ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80612d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80612d2:	683a      	ldr	r2, [r7, #0]
 80612d4:	7f52      	ldrb	r2, [r2, #29]
 80612d6:	2a00      	cmp	r2, #0
 80612d8:	d102      	bne.n	80612e0 <ETH_SetDMAConfig+0x44>
 80612da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80612de:	e000      	b.n	80612e2 <ETH_SetDMAConfig+0x46>
 80612e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80612e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80612e4:	683b      	ldr	r3, [r7, #0]
 80612e6:	7b9b      	ldrb	r3, [r3, #14]
 80612e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80612ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80612ec:	683b      	ldr	r3, [r7, #0]
 80612ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80612f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80612f2:	683b      	ldr	r3, [r7, #0]
 80612f4:	7f1b      	ldrb	r3, [r3, #28]
 80612f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80612f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80612fa:	683b      	ldr	r3, [r7, #0]
 80612fc:	7f9b      	ldrb	r3, [r3, #30]
 80612fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8061300:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8061302:	683b      	ldr	r3, [r7, #0]
 8061304:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8061306:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8061308:	683b      	ldr	r3, [r7, #0]
 806130a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 806130e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8061310:	4313      	orrs	r3, r2
 8061312:	68fa      	ldr	r2, [r7, #12]
 8061314:	4313      	orrs	r3, r2
 8061316:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8061318:	687b      	ldr	r3, [r7, #4]
 806131a:	681b      	ldr	r3, [r3, #0]
 806131c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8061320:	461a      	mov	r2, r3
 8061322:	68fb      	ldr	r3, [r7, #12]
 8061324:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8061326:	687b      	ldr	r3, [r7, #4]
 8061328:	681b      	ldr	r3, [r3, #0]
 806132a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 806132e:	699b      	ldr	r3, [r3, #24]
 8061330:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8061332:	2001      	movs	r0, #1
 8061334:	f7ff fd7a 	bl	8060e2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8061338:	687b      	ldr	r3, [r7, #4]
 806133a:	681b      	ldr	r3, [r3, #0]
 806133c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8061340:	461a      	mov	r2, r3
 8061342:	68fb      	ldr	r3, [r7, #12]
 8061344:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8061346:	683b      	ldr	r3, [r7, #0]
 8061348:	791b      	ldrb	r3, [r3, #4]
 806134a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 806134c:	683b      	ldr	r3, [r7, #0]
 806134e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8061350:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8061352:	683b      	ldr	r3, [r7, #0]
 8061354:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8061356:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8061358:	683b      	ldr	r3, [r7, #0]
 806135a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 806135c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 806135e:	683b      	ldr	r3, [r7, #0]
 8061360:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8061364:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8061366:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8061368:	683b      	ldr	r3, [r7, #0]
 806136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806136c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 806136e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8061370:	683b      	ldr	r3, [r7, #0]
 8061372:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8061374:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8061376:	687a      	ldr	r2, [r7, #4]
 8061378:	6812      	ldr	r2, [r2, #0]
 806137a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 806137e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8061382:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8061384:	687b      	ldr	r3, [r7, #4]
 8061386:	681b      	ldr	r3, [r3, #0]
 8061388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 806138c:	681b      	ldr	r3, [r3, #0]
 806138e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8061390:	2001      	movs	r0, #1
 8061392:	f7ff fd4b 	bl	8060e2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8061396:	687b      	ldr	r3, [r7, #4]
 8061398:	681b      	ldr	r3, [r3, #0]
 806139a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 806139e:	461a      	mov	r2, r3
 80613a0:	68fb      	ldr	r3, [r7, #12]
 80613a2:	6013      	str	r3, [r2, #0]
}
 80613a4:	bf00      	nop
 80613a6:	3710      	adds	r7, #16
 80613a8:	46bd      	mov	sp, r7
 80613aa:	bd80      	pop	{r7, pc}
 80613ac:	f8de3f23 	.word	0xf8de3f23

080613b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80613b0:	b580      	push	{r7, lr}
 80613b2:	b0a6      	sub	sp, #152	; 0x98
 80613b4:	af00      	add	r7, sp, #0
 80613b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80613b8:	2301      	movs	r3, #1
 80613ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80613be:	2301      	movs	r3, #1
 80613c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80613c4:	2300      	movs	r3, #0
 80613c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80613c8:	2300      	movs	r3, #0
 80613ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80613ce:	2301      	movs	r3, #1
 80613d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80613d4:	2300      	movs	r3, #0
 80613d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80613da:	2301      	movs	r3, #1
 80613dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80613e0:	2300      	movs	r3, #0
 80613e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80613e6:	2300      	movs	r3, #0
 80613e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80613ec:	2300      	movs	r3, #0
 80613ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80613f0:	2300      	movs	r3, #0
 80613f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80613f6:	2300      	movs	r3, #0
 80613f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80613fa:	2300      	movs	r3, #0
 80613fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8061400:	2300      	movs	r3, #0
 8061402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8061406:	2300      	movs	r3, #0
 8061408:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 806140c:	2300      	movs	r3, #0
 806140e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8061412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8061416:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8061418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 806141c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 806141e:	2300      	movs	r3, #0
 8061420:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8061424:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8061428:	4619      	mov	r1, r3
 806142a:	6878      	ldr	r0, [r7, #4]
 806142c:	f7ff fe86 	bl	806113c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8061430:	2301      	movs	r3, #1
 8061432:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8061434:	2301      	movs	r3, #1
 8061436:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8061438:	2301      	movs	r3, #1
 806143a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 806143e:	2301      	movs	r3, #1
 8061440:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8061442:	2300      	movs	r3, #0
 8061444:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8061446:	2300      	movs	r3, #0
 8061448:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 806144c:	2300      	movs	r3, #0
 806144e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8061452:	2300      	movs	r3, #0
 8061454:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8061456:	2301      	movs	r3, #1
 8061458:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 806145c:	2301      	movs	r3, #1
 806145e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8061460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8061464:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8061466:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 806146a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 806146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8061470:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8061472:	2301      	movs	r3, #1
 8061474:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8061478:	2300      	movs	r3, #0
 806147a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 806147c:	2300      	movs	r3, #0
 806147e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8061480:	f107 0308 	add.w	r3, r7, #8
 8061484:	4619      	mov	r1, r3
 8061486:	6878      	ldr	r0, [r7, #4]
 8061488:	f7ff ff08 	bl	806129c <ETH_SetDMAConfig>
}
 806148c:	bf00      	nop
 806148e:	3798      	adds	r7, #152	; 0x98
 8061490:	46bd      	mov	sp, r7
 8061492:	bd80      	pop	{r7, pc}

08061494 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8061494:	b480      	push	{r7}
 8061496:	b087      	sub	sp, #28
 8061498:	af00      	add	r7, sp, #0
 806149a:	60f8      	str	r0, [r7, #12]
 806149c:	60b9      	str	r1, [r7, #8]
 806149e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80614a0:	687b      	ldr	r3, [r7, #4]
 80614a2:	3305      	adds	r3, #5
 80614a4:	781b      	ldrb	r3, [r3, #0]
 80614a6:	021b      	lsls	r3, r3, #8
 80614a8:	687a      	ldr	r2, [r7, #4]
 80614aa:	3204      	adds	r2, #4
 80614ac:	7812      	ldrb	r2, [r2, #0]
 80614ae:	4313      	orrs	r3, r2
 80614b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80614b2:	68ba      	ldr	r2, [r7, #8]
 80614b4:	4b11      	ldr	r3, [pc, #68]	; (80614fc <ETH_MACAddressConfig+0x68>)
 80614b6:	4413      	add	r3, r2
 80614b8:	461a      	mov	r2, r3
 80614ba:	697b      	ldr	r3, [r7, #20]
 80614bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80614be:	687b      	ldr	r3, [r7, #4]
 80614c0:	3303      	adds	r3, #3
 80614c2:	781b      	ldrb	r3, [r3, #0]
 80614c4:	061a      	lsls	r2, r3, #24
 80614c6:	687b      	ldr	r3, [r7, #4]
 80614c8:	3302      	adds	r3, #2
 80614ca:	781b      	ldrb	r3, [r3, #0]
 80614cc:	041b      	lsls	r3, r3, #16
 80614ce:	431a      	orrs	r2, r3
 80614d0:	687b      	ldr	r3, [r7, #4]
 80614d2:	3301      	adds	r3, #1
 80614d4:	781b      	ldrb	r3, [r3, #0]
 80614d6:	021b      	lsls	r3, r3, #8
 80614d8:	4313      	orrs	r3, r2
 80614da:	687a      	ldr	r2, [r7, #4]
 80614dc:	7812      	ldrb	r2, [r2, #0]
 80614de:	4313      	orrs	r3, r2
 80614e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80614e2:	68ba      	ldr	r2, [r7, #8]
 80614e4:	4b06      	ldr	r3, [pc, #24]	; (8061500 <ETH_MACAddressConfig+0x6c>)
 80614e6:	4413      	add	r3, r2
 80614e8:	461a      	mov	r2, r3
 80614ea:	697b      	ldr	r3, [r7, #20]
 80614ec:	6013      	str	r3, [r2, #0]
}
 80614ee:	bf00      	nop
 80614f0:	371c      	adds	r7, #28
 80614f2:	46bd      	mov	sp, r7
 80614f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80614f8:	4770      	bx	lr
 80614fa:	bf00      	nop
 80614fc:	40028040 	.word	0x40028040
 8061500:	40028044 	.word	0x40028044

08061504 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8061504:	b480      	push	{r7}
 8061506:	b085      	sub	sp, #20
 8061508:	af00      	add	r7, sp, #0
 806150a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 806150c:	2300      	movs	r3, #0
 806150e:	60fb      	str	r3, [r7, #12]
 8061510:	e03e      	b.n	8061590 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8061512:	687b      	ldr	r3, [r7, #4]
 8061514:	68d9      	ldr	r1, [r3, #12]
 8061516:	68fa      	ldr	r2, [r7, #12]
 8061518:	4613      	mov	r3, r2
 806151a:	009b      	lsls	r3, r3, #2
 806151c:	4413      	add	r3, r2
 806151e:	00db      	lsls	r3, r3, #3
 8061520:	440b      	add	r3, r1
 8061522:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8061524:	68bb      	ldr	r3, [r7, #8]
 8061526:	2200      	movs	r2, #0
 8061528:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 806152a:	68bb      	ldr	r3, [r7, #8]
 806152c:	2200      	movs	r2, #0
 806152e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8061530:	68bb      	ldr	r3, [r7, #8]
 8061532:	2200      	movs	r2, #0
 8061534:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8061536:	68bb      	ldr	r3, [r7, #8]
 8061538:	2200      	movs	r2, #0
 806153a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 806153c:	68b9      	ldr	r1, [r7, #8]
 806153e:	687b      	ldr	r3, [r7, #4]
 8061540:	68fa      	ldr	r2, [r7, #12]
 8061542:	3206      	adds	r2, #6
 8061544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8061548:	68bb      	ldr	r3, [r7, #8]
 806154a:	681b      	ldr	r3, [r3, #0]
 806154c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8061550:	68bb      	ldr	r3, [r7, #8]
 8061552:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8061554:	68fb      	ldr	r3, [r7, #12]
 8061556:	2b02      	cmp	r3, #2
 8061558:	d80c      	bhi.n	8061574 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 806155a:	687b      	ldr	r3, [r7, #4]
 806155c:	68d9      	ldr	r1, [r3, #12]
 806155e:	68fb      	ldr	r3, [r7, #12]
 8061560:	1c5a      	adds	r2, r3, #1
 8061562:	4613      	mov	r3, r2
 8061564:	009b      	lsls	r3, r3, #2
 8061566:	4413      	add	r3, r2
 8061568:	00db      	lsls	r3, r3, #3
 806156a:	440b      	add	r3, r1
 806156c:	461a      	mov	r2, r3
 806156e:	68bb      	ldr	r3, [r7, #8]
 8061570:	60da      	str	r2, [r3, #12]
 8061572:	e004      	b.n	806157e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8061574:	687b      	ldr	r3, [r7, #4]
 8061576:	68db      	ldr	r3, [r3, #12]
 8061578:	461a      	mov	r2, r3
 806157a:	68bb      	ldr	r3, [r7, #8]
 806157c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 806157e:	68bb      	ldr	r3, [r7, #8]
 8061580:	681b      	ldr	r3, [r3, #0]
 8061582:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8061586:	68bb      	ldr	r3, [r7, #8]
 8061588:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 806158a:	68fb      	ldr	r3, [r7, #12]
 806158c:	3301      	adds	r3, #1
 806158e:	60fb      	str	r3, [r7, #12]
 8061590:	68fb      	ldr	r3, [r7, #12]
 8061592:	2b03      	cmp	r3, #3
 8061594:	d9bd      	bls.n	8061512 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8061596:	687b      	ldr	r3, [r7, #4]
 8061598:	2200      	movs	r2, #0
 806159a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 806159c:	687b      	ldr	r3, [r7, #4]
 806159e:	68da      	ldr	r2, [r3, #12]
 80615a0:	687b      	ldr	r3, [r7, #4]
 80615a2:	681b      	ldr	r3, [r3, #0]
 80615a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80615a8:	611a      	str	r2, [r3, #16]
}
 80615aa:	bf00      	nop
 80615ac:	3714      	adds	r7, #20
 80615ae:	46bd      	mov	sp, r7
 80615b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80615b4:	4770      	bx	lr

080615b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80615b6:	b480      	push	{r7}
 80615b8:	b085      	sub	sp, #20
 80615ba:	af00      	add	r7, sp, #0
 80615bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80615be:	2300      	movs	r3, #0
 80615c0:	60fb      	str	r3, [r7, #12]
 80615c2:	e046      	b.n	8061652 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80615c4:	687b      	ldr	r3, [r7, #4]
 80615c6:	6919      	ldr	r1, [r3, #16]
 80615c8:	68fa      	ldr	r2, [r7, #12]
 80615ca:	4613      	mov	r3, r2
 80615cc:	009b      	lsls	r3, r3, #2
 80615ce:	4413      	add	r3, r2
 80615d0:	00db      	lsls	r3, r3, #3
 80615d2:	440b      	add	r3, r1
 80615d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80615d6:	68bb      	ldr	r3, [r7, #8]
 80615d8:	2200      	movs	r2, #0
 80615da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80615dc:	68bb      	ldr	r3, [r7, #8]
 80615de:	2200      	movs	r2, #0
 80615e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80615e2:	68bb      	ldr	r3, [r7, #8]
 80615e4:	2200      	movs	r2, #0
 80615e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80615e8:	68bb      	ldr	r3, [r7, #8]
 80615ea:	2200      	movs	r2, #0
 80615ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80615ee:	68bb      	ldr	r3, [r7, #8]
 80615f0:	2200      	movs	r2, #0
 80615f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80615f4:	68bb      	ldr	r3, [r7, #8]
 80615f6:	2200      	movs	r2, #0
 80615f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80615fa:	68bb      	ldr	r3, [r7, #8]
 80615fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8061600:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8061602:	68bb      	ldr	r3, [r7, #8]
 8061604:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8061608:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 806160a:	68bb      	ldr	r3, [r7, #8]
 806160c:	685b      	ldr	r3, [r3, #4]
 806160e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8061612:	68bb      	ldr	r3, [r7, #8]
 8061614:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8061616:	68b9      	ldr	r1, [r7, #8]
 8061618:	687b      	ldr	r3, [r7, #4]
 806161a:	68fa      	ldr	r2, [r7, #12]
 806161c:	3212      	adds	r2, #18
 806161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8061622:	68fb      	ldr	r3, [r7, #12]
 8061624:	2b02      	cmp	r3, #2
 8061626:	d80c      	bhi.n	8061642 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8061628:	687b      	ldr	r3, [r7, #4]
 806162a:	6919      	ldr	r1, [r3, #16]
 806162c:	68fb      	ldr	r3, [r7, #12]
 806162e:	1c5a      	adds	r2, r3, #1
 8061630:	4613      	mov	r3, r2
 8061632:	009b      	lsls	r3, r3, #2
 8061634:	4413      	add	r3, r2
 8061636:	00db      	lsls	r3, r3, #3
 8061638:	440b      	add	r3, r1
 806163a:	461a      	mov	r2, r3
 806163c:	68bb      	ldr	r3, [r7, #8]
 806163e:	60da      	str	r2, [r3, #12]
 8061640:	e004      	b.n	806164c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8061642:	687b      	ldr	r3, [r7, #4]
 8061644:	691b      	ldr	r3, [r3, #16]
 8061646:	461a      	mov	r2, r3
 8061648:	68bb      	ldr	r3, [r7, #8]
 806164a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 806164c:	68fb      	ldr	r3, [r7, #12]
 806164e:	3301      	adds	r3, #1
 8061650:	60fb      	str	r3, [r7, #12]
 8061652:	68fb      	ldr	r3, [r7, #12]
 8061654:	2b03      	cmp	r3, #3
 8061656:	d9b5      	bls.n	80615c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8061658:	687b      	ldr	r3, [r7, #4]
 806165a:	2200      	movs	r2, #0
 806165c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 806165e:	687b      	ldr	r3, [r7, #4]
 8061660:	2200      	movs	r2, #0
 8061662:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8061664:	687b      	ldr	r3, [r7, #4]
 8061666:	2200      	movs	r2, #0
 8061668:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 806166a:	687b      	ldr	r3, [r7, #4]
 806166c:	2200      	movs	r2, #0
 806166e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8061670:	687b      	ldr	r3, [r7, #4]
 8061672:	2200      	movs	r2, #0
 8061674:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8061676:	687b      	ldr	r3, [r7, #4]
 8061678:	691a      	ldr	r2, [r3, #16]
 806167a:	687b      	ldr	r3, [r7, #4]
 806167c:	681b      	ldr	r3, [r3, #0]
 806167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8061682:	60da      	str	r2, [r3, #12]
}
 8061684:	bf00      	nop
 8061686:	3714      	adds	r7, #20
 8061688:	46bd      	mov	sp, r7
 806168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806168e:	4770      	bx	lr

08061690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8061690:	b480      	push	{r7}
 8061692:	b089      	sub	sp, #36	; 0x24
 8061694:	af00      	add	r7, sp, #0
 8061696:	6078      	str	r0, [r7, #4]
 8061698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 806169a:	2300      	movs	r3, #0
 806169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 806169e:	2300      	movs	r3, #0
 80616a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80616a2:	2300      	movs	r3, #0
 80616a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80616a6:	2300      	movs	r3, #0
 80616a8:	61fb      	str	r3, [r7, #28]
 80616aa:	e177      	b.n	806199c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80616ac:	2201      	movs	r2, #1
 80616ae:	69fb      	ldr	r3, [r7, #28]
 80616b0:	fa02 f303 	lsl.w	r3, r2, r3
 80616b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80616b6:	683b      	ldr	r3, [r7, #0]
 80616b8:	681b      	ldr	r3, [r3, #0]
 80616ba:	697a      	ldr	r2, [r7, #20]
 80616bc:	4013      	ands	r3, r2
 80616be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80616c0:	693a      	ldr	r2, [r7, #16]
 80616c2:	697b      	ldr	r3, [r7, #20]
 80616c4:	429a      	cmp	r2, r3
 80616c6:	f040 8166 	bne.w	8061996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80616ca:	683b      	ldr	r3, [r7, #0]
 80616cc:	685b      	ldr	r3, [r3, #4]
 80616ce:	f003 0303 	and.w	r3, r3, #3
 80616d2:	2b01      	cmp	r3, #1
 80616d4:	d005      	beq.n	80616e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80616d6:	683b      	ldr	r3, [r7, #0]
 80616d8:	685b      	ldr	r3, [r3, #4]
 80616da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80616de:	2b02      	cmp	r3, #2
 80616e0:	d130      	bne.n	8061744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80616e2:	687b      	ldr	r3, [r7, #4]
 80616e4:	689b      	ldr	r3, [r3, #8]
 80616e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80616e8:	69fb      	ldr	r3, [r7, #28]
 80616ea:	005b      	lsls	r3, r3, #1
 80616ec:	2203      	movs	r2, #3
 80616ee:	fa02 f303 	lsl.w	r3, r2, r3
 80616f2:	43db      	mvns	r3, r3
 80616f4:	69ba      	ldr	r2, [r7, #24]
 80616f6:	4013      	ands	r3, r2
 80616f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80616fa:	683b      	ldr	r3, [r7, #0]
 80616fc:	68da      	ldr	r2, [r3, #12]
 80616fe:	69fb      	ldr	r3, [r7, #28]
 8061700:	005b      	lsls	r3, r3, #1
 8061702:	fa02 f303 	lsl.w	r3, r2, r3
 8061706:	69ba      	ldr	r2, [r7, #24]
 8061708:	4313      	orrs	r3, r2
 806170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 806170c:	687b      	ldr	r3, [r7, #4]
 806170e:	69ba      	ldr	r2, [r7, #24]
 8061710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8061712:	687b      	ldr	r3, [r7, #4]
 8061714:	685b      	ldr	r3, [r3, #4]
 8061716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8061718:	2201      	movs	r2, #1
 806171a:	69fb      	ldr	r3, [r7, #28]
 806171c:	fa02 f303 	lsl.w	r3, r2, r3
 8061720:	43db      	mvns	r3, r3
 8061722:	69ba      	ldr	r2, [r7, #24]
 8061724:	4013      	ands	r3, r2
 8061726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8061728:	683b      	ldr	r3, [r7, #0]
 806172a:	685b      	ldr	r3, [r3, #4]
 806172c:	091b      	lsrs	r3, r3, #4
 806172e:	f003 0201 	and.w	r2, r3, #1
 8061732:	69fb      	ldr	r3, [r7, #28]
 8061734:	fa02 f303 	lsl.w	r3, r2, r3
 8061738:	69ba      	ldr	r2, [r7, #24]
 806173a:	4313      	orrs	r3, r2
 806173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 806173e:	687b      	ldr	r3, [r7, #4]
 8061740:	69ba      	ldr	r2, [r7, #24]
 8061742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8061744:	683b      	ldr	r3, [r7, #0]
 8061746:	685b      	ldr	r3, [r3, #4]
 8061748:	f003 0303 	and.w	r3, r3, #3
 806174c:	2b03      	cmp	r3, #3
 806174e:	d017      	beq.n	8061780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8061750:	687b      	ldr	r3, [r7, #4]
 8061752:	68db      	ldr	r3, [r3, #12]
 8061754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8061756:	69fb      	ldr	r3, [r7, #28]
 8061758:	005b      	lsls	r3, r3, #1
 806175a:	2203      	movs	r2, #3
 806175c:	fa02 f303 	lsl.w	r3, r2, r3
 8061760:	43db      	mvns	r3, r3
 8061762:	69ba      	ldr	r2, [r7, #24]
 8061764:	4013      	ands	r3, r2
 8061766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8061768:	683b      	ldr	r3, [r7, #0]
 806176a:	689a      	ldr	r2, [r3, #8]
 806176c:	69fb      	ldr	r3, [r7, #28]
 806176e:	005b      	lsls	r3, r3, #1
 8061770:	fa02 f303 	lsl.w	r3, r2, r3
 8061774:	69ba      	ldr	r2, [r7, #24]
 8061776:	4313      	orrs	r3, r2
 8061778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 806177a:	687b      	ldr	r3, [r7, #4]
 806177c:	69ba      	ldr	r2, [r7, #24]
 806177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8061780:	683b      	ldr	r3, [r7, #0]
 8061782:	685b      	ldr	r3, [r3, #4]
 8061784:	f003 0303 	and.w	r3, r3, #3
 8061788:	2b02      	cmp	r3, #2
 806178a:	d123      	bne.n	80617d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 806178c:	69fb      	ldr	r3, [r7, #28]
 806178e:	08da      	lsrs	r2, r3, #3
 8061790:	687b      	ldr	r3, [r7, #4]
 8061792:	3208      	adds	r2, #8
 8061794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8061798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 806179a:	69fb      	ldr	r3, [r7, #28]
 806179c:	f003 0307 	and.w	r3, r3, #7
 80617a0:	009b      	lsls	r3, r3, #2
 80617a2:	220f      	movs	r2, #15
 80617a4:	fa02 f303 	lsl.w	r3, r2, r3
 80617a8:	43db      	mvns	r3, r3
 80617aa:	69ba      	ldr	r2, [r7, #24]
 80617ac:	4013      	ands	r3, r2
 80617ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80617b0:	683b      	ldr	r3, [r7, #0]
 80617b2:	691a      	ldr	r2, [r3, #16]
 80617b4:	69fb      	ldr	r3, [r7, #28]
 80617b6:	f003 0307 	and.w	r3, r3, #7
 80617ba:	009b      	lsls	r3, r3, #2
 80617bc:	fa02 f303 	lsl.w	r3, r2, r3
 80617c0:	69ba      	ldr	r2, [r7, #24]
 80617c2:	4313      	orrs	r3, r2
 80617c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80617c6:	69fb      	ldr	r3, [r7, #28]
 80617c8:	08da      	lsrs	r2, r3, #3
 80617ca:	687b      	ldr	r3, [r7, #4]
 80617cc:	3208      	adds	r2, #8
 80617ce:	69b9      	ldr	r1, [r7, #24]
 80617d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80617d4:	687b      	ldr	r3, [r7, #4]
 80617d6:	681b      	ldr	r3, [r3, #0]
 80617d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80617da:	69fb      	ldr	r3, [r7, #28]
 80617dc:	005b      	lsls	r3, r3, #1
 80617de:	2203      	movs	r2, #3
 80617e0:	fa02 f303 	lsl.w	r3, r2, r3
 80617e4:	43db      	mvns	r3, r3
 80617e6:	69ba      	ldr	r2, [r7, #24]
 80617e8:	4013      	ands	r3, r2
 80617ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80617ec:	683b      	ldr	r3, [r7, #0]
 80617ee:	685b      	ldr	r3, [r3, #4]
 80617f0:	f003 0203 	and.w	r2, r3, #3
 80617f4:	69fb      	ldr	r3, [r7, #28]
 80617f6:	005b      	lsls	r3, r3, #1
 80617f8:	fa02 f303 	lsl.w	r3, r2, r3
 80617fc:	69ba      	ldr	r2, [r7, #24]
 80617fe:	4313      	orrs	r3, r2
 8061800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8061802:	687b      	ldr	r3, [r7, #4]
 8061804:	69ba      	ldr	r2, [r7, #24]
 8061806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8061808:	683b      	ldr	r3, [r7, #0]
 806180a:	685b      	ldr	r3, [r3, #4]
 806180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8061810:	2b00      	cmp	r3, #0
 8061812:	f000 80c0 	beq.w	8061996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8061816:	2300      	movs	r3, #0
 8061818:	60fb      	str	r3, [r7, #12]
 806181a:	4b66      	ldr	r3, [pc, #408]	; (80619b4 <HAL_GPIO_Init+0x324>)
 806181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806181e:	4a65      	ldr	r2, [pc, #404]	; (80619b4 <HAL_GPIO_Init+0x324>)
 8061820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8061824:	6453      	str	r3, [r2, #68]	; 0x44
 8061826:	4b63      	ldr	r3, [pc, #396]	; (80619b4 <HAL_GPIO_Init+0x324>)
 8061828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 806182e:	60fb      	str	r3, [r7, #12]
 8061830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8061832:	4a61      	ldr	r2, [pc, #388]	; (80619b8 <HAL_GPIO_Init+0x328>)
 8061834:	69fb      	ldr	r3, [r7, #28]
 8061836:	089b      	lsrs	r3, r3, #2
 8061838:	3302      	adds	r3, #2
 806183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8061840:	69fb      	ldr	r3, [r7, #28]
 8061842:	f003 0303 	and.w	r3, r3, #3
 8061846:	009b      	lsls	r3, r3, #2
 8061848:	220f      	movs	r2, #15
 806184a:	fa02 f303 	lsl.w	r3, r2, r3
 806184e:	43db      	mvns	r3, r3
 8061850:	69ba      	ldr	r2, [r7, #24]
 8061852:	4013      	ands	r3, r2
 8061854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8061856:	687b      	ldr	r3, [r7, #4]
 8061858:	4a58      	ldr	r2, [pc, #352]	; (80619bc <HAL_GPIO_Init+0x32c>)
 806185a:	4293      	cmp	r3, r2
 806185c:	d037      	beq.n	80618ce <HAL_GPIO_Init+0x23e>
 806185e:	687b      	ldr	r3, [r7, #4]
 8061860:	4a57      	ldr	r2, [pc, #348]	; (80619c0 <HAL_GPIO_Init+0x330>)
 8061862:	4293      	cmp	r3, r2
 8061864:	d031      	beq.n	80618ca <HAL_GPIO_Init+0x23a>
 8061866:	687b      	ldr	r3, [r7, #4]
 8061868:	4a56      	ldr	r2, [pc, #344]	; (80619c4 <HAL_GPIO_Init+0x334>)
 806186a:	4293      	cmp	r3, r2
 806186c:	d02b      	beq.n	80618c6 <HAL_GPIO_Init+0x236>
 806186e:	687b      	ldr	r3, [r7, #4]
 8061870:	4a55      	ldr	r2, [pc, #340]	; (80619c8 <HAL_GPIO_Init+0x338>)
 8061872:	4293      	cmp	r3, r2
 8061874:	d025      	beq.n	80618c2 <HAL_GPIO_Init+0x232>
 8061876:	687b      	ldr	r3, [r7, #4]
 8061878:	4a54      	ldr	r2, [pc, #336]	; (80619cc <HAL_GPIO_Init+0x33c>)
 806187a:	4293      	cmp	r3, r2
 806187c:	d01f      	beq.n	80618be <HAL_GPIO_Init+0x22e>
 806187e:	687b      	ldr	r3, [r7, #4]
 8061880:	4a53      	ldr	r2, [pc, #332]	; (80619d0 <HAL_GPIO_Init+0x340>)
 8061882:	4293      	cmp	r3, r2
 8061884:	d019      	beq.n	80618ba <HAL_GPIO_Init+0x22a>
 8061886:	687b      	ldr	r3, [r7, #4]
 8061888:	4a52      	ldr	r2, [pc, #328]	; (80619d4 <HAL_GPIO_Init+0x344>)
 806188a:	4293      	cmp	r3, r2
 806188c:	d013      	beq.n	80618b6 <HAL_GPIO_Init+0x226>
 806188e:	687b      	ldr	r3, [r7, #4]
 8061890:	4a51      	ldr	r2, [pc, #324]	; (80619d8 <HAL_GPIO_Init+0x348>)
 8061892:	4293      	cmp	r3, r2
 8061894:	d00d      	beq.n	80618b2 <HAL_GPIO_Init+0x222>
 8061896:	687b      	ldr	r3, [r7, #4]
 8061898:	4a50      	ldr	r2, [pc, #320]	; (80619dc <HAL_GPIO_Init+0x34c>)
 806189a:	4293      	cmp	r3, r2
 806189c:	d007      	beq.n	80618ae <HAL_GPIO_Init+0x21e>
 806189e:	687b      	ldr	r3, [r7, #4]
 80618a0:	4a4f      	ldr	r2, [pc, #316]	; (80619e0 <HAL_GPIO_Init+0x350>)
 80618a2:	4293      	cmp	r3, r2
 80618a4:	d101      	bne.n	80618aa <HAL_GPIO_Init+0x21a>
 80618a6:	2309      	movs	r3, #9
 80618a8:	e012      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618aa:	230a      	movs	r3, #10
 80618ac:	e010      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618ae:	2308      	movs	r3, #8
 80618b0:	e00e      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618b2:	2307      	movs	r3, #7
 80618b4:	e00c      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618b6:	2306      	movs	r3, #6
 80618b8:	e00a      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618ba:	2305      	movs	r3, #5
 80618bc:	e008      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618be:	2304      	movs	r3, #4
 80618c0:	e006      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618c2:	2303      	movs	r3, #3
 80618c4:	e004      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618c6:	2302      	movs	r3, #2
 80618c8:	e002      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618ca:	2301      	movs	r3, #1
 80618cc:	e000      	b.n	80618d0 <HAL_GPIO_Init+0x240>
 80618ce:	2300      	movs	r3, #0
 80618d0:	69fa      	ldr	r2, [r7, #28]
 80618d2:	f002 0203 	and.w	r2, r2, #3
 80618d6:	0092      	lsls	r2, r2, #2
 80618d8:	4093      	lsls	r3, r2
 80618da:	69ba      	ldr	r2, [r7, #24]
 80618dc:	4313      	orrs	r3, r2
 80618de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80618e0:	4935      	ldr	r1, [pc, #212]	; (80619b8 <HAL_GPIO_Init+0x328>)
 80618e2:	69fb      	ldr	r3, [r7, #28]
 80618e4:	089b      	lsrs	r3, r3, #2
 80618e6:	3302      	adds	r3, #2
 80618e8:	69ba      	ldr	r2, [r7, #24]
 80618ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80618ee:	4b3d      	ldr	r3, [pc, #244]	; (80619e4 <HAL_GPIO_Init+0x354>)
 80618f0:	689b      	ldr	r3, [r3, #8]
 80618f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80618f4:	693b      	ldr	r3, [r7, #16]
 80618f6:	43db      	mvns	r3, r3
 80618f8:	69ba      	ldr	r2, [r7, #24]
 80618fa:	4013      	ands	r3, r2
 80618fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80618fe:	683b      	ldr	r3, [r7, #0]
 8061900:	685b      	ldr	r3, [r3, #4]
 8061902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8061906:	2b00      	cmp	r3, #0
 8061908:	d003      	beq.n	8061912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 806190a:	69ba      	ldr	r2, [r7, #24]
 806190c:	693b      	ldr	r3, [r7, #16]
 806190e:	4313      	orrs	r3, r2
 8061910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8061912:	4a34      	ldr	r2, [pc, #208]	; (80619e4 <HAL_GPIO_Init+0x354>)
 8061914:	69bb      	ldr	r3, [r7, #24]
 8061916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8061918:	4b32      	ldr	r3, [pc, #200]	; (80619e4 <HAL_GPIO_Init+0x354>)
 806191a:	68db      	ldr	r3, [r3, #12]
 806191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 806191e:	693b      	ldr	r3, [r7, #16]
 8061920:	43db      	mvns	r3, r3
 8061922:	69ba      	ldr	r2, [r7, #24]
 8061924:	4013      	ands	r3, r2
 8061926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8061928:	683b      	ldr	r3, [r7, #0]
 806192a:	685b      	ldr	r3, [r3, #4]
 806192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8061930:	2b00      	cmp	r3, #0
 8061932:	d003      	beq.n	806193c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8061934:	69ba      	ldr	r2, [r7, #24]
 8061936:	693b      	ldr	r3, [r7, #16]
 8061938:	4313      	orrs	r3, r2
 806193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 806193c:	4a29      	ldr	r2, [pc, #164]	; (80619e4 <HAL_GPIO_Init+0x354>)
 806193e:	69bb      	ldr	r3, [r7, #24]
 8061940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8061942:	4b28      	ldr	r3, [pc, #160]	; (80619e4 <HAL_GPIO_Init+0x354>)
 8061944:	685b      	ldr	r3, [r3, #4]
 8061946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8061948:	693b      	ldr	r3, [r7, #16]
 806194a:	43db      	mvns	r3, r3
 806194c:	69ba      	ldr	r2, [r7, #24]
 806194e:	4013      	ands	r3, r2
 8061950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8061952:	683b      	ldr	r3, [r7, #0]
 8061954:	685b      	ldr	r3, [r3, #4]
 8061956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806195a:	2b00      	cmp	r3, #0
 806195c:	d003      	beq.n	8061966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 806195e:	69ba      	ldr	r2, [r7, #24]
 8061960:	693b      	ldr	r3, [r7, #16]
 8061962:	4313      	orrs	r3, r2
 8061964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8061966:	4a1f      	ldr	r2, [pc, #124]	; (80619e4 <HAL_GPIO_Init+0x354>)
 8061968:	69bb      	ldr	r3, [r7, #24]
 806196a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 806196c:	4b1d      	ldr	r3, [pc, #116]	; (80619e4 <HAL_GPIO_Init+0x354>)
 806196e:	681b      	ldr	r3, [r3, #0]
 8061970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8061972:	693b      	ldr	r3, [r7, #16]
 8061974:	43db      	mvns	r3, r3
 8061976:	69ba      	ldr	r2, [r7, #24]
 8061978:	4013      	ands	r3, r2
 806197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 806197c:	683b      	ldr	r3, [r7, #0]
 806197e:	685b      	ldr	r3, [r3, #4]
 8061980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8061984:	2b00      	cmp	r3, #0
 8061986:	d003      	beq.n	8061990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8061988:	69ba      	ldr	r2, [r7, #24]
 806198a:	693b      	ldr	r3, [r7, #16]
 806198c:	4313      	orrs	r3, r2
 806198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8061990:	4a14      	ldr	r2, [pc, #80]	; (80619e4 <HAL_GPIO_Init+0x354>)
 8061992:	69bb      	ldr	r3, [r7, #24]
 8061994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8061996:	69fb      	ldr	r3, [r7, #28]
 8061998:	3301      	adds	r3, #1
 806199a:	61fb      	str	r3, [r7, #28]
 806199c:	69fb      	ldr	r3, [r7, #28]
 806199e:	2b0f      	cmp	r3, #15
 80619a0:	f67f ae84 	bls.w	80616ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80619a4:	bf00      	nop
 80619a6:	bf00      	nop
 80619a8:	3724      	adds	r7, #36	; 0x24
 80619aa:	46bd      	mov	sp, r7
 80619ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80619b0:	4770      	bx	lr
 80619b2:	bf00      	nop
 80619b4:	40023800 	.word	0x40023800
 80619b8:	40013800 	.word	0x40013800
 80619bc:	40020000 	.word	0x40020000
 80619c0:	40020400 	.word	0x40020400
 80619c4:	40020800 	.word	0x40020800
 80619c8:	40020c00 	.word	0x40020c00
 80619cc:	40021000 	.word	0x40021000
 80619d0:	40021400 	.word	0x40021400
 80619d4:	40021800 	.word	0x40021800
 80619d8:	40021c00 	.word	0x40021c00
 80619dc:	40022000 	.word	0x40022000
 80619e0:	40022400 	.word	0x40022400
 80619e4:	40013c00 	.word	0x40013c00

080619e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80619e8:	b480      	push	{r7}
 80619ea:	b083      	sub	sp, #12
 80619ec:	af00      	add	r7, sp, #0
 80619ee:	6078      	str	r0, [r7, #4]
 80619f0:	460b      	mov	r3, r1
 80619f2:	807b      	strh	r3, [r7, #2]
 80619f4:	4613      	mov	r3, r2
 80619f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80619f8:	787b      	ldrb	r3, [r7, #1]
 80619fa:	2b00      	cmp	r3, #0
 80619fc:	d003      	beq.n	8061a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80619fe:	887a      	ldrh	r2, [r7, #2]
 8061a00:	687b      	ldr	r3, [r7, #4]
 8061a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8061a04:	e003      	b.n	8061a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8061a06:	887b      	ldrh	r3, [r7, #2]
 8061a08:	041a      	lsls	r2, r3, #16
 8061a0a:	687b      	ldr	r3, [r7, #4]
 8061a0c:	619a      	str	r2, [r3, #24]
}
 8061a0e:	bf00      	nop
 8061a10:	370c      	adds	r7, #12
 8061a12:	46bd      	mov	sp, r7
 8061a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061a18:	4770      	bx	lr

08061a1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8061a1a:	b480      	push	{r7}
 8061a1c:	b085      	sub	sp, #20
 8061a1e:	af00      	add	r7, sp, #0
 8061a20:	6078      	str	r0, [r7, #4]
 8061a22:	460b      	mov	r3, r1
 8061a24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8061a26:	687b      	ldr	r3, [r7, #4]
 8061a28:	695b      	ldr	r3, [r3, #20]
 8061a2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8061a2c:	887a      	ldrh	r2, [r7, #2]
 8061a2e:	68fb      	ldr	r3, [r7, #12]
 8061a30:	4013      	ands	r3, r2
 8061a32:	041a      	lsls	r2, r3, #16
 8061a34:	68fb      	ldr	r3, [r7, #12]
 8061a36:	43d9      	mvns	r1, r3
 8061a38:	887b      	ldrh	r3, [r7, #2]
 8061a3a:	400b      	ands	r3, r1
 8061a3c:	431a      	orrs	r2, r3
 8061a3e:	687b      	ldr	r3, [r7, #4]
 8061a40:	619a      	str	r2, [r3, #24]
}
 8061a42:	bf00      	nop
 8061a44:	3714      	adds	r7, #20
 8061a46:	46bd      	mov	sp, r7
 8061a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061a4c:	4770      	bx	lr

08061a4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8061a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8061a50:	b08f      	sub	sp, #60	; 0x3c
 8061a52:	af0a      	add	r7, sp, #40	; 0x28
 8061a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8061a56:	687b      	ldr	r3, [r7, #4]
 8061a58:	2b00      	cmp	r3, #0
 8061a5a:	d101      	bne.n	8061a60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8061a5c:	2301      	movs	r3, #1
 8061a5e:	e10f      	b.n	8061c80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8061a60:	687b      	ldr	r3, [r7, #4]
 8061a62:	681b      	ldr	r3, [r3, #0]
 8061a64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8061a66:	687b      	ldr	r3, [r7, #4]
 8061a68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8061a6c:	b2db      	uxtb	r3, r3
 8061a6e:	2b00      	cmp	r3, #0
 8061a70:	d106      	bne.n	8061a80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8061a72:	687b      	ldr	r3, [r7, #4]
 8061a74:	2200      	movs	r2, #0
 8061a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8061a7a:	6878      	ldr	r0, [r7, #4]
 8061a7c:	f7ff f8a4 	bl	8060bc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8061a80:	687b      	ldr	r3, [r7, #4]
 8061a82:	2203      	movs	r2, #3
 8061a84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8061a88:	68bb      	ldr	r3, [r7, #8]
 8061a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8061a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061a90:	2b00      	cmp	r3, #0
 8061a92:	d102      	bne.n	8061a9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8061a94:	687b      	ldr	r3, [r7, #4]
 8061a96:	2200      	movs	r2, #0
 8061a98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8061a9a:	687b      	ldr	r3, [r7, #4]
 8061a9c:	681b      	ldr	r3, [r3, #0]
 8061a9e:	4618      	mov	r0, r3
 8061aa0:	f001 f901 	bl	8062ca6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8061aa4:	687b      	ldr	r3, [r7, #4]
 8061aa6:	681b      	ldr	r3, [r3, #0]
 8061aa8:	603b      	str	r3, [r7, #0]
 8061aaa:	687e      	ldr	r6, [r7, #4]
 8061aac:	466d      	mov	r5, sp
 8061aae:	f106 0410 	add.w	r4, r6, #16
 8061ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8061ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8061ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8061ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8061aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8061abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8061ac2:	1d33      	adds	r3, r6, #4
 8061ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8061ac6:	6838      	ldr	r0, [r7, #0]
 8061ac8:	f001 f88c 	bl	8062be4 <USB_CoreInit>
 8061acc:	4603      	mov	r3, r0
 8061ace:	2b00      	cmp	r3, #0
 8061ad0:	d005      	beq.n	8061ade <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8061ad2:	687b      	ldr	r3, [r7, #4]
 8061ad4:	2202      	movs	r2, #2
 8061ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8061ada:	2301      	movs	r3, #1
 8061adc:	e0d0      	b.n	8061c80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8061ade:	687b      	ldr	r3, [r7, #4]
 8061ae0:	681b      	ldr	r3, [r3, #0]
 8061ae2:	2100      	movs	r1, #0
 8061ae4:	4618      	mov	r0, r3
 8061ae6:	f001 f8ef 	bl	8062cc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8061aea:	2300      	movs	r3, #0
 8061aec:	73fb      	strb	r3, [r7, #15]
 8061aee:	e04a      	b.n	8061b86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8061af0:	7bfa      	ldrb	r2, [r7, #15]
 8061af2:	6879      	ldr	r1, [r7, #4]
 8061af4:	4613      	mov	r3, r2
 8061af6:	00db      	lsls	r3, r3, #3
 8061af8:	4413      	add	r3, r2
 8061afa:	009b      	lsls	r3, r3, #2
 8061afc:	440b      	add	r3, r1
 8061afe:	333d      	adds	r3, #61	; 0x3d
 8061b00:	2201      	movs	r2, #1
 8061b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8061b04:	7bfa      	ldrb	r2, [r7, #15]
 8061b06:	6879      	ldr	r1, [r7, #4]
 8061b08:	4613      	mov	r3, r2
 8061b0a:	00db      	lsls	r3, r3, #3
 8061b0c:	4413      	add	r3, r2
 8061b0e:	009b      	lsls	r3, r3, #2
 8061b10:	440b      	add	r3, r1
 8061b12:	333c      	adds	r3, #60	; 0x3c
 8061b14:	7bfa      	ldrb	r2, [r7, #15]
 8061b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8061b18:	7bfa      	ldrb	r2, [r7, #15]
 8061b1a:	7bfb      	ldrb	r3, [r7, #15]
 8061b1c:	b298      	uxth	r0, r3
 8061b1e:	6879      	ldr	r1, [r7, #4]
 8061b20:	4613      	mov	r3, r2
 8061b22:	00db      	lsls	r3, r3, #3
 8061b24:	4413      	add	r3, r2
 8061b26:	009b      	lsls	r3, r3, #2
 8061b28:	440b      	add	r3, r1
 8061b2a:	3344      	adds	r3, #68	; 0x44
 8061b2c:	4602      	mov	r2, r0
 8061b2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8061b30:	7bfa      	ldrb	r2, [r7, #15]
 8061b32:	6879      	ldr	r1, [r7, #4]
 8061b34:	4613      	mov	r3, r2
 8061b36:	00db      	lsls	r3, r3, #3
 8061b38:	4413      	add	r3, r2
 8061b3a:	009b      	lsls	r3, r3, #2
 8061b3c:	440b      	add	r3, r1
 8061b3e:	3340      	adds	r3, #64	; 0x40
 8061b40:	2200      	movs	r2, #0
 8061b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8061b44:	7bfa      	ldrb	r2, [r7, #15]
 8061b46:	6879      	ldr	r1, [r7, #4]
 8061b48:	4613      	mov	r3, r2
 8061b4a:	00db      	lsls	r3, r3, #3
 8061b4c:	4413      	add	r3, r2
 8061b4e:	009b      	lsls	r3, r3, #2
 8061b50:	440b      	add	r3, r1
 8061b52:	3348      	adds	r3, #72	; 0x48
 8061b54:	2200      	movs	r2, #0
 8061b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8061b58:	7bfa      	ldrb	r2, [r7, #15]
 8061b5a:	6879      	ldr	r1, [r7, #4]
 8061b5c:	4613      	mov	r3, r2
 8061b5e:	00db      	lsls	r3, r3, #3
 8061b60:	4413      	add	r3, r2
 8061b62:	009b      	lsls	r3, r3, #2
 8061b64:	440b      	add	r3, r1
 8061b66:	334c      	adds	r3, #76	; 0x4c
 8061b68:	2200      	movs	r2, #0
 8061b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8061b6c:	7bfa      	ldrb	r2, [r7, #15]
 8061b6e:	6879      	ldr	r1, [r7, #4]
 8061b70:	4613      	mov	r3, r2
 8061b72:	00db      	lsls	r3, r3, #3
 8061b74:	4413      	add	r3, r2
 8061b76:	009b      	lsls	r3, r3, #2
 8061b78:	440b      	add	r3, r1
 8061b7a:	3354      	adds	r3, #84	; 0x54
 8061b7c:	2200      	movs	r2, #0
 8061b7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8061b80:	7bfb      	ldrb	r3, [r7, #15]
 8061b82:	3301      	adds	r3, #1
 8061b84:	73fb      	strb	r3, [r7, #15]
 8061b86:	7bfa      	ldrb	r2, [r7, #15]
 8061b88:	687b      	ldr	r3, [r7, #4]
 8061b8a:	685b      	ldr	r3, [r3, #4]
 8061b8c:	429a      	cmp	r2, r3
 8061b8e:	d3af      	bcc.n	8061af0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8061b90:	2300      	movs	r3, #0
 8061b92:	73fb      	strb	r3, [r7, #15]
 8061b94:	e044      	b.n	8061c20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8061b96:	7bfa      	ldrb	r2, [r7, #15]
 8061b98:	6879      	ldr	r1, [r7, #4]
 8061b9a:	4613      	mov	r3, r2
 8061b9c:	00db      	lsls	r3, r3, #3
 8061b9e:	4413      	add	r3, r2
 8061ba0:	009b      	lsls	r3, r3, #2
 8061ba2:	440b      	add	r3, r1
 8061ba4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8061ba8:	2200      	movs	r2, #0
 8061baa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8061bac:	7bfa      	ldrb	r2, [r7, #15]
 8061bae:	6879      	ldr	r1, [r7, #4]
 8061bb0:	4613      	mov	r3, r2
 8061bb2:	00db      	lsls	r3, r3, #3
 8061bb4:	4413      	add	r3, r2
 8061bb6:	009b      	lsls	r3, r3, #2
 8061bb8:	440b      	add	r3, r1
 8061bba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8061bbe:	7bfa      	ldrb	r2, [r7, #15]
 8061bc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8061bc2:	7bfa      	ldrb	r2, [r7, #15]
 8061bc4:	6879      	ldr	r1, [r7, #4]
 8061bc6:	4613      	mov	r3, r2
 8061bc8:	00db      	lsls	r3, r3, #3
 8061bca:	4413      	add	r3, r2
 8061bcc:	009b      	lsls	r3, r3, #2
 8061bce:	440b      	add	r3, r1
 8061bd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8061bd4:	2200      	movs	r2, #0
 8061bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8061bd8:	7bfa      	ldrb	r2, [r7, #15]
 8061bda:	6879      	ldr	r1, [r7, #4]
 8061bdc:	4613      	mov	r3, r2
 8061bde:	00db      	lsls	r3, r3, #3
 8061be0:	4413      	add	r3, r2
 8061be2:	009b      	lsls	r3, r3, #2
 8061be4:	440b      	add	r3, r1
 8061be6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8061bea:	2200      	movs	r2, #0
 8061bec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8061bee:	7bfa      	ldrb	r2, [r7, #15]
 8061bf0:	6879      	ldr	r1, [r7, #4]
 8061bf2:	4613      	mov	r3, r2
 8061bf4:	00db      	lsls	r3, r3, #3
 8061bf6:	4413      	add	r3, r2
 8061bf8:	009b      	lsls	r3, r3, #2
 8061bfa:	440b      	add	r3, r1
 8061bfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8061c00:	2200      	movs	r2, #0
 8061c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8061c04:	7bfa      	ldrb	r2, [r7, #15]
 8061c06:	6879      	ldr	r1, [r7, #4]
 8061c08:	4613      	mov	r3, r2
 8061c0a:	00db      	lsls	r3, r3, #3
 8061c0c:	4413      	add	r3, r2
 8061c0e:	009b      	lsls	r3, r3, #2
 8061c10:	440b      	add	r3, r1
 8061c12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8061c16:	2200      	movs	r2, #0
 8061c18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8061c1a:	7bfb      	ldrb	r3, [r7, #15]
 8061c1c:	3301      	adds	r3, #1
 8061c1e:	73fb      	strb	r3, [r7, #15]
 8061c20:	7bfa      	ldrb	r2, [r7, #15]
 8061c22:	687b      	ldr	r3, [r7, #4]
 8061c24:	685b      	ldr	r3, [r3, #4]
 8061c26:	429a      	cmp	r2, r3
 8061c28:	d3b5      	bcc.n	8061b96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8061c2a:	687b      	ldr	r3, [r7, #4]
 8061c2c:	681b      	ldr	r3, [r3, #0]
 8061c2e:	603b      	str	r3, [r7, #0]
 8061c30:	687e      	ldr	r6, [r7, #4]
 8061c32:	466d      	mov	r5, sp
 8061c34:	f106 0410 	add.w	r4, r6, #16
 8061c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8061c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8061c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8061c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8061c40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8061c44:	e885 0003 	stmia.w	r5, {r0, r1}
 8061c48:	1d33      	adds	r3, r6, #4
 8061c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8061c4c:	6838      	ldr	r0, [r7, #0]
 8061c4e:	f001 f887 	bl	8062d60 <USB_DevInit>
 8061c52:	4603      	mov	r3, r0
 8061c54:	2b00      	cmp	r3, #0
 8061c56:	d005      	beq.n	8061c64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8061c58:	687b      	ldr	r3, [r7, #4]
 8061c5a:	2202      	movs	r2, #2
 8061c5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8061c60:	2301      	movs	r3, #1
 8061c62:	e00d      	b.n	8061c80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8061c64:	687b      	ldr	r3, [r7, #4]
 8061c66:	2200      	movs	r2, #0
 8061c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8061c6c:	687b      	ldr	r3, [r7, #4]
 8061c6e:	2201      	movs	r2, #1
 8061c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8061c74:	687b      	ldr	r3, [r7, #4]
 8061c76:	681b      	ldr	r3, [r3, #0]
 8061c78:	4618      	mov	r0, r3
 8061c7a:	f001 fa52 	bl	8063122 <USB_DevDisconnect>

  return HAL_OK;
 8061c7e:	2300      	movs	r3, #0
}
 8061c80:	4618      	mov	r0, r3
 8061c82:	3714      	adds	r7, #20
 8061c84:	46bd      	mov	sp, r7
 8061c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08061c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8061c88:	b580      	push	{r7, lr}
 8061c8a:	b086      	sub	sp, #24
 8061c8c:	af00      	add	r7, sp, #0
 8061c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8061c90:	687b      	ldr	r3, [r7, #4]
 8061c92:	2b00      	cmp	r3, #0
 8061c94:	d101      	bne.n	8061c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8061c96:	2301      	movs	r3, #1
 8061c98:	e267      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8061c9a:	687b      	ldr	r3, [r7, #4]
 8061c9c:	681b      	ldr	r3, [r3, #0]
 8061c9e:	f003 0301 	and.w	r3, r3, #1
 8061ca2:	2b00      	cmp	r3, #0
 8061ca4:	d075      	beq.n	8061d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8061ca6:	4b88      	ldr	r3, [pc, #544]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061ca8:	689b      	ldr	r3, [r3, #8]
 8061caa:	f003 030c 	and.w	r3, r3, #12
 8061cae:	2b04      	cmp	r3, #4
 8061cb0:	d00c      	beq.n	8061ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8061cb2:	4b85      	ldr	r3, [pc, #532]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061cb4:	689b      	ldr	r3, [r3, #8]
 8061cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8061cba:	2b08      	cmp	r3, #8
 8061cbc:	d112      	bne.n	8061ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8061cbe:	4b82      	ldr	r3, [pc, #520]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061cc0:	685b      	ldr	r3, [r3, #4]
 8061cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8061cca:	d10b      	bne.n	8061ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8061ccc:	4b7e      	ldr	r3, [pc, #504]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061cce:	681b      	ldr	r3, [r3, #0]
 8061cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061cd4:	2b00      	cmp	r3, #0
 8061cd6:	d05b      	beq.n	8061d90 <HAL_RCC_OscConfig+0x108>
 8061cd8:	687b      	ldr	r3, [r7, #4]
 8061cda:	685b      	ldr	r3, [r3, #4]
 8061cdc:	2b00      	cmp	r3, #0
 8061cde:	d157      	bne.n	8061d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8061ce0:	2301      	movs	r3, #1
 8061ce2:	e242      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8061ce4:	687b      	ldr	r3, [r7, #4]
 8061ce6:	685b      	ldr	r3, [r3, #4]
 8061ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8061cec:	d106      	bne.n	8061cfc <HAL_RCC_OscConfig+0x74>
 8061cee:	4b76      	ldr	r3, [pc, #472]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061cf0:	681b      	ldr	r3, [r3, #0]
 8061cf2:	4a75      	ldr	r2, [pc, #468]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8061cf8:	6013      	str	r3, [r2, #0]
 8061cfa:	e01d      	b.n	8061d38 <HAL_RCC_OscConfig+0xb0>
 8061cfc:	687b      	ldr	r3, [r7, #4]
 8061cfe:	685b      	ldr	r3, [r3, #4]
 8061d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8061d04:	d10c      	bne.n	8061d20 <HAL_RCC_OscConfig+0x98>
 8061d06:	4b70      	ldr	r3, [pc, #448]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d08:	681b      	ldr	r3, [r3, #0]
 8061d0a:	4a6f      	ldr	r2, [pc, #444]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8061d10:	6013      	str	r3, [r2, #0]
 8061d12:	4b6d      	ldr	r3, [pc, #436]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d14:	681b      	ldr	r3, [r3, #0]
 8061d16:	4a6c      	ldr	r2, [pc, #432]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8061d1c:	6013      	str	r3, [r2, #0]
 8061d1e:	e00b      	b.n	8061d38 <HAL_RCC_OscConfig+0xb0>
 8061d20:	4b69      	ldr	r3, [pc, #420]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d22:	681b      	ldr	r3, [r3, #0]
 8061d24:	4a68      	ldr	r2, [pc, #416]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8061d2a:	6013      	str	r3, [r2, #0]
 8061d2c:	4b66      	ldr	r3, [pc, #408]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d2e:	681b      	ldr	r3, [r3, #0]
 8061d30:	4a65      	ldr	r2, [pc, #404]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8061d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8061d38:	687b      	ldr	r3, [r7, #4]
 8061d3a:	685b      	ldr	r3, [r3, #4]
 8061d3c:	2b00      	cmp	r3, #0
 8061d3e:	d013      	beq.n	8061d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8061d40:	f7ff f868 	bl	8060e14 <HAL_GetTick>
 8061d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8061d46:	e008      	b.n	8061d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8061d48:	f7ff f864 	bl	8060e14 <HAL_GetTick>
 8061d4c:	4602      	mov	r2, r0
 8061d4e:	693b      	ldr	r3, [r7, #16]
 8061d50:	1ad3      	subs	r3, r2, r3
 8061d52:	2b64      	cmp	r3, #100	; 0x64
 8061d54:	d901      	bls.n	8061d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8061d56:	2303      	movs	r3, #3
 8061d58:	e207      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8061d5a:	4b5b      	ldr	r3, [pc, #364]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d5c:	681b      	ldr	r3, [r3, #0]
 8061d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061d62:	2b00      	cmp	r3, #0
 8061d64:	d0f0      	beq.n	8061d48 <HAL_RCC_OscConfig+0xc0>
 8061d66:	e014      	b.n	8061d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8061d68:	f7ff f854 	bl	8060e14 <HAL_GetTick>
 8061d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8061d6e:	e008      	b.n	8061d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8061d70:	f7ff f850 	bl	8060e14 <HAL_GetTick>
 8061d74:	4602      	mov	r2, r0
 8061d76:	693b      	ldr	r3, [r7, #16]
 8061d78:	1ad3      	subs	r3, r2, r3
 8061d7a:	2b64      	cmp	r3, #100	; 0x64
 8061d7c:	d901      	bls.n	8061d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8061d7e:	2303      	movs	r3, #3
 8061d80:	e1f3      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8061d82:	4b51      	ldr	r3, [pc, #324]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061d84:	681b      	ldr	r3, [r3, #0]
 8061d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061d8a:	2b00      	cmp	r3, #0
 8061d8c:	d1f0      	bne.n	8061d70 <HAL_RCC_OscConfig+0xe8>
 8061d8e:	e000      	b.n	8061d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8061d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8061d92:	687b      	ldr	r3, [r7, #4]
 8061d94:	681b      	ldr	r3, [r3, #0]
 8061d96:	f003 0302 	and.w	r3, r3, #2
 8061d9a:	2b00      	cmp	r3, #0
 8061d9c:	d063      	beq.n	8061e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8061d9e:	4b4a      	ldr	r3, [pc, #296]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061da0:	689b      	ldr	r3, [r3, #8]
 8061da2:	f003 030c 	and.w	r3, r3, #12
 8061da6:	2b00      	cmp	r3, #0
 8061da8:	d00b      	beq.n	8061dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8061daa:	4b47      	ldr	r3, [pc, #284]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061dac:	689b      	ldr	r3, [r3, #8]
 8061dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8061db2:	2b08      	cmp	r3, #8
 8061db4:	d11c      	bne.n	8061df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8061db6:	4b44      	ldr	r3, [pc, #272]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061db8:	685b      	ldr	r3, [r3, #4]
 8061dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061dbe:	2b00      	cmp	r3, #0
 8061dc0:	d116      	bne.n	8061df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8061dc2:	4b41      	ldr	r3, [pc, #260]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061dc4:	681b      	ldr	r3, [r3, #0]
 8061dc6:	f003 0302 	and.w	r3, r3, #2
 8061dca:	2b00      	cmp	r3, #0
 8061dcc:	d005      	beq.n	8061dda <HAL_RCC_OscConfig+0x152>
 8061dce:	687b      	ldr	r3, [r7, #4]
 8061dd0:	68db      	ldr	r3, [r3, #12]
 8061dd2:	2b01      	cmp	r3, #1
 8061dd4:	d001      	beq.n	8061dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8061dd6:	2301      	movs	r3, #1
 8061dd8:	e1c7      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061dda:	4b3b      	ldr	r3, [pc, #236]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061ddc:	681b      	ldr	r3, [r3, #0]
 8061dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8061de2:	687b      	ldr	r3, [r7, #4]
 8061de4:	691b      	ldr	r3, [r3, #16]
 8061de6:	00db      	lsls	r3, r3, #3
 8061de8:	4937      	ldr	r1, [pc, #220]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061dea:	4313      	orrs	r3, r2
 8061dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8061dee:	e03a      	b.n	8061e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8061df0:	687b      	ldr	r3, [r7, #4]
 8061df2:	68db      	ldr	r3, [r3, #12]
 8061df4:	2b00      	cmp	r3, #0
 8061df6:	d020      	beq.n	8061e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8061df8:	4b34      	ldr	r3, [pc, #208]	; (8061ecc <HAL_RCC_OscConfig+0x244>)
 8061dfa:	2201      	movs	r2, #1
 8061dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061dfe:	f7ff f809 	bl	8060e14 <HAL_GetTick>
 8061e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8061e04:	e008      	b.n	8061e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8061e06:	f7ff f805 	bl	8060e14 <HAL_GetTick>
 8061e0a:	4602      	mov	r2, r0
 8061e0c:	693b      	ldr	r3, [r7, #16]
 8061e0e:	1ad3      	subs	r3, r2, r3
 8061e10:	2b02      	cmp	r3, #2
 8061e12:	d901      	bls.n	8061e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8061e14:	2303      	movs	r3, #3
 8061e16:	e1a8      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8061e18:	4b2b      	ldr	r3, [pc, #172]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061e1a:	681b      	ldr	r3, [r3, #0]
 8061e1c:	f003 0302 	and.w	r3, r3, #2
 8061e20:	2b00      	cmp	r3, #0
 8061e22:	d0f0      	beq.n	8061e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061e24:	4b28      	ldr	r3, [pc, #160]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061e26:	681b      	ldr	r3, [r3, #0]
 8061e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8061e2c:	687b      	ldr	r3, [r7, #4]
 8061e2e:	691b      	ldr	r3, [r3, #16]
 8061e30:	00db      	lsls	r3, r3, #3
 8061e32:	4925      	ldr	r1, [pc, #148]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061e34:	4313      	orrs	r3, r2
 8061e36:	600b      	str	r3, [r1, #0]
 8061e38:	e015      	b.n	8061e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8061e3a:	4b24      	ldr	r3, [pc, #144]	; (8061ecc <HAL_RCC_OscConfig+0x244>)
 8061e3c:	2200      	movs	r2, #0
 8061e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061e40:	f7fe ffe8 	bl	8060e14 <HAL_GetTick>
 8061e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8061e46:	e008      	b.n	8061e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8061e48:	f7fe ffe4 	bl	8060e14 <HAL_GetTick>
 8061e4c:	4602      	mov	r2, r0
 8061e4e:	693b      	ldr	r3, [r7, #16]
 8061e50:	1ad3      	subs	r3, r2, r3
 8061e52:	2b02      	cmp	r3, #2
 8061e54:	d901      	bls.n	8061e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8061e56:	2303      	movs	r3, #3
 8061e58:	e187      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8061e5a:	4b1b      	ldr	r3, [pc, #108]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061e5c:	681b      	ldr	r3, [r3, #0]
 8061e5e:	f003 0302 	and.w	r3, r3, #2
 8061e62:	2b00      	cmp	r3, #0
 8061e64:	d1f0      	bne.n	8061e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8061e66:	687b      	ldr	r3, [r7, #4]
 8061e68:	681b      	ldr	r3, [r3, #0]
 8061e6a:	f003 0308 	and.w	r3, r3, #8
 8061e6e:	2b00      	cmp	r3, #0
 8061e70:	d036      	beq.n	8061ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8061e72:	687b      	ldr	r3, [r7, #4]
 8061e74:	695b      	ldr	r3, [r3, #20]
 8061e76:	2b00      	cmp	r3, #0
 8061e78:	d016      	beq.n	8061ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8061e7a:	4b15      	ldr	r3, [pc, #84]	; (8061ed0 <HAL_RCC_OscConfig+0x248>)
 8061e7c:	2201      	movs	r2, #1
 8061e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061e80:	f7fe ffc8 	bl	8060e14 <HAL_GetTick>
 8061e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8061e86:	e008      	b.n	8061e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8061e88:	f7fe ffc4 	bl	8060e14 <HAL_GetTick>
 8061e8c:	4602      	mov	r2, r0
 8061e8e:	693b      	ldr	r3, [r7, #16]
 8061e90:	1ad3      	subs	r3, r2, r3
 8061e92:	2b02      	cmp	r3, #2
 8061e94:	d901      	bls.n	8061e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8061e96:	2303      	movs	r3, #3
 8061e98:	e167      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8061e9a:	4b0b      	ldr	r3, [pc, #44]	; (8061ec8 <HAL_RCC_OscConfig+0x240>)
 8061e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061e9e:	f003 0302 	and.w	r3, r3, #2
 8061ea2:	2b00      	cmp	r3, #0
 8061ea4:	d0f0      	beq.n	8061e88 <HAL_RCC_OscConfig+0x200>
 8061ea6:	e01b      	b.n	8061ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8061ea8:	4b09      	ldr	r3, [pc, #36]	; (8061ed0 <HAL_RCC_OscConfig+0x248>)
 8061eaa:	2200      	movs	r2, #0
 8061eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8061eae:	f7fe ffb1 	bl	8060e14 <HAL_GetTick>
 8061eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8061eb4:	e00e      	b.n	8061ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8061eb6:	f7fe ffad 	bl	8060e14 <HAL_GetTick>
 8061eba:	4602      	mov	r2, r0
 8061ebc:	693b      	ldr	r3, [r7, #16]
 8061ebe:	1ad3      	subs	r3, r2, r3
 8061ec0:	2b02      	cmp	r3, #2
 8061ec2:	d907      	bls.n	8061ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8061ec4:	2303      	movs	r3, #3
 8061ec6:	e150      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
 8061ec8:	40023800 	.word	0x40023800
 8061ecc:	42470000 	.word	0x42470000
 8061ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8061ed4:	4b88      	ldr	r3, [pc, #544]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061ed8:	f003 0302 	and.w	r3, r3, #2
 8061edc:	2b00      	cmp	r3, #0
 8061ede:	d1ea      	bne.n	8061eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8061ee0:	687b      	ldr	r3, [r7, #4]
 8061ee2:	681b      	ldr	r3, [r3, #0]
 8061ee4:	f003 0304 	and.w	r3, r3, #4
 8061ee8:	2b00      	cmp	r3, #0
 8061eea:	f000 8097 	beq.w	806201c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8061eee:	2300      	movs	r3, #0
 8061ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8061ef2:	4b81      	ldr	r3, [pc, #516]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061efa:	2b00      	cmp	r3, #0
 8061efc:	d10f      	bne.n	8061f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8061efe:	2300      	movs	r3, #0
 8061f00:	60bb      	str	r3, [r7, #8]
 8061f02:	4b7d      	ldr	r3, [pc, #500]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061f06:	4a7c      	ldr	r2, [pc, #496]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8061f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8061f0e:	4b7a      	ldr	r3, [pc, #488]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061f16:	60bb      	str	r3, [r7, #8]
 8061f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8061f1a:	2301      	movs	r3, #1
 8061f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061f1e:	4b77      	ldr	r3, [pc, #476]	; (80620fc <HAL_RCC_OscConfig+0x474>)
 8061f20:	681b      	ldr	r3, [r3, #0]
 8061f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061f26:	2b00      	cmp	r3, #0
 8061f28:	d118      	bne.n	8061f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8061f2a:	4b74      	ldr	r3, [pc, #464]	; (80620fc <HAL_RCC_OscConfig+0x474>)
 8061f2c:	681b      	ldr	r3, [r3, #0]
 8061f2e:	4a73      	ldr	r2, [pc, #460]	; (80620fc <HAL_RCC_OscConfig+0x474>)
 8061f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8061f36:	f7fe ff6d 	bl	8060e14 <HAL_GetTick>
 8061f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061f3c:	e008      	b.n	8061f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8061f3e:	f7fe ff69 	bl	8060e14 <HAL_GetTick>
 8061f42:	4602      	mov	r2, r0
 8061f44:	693b      	ldr	r3, [r7, #16]
 8061f46:	1ad3      	subs	r3, r2, r3
 8061f48:	2b02      	cmp	r3, #2
 8061f4a:	d901      	bls.n	8061f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8061f4c:	2303      	movs	r3, #3
 8061f4e:	e10c      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8061f50:	4b6a      	ldr	r3, [pc, #424]	; (80620fc <HAL_RCC_OscConfig+0x474>)
 8061f52:	681b      	ldr	r3, [r3, #0]
 8061f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061f58:	2b00      	cmp	r3, #0
 8061f5a:	d0f0      	beq.n	8061f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8061f5c:	687b      	ldr	r3, [r7, #4]
 8061f5e:	689b      	ldr	r3, [r3, #8]
 8061f60:	2b01      	cmp	r3, #1
 8061f62:	d106      	bne.n	8061f72 <HAL_RCC_OscConfig+0x2ea>
 8061f64:	4b64      	ldr	r3, [pc, #400]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061f68:	4a63      	ldr	r2, [pc, #396]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f6a:	f043 0301 	orr.w	r3, r3, #1
 8061f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8061f70:	e01c      	b.n	8061fac <HAL_RCC_OscConfig+0x324>
 8061f72:	687b      	ldr	r3, [r7, #4]
 8061f74:	689b      	ldr	r3, [r3, #8]
 8061f76:	2b05      	cmp	r3, #5
 8061f78:	d10c      	bne.n	8061f94 <HAL_RCC_OscConfig+0x30c>
 8061f7a:	4b5f      	ldr	r3, [pc, #380]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061f7e:	4a5e      	ldr	r2, [pc, #376]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f80:	f043 0304 	orr.w	r3, r3, #4
 8061f84:	6713      	str	r3, [r2, #112]	; 0x70
 8061f86:	4b5c      	ldr	r3, [pc, #368]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061f8a:	4a5b      	ldr	r2, [pc, #364]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f8c:	f043 0301 	orr.w	r3, r3, #1
 8061f90:	6713      	str	r3, [r2, #112]	; 0x70
 8061f92:	e00b      	b.n	8061fac <HAL_RCC_OscConfig+0x324>
 8061f94:	4b58      	ldr	r3, [pc, #352]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061f98:	4a57      	ldr	r2, [pc, #348]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061f9a:	f023 0301 	bic.w	r3, r3, #1
 8061f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8061fa0:	4b55      	ldr	r3, [pc, #340]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061fa4:	4a54      	ldr	r2, [pc, #336]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061fa6:	f023 0304 	bic.w	r3, r3, #4
 8061faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8061fac:	687b      	ldr	r3, [r7, #4]
 8061fae:	689b      	ldr	r3, [r3, #8]
 8061fb0:	2b00      	cmp	r3, #0
 8061fb2:	d015      	beq.n	8061fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061fb4:	f7fe ff2e 	bl	8060e14 <HAL_GetTick>
 8061fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8061fba:	e00a      	b.n	8061fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8061fbc:	f7fe ff2a 	bl	8060e14 <HAL_GetTick>
 8061fc0:	4602      	mov	r2, r0
 8061fc2:	693b      	ldr	r3, [r7, #16]
 8061fc4:	1ad3      	subs	r3, r2, r3
 8061fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8061fca:	4293      	cmp	r3, r2
 8061fcc:	d901      	bls.n	8061fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8061fce:	2303      	movs	r3, #3
 8061fd0:	e0cb      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8061fd2:	4b49      	ldr	r3, [pc, #292]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8061fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061fd6:	f003 0302 	and.w	r3, r3, #2
 8061fda:	2b00      	cmp	r3, #0
 8061fdc:	d0ee      	beq.n	8061fbc <HAL_RCC_OscConfig+0x334>
 8061fde:	e014      	b.n	806200a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8061fe0:	f7fe ff18 	bl	8060e14 <HAL_GetTick>
 8061fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8061fe6:	e00a      	b.n	8061ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8061fe8:	f7fe ff14 	bl	8060e14 <HAL_GetTick>
 8061fec:	4602      	mov	r2, r0
 8061fee:	693b      	ldr	r3, [r7, #16]
 8061ff0:	1ad3      	subs	r3, r2, r3
 8061ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8061ff6:	4293      	cmp	r3, r2
 8061ff8:	d901      	bls.n	8061ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8061ffa:	2303      	movs	r3, #3
 8061ffc:	e0b5      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8061ffe:	4b3e      	ldr	r3, [pc, #248]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8062000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8062002:	f003 0302 	and.w	r3, r3, #2
 8062006:	2b00      	cmp	r3, #0
 8062008:	d1ee      	bne.n	8061fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 806200a:	7dfb      	ldrb	r3, [r7, #23]
 806200c:	2b01      	cmp	r3, #1
 806200e:	d105      	bne.n	806201c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8062010:	4b39      	ldr	r3, [pc, #228]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8062012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062014:	4a38      	ldr	r2, [pc, #224]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8062016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 806201a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 806201c:	687b      	ldr	r3, [r7, #4]
 806201e:	699b      	ldr	r3, [r3, #24]
 8062020:	2b00      	cmp	r3, #0
 8062022:	f000 80a1 	beq.w	8062168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8062026:	4b34      	ldr	r3, [pc, #208]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 8062028:	689b      	ldr	r3, [r3, #8]
 806202a:	f003 030c 	and.w	r3, r3, #12
 806202e:	2b08      	cmp	r3, #8
 8062030:	d05c      	beq.n	80620ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8062032:	687b      	ldr	r3, [r7, #4]
 8062034:	699b      	ldr	r3, [r3, #24]
 8062036:	2b02      	cmp	r3, #2
 8062038:	d141      	bne.n	80620be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 806203a:	4b31      	ldr	r3, [pc, #196]	; (8062100 <HAL_RCC_OscConfig+0x478>)
 806203c:	2200      	movs	r2, #0
 806203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062040:	f7fe fee8 	bl	8060e14 <HAL_GetTick>
 8062044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8062046:	e008      	b.n	806205a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8062048:	f7fe fee4 	bl	8060e14 <HAL_GetTick>
 806204c:	4602      	mov	r2, r0
 806204e:	693b      	ldr	r3, [r7, #16]
 8062050:	1ad3      	subs	r3, r2, r3
 8062052:	2b02      	cmp	r3, #2
 8062054:	d901      	bls.n	806205a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8062056:	2303      	movs	r3, #3
 8062058:	e087      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 806205a:	4b27      	ldr	r3, [pc, #156]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 806205c:	681b      	ldr	r3, [r3, #0]
 806205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8062062:	2b00      	cmp	r3, #0
 8062064:	d1f0      	bne.n	8062048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8062066:	687b      	ldr	r3, [r7, #4]
 8062068:	69da      	ldr	r2, [r3, #28]
 806206a:	687b      	ldr	r3, [r7, #4]
 806206c:	6a1b      	ldr	r3, [r3, #32]
 806206e:	431a      	orrs	r2, r3
 8062070:	687b      	ldr	r3, [r7, #4]
 8062072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062074:	019b      	lsls	r3, r3, #6
 8062076:	431a      	orrs	r2, r3
 8062078:	687b      	ldr	r3, [r7, #4]
 806207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806207c:	085b      	lsrs	r3, r3, #1
 806207e:	3b01      	subs	r3, #1
 8062080:	041b      	lsls	r3, r3, #16
 8062082:	431a      	orrs	r2, r3
 8062084:	687b      	ldr	r3, [r7, #4]
 8062086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8062088:	061b      	lsls	r3, r3, #24
 806208a:	491b      	ldr	r1, [pc, #108]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 806208c:	4313      	orrs	r3, r2
 806208e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8062090:	4b1b      	ldr	r3, [pc, #108]	; (8062100 <HAL_RCC_OscConfig+0x478>)
 8062092:	2201      	movs	r2, #1
 8062094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062096:	f7fe febd 	bl	8060e14 <HAL_GetTick>
 806209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 806209c:	e008      	b.n	80620b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 806209e:	f7fe feb9 	bl	8060e14 <HAL_GetTick>
 80620a2:	4602      	mov	r2, r0
 80620a4:	693b      	ldr	r3, [r7, #16]
 80620a6:	1ad3      	subs	r3, r2, r3
 80620a8:	2b02      	cmp	r3, #2
 80620aa:	d901      	bls.n	80620b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80620ac:	2303      	movs	r3, #3
 80620ae:	e05c      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80620b0:	4b11      	ldr	r3, [pc, #68]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 80620b2:	681b      	ldr	r3, [r3, #0]
 80620b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80620b8:	2b00      	cmp	r3, #0
 80620ba:	d0f0      	beq.n	806209e <HAL_RCC_OscConfig+0x416>
 80620bc:	e054      	b.n	8062168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80620be:	4b10      	ldr	r3, [pc, #64]	; (8062100 <HAL_RCC_OscConfig+0x478>)
 80620c0:	2200      	movs	r2, #0
 80620c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80620c4:	f7fe fea6 	bl	8060e14 <HAL_GetTick>
 80620c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80620ca:	e008      	b.n	80620de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80620cc:	f7fe fea2 	bl	8060e14 <HAL_GetTick>
 80620d0:	4602      	mov	r2, r0
 80620d2:	693b      	ldr	r3, [r7, #16]
 80620d4:	1ad3      	subs	r3, r2, r3
 80620d6:	2b02      	cmp	r3, #2
 80620d8:	d901      	bls.n	80620de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80620da:	2303      	movs	r3, #3
 80620dc:	e045      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80620de:	4b06      	ldr	r3, [pc, #24]	; (80620f8 <HAL_RCC_OscConfig+0x470>)
 80620e0:	681b      	ldr	r3, [r3, #0]
 80620e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80620e6:	2b00      	cmp	r3, #0
 80620e8:	d1f0      	bne.n	80620cc <HAL_RCC_OscConfig+0x444>
 80620ea:	e03d      	b.n	8062168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80620ec:	687b      	ldr	r3, [r7, #4]
 80620ee:	699b      	ldr	r3, [r3, #24]
 80620f0:	2b01      	cmp	r3, #1
 80620f2:	d107      	bne.n	8062104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80620f4:	2301      	movs	r3, #1
 80620f6:	e038      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
 80620f8:	40023800 	.word	0x40023800
 80620fc:	40007000 	.word	0x40007000
 8062100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8062104:	4b1b      	ldr	r3, [pc, #108]	; (8062174 <HAL_RCC_OscConfig+0x4ec>)
 8062106:	685b      	ldr	r3, [r3, #4]
 8062108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 806210a:	687b      	ldr	r3, [r7, #4]
 806210c:	699b      	ldr	r3, [r3, #24]
 806210e:	2b01      	cmp	r3, #1
 8062110:	d028      	beq.n	8062164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8062112:	68fb      	ldr	r3, [r7, #12]
 8062114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8062118:	687b      	ldr	r3, [r7, #4]
 806211a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 806211c:	429a      	cmp	r2, r3
 806211e:	d121      	bne.n	8062164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8062120:	68fb      	ldr	r3, [r7, #12]
 8062122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8062126:	687b      	ldr	r3, [r7, #4]
 8062128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 806212a:	429a      	cmp	r2, r3
 806212c:	d11a      	bne.n	8062164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 806212e:	68fa      	ldr	r2, [r7, #12]
 8062130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8062134:	4013      	ands	r3, r2
 8062136:	687a      	ldr	r2, [r7, #4]
 8062138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 806213a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 806213c:	4293      	cmp	r3, r2
 806213e:	d111      	bne.n	8062164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8062140:	68fb      	ldr	r3, [r7, #12]
 8062142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8062146:	687b      	ldr	r3, [r7, #4]
 8062148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806214a:	085b      	lsrs	r3, r3, #1
 806214c:	3b01      	subs	r3, #1
 806214e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8062150:	429a      	cmp	r2, r3
 8062152:	d107      	bne.n	8062164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8062154:	68fb      	ldr	r3, [r7, #12]
 8062156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 806215a:	687b      	ldr	r3, [r7, #4]
 806215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806215e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8062160:	429a      	cmp	r2, r3
 8062162:	d001      	beq.n	8062168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8062164:	2301      	movs	r3, #1
 8062166:	e000      	b.n	806216a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8062168:	2300      	movs	r3, #0
}
 806216a:	4618      	mov	r0, r3
 806216c:	3718      	adds	r7, #24
 806216e:	46bd      	mov	sp, r7
 8062170:	bd80      	pop	{r7, pc}
 8062172:	bf00      	nop
 8062174:	40023800 	.word	0x40023800

08062178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8062178:	b580      	push	{r7, lr}
 806217a:	b084      	sub	sp, #16
 806217c:	af00      	add	r7, sp, #0
 806217e:	6078      	str	r0, [r7, #4]
 8062180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8062182:	687b      	ldr	r3, [r7, #4]
 8062184:	2b00      	cmp	r3, #0
 8062186:	d101      	bne.n	806218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8062188:	2301      	movs	r3, #1
 806218a:	e0cc      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 806218c:	4b68      	ldr	r3, [pc, #416]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 806218e:	681b      	ldr	r3, [r3, #0]
 8062190:	f003 030f 	and.w	r3, r3, #15
 8062194:	683a      	ldr	r2, [r7, #0]
 8062196:	429a      	cmp	r2, r3
 8062198:	d90c      	bls.n	80621b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 806219a:	4b65      	ldr	r3, [pc, #404]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 806219c:	683a      	ldr	r2, [r7, #0]
 806219e:	b2d2      	uxtb	r2, r2
 80621a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80621a2:	4b63      	ldr	r3, [pc, #396]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 80621a4:	681b      	ldr	r3, [r3, #0]
 80621a6:	f003 030f 	and.w	r3, r3, #15
 80621aa:	683a      	ldr	r2, [r7, #0]
 80621ac:	429a      	cmp	r2, r3
 80621ae:	d001      	beq.n	80621b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80621b0:	2301      	movs	r3, #1
 80621b2:	e0b8      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80621b4:	687b      	ldr	r3, [r7, #4]
 80621b6:	681b      	ldr	r3, [r3, #0]
 80621b8:	f003 0302 	and.w	r3, r3, #2
 80621bc:	2b00      	cmp	r3, #0
 80621be:	d020      	beq.n	8062202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80621c0:	687b      	ldr	r3, [r7, #4]
 80621c2:	681b      	ldr	r3, [r3, #0]
 80621c4:	f003 0304 	and.w	r3, r3, #4
 80621c8:	2b00      	cmp	r3, #0
 80621ca:	d005      	beq.n	80621d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80621cc:	4b59      	ldr	r3, [pc, #356]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621ce:	689b      	ldr	r3, [r3, #8]
 80621d0:	4a58      	ldr	r2, [pc, #352]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80621d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80621d8:	687b      	ldr	r3, [r7, #4]
 80621da:	681b      	ldr	r3, [r3, #0]
 80621dc:	f003 0308 	and.w	r3, r3, #8
 80621e0:	2b00      	cmp	r3, #0
 80621e2:	d005      	beq.n	80621f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80621e4:	4b53      	ldr	r3, [pc, #332]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621e6:	689b      	ldr	r3, [r3, #8]
 80621e8:	4a52      	ldr	r2, [pc, #328]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80621ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80621f0:	4b50      	ldr	r3, [pc, #320]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621f2:	689b      	ldr	r3, [r3, #8]
 80621f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80621f8:	687b      	ldr	r3, [r7, #4]
 80621fa:	689b      	ldr	r3, [r3, #8]
 80621fc:	494d      	ldr	r1, [pc, #308]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80621fe:	4313      	orrs	r3, r2
 8062200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8062202:	687b      	ldr	r3, [r7, #4]
 8062204:	681b      	ldr	r3, [r3, #0]
 8062206:	f003 0301 	and.w	r3, r3, #1
 806220a:	2b00      	cmp	r3, #0
 806220c:	d044      	beq.n	8062298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 806220e:	687b      	ldr	r3, [r7, #4]
 8062210:	685b      	ldr	r3, [r3, #4]
 8062212:	2b01      	cmp	r3, #1
 8062214:	d107      	bne.n	8062226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8062216:	4b47      	ldr	r3, [pc, #284]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062218:	681b      	ldr	r3, [r3, #0]
 806221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806221e:	2b00      	cmp	r3, #0
 8062220:	d119      	bne.n	8062256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8062222:	2301      	movs	r3, #1
 8062224:	e07f      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8062226:	687b      	ldr	r3, [r7, #4]
 8062228:	685b      	ldr	r3, [r3, #4]
 806222a:	2b02      	cmp	r3, #2
 806222c:	d003      	beq.n	8062236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 806222e:	687b      	ldr	r3, [r7, #4]
 8062230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8062232:	2b03      	cmp	r3, #3
 8062234:	d107      	bne.n	8062246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8062236:	4b3f      	ldr	r3, [pc, #252]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062238:	681b      	ldr	r3, [r3, #0]
 806223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 806223e:	2b00      	cmp	r3, #0
 8062240:	d109      	bne.n	8062256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8062242:	2301      	movs	r3, #1
 8062244:	e06f      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8062246:	4b3b      	ldr	r3, [pc, #236]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062248:	681b      	ldr	r3, [r3, #0]
 806224a:	f003 0302 	and.w	r3, r3, #2
 806224e:	2b00      	cmp	r3, #0
 8062250:	d101      	bne.n	8062256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8062252:	2301      	movs	r3, #1
 8062254:	e067      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8062256:	4b37      	ldr	r3, [pc, #220]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062258:	689b      	ldr	r3, [r3, #8]
 806225a:	f023 0203 	bic.w	r2, r3, #3
 806225e:	687b      	ldr	r3, [r7, #4]
 8062260:	685b      	ldr	r3, [r3, #4]
 8062262:	4934      	ldr	r1, [pc, #208]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062264:	4313      	orrs	r3, r2
 8062266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8062268:	f7fe fdd4 	bl	8060e14 <HAL_GetTick>
 806226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 806226e:	e00a      	b.n	8062286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8062270:	f7fe fdd0 	bl	8060e14 <HAL_GetTick>
 8062274:	4602      	mov	r2, r0
 8062276:	68fb      	ldr	r3, [r7, #12]
 8062278:	1ad3      	subs	r3, r2, r3
 806227a:	f241 3288 	movw	r2, #5000	; 0x1388
 806227e:	4293      	cmp	r3, r2
 8062280:	d901      	bls.n	8062286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8062282:	2303      	movs	r3, #3
 8062284:	e04f      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8062286:	4b2b      	ldr	r3, [pc, #172]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062288:	689b      	ldr	r3, [r3, #8]
 806228a:	f003 020c 	and.w	r2, r3, #12
 806228e:	687b      	ldr	r3, [r7, #4]
 8062290:	685b      	ldr	r3, [r3, #4]
 8062292:	009b      	lsls	r3, r3, #2
 8062294:	429a      	cmp	r2, r3
 8062296:	d1eb      	bne.n	8062270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8062298:	4b25      	ldr	r3, [pc, #148]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 806229a:	681b      	ldr	r3, [r3, #0]
 806229c:	f003 030f 	and.w	r3, r3, #15
 80622a0:	683a      	ldr	r2, [r7, #0]
 80622a2:	429a      	cmp	r2, r3
 80622a4:	d20c      	bcs.n	80622c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80622a6:	4b22      	ldr	r3, [pc, #136]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 80622a8:	683a      	ldr	r2, [r7, #0]
 80622aa:	b2d2      	uxtb	r2, r2
 80622ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80622ae:	4b20      	ldr	r3, [pc, #128]	; (8062330 <HAL_RCC_ClockConfig+0x1b8>)
 80622b0:	681b      	ldr	r3, [r3, #0]
 80622b2:	f003 030f 	and.w	r3, r3, #15
 80622b6:	683a      	ldr	r2, [r7, #0]
 80622b8:	429a      	cmp	r2, r3
 80622ba:	d001      	beq.n	80622c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80622bc:	2301      	movs	r3, #1
 80622be:	e032      	b.n	8062326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80622c0:	687b      	ldr	r3, [r7, #4]
 80622c2:	681b      	ldr	r3, [r3, #0]
 80622c4:	f003 0304 	and.w	r3, r3, #4
 80622c8:	2b00      	cmp	r3, #0
 80622ca:	d008      	beq.n	80622de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80622cc:	4b19      	ldr	r3, [pc, #100]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80622ce:	689b      	ldr	r3, [r3, #8]
 80622d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80622d4:	687b      	ldr	r3, [r7, #4]
 80622d6:	68db      	ldr	r3, [r3, #12]
 80622d8:	4916      	ldr	r1, [pc, #88]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80622da:	4313      	orrs	r3, r2
 80622dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80622de:	687b      	ldr	r3, [r7, #4]
 80622e0:	681b      	ldr	r3, [r3, #0]
 80622e2:	f003 0308 	and.w	r3, r3, #8
 80622e6:	2b00      	cmp	r3, #0
 80622e8:	d009      	beq.n	80622fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80622ea:	4b12      	ldr	r3, [pc, #72]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80622ec:	689b      	ldr	r3, [r3, #8]
 80622ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80622f2:	687b      	ldr	r3, [r7, #4]
 80622f4:	691b      	ldr	r3, [r3, #16]
 80622f6:	00db      	lsls	r3, r3, #3
 80622f8:	490e      	ldr	r1, [pc, #56]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 80622fa:	4313      	orrs	r3, r2
 80622fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80622fe:	f000 f821 	bl	8062344 <HAL_RCC_GetSysClockFreq>
 8062302:	4602      	mov	r2, r0
 8062304:	4b0b      	ldr	r3, [pc, #44]	; (8062334 <HAL_RCC_ClockConfig+0x1bc>)
 8062306:	689b      	ldr	r3, [r3, #8]
 8062308:	091b      	lsrs	r3, r3, #4
 806230a:	f003 030f 	and.w	r3, r3, #15
 806230e:	490a      	ldr	r1, [pc, #40]	; (8062338 <HAL_RCC_ClockConfig+0x1c0>)
 8062310:	5ccb      	ldrb	r3, [r1, r3]
 8062312:	fa22 f303 	lsr.w	r3, r2, r3
 8062316:	4a09      	ldr	r2, [pc, #36]	; (806233c <HAL_RCC_ClockConfig+0x1c4>)
 8062318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 806231a:	4b09      	ldr	r3, [pc, #36]	; (8062340 <HAL_RCC_ClockConfig+0x1c8>)
 806231c:	681b      	ldr	r3, [r3, #0]
 806231e:	4618      	mov	r0, r3
 8062320:	f7fe fd34 	bl	8060d8c <HAL_InitTick>

  return HAL_OK;
 8062324:	2300      	movs	r3, #0
}
 8062326:	4618      	mov	r0, r3
 8062328:	3710      	adds	r7, #16
 806232a:	46bd      	mov	sp, r7
 806232c:	bd80      	pop	{r7, pc}
 806232e:	bf00      	nop
 8062330:	40023c00 	.word	0x40023c00
 8062334:	40023800 	.word	0x40023800
 8062338:	08063258 	.word	0x08063258
 806233c:	20000000 	.word	0x20000000
 8062340:	20000004 	.word	0x20000004

08062344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8062344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8062348:	b094      	sub	sp, #80	; 0x50
 806234a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 806234c:	2300      	movs	r3, #0
 806234e:	647b      	str	r3, [r7, #68]	; 0x44
 8062350:	2300      	movs	r3, #0
 8062352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8062354:	2300      	movs	r3, #0
 8062356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8062358:	2300      	movs	r3, #0
 806235a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 806235c:	4b79      	ldr	r3, [pc, #484]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 806235e:	689b      	ldr	r3, [r3, #8]
 8062360:	f003 030c 	and.w	r3, r3, #12
 8062364:	2b08      	cmp	r3, #8
 8062366:	d00d      	beq.n	8062384 <HAL_RCC_GetSysClockFreq+0x40>
 8062368:	2b08      	cmp	r3, #8
 806236a:	f200 80e1 	bhi.w	8062530 <HAL_RCC_GetSysClockFreq+0x1ec>
 806236e:	2b00      	cmp	r3, #0
 8062370:	d002      	beq.n	8062378 <HAL_RCC_GetSysClockFreq+0x34>
 8062372:	2b04      	cmp	r3, #4
 8062374:	d003      	beq.n	806237e <HAL_RCC_GetSysClockFreq+0x3a>
 8062376:	e0db      	b.n	8062530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8062378:	4b73      	ldr	r3, [pc, #460]	; (8062548 <HAL_RCC_GetSysClockFreq+0x204>)
 806237a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 806237c:	e0db      	b.n	8062536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 806237e:	4b73      	ldr	r3, [pc, #460]	; (806254c <HAL_RCC_GetSysClockFreq+0x208>)
 8062380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8062382:	e0d8      	b.n	8062536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8062384:	4b6f      	ldr	r3, [pc, #444]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 8062386:	685b      	ldr	r3, [r3, #4]
 8062388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806238c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 806238e:	4b6d      	ldr	r3, [pc, #436]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 8062390:	685b      	ldr	r3, [r3, #4]
 8062392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8062396:	2b00      	cmp	r3, #0
 8062398:	d063      	beq.n	8062462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 806239a:	4b6a      	ldr	r3, [pc, #424]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 806239c:	685b      	ldr	r3, [r3, #4]
 806239e:	099b      	lsrs	r3, r3, #6
 80623a0:	2200      	movs	r2, #0
 80623a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80623a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80623a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80623a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80623ac:	633b      	str	r3, [r7, #48]	; 0x30
 80623ae:	2300      	movs	r3, #0
 80623b0:	637b      	str	r3, [r7, #52]	; 0x34
 80623b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80623b6:	4622      	mov	r2, r4
 80623b8:	462b      	mov	r3, r5
 80623ba:	f04f 0000 	mov.w	r0, #0
 80623be:	f04f 0100 	mov.w	r1, #0
 80623c2:	0159      	lsls	r1, r3, #5
 80623c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80623c8:	0150      	lsls	r0, r2, #5
 80623ca:	4602      	mov	r2, r0
 80623cc:	460b      	mov	r3, r1
 80623ce:	4621      	mov	r1, r4
 80623d0:	1a51      	subs	r1, r2, r1
 80623d2:	6139      	str	r1, [r7, #16]
 80623d4:	4629      	mov	r1, r5
 80623d6:	eb63 0301 	sbc.w	r3, r3, r1
 80623da:	617b      	str	r3, [r7, #20]
 80623dc:	f04f 0200 	mov.w	r2, #0
 80623e0:	f04f 0300 	mov.w	r3, #0
 80623e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80623e8:	4659      	mov	r1, fp
 80623ea:	018b      	lsls	r3, r1, #6
 80623ec:	4651      	mov	r1, sl
 80623ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80623f2:	4651      	mov	r1, sl
 80623f4:	018a      	lsls	r2, r1, #6
 80623f6:	4651      	mov	r1, sl
 80623f8:	ebb2 0801 	subs.w	r8, r2, r1
 80623fc:	4659      	mov	r1, fp
 80623fe:	eb63 0901 	sbc.w	r9, r3, r1
 8062402:	f04f 0200 	mov.w	r2, #0
 8062406:	f04f 0300 	mov.w	r3, #0
 806240a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 806240e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8062412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8062416:	4690      	mov	r8, r2
 8062418:	4699      	mov	r9, r3
 806241a:	4623      	mov	r3, r4
 806241c:	eb18 0303 	adds.w	r3, r8, r3
 8062420:	60bb      	str	r3, [r7, #8]
 8062422:	462b      	mov	r3, r5
 8062424:	eb49 0303 	adc.w	r3, r9, r3
 8062428:	60fb      	str	r3, [r7, #12]
 806242a:	f04f 0200 	mov.w	r2, #0
 806242e:	f04f 0300 	mov.w	r3, #0
 8062432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8062436:	4629      	mov	r1, r5
 8062438:	024b      	lsls	r3, r1, #9
 806243a:	4621      	mov	r1, r4
 806243c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8062440:	4621      	mov	r1, r4
 8062442:	024a      	lsls	r2, r1, #9
 8062444:	4610      	mov	r0, r2
 8062446:	4619      	mov	r1, r3
 8062448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806244a:	2200      	movs	r2, #0
 806244c:	62bb      	str	r3, [r7, #40]	; 0x28
 806244e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8062450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8062454:	f7fd feca 	bl	80601ec <__aeabi_uldivmod>
 8062458:	4602      	mov	r2, r0
 806245a:	460b      	mov	r3, r1
 806245c:	4613      	mov	r3, r2
 806245e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8062460:	e058      	b.n	8062514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8062462:	4b38      	ldr	r3, [pc, #224]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 8062464:	685b      	ldr	r3, [r3, #4]
 8062466:	099b      	lsrs	r3, r3, #6
 8062468:	2200      	movs	r2, #0
 806246a:	4618      	mov	r0, r3
 806246c:	4611      	mov	r1, r2
 806246e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8062472:	623b      	str	r3, [r7, #32]
 8062474:	2300      	movs	r3, #0
 8062476:	627b      	str	r3, [r7, #36]	; 0x24
 8062478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 806247c:	4642      	mov	r2, r8
 806247e:	464b      	mov	r3, r9
 8062480:	f04f 0000 	mov.w	r0, #0
 8062484:	f04f 0100 	mov.w	r1, #0
 8062488:	0159      	lsls	r1, r3, #5
 806248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 806248e:	0150      	lsls	r0, r2, #5
 8062490:	4602      	mov	r2, r0
 8062492:	460b      	mov	r3, r1
 8062494:	4641      	mov	r1, r8
 8062496:	ebb2 0a01 	subs.w	sl, r2, r1
 806249a:	4649      	mov	r1, r9
 806249c:	eb63 0b01 	sbc.w	fp, r3, r1
 80624a0:	f04f 0200 	mov.w	r2, #0
 80624a4:	f04f 0300 	mov.w	r3, #0
 80624a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80624ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80624b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80624b4:	ebb2 040a 	subs.w	r4, r2, sl
 80624b8:	eb63 050b 	sbc.w	r5, r3, fp
 80624bc:	f04f 0200 	mov.w	r2, #0
 80624c0:	f04f 0300 	mov.w	r3, #0
 80624c4:	00eb      	lsls	r3, r5, #3
 80624c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80624ca:	00e2      	lsls	r2, r4, #3
 80624cc:	4614      	mov	r4, r2
 80624ce:	461d      	mov	r5, r3
 80624d0:	4643      	mov	r3, r8
 80624d2:	18e3      	adds	r3, r4, r3
 80624d4:	603b      	str	r3, [r7, #0]
 80624d6:	464b      	mov	r3, r9
 80624d8:	eb45 0303 	adc.w	r3, r5, r3
 80624dc:	607b      	str	r3, [r7, #4]
 80624de:	f04f 0200 	mov.w	r2, #0
 80624e2:	f04f 0300 	mov.w	r3, #0
 80624e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80624ea:	4629      	mov	r1, r5
 80624ec:	028b      	lsls	r3, r1, #10
 80624ee:	4621      	mov	r1, r4
 80624f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80624f4:	4621      	mov	r1, r4
 80624f6:	028a      	lsls	r2, r1, #10
 80624f8:	4610      	mov	r0, r2
 80624fa:	4619      	mov	r1, r3
 80624fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80624fe:	2200      	movs	r2, #0
 8062500:	61bb      	str	r3, [r7, #24]
 8062502:	61fa      	str	r2, [r7, #28]
 8062504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8062508:	f7fd fe70 	bl	80601ec <__aeabi_uldivmod>
 806250c:	4602      	mov	r2, r0
 806250e:	460b      	mov	r3, r1
 8062510:	4613      	mov	r3, r2
 8062512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8062514:	4b0b      	ldr	r3, [pc, #44]	; (8062544 <HAL_RCC_GetSysClockFreq+0x200>)
 8062516:	685b      	ldr	r3, [r3, #4]
 8062518:	0c1b      	lsrs	r3, r3, #16
 806251a:	f003 0303 	and.w	r3, r3, #3
 806251e:	3301      	adds	r3, #1
 8062520:	005b      	lsls	r3, r3, #1
 8062522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8062524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8062526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8062528:	fbb2 f3f3 	udiv	r3, r2, r3
 806252c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 806252e:	e002      	b.n	8062536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8062530:	4b05      	ldr	r3, [pc, #20]	; (8062548 <HAL_RCC_GetSysClockFreq+0x204>)
 8062532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8062534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8062536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8062538:	4618      	mov	r0, r3
 806253a:	3750      	adds	r7, #80	; 0x50
 806253c:	46bd      	mov	sp, r7
 806253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8062542:	bf00      	nop
 8062544:	40023800 	.word	0x40023800
 8062548:	00f42400 	.word	0x00f42400
 806254c:	007a1200 	.word	0x007a1200

08062550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8062550:	b480      	push	{r7}
 8062552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8062554:	4b03      	ldr	r3, [pc, #12]	; (8062564 <HAL_RCC_GetHCLKFreq+0x14>)
 8062556:	681b      	ldr	r3, [r3, #0]
}
 8062558:	4618      	mov	r0, r3
 806255a:	46bd      	mov	sp, r7
 806255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062560:	4770      	bx	lr
 8062562:	bf00      	nop
 8062564:	20000000 	.word	0x20000000

08062568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8062568:	b580      	push	{r7, lr}
 806256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 806256c:	f7ff fff0 	bl	8062550 <HAL_RCC_GetHCLKFreq>
 8062570:	4602      	mov	r2, r0
 8062572:	4b05      	ldr	r3, [pc, #20]	; (8062588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8062574:	689b      	ldr	r3, [r3, #8]
 8062576:	0a9b      	lsrs	r3, r3, #10
 8062578:	f003 0307 	and.w	r3, r3, #7
 806257c:	4903      	ldr	r1, [pc, #12]	; (806258c <HAL_RCC_GetPCLK1Freq+0x24>)
 806257e:	5ccb      	ldrb	r3, [r1, r3]
 8062580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8062584:	4618      	mov	r0, r3
 8062586:	bd80      	pop	{r7, pc}
 8062588:	40023800 	.word	0x40023800
 806258c:	08063268 	.word	0x08063268

08062590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8062590:	b580      	push	{r7, lr}
 8062592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8062594:	f7ff ffdc 	bl	8062550 <HAL_RCC_GetHCLKFreq>
 8062598:	4602      	mov	r2, r0
 806259a:	4b05      	ldr	r3, [pc, #20]	; (80625b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 806259c:	689b      	ldr	r3, [r3, #8]
 806259e:	0b5b      	lsrs	r3, r3, #13
 80625a0:	f003 0307 	and.w	r3, r3, #7
 80625a4:	4903      	ldr	r1, [pc, #12]	; (80625b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80625a6:	5ccb      	ldrb	r3, [r1, r3]
 80625a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80625ac:	4618      	mov	r0, r3
 80625ae:	bd80      	pop	{r7, pc}
 80625b0:	40023800 	.word	0x40023800
 80625b4:	08063268 	.word	0x08063268

080625b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80625b8:	b580      	push	{r7, lr}
 80625ba:	b082      	sub	sp, #8
 80625bc:	af00      	add	r7, sp, #0
 80625be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80625c0:	687b      	ldr	r3, [r7, #4]
 80625c2:	2b00      	cmp	r3, #0
 80625c4:	d101      	bne.n	80625ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80625c6:	2301      	movs	r3, #1
 80625c8:	e01c      	b.n	8062604 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80625ca:	687b      	ldr	r3, [r7, #4]
 80625cc:	795b      	ldrb	r3, [r3, #5]
 80625ce:	b2db      	uxtb	r3, r3
 80625d0:	2b00      	cmp	r3, #0
 80625d2:	d105      	bne.n	80625e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80625d4:	687b      	ldr	r3, [r7, #4]
 80625d6:	2200      	movs	r2, #0
 80625d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80625da:	6878      	ldr	r0, [r7, #4]
 80625dc:	f7fe fa70 	bl	8060ac0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80625e0:	687b      	ldr	r3, [r7, #4]
 80625e2:	2202      	movs	r2, #2
 80625e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80625e6:	687b      	ldr	r3, [r7, #4]
 80625e8:	681b      	ldr	r3, [r3, #0]
 80625ea:	681a      	ldr	r2, [r3, #0]
 80625ec:	687b      	ldr	r3, [r7, #4]
 80625ee:	681b      	ldr	r3, [r3, #0]
 80625f0:	f042 0204 	orr.w	r2, r2, #4
 80625f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80625f6:	687b      	ldr	r3, [r7, #4]
 80625f8:	2201      	movs	r2, #1
 80625fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80625fc:	687b      	ldr	r3, [r7, #4]
 80625fe:	2200      	movs	r2, #0
 8062600:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8062602:	2300      	movs	r3, #0
}
 8062604:	4618      	mov	r0, r3
 8062606:	3708      	adds	r7, #8
 8062608:	46bd      	mov	sp, r7
 806260a:	bd80      	pop	{r7, pc}

0806260c <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 806260c:	b580      	push	{r7, lr}
 806260e:	b082      	sub	sp, #8
 8062610:	af00      	add	r7, sp, #0
 8062612:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8062614:	687b      	ldr	r3, [r7, #4]
 8062616:	2b00      	cmp	r3, #0
 8062618:	d101      	bne.n	806261e <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 806261a:	2301      	movs	r3, #1
 806261c:	e01c      	b.n	8062658 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 806261e:	687b      	ldr	r3, [r7, #4]
 8062620:	681b      	ldr	r3, [r3, #0]
 8062622:	681a      	ldr	r2, [r3, #0]
 8062624:	687b      	ldr	r3, [r7, #4]
 8062626:	681b      	ldr	r3, [r3, #0]
 8062628:	f022 020c 	bic.w	r2, r2, #12
 806262c:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 806262e:	687b      	ldr	r3, [r7, #4]
 8062630:	681b      	ldr	r3, [r3, #0]
 8062632:	685a      	ldr	r2, [r3, #4]
 8062634:	687b      	ldr	r3, [r7, #4]
 8062636:	681b      	ldr	r3, [r3, #0]
 8062638:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 806263c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 806263e:	6878      	ldr	r0, [r7, #4]
 8062640:	f7fe fa60 	bl	8060b04 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8062644:	687b      	ldr	r3, [r7, #4]
 8062646:	2200      	movs	r2, #0
 8062648:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 806264a:	687b      	ldr	r3, [r7, #4]
 806264c:	2200      	movs	r2, #0
 806264e:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8062650:	687b      	ldr	r3, [r7, #4]
 8062652:	2200      	movs	r2, #0
 8062654:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8062656:	2300      	movs	r3, #0
}
 8062658:	4618      	mov	r0, r3
 806265a:	3708      	adds	r7, #8
 806265c:	46bd      	mov	sp, r7
 806265e:	bd80      	pop	{r7, pc}

08062660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8062660:	b580      	push	{r7, lr}
 8062662:	b082      	sub	sp, #8
 8062664:	af00      	add	r7, sp, #0
 8062666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8062668:	687b      	ldr	r3, [r7, #4]
 806266a:	2b00      	cmp	r3, #0
 806266c:	d101      	bne.n	8062672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 806266e:	2301      	movs	r3, #1
 8062670:	e03f      	b.n	80626f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8062672:	687b      	ldr	r3, [r7, #4]
 8062674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8062678:	b2db      	uxtb	r3, r3
 806267a:	2b00      	cmp	r3, #0
 806267c:	d106      	bne.n	806268c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 806267e:	687b      	ldr	r3, [r7, #4]
 8062680:	2200      	movs	r2, #0
 8062682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8062686:	6878      	ldr	r0, [r7, #4]
 8062688:	f7fe fa56 	bl	8060b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 806268c:	687b      	ldr	r3, [r7, #4]
 806268e:	2224      	movs	r2, #36	; 0x24
 8062690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8062694:	687b      	ldr	r3, [r7, #4]
 8062696:	681b      	ldr	r3, [r3, #0]
 8062698:	68da      	ldr	r2, [r3, #12]
 806269a:	687b      	ldr	r3, [r7, #4]
 806269c:	681b      	ldr	r3, [r3, #0]
 806269e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80626a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80626a4:	6878      	ldr	r0, [r7, #4]
 80626a6:	f000 f829 	bl	80626fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80626aa:	687b      	ldr	r3, [r7, #4]
 80626ac:	681b      	ldr	r3, [r3, #0]
 80626ae:	691a      	ldr	r2, [r3, #16]
 80626b0:	687b      	ldr	r3, [r7, #4]
 80626b2:	681b      	ldr	r3, [r3, #0]
 80626b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80626b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80626ba:	687b      	ldr	r3, [r7, #4]
 80626bc:	681b      	ldr	r3, [r3, #0]
 80626be:	695a      	ldr	r2, [r3, #20]
 80626c0:	687b      	ldr	r3, [r7, #4]
 80626c2:	681b      	ldr	r3, [r3, #0]
 80626c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80626c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80626ca:	687b      	ldr	r3, [r7, #4]
 80626cc:	681b      	ldr	r3, [r3, #0]
 80626ce:	68da      	ldr	r2, [r3, #12]
 80626d0:	687b      	ldr	r3, [r7, #4]
 80626d2:	681b      	ldr	r3, [r3, #0]
 80626d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80626d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80626da:	687b      	ldr	r3, [r7, #4]
 80626dc:	2200      	movs	r2, #0
 80626de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80626e0:	687b      	ldr	r3, [r7, #4]
 80626e2:	2220      	movs	r2, #32
 80626e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80626e8:	687b      	ldr	r3, [r7, #4]
 80626ea:	2220      	movs	r2, #32
 80626ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80626f0:	2300      	movs	r3, #0
}
 80626f2:	4618      	mov	r0, r3
 80626f4:	3708      	adds	r7, #8
 80626f6:	46bd      	mov	sp, r7
 80626f8:	bd80      	pop	{r7, pc}
	...

080626fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80626fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8062700:	b0c0      	sub	sp, #256	; 0x100
 8062702:	af00      	add	r7, sp, #0
 8062704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8062708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806270c:	681b      	ldr	r3, [r3, #0]
 806270e:	691b      	ldr	r3, [r3, #16]
 8062710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8062714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062718:	68d9      	ldr	r1, [r3, #12]
 806271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806271e:	681a      	ldr	r2, [r3, #0]
 8062720:	ea40 0301 	orr.w	r3, r0, r1
 8062724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8062726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806272a:	689a      	ldr	r2, [r3, #8]
 806272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062730:	691b      	ldr	r3, [r3, #16]
 8062732:	431a      	orrs	r2, r3
 8062734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062738:	695b      	ldr	r3, [r3, #20]
 806273a:	431a      	orrs	r2, r3
 806273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062740:	69db      	ldr	r3, [r3, #28]
 8062742:	4313      	orrs	r3, r2
 8062744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8062748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806274c:	681b      	ldr	r3, [r3, #0]
 806274e:	68db      	ldr	r3, [r3, #12]
 8062750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8062754:	f021 010c 	bic.w	r1, r1, #12
 8062758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806275c:	681a      	ldr	r2, [r3, #0]
 806275e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8062762:	430b      	orrs	r3, r1
 8062764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8062766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806276a:	681b      	ldr	r3, [r3, #0]
 806276c:	695b      	ldr	r3, [r3, #20]
 806276e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8062772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062776:	6999      	ldr	r1, [r3, #24]
 8062778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806277c:	681a      	ldr	r2, [r3, #0]
 806277e:	ea40 0301 	orr.w	r3, r0, r1
 8062782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8062784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062788:	681a      	ldr	r2, [r3, #0]
 806278a:	4b8f      	ldr	r3, [pc, #572]	; (80629c8 <UART_SetConfig+0x2cc>)
 806278c:	429a      	cmp	r2, r3
 806278e:	d005      	beq.n	806279c <UART_SetConfig+0xa0>
 8062790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062794:	681a      	ldr	r2, [r3, #0]
 8062796:	4b8d      	ldr	r3, [pc, #564]	; (80629cc <UART_SetConfig+0x2d0>)
 8062798:	429a      	cmp	r2, r3
 806279a:	d104      	bne.n	80627a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 806279c:	f7ff fef8 	bl	8062590 <HAL_RCC_GetPCLK2Freq>
 80627a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80627a4:	e003      	b.n	80627ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80627a6:	f7ff fedf 	bl	8062568 <HAL_RCC_GetPCLK1Freq>
 80627aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80627ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80627b2:	69db      	ldr	r3, [r3, #28]
 80627b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80627b8:	f040 810c 	bne.w	80629d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80627bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80627c0:	2200      	movs	r2, #0
 80627c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80627c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80627ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80627ce:	4622      	mov	r2, r4
 80627d0:	462b      	mov	r3, r5
 80627d2:	1891      	adds	r1, r2, r2
 80627d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80627d6:	415b      	adcs	r3, r3
 80627d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80627da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80627de:	4621      	mov	r1, r4
 80627e0:	eb12 0801 	adds.w	r8, r2, r1
 80627e4:	4629      	mov	r1, r5
 80627e6:	eb43 0901 	adc.w	r9, r3, r1
 80627ea:	f04f 0200 	mov.w	r2, #0
 80627ee:	f04f 0300 	mov.w	r3, #0
 80627f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80627f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80627fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80627fe:	4690      	mov	r8, r2
 8062800:	4699      	mov	r9, r3
 8062802:	4623      	mov	r3, r4
 8062804:	eb18 0303 	adds.w	r3, r8, r3
 8062808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 806280c:	462b      	mov	r3, r5
 806280e:	eb49 0303 	adc.w	r3, r9, r3
 8062812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8062816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806281a:	685b      	ldr	r3, [r3, #4]
 806281c:	2200      	movs	r2, #0
 806281e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8062822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8062826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 806282a:	460b      	mov	r3, r1
 806282c:	18db      	adds	r3, r3, r3
 806282e:	653b      	str	r3, [r7, #80]	; 0x50
 8062830:	4613      	mov	r3, r2
 8062832:	eb42 0303 	adc.w	r3, r2, r3
 8062836:	657b      	str	r3, [r7, #84]	; 0x54
 8062838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 806283c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8062840:	f7fd fcd4 	bl	80601ec <__aeabi_uldivmod>
 8062844:	4602      	mov	r2, r0
 8062846:	460b      	mov	r3, r1
 8062848:	4b61      	ldr	r3, [pc, #388]	; (80629d0 <UART_SetConfig+0x2d4>)
 806284a:	fba3 2302 	umull	r2, r3, r3, r2
 806284e:	095b      	lsrs	r3, r3, #5
 8062850:	011c      	lsls	r4, r3, #4
 8062852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8062856:	2200      	movs	r2, #0
 8062858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 806285c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8062860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8062864:	4642      	mov	r2, r8
 8062866:	464b      	mov	r3, r9
 8062868:	1891      	adds	r1, r2, r2
 806286a:	64b9      	str	r1, [r7, #72]	; 0x48
 806286c:	415b      	adcs	r3, r3
 806286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8062870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8062874:	4641      	mov	r1, r8
 8062876:	eb12 0a01 	adds.w	sl, r2, r1
 806287a:	4649      	mov	r1, r9
 806287c:	eb43 0b01 	adc.w	fp, r3, r1
 8062880:	f04f 0200 	mov.w	r2, #0
 8062884:	f04f 0300 	mov.w	r3, #0
 8062888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 806288c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8062890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8062894:	4692      	mov	sl, r2
 8062896:	469b      	mov	fp, r3
 8062898:	4643      	mov	r3, r8
 806289a:	eb1a 0303 	adds.w	r3, sl, r3
 806289e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80628a2:	464b      	mov	r3, r9
 80628a4:	eb4b 0303 	adc.w	r3, fp, r3
 80628a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80628ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80628b0:	685b      	ldr	r3, [r3, #4]
 80628b2:	2200      	movs	r2, #0
 80628b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80628b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80628bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80628c0:	460b      	mov	r3, r1
 80628c2:	18db      	adds	r3, r3, r3
 80628c4:	643b      	str	r3, [r7, #64]	; 0x40
 80628c6:	4613      	mov	r3, r2
 80628c8:	eb42 0303 	adc.w	r3, r2, r3
 80628cc:	647b      	str	r3, [r7, #68]	; 0x44
 80628ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80628d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80628d6:	f7fd fc89 	bl	80601ec <__aeabi_uldivmod>
 80628da:	4602      	mov	r2, r0
 80628dc:	460b      	mov	r3, r1
 80628de:	4611      	mov	r1, r2
 80628e0:	4b3b      	ldr	r3, [pc, #236]	; (80629d0 <UART_SetConfig+0x2d4>)
 80628e2:	fba3 2301 	umull	r2, r3, r3, r1
 80628e6:	095b      	lsrs	r3, r3, #5
 80628e8:	2264      	movs	r2, #100	; 0x64
 80628ea:	fb02 f303 	mul.w	r3, r2, r3
 80628ee:	1acb      	subs	r3, r1, r3
 80628f0:	00db      	lsls	r3, r3, #3
 80628f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80628f6:	4b36      	ldr	r3, [pc, #216]	; (80629d0 <UART_SetConfig+0x2d4>)
 80628f8:	fba3 2302 	umull	r2, r3, r3, r2
 80628fc:	095b      	lsrs	r3, r3, #5
 80628fe:	005b      	lsls	r3, r3, #1
 8062900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8062904:	441c      	add	r4, r3
 8062906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 806290a:	2200      	movs	r2, #0
 806290c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8062910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8062914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8062918:	4642      	mov	r2, r8
 806291a:	464b      	mov	r3, r9
 806291c:	1891      	adds	r1, r2, r2
 806291e:	63b9      	str	r1, [r7, #56]	; 0x38
 8062920:	415b      	adcs	r3, r3
 8062922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8062924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8062928:	4641      	mov	r1, r8
 806292a:	1851      	adds	r1, r2, r1
 806292c:	6339      	str	r1, [r7, #48]	; 0x30
 806292e:	4649      	mov	r1, r9
 8062930:	414b      	adcs	r3, r1
 8062932:	637b      	str	r3, [r7, #52]	; 0x34
 8062934:	f04f 0200 	mov.w	r2, #0
 8062938:	f04f 0300 	mov.w	r3, #0
 806293c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8062940:	4659      	mov	r1, fp
 8062942:	00cb      	lsls	r3, r1, #3
 8062944:	4651      	mov	r1, sl
 8062946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 806294a:	4651      	mov	r1, sl
 806294c:	00ca      	lsls	r2, r1, #3
 806294e:	4610      	mov	r0, r2
 8062950:	4619      	mov	r1, r3
 8062952:	4603      	mov	r3, r0
 8062954:	4642      	mov	r2, r8
 8062956:	189b      	adds	r3, r3, r2
 8062958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 806295c:	464b      	mov	r3, r9
 806295e:	460a      	mov	r2, r1
 8062960:	eb42 0303 	adc.w	r3, r2, r3
 8062964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8062968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 806296c:	685b      	ldr	r3, [r3, #4]
 806296e:	2200      	movs	r2, #0
 8062970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8062974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8062978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 806297c:	460b      	mov	r3, r1
 806297e:	18db      	adds	r3, r3, r3
 8062980:	62bb      	str	r3, [r7, #40]	; 0x28
 8062982:	4613      	mov	r3, r2
 8062984:	eb42 0303 	adc.w	r3, r2, r3
 8062988:	62fb      	str	r3, [r7, #44]	; 0x2c
 806298a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 806298e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8062992:	f7fd fc2b 	bl	80601ec <__aeabi_uldivmod>
 8062996:	4602      	mov	r2, r0
 8062998:	460b      	mov	r3, r1
 806299a:	4b0d      	ldr	r3, [pc, #52]	; (80629d0 <UART_SetConfig+0x2d4>)
 806299c:	fba3 1302 	umull	r1, r3, r3, r2
 80629a0:	095b      	lsrs	r3, r3, #5
 80629a2:	2164      	movs	r1, #100	; 0x64
 80629a4:	fb01 f303 	mul.w	r3, r1, r3
 80629a8:	1ad3      	subs	r3, r2, r3
 80629aa:	00db      	lsls	r3, r3, #3
 80629ac:	3332      	adds	r3, #50	; 0x32
 80629ae:	4a08      	ldr	r2, [pc, #32]	; (80629d0 <UART_SetConfig+0x2d4>)
 80629b0:	fba2 2303 	umull	r2, r3, r2, r3
 80629b4:	095b      	lsrs	r3, r3, #5
 80629b6:	f003 0207 	and.w	r2, r3, #7
 80629ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80629be:	681b      	ldr	r3, [r3, #0]
 80629c0:	4422      	add	r2, r4
 80629c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80629c4:	e105      	b.n	8062bd2 <UART_SetConfig+0x4d6>
 80629c6:	bf00      	nop
 80629c8:	40011000 	.word	0x40011000
 80629cc:	40011400 	.word	0x40011400
 80629d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80629d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80629d8:	2200      	movs	r2, #0
 80629da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80629de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80629e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80629e6:	4642      	mov	r2, r8
 80629e8:	464b      	mov	r3, r9
 80629ea:	1891      	adds	r1, r2, r2
 80629ec:	6239      	str	r1, [r7, #32]
 80629ee:	415b      	adcs	r3, r3
 80629f0:	627b      	str	r3, [r7, #36]	; 0x24
 80629f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80629f6:	4641      	mov	r1, r8
 80629f8:	1854      	adds	r4, r2, r1
 80629fa:	4649      	mov	r1, r9
 80629fc:	eb43 0501 	adc.w	r5, r3, r1
 8062a00:	f04f 0200 	mov.w	r2, #0
 8062a04:	f04f 0300 	mov.w	r3, #0
 8062a08:	00eb      	lsls	r3, r5, #3
 8062a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8062a0e:	00e2      	lsls	r2, r4, #3
 8062a10:	4614      	mov	r4, r2
 8062a12:	461d      	mov	r5, r3
 8062a14:	4643      	mov	r3, r8
 8062a16:	18e3      	adds	r3, r4, r3
 8062a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8062a1c:	464b      	mov	r3, r9
 8062a1e:	eb45 0303 	adc.w	r3, r5, r3
 8062a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8062a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062a2a:	685b      	ldr	r3, [r3, #4]
 8062a2c:	2200      	movs	r2, #0
 8062a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8062a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8062a36:	f04f 0200 	mov.w	r2, #0
 8062a3a:	f04f 0300 	mov.w	r3, #0
 8062a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8062a42:	4629      	mov	r1, r5
 8062a44:	008b      	lsls	r3, r1, #2
 8062a46:	4621      	mov	r1, r4
 8062a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8062a4c:	4621      	mov	r1, r4
 8062a4e:	008a      	lsls	r2, r1, #2
 8062a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8062a54:	f7fd fbca 	bl	80601ec <__aeabi_uldivmod>
 8062a58:	4602      	mov	r2, r0
 8062a5a:	460b      	mov	r3, r1
 8062a5c:	4b60      	ldr	r3, [pc, #384]	; (8062be0 <UART_SetConfig+0x4e4>)
 8062a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8062a62:	095b      	lsrs	r3, r3, #5
 8062a64:	011c      	lsls	r4, r3, #4
 8062a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8062a6a:	2200      	movs	r2, #0
 8062a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8062a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8062a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8062a78:	4642      	mov	r2, r8
 8062a7a:	464b      	mov	r3, r9
 8062a7c:	1891      	adds	r1, r2, r2
 8062a7e:	61b9      	str	r1, [r7, #24]
 8062a80:	415b      	adcs	r3, r3
 8062a82:	61fb      	str	r3, [r7, #28]
 8062a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8062a88:	4641      	mov	r1, r8
 8062a8a:	1851      	adds	r1, r2, r1
 8062a8c:	6139      	str	r1, [r7, #16]
 8062a8e:	4649      	mov	r1, r9
 8062a90:	414b      	adcs	r3, r1
 8062a92:	617b      	str	r3, [r7, #20]
 8062a94:	f04f 0200 	mov.w	r2, #0
 8062a98:	f04f 0300 	mov.w	r3, #0
 8062a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8062aa0:	4659      	mov	r1, fp
 8062aa2:	00cb      	lsls	r3, r1, #3
 8062aa4:	4651      	mov	r1, sl
 8062aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8062aaa:	4651      	mov	r1, sl
 8062aac:	00ca      	lsls	r2, r1, #3
 8062aae:	4610      	mov	r0, r2
 8062ab0:	4619      	mov	r1, r3
 8062ab2:	4603      	mov	r3, r0
 8062ab4:	4642      	mov	r2, r8
 8062ab6:	189b      	adds	r3, r3, r2
 8062ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8062abc:	464b      	mov	r3, r9
 8062abe:	460a      	mov	r2, r1
 8062ac0:	eb42 0303 	adc.w	r3, r2, r3
 8062ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8062ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062acc:	685b      	ldr	r3, [r3, #4]
 8062ace:	2200      	movs	r2, #0
 8062ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8062ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8062ad4:	f04f 0200 	mov.w	r2, #0
 8062ad8:	f04f 0300 	mov.w	r3, #0
 8062adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8062ae0:	4649      	mov	r1, r9
 8062ae2:	008b      	lsls	r3, r1, #2
 8062ae4:	4641      	mov	r1, r8
 8062ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8062aea:	4641      	mov	r1, r8
 8062aec:	008a      	lsls	r2, r1, #2
 8062aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8062af2:	f7fd fb7b 	bl	80601ec <__aeabi_uldivmod>
 8062af6:	4602      	mov	r2, r0
 8062af8:	460b      	mov	r3, r1
 8062afa:	4b39      	ldr	r3, [pc, #228]	; (8062be0 <UART_SetConfig+0x4e4>)
 8062afc:	fba3 1302 	umull	r1, r3, r3, r2
 8062b00:	095b      	lsrs	r3, r3, #5
 8062b02:	2164      	movs	r1, #100	; 0x64
 8062b04:	fb01 f303 	mul.w	r3, r1, r3
 8062b08:	1ad3      	subs	r3, r2, r3
 8062b0a:	011b      	lsls	r3, r3, #4
 8062b0c:	3332      	adds	r3, #50	; 0x32
 8062b0e:	4a34      	ldr	r2, [pc, #208]	; (8062be0 <UART_SetConfig+0x4e4>)
 8062b10:	fba2 2303 	umull	r2, r3, r2, r3
 8062b14:	095b      	lsrs	r3, r3, #5
 8062b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8062b1a:	441c      	add	r4, r3
 8062b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8062b20:	2200      	movs	r2, #0
 8062b22:	673b      	str	r3, [r7, #112]	; 0x70
 8062b24:	677a      	str	r2, [r7, #116]	; 0x74
 8062b26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8062b2a:	4642      	mov	r2, r8
 8062b2c:	464b      	mov	r3, r9
 8062b2e:	1891      	adds	r1, r2, r2
 8062b30:	60b9      	str	r1, [r7, #8]
 8062b32:	415b      	adcs	r3, r3
 8062b34:	60fb      	str	r3, [r7, #12]
 8062b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8062b3a:	4641      	mov	r1, r8
 8062b3c:	1851      	adds	r1, r2, r1
 8062b3e:	6039      	str	r1, [r7, #0]
 8062b40:	4649      	mov	r1, r9
 8062b42:	414b      	adcs	r3, r1
 8062b44:	607b      	str	r3, [r7, #4]
 8062b46:	f04f 0200 	mov.w	r2, #0
 8062b4a:	f04f 0300 	mov.w	r3, #0
 8062b4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8062b52:	4659      	mov	r1, fp
 8062b54:	00cb      	lsls	r3, r1, #3
 8062b56:	4651      	mov	r1, sl
 8062b58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8062b5c:	4651      	mov	r1, sl
 8062b5e:	00ca      	lsls	r2, r1, #3
 8062b60:	4610      	mov	r0, r2
 8062b62:	4619      	mov	r1, r3
 8062b64:	4603      	mov	r3, r0
 8062b66:	4642      	mov	r2, r8
 8062b68:	189b      	adds	r3, r3, r2
 8062b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8062b6c:	464b      	mov	r3, r9
 8062b6e:	460a      	mov	r2, r1
 8062b70:	eb42 0303 	adc.w	r3, r2, r3
 8062b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8062b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062b7a:	685b      	ldr	r3, [r3, #4]
 8062b7c:	2200      	movs	r2, #0
 8062b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8062b80:	667a      	str	r2, [r7, #100]	; 0x64
 8062b82:	f04f 0200 	mov.w	r2, #0
 8062b86:	f04f 0300 	mov.w	r3, #0
 8062b8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8062b8e:	4649      	mov	r1, r9
 8062b90:	008b      	lsls	r3, r1, #2
 8062b92:	4641      	mov	r1, r8
 8062b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8062b98:	4641      	mov	r1, r8
 8062b9a:	008a      	lsls	r2, r1, #2
 8062b9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8062ba0:	f7fd fb24 	bl	80601ec <__aeabi_uldivmod>
 8062ba4:	4602      	mov	r2, r0
 8062ba6:	460b      	mov	r3, r1
 8062ba8:	4b0d      	ldr	r3, [pc, #52]	; (8062be0 <UART_SetConfig+0x4e4>)
 8062baa:	fba3 1302 	umull	r1, r3, r3, r2
 8062bae:	095b      	lsrs	r3, r3, #5
 8062bb0:	2164      	movs	r1, #100	; 0x64
 8062bb2:	fb01 f303 	mul.w	r3, r1, r3
 8062bb6:	1ad3      	subs	r3, r2, r3
 8062bb8:	011b      	lsls	r3, r3, #4
 8062bba:	3332      	adds	r3, #50	; 0x32
 8062bbc:	4a08      	ldr	r2, [pc, #32]	; (8062be0 <UART_SetConfig+0x4e4>)
 8062bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8062bc2:	095b      	lsrs	r3, r3, #5
 8062bc4:	f003 020f 	and.w	r2, r3, #15
 8062bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8062bcc:	681b      	ldr	r3, [r3, #0]
 8062bce:	4422      	add	r2, r4
 8062bd0:	609a      	str	r2, [r3, #8]
}
 8062bd2:	bf00      	nop
 8062bd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8062bd8:	46bd      	mov	sp, r7
 8062bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8062bde:	bf00      	nop
 8062be0:	51eb851f 	.word	0x51eb851f

08062be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8062be4:	b084      	sub	sp, #16
 8062be6:	b580      	push	{r7, lr}
 8062be8:	b084      	sub	sp, #16
 8062bea:	af00      	add	r7, sp, #0
 8062bec:	6078      	str	r0, [r7, #4]
 8062bee:	f107 001c 	add.w	r0, r7, #28
 8062bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8062bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8062bf8:	2b01      	cmp	r3, #1
 8062bfa:	d122      	bne.n	8062c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8062bfc:	687b      	ldr	r3, [r7, #4]
 8062bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8062c04:	687b      	ldr	r3, [r7, #4]
 8062c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8062c08:	687b      	ldr	r3, [r7, #4]
 8062c0a:	68db      	ldr	r3, [r3, #12]
 8062c0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8062c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8062c14:	687a      	ldr	r2, [r7, #4]
 8062c16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8062c18:	687b      	ldr	r3, [r7, #4]
 8062c1a:	68db      	ldr	r3, [r3, #12]
 8062c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8062c20:	687b      	ldr	r3, [r7, #4]
 8062c22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8062c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8062c26:	2b01      	cmp	r3, #1
 8062c28:	d105      	bne.n	8062c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8062c2a:	687b      	ldr	r3, [r7, #4]
 8062c2c:	68db      	ldr	r3, [r3, #12]
 8062c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8062c32:	687b      	ldr	r3, [r7, #4]
 8062c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8062c36:	6878      	ldr	r0, [r7, #4]
 8062c38:	f000 faa2 	bl	8063180 <USB_CoreReset>
 8062c3c:	4603      	mov	r3, r0
 8062c3e:	73fb      	strb	r3, [r7, #15]
 8062c40:	e01a      	b.n	8062c78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8062c42:	687b      	ldr	r3, [r7, #4]
 8062c44:	68db      	ldr	r3, [r3, #12]
 8062c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8062c4a:	687b      	ldr	r3, [r7, #4]
 8062c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8062c4e:	6878      	ldr	r0, [r7, #4]
 8062c50:	f000 fa96 	bl	8063180 <USB_CoreReset>
 8062c54:	4603      	mov	r3, r0
 8062c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8062c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8062c5a:	2b00      	cmp	r3, #0
 8062c5c:	d106      	bne.n	8062c6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8062c5e:	687b      	ldr	r3, [r7, #4]
 8062c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062c62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8062c66:	687b      	ldr	r3, [r7, #4]
 8062c68:	639a      	str	r2, [r3, #56]	; 0x38
 8062c6a:	e005      	b.n	8062c78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8062c6c:	687b      	ldr	r3, [r7, #4]
 8062c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8062c74:	687b      	ldr	r3, [r7, #4]
 8062c76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8062c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8062c7a:	2b01      	cmp	r3, #1
 8062c7c:	d10b      	bne.n	8062c96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8062c7e:	687b      	ldr	r3, [r7, #4]
 8062c80:	689b      	ldr	r3, [r3, #8]
 8062c82:	f043 0206 	orr.w	r2, r3, #6
 8062c86:	687b      	ldr	r3, [r7, #4]
 8062c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8062c8a:	687b      	ldr	r3, [r7, #4]
 8062c8c:	689b      	ldr	r3, [r3, #8]
 8062c8e:	f043 0220 	orr.w	r2, r3, #32
 8062c92:	687b      	ldr	r3, [r7, #4]
 8062c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8062c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8062c98:	4618      	mov	r0, r3
 8062c9a:	3710      	adds	r7, #16
 8062c9c:	46bd      	mov	sp, r7
 8062c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8062ca2:	b004      	add	sp, #16
 8062ca4:	4770      	bx	lr

08062ca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8062ca6:	b480      	push	{r7}
 8062ca8:	b083      	sub	sp, #12
 8062caa:	af00      	add	r7, sp, #0
 8062cac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8062cae:	687b      	ldr	r3, [r7, #4]
 8062cb0:	689b      	ldr	r3, [r3, #8]
 8062cb2:	f023 0201 	bic.w	r2, r3, #1
 8062cb6:	687b      	ldr	r3, [r7, #4]
 8062cb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8062cba:	2300      	movs	r3, #0
}
 8062cbc:	4618      	mov	r0, r3
 8062cbe:	370c      	adds	r7, #12
 8062cc0:	46bd      	mov	sp, r7
 8062cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062cc6:	4770      	bx	lr

08062cc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8062cc8:	b580      	push	{r7, lr}
 8062cca:	b084      	sub	sp, #16
 8062ccc:	af00      	add	r7, sp, #0
 8062cce:	6078      	str	r0, [r7, #4]
 8062cd0:	460b      	mov	r3, r1
 8062cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8062cd4:	2300      	movs	r3, #0
 8062cd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8062cd8:	687b      	ldr	r3, [r7, #4]
 8062cda:	68db      	ldr	r3, [r3, #12]
 8062cdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8062ce0:	687b      	ldr	r3, [r7, #4]
 8062ce2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8062ce4:	78fb      	ldrb	r3, [r7, #3]
 8062ce6:	2b01      	cmp	r3, #1
 8062ce8:	d115      	bne.n	8062d16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8062cea:	687b      	ldr	r3, [r7, #4]
 8062cec:	68db      	ldr	r3, [r3, #12]
 8062cee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8062cf2:	687b      	ldr	r3, [r7, #4]
 8062cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8062cf6:	2001      	movs	r0, #1
 8062cf8:	f7fe f898 	bl	8060e2c <HAL_Delay>
      ms++;
 8062cfc:	68fb      	ldr	r3, [r7, #12]
 8062cfe:	3301      	adds	r3, #1
 8062d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8062d02:	6878      	ldr	r0, [r7, #4]
 8062d04:	f000 fa2e 	bl	8063164 <USB_GetMode>
 8062d08:	4603      	mov	r3, r0
 8062d0a:	2b01      	cmp	r3, #1
 8062d0c:	d01e      	beq.n	8062d4c <USB_SetCurrentMode+0x84>
 8062d0e:	68fb      	ldr	r3, [r7, #12]
 8062d10:	2b31      	cmp	r3, #49	; 0x31
 8062d12:	d9f0      	bls.n	8062cf6 <USB_SetCurrentMode+0x2e>
 8062d14:	e01a      	b.n	8062d4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8062d16:	78fb      	ldrb	r3, [r7, #3]
 8062d18:	2b00      	cmp	r3, #0
 8062d1a:	d115      	bne.n	8062d48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8062d1c:	687b      	ldr	r3, [r7, #4]
 8062d1e:	68db      	ldr	r3, [r3, #12]
 8062d20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8062d24:	687b      	ldr	r3, [r7, #4]
 8062d26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8062d28:	2001      	movs	r0, #1
 8062d2a:	f7fe f87f 	bl	8060e2c <HAL_Delay>
      ms++;
 8062d2e:	68fb      	ldr	r3, [r7, #12]
 8062d30:	3301      	adds	r3, #1
 8062d32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8062d34:	6878      	ldr	r0, [r7, #4]
 8062d36:	f000 fa15 	bl	8063164 <USB_GetMode>
 8062d3a:	4603      	mov	r3, r0
 8062d3c:	2b00      	cmp	r3, #0
 8062d3e:	d005      	beq.n	8062d4c <USB_SetCurrentMode+0x84>
 8062d40:	68fb      	ldr	r3, [r7, #12]
 8062d42:	2b31      	cmp	r3, #49	; 0x31
 8062d44:	d9f0      	bls.n	8062d28 <USB_SetCurrentMode+0x60>
 8062d46:	e001      	b.n	8062d4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8062d48:	2301      	movs	r3, #1
 8062d4a:	e005      	b.n	8062d58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8062d4c:	68fb      	ldr	r3, [r7, #12]
 8062d4e:	2b32      	cmp	r3, #50	; 0x32
 8062d50:	d101      	bne.n	8062d56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8062d52:	2301      	movs	r3, #1
 8062d54:	e000      	b.n	8062d58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8062d56:	2300      	movs	r3, #0
}
 8062d58:	4618      	mov	r0, r3
 8062d5a:	3710      	adds	r7, #16
 8062d5c:	46bd      	mov	sp, r7
 8062d5e:	bd80      	pop	{r7, pc}

08062d60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8062d60:	b084      	sub	sp, #16
 8062d62:	b580      	push	{r7, lr}
 8062d64:	b086      	sub	sp, #24
 8062d66:	af00      	add	r7, sp, #0
 8062d68:	6078      	str	r0, [r7, #4]
 8062d6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8062d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8062d72:	2300      	movs	r3, #0
 8062d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8062d76:	687b      	ldr	r3, [r7, #4]
 8062d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8062d7a:	2300      	movs	r3, #0
 8062d7c:	613b      	str	r3, [r7, #16]
 8062d7e:	e009      	b.n	8062d94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8062d80:	687a      	ldr	r2, [r7, #4]
 8062d82:	693b      	ldr	r3, [r7, #16]
 8062d84:	3340      	adds	r3, #64	; 0x40
 8062d86:	009b      	lsls	r3, r3, #2
 8062d88:	4413      	add	r3, r2
 8062d8a:	2200      	movs	r2, #0
 8062d8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8062d8e:	693b      	ldr	r3, [r7, #16]
 8062d90:	3301      	adds	r3, #1
 8062d92:	613b      	str	r3, [r7, #16]
 8062d94:	693b      	ldr	r3, [r7, #16]
 8062d96:	2b0e      	cmp	r3, #14
 8062d98:	d9f2      	bls.n	8062d80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8062d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8062d9c:	2b00      	cmp	r3, #0
 8062d9e:	d11c      	bne.n	8062dda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8062da0:	68fb      	ldr	r3, [r7, #12]
 8062da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062da6:	685b      	ldr	r3, [r3, #4]
 8062da8:	68fa      	ldr	r2, [r7, #12]
 8062daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8062dae:	f043 0302 	orr.w	r3, r3, #2
 8062db2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8062db4:	687b      	ldr	r3, [r7, #4]
 8062db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8062dbc:	687b      	ldr	r3, [r7, #4]
 8062dbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8062dc0:	687b      	ldr	r3, [r7, #4]
 8062dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062dc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8062dc8:	687b      	ldr	r3, [r7, #4]
 8062dca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8062dcc:	687b      	ldr	r3, [r7, #4]
 8062dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062dd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8062dd4:	687b      	ldr	r3, [r7, #4]
 8062dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8062dd8:	e00b      	b.n	8062df2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8062dda:	687b      	ldr	r3, [r7, #4]
 8062ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062dde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8062de2:	687b      	ldr	r3, [r7, #4]
 8062de4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8062de6:	687b      	ldr	r3, [r7, #4]
 8062de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8062dea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8062dee:	687b      	ldr	r3, [r7, #4]
 8062df0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8062df2:	68fb      	ldr	r3, [r7, #12]
 8062df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8062df8:	461a      	mov	r2, r3
 8062dfa:	2300      	movs	r3, #0
 8062dfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8062dfe:	68fb      	ldr	r3, [r7, #12]
 8062e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062e04:	4619      	mov	r1, r3
 8062e06:	68fb      	ldr	r3, [r7, #12]
 8062e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062e0c:	461a      	mov	r2, r3
 8062e0e:	680b      	ldr	r3, [r1, #0]
 8062e10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8062e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8062e14:	2b01      	cmp	r3, #1
 8062e16:	d10c      	bne.n	8062e32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8062e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8062e1a:	2b00      	cmp	r3, #0
 8062e1c:	d104      	bne.n	8062e28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8062e1e:	2100      	movs	r1, #0
 8062e20:	6878      	ldr	r0, [r7, #4]
 8062e22:	f000 f965 	bl	80630f0 <USB_SetDevSpeed>
 8062e26:	e008      	b.n	8062e3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8062e28:	2101      	movs	r1, #1
 8062e2a:	6878      	ldr	r0, [r7, #4]
 8062e2c:	f000 f960 	bl	80630f0 <USB_SetDevSpeed>
 8062e30:	e003      	b.n	8062e3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8062e32:	2103      	movs	r1, #3
 8062e34:	6878      	ldr	r0, [r7, #4]
 8062e36:	f000 f95b 	bl	80630f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8062e3a:	2110      	movs	r1, #16
 8062e3c:	6878      	ldr	r0, [r7, #4]
 8062e3e:	f000 f8f3 	bl	8063028 <USB_FlushTxFifo>
 8062e42:	4603      	mov	r3, r0
 8062e44:	2b00      	cmp	r3, #0
 8062e46:	d001      	beq.n	8062e4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8062e48:	2301      	movs	r3, #1
 8062e4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8062e4c:	6878      	ldr	r0, [r7, #4]
 8062e4e:	f000 f91f 	bl	8063090 <USB_FlushRxFifo>
 8062e52:	4603      	mov	r3, r0
 8062e54:	2b00      	cmp	r3, #0
 8062e56:	d001      	beq.n	8062e5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8062e58:	2301      	movs	r3, #1
 8062e5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8062e5c:	68fb      	ldr	r3, [r7, #12]
 8062e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062e62:	461a      	mov	r2, r3
 8062e64:	2300      	movs	r3, #0
 8062e66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8062e68:	68fb      	ldr	r3, [r7, #12]
 8062e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062e6e:	461a      	mov	r2, r3
 8062e70:	2300      	movs	r3, #0
 8062e72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8062e74:	68fb      	ldr	r3, [r7, #12]
 8062e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062e7a:	461a      	mov	r2, r3
 8062e7c:	2300      	movs	r3, #0
 8062e7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8062e80:	2300      	movs	r3, #0
 8062e82:	613b      	str	r3, [r7, #16]
 8062e84:	e043      	b.n	8062f0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8062e86:	693b      	ldr	r3, [r7, #16]
 8062e88:	015a      	lsls	r2, r3, #5
 8062e8a:	68fb      	ldr	r3, [r7, #12]
 8062e8c:	4413      	add	r3, r2
 8062e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062e92:	681b      	ldr	r3, [r3, #0]
 8062e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8062e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8062e9c:	d118      	bne.n	8062ed0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8062e9e:	693b      	ldr	r3, [r7, #16]
 8062ea0:	2b00      	cmp	r3, #0
 8062ea2:	d10a      	bne.n	8062eba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8062ea4:	693b      	ldr	r3, [r7, #16]
 8062ea6:	015a      	lsls	r2, r3, #5
 8062ea8:	68fb      	ldr	r3, [r7, #12]
 8062eaa:	4413      	add	r3, r2
 8062eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062eb0:	461a      	mov	r2, r3
 8062eb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8062eb6:	6013      	str	r3, [r2, #0]
 8062eb8:	e013      	b.n	8062ee2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8062eba:	693b      	ldr	r3, [r7, #16]
 8062ebc:	015a      	lsls	r2, r3, #5
 8062ebe:	68fb      	ldr	r3, [r7, #12]
 8062ec0:	4413      	add	r3, r2
 8062ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062ec6:	461a      	mov	r2, r3
 8062ec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8062ecc:	6013      	str	r3, [r2, #0]
 8062ece:	e008      	b.n	8062ee2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8062ed0:	693b      	ldr	r3, [r7, #16]
 8062ed2:	015a      	lsls	r2, r3, #5
 8062ed4:	68fb      	ldr	r3, [r7, #12]
 8062ed6:	4413      	add	r3, r2
 8062ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062edc:	461a      	mov	r2, r3
 8062ede:	2300      	movs	r3, #0
 8062ee0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8062ee2:	693b      	ldr	r3, [r7, #16]
 8062ee4:	015a      	lsls	r2, r3, #5
 8062ee6:	68fb      	ldr	r3, [r7, #12]
 8062ee8:	4413      	add	r3, r2
 8062eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062eee:	461a      	mov	r2, r3
 8062ef0:	2300      	movs	r3, #0
 8062ef2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8062ef4:	693b      	ldr	r3, [r7, #16]
 8062ef6:	015a      	lsls	r2, r3, #5
 8062ef8:	68fb      	ldr	r3, [r7, #12]
 8062efa:	4413      	add	r3, r2
 8062efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8062f00:	461a      	mov	r2, r3
 8062f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8062f06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8062f08:	693b      	ldr	r3, [r7, #16]
 8062f0a:	3301      	adds	r3, #1
 8062f0c:	613b      	str	r3, [r7, #16]
 8062f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8062f10:	693a      	ldr	r2, [r7, #16]
 8062f12:	429a      	cmp	r2, r3
 8062f14:	d3b7      	bcc.n	8062e86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8062f16:	2300      	movs	r3, #0
 8062f18:	613b      	str	r3, [r7, #16]
 8062f1a:	e043      	b.n	8062fa4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8062f1c:	693b      	ldr	r3, [r7, #16]
 8062f1e:	015a      	lsls	r2, r3, #5
 8062f20:	68fb      	ldr	r3, [r7, #12]
 8062f22:	4413      	add	r3, r2
 8062f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f28:	681b      	ldr	r3, [r3, #0]
 8062f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8062f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8062f32:	d118      	bne.n	8062f66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8062f34:	693b      	ldr	r3, [r7, #16]
 8062f36:	2b00      	cmp	r3, #0
 8062f38:	d10a      	bne.n	8062f50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8062f3a:	693b      	ldr	r3, [r7, #16]
 8062f3c:	015a      	lsls	r2, r3, #5
 8062f3e:	68fb      	ldr	r3, [r7, #12]
 8062f40:	4413      	add	r3, r2
 8062f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f46:	461a      	mov	r2, r3
 8062f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8062f4c:	6013      	str	r3, [r2, #0]
 8062f4e:	e013      	b.n	8062f78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8062f50:	693b      	ldr	r3, [r7, #16]
 8062f52:	015a      	lsls	r2, r3, #5
 8062f54:	68fb      	ldr	r3, [r7, #12]
 8062f56:	4413      	add	r3, r2
 8062f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f5c:	461a      	mov	r2, r3
 8062f5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8062f62:	6013      	str	r3, [r2, #0]
 8062f64:	e008      	b.n	8062f78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8062f66:	693b      	ldr	r3, [r7, #16]
 8062f68:	015a      	lsls	r2, r3, #5
 8062f6a:	68fb      	ldr	r3, [r7, #12]
 8062f6c:	4413      	add	r3, r2
 8062f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f72:	461a      	mov	r2, r3
 8062f74:	2300      	movs	r3, #0
 8062f76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8062f78:	693b      	ldr	r3, [r7, #16]
 8062f7a:	015a      	lsls	r2, r3, #5
 8062f7c:	68fb      	ldr	r3, [r7, #12]
 8062f7e:	4413      	add	r3, r2
 8062f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f84:	461a      	mov	r2, r3
 8062f86:	2300      	movs	r3, #0
 8062f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8062f8a:	693b      	ldr	r3, [r7, #16]
 8062f8c:	015a      	lsls	r2, r3, #5
 8062f8e:	68fb      	ldr	r3, [r7, #12]
 8062f90:	4413      	add	r3, r2
 8062f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8062f96:	461a      	mov	r2, r3
 8062f98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8062f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8062f9e:	693b      	ldr	r3, [r7, #16]
 8062fa0:	3301      	adds	r3, #1
 8062fa2:	613b      	str	r3, [r7, #16]
 8062fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8062fa6:	693a      	ldr	r2, [r7, #16]
 8062fa8:	429a      	cmp	r2, r3
 8062faa:	d3b7      	bcc.n	8062f1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8062fac:	68fb      	ldr	r3, [r7, #12]
 8062fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8062fb2:	691b      	ldr	r3, [r3, #16]
 8062fb4:	68fa      	ldr	r2, [r7, #12]
 8062fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8062fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8062fbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8062fc0:	687b      	ldr	r3, [r7, #4]
 8062fc2:	2200      	movs	r2, #0
 8062fc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8062fc6:	687b      	ldr	r3, [r7, #4]
 8062fc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8062fcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8062fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8062fd0:	2b00      	cmp	r3, #0
 8062fd2:	d105      	bne.n	8062fe0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8062fd4:	687b      	ldr	r3, [r7, #4]
 8062fd6:	699b      	ldr	r3, [r3, #24]
 8062fd8:	f043 0210 	orr.w	r2, r3, #16
 8062fdc:	687b      	ldr	r3, [r7, #4]
 8062fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8062fe0:	687b      	ldr	r3, [r7, #4]
 8062fe2:	699a      	ldr	r2, [r3, #24]
 8062fe4:	4b0f      	ldr	r3, [pc, #60]	; (8063024 <USB_DevInit+0x2c4>)
 8062fe6:	4313      	orrs	r3, r2
 8062fe8:	687a      	ldr	r2, [r7, #4]
 8062fea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8062fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8062fee:	2b00      	cmp	r3, #0
 8062ff0:	d005      	beq.n	8062ffe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8062ff2:	687b      	ldr	r3, [r7, #4]
 8062ff4:	699b      	ldr	r3, [r3, #24]
 8062ff6:	f043 0208 	orr.w	r2, r3, #8
 8062ffa:	687b      	ldr	r3, [r7, #4]
 8062ffc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8062ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8063000:	2b01      	cmp	r3, #1
 8063002:	d107      	bne.n	8063014 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8063004:	687b      	ldr	r3, [r7, #4]
 8063006:	699b      	ldr	r3, [r3, #24]
 8063008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 806300c:	f043 0304 	orr.w	r3, r3, #4
 8063010:	687a      	ldr	r2, [r7, #4]
 8063012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8063014:	7dfb      	ldrb	r3, [r7, #23]
}
 8063016:	4618      	mov	r0, r3
 8063018:	3718      	adds	r7, #24
 806301a:	46bd      	mov	sp, r7
 806301c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8063020:	b004      	add	sp, #16
 8063022:	4770      	bx	lr
 8063024:	803c3800 	.word	0x803c3800

08063028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8063028:	b480      	push	{r7}
 806302a:	b085      	sub	sp, #20
 806302c:	af00      	add	r7, sp, #0
 806302e:	6078      	str	r0, [r7, #4]
 8063030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8063032:	2300      	movs	r3, #0
 8063034:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8063036:	68fb      	ldr	r3, [r7, #12]
 8063038:	3301      	adds	r3, #1
 806303a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 806303c:	68fb      	ldr	r3, [r7, #12]
 806303e:	4a13      	ldr	r2, [pc, #76]	; (806308c <USB_FlushTxFifo+0x64>)
 8063040:	4293      	cmp	r3, r2
 8063042:	d901      	bls.n	8063048 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8063044:	2303      	movs	r3, #3
 8063046:	e01b      	b.n	8063080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8063048:	687b      	ldr	r3, [r7, #4]
 806304a:	691b      	ldr	r3, [r3, #16]
 806304c:	2b00      	cmp	r3, #0
 806304e:	daf2      	bge.n	8063036 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8063050:	2300      	movs	r3, #0
 8063052:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8063054:	683b      	ldr	r3, [r7, #0]
 8063056:	019b      	lsls	r3, r3, #6
 8063058:	f043 0220 	orr.w	r2, r3, #32
 806305c:	687b      	ldr	r3, [r7, #4]
 806305e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8063060:	68fb      	ldr	r3, [r7, #12]
 8063062:	3301      	adds	r3, #1
 8063064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8063066:	68fb      	ldr	r3, [r7, #12]
 8063068:	4a08      	ldr	r2, [pc, #32]	; (806308c <USB_FlushTxFifo+0x64>)
 806306a:	4293      	cmp	r3, r2
 806306c:	d901      	bls.n	8063072 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 806306e:	2303      	movs	r3, #3
 8063070:	e006      	b.n	8063080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8063072:	687b      	ldr	r3, [r7, #4]
 8063074:	691b      	ldr	r3, [r3, #16]
 8063076:	f003 0320 	and.w	r3, r3, #32
 806307a:	2b20      	cmp	r3, #32
 806307c:	d0f0      	beq.n	8063060 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 806307e:	2300      	movs	r3, #0
}
 8063080:	4618      	mov	r0, r3
 8063082:	3714      	adds	r7, #20
 8063084:	46bd      	mov	sp, r7
 8063086:	f85d 7b04 	ldr.w	r7, [sp], #4
 806308a:	4770      	bx	lr
 806308c:	00030d40 	.word	0x00030d40

08063090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8063090:	b480      	push	{r7}
 8063092:	b085      	sub	sp, #20
 8063094:	af00      	add	r7, sp, #0
 8063096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8063098:	2300      	movs	r3, #0
 806309a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 806309c:	68fb      	ldr	r3, [r7, #12]
 806309e:	3301      	adds	r3, #1
 80630a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80630a2:	68fb      	ldr	r3, [r7, #12]
 80630a4:	4a11      	ldr	r2, [pc, #68]	; (80630ec <USB_FlushRxFifo+0x5c>)
 80630a6:	4293      	cmp	r3, r2
 80630a8:	d901      	bls.n	80630ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80630aa:	2303      	movs	r3, #3
 80630ac:	e018      	b.n	80630e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80630ae:	687b      	ldr	r3, [r7, #4]
 80630b0:	691b      	ldr	r3, [r3, #16]
 80630b2:	2b00      	cmp	r3, #0
 80630b4:	daf2      	bge.n	806309c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80630b6:	2300      	movs	r3, #0
 80630b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80630ba:	687b      	ldr	r3, [r7, #4]
 80630bc:	2210      	movs	r2, #16
 80630be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80630c0:	68fb      	ldr	r3, [r7, #12]
 80630c2:	3301      	adds	r3, #1
 80630c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80630c6:	68fb      	ldr	r3, [r7, #12]
 80630c8:	4a08      	ldr	r2, [pc, #32]	; (80630ec <USB_FlushRxFifo+0x5c>)
 80630ca:	4293      	cmp	r3, r2
 80630cc:	d901      	bls.n	80630d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80630ce:	2303      	movs	r3, #3
 80630d0:	e006      	b.n	80630e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80630d2:	687b      	ldr	r3, [r7, #4]
 80630d4:	691b      	ldr	r3, [r3, #16]
 80630d6:	f003 0310 	and.w	r3, r3, #16
 80630da:	2b10      	cmp	r3, #16
 80630dc:	d0f0      	beq.n	80630c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80630de:	2300      	movs	r3, #0
}
 80630e0:	4618      	mov	r0, r3
 80630e2:	3714      	adds	r7, #20
 80630e4:	46bd      	mov	sp, r7
 80630e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630ea:	4770      	bx	lr
 80630ec:	00030d40 	.word	0x00030d40

080630f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80630f0:	b480      	push	{r7}
 80630f2:	b085      	sub	sp, #20
 80630f4:	af00      	add	r7, sp, #0
 80630f6:	6078      	str	r0, [r7, #4]
 80630f8:	460b      	mov	r3, r1
 80630fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80630fc:	687b      	ldr	r3, [r7, #4]
 80630fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8063100:	68fb      	ldr	r3, [r7, #12]
 8063102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8063106:	681a      	ldr	r2, [r3, #0]
 8063108:	78fb      	ldrb	r3, [r7, #3]
 806310a:	68f9      	ldr	r1, [r7, #12]
 806310c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8063110:	4313      	orrs	r3, r2
 8063112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8063114:	2300      	movs	r3, #0
}
 8063116:	4618      	mov	r0, r3
 8063118:	3714      	adds	r7, #20
 806311a:	46bd      	mov	sp, r7
 806311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063120:	4770      	bx	lr

08063122 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8063122:	b480      	push	{r7}
 8063124:	b085      	sub	sp, #20
 8063126:	af00      	add	r7, sp, #0
 8063128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 806312a:	687b      	ldr	r3, [r7, #4]
 806312c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 806312e:	68fb      	ldr	r3, [r7, #12]
 8063130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8063134:	681b      	ldr	r3, [r3, #0]
 8063136:	68fa      	ldr	r2, [r7, #12]
 8063138:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 806313c:	f023 0303 	bic.w	r3, r3, #3
 8063140:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8063142:	68fb      	ldr	r3, [r7, #12]
 8063144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8063148:	685b      	ldr	r3, [r3, #4]
 806314a:	68fa      	ldr	r2, [r7, #12]
 806314c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8063150:	f043 0302 	orr.w	r3, r3, #2
 8063154:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8063156:	2300      	movs	r3, #0
}
 8063158:	4618      	mov	r0, r3
 806315a:	3714      	adds	r7, #20
 806315c:	46bd      	mov	sp, r7
 806315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063162:	4770      	bx	lr

08063164 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8063164:	b480      	push	{r7}
 8063166:	b083      	sub	sp, #12
 8063168:	af00      	add	r7, sp, #0
 806316a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 806316c:	687b      	ldr	r3, [r7, #4]
 806316e:	695b      	ldr	r3, [r3, #20]
 8063170:	f003 0301 	and.w	r3, r3, #1
}
 8063174:	4618      	mov	r0, r3
 8063176:	370c      	adds	r7, #12
 8063178:	46bd      	mov	sp, r7
 806317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806317e:	4770      	bx	lr

08063180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8063180:	b480      	push	{r7}
 8063182:	b085      	sub	sp, #20
 8063184:	af00      	add	r7, sp, #0
 8063186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8063188:	2300      	movs	r3, #0
 806318a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 806318c:	68fb      	ldr	r3, [r7, #12]
 806318e:	3301      	adds	r3, #1
 8063190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8063192:	68fb      	ldr	r3, [r7, #12]
 8063194:	4a13      	ldr	r2, [pc, #76]	; (80631e4 <USB_CoreReset+0x64>)
 8063196:	4293      	cmp	r3, r2
 8063198:	d901      	bls.n	806319e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 806319a:	2303      	movs	r3, #3
 806319c:	e01b      	b.n	80631d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 806319e:	687b      	ldr	r3, [r7, #4]
 80631a0:	691b      	ldr	r3, [r3, #16]
 80631a2:	2b00      	cmp	r3, #0
 80631a4:	daf2      	bge.n	806318c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80631a6:	2300      	movs	r3, #0
 80631a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80631aa:	687b      	ldr	r3, [r7, #4]
 80631ac:	691b      	ldr	r3, [r3, #16]
 80631ae:	f043 0201 	orr.w	r2, r3, #1
 80631b2:	687b      	ldr	r3, [r7, #4]
 80631b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80631b6:	68fb      	ldr	r3, [r7, #12]
 80631b8:	3301      	adds	r3, #1
 80631ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80631bc:	68fb      	ldr	r3, [r7, #12]
 80631be:	4a09      	ldr	r2, [pc, #36]	; (80631e4 <USB_CoreReset+0x64>)
 80631c0:	4293      	cmp	r3, r2
 80631c2:	d901      	bls.n	80631c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80631c4:	2303      	movs	r3, #3
 80631c6:	e006      	b.n	80631d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80631c8:	687b      	ldr	r3, [r7, #4]
 80631ca:	691b      	ldr	r3, [r3, #16]
 80631cc:	f003 0301 	and.w	r3, r3, #1
 80631d0:	2b01      	cmp	r3, #1
 80631d2:	d0f0      	beq.n	80631b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80631d4:	2300      	movs	r3, #0
}
 80631d6:	4618      	mov	r0, r3
 80631d8:	3714      	adds	r7, #20
 80631da:	46bd      	mov	sp, r7
 80631dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80631e0:	4770      	bx	lr
 80631e2:	bf00      	nop
 80631e4:	00030d40 	.word	0x00030d40

080631e8 <__libc_init_array>:
 80631e8:	b570      	push	{r4, r5, r6, lr}
 80631ea:	4d0d      	ldr	r5, [pc, #52]	; (8063220 <__libc_init_array+0x38>)
 80631ec:	4c0d      	ldr	r4, [pc, #52]	; (8063224 <__libc_init_array+0x3c>)
 80631ee:	1b64      	subs	r4, r4, r5
 80631f0:	10a4      	asrs	r4, r4, #2
 80631f2:	2600      	movs	r6, #0
 80631f4:	42a6      	cmp	r6, r4
 80631f6:	d109      	bne.n	806320c <__libc_init_array+0x24>
 80631f8:	4d0b      	ldr	r5, [pc, #44]	; (8063228 <__libc_init_array+0x40>)
 80631fa:	4c0c      	ldr	r4, [pc, #48]	; (806322c <__libc_init_array+0x44>)
 80631fc:	f000 f820 	bl	8063240 <_init>
 8063200:	1b64      	subs	r4, r4, r5
 8063202:	10a4      	asrs	r4, r4, #2
 8063204:	2600      	movs	r6, #0
 8063206:	42a6      	cmp	r6, r4
 8063208:	d105      	bne.n	8063216 <__libc_init_array+0x2e>
 806320a:	bd70      	pop	{r4, r5, r6, pc}
 806320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8063210:	4798      	blx	r3
 8063212:	3601      	adds	r6, #1
 8063214:	e7ee      	b.n	80631f4 <__libc_init_array+0xc>
 8063216:	f855 3b04 	ldr.w	r3, [r5], #4
 806321a:	4798      	blx	r3
 806321c:	3601      	adds	r6, #1
 806321e:	e7f2      	b.n	8063206 <__libc_init_array+0x1e>
 8063220:	08063278 	.word	0x08063278
 8063224:	08063278 	.word	0x08063278
 8063228:	08063278 	.word	0x08063278
 806322c:	0806327c 	.word	0x0806327c

08063230 <memset>:
 8063230:	4402      	add	r2, r0
 8063232:	4603      	mov	r3, r0
 8063234:	4293      	cmp	r3, r2
 8063236:	d100      	bne.n	806323a <memset+0xa>
 8063238:	4770      	bx	lr
 806323a:	f803 1b01 	strb.w	r1, [r3], #1
 806323e:	e7f9      	b.n	8063234 <memset+0x4>

08063240 <_init>:
 8063240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8063242:	bf00      	nop
 8063244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8063246:	bc08      	pop	{r3}
 8063248:	469e      	mov	lr, r3
 806324a:	4770      	bx	lr

0806324c <_fini>:
 806324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806324e:	bf00      	nop
 8063250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8063252:	bc08      	pop	{r3}
 8063254:	469e      	mov	lr, r3
 8063256:	4770      	bx	lr
