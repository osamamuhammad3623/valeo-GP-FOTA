
netconnClient_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fa4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f0  08018154  08018154  00028154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb44  0801bb44  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb44  0801bb44  0002bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb4c  0801bb4c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb4c  0801bb4c  0002bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb50  0801bb50  0002bb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801bb54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          000257f0  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025870  20025870  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004e5a9  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008e16  00000000  00000000  0007e659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002708  00000000  00000000  00087470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002588  00000000  00000000  00089b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013108  00000000  00000000  0008c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c68f  00000000  00000000  0009f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105267  00000000  00000000  000db897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e0afe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ac48  00000000  00000000  001e0b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801813c 	.word	0x0801813c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0801813c 	.word	0x0801813c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_UART_RxCpltCallback>:
uint8_t bArray[100] = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	flag = 100;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_RxCpltCallback+0x1c>)
 80005a2:	2264      	movs	r2, #100	; 0x64
 80005a4:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart2, (uint8_t *)bArray, 100);
	//sys_sem_signal(&uartSem);

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000009c 	.word	0x2000009c

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 ff35 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f843 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8f5 	bl	80007b4 <MX_GPIO_Init>
  MX_HASH_Init();
 80005ca:	f000 f8af 	bl	800072c <MX_HASH_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 f8c7 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_uds_request_callback(UDS_start_request);
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0x70>)
 80005d4:	f000 fc26 	bl	8000e24 <init_uds_request_callback>
  init_uds_recv_resp_clbk(UDS_receive_response);
 80005d8:	4814      	ldr	r0, [pc, #80]	; (800062c <main+0x74>)
 80005da:	f000 fc33 	bl	8000e44 <init_uds_recv_resp_clbk>
//  erase_inactive_bank();
  int k;
  for (k = 0; k < app_size; k++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e007      	b.n	80005f4 <main+0x3c>
	  data_received[k] = 'A';
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0x78>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	2241      	movs	r2, #65	; 0x41
 80005ec:	701a      	strb	r2, [r3, #0]
  for (k = 0; k < app_size; k++) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80005fa:	4293      	cmp	r3, r2
 80005fc:	ddf2      	ble.n	80005e4 <main+0x2c>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fe:	f005 f883 	bl	8005708 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000602:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <main+0x7c>)
 8000604:	2100      	movs	r1, #0
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x80>)
 8000608:	f005 f8dd 	bl	80057c6 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <main+0x84>)
 8000610:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(UartTask, NULL, &UART_Task_attributes);
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <main+0x88>)
 8000614:	2100      	movs	r1, #0
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x8c>)
 8000618:	f005 f8d5 	bl	80057c6 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <main+0x90>)
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f005 f895 	bl	8005750 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0x6e>
 8000628:	080013bd 	.word	0x080013bd
 800062c:	08001165 	.word	0x08001165
 8000630:	20004cbc 	.word	0x20004cbc
 8000634:	0801b770 	.word	0x0801b770
 8000638:	08000975 	.word	0x08000975
 800063c:	20004c24 	.word	0x20004c24
 8000640:	0801b794 	.word	0x0801b794
 8000644:	08000991 	.word	0x08000991
 8000648:	20004c70 	.word	0x20004c70

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f016 fc1e 	bl	8016e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <SystemClock_Config+0xd8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <SystemClock_Config+0xd8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xd8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xdc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <SystemClock_Config+0xdc>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c0:	23b4      	movs	r3, #180	; 0xb4
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fc95 	bl	8003000 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f97a 	bl	80009d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f002 fc3e 	bl	8002f60 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ea:	f000 f973 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f002 feef 	bl	80034f0 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000718:	f000 f95c 	bl	80009d4 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_HASH_Init+0x2c>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
  hhash.Init.KeySize = 17;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_HASH_Init+0x2c>)
 8000738:	2211      	movs	r2, #17
 800073a:	605a      	str	r2, [r3, #4]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_HASH_Init+0x2c>)
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <MX_HASH_Init+0x30>)
 8000740:	609a      	str	r2, [r3, #8]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_HASH_Init+0x2c>)
 8000744:	f002 fbb8 	bl	8002eb8 <HAL_HASH_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 800074e:	f000 f941 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20004c28 	.word	0x20004c28
 800075c:	0801b75c 	.word	0x0801b75c

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f003 fb86 	bl	8003ea8 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f917 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004c74 	.word	0x20004c74
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a62      	ldr	r2, [pc, #392]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b5c      	ldr	r3, [pc, #368]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a5b      	ldr	r2, [pc, #364]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b59      	ldr	r3, [pc, #356]	; (800095c <MX_GPIO_Init+0x1a8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a54      	ldr	r2, [pc, #336]	; (800095c <MX_GPIO_Init+0x1a8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a4d      	ldr	r2, [pc, #308]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b47      	ldr	r3, [pc, #284]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a46      	ldr	r2, [pc, #280]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x1a8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <MX_GPIO_Init+0x1a8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a3f      	ldr	r2, [pc, #252]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x1a8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	; 0x4081
 8000878:	4839      	ldr	r0, [pc, #228]	; (8000960 <MX_GPIO_Init+0x1ac>)
 800087a:	f002 fb03 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4838      	ldr	r0, [pc, #224]	; (8000964 <MX_GPIO_Init+0x1b0>)
 8000884:	f002 fafe 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_GPIO_Init+0x1b4>)
 80008a0:	f002 f944 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4828      	ldr	r0, [pc, #160]	; (8000960 <MX_GPIO_Init+0x1ac>)
 80008be:	f002 f935 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d4:	2307      	movs	r3, #7
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_GPIO_Init+0x1b8>)
 80008e0:	f002 f924 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	; (8000964 <MX_GPIO_Init+0x1b0>)
 80008fc:	f002 f916 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_GPIO_Init+0x1b0>)
 8000914:	f002 f90a 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000918:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092a:	230a      	movs	r3, #10
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_GPIO_Init+0x1bc>)
 8000936:	f002 f8f9 	bl	8002b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800093a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_GPIO_Init+0x1bc>)
 8000950:	f002 f8ec 	bl	8002b2c <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020c00 	.word	0x40020c00
 8000970:	40020000 	.word	0x40020000

08000974 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800097c:	f004 f8f2 	bl	8004b64 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //sys_arch_sem_wait(&ethernetSem, HAL_MAX_DELAY);
  //sys_arch_sem_wait(&ethernetSem, HAL_MAX_DELAY);
  tcpclient_init(0x02); // data_received[5]
 8000980:	2002      	movs	r0, #2
 8000982:	f000 fb5d 	bl	8001040 <tcpclient_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f004 ffaf 	bl	80058ea <osDelay>
 800098c:	e7fb      	b.n	8000986 <StartDefaultTask+0x12>
	...

08000990 <UartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UartTask */
void UartTask(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask */
	/*--------------TESTING UART WITH UDS--------------------------*/
//	sys_arch_sem_wait(&uartSem, HAL_MAX_DELAY); //////////////

	uint8_t downloadByte[] = {0x03};
 8000998:	2303      	movs	r3, #3
 800099a:	733b      	strb	r3, [r7, #12]

//	HAL_UART_Transmit(&huart2, (uint8_t *)downloadByte, sizeof(downloadByte), HAL_MAX_DELAY);
////	HAL_UART_Receive_IT(&huart2, (uint8_t *)data_received, 6416);  // 3208  6416  1604
//	HAL_UART_Receive(&huart2, data_received, 6416, HAL_MAX_DELAY); // 3208  6416  1604
	//while(flag!=100);
	flag = 0;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <UartTask+0x1c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f004 ffa1 	bl	80058ea <osDelay>
 80009a8:	e7fb      	b.n	80009a2 <UartTask+0x12>
 80009aa:	bf00      	nop
 80009ac:	2000009c 	.word	0x2000009c

080009b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c2:	f000 fd55 	bl	8001470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010000 	.word	0x40010000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x54>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x54>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 fe1d 	bl	8001668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_HASH_MspInit+0x30>)
 8000a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_HASH_MspInit+0x30>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6353      	str	r3, [r2, #52]	; 0x34
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_HASH_MspInit+0x30>)
 8000a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <HAL_UART_MspInit+0xd0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d151      	bne.n	8000b36 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_MspInit+0xd4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0xd8>)
 8000b02:	f002 f813 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b06:	2320      	movs	r3, #32
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <HAL_UART_MspInit+0xdc>)
 8000b22:	f002 f803 	bl	8002b2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2026      	movs	r0, #38	; 0x26
 8000b2c:	f000 fd9c 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b30:	2026      	movs	r0, #38	; 0x26
 8000b32:	f000 fdb5 	bl	80016a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2019      	movs	r0, #25
 8000b66:	f000 fd7f 	bl	8001668 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 fd98 	bl	80016a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fea6 	bl	80038e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b9c:	f002 fe90 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f002 feb9 	bl	800394c <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f002 ff0d 	bl	8003a00 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	20005680 	.word	0x20005680
 8000c00:	40010000 	.word	0x40010000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c36:	f002 ff53 	bl	8003ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20005680 	.word	0x20005680

08000c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART2_IRQHandler+0x10>)
 8000c4a:	f003 f97b 	bl	8003f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20004c74 	.word	0x20004c74

08000c58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <ETH_IRQHandler+0x10>)
 8000c5e:	f001 f9a3 	bl	8001fa8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20007090 	.word	0x20007090

08000c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	return 1;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_kill>:

int _kill(int pid, int sig)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <_kill+0x20>)
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	2002585c 	.word	0x2002585c

08000ca0 <_exit>:

void _exit (int status)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe5 	bl	8000c7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cb2:	e7fe      	b.n	8000cb2 <_exit+0x12>

08000cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
	}

return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf1      	blt.n	8000d00 <_write+0x12>
	}
	return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_close>:

int _close(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d205      	bcs.n	8000dcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <_sbrk+0x6c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20030000 	.word	0x20030000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	200000a0 	.word	0x200000a0
 8000df8:	20025870 	.word	0x20025870
 8000dfc:	2002585c 	.word	0x2002585c

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <init_uds_request_callback>:

struct target_confg target_1;
struct target_confg target_2;
//==========================================================

void init_uds_request_callback(void (*p) (TargetECU targetECU)) {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uds_req_clbk = p;
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <init_uds_request_callback+0x1c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200056c8 	.word	0x200056c8

08000e44 <init_uds_recv_resp_clbk>:

void init_uds_recv_resp_clbk(void (*p)(TargetECU targetECU, void *arg)) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	uds_recv_resp_clbk = p;
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <init_uds_recv_resp_clbk+0x1c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20005730 	.word	0x20005730

08000e64 <tcpinit_thread>:

static void tcpinit_thread(void *arg)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

	// Cast the argument to the correct type
	if(arg == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d078      	beq.n	8000f64 <tcpinit_thread+0x100>
		return;
	struct target_confg *config = (struct target_confg*)arg;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	623b      	str	r3, [r7, #32]
	err_t err, connect_error;
	ip_addr_t dest_addr;


	// Extract the IP address, port number and the target ECU
	char* ip_address = malloc(strlen(config->ip_add) + 1); // allocate memory for the string
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f9b8 	bl	80001f0 <strlen>
 8000e80:	4603      	mov	r3, r0
 8000e82:	3301      	adds	r3, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f015 ffcb 	bl	8016e20 <malloc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	61fb      	str	r3, [r7, #28]
	strcpy(ip_address, config->ip_add); // copy the string into the new buffer
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	69f8      	ldr	r0, [r7, #28]
 8000e96:	f016 f9e8 	bl	801726a <strcpy>
	ip_address[strlen(config->ip_add)] = '\0'; // add null terminat
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f9a6 	bl	80001f0 <strlen>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
	unsigned short dest_port = config->portNum;
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	889b      	ldrh	r3, [r3, #4]
 8000eb2:	837b      	strh	r3, [r7, #26]

	TargetECU target_ECU = config->targetECU;
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	767b      	strb	r3, [r7, #25]

	/* Create a new connection identifier. */
	if (target_ECU == PS_TARGET) {
 8000eba:	7e7b      	ldrb	r3, [r7, #25]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <tcpinit_thread+0x74>
		conn1 = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f008 fac7 	bl	8009458 <netconn_new_with_proto_and_callback>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <tcpinit_thread+0x108>)
 8000ece:	6013      	str	r3, [r2, #0]
		conn = conn1;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <tcpinit_thread+0x108>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	e00a      	b.n	8000eee <tcpinit_thread+0x8a>
	} else {
		conn2 = netconn_new(NETCONN_TCP);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2010      	movs	r0, #16
 8000ede:	f008 fabb 	bl	8009458 <netconn_new_with_proto_and_callback>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <tcpinit_thread+0x10c>)
 8000ee6:	6013      	str	r3, [r2, #0]
		conn = conn2;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <tcpinit_thread+0x10c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (conn!=NULL) // conn
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d038      	beq.n	8000f66 <tcpinit_thread+0x102>
	{
		/* Bind connection to the port number 10 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, dest_port);
 8000ef4:	8b7b      	ldrh	r3, [r7, #26]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	491e      	ldr	r1, [pc, #120]	; (8000f74 <tcpinit_thread+0x110>)
 8000efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000efc:	f008 fb66 	bl	80095cc <netconn_bind>
 8000f00:	4603      	mov	r3, r0
 8000f02:	763b      	strb	r3, [r7, #24]

		if (err == ERR_OK)
 8000f04:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d127      	bne.n	8000f5c <tcpinit_thread+0xf8>
		{
			/* The designation IP address of the computer */
			err = ipaddr_aton(ip_address, &dest_addr);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	69f8      	ldr	r0, [r7, #28]
 8000f14:	f014 fc78 	bl	8015808 <ip4addr_aton>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	763b      	strb	r3, [r7, #24]
			//dest_port = 10;  // server port

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8000f1c:	8b7a      	ldrh	r2, [r7, #26]
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f26:	f008 fb89 	bl	800963c <netconn_connect>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	75fb      	strb	r3, [r7, #23]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8000f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10b      	bne.n	8000f4e <tcpinit_thread+0xea>
				//send a "hi" message at first
				//int messageLength = sprintf(ToSendMessage , "hi");
				//tcp_SendMessage(target_ECU,(uint8_t *)ToSendMessage, messageLength);

				// UDS_req callback
				uds_req_clbk(target_ECU);
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <tcpinit_thread+0x114>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	7e7a      	ldrb	r2, [r7, #25]
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4798      	blx	r3

				//start receiving
				tcp_ReceiveMessage(target_ECU, conn, buf);
 8000f40:	7e7b      	ldrb	r3, [r7, #25]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f842 	bl	8000fd0 <tcp_ReceiveMessage>
 8000f4c:	e00b      	b.n	8000f66 <tcpinit_thread+0x102>
			}
			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8000f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f50:	f008 fea4 	bl	8009c9c <netconn_close>
				netconn_delete(conn);
 8000f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f56:	f008 fb1d 	bl	8009594 <netconn_delete>
 8000f5a:	e004      	b.n	8000f66 <tcpinit_thread+0x102>
			}
		}
		else
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
 8000f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f5e:	f008 fb19 	bl	8009594 <netconn_delete>
 8000f62:	e000      	b.n	8000f66 <tcpinit_thread+0x102>
		return;
 8000f64:	bf00      	nop
		}
	}
}
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000a4 	.word	0x200000a4
 8000f70:	200000a8 	.word	0x200000a8
 8000f74:	0801b8e4 	.word	0x0801b8e4
 8000f78:	200056c8 	.word	0x200056c8

08000f7c <tcp_SendMessage>:

void tcp_SendMessage (TargetECU targetECU, uint8_t *Message , int messageLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
	switch (targetECU) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d002      	beq.n	8000f96 <tcp_SendMessage+0x1a>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d00a      	beq.n	8000faa <tcp_SendMessage+0x2e>
		netconn_write(conn1, Message, messageLength, NETCONN_COPY);
		break;
	case WIPERS_TARGET:
		netconn_write(conn2, Message, messageLength, NETCONN_COPY);
		break;
	default: break;
 8000f94:	e013      	b.n	8000fbe <tcp_SendMessage+0x42>
		netconn_write(conn1, Message, messageLength, NETCONN_COPY);
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <tcp_SendMessage+0x4c>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	f008 fd78 	bl	8009a98 <netconn_write_partly>
		break;
 8000fa8:	e009      	b.n	8000fbe <tcp_SendMessage+0x42>
		netconn_write(conn2, Message, messageLength, NETCONN_COPY);
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <tcp_SendMessage+0x50>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	f008 fd6e 	bl	8009a98 <netconn_write_partly>
		break;
 8000fbc:	bf00      	nop
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a4 	.word	0x200000a4
 8000fcc:	200000a8 	.word	0x200000a8

08000fd0 <tcp_ReceiveMessage>:


static void tcp_ReceiveMessage (TargetECU targetECU, struct netconn *conn ,struct netbuf *buf )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09e      	sub	sp, #120	; 0x78
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
		/* wait until the data is sent by the server */
		if (netconn_recv(conn, &buf) == ERR_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f008 fcde 	bl	80099a4 <netconn_recv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f7      	bne.n	8000fde <tcp_ReceiveMessage+0xe>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				uint8_t ReceivedMessage[100];
				memset ((char *)ReceivedMessage, '\0', 100);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2264      	movs	r2, #100	; 0x64
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f015 ff50 	bl	8016e9c <memset>
				strncpy((char *)ReceivedMessage,buf->p->payload, buf->p->len);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	895b      	ldrh	r3, [r3, #10]
 8001008:	461a      	mov	r2, r3
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4618      	mov	r0, r3
 8001010:	f016 f933 	bl	801727a <strncpy>

				// uds receive response callback
				uds_recv_resp_clbk(targetECU, ReceivedMessage);
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <tcp_ReceiveMessage+0x6c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f107 0114 	add.w	r1, r7, #20
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	4610      	mov	r0, r2
 8001020:	4798      	blx	r3
			}
			while (netbuf_next(buf) >0);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	f00a fa53 	bl	800b4d0 <netbuf_next>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	dcde      	bgt.n	8000fee <tcp_ReceiveMessage+0x1e>

			netbuf_delete(buf);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f00a fa2c 	bl	800b490 <netbuf_delete>
		if (netconn_recv(conn, &buf) == ERR_OK)
 8001038:	e7d1      	b.n	8000fde <tcp_ReceiveMessage+0xe>
 800103a:	bf00      	nop
 800103c:	20005730 	.word	0x20005730

08001040 <tcpclient_init>:
	}
}


void tcpclient_init (uint8_t targetToConnectWith)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	if (targetToConnectWith&0x02) {
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d011      	beq.n	8001078 <tcpclient_init+0x38>
		target_1.ip_add = "169.254.84.57"; // 169.254.84.58
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <tcpclient_init+0x70>)
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <tcpclient_init+0x74>)
 8001058:	601a      	str	r2, [r3, #0]
		target_1.portNum = 10;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <tcpclient_init+0x70>)
 800105c:	220a      	movs	r2, #10
 800105e:	809a      	strh	r2, [r3, #4]
		target_1.targetECU = PS_TARGET;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <tcpclient_init+0x70>)
 8001062:	2201      	movs	r2, #1
 8001064:	719a      	strb	r2, [r3, #6]

		sys_thread_new("tcpinit_thread", tcpinit_thread, (void*)&target_1, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001066:	2318      	movs	r3, #24
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <tcpclient_init+0x70>)
 8001070:	4911      	ldr	r1, [pc, #68]	; (80010b8 <tcpclient_init+0x78>)
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <tcpclient_init+0x7c>)
 8001074:	f015 fd78 	bl	8016b68 <sys_thread_new>
	}
	if (targetToConnectWith&0x04) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d011      	beq.n	80010a6 <tcpclient_init+0x66>
		target_2.ip_add = "169.254.84.57";
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <tcpclient_init+0x80>)
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <tcpclient_init+0x74>)
 8001086:	601a      	str	r2, [r3, #0]
		target_2.portNum = 7;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <tcpclient_init+0x80>)
 800108a:	2207      	movs	r2, #7
 800108c:	809a      	strh	r2, [r3, #4]
		target_2.targetECU = WIPERS_TARGET;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <tcpclient_init+0x80>)
 8001090:	2202      	movs	r2, #2
 8001092:	719a      	strb	r2, [r3, #6]

		sys_thread_new("tcpinit_thread", tcpinit_thread, (void*)&target_2, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001094:	2318      	movs	r3, #24
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <tcpclient_init+0x80>)
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <tcpclient_init+0x78>)
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <tcpclient_init+0x7c>)
 80010a2:	f015 fd61 	bl	8016b68 <sys_thread_new>
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20005734 	.word	0x20005734
 80010b4:	0801816c 	.word	0x0801816c
 80010b8:	08000e65 	.word	0x08000e65
 80010bc:	0801817c 	.word	0x0801817c
 80010c0:	2000573c 	.word	0x2000573c

080010c4 <UDS_RC_erase_memory>:
	}
	tcp_SendMessage(targetECU, requestFrame, 34);
}

void UDS_RC_erase_memory(TargetECU targetECU, void *arg)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
	uint8_t requestFrame[] = {ROUTINE_CONTROL, RC_START_ROUTINE, 0xFF, 0x00};
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <UDS_RC_erase_memory+0x28>)
 80010d2:	60fb      	str	r3, [r7, #12]
	tcp_SendMessage(targetECU, requestFrame, 4);
 80010d4:	f107 010c 	add.w	r1, r7, #12
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2204      	movs	r2, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff4d 	bl	8000f7c <tcp_SendMessage>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	00ff0131 	.word	0x00ff0131

080010f0 <UDS_transfer_data>:
	uint8_t requestFrame[] = {REQUEST_DOWNLOAD, downloadSize[0], downloadSize[1], downloadSize[2], downloadSize[3]};
	tcp_SendMessage(targetECU, requestFrame, 5);
}

void UDS_transfer_data(TargetECU targetECU, void *arg)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	f6ad 1dd8 	subw	sp, sp, #2520	; 0x9d8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4602      	mov	r2, r0
 80010fa:	463b      	mov	r3, r7
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
	//use the array used by uart to save data and forward it
	//frame: (TRANSFER_DATA, data)
	uint8_t *data = (uint8_t *)arg;
 8001102:	463b      	mov	r3, r7
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
	uint8_t requestFrame[app_size + 1]; // uint8_t *requestFrame; 6416+1  1024+1
	requestFrame[0] = TRANSFER_DATA;
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2236      	movs	r2, #54	; 0x36
 8001110:	701a      	strb	r2, [r3, #0]
	uint16_t i;
//	for (i = 0; i < app_size; i++) {  // PACKET_SIZE 6416
//		requestFrame[i+1] = data[i];
//	}
	for (i = 0; i < app_size; i++) {  // PACKET_SIZE 6416
 8001112:	2300      	movs	r3, #0
 8001114:	f8a7 39d6 	strh.w	r3, [r7, #2518]	; 0x9d6
 8001118:	e00e      	b.n	8001138 <UDS_transfer_data+0x48>
		requestFrame[i+1] = data_received[i];
 800111a:	f8b7 29d6 	ldrh.w	r2, [r7, #2518]	; 0x9d6
 800111e:	f8b7 39d6 	ldrh.w	r3, [r7, #2518]	; 0x9d6
 8001122:	3301      	adds	r3, #1
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <UDS_transfer_data+0x70>)
 8001126:	5c89      	ldrb	r1, [r1, r2]
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < app_size; i++) {  // PACKET_SIZE 6416
 800112e:	f8b7 39d6 	ldrh.w	r3, [r7, #2518]	; 0x9d6
 8001132:	3301      	adds	r3, #1
 8001134:	f8a7 39d6 	strh.w	r3, [r7, #2518]	; 0x9d6
 8001138:	f8b7 39d6 	ldrh.w	r3, [r7, #2518]	; 0x9d6
 800113c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001140:	4293      	cmp	r3, r2
 8001142:	d9ea      	bls.n	800111a <UDS_transfer_data+0x2a>
	}
//	tcp_SendMessage(targetECU, data_received, app_size);
	tcp_SendMessage(targetECU, requestFrame, app_size+1); // PACKET_SIZE+1 6416+1
 8001144:	f107 0108 	add.w	r1, r7, #8
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f640 12c5 	movw	r2, #2501	; 0x9c5
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff13 	bl	8000f7c <tcp_SendMessage>
}
 8001156:	bf00      	nop
 8001158:	f607 17d8 	addw	r7, r7, #2520	; 0x9d8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20004cbc 	.word	0x20004cbc

08001164 <UDS_receive_response>:
	uint8_t requestFrame[] = {ECU_RESET, ER_SOFT_RESET};
	tcp_SendMessage(targetECU, requestFrame, 2);
}

void UDS_receive_response(TargetECU targetECU, void *arg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
	if(arg == NULL)
	{
		//delete task!
	}
	uint8_t *responseFrame = (uint8_t *)arg;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	60fb      	str	r3, [r7, #12]
	switch(responseFrame[0]){
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3b50      	subs	r3, #80	; 0x50
 800117a:	2b2f      	cmp	r3, #47	; 0x2f
 800117c:	f200 8094 	bhi.w	80012a8 <UDS_receive_response+0x144>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <UDS_receive_response+0x24>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	08001249 	.word	0x08001249
 800118c:	08001291 	.word	0x08001291
 8001190:	080012a9 	.word	0x080012a9
 8001194:	080012a9 	.word	0x080012a9
 8001198:	080012a9 	.word	0x080012a9
 800119c:	080012a9 	.word	0x080012a9
 80011a0:	080012a9 	.word	0x080012a9
 80011a4:	080012a9 	.word	0x080012a9
 80011a8:	080012a9 	.word	0x080012a9
 80011ac:	080012a9 	.word	0x080012a9
 80011b0:	080012a9 	.word	0x080012a9
 80011b4:	080012a9 	.word	0x080012a9
 80011b8:	080012a9 	.word	0x080012a9
 80011bc:	080012a9 	.word	0x080012a9
 80011c0:	080012a9 	.word	0x080012a9
 80011c4:	080012a9 	.word	0x080012a9
 80011c8:	080012a9 	.word	0x080012a9
 80011cc:	080012a9 	.word	0x080012a9
 80011d0:	080012a9 	.word	0x080012a9
 80011d4:	080012a9 	.word	0x080012a9
 80011d8:	080012a9 	.word	0x080012a9
 80011dc:	080012a9 	.word	0x080012a9
 80011e0:	080012a9 	.word	0x080012a9
 80011e4:	08001255 	.word	0x08001255
 80011e8:	080012a9 	.word	0x080012a9
 80011ec:	080012a9 	.word	0x080012a9
 80011f0:	080012a9 	.word	0x080012a9
 80011f4:	080012a9 	.word	0x080012a9
 80011f8:	080012a9 	.word	0x080012a9
 80011fc:	080012a9 	.word	0x080012a9
 8001200:	080012a9 	.word	0x080012a9
 8001204:	080012a9 	.word	0x080012a9
 8001208:	080012a9 	.word	0x080012a9
 800120c:	08001261 	.word	0x08001261
 8001210:	080012a9 	.word	0x080012a9
 8001214:	080012a9 	.word	0x080012a9
 8001218:	0800126d 	.word	0x0800126d
 800121c:	080012a9 	.word	0x080012a9
 8001220:	08001279 	.word	0x08001279
 8001224:	08001285 	.word	0x08001285
 8001228:	080012a9 	.word	0x080012a9
 800122c:	080012a9 	.word	0x080012a9
 8001230:	080012a9 	.word	0x080012a9
 8001234:	080012a9 	.word	0x080012a9
 8001238:	080012a9 	.word	0x080012a9
 800123c:	080012a9 	.word	0x080012a9
 8001240:	080012a9 	.word	0x080012a9
 8001244:	0800129d 	.word	0x0800129d
	case DIAGNOSTICS_SESSION_CONTROL + POSITIVE_RESPONSE_OFFSET:
		UDS_DSC_handle(targetECU, responseFrame);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f831 	bl	80012b4 <UDS_DSC_handle>
		break;
 8001252:	e02a      	b.n	80012aa <UDS_receive_response+0x146>
	case SECURITY_ACCESS + POSITIVE_RESPONSE_OFFSET:
		UDS_SA_handle(targetECU, responseFrame);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f845 	bl	80012e8 <UDS_SA_handle>
		break;
 800125e:	e024      	b.n	80012aa <UDS_receive_response+0x146>
	case ROUTINE_CONTROL + POSITIVE_RESPONSE_OFFSET:
		UDS_RC_handle(targetECU, responseFrame);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f84b 	bl	8001300 <UDS_RC_handle>
		break;
 800126a:	e01e      	b.n	80012aa <UDS_receive_response+0x146>
	case REQUEST_DOWNLOAD + POSITIVE_RESPONSE_OFFSET:
		UDS_RD_handle(targetECU, responseFrame);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f857 	bl	8001324 <UDS_RD_handle>
		break;
 8001276:	e018      	b.n	80012aa <UDS_receive_response+0x146>
	case TRANSFER_DATA + POSITIVE_RESPONSE_OFFSET:
		UDS_TD_handle(targetECU, responseFrame);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f85d 	bl	800133c <UDS_TD_handle>
		break;
 8001282:	e012      	b.n	80012aa <UDS_receive_response+0x146>
	case REQUEST_TRANSFER_EXIT + POSITIVE_RESPONSE_OFFSET:
		UDS_RTE_handle(targetECU, responseFrame);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f873 	bl	8001374 <UDS_RTE_handle>
		break;
 800128e:	e00c      	b.n	80012aa <UDS_receive_response+0x146>
	case ECU_RESET + POSITIVE_RESPONSE_OFFSET:
		UDS_ER_handle(targetECU, responseFrame);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	68f9      	ldr	r1, [r7, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f879 	bl	800138c <UDS_ER_handle>
		break;
 800129a:	e006      	b.n	80012aa <UDS_receive_response+0x146>
	case NEGATIVE_RESPONSE:
		UDS_negative_response_handle(targetECU, responseFrame);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f87f 	bl	80013a4 <UDS_negative_response_handle>
		break;
 80012a6:	e000      	b.n	80012aa <UDS_receive_response+0x146>
	default:		break;
 80012a8:	bf00      	nop
	}
	//delete task!
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop

080012b4 <UDS_DSC_handle>:

void UDS_DSC_handle(TargetECU targetECU, uint8_t *responseFrame)
{ 
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	int messageLength = sprintf(msg , "session success\n");
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <UDS_DSC_handle+0x30>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f015 ff6c 	bl	80171a4 <siprintf>
 80012cc:	61f8      	str	r0, [r7, #28]
	tcp_SendMessage(targetECU, msg, messageLength);
 80012ce:	f107 0108 	add.w	r1, r7, #8
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe50 	bl	8000f7c <tcp_SendMessage>
} 
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	0801818c 	.word	0x0801818c

080012e8 <UDS_SA_handle>:


void UDS_SA_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <UDS_RC_handle>:

void UDS_RC_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
	UDS_transfer_data(targetECU, data_received);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4904      	ldr	r1, [pc, #16]	; (8001320 <UDS_RC_handle+0x20>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff feed 	bl	80010f0 <UDS_transfer_data>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20004cbc 	.word	0x20004cbc

08001324 <UDS_RD_handle>:

void UDS_RD_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]

}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <UDS_TD_handle>:

void UDS_TD_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
	count++;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <UDS_TD_handle+0x30>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <UDS_TD_handle+0x30>)
 8001350:	6013      	str	r3, [r2, #0]
	if(count <= 5) {
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <UDS_TD_handle+0x30>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b05      	cmp	r3, #5
 8001358:	dc04      	bgt.n	8001364 <UDS_TD_handle+0x28>
		UDS_transfer_data(targetECU, data_received);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4904      	ldr	r1, [pc, #16]	; (8001370 <UDS_TD_handle+0x34>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fec6 	bl	80010f0 <UDS_transfer_data>
	}
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000ac 	.word	0x200000ac
 8001370:	20004cbc 	.word	0x20004cbc

08001374 <UDS_RTE_handle>:

void UDS_RTE_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]

}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <UDS_ER_handle>:

void UDS_ER_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]

}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <UDS_negative_response_handle>:

void UDS_negative_response_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]

}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <UDS_start_request>:

void UDS_start_request(TargetECU targetECU) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
//	UDS_transfer_data(targetECU, data_received);
	void *arg;
	UDS_RC_erase_memory(targetECU, arg);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe7a 	bl	80010c4 <UDS_RC_erase_memory>
	/*uint8_t sessionType = (uint8_t)EXTENDED;
	UDS_diagnostics_session_control(targetECU, (void*)&sessionType);*/
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001402:	f7ff fcfd 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f015 fce3 	bl	8016dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff f8d5 	bl	80005b8 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001410:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800141c:	0801bb54 	.word	0x0801bb54
  ldr r2, =_sbss
 8001420:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001424:	20025870 	.word	0x20025870

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f8fc 	bl	8001652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f7ff fb78 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fac0 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	20005744 	.word	0x20005744

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20005744 	.word	0x20005744

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff4c 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167a:	f7ff ff61 	bl	8001540 <__NVIC_GetPriorityGrouping>
 800167e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff ffb1 	bl	80015ec <NVIC_EncodePriority>
 800168a:	4602      	mov	r2, r0
 800168c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff80 	bl	8001598 <__NVIC_SetPriority>
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff54 	bl	800155c <__NVIC_EnableIRQ>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ca:	f7ff fee5 	bl	8001498 <HAL_GetTick>
 80016ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e052      	b.n	8001794 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0216 	bic.w	r2, r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <HAL_DMA_Abort+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0208 	bic.w	r2, r2, #8
 800172c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	e013      	b.n	8001768 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001740:	f7ff feaa 	bl	8001498 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b05      	cmp	r3, #5
 800174c:	d90c      	bls.n	8001768 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2220      	movs	r2, #32
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e015      	b.n	8001794 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e4      	bne.n	8001740 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	223f      	movs	r2, #63	; 0x3f
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d004      	beq.n	80017ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00c      	b.n	80017d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2205      	movs	r2, #5
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80017f0:	4baa      	ldr	r3, [pc, #680]	; (8001a9c <HAL_ETH_Init+0x2bc>)
 80017f2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e183      	b.n	8001b0e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f003 fb04 	bl	8004e28 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	4b9e      	ldr	r3, [pc, #632]	; (8001aa0 <HAL_ETH_Init+0x2c0>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	4a9d      	ldr	r2, [pc, #628]	; (8001aa0 <HAL_ETH_Init+0x2c0>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6453      	str	r3, [r2, #68]	; 0x44
 8001830:	4b9b      	ldr	r3, [pc, #620]	; (8001aa0 <HAL_ETH_Init+0x2c0>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800183c:	4b99      	ldr	r3, [pc, #612]	; (8001aa4 <HAL_ETH_Init+0x2c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_ETH_Init+0x2c4>)
 8001842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001846:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001848:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <HAL_ETH_Init+0x2c4>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4994      	ldr	r1, [pc, #592]	; (8001aa4 <HAL_ETH_Init+0x2c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800186e:	f7ff fe13 	bl	8001498 <HAL_GetTick>
 8001872:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001874:	e011      	b.n	800189a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001876:	f7ff fe0f 	bl	8001498 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001884:	d909      	bls.n	800189a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e139      	b.n	8001b0e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e4      	bne.n	8001876 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f023 031c 	bic.w	r3, r3, #28
 80018ba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018bc:	f001 ffe0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80018c0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4a78      	ldr	r2, [pc, #480]	; (8001aa8 <HAL_ETH_Init+0x2c8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d908      	bls.n	80018dc <HAL_ETH_Init+0xfc>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_ETH_Init+0x2cc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d804      	bhi.n	80018dc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e027      	b.n	800192c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4a73      	ldr	r2, [pc, #460]	; (8001aac <HAL_ETH_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d908      	bls.n	80018f6 <HAL_ETH_Init+0x116>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4a6d      	ldr	r2, [pc, #436]	; (8001a9c <HAL_ETH_Init+0x2bc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d204      	bcs.n	80018f6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f043 030c 	orr.w	r3, r3, #12
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	e01a      	b.n	800192c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4a68      	ldr	r2, [pc, #416]	; (8001a9c <HAL_ETH_Init+0x2bc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d303      	bcc.n	8001906 <HAL_ETH_Init+0x126>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <HAL_ETH_Init+0x2d0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d911      	bls.n	800192a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <HAL_ETH_Init+0x2d0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d908      	bls.n	8001920 <HAL_ETH_Init+0x140>
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4a68      	ldr	r2, [pc, #416]	; (8001ab4 <HAL_ETH_Init+0x2d4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d804      	bhi.n	8001920 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e005      	b.n	800192c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	e000      	b.n	800192c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800192a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001938:	2100      	movs	r1, #0
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fc17 	bl	800216e <HAL_ETH_WritePHYRegister>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fdcd 	bl	80024ec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0d7      	b.n	8001b0e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800195e:	20ff      	movs	r0, #255	; 0xff
 8001960:	f7ff fda6 	bl	80014b0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a5 	beq.w	8001ab8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800196e:	f7ff fd93 	bl	8001498 <HAL_GetTick>
 8001972:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	461a      	mov	r2, r3
 800197a:	2101      	movs	r1, #1
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fb8e 	bl	800209e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001982:	f7ff fd89 	bl	8001498 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d90f      	bls.n	80019b4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fda6 	bl	80024ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0ac      	b.n	8001b0e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0da      	beq.n	8001974 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80019be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fbd2 	bl	800216e <HAL_ETH_WritePHYRegister>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019d4:	6939      	ldr	r1, [r7, #16]
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fd88 	bl	80024ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80019e4:	2301      	movs	r3, #1
 80019e6:	e092      	b.n	8001b0e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff fd56 	bl	8001498 <HAL_GetTick>
 80019ec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	461a      	mov	r2, r3
 80019f4:	2101      	movs	r1, #1
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb51 	bl	800209e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80019fc:	f7ff fd4c 	bl	8001498 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d90f      	bls.n	8001a2e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fd69 	bl	80024ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e06f      	b.n	8001b0e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0da      	beq.n	80019ee <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2110      	movs	r1, #16
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fb2c 	bl	800209e <HAL_ETH_ReadPHYRegister>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fd4a 	bl	80024ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001a60:	2301      	movs	r3, #1
 8001a62:	e054      	b.n	8001b0e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	e002      	b.n	8001a7e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	e035      	b.n	8001afc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	e030      	b.n	8001afc <HAL_ETH_Init+0x31c>
 8001a9a:	bf00      	nop
 8001a9c:	03938700 	.word	0x03938700
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	01312cff 	.word	0x01312cff
 8001aac:	02160ebf 	.word	0x02160ebf
 8001ab0:	05f5e0ff 	.word	0x05f5e0ff
 8001ab4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fb4c 	bl	800216e <HAL_ETH_WritePHYRegister>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fd02 	bl	80024ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00c      	b.n	8001b0e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001af4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001af8:	f7ff fcda 	bl	80014b0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001afc:	6939      	ldr	r1, [r7, #16]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fcf4 	bl	80024ec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop

08001b18 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ETH_DMATxDescListInit+0x20>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e052      	b.n	8001bde <HAL_ETH_DMATxDescListInit+0xc6>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e030      	b.n	8001bb6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b64:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d208      	bcs.n	8001baa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	e002      	b.n	8001bb0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3ca      	bcc.n	8001b54 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	3310      	adds	r3, #16
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ETH_DMARxDescListInit+0x20>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e056      	b.n	8001cb8 <HAL_ETH_DMARxDescListInit+0xce>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e034      	b.n	8001c90 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	015b      	lsls	r3, r3, #5
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c36:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c3e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d208      	bcs.n	8001c84 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	e002      	b.n	8001c8a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3c6      	bcc.n	8001c26 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	330c      	adds	r3, #12
 8001ca4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ETH_TransmitFrame+0x24>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0cd      	b.n	8001e84 <HAL_ETH_TransmitFrame+0x1c0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0b8      	b.n	8001e84 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da09      	bge.n	8001d30 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2212      	movs	r2, #18
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0a9      	b.n	8001e84 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d915      	bls.n	8001d66 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	4b51      	ldr	r3, [pc, #324]	; (8001e90 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d4e:	0a9b      	lsrs	r3, r3, #10
 8001d50:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e001      	b.n	8001d6a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d11c      	bne.n	8001daa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001d7e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d8a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d9a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da8:	e04b      	b.n	8001e42 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e044      	b.n	8001e3a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dbe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dd4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dde:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d116      	bne.n	8001e18 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001df8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <HAL_ETH_TransmitFrame+0x1d0>)
 8001dfe:	fb02 f203 	mul.w	r2, r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001e0a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001e16:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e26:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	3301      	adds	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3b6      	bcc.n	8001db0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	3314      	adds	r3, #20
 8001e60:	2204      	movs	r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	ac02b00b 	.word	0xac02b00b
 8001e94:	fffffa0c 	.word	0xfffffa0c

08001e98 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e074      	b.n	8001f9c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ec2:	e05a      	b.n	8001f7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ef4:	e041      	b.n	8001f7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
 8001f1a:	e02e      	b.n	8001f7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d103      	bne.n	8001f3e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f4a:	1f1a      	subs	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e010      	b.n	8001f9c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db02      	blt.n	8001f8a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d99c      	bls.n	8001ec4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb8:	3314      	adds	r3, #20
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d112      	bne.n	8001fea <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 fffd 	bl	8004fc4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fe8:	e01b      	b.n	8002022 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff2:	3314      	adds	r3, #20
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d111      	bne.n	8002022 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f839 	bl	8002076 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	3314      	adds	r3, #20
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	3314      	adds	r3, #20
 800202c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002030:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	3314      	adds	r3, #20
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002046:	d112      	bne.n	800206e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f81e 	bl	800208a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	3314      	adds	r3, #20
 8002058:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800205c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	460b      	mov	r3, r1
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b82      	cmp	r3, #130	; 0x82
 80020be:	d101      	bne.n	80020c4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
 80020c2:	e050      	b.n	8002166 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2282      	movs	r2, #130	; 0x82
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 031c 	and.w	r3, r3, #28
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8a1b      	ldrh	r3, [r3, #16]
 80020e0:	02db      	lsls	r3, r3, #11
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f023 0302 	bic.w	r3, r3, #2
 80020fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002110:	f7ff f9c2 	bl	8001498 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002116:	e015      	b.n	8002144 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002118:	f7ff f9be 	bl	8001498 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d309      	bcc.n	800213c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e014      	b.n	8002166 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e4      	bne.n	8002118 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	460b      	mov	r3, r1
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b42      	cmp	r3, #66	; 0x42
 800218e:	d101      	bne.n	8002194 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	e04e      	b.n	8002232 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2242      	movs	r2, #66	; 0x42
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 031c 	and.w	r3, r3, #28
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8a1b      	ldrh	r3, [r3, #16]
 80021b0:	02db      	lsls	r3, r3, #11
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021ea:	f7ff f955 	bl	8001498 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f0:	e015      	b.n	800221e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80021f2:	f7ff f951 	bl	8001498 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d309      	bcc.n	8002216 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e00d      	b.n	8002232 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e4      	bne.n	80021f2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ETH_Start+0x16>
 800224c:	2302      	movs	r3, #2
 800224e:	e01f      	b.n	8002290 <HAL_ETH_Start+0x56>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fb45 	bl	80028f0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fb7c 	bl	8002964 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fc13 	bl	8002a98 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fbb0 	bl	80029d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fbdd 	bl	8002a38 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ETH_Stop+0x16>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e01f      	b.n	80022ee <HAL_ETH_Stop+0x56>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fba2 	bl	8002a08 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fbcf 	bl	8002a68 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fb67 	bl	800299e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fbe1 	bl	8002a98 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fb27 	bl	800292a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ETH_ConfigMAC+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e0e4      	b.n	80024de <HAL_ETH_ConfigMAC+0x1e6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b1 	beq.w	800248e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002344:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800234a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002350:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002356:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800235c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002362:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002368:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800236e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002374:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800237a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002380:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002386:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff f886 	bl	80014b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023b4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80023ba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80023c0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80023c6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80023cc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80023d2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80023de:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023e0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff f860 	bl	80014b0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002400:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800240a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	f64f 7341 	movw	r3, #65345	; 0xff41
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002428:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800242e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002434:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800243a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002440:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff f829 	bl	80014b0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff f816 	bl	80014b0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	61da      	str	r2, [r3, #28]
 800248c:	e01e      	b.n	80024cc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800249c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024be:	2001      	movs	r0, #1
 80024c0:	f7fe fff6 	bl	80014b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	ff20810f 	.word	0xff20810f

080024ec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0b0      	sub	sp, #192	; 0xc0
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002508:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002510:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800251a:	2300      	movs	r3, #0
 800251c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002536:	663b      	str	r3, [r7, #96]	; 0x60
 8002538:	e001      	b.n	800253e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002542:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002548:	2300      	movs	r3, #0
 800254a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025c4:	4bac      	ldr	r3, [pc, #688]	; (8002878 <ETH_MACDMAConfig+0x38c>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025d0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80025d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80025d4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80025d8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80025de:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80025e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80025e2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80025e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80025e6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80025ec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80025ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80025f0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80025f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80025f4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80025f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80025f8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80025fc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80025fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002600:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002602:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002614:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002620:	2001      	movs	r0, #1
 8002622:	f7fe ff45 	bl	80014b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800262e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002630:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002634:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002638:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800263a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800263e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002644:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002646:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800264a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002650:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002654:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800265c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800265e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800266a:	2001      	movs	r0, #1
 800266c:	f7fe ff20 	bl	80014b0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002678:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002682:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800268c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002698:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800269c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026a0:	4013      	ands	r3, r2
 80026a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026aa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80026ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026b0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80026b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80026b6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80026b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80026bc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80026be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80026c2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80026c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80026c8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026dc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7fe fee1 	bl	80014b0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026f6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80026fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002712:	2001      	movs	r0, #1
 8002714:	f7fe fecc 	bl	80014b0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002720:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002734:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002746:	2304      	movs	r3, #4
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800275c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002766:	2300      	movs	r3, #0
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800276a:	2300      	movs	r3, #0
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	3318      	adds	r3, #24
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800277e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <ETH_MACDMAConfig+0x390>)
 8002784:	4013      	ands	r3, r2
 8002786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800278a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800278c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800278e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002790:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002792:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002794:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002796:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002798:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800279a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800279c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800279e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80027a0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80027a2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80027a6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80027aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	3318      	adds	r3, #24
 80027c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ce:	3318      	adds	r3, #24
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f7fe fe6a 	bl	80014b0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e4:	3318      	adds	r3, #24
 80027e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80027f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80027fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002802:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002806:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002824:	2001      	movs	r0, #1
 8002826:	f7fe fe43 	bl	80014b0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002836:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10f      	bne.n	8002860 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	331c      	adds	r3, #28
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285c:	331c      	adds	r3, #28
 800285e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	461a      	mov	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f809 	bl	8002880 <ETH_MACAddressConfig>
}
 800286e:	bf00      	nop
 8002870:	37c0      	adds	r7, #192	; 0xc0
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	ff20810f 	.word	0xff20810f
 800287c:	f8de3f23 	.word	0xf8de3f23

08002880 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3305      	adds	r3, #5
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	3204      	adds	r2, #4
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <ETH_MACAddressConfig+0x68>)
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3303      	adds	r3, #3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	061a      	lsls	r2, r3, #24
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3302      	adds	r3, #2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3301      	adds	r3, #1
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <ETH_MACAddressConfig+0x6c>)
 80028d2:	4413      	add	r3, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	6013      	str	r3, [r2, #0]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40028040 	.word	0x40028040
 80028ec:	40028044 	.word	0x40028044

080028f0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 f8e9 	bl	8002aec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0208 	bic.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800294e:	2001      	movs	r0, #1
 8002950:	f000 f8cc 	bl	8002aec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0204 	orr.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002988:	2001      	movs	r0, #1
 800298a:	f000 f8af 	bl	8002aec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0204 	bic.w	r2, r2, #4
 80029b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f000 f892 	bl	8002aec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e8:	3318      	adds	r3, #24
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f8:	3318      	adds	r3, #24
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a18:	3318      	adds	r3, #24
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	3318      	adds	r3, #24
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a48:	3318      	adds	r3, #24
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0202 	orr.w	r2, r2, #2
 8002a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a58:	3318      	adds	r3, #24
 8002a5a:	601a      	str	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a78:	3318      	adds	r3, #24
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0202 	bic.w	r2, r2, #2
 8002a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a88:	3318      	adds	r3, #24
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	3318      	adds	r3, #24
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	3318      	adds	r3, #24
 8002abe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac8:	3318      	adds	r3, #24
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f000 f80c 	bl	8002aec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	3318      	adds	r3, #24
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <ETH_Delay+0x38>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <ETH_Delay+0x3c>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a5b      	lsrs	r3, r3, #9
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002b08:	bf00      	nop
  } 
  while (Delay --);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	60fa      	str	r2, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <ETH_Delay+0x1c>
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e177      	b.n	8002e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 8166 	bne.w	8002e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80c0 	beq.w	8002e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <HAL_GPIO_Init+0x324>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_GPIO_Init+0x324>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cce:	4a61      	ldr	r2, [pc, #388]	; (8002e54 <HAL_GPIO_Init+0x328>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_GPIO_Init+0x32c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d037      	beq.n	8002d6a <HAL_GPIO_Init+0x23e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d031      	beq.n	8002d66 <HAL_GPIO_Init+0x23a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02b      	beq.n	8002d62 <HAL_GPIO_Init+0x236>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_GPIO_Init+0x338>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d025      	beq.n	8002d5e <HAL_GPIO_Init+0x232>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a54      	ldr	r2, [pc, #336]	; (8002e68 <HAL_GPIO_Init+0x33c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01f      	beq.n	8002d5a <HAL_GPIO_Init+0x22e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a53      	ldr	r2, [pc, #332]	; (8002e6c <HAL_GPIO_Init+0x340>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d019      	beq.n	8002d56 <HAL_GPIO_Init+0x22a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a52      	ldr	r2, [pc, #328]	; (8002e70 <HAL_GPIO_Init+0x344>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_GPIO_Init+0x348>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00d      	beq.n	8002d4e <HAL_GPIO_Init+0x222>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_GPIO_Init+0x34c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <HAL_GPIO_Init+0x21e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4f      	ldr	r2, [pc, #316]	; (8002e7c <HAL_GPIO_Init+0x350>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_GPIO_Init+0x21a>
 8002d42:	2309      	movs	r3, #9
 8002d44:	e012      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d46:	230a      	movs	r3, #10
 8002d48:	e010      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	e00e      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d4e:	2307      	movs	r3, #7
 8002d50:	e00c      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d52:	2306      	movs	r3, #6
 8002d54:	e00a      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d56:	2305      	movs	r3, #5
 8002d58:	e008      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e002      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x240>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f002 0203 	and.w	r2, r2, #3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4093      	lsls	r3, r2
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d7c:	4935      	ldr	r1, [pc, #212]	; (8002e54 <HAL_GPIO_Init+0x328>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dde:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_GPIO_Init+0x354>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	f67f ae84 	bls.w	8002b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40021c00 	.word	0x40021c00
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40022400 	.word	0x40022400
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea0:	e003      	b.n	8002eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	041a      	lsls	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e043      	b.n	8002f52 <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fdac 	bl	8000a3c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_HASH_Init+0xa4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	490c      	ldr	r1, [pc, #48]	; (8002f5c <HAL_HASH_Init+0xa4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
#if defined(HASH_CR_MDMAT)
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_HASH_Init+0xa4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_HASH_Init+0xa4>)
 8002f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f38:	6013      	str	r3, [r2, #0]
#endif /* HASH_CR_MDMAT */
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	50060400 	.word	0x50060400

08002f60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8c:	f7fe fa84 	bl	8001498 <HAL_GetTick>
 8002f90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f92:	e009      	b.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f94:	f7fe fa80 	bl	8001498 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa2:	d901      	bls.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e01f      	b.n	8002fe8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d1ee      	bne.n	8002f94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fbc:	f7fe fa6c 	bl	8001498 <HAL_GetTick>
 8002fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc2:	e009      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fc4:	f7fe fa68 	bl	8001498 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd2:	d901      	bls.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e007      	b.n	8002fe8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	420e0040 	.word	0x420e0040
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	420e0044 	.word	0x420e0044

08003000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e264      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	4ba3      	ldr	r3, [pc, #652]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00c      	beq.n	8003044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4ba0      	ldr	r3, [pc, #640]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003032:	2b08      	cmp	r3, #8
 8003034:	d112      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b9d      	ldr	r3, [pc, #628]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b99      	ldr	r3, [pc, #612]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x108>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e23f      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x74>
 8003066:	4b91      	ldr	r3, [pc, #580]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a90      	ldr	r2, [pc, #576]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8a      	ldr	r2, [pc, #552]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003098:	4b84      	ldr	r3, [pc, #528]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a83      	ldr	r2, [pc, #524]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a80      	ldr	r2, [pc, #512]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe f9ee 	bl	8001498 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe f9ea 	bl	8001498 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e204      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe f9da 	bl	8001498 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe f9d6 	bl	8001498 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1f0      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0xe8>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b62      	ldr	r3, [pc, #392]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1c4      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4952      	ldr	r1, [pc, #328]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x2b0>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe f98f 	bl	8001498 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe f98b 	bl	8001498 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1a5      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4940      	ldr	r1, [pc, #256]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <HAL_RCC_OscConfig+0x2b0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe f96e 	bl	8001498 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe f96a 	bl	8001498 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e184      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d030      	beq.n	800324c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_OscConfig+0x2b4>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe f94e 	bl	8001498 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003200:	f7fe f94a 	bl	8001498 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e164      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x200>
 800321e:	e015      	b.n	800324c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCC_OscConfig+0x2b4>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe f937 	bl	8001498 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322e:	f7fe f933 	bl	8001498 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e14d      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a0 	beq.w	800339a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d121      	bne.n	80032da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fe f8f9 	bl	8001498 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e011      	b.n	80032ce <HAL_RCC_OscConfig+0x2ce>
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	42470000 	.word	0x42470000
 80032b4:	42470e80 	.word	0x42470e80
 80032b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032bc:	f7fe f8ec 	bl	8001498 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e106      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b85      	ldr	r3, [pc, #532]	; (80034e4 <HAL_RCC_OscConfig+0x4e4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d106      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	e01c      	b.n	800332a <HAL_RCC_OscConfig+0x32a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a77      	ldr	r2, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x32a>
 8003312:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe f8b1 	bl	8001498 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe f8ad 	bl	8001498 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0c5      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCC_OscConfig+0x33a>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe f89b 	bl	8001498 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe f897 	bl	8001498 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0af      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 809b 	beq.w	80034da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d05c      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d141      	bne.n	800343c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe f86b 	bl	8001498 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe f867 	bl	8001498 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e081      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	019b      	lsls	r3, r3, #6
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	4937      	ldr	r1, [pc, #220]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe f840 	bl	8001498 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe f83c 	bl	8001498 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e056      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x41c>
 800343a:	e04e      	b.n	80034da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe f829 	bl	8001498 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe f825 	bl	8001498 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03f      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003468:	e037      	b.n	80034da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e032      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d028      	beq.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d121      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d11a      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d111      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40007000 	.word	0x40007000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470060 	.word	0x42470060

080034f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0cc      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d90c      	bls.n	800352c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d044      	beq.n	8003610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d119      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e067      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4934      	ldr	r1, [pc, #208]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fd ff5a 	bl	8001498 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd ff56 	bl	8001498 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d20c      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fa5a 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00
 80036ac:	40023800 	.word	0x40023800
 80036b0:	0801b7b8 	.word	0x0801b7b8
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	2300      	movs	r3, #0
 80036ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d4:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d00d      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x40>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	f200 80bd 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ee:	e0b7      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036f2:	60bb      	str	r3, [r7, #8]
       break;
 80036f4:	e0b7      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f6:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036f8:	60bb      	str	r3, [r7, #8]
      break;
 80036fa:	e0b4      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fc:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04d      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	ea02 0800 	and.w	r8, r2, r0
 800372a:	ea03 0901 	and.w	r9, r3, r1
 800372e:	4640      	mov	r0, r8
 8003730:	4649      	mov	r1, r9
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	014b      	lsls	r3, r1, #5
 800373c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003740:	0142      	lsls	r2, r0, #5
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	ebb0 0008 	subs.w	r0, r0, r8
 800374a:	eb61 0109 	sbc.w	r1, r1, r9
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	018b      	lsls	r3, r1, #6
 8003758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800375c:	0182      	lsls	r2, r0, #6
 800375e:	1a12      	subs	r2, r2, r0
 8003760:	eb63 0301 	sbc.w	r3, r3, r1
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	00d9      	lsls	r1, r3, #3
 800376e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003772:	00d0      	lsls	r0, r2, #3
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	eb12 0208 	adds.w	r2, r2, r8
 800377c:	eb43 0309 	adc.w	r3, r3, r9
 8003780:	f04f 0000 	mov.w	r0, #0
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	0259      	lsls	r1, r3, #9
 800378a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800378e:	0250      	lsls	r0, r2, #9
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f7fc fd7e 	bl	80002a0 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e04a      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	461a      	mov	r2, r3
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	ea02 0400 	and.w	r4, r2, r0
 80037c6:	ea03 0501 	and.w	r5, r3, r1
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	014b      	lsls	r3, r1, #5
 80037d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037dc:	0142      	lsls	r2, r0, #5
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	1b00      	subs	r0, r0, r4
 80037e4:	eb61 0105 	sbc.w	r1, r1, r5
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	018b      	lsls	r3, r1, #6
 80037f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037f6:	0182      	lsls	r2, r0, #6
 80037f8:	1a12      	subs	r2, r2, r0
 80037fa:	eb63 0301 	sbc.w	r3, r3, r1
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	00d9      	lsls	r1, r3, #3
 8003808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380c:	00d0      	lsls	r0, r2, #3
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	1912      	adds	r2, r2, r4
 8003814:	eb45 0303 	adc.w	r3, r5, r3
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0299      	lsls	r1, r3, #10
 8003822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003826:	0290      	lsls	r0, r2, #10
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f7fc fd32 	bl	80002a0 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	60bb      	str	r3, [r7, #8]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003862:	60bb      	str	r3, [r7, #8]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	0801b7c8 	.word	0x0801b7c8

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffdc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0b5b      	lsrs	r3, r3, #13
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	0801b7c8 	.word	0x0801b7c8

080038e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	220f      	movs	r2, #15
 80038f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_GetClockConfig+0x5c>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCC_GetClockConfig+0x5c>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_GetClockConfig+0x5c>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_GetClockConfig+0x5c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCC_GetClockConfig+0x60>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40023c00 	.word	0x40023c00

0800394c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e041      	b.n	80039e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f839 	bl	80039ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f000 f9d8 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e04e      	b.n	8003ab6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d01d      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d111      	bne.n	8003aa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d010      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e007      	b.n	8003ab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40010400 	.word	0x40010400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40001800 	.word	0x40001800

08003ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0202 	mvn.w	r2, #2
 8003b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8ee 	bl	8003d04 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8e0 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8f1 	bl	8003d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0204 	mvn.w	r2, #4
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8c4 	bl	8003d04 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8b6 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8c7 	bl	8003d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0208 	mvn.w	r2, #8
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f89a 	bl	8003d04 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f88c 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f89d 	bl	8003d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0210 	mvn.w	r2, #16
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f870 	bl	8003d04 <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f862 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f873 	bl	8003d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0201 	mvn.w	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc fea6 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f902 	bl	8003e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f838 	bl	8003d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0220 	mvn.w	r2, #32
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f8cc 	bl	8003e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d00f      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <TIM_Base_SetConfig+0x118>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <TIM_Base_SetConfig+0x11c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <TIM_Base_SetConfig+0x120>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3a      	ldr	r2, [pc, #232]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d108      	bne.n	8003d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d027      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <TIM_Base_SetConfig+0x118>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d023      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <TIM_Base_SetConfig+0x11c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <TIM_Base_SetConfig+0x120>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d017      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <TIM_Base_SetConfig+0x128>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <TIM_Base_SetConfig+0x12c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00f      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <TIM_Base_SetConfig+0x130>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <TIM_Base_SetConfig+0x134>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <TIM_Base_SetConfig+0x138>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <TIM_Base_SetConfig+0x13c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0xf8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800
 8003e74:	40001800 	.word	0x40001800
 8003e78:	40001c00 	.word	0x40001c00
 8003e7c:	40002000 	.word	0x40002000

08003e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03f      	b.n	8003f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fdce 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fc71 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0ba      	sub	sp, #232	; 0xe8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_UART_IRQHandler+0x66>
 8003f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb5b 	bl	800465e <UART_Receive_IT>
      return;
 8003fa8:	e256      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80de 	beq.w	8004170 <HAL_UART_IRQHandler+0x22c>
 8003fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80d1 	beq.w	8004170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_UART_IRQHandler+0xae>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_UART_IRQHandler+0xd2>
 8003ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_UART_IRQHandler+0xf6>
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d011      	beq.n	800406a <HAL_UART_IRQHandler+0x126>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0208 	orr.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 81ed 	beq.w	800444e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_UART_IRQHandler+0x14e>
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fae6 	bl	800465e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_UART_IRQHandler+0x17a>
 80040b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d04f      	beq.n	800415e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f9ee 	bl	80044a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d141      	bne.n	8004156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800410a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1d9      	bne.n	80040d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d013      	beq.n	800414e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	4a7d      	ldr	r2, [pc, #500]	; (8004320 <HAL_UART_IRQHandler+0x3dc>)
 800412c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd fb32 	bl	800179c <HAL_DMA_Abort_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00e      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f990 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e00a      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f98c 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	e006      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f988 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800416a:	e170      	b.n	800444e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	bf00      	nop
    return;
 800416e:	e16e      	b.n	800444e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 814a 	bne.w	800440e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8143 	beq.w	800440e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 813c 	beq.w	800440e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	f040 80b4 	bne.w	8004324 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8140 	beq.w	8004452 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041da:	429a      	cmp	r2, r3
 80041dc:	f080 8139 	bcs.w	8004452 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	f000 8088 	beq.w	8004306 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800420c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800422e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800423a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1d9      	bne.n	80041f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800426a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800426e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e1      	bne.n	8004242 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800428e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e3      	bne.n	800427e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e3      	bne.n	80042c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd f9db 	bl	80016bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800430e:	b29b      	uxth	r3, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	b29b      	uxth	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8b6 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800431c:	e099      	b.n	8004452 <HAL_UART_IRQHandler+0x50e>
 800431e:	bf00      	nop
 8004320:	08004567 	.word	0x08004567
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 808b 	beq.w	8004456 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8086 	beq.w	8004456 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800436e:	647a      	str	r2, [r7, #68]	; 0x44
 8004370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e3      	bne.n	800434a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	623b      	str	r3, [r7, #32]
   return(result);
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043a6:	633a      	str	r2, [r7, #48]	; 0x30
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e3      	bne.n	8004382 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0310 	bic.w	r3, r3, #16
 80043de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043ec:	61fa      	str	r2, [r7, #28]
 80043ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	617b      	str	r3, [r7, #20]
   return(result);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e3      	bne.n	80043c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f83e 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800440c:	e023      	b.n	8004456 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_UART_IRQHandler+0x4ea>
 800441a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8b1 	bl	800458e <UART_Transmit_IT>
    return;
 800442c:	e014      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <HAL_UART_IRQHandler+0x514>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8f1 	bl	800462e <UART_EndTransmit_IT>
    return;
 800444c:	e004      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
    return;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
      return;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
      return;
 8004456:	bf00      	nop
  }
}
 8004458:	37e8      	adds	r7, #232	; 0xe8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b095      	sub	sp, #84	; 0x54
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c8:	643a      	str	r2, [r7, #64]	; 0x40
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d119      	bne.n	800454c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	647b      	str	r3, [r7, #68]	; 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004538:	61ba      	str	r2, [r7, #24]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
}
 800455a:	bf00      	nop
 800455c:	3754      	adds	r7, #84	; 0x54
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff77 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b21      	cmp	r3, #33	; 0x21
 80045a0:	d13e      	bne.n	8004620 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d114      	bne.n	80045d6 <UART_Transmit_IT+0x48>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d110      	bne.n	80045d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	1c9a      	adds	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	e008      	b.n	80045e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6211      	str	r1, [r2, #32]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10f      	bne.n	800461c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff06 	bl	8004460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08c      	sub	sp, #48	; 0x30
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b22      	cmp	r3, #34	; 0x22
 8004670:	f040 80ab 	bne.w	80047ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d117      	bne.n	80046ae <UART_Receive_IT+0x50>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d113      	bne.n	80046ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	b29a      	uxth	r2, r3
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28
 80046ac:	e026      	b.n	80046fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d007      	beq.n	80046d2 <UART_Receive_IT+0x74>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x82>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e008      	b.n	80046f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29b      	uxth	r3, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4619      	mov	r1, r3
 800470a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800470c:	2b00      	cmp	r3, #0
 800470e:	d15a      	bne.n	80047c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0220 	bic.w	r2, r2, #32
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d135      	bne.n	80047bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 0310 	bic.w	r3, r3, #16
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	623a      	str	r2, [r7, #32]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	61bb      	str	r3, [r7, #24]
   return(result);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d10a      	bne.n	80047ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe67 	bl	8004488 <HAL_UARTEx_RxEventCallback>
 80047ba:	e002      	b.n	80047c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fb feeb 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e002      	b.n	80047cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3730      	adds	r7, #48	; 0x30
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	b09f      	sub	sp, #124	; 0x7c
 80047da:	af00      	add	r7, sp, #0
 80047dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	68d9      	ldr	r1, [r3, #12]
 80047ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	ea40 0301 	orr.w	r3, r0, r1
 80047f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	431a      	orrs	r2, r3
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004818:	f021 010c 	bic.w	r1, r1, #12
 800481c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004822:	430b      	orrs	r3, r1
 8004824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	ea40 0301 	orr.w	r3, r0, r1
 800483c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4bc5      	ldr	r3, [pc, #788]	; (8004b58 <UART_SetConfig+0x384>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d004      	beq.n	8004852 <UART_SetConfig+0x7e>
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4bc3      	ldr	r3, [pc, #780]	; (8004b5c <UART_SetConfig+0x388>)
 800484e:	429a      	cmp	r2, r3
 8004850:	d103      	bne.n	800485a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004852:	f7ff f835 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8004856:	6778      	str	r0, [r7, #116]	; 0x74
 8004858:	e002      	b.n	8004860 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7ff f81d 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 800485e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004868:	f040 80b6 	bne.w	80049d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800486c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486e:	461c      	mov	r4, r3
 8004870:	f04f 0500 	mov.w	r5, #0
 8004874:	4622      	mov	r2, r4
 8004876:	462b      	mov	r3, r5
 8004878:	1891      	adds	r1, r2, r2
 800487a:	6439      	str	r1, [r7, #64]	; 0x40
 800487c:	415b      	adcs	r3, r3
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
 8004880:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004884:	1912      	adds	r2, r2, r4
 8004886:	eb45 0303 	adc.w	r3, r5, r3
 800488a:	f04f 0000 	mov.w	r0, #0
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	00d9      	lsls	r1, r3, #3
 8004894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004898:	00d0      	lsls	r0, r2, #3
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	1911      	adds	r1, r2, r4
 80048a0:	6639      	str	r1, [r7, #96]	; 0x60
 80048a2:	416b      	adcs	r3, r5
 80048a4:	667b      	str	r3, [r7, #100]	; 0x64
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b4:	415b      	adcs	r3, r3
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048c0:	f7fb fcee 	bl	80002a0 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4ba5      	ldr	r3, [pc, #660]	; (8004b60 <UART_SetConfig+0x38c>)
 80048ca:	fba3 2302 	umull	r2, r3, r3, r2
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	011e      	lsls	r6, r3, #4
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	461c      	mov	r4, r3
 80048d6:	f04f 0500 	mov.w	r5, #0
 80048da:	4622      	mov	r2, r4
 80048dc:	462b      	mov	r3, r5
 80048de:	1891      	adds	r1, r2, r2
 80048e0:	6339      	str	r1, [r7, #48]	; 0x30
 80048e2:	415b      	adcs	r3, r3
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
 80048e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048ea:	1912      	adds	r2, r2, r4
 80048ec:	eb45 0303 	adc.w	r3, r5, r3
 80048f0:	f04f 0000 	mov.w	r0, #0
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	00d9      	lsls	r1, r3, #3
 80048fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048fe:	00d0      	lsls	r0, r2, #3
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	1911      	adds	r1, r2, r4
 8004906:	65b9      	str	r1, [r7, #88]	; 0x58
 8004908:	416b      	adcs	r3, r5
 800490a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	461a      	mov	r2, r3
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	1891      	adds	r1, r2, r2
 8004918:	62b9      	str	r1, [r7, #40]	; 0x28
 800491a:	415b      	adcs	r3, r3
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004922:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004926:	f7fb fcbb 	bl	80002a0 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <UART_SetConfig+0x38c>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	; 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	3332      	adds	r3, #50	; 0x32
 8004942:	4a87      	ldr	r2, [pc, #540]	; (8004b60 <UART_SetConfig+0x38c>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004950:	441e      	add	r6, r3
 8004952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004954:	4618      	mov	r0, r3
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	1894      	adds	r4, r2, r2
 8004960:	623c      	str	r4, [r7, #32]
 8004962:	415b      	adcs	r3, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496a:	1812      	adds	r2, r2, r0
 800496c:	eb41 0303 	adc.w	r3, r1, r3
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	f04f 0500 	mov.w	r5, #0
 8004978:	00dd      	lsls	r5, r3, #3
 800497a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800497e:	00d4      	lsls	r4, r2, #3
 8004980:	4622      	mov	r2, r4
 8004982:	462b      	mov	r3, r5
 8004984:	1814      	adds	r4, r2, r0
 8004986:	653c      	str	r4, [r7, #80]	; 0x50
 8004988:	414b      	adcs	r3, r1
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	461a      	mov	r2, r3
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	1891      	adds	r1, r2, r2
 8004998:	61b9      	str	r1, [r7, #24]
 800499a:	415b      	adcs	r3, r3
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049a6:	f7fb fc7b 	bl	80002a0 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b6c      	ldr	r3, [pc, #432]	; (8004b60 <UART_SetConfig+0x38c>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	; 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <UART_SetConfig+0x38c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4432      	add	r2, r6
 80049d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d6:	e0b9      	b.n	8004b4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049da:	461c      	mov	r4, r3
 80049dc:	f04f 0500 	mov.w	r5, #0
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	6139      	str	r1, [r7, #16]
 80049e8:	415b      	adcs	r3, r3
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049f0:	1912      	adds	r2, r2, r4
 80049f2:	eb45 0303 	adc.w	r3, r5, r3
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	00d9      	lsls	r1, r3, #3
 8004a00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a04:	00d0      	lsls	r0, r2, #3
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	eb12 0804 	adds.w	r8, r2, r4
 8004a0e:	eb43 0905 	adc.w	r9, r3, r5
 8004a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a2a:	0082      	lsls	r2, r0, #2
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fb fc36 	bl	80002a0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <UART_SetConfig+0x38c>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011e      	lsls	r6, r3, #4
 8004a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a44:	4618      	mov	r0, r3
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	1894      	adds	r4, r2, r2
 8004a50:	60bc      	str	r4, [r7, #8]
 8004a52:	415b      	adcs	r3, r3
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a5a:	1812      	adds	r2, r2, r0
 8004a5c:	eb41 0303 	adc.w	r3, r1, r3
 8004a60:	f04f 0400 	mov.w	r4, #0
 8004a64:	f04f 0500 	mov.w	r5, #0
 8004a68:	00dd      	lsls	r5, r3, #3
 8004a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a6e:	00d4      	lsls	r4, r2, #3
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	1814      	adds	r4, r2, r0
 8004a76:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a78:	414b      	adcs	r3, r1
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	008b      	lsls	r3, r1, #2
 8004a90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a94:	0082      	lsls	r2, r0, #2
 8004a96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a9a:	f7fb fc01 	bl	80002a0 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <UART_SetConfig+0x38c>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <UART_SetConfig+0x38c>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac2:	441e      	add	r6, r3
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	1894      	adds	r4, r2, r2
 8004ad2:	603c      	str	r4, [r7, #0]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004adc:	1812      	adds	r2, r2, r0
 8004ade:	eb41 0303 	adc.w	r3, r1, r3
 8004ae2:	f04f 0400 	mov.w	r4, #0
 8004ae6:	f04f 0500 	mov.w	r5, #0
 8004aea:	00dd      	lsls	r5, r3, #3
 8004aec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004af0:	00d4      	lsls	r4, r2, #3
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	eb12 0a00 	adds.w	sl, r2, r0
 8004afa:	eb43 0b01 	adc.w	fp, r3, r1
 8004afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	008b      	lsls	r3, r1, #2
 8004b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b16:	0082      	lsls	r2, r0, #2
 8004b18:	4650      	mov	r0, sl
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	f7fb fbc0 	bl	80002a0 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <UART_SetConfig+0x38c>)
 8004b26:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2164      	movs	r1, #100	; 0x64
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	3332      	adds	r3, #50	; 0x32
 8004b38:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <UART_SetConfig+0x38c>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	f003 020f 	and.w	r2, r3, #15
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4432      	add	r2, r6
 8004b4a:	609a      	str	r2, [r3, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	377c      	adds	r7, #124	; 0x7c
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	51eb851f 	.word	0x51eb851f

08004b64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8004b6a:	4ba0      	ldr	r3, [pc, #640]	; (8004dec <MX_LWIP_Init+0x288>)
 8004b6c:	22a9      	movs	r2, #169	; 0xa9
 8004b6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <MX_LWIP_Init+0x288>)
 8004b72:	22fe      	movs	r2, #254	; 0xfe
 8004b74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 84;
 8004b76:	4b9d      	ldr	r3, [pc, #628]	; (8004dec <MX_LWIP_Init+0x288>)
 8004b78:	2254      	movs	r2, #84	; 0x54
 8004b7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 58;
 8004b7c:	4b9b      	ldr	r3, [pc, #620]	; (8004dec <MX_LWIP_Init+0x288>)
 8004b7e:	223a      	movs	r2, #58	; 0x3a
 8004b80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004b82:	4b9b      	ldr	r3, [pc, #620]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004b84:	22ff      	movs	r2, #255	; 0xff
 8004b86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004b88:	4b99      	ldr	r3, [pc, #612]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004b8e:	4b98      	ldr	r3, [pc, #608]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004b94:	4b96      	ldr	r3, [pc, #600]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8004b9a:	4b96      	ldr	r3, [pc, #600]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004b9c:	22a9      	movs	r2, #169	; 0xa9
 8004b9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8004ba0:	4b94      	ldr	r3, [pc, #592]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004ba2:	22fe      	movs	r2, #254	; 0xfe
 8004ba4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 84;
 8004ba6:	4b93      	ldr	r3, [pc, #588]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004ba8:	2254      	movs	r2, #84	; 0x54
 8004baa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 58;
 8004bac:	4b91      	ldr	r3, [pc, #580]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004bae:	223a      	movs	r2, #58	; 0x3a
 8004bb0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f006 fe29 	bl	800b80c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004bba:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	061a      	lsls	r2, r3, #24
 8004bc0:	4b8a      	ldr	r3, [pc, #552]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	4b88      	ldr	r3, [pc, #544]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	4a86      	ldr	r2, [pc, #536]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bd2:	78d2      	ldrb	r2, [r2, #3]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	061a      	lsls	r2, r3, #24
 8004bd8:	4b84      	ldr	r3, [pc, #528]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	0619      	lsls	r1, r3, #24
 8004bde:	4b83      	ldr	r3, [pc, #524]	; (8004dec <MX_LWIP_Init+0x288>)
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	4319      	orrs	r1, r3
 8004be6:	4b81      	ldr	r3, [pc, #516]	; (8004dec <MX_LWIP_Init+0x288>)
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	430b      	orrs	r3, r1
 8004bee:	497f      	ldr	r1, [pc, #508]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bf0:	78c9      	ldrb	r1, [r1, #3]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <MX_LWIP_Init+0x288>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	0619      	lsls	r1, r3, #24
 8004c02:	4b7a      	ldr	r3, [pc, #488]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	4319      	orrs	r1, r3
 8004c0a:	4b78      	ldr	r3, [pc, #480]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c0c:	789b      	ldrb	r3, [r3, #2]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	430b      	orrs	r3, r1
 8004c12:	4976      	ldr	r1, [pc, #472]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c14:	78c9      	ldrb	r1, [r1, #3]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	4b72      	ldr	r3, [pc, #456]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	0619      	lsls	r1, r3, #24
 8004c26:	4b71      	ldr	r3, [pc, #452]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	4319      	orrs	r1, r3
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c30:	789b      	ldrb	r3, [r3, #2]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	430b      	orrs	r3, r1
 8004c36:	496d      	ldr	r1, [pc, #436]	; (8004dec <MX_LWIP_Init+0x288>)
 8004c38:	78c9      	ldrb	r1, [r1, #3]
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	4a6d      	ldr	r2, [pc, #436]	; (8004df8 <MX_LWIP_Init+0x294>)
 8004c42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	061a      	lsls	r2, r3, #24
 8004c4a:	4b69      	ldr	r3, [pc, #420]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	4a65      	ldr	r2, [pc, #404]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c5c:	78d2      	ldrb	r2, [r2, #3]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	061a      	lsls	r2, r3, #24
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	0619      	lsls	r1, r3, #24
 8004c68:	4b61      	ldr	r3, [pc, #388]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	4319      	orrs	r1, r3
 8004c70:	4b5f      	ldr	r3, [pc, #380]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c72:	789b      	ldrb	r3, [r3, #2]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	430b      	orrs	r3, r1
 8004c78:	495d      	ldr	r1, [pc, #372]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c7a:	78c9      	ldrb	r1, [r1, #3]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c84:	431a      	orrs	r2, r3
 8004c86:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	0619      	lsls	r1, r3, #24
 8004c8c:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	4319      	orrs	r1, r3
 8004c94:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c96:	789b      	ldrb	r3, [r3, #2]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4954      	ldr	r1, [pc, #336]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004c9e:	78c9      	ldrb	r1, [r1, #3]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	0619      	lsls	r1, r3, #24
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	4319      	orrs	r1, r3
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004cba:	789b      	ldrb	r3, [r3, #2]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	494b      	ldr	r1, [pc, #300]	; (8004df0 <MX_LWIP_Init+0x28c>)
 8004cc2:	78c9      	ldrb	r1, [r1, #3]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	0e1b      	lsrs	r3, r3, #24
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	4a4c      	ldr	r2, [pc, #304]	; (8004dfc <MX_LWIP_Init+0x298>)
 8004ccc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	061a      	lsls	r2, r3, #24
 8004cd4:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cde:	789b      	ldrb	r3, [r3, #2]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	4a43      	ldr	r2, [pc, #268]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004ce6:	78d2      	ldrb	r2, [r2, #3]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	061a      	lsls	r2, r3, #24
 8004cec:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	0619      	lsls	r1, r3, #24
 8004cf2:	4b40      	ldr	r3, [pc, #256]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cf4:	785b      	ldrb	r3, [r3, #1]
 8004cf6:	041b      	lsls	r3, r3, #16
 8004cf8:	4319      	orrs	r1, r3
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004cfc:	789b      	ldrb	r3, [r3, #2]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	430b      	orrs	r3, r1
 8004d02:	493c      	ldr	r1, [pc, #240]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d04:	78c9      	ldrb	r1, [r1, #3]
 8004d06:	430b      	orrs	r3, r1
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	0619      	lsls	r1, r3, #24
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	4319      	orrs	r1, r3
 8004d1e:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d20:	789b      	ldrb	r3, [r3, #2]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	430b      	orrs	r3, r1
 8004d26:	4933      	ldr	r1, [pc, #204]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d28:	78c9      	ldrb	r1, [r1, #3]
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d32:	431a      	orrs	r2, r3
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	0619      	lsls	r1, r3, #24
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	4319      	orrs	r1, r3
 8004d42:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d44:	789b      	ldrb	r3, [r3, #2]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	492a      	ldr	r1, [pc, #168]	; (8004df4 <MX_LWIP_Init+0x290>)
 8004d4c:	78c9      	ldrb	r1, [r1, #3]
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	0e1b      	lsrs	r3, r3, #24
 8004d52:	4313      	orrs	r3, r2
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <MX_LWIP_Init+0x29c>)
 8004d56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <MX_LWIP_Init+0x2a0>)
 8004d5a:	9302      	str	r3, [sp, #8]
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <MX_LWIP_Init+0x2a4>)
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <MX_LWIP_Init+0x29c>)
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <MX_LWIP_Init+0x298>)
 8004d68:	4923      	ldr	r1, [pc, #140]	; (8004df8 <MX_LWIP_Init+0x294>)
 8004d6a:	4828      	ldr	r0, [pc, #160]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d6c:	f007 fad2 	bl	800c314 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004d70:	4826      	ldr	r0, [pc, #152]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d72:	f007 fc81 	bl	800c678 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004d76:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004d88:	4820      	ldr	r0, [pc, #128]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d8a:	f007 fc85 	bl	800c698 <netif_set_up>
 8004d8e:	e002      	b.n	8004d96 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004d90:	481e      	ldr	r0, [pc, #120]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d92:	f007 fced 	bl	800c770 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004d96:	491e      	ldr	r1, [pc, #120]	; (8004e10 <MX_LWIP_Init+0x2ac>)
 8004d98:	481c      	ldr	r0, [pc, #112]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004d9a:	f007 fd7f 	bl	800c89c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2101      	movs	r1, #1
 8004da2:	2001      	movs	r0, #1
 8004da4:	f000 feca 	bl	8005b3c <osSemaphoreNew>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <MX_LWIP_Init+0x2b0>)
 8004dac:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <MX_LWIP_Init+0x2b4>)
 8004db0:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <MX_LWIP_Init+0x2a8>)
 8004db2:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <MX_LWIP_Init+0x2b0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <MX_LWIP_Init+0x2b4>)
 8004dba:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004dbc:	2224      	movs	r2, #36	; 0x24
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4816      	ldr	r0, [pc, #88]	; (8004e1c <MX_LWIP_Init+0x2b8>)
 8004dc2:	f012 f86b 	bl	8016e9c <memset>
  attributes.name = "LinkThr";
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <MX_LWIP_Init+0x2b8>)
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <MX_LWIP_Init+0x2bc>)
 8004dca:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <MX_LWIP_Init+0x2b8>)
 8004dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <MX_LWIP_Init+0x2b8>)
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <MX_LWIP_Init+0x2b8>)
 8004ddc:	490e      	ldr	r1, [pc, #56]	; (8004e18 <MX_LWIP_Init+0x2b4>)
 8004dde:	4811      	ldr	r0, [pc, #68]	; (8004e24 <MX_LWIP_Init+0x2c0>)
 8004de0:	f000 fcf1 	bl	80057c6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200057b4 	.word	0x200057b4
 8004df0:	200057b0 	.word	0x200057b0
 8004df4:	20005750 	.word	0x20005750
 8004df8:	200057ac 	.word	0x200057ac
 8004dfc:	200057b8 	.word	0x200057b8
 8004e00:	200057bc 	.word	0x200057bc
 8004e04:	0800b71d 	.word	0x0800b71d
 8004e08:	08005491 	.word	0x08005491
 8004e0c:	20005778 	.word	0x20005778
 8004e10:	08005575 	.word	0x08005575
 8004e14:	200000b0 	.word	0x200000b0
 8004e18:	20005748 	.word	0x20005748
 8004e1c:	20005754 	.word	0x20005754
 8004e20:	080181a0 	.word	0x080181a0
 8004e24:	080054fd 	.word	0x080054fd

08004e28 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08e      	sub	sp, #56	; 0x38
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a59      	ldr	r2, [pc, #356]	; (8004fac <HAL_ETH_MspInit+0x184>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f040 80ac 	bne.w	8004fa4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	4b57      	ldr	r3, [pc, #348]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	4a56      	ldr	r2, [pc, #344]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5c:	4b54      	ldr	r3, [pc, #336]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e76:	6313      	str	r3, [r2, #48]	; 0x30
 8004e78:	4b4d      	ldr	r3, [pc, #308]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	4a48      	ldr	r2, [pc, #288]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e92:	6313      	str	r3, [r2, #48]	; 0x30
 8004e94:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	4b42      	ldr	r3, [pc, #264]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	4a41      	ldr	r2, [pc, #260]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb0:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	4a3a      	ldr	r2, [pc, #232]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6313      	str	r3, [r2, #48]	; 0x30
 8004ecc:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004ee2:	f043 0302 	orr.w	r3, r3, #2
 8004ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4a2c      	ldr	r2, [pc, #176]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f02:	6313      	str	r3, [r2, #48]	; 0x30
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_ETH_MspInit+0x188>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004f10:	2332      	movs	r3, #50	; 0x32
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f14:	2302      	movs	r3, #2
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f20:	230b      	movs	r3, #11
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4822      	ldr	r0, [pc, #136]	; (8004fb4 <HAL_ETH_MspInit+0x18c>)
 8004f2c:	f7fd fdfe 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004f30:	2386      	movs	r3, #134	; 0x86
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f40:	230b      	movs	r3, #11
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f48:	4619      	mov	r1, r3
 8004f4a:	481b      	ldr	r0, [pc, #108]	; (8004fb8 <HAL_ETH_MspInit+0x190>)
 8004f4c:	f7fd fdee 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f62:	230b      	movs	r3, #11
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4813      	ldr	r0, [pc, #76]	; (8004fbc <HAL_ETH_MspInit+0x194>)
 8004f6e:	f7fd fddd 	bl	8002b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004f72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f80:	2303      	movs	r3, #3
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f84:	230b      	movs	r3, #11
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	480c      	ldr	r0, [pc, #48]	; (8004fc0 <HAL_ETH_MspInit+0x198>)
 8004f90:	f7fd fdcc 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2105      	movs	r1, #5
 8004f98:	203d      	movs	r0, #61	; 0x3d
 8004f9a:	f7fc fb65 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f9e:	203d      	movs	r0, #61	; 0x3d
 8004fa0:	f7fc fb7e 	bl	80016a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	3738      	adds	r7, #56	; 0x38
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40028000 	.word	0x40028000
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	40020400 	.word	0x40020400
 8004fc0:	40021800 	.word	0x40021800

08004fc4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <HAL_ETH_RxCpltCallback+0x1c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fe8f 	bl	8005cf4 <osSemaphoreRelease>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200000b4 	.word	0x200000b4

08004fe4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b090      	sub	sp, #64	; 0x40
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ff0:	4b5d      	ldr	r3, [pc, #372]	; (8005168 <low_level_init+0x184>)
 8004ff2:	4a5e      	ldr	r2, [pc, #376]	; (800516c <low_level_init+0x188>)
 8004ff4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004ff6:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <low_level_init+0x184>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004ffc:	4b5a      	ldr	r3, [pc, #360]	; (8005168 <low_level_init+0x184>)
 8004ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005002:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005004:	4b58      	ldr	r3, [pc, #352]	; (8005168 <low_level_init+0x184>)
 8005006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800500a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800500c:	4b56      	ldr	r3, [pc, #344]	; (8005168 <low_level_init+0x184>)
 800500e:	2200      	movs	r2, #0
 8005010:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005012:	2300      	movs	r3, #0
 8005014:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800501a:	23e1      	movs	r3, #225	; 0xe1
 800501c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005022:	2300      	movs	r3, #0
 8005024:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005026:	2300      	movs	r3, #0
 8005028:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800502a:	4a4f      	ldr	r2, [pc, #316]	; (8005168 <low_level_init+0x184>)
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005032:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <low_level_init+0x184>)
 8005034:	2201      	movs	r2, #1
 8005036:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <low_level_init+0x184>)
 800503a:	2200      	movs	r2, #0
 800503c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <low_level_init+0x184>)
 8005040:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005044:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005046:	4848      	ldr	r0, [pc, #288]	; (8005168 <low_level_init+0x184>)
 8005048:	f7fc fbca 	bl	80017e0 <HAL_ETH_Init>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800506c:	2304      	movs	r3, #4
 800506e:	4a40      	ldr	r2, [pc, #256]	; (8005170 <low_level_init+0x18c>)
 8005070:	4940      	ldr	r1, [pc, #256]	; (8005174 <low_level_init+0x190>)
 8005072:	483d      	ldr	r0, [pc, #244]	; (8005168 <low_level_init+0x184>)
 8005074:	f7fc fd50 	bl	8001b18 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005078:	2304      	movs	r3, #4
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <low_level_init+0x194>)
 800507c:	493f      	ldr	r1, [pc, #252]	; (800517c <low_level_init+0x198>)
 800507e:	483a      	ldr	r0, [pc, #232]	; (8005168 <low_level_init+0x184>)
 8005080:	f7fc fdb3 	bl	8001bea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2206      	movs	r2, #6
 8005088:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <low_level_init+0x184>)
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005098:	4b33      	ldr	r3, [pc, #204]	; (8005168 <low_level_init+0x184>)
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	785a      	ldrb	r2, [r3, #1]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <low_level_init+0x184>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	789a      	ldrb	r2, [r3, #2]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <low_level_init+0x184>)
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	78da      	ldrb	r2, [r3, #3]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050bc:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <low_level_init+0x184>)
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	791a      	ldrb	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <low_level_init+0x184>)
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	795a      	ldrb	r2, [r3, #5]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050da:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050e2:	f043 030a 	orr.w	r3, r3, #10
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2101      	movs	r1, #1
 80050f2:	2001      	movs	r0, #1
 80050f4:	f000 fd22 	bl	8005b3c <osSemaphoreNew>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a21      	ldr	r2, [pc, #132]	; (8005180 <low_level_init+0x19c>)
 80050fc:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80050fe:	f107 0314 	add.w	r3, r7, #20
 8005102:	2224      	movs	r2, #36	; 0x24
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f011 fec8 	bl	8016e9c <memset>
  attributes.name = "EthIf";
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <low_level_init+0x1a0>)
 800510e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005110:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005116:	2330      	movs	r3, #48	; 0x30
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800511a:	f107 0314 	add.w	r3, r7, #20
 800511e:	461a      	mov	r2, r3
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4819      	ldr	r0, [pc, #100]	; (8005188 <low_level_init+0x1a4>)
 8005124:	f000 fb4f 	bl	80057c6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005128:	480f      	ldr	r0, [pc, #60]	; (8005168 <low_level_init+0x184>)
 800512a:	f7fd f886 	bl	800223a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800512e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005132:	461a      	mov	r2, r3
 8005134:	211d      	movs	r1, #29
 8005136:	480c      	ldr	r0, [pc, #48]	; (8005168 <low_level_init+0x184>)
 8005138:	f7fc ffb1 	bl	800209e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	f043 030b 	orr.w	r3, r3, #11
 8005142:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	461a      	mov	r2, r3
 8005148:	211d      	movs	r1, #29
 800514a:	4807      	ldr	r0, [pc, #28]	; (8005168 <low_level_init+0x184>)
 800514c:	f7fd f80f 	bl	800216e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005150:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005154:	461a      	mov	r2, r3
 8005156:	211d      	movs	r1, #29
 8005158:	4803      	ldr	r0, [pc, #12]	; (8005168 <low_level_init+0x184>)
 800515a:	f7fc ffa0 	bl	800209e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800515e:	bf00      	nop
 8005160:	3740      	adds	r7, #64	; 0x40
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20007090 	.word	0x20007090
 800516c:	40028000 	.word	0x40028000
 8005170:	200070d8 	.word	0x200070d8
 8005174:	200057c0 	.word	0x200057c0
 8005178:	20005840 	.word	0x20005840
 800517c:	20007010 	.word	0x20007010
 8005180:	200000b4 	.word	0x200000b4
 8005184:	080181a8 	.word	0x080181a8
 8005188:	08005431 	.word	0x08005431

0800518c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005196:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <low_level_output+0x138>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80051ae:	4b45      	ldr	r3, [pc, #276]	; (80052c4 <low_level_output+0x138>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	e05a      	b.n	8005274 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da03      	bge.n	80051ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80051c6:	23f8      	movs	r3, #248	; 0xf8
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80051cc:	e05c      	b.n	8005288 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	895b      	ldrh	r3, [r3, #10]
 80051d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051d8:	e02f      	b.n	800523a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	18d0      	adds	r0, r2, r3
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	18d1      	adds	r1, r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80051ee:	3304      	adds	r3, #4
 80051f0:	461a      	mov	r2, r3
 80051f2:	f011 fe2b 	bl	8016e4c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da03      	bge.n	800520c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005204:	23f8      	movs	r3, #248	; 0xf8
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800520a:	e03d      	b.n	8005288 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800521c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005228:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005234:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005244:	4293      	cmp	r3, r2
 8005246:	d8c8      	bhi.n	80051da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	18d0      	adds	r0, r2, r3
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4413      	add	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4619      	mov	r1, r3
 800525a:	f011 fdf7 	bl	8016e4c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1a1      	bne.n	80051be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	4811      	ldr	r0, [pc, #68]	; (80052c4 <low_level_output+0x138>)
 800527e:	f7fc fd21 	bl	8001cc4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <low_level_output+0x138>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	3314      	adds	r3, #20
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <low_level_output+0x138>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a4:	3314      	adds	r3, #20
 80052a6:	2220      	movs	r2, #32
 80052a8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <low_level_output+0x138>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b2:	3304      	adds	r3, #4
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80052b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20007090 	.word	0x20007090

080052c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	; 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80052ec:	484f      	ldr	r0, [pc, #316]	; (800542c <low_level_input+0x164>)
 80052ee:	f7fc fdd3 	bl	8001e98 <HAL_ETH_GetReceivedFrame_IT>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <low_level_input+0x34>

    return NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e092      	b.n	8005422 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <low_level_input+0x164>)
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <low_level_input+0x164>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800530e:	89fb      	ldrh	r3, [r7, #14]
 8005310:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005314:	4619      	mov	r1, r3
 8005316:	2000      	movs	r0, #0
 8005318:	f007 fb8a 	bl	800ca30 <pbuf_alloc>
 800531c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d04b      	beq.n	80053bc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005324:	4b41      	ldr	r3, [pc, #260]	; (800542c <low_level_input+0x164>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
 8005332:	e040      	b.n	80053b6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	895b      	ldrh	r3, [r3, #10]
 8005338:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800533e:	e021      	b.n	8005384 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	18d0      	adds	r0, r2, r3
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	18d1      	adds	r1, r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005354:	3304      	adds	r3, #4
 8005356:	461a      	mov	r2, r3
 8005358:	f011 fd78 	bl	8016e4c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005372:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800537e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800538e:	4293      	cmp	r3, r2
 8005390:	d8d6      	bhi.n	8005340 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	18d0      	adds	r0, r2, r3
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4619      	mov	r1, r3
 80053a4:	f011 fd52 	bl	8016e4c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1bb      	bne.n	8005334 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <low_level_input+0x164>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	e00b      	b.n	80053e0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <low_level_input+0x164>)
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d3ee      	bcc.n	80053c8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <low_level_input+0x164>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <low_level_input+0x164>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f8:	3314      	adds	r3, #20
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <low_level_input+0x164>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540c:	3314      	adds	r3, #20
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <low_level_input+0x164>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	3308      	adds	r3, #8
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005422:	4618      	mov	r0, r3
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20007090 	.word	0x20007090

08005430 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800543c:	4b12      	ldr	r3, [pc, #72]	; (8005488 <ethernetif_input+0x58>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f04f 31ff 	mov.w	r1, #4294967295
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fc03 	bl	8005c50 <osSemaphoreAcquire>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f5      	bne.n	800543c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005450:	480e      	ldr	r0, [pc, #56]	; (800548c <ethernetif_input+0x5c>)
 8005452:	f011 fb6d 	bl	8016b30 <sys_mutex_lock>
        p = low_level_input( netif );
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff ff36 	bl	80052c8 <low_level_input>
 800545c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005474:	68b8      	ldr	r0, [r7, #8]
 8005476:	f007 fdc3 	bl	800d000 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800547a:	4804      	ldr	r0, [pc, #16]	; (800548c <ethernetif_input+0x5c>)
 800547c:	f011 fb67 	bl	8016b4e <sys_mutex_unlock>
      } while(p!=NULL);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e4      	bne.n	8005450 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005486:	e7d9      	b.n	800543c <ethernetif_input+0xc>
 8005488:	200000b4 	.word	0x200000b4
 800548c:	200088e8 	.word	0x200088e8

08005490 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <ethernetif_init+0x1c>
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <ethernetif_init+0x48>)
 80054a0:	f240 223b 	movw	r2, #571	; 0x23b
 80054a4:	490d      	ldr	r1, [pc, #52]	; (80054dc <ethernetif_init+0x4c>)
 80054a6:	480e      	ldr	r0, [pc, #56]	; (80054e0 <ethernetif_init+0x50>)
 80054a8:	f011 fdaa 	bl	8017000 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2273      	movs	r2, #115	; 0x73
 80054b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2274      	movs	r2, #116	; 0x74
 80054b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <ethernetif_init+0x54>)
 80054c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <ethernetif_init+0x58>)
 80054c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fd8b 	bl	8004fe4 <low_level_init>

  return ERR_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080181b0 	.word	0x080181b0
 80054dc:	080181cc 	.word	0x080181cc
 80054e0:	080181dc 	.word	0x080181dc
 80054e4:	0801493d 	.word	0x0801493d
 80054e8:	0800518d 	.word	0x0800518d

080054ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054f0:	f7fb ffd2 	bl	8001498 <HAL_GetTick>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	461a      	mov	r2, r3
 8005512:	2101      	movs	r1, #1
 8005514:	4816      	ldr	r0, [pc, #88]	; (8005570 <ethernetif_set_link+0x74>)
 8005516:	f7fc fdc2 	bl	800209e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d108      	bne.n	8005544 <ethernetif_set_link+0x48>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f007 f949 	bl	800c7d4 <netif_set_link_up>
 8005542:	e011      	b.n	8005568 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800554c:	089b      	lsrs	r3, r3, #2
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <ethernetif_set_link+0x6c>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f007 f96a 	bl	800c83c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005568:	20c8      	movs	r0, #200	; 0xc8
 800556a:	f000 f9be 	bl	80058ea <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800556e:	e7cd      	b.n	800550c <ethernetif_set_link+0x10>
 8005570:	20007090 	.word	0x20007090

08005574 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d05d      	beq.n	8005652 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005596:	4b34      	ldr	r3, [pc, #208]	; (8005668 <ethernetif_update_config+0xf4>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d03f      	beq.n	800561e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800559e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055a2:	2100      	movs	r1, #0
 80055a4:	4830      	ldr	r0, [pc, #192]	; (8005668 <ethernetif_update_config+0xf4>)
 80055a6:	f7fc fde2 	bl	800216e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80055aa:	f7fb ff75 	bl	8001498 <HAL_GetTick>
 80055ae:	4603      	mov	r3, r0
 80055b0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	461a      	mov	r2, r3
 80055b8:	2101      	movs	r1, #1
 80055ba:	482b      	ldr	r0, [pc, #172]	; (8005668 <ethernetif_update_config+0xf4>)
 80055bc:	f7fc fd6f 	bl	800209e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80055c0:	f7fb ff6a 	bl	8001498 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ce:	d828      	bhi.n	8005622 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0eb      	beq.n	80055b2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	461a      	mov	r2, r3
 80055e0:	2110      	movs	r1, #16
 80055e2:	4821      	ldr	r0, [pc, #132]	; (8005668 <ethernetif_update_config+0xf4>)
 80055e4:	f7fc fd5b 	bl	800209e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <ethernetif_update_config+0xf4>)
 80055f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	e002      	b.n	8005602 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <ethernetif_update_config+0xf4>)
 80055fe:	2200      	movs	r2, #0
 8005600:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800560c:	4b16      	ldr	r3, [pc, #88]	; (8005668 <ethernetif_update_config+0xf4>)
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	e016      	b.n	8005642 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <ethernetif_update_config+0xf4>)
 8005616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	e011      	b.n	8005642 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <ethernetif_update_config+0xb0>
          goto error;
 8005622:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <ethernetif_update_config+0xf4>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <ethernetif_update_config+0xf4>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005634:	4313      	orrs	r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	2100      	movs	r1, #0
 800563c:	480a      	ldr	r0, [pc, #40]	; (8005668 <ethernetif_update_config+0xf4>)
 800563e:	f7fc fd96 	bl	800216e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005642:	2100      	movs	r1, #0
 8005644:	4808      	ldr	r0, [pc, #32]	; (8005668 <ethernetif_update_config+0xf4>)
 8005646:	f7fc fe57 	bl	80022f8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800564a:	4807      	ldr	r0, [pc, #28]	; (8005668 <ethernetif_update_config+0xf4>)
 800564c:	f7fc fdf5 	bl	800223a <HAL_ETH_Start>
 8005650:	e002      	b.n	8005658 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005652:	4805      	ldr	r0, [pc, #20]	; (8005668 <ethernetif_update_config+0xf4>)
 8005654:	f7fc fe20 	bl	8002298 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f807 	bl	800566c <ethernetif_notify_conn_changed>
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20007090 	.word	0x20007090

0800566c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <__NVIC_SetPriority>:
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800568c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db0a      	blt.n	80056aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	490c      	ldr	r1, [pc, #48]	; (80056cc <__NVIC_SetPriority+0x4c>)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	0112      	lsls	r2, r2, #4
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	440b      	add	r3, r1
 80056a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056a8:	e00a      	b.n	80056c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	4908      	ldr	r1, [pc, #32]	; (80056d0 <__NVIC_SetPriority+0x50>)
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	3b04      	subs	r3, #4
 80056b8:	0112      	lsls	r2, r2, #4
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	440b      	add	r3, r1
 80056be:	761a      	strb	r2, [r3, #24]
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	e000e100 	.word	0xe000e100
 80056d0:	e000ed00 	.word	0xe000ed00

080056d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <SysTick_Handler+0x1c>)
 80056da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056dc:	f002 fd3a 	bl	8008154 <xTaskGetSchedulerState>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80056e6:	f003 fc1f 	bl	8008f28 <xPortSysTickHandler>
  }
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010

080056f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056f8:	2100      	movs	r1, #0
 80056fa:	f06f 0004 	mvn.w	r0, #4
 80056fe:	f7ff ffbf 	bl	8005680 <__NVIC_SetPriority>
#endif
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570e:	f3ef 8305 	mrs	r3, IPSR
 8005712:	603b      	str	r3, [r7, #0]
  return(result);
 8005714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800571a:	f06f 0305 	mvn.w	r3, #5
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	e00c      	b.n	800573c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <osKernelInitialize+0x44>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <osKernelInitialize+0x44>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005730:	2300      	movs	r3, #0
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	e002      	b.n	800573c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800573c:	687b      	ldr	r3, [r7, #4]
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	200000b8 	.word	0x200000b8

08005750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005756:	f3ef 8305 	mrs	r3, IPSR
 800575a:	603b      	str	r3, [r7, #0]
  return(result);
 800575c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005762:	f06f 0305 	mvn.w	r3, #5
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	e010      	b.n	800578c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <osKernelStart+0x48>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d109      	bne.n	8005786 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005772:	f7ff ffbf 	bl	80056f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005776:	4b08      	ldr	r3, [pc, #32]	; (8005798 <osKernelStart+0x48>)
 8005778:	2202      	movs	r2, #2
 800577a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800577c:	f002 f86c 	bl	8007858 <vTaskStartScheduler>
      stat = osOK;
 8005780:	2300      	movs	r3, #0
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e002      	b.n	800578c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800578c:	687b      	ldr	r3, [r7, #4]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	200000b8 	.word	0x200000b8

0800579c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a2:	f3ef 8305 	mrs	r3, IPSR
 80057a6:	603b      	str	r3, [r7, #0]
  return(result);
 80057a8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80057ae:	f002 f97f 	bl	8007ab0 <xTaskGetTickCountFromISR>
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	e002      	b.n	80057bc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80057b6:	f002 f96b 	bl	8007a90 <xTaskGetTickCount>
 80057ba:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80057bc:	687b      	ldr	r3, [r7, #4]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08e      	sub	sp, #56	; 0x38
 80057ca:	af04      	add	r7, sp, #16
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d6:	f3ef 8305 	mrs	r3, IPSR
 80057da:	617b      	str	r3, [r7, #20]
  return(result);
 80057dc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d17e      	bne.n	80058e0 <osThreadNew+0x11a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d07b      	beq.n	80058e0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057ec:	2318      	movs	r3, #24
 80057ee:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d045      	beq.n	800588c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <osThreadNew+0x48>
        name = attr->name;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <osThreadNew+0x6e>
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b38      	cmp	r3, #56	; 0x38
 8005826:	d805      	bhi.n	8005834 <osThreadNew+0x6e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <osThreadNew+0x72>
        return (NULL);
 8005834:	2300      	movs	r3, #0
 8005836:	e054      	b.n	80058e2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <osThreadNew+0xa8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2bbb      	cmp	r3, #187	; 0xbb
 8005856:	d90a      	bls.n	800586e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800585c:	2b00      	cmp	r3, #0
 800585e:	d006      	beq.n	800586e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <osThreadNew+0xa8>
        mem = 1;
 8005868:	2301      	movs	r3, #1
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e010      	b.n	8005890 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <osThreadNew+0xca>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <osThreadNew+0xca>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <osThreadNew+0xca>
          mem = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e001      	b.n	8005890 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d110      	bne.n	80058b8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800589e:	9202      	str	r2, [sp, #8]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f001 fde7 	bl	8007480 <xTaskCreateStatic>
 80058b2:	4603      	mov	r3, r0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e013      	b.n	80058e0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d110      	bne.n	80058e0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f001 fe32 	bl	800753a <xTaskCreate>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <osThreadNew+0x11a>
            hTask = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058e0:	693b      	ldr	r3, [r7, #16]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f2:	f3ef 8305 	mrs	r3, IPSR
 80058f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <osDelay+0x1c>
    stat = osErrorISR;
 80058fe:	f06f 0305 	mvn.w	r3, #5
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e007      	b.n	8005916 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 ff6d 	bl	80077f0 <vTaskDelay>
    }
  }

  return (stat);
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800592c:	f3ef 8305 	mrs	r3, IPSR
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005934:	2b00      	cmp	r3, #0
 8005936:	d174      	bne.n	8005a22 <osMutexNew+0x102>
    if (attr != NULL) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <osMutexNew+0x26>
      type = attr->attr_bits;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e001      	b.n	800594a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <osMutexNew+0x3a>
      rmtx = 1U;
 8005954:	2301      	movs	r3, #1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e001      	b.n	800595e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d15c      	bne.n	8005a22 <osMutexNew+0x102>
      mem = -1;
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <osMutexNew+0x6a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b4f      	cmp	r3, #79	; 0x4f
 8005982:	d902      	bls.n	800598a <osMutexNew+0x6a>
          mem = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e00c      	b.n	80059a4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d108      	bne.n	80059a4 <osMutexNew+0x84>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <osMutexNew+0x84>
            mem = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e001      	b.n	80059a4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d112      	bne.n	80059d0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4619      	mov	r1, r3
 80059b6:	2004      	movs	r0, #4
 80059b8:	f000 fdd1 	bl	800655e <xQueueCreateMutexStatic>
 80059bc:	61f8      	str	r0, [r7, #28]
 80059be:	e016      	b.n	80059ee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4619      	mov	r1, r3
 80059c6:	2001      	movs	r0, #1
 80059c8:	f000 fdc9 	bl	800655e <xQueueCreateMutexStatic>
 80059cc:	61f8      	str	r0, [r7, #28]
 80059ce:	e00e      	b.n	80059ee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80059dc:	2004      	movs	r0, #4
 80059de:	f000 fda6 	bl	800652e <xQueueCreateMutex>
 80059e2:	61f8      	str	r0, [r7, #28]
 80059e4:	e003      	b.n	80059ee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80059e6:	2001      	movs	r0, #1
 80059e8:	f000 fda1 	bl	800652e <xQueueCreateMutex>
 80059ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <osMutexNew+0xee>
        if (attr != NULL) {
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <osMutexNew+0xe2>
          name = attr->name;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e001      	b.n	8005a06 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	69f8      	ldr	r0, [r7, #28]
 8005a0a:	f001 fcb1 	bl	8007370 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <osMutexNew+0x102>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a22:	69fb      	ldr	r3, [r7, #28]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4a:	f3ef 8305 	mrs	r3, IPSR
 8005a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a50:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005a56:	f06f 0305 	mvn.w	r3, #5
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e02c      	b.n	8005ab8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005a64:	f06f 0303 	mvn.w	r3, #3
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e025      	b.n	8005ab8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d011      	beq.n	8005a96 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f000 fdc1 	bl	80065fc <xQueueTakeMutexRecursive>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d01b      	beq.n	8005ab8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a86:	f06f 0301 	mvn.w	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e014      	b.n	8005ab8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a8e:	f06f 0302 	mvn.w	r3, #2
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e010      	b.n	8005ab8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6938      	ldr	r0, [r7, #16]
 8005a9a:	f001 f955 	bl	8006d48 <xQueueSemaphoreTake>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d009      	beq.n	8005ab8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005aaa:	f06f 0301 	mvn.w	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e002      	b.n	8005ab8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ab2:	f06f 0302 	mvn.w	r3, #2
 8005ab6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005ab8:	697b      	ldr	r3, [r7, #20]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ade:	f3ef 8305 	mrs	r3, IPSR
 8005ae2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ae4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005aea:	f06f 0305 	mvn.w	r3, #5
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e01f      	b.n	8005b32 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005af8:	f06f 0303 	mvn.w	r3, #3
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e018      	b.n	8005b32 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f000 fd44 	bl	8006594 <xQueueGiveMutexRecursive>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d00f      	beq.n	8005b32 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b12:	f06f 0302 	mvn.w	r3, #2
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e00b      	b.n	8005b32 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	6938      	ldr	r0, [r7, #16]
 8005b22:	f000 fe0b 	bl	800673c <xQueueGenericSend>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d002      	beq.n	8005b32 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b2c:	f06f 0302 	mvn.w	r3, #2
 8005b30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b32:	697b      	ldr	r3, [r7, #20]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4c:	f3ef 8305 	mrs	r3, IPSR
 8005b50:	613b      	str	r3, [r7, #16]
  return(result);
 8005b52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d175      	bne.n	8005c44 <osSemaphoreNew+0x108>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d072      	beq.n	8005c44 <osSemaphoreNew+0x108>
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d86e      	bhi.n	8005c44 <osSemaphoreNew+0x108>
    mem = -1;
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d015      	beq.n	8005b9e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <osSemaphoreNew+0x4c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b4f      	cmp	r3, #79	; 0x4f
 8005b80:	d902      	bls.n	8005b88 <osSemaphoreNew+0x4c>
        mem = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e00c      	b.n	8005ba2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <osSemaphoreNew+0x66>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <osSemaphoreNew+0x66>
          mem = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	e001      	b.n	8005ba2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d04c      	beq.n	8005c44 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d128      	bne.n	8005c02 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10a      	bne.n	8005bcc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	f000 fbc4 	bl	8006350 <xQueueGenericCreateStatic>
 8005bc8:	61f8      	str	r0, [r7, #28]
 8005bca:	e005      	b.n	8005bd8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005bcc:	2203      	movs	r2, #3
 8005bce:	2100      	movs	r1, #0
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f000 fc35 	bl	8006440 <xQueueGenericCreate>
 8005bd6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d022      	beq.n	8005c24 <osSemaphoreNew+0xe8>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01f      	beq.n	8005c24 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005be4:	2300      	movs	r3, #0
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	69f8      	ldr	r0, [r7, #28]
 8005bec:	f000 fda6 	bl	800673c <xQueueGenericSend>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d016      	beq.n	8005c24 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005bf6:	69f8      	ldr	r0, [r7, #28]
 8005bf8:	f001 fa6e 	bl	80070d8 <vQueueDelete>
            hSemaphore = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e010      	b.n	8005c24 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d108      	bne.n	8005c1a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fd29 	bl	8006668 <xQueueCreateCountingSemaphoreStatic>
 8005c16:	61f8      	str	r0, [r7, #28]
 8005c18:	e004      	b.n	8005c24 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fd5a 	bl	80066d6 <xQueueCreateCountingSemaphore>
 8005c22:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e001      	b.n	8005c3c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c3c:	6979      	ldr	r1, [r7, #20]
 8005c3e:	69f8      	ldr	r0, [r7, #28]
 8005c40:	f001 fb96 	bl	8007370 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c44:	69fb      	ldr	r3, [r7, #28]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c68:	f06f 0303 	mvn.w	r3, #3
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e039      	b.n	8005ce4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c70:	f3ef 8305 	mrs	r3, IPSR
 8005c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d022      	beq.n	8005cc2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005c82:	f06f 0303 	mvn.w	r3, #3
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e02c      	b.n	8005ce4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	461a      	mov	r2, r3
 8005c94:	2100      	movs	r1, #0
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f001 f962 	bl	8006f60 <xQueueReceiveFromISR>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d003      	beq.n	8005caa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005ca2:	f06f 0302 	mvn.w	r3, #2
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e01c      	b.n	8005ce4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d019      	beq.n	8005ce4 <osSemaphoreAcquire+0x94>
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <osSemaphoreAcquire+0xa0>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	e010      	b.n	8005ce4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6938      	ldr	r0, [r7, #16]
 8005cc6:	f001 f83f 	bl	8006d48 <xQueueSemaphoreTake>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d009      	beq.n	8005ce4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005cd6:	f06f 0301 	mvn.w	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e002      	b.n	8005ce4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005cde:	f06f 0302 	mvn.w	r3, #2
 8005ce2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ce4:	697b      	ldr	r3, [r7, #20]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005d0a:	f06f 0303 	mvn.w	r3, #3
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e02c      	b.n	8005d6c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d12:	f3ef 8305 	mrs	r3, IPSR
 8005d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01a      	beq.n	8005d54 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	4619      	mov	r1, r3
 8005d28:	6938      	ldr	r0, [r7, #16]
 8005d2a:	f000 fea0 	bl	8006a6e <xQueueGiveFromISR>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005d34:	f06f 0302 	mvn.w	r3, #2
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e017      	b.n	8005d6c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d014      	beq.n	8005d6c <osSemaphoreRelease+0x78>
 8005d42:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <osSemaphoreRelease+0x84>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	e00b      	b.n	8005d6c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	2200      	movs	r2, #0
 8005d58:	2100      	movs	r1, #0
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f000 fcee 	bl	800673c <xQueueGenericSend>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d002      	beq.n	8005d6c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005d66:	f06f 0302 	mvn.w	r3, #2
 8005d6a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d6c:	697b      	ldr	r3, [r7, #20]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d88:	f3ef 8305 	mrs	r3, IPSR
 8005d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005d94:	f06f 0305 	mvn.w	r3, #5
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e00e      	b.n	8005dba <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005da2:	f06f 0303 	mvn.w	r3, #3
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e007      	b.n	8005dba <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f001 fb0a 	bl	80073c4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f001 f98f 	bl	80070d8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005dba:	697b      	ldr	r3, [r7, #20]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd4:	f3ef 8305 	mrs	r3, IPSR
 8005dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d15f      	bne.n	8005ea0 <osMessageQueueNew+0xdc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d05c      	beq.n	8005ea0 <osMessageQueueNew+0xdc>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d059      	beq.n	8005ea0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d029      	beq.n	8005e4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d012      	beq.n	8005e26 <osMessageQueueNew+0x62>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b4f      	cmp	r3, #79	; 0x4f
 8005e06:	d90e      	bls.n	8005e26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d302      	bcc.n	8005e26 <osMessageQueueNew+0x62>
        mem = 1;
 8005e20:	2301      	movs	r3, #1
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e014      	b.n	8005e50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d110      	bne.n	8005e50 <osMessageQueueNew+0x8c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10c      	bne.n	8005e50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d108      	bne.n	8005e50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <osMessageQueueNew+0x8c>
          mem = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e001      	b.n	8005e50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10b      	bne.n	8005e6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	9100      	str	r1, [sp, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fa73 	bl	8006350 <xQueueGenericCreateStatic>
 8005e6a:	61f8      	str	r0, [r7, #28]
 8005e6c:	e008      	b.n	8005e80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e74:	2200      	movs	r2, #0
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fae1 	bl	8006440 <xQueueGenericCreate>
 8005e7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00c      	beq.n	8005ea0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e001      	b.n	8005e98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	69f8      	ldr	r0, [r7, #28]
 8005e9c:	f001 fa68 	bl	8007370 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec4:	f3ef 8305 	mrs	r3, IPSR
 8005ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d028      	beq.n	8005f22 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <osMessageQueuePut+0x36>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <osMessageQueuePut+0x36>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005ee2:	f06f 0303 	mvn.w	r3, #3
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e038      	b.n	8005f5c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005eee:	f107 0210 	add.w	r2, r7, #16
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	69b8      	ldr	r0, [r7, #24]
 8005ef8:	f000 fd1e 	bl	8006938 <xQueueGenericSendFromISR>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d003      	beq.n	8005f0a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005f02:	f06f 0302 	mvn.w	r3, #2
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e028      	b.n	8005f5c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d025      	beq.n	8005f5c <osMessageQueuePut+0xb0>
 8005f10:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <osMessageQueuePut+0xbc>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e01c      	b.n	8005f5c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <osMessageQueuePut+0x82>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005f2e:	f06f 0303 	mvn.w	r3, #3
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	e012      	b.n	8005f5c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f36:	2300      	movs	r3, #0
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	69b8      	ldr	r0, [r7, #24]
 8005f3e:	f000 fbfd 	bl	800673c <xQueueGenericSend>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d009      	beq.n	8005f5c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005f4e:	f06f 0301 	mvn.w	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e002      	b.n	8005f5c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005f56:	f06f 0302 	mvn.w	r3, #2
 8005f5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f82:	f3ef 8305 	mrs	r3, IPSR
 8005f86:	617b      	str	r3, [r7, #20]
  return(result);
 8005f88:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d028      	beq.n	8005fe0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <osMessageQueueGet+0x34>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <osMessageQueueGet+0x34>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005fa0:	f06f 0303 	mvn.w	r3, #3
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e037      	b.n	8006018 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	69b8      	ldr	r0, [r7, #24]
 8005fb6:	f000 ffd3 	bl	8006f60 <xQueueReceiveFromISR>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d003      	beq.n	8005fc8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005fc0:	f06f 0302 	mvn.w	r3, #2
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	e027      	b.n	8006018 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d024      	beq.n	8006018 <osMessageQueueGet+0xac>
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <osMessageQueueGet+0xb8>)
 8005fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	e01b      	b.n	8006018 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <osMessageQueueGet+0x80>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005fec:	f06f 0303 	mvn.w	r3, #3
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e011      	b.n	8006018 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	69b8      	ldr	r0, [r7, #24]
 8005ffa:	f000 fdc5 	bl	8006b88 <xQueueReceive>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d009      	beq.n	8006018 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800600a:	f06f 0301 	mvn.w	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e002      	b.n	8006018 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006012:	f06f 0302 	mvn.w	r3, #2
 8006016:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006018:	69fb      	ldr	r3, [r7, #28]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <osMessageQueueGetCount+0x18>
    count = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e00e      	b.n	800605e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006040:	f3ef 8305 	mrs	r3, IPSR
 8006044:	60fb      	str	r3, [r7, #12]
  return(result);
 8006046:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f001 f825 	bl	800709c <uxQueueMessagesWaitingFromISR>
 8006052:	6178      	str	r0, [r7, #20]
 8006054:	e003      	b.n	800605e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006056:	6938      	ldr	r0, [r7, #16]
 8006058:	f001 f802 	bl	8007060 <uxQueueMessagesWaiting>
 800605c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006074:	f3ef 8305 	mrs	r3, IPSR
 8006078:	60fb      	str	r3, [r7, #12]
  return(result);
 800607a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006080:	f06f 0305 	mvn.w	r3, #5
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e00e      	b.n	80060a6 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800608e:	f06f 0303 	mvn.w	r3, #3
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e007      	b.n	80060a6 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f001 f994 	bl	80073c4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80060a0:	6938      	ldr	r0, [r7, #16]
 80060a2:	f001 f819 	bl	80070d8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80060a6:	697b      	ldr	r3, [r7, #20]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a07      	ldr	r2, [pc, #28]	; (80060dc <vApplicationGetIdleTaskMemory+0x2c>)
 80060c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <vApplicationGetIdleTaskMemory+0x30>)
 80060c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2280      	movs	r2, #128	; 0x80
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200000bc 	.word	0x200000bc
 80060e0:	20000178 	.word	0x20000178

080060e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <vApplicationGetTimerTaskMemory+0x2c>)
 80060f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4a06      	ldr	r2, [pc, #24]	; (8006114 <vApplicationGetTimerTaskMemory+0x30>)
 80060fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006102:	601a      	str	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000378 	.word	0x20000378
 8006114:	20000434 	.word	0x20000434

08006118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f103 0208 	add.w	r2, r3, #8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f103 0208 	add.w	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f103 0208 	add.w	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d103      	bne.n	80061da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e00c      	b.n	80061f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3308      	adds	r3, #8
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e002      	b.n	80061e8 <vListInsert+0x2e>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d2f6      	bcs.n	80061e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
}
 8006220:	bf00      	nop
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6892      	ldr	r2, [r2, #8]
 8006242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6852      	ldr	r2, [r2, #4]
 800624c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d103      	bne.n	8006260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1e5a      	subs	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062aa:	f002 fdab 	bl	8008e04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	441a      	add	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	3b01      	subs	r3, #1
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	22ff      	movs	r2, #255	; 0xff
 80062ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d114      	bne.n	800632a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01a      	beq.n	800633e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3310      	adds	r3, #16
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fd4f 	bl	8007db0 <xTaskRemoveFromEventList>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <xQueueGenericReset+0xcc>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	e009      	b.n	800633e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3310      	adds	r3, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fef2 	bl	8006118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3324      	adds	r3, #36	; 0x24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff feed 	bl	8006118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800633e:	f002 fd91 	bl	8008e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006342:	2301      	movs	r3, #1
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08e      	sub	sp, #56	; 0x38
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <xQueueGenericCreateStatic+0x52>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <xQueueGenericCreateStatic+0x56>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <xQueueGenericCreateStatic+0x58>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	623b      	str	r3, [r7, #32]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <xQueueGenericCreateStatic+0x7e>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericCreateStatic+0x82>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericCreateStatic+0x84>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063ee:	2350      	movs	r3, #80	; 0x50
 80063f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b50      	cmp	r3, #80	; 0x50
 80063f6:	d00a      	beq.n	800640e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	61bb      	str	r3, [r7, #24]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800640e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4613      	mov	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f83f 	bl	80064b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006438:	4618      	mov	r0, r3
 800643a:	3730      	adds	r7, #48	; 0x30
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	613b      	str	r3, [r7, #16]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3350      	adds	r3, #80	; 0x50
 8006478:	4618      	mov	r0, r3
 800647a:	f002 fde5 	bl	8009048 <pvPortMalloc>
 800647e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d011      	beq.n	80064aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3350      	adds	r3, #80	; 0x50
 800648e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006498:	79fa      	ldrb	r2, [r7, #7]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f805 	bl	80064b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064aa:	69bb      	ldr	r3, [r7, #24]
	}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3720      	adds	r7, #32
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064e2:	2101      	movs	r1, #1
 80064e4:	69b8      	ldr	r0, [r7, #24]
 80064e6:	f7ff fecb 	bl	8006280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00e      	beq.n	8006526 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800651a:	2300      	movs	r3, #0
 800651c:	2200      	movs	r2, #0
 800651e:	2100      	movs	r1, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f90b 	bl	800673c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af00      	add	r7, sp, #0
 8006534:	4603      	mov	r3, r0
 8006536:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	461a      	mov	r2, r3
 8006544:	6939      	ldr	r1, [r7, #16]
 8006546:	6978      	ldr	r0, [r7, #20]
 8006548:	f7ff ff7a 	bl	8006440 <xQueueGenericCreate>
 800654c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff ffd3 	bl	80064fa <prvInitialiseMutex>

		return xNewQueue;
 8006554:	68fb      	ldr	r3, [r7, #12]
	}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800655e:	b580      	push	{r7, lr}
 8006560:	b088      	sub	sp, #32
 8006562:	af02      	add	r7, sp, #8
 8006564:	4603      	mov	r3, r0
 8006566:	6039      	str	r1, [r7, #0]
 8006568:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2200      	movs	r2, #0
 800657a:	6939      	ldr	r1, [r7, #16]
 800657c:	6978      	ldr	r0, [r7, #20]
 800657e:	f7ff fee7 	bl	8006350 <xQueueGenericCreateStatic>
 8006582:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ffb8 	bl	80064fa <prvInitialiseMutex>

		return xNewQueue;
 800658a:	68fb      	ldr	r3, [r7, #12]
	}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	689c      	ldr	r4, [r3, #8]
 80065c0:	f001 fdb8 	bl	8008134 <xTaskGetCurrentTaskHandle>
 80065c4:	4603      	mov	r3, r0
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d111      	bne.n	80065ee <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80065dc:	2300      	movs	r3, #0
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	6938      	ldr	r0, [r7, #16]
 80065e4:	f000 f8aa 	bl	800673c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e001      	b.n	80065f2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80065f2:	697b      	ldr	r3, [r7, #20]
	}
 80065f4:	4618      	mov	r0, r3
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd90      	pop	{r4, r7, pc}

080065fc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	689c      	ldr	r4, [r3, #8]
 800662a:	f001 fd83 	bl	8008134 <xTaskGetCurrentTaskHandle>
 800662e:	4603      	mov	r3, r0
 8006630:	429c      	cmp	r4, r3
 8006632:	d107      	bne.n	8006644 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e00c      	b.n	800665e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 fb7e 	bl	8006d48 <xQueueSemaphoreTake>
 800664c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800665e:	697b      	ldr	r3, [r7, #20]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}

08006668 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	61bb      	str	r3, [r7, #24]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	429a      	cmp	r2, r3
 8006696:	d90a      	bls.n	80066ae <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	617b      	str	r3, [r7, #20]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066ae:	2302      	movs	r3, #2
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2100      	movs	r1, #0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fe49 	bl	8006350 <xQueueGenericCreateStatic>
 80066be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066cc:	69fb      	ldr	r3, [r7, #28]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	613b      	str	r3, [r7, #16]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d90a      	bls.n	800671a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800671a:	2202      	movs	r2, #2
 800671c:	2100      	movs	r1, #0
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff fe8e 	bl	8006440 <xQueueGenericCreate>
 8006724:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006732:	697b      	ldr	r3, [r7, #20]
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08e      	sub	sp, #56	; 0x38
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xQueueGenericSend+0x32>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <xQueueGenericSend+0x40>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <xQueueGenericSend+0x44>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <xQueueGenericSend+0x46>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <xQueueGenericSend+0x60>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d103      	bne.n	80067aa <xQueueGenericSend+0x6e>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <xQueueGenericSend+0x72>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueGenericSend+0x74>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericSend+0x8e>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	623b      	str	r3, [r7, #32]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ca:	f001 fcc3 	bl	8008154 <xTaskGetSchedulerState>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <xQueueGenericSend+0x9e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <xQueueGenericSend+0xa2>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueGenericSend+0xa4>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <xQueueGenericSend+0xbe>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	61fb      	str	r3, [r7, #28]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067fa:	f002 fb03 	bl	8008e04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <xQueueGenericSend+0xd4>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d129      	bne.n	8006864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006816:	f000 fc9a 	bl	800714e <prvCopyDataToQueue>
 800681a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d010      	beq.n	8006846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fac1 	bl	8007db0 <xTaskRemoveFromEventList>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d013      	beq.n	800685c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006834:	4b3f      	ldr	r3, [pc, #252]	; (8006934 <xQueueGenericSend+0x1f8>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	e00a      	b.n	800685c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800684c:	4b39      	ldr	r3, [pc, #228]	; (8006934 <xQueueGenericSend+0x1f8>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800685c:	f002 fb02 	bl	8008e64 <vPortExitCritical>
				return pdPASS;
 8006860:	2301      	movs	r3, #1
 8006862:	e063      	b.n	800692c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800686a:	f002 fafb 	bl	8008e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800686e:	2300      	movs	r3, #0
 8006870:	e05c      	b.n	800692c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fafb 	bl	8007e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006886:	f002 faed 	bl	8008e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800688a:	f001 f855 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800688e:	f002 fab9 	bl	8008e04 <vPortEnterCritical>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006898:	b25b      	sxtb	r3, r3
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d103      	bne.n	80068a8 <xQueueGenericSend+0x16c>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d103      	bne.n	80068be <xQueueGenericSend+0x182>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068be:	f002 fad1 	bl	8008e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068c2:	1d3a      	adds	r2, r7, #4
 80068c4:	f107 0314 	add.w	r3, r7, #20
 80068c8:	4611      	mov	r1, r2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 faea 	bl	8007ea4 <xTaskCheckForTimeOut>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d124      	bne.n	8006920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d8:	f000 fd31 	bl	800733e <prvIsQueueFull>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d018      	beq.n	8006914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	3310      	adds	r3, #16
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 fa10 	bl	8007d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068f2:	f000 fcbc 	bl	800726e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068f6:	f001 f82d 	bl	8007954 <xTaskResumeAll>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f47f af7c 	bne.w	80067fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006902:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <xQueueGenericSend+0x1f8>)
 8006904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	e772      	b.n	80067fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006916:	f000 fcaa 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800691a:	f001 f81b 	bl	8007954 <xTaskResumeAll>
 800691e:	e76c      	b.n	80067fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006922:	f000 fca4 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006926:	f001 f815 	bl	8007954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800692a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800692c:	4618      	mov	r0, r3
 800692e:	3738      	adds	r7, #56	; 0x38
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b090      	sub	sp, #64	; 0x40
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d103      	bne.n	8006974 <xQueueGenericSendFromISR+0x3c>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <xQueueGenericSendFromISR+0x40>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <xQueueGenericSendFromISR+0x42>
 8006978:	2300      	movs	r3, #0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSendFromISR+0x6a>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <xQueueGenericSendFromISR+0x6e>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericSendFromISR+0x70>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069c2:	f002 fb01 	bl	8008fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069c6:	f3ef 8211 	mrs	r2, BASEPRI
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	61fa      	str	r2, [r7, #28]
 80069dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <xQueueGenericSendFromISR+0xbc>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d12f      	bne.n	8006a54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a0a:	f000 fba0 	bl	800714e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d112      	bne.n	8006a3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d016      	beq.n	8006a4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	3324      	adds	r3, #36	; 0x24
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 f9c3 	bl	8007db0 <xTaskRemoveFromEventList>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e007      	b.n	8006a4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a42:	3301      	adds	r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	b25a      	sxtb	r2, r3
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a52:	e001      	b.n	8006a58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3740      	adds	r7, #64	; 0x40
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b08e      	sub	sp, #56	; 0x38
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	623b      	str	r3, [r7, #32]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	61fb      	str	r3, [r7, #28]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <xQueueGiveFromISR+0x58>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <xQueueGiveFromISR+0x5c>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <xQueueGiveFromISR+0x5e>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	61bb      	str	r3, [r7, #24]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ae6:	f002 fa6f 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006aea:	f3ef 8211 	mrs	r2, BASEPRI
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617a      	str	r2, [r7, #20]
 8006b00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d22b      	bcs.n	8006b6e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d112      	bne.n	8006b58 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d016      	beq.n	8006b68 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	3324      	adds	r3, #36	; 0x24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f936 	bl	8007db0 <xTaskRemoveFromEventList>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e007      	b.n	8006b68 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	b25a      	sxtb	r2, r3
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6c:	e001      	b.n	8006b72 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f383 8811 	msr	BASEPRI, r3
}
 8006b7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3738      	adds	r7, #56	; 0x38
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <xQueueReceive+0x30>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	623b      	str	r3, [r7, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <xQueueReceive+0x3e>
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueReceive+0x42>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueReceive+0x44>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xQueueReceive+0x5e>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61fb      	str	r3, [r7, #28]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006be6:	f001 fab5 	bl	8008154 <xTaskGetSchedulerState>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <xQueueReceive+0x6e>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <xQueueReceive+0x72>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueReceive+0x74>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueReceive+0x8e>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61bb      	str	r3, [r7, #24]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c16:	f002 f8f5 	bl	8008e04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01f      	beq.n	8006c66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2a:	f000 fafa 	bl	8007222 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00f      	beq.n	8006c5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	3310      	adds	r3, #16
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 f8b4 	bl	8007db0 <xTaskRemoveFromEventList>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c4e:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <xQueueReceive+0x1bc>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c5e:	f002 f901 	bl	8008e64 <vPortExitCritical>
				return pdPASS;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e069      	b.n	8006d3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c6c:	f002 f8fa 	bl	8008e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e062      	b.n	8006d3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 f8fa 	bl	8007e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c88:	f002 f8ec 	bl	8008e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c8c:	f000 fe54 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c90:	f002 f8b8 	bl	8008e04 <vPortEnterCritical>
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d103      	bne.n	8006caa <xQueueReceive+0x122>
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d103      	bne.n	8006cc0 <xQueueReceive+0x138>
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc0:	f002 f8d0 	bl	8008e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cc4:	1d3a      	adds	r2, r7, #4
 8006cc6:	f107 0310 	add.w	r3, r7, #16
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 f8e9 	bl	8007ea4 <xTaskCheckForTimeOut>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d123      	bne.n	8006d20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cda:	f000 fb1a 	bl	8007312 <prvIsQueueEmpty>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	3324      	adds	r3, #36	; 0x24
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f80f 	bl	8007d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf4:	f000 fabb 	bl	800726e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cf8:	f000 fe2c 	bl	8007954 <xTaskResumeAll>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d189      	bne.n	8006c16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <xQueueReceive+0x1bc>)
 8006d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	e780      	b.n	8006c16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d16:	f000 faaa 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d1a:	f000 fe1b 	bl	8007954 <xTaskResumeAll>
 8006d1e:	e77a      	b.n	8006c16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f000 faa4 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d26:	f000 fe15 	bl	8007954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2c:	f000 faf1 	bl	8007312 <prvIsQueueEmpty>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f43f af6f 	beq.w	8006c16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3730      	adds	r7, #48	; 0x30
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	; 0x38
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	623b      	str	r3, [r7, #32]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61fb      	str	r3, [r7, #28]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d98:	f001 f9dc 	bl	8008154 <xTaskGetSchedulerState>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <xQueueSemaphoreTake+0x60>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <xQueueSemaphoreTake+0x64>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <xQueueSemaphoreTake+0x66>
 8006dac:	2300      	movs	r3, #0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	61bb      	str	r3, [r7, #24]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc8:	f002 f81c 	bl	8008e04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d024      	beq.n	8006e22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	1e5a      	subs	r2, r3, #1
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006de8:	f001 fb2a 	bl	8008440 <pvTaskIncrementMutexHeldCount>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00f      	beq.n	8006e1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ffd6 	bl	8007db0 <xTaskRemoveFromEventList>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e0a:	4b54      	ldr	r3, [pc, #336]	; (8006f5c <xQueueSemaphoreTake+0x214>)
 8006e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e1a:	f002 f823 	bl	8008e64 <vPortExitCritical>
				return pdPASS;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e097      	b.n	8006f52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d111      	bne.n	8006e4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	617b      	str	r3, [r7, #20]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e44:	f002 f80e 	bl	8008e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e082      	b.n	8006f52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f80e 	bl	8007e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e60:	f002 f800 	bl	8008e64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e64:	f000 fd68 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e68:	f001 ffcc 	bl	8008e04 <vPortEnterCritical>
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d103      	bne.n	8006e82 <xQueueSemaphoreTake+0x13a>
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d103      	bne.n	8006e98 <xQueueSemaphoreTake+0x150>
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e98:	f001 ffe4 	bl	8008e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	f107 030c 	add.w	r3, r7, #12
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fffd 	bl	8007ea4 <xTaskCheckForTimeOut>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d132      	bne.n	8006f16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eb2:	f000 fa2e 	bl	8007312 <prvIsQueueEmpty>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d026      	beq.n	8006f0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ec4:	f001 ff9e 	bl	8008e04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f95f 	bl	8008190 <xTaskPriorityInherit>
 8006ed2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ed4:	f001 ffc6 	bl	8008e64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	3324      	adds	r3, #36	; 0x24
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 ff15 	bl	8007d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee8:	f000 f9c1 	bl	800726e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eec:	f000 fd32 	bl	8007954 <xTaskResumeAll>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f47f af68 	bne.w	8006dc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ef8:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <xQueueSemaphoreTake+0x214>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	e75e      	b.n	8006dc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0c:	f000 f9af 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f10:	f000 fd20 	bl	8007954 <xTaskResumeAll>
 8006f14:	e758      	b.n	8006dc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f18:	f000 f9a9 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f1c:	f000 fd1a 	bl	8007954 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f22:	f000 f9f6 	bl	8007312 <prvIsQueueEmpty>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f43f af4d 	beq.w	8006dc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00d      	beq.n	8006f50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f34:	f001 ff66 	bl	8008e04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f3a:	f000 f8f0 	bl	800711e <prvGetDisinheritPriorityAfterTimeout>
 8006f3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 f9f8 	bl	800833c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f4c:	f001 ff8a 	bl	8008e64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3738      	adds	r7, #56	; 0x38
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08e      	sub	sp, #56	; 0x38
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	623b      	str	r3, [r7, #32]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <xQueueReceiveFromISR+0x3a>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <xQueueReceiveFromISR+0x3e>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueReceiveFromISR+0x40>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	61fb      	str	r3, [r7, #28]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fba:	f002 f805 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61ba      	str	r2, [r7, #24]
 8006fd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02f      	beq.n	8007046 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff4:	f000 f915 	bl	8007222 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d112      	bne.n	8007030 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	3310      	adds	r3, #16
 8007016:	4618      	mov	r0, r3
 8007018:	f000 feca 	bl	8007db0 <xTaskRemoveFromEventList>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e007      	b.n	8007040 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007034:	3301      	adds	r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	b25a      	sxtb	r2, r3
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007040:	2301      	movs	r3, #1
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
 8007044:	e001      	b.n	800704a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f383 8811 	msr	BASEPRI, r3
}
 8007054:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007058:	4618      	mov	r0, r3
 800705a:	3738      	adds	r7, #56	; 0x38
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60bb      	str	r3, [r7, #8]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007084:	f001 febe 	bl	8008e04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800708e:	f001 fee9 	bl	8008e64 <vPortExitCritical>

	return uxReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60fb      	str	r3, [r7, #12]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80070ca:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <vQueueDelete+0x28>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	60bb      	str	r3, [r7, #8]
}
 80070fc:	bf00      	nop
 80070fe:	e7fe      	b.n	80070fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f95f 	bl	80073c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f002 f865 	bl	80091e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d006      	beq.n	800713c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e001      	b.n	8007140 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007140:	68fb      	ldr	r3, [r7, #12]
	}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d14d      	bne.n	8007210 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f871 	bl	8008260 <xTaskPriorityDisinherit>
 800717e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	609a      	str	r2, [r3, #8]
 8007186:	e043      	b.n	8007210 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d119      	bne.n	80071c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6858      	ldr	r0, [r3, #4]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	461a      	mov	r2, r3
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	f00f fe57 	bl	8016e4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	441a      	add	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d32b      	bcc.n	8007210 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
 80071c0:	e026      	b.n	8007210 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68d8      	ldr	r0, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	461a      	mov	r2, r3
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	f00f fe3d 	bl	8016e4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	425b      	negs	r3, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d207      	bcs.n	80071fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	425b      	negs	r3, r3
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d105      	bne.n	8007210 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	3b01      	subs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d018      	beq.n	8007266 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d303      	bcc.n	8007256 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68d9      	ldr	r1, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	461a      	mov	r2, r3
 8007260:	6838      	ldr	r0, [r7, #0]
 8007262:	f00f fdf3 	bl	8016e4c <memcpy>
	}
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007276:	f001 fdc5 	bl	8008e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007280:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007282:	e011      	b.n	80072a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d012      	beq.n	80072b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3324      	adds	r3, #36	; 0x24
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fd8d 	bl	8007db0 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800729c:	f000 fe64 	bl	8007f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dce9      	bgt.n	8007284 <prvUnlockQueue+0x16>
 80072b0:	e000      	b.n	80072b4 <prvUnlockQueue+0x46>
					break;
 80072b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22ff      	movs	r2, #255	; 0xff
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072bc:	f001 fdd2 	bl	8008e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072c0:	f001 fda0 	bl	8008e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072cc:	e011      	b.n	80072f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d012      	beq.n	80072fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3310      	adds	r3, #16
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fd68 	bl	8007db0 <xTaskRemoveFromEventList>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e6:	f000 fe3f 	bl	8007f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dce9      	bgt.n	80072ce <prvUnlockQueue+0x60>
 80072fa:	e000      	b.n	80072fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007306:	f001 fdad 	bl	8008e64 <vPortExitCritical>
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800731a:	f001 fd73 	bl	8008e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007326:	2301      	movs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e001      	b.n	8007330 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007330:	f001 fd98 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 8007334:	68fb      	ldr	r3, [r7, #12]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007346:	f001 fd5d 	bl	8008e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	429a      	cmp	r2, r3
 8007354:	d102      	bne.n	800735c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007356:	2301      	movs	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e001      	b.n	8007360 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007360:	f001 fd80 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e014      	b.n	80073aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007380:	4a0f      	ldr	r2, [pc, #60]	; (80073c0 <vQueueAddToRegistry+0x50>)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10b      	bne.n	80073a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800738c:	490c      	ldr	r1, [pc, #48]	; (80073c0 <vQueueAddToRegistry+0x50>)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007396:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <vQueueAddToRegistry+0x50>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073a2:	e006      	b.n	80073b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b07      	cmp	r3, #7
 80073ae:	d9e7      	bls.n	8007380 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	200088a8 	.word	0x200088a8

080073c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e016      	b.n	8007400 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073d2:	4a10      	ldr	r2, [pc, #64]	; (8007414 <vQueueUnregisterQueue+0x50>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4413      	add	r3, r2
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d10b      	bne.n	80073fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80073e2:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <vQueueUnregisterQueue+0x50>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2100      	movs	r1, #0
 80073e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073ec:	4a09      	ldr	r2, [pc, #36]	; (8007414 <vQueueUnregisterQueue+0x50>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4413      	add	r3, r2
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]
				break;
 80073f8:	e006      	b.n	8007408 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b07      	cmp	r3, #7
 8007404:	d9e5      	bls.n	80073d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	200088a8 	.word	0x200088a8

08007418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007428:	f001 fcec 	bl	8008e04 <vPortEnterCritical>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <vQueueWaitForMessageRestricted+0x2a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007448:	b25b      	sxtb	r3, r3
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d103      	bne.n	8007458 <vQueueWaitForMessageRestricted+0x40>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007458:	f001 fd04 	bl	8008e64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fc73 	bl	8007d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007472:	6978      	ldr	r0, [r7, #20]
 8007474:	f7ff fefb 	bl	800726e <prvUnlockQueue>
	}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	; 0x38
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	623b      	str	r3, [r7, #32]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61fb      	str	r3, [r7, #28]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074c6:	23bc      	movs	r3, #188	; 0xbc
 80074c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2bbc      	cmp	r3, #188	; 0xbc
 80074ce:	d00a      	beq.n	80074e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01e      	beq.n	800752c <xTaskCreateStatic+0xac>
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2202      	movs	r2, #2
 8007502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007506:	2300      	movs	r3, #0
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f850 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007526:	f000 f8f3 	bl	8007710 <prvAddNewTaskToReadyList>
 800752a:	e001      	b.n	8007530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007530:	697b      	ldr	r3, [r7, #20]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	; 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08c      	sub	sp, #48	; 0x30
 800753e:	af04      	add	r7, sp, #16
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fd7a 	bl	8009048 <pvPortMalloc>
 8007554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800755c:	20bc      	movs	r0, #188	; 0xbc
 800755e:	f001 fd73 	bl	8009048 <pvPortMalloc>
 8007562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
 8007570:	e005      	b.n	800757e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	f001 fe34 	bl	80091e0 <vPortFree>
 8007578:	e001      	b.n	800757e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	2300      	movs	r3, #0
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f80e 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a8:	69f8      	ldr	r0, [r7, #28]
 80075aa:	f000 f8b1 	bl	8007710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e002      	b.n	80075ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
 80075b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075ba:	69bb      	ldr	r3, [r7, #24]
	}
 80075bc:	4618      	mov	r0, r3
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	461a      	mov	r2, r3
 80075dc:	21a5      	movs	r1, #165	; 0xa5
 80075de:	f00f fc5d 	bl	8016e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075ec:	3b01      	subs	r3, #1
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	617b      	str	r3, [r7, #20]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01f      	beq.n	8007662 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e012      	b.n	800764e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	3334      	adds	r3, #52	; 0x34
 8007638:	460a      	mov	r2, r1
 800763a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d9e9      	bls.n	8007628 <prvInitialiseNewTask+0x64>
 8007654:	e000      	b.n	8007658 <prvInitialiseNewTask+0x94>
			{
				break;
 8007656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007660:	e003      	b.n	800766a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	2b37      	cmp	r3, #55	; 0x37
 800766e:	d901      	bls.n	8007674 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007670:	2337      	movs	r3, #55	; 0x37
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2200      	movs	r2, #0
 8007684:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fd64 	bl	8006158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	3318      	adds	r3, #24
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fd5f 	bl	8006158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	3354      	adds	r3, #84	; 0x54
 80076c4:	2260      	movs	r2, #96	; 0x60
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f00f fbe7 	bl	8016e9c <memset>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <prvInitialiseNewTask+0x140>)
 80076d2:	659a      	str	r2, [r3, #88]	; 0x58
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <prvInitialiseNewTask+0x144>)
 80076d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	4a0b      	ldr	r2, [pc, #44]	; (800770c <prvInitialiseNewTask+0x148>)
 80076de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	69b8      	ldr	r0, [r7, #24]
 80076e6:	f001 fa61 	bl	8008bac <pxPortInitialiseStack>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076fc:	bf00      	nop
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	0801ba18 	.word	0x0801ba18
 8007708:	0801ba38 	.word	0x0801ba38
 800770c:	0801b9f8 	.word	0x0801b9f8

08007710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007718:	f001 fb74 	bl	8008e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007726:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d110      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800773c:	f000 fc38 	bl	8007fb0 <prvInitialiseTaskLists>
 8007740:	e00d      	b.n	800775e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d802      	bhi.n	800775e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007758:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d903      	bls.n	8007784 <prvAddNewTaskToReadyList+0x74>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <prvAddNewTaskToReadyList+0xd8>)
 8007792:	441a      	add	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe fce9 	bl	8006172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077a0:	f001 fb60 	bl	8008e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077a4:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d207      	bcs.n	80077ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077ba:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <prvAddNewTaskToReadyList+0xdc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000d08 	.word	0x20000d08
 80077d8:	20000834 	.word	0x20000834
 80077dc:	20000d14 	.word	0x20000d14
 80077e0:	20000d24 	.word	0x20000d24
 80077e4:	20000d10 	.word	0x20000d10
 80077e8:	20000838 	.word	0x20000838
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <vTaskDelay+0x60>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <vTaskDelay+0x30>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007820:	f000 f88a 	bl	8007938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fe1e 	bl	8008468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800782c:	f000 f892 	bl	8007954 <xTaskResumeAll>
 8007830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <vTaskDelay+0x64>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000d30 	.word	0x20000d30
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007866:	463a      	mov	r2, r7
 8007868:	1d39      	adds	r1, r7, #4
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fc1e 	bl	80060b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	2300      	movs	r3, #0
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	460a      	mov	r2, r1
 8007886:	4924      	ldr	r1, [pc, #144]	; (8007918 <vTaskStartScheduler+0xc0>)
 8007888:	4824      	ldr	r0, [pc, #144]	; (800791c <vTaskStartScheduler+0xc4>)
 800788a:	f7ff fdf9 	bl	8007480 <xTaskCreateStatic>
 800788e:	4603      	mov	r3, r0
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e001      	b.n	80078a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078ac:	f000 fe30 	bl	8008510 <xTimerCreateTimerTask>
 80078b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11b      	bne.n	80078f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	613b      	str	r3, [r7, #16]
}
 80078ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <vTaskStartScheduler+0xcc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3354      	adds	r3, #84	; 0x54
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <vTaskStartScheduler+0xd0>)
 80078d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <vTaskStartScheduler+0xd4>)
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <vTaskStartScheduler+0xd8>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <vTaskStartScheduler+0xdc>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ea:	f001 f9e9 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ee:	e00e      	b.n	800790e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d10a      	bne.n	800790e <vTaskStartScheduler+0xb6>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vTaskStartScheduler+0xb4>
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	08018204 	.word	0x08018204
 800791c:	08007f81 	.word	0x08007f81
 8007920:	20000d2c 	.word	0x20000d2c
 8007924:	20000834 	.word	0x20000834
 8007928:	2000001c 	.word	0x2000001c
 800792c:	20000d28 	.word	0x20000d28
 8007930:	20000d14 	.word	0x20000d14
 8007934:	20000d0c 	.word	0x20000d0c

08007938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vTaskSuspendAll+0x18>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <vTaskSuspendAll+0x18>)
 8007944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000d30 	.word	0x20000d30

08007954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007962:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <xTaskResumeAll+0x2c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007980:	f001 fa40 	bl	8008e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007984:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xTaskResumeAll+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a38      	ldr	r2, [pc, #224]	; (8007a6c <xTaskResumeAll+0x118>)
 800798c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b37      	ldr	r3, [pc, #220]	; (8007a6c <xTaskResumeAll+0x118>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d162      	bne.n	8007a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007996:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <xTaskResumeAll+0x11c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d05e      	beq.n	8007a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799e:	e02f      	b.n	8007a00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b34      	ldr	r3, [pc, #208]	; (8007a74 <xTaskResumeAll+0x120>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3318      	adds	r3, #24
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fe fc3d 	bl	800622c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fc38 	bl	800622c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c0:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <xTaskResumeAll+0x124>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d903      	bls.n	80079d0 <xTaskResumeAll+0x7c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <xTaskResumeAll+0x124>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a27      	ldr	r2, [pc, #156]	; (8007a7c <xTaskResumeAll+0x128>)
 80079de:	441a      	add	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe fbc3 	bl	8006172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <xTaskResumeAll+0x12c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079fa:	4b22      	ldr	r3, [pc, #136]	; (8007a84 <xTaskResumeAll+0x130>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xTaskResumeAll+0x120>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1cb      	bne.n	80079a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a0e:	f000 fb71 	bl	80080f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d010      	beq.n	8007a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a1e:	f000 f859 	bl	8007ad4 <xTaskIncrementTick>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f1      	bne.n	8007a1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a40:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskResumeAll+0x138>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5c:	f001 fa02 	bl	8008e64 <vPortExitCritical>

	return xAlreadyYielded;
 8007a60:	68bb      	ldr	r3, [r7, #8]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000d30 	.word	0x20000d30
 8007a70:	20000d08 	.word	0x20000d08
 8007a74:	20000cc8 	.word	0x20000cc8
 8007a78:	20000d10 	.word	0x20000d10
 8007a7c:	20000838 	.word	0x20000838
 8007a80:	20000834 	.word	0x20000834
 8007a84:	20000d1c 	.word	0x20000d1c
 8007a88:	20000d18 	.word	0x20000d18
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <xTaskGetTickCount+0x1c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000d0c 	.word	0x20000d0c

08007ab0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab6:	f001 fa87 	bl	8008fc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007abe:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <xTaskGetTickCountFromISR+0x20>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ac4:	683b      	ldr	r3, [r7, #0]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000d0c 	.word	0x20000d0c

08007ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ade:	4b4f      	ldr	r3, [pc, #316]	; (8007c1c <xTaskIncrementTick+0x148>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 808f 	bne.w	8007c06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ae8:	4b4d      	ldr	r3, [pc, #308]	; (8007c20 <xTaskIncrementTick+0x14c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007af0:	4a4b      	ldr	r2, [pc, #300]	; (8007c20 <xTaskIncrementTick+0x14c>)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d120      	bne.n	8007b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007afc:	4b49      	ldr	r3, [pc, #292]	; (8007c24 <xTaskIncrementTick+0x150>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	603b      	str	r3, [r7, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <xTaskIncrementTick+0x46>
 8007b1c:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <xTaskIncrementTick+0x150>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <xTaskIncrementTick+0x154>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a3f      	ldr	r2, [pc, #252]	; (8007c24 <xTaskIncrementTick+0x150>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	4a3f      	ldr	r2, [pc, #252]	; (8007c28 <xTaskIncrementTick+0x154>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4b3e      	ldr	r3, [pc, #248]	; (8007c2c <xTaskIncrementTick+0x158>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3301      	adds	r3, #1
 8007b36:	4a3d      	ldr	r2, [pc, #244]	; (8007c2c <xTaskIncrementTick+0x158>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	f000 fadb 	bl	80080f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b3e:	4b3c      	ldr	r3, [pc, #240]	; (8007c30 <xTaskIncrementTick+0x15c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d349      	bcc.n	8007bdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b48:	4b36      	ldr	r3, [pc, #216]	; (8007c24 <xTaskIncrementTick+0x150>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b52:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <xTaskIncrementTick+0x15c>)
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	601a      	str	r2, [r3, #0]
					break;
 8007b5a:	e03f      	b.n	8007bdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b5c:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <xTaskIncrementTick+0x150>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d203      	bcs.n	8007b7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b74:	4a2e      	ldr	r2, [pc, #184]	; (8007c30 <xTaskIncrementTick+0x15c>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b7a:	e02f      	b.n	8007bdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fb53 	bl	800622c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3318      	adds	r3, #24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fb4a 	bl	800622c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9c:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <xTaskIncrementTick+0x160>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d903      	bls.n	8007bac <xTaskIncrementTick+0xd8>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <xTaskIncrementTick+0x160>)
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4a1f      	ldr	r2, [pc, #124]	; (8007c38 <xTaskIncrementTick+0x164>)
 8007bba:	441a      	add	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7fe fad5 	bl	8006172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <xTaskIncrementTick+0x168>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d3b8      	bcc.n	8007b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bda:	e7b5      	b.n	8007b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bdc:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <xTaskIncrementTick+0x168>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be2:	4915      	ldr	r1, [pc, #84]	; (8007c38 <xTaskIncrementTick+0x164>)
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d901      	bls.n	8007bf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <xTaskIncrementTick+0x16c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	e004      	b.n	8007c10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c06:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <xTaskIncrementTick+0x170>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <xTaskIncrementTick+0x170>)
 8007c0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c10:	697b      	ldr	r3, [r7, #20]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000d30 	.word	0x20000d30
 8007c20:	20000d0c 	.word	0x20000d0c
 8007c24:	20000cc0 	.word	0x20000cc0
 8007c28:	20000cc4 	.word	0x20000cc4
 8007c2c:	20000d20 	.word	0x20000d20
 8007c30:	20000d28 	.word	0x20000d28
 8007c34:	20000d10 	.word	0x20000d10
 8007c38:	20000838 	.word	0x20000838
 8007c3c:	20000834 	.word	0x20000834
 8007c40:	20000d1c 	.word	0x20000d1c
 8007c44:	20000d18 	.word	0x20000d18

08007c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c4e:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <vTaskSwitchContext+0xb0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c56:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <vTaskSwitchContext+0xb4>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c5c:	e046      	b.n	8007cec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c5e:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <vTaskSwitchContext+0xb4>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c64:	4b26      	ldr	r3, [pc, #152]	; (8007d00 <vTaskSwitchContext+0xb8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	e010      	b.n	8007c8e <vTaskSwitchContext+0x46>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	607b      	str	r3, [r7, #4]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vTaskSwitchContext+0x3e>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	491d      	ldr	r1, [pc, #116]	; (8007d04 <vTaskSwitchContext+0xbc>)
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0e4      	beq.n	8007c6c <vTaskSwitchContext+0x24>
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <vTaskSwitchContext+0xbc>)
 8007cae:	4413      	add	r3, r2
 8007cb0:	60bb      	str	r3, [r7, #8]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	605a      	str	r2, [r3, #4]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d104      	bne.n	8007cd2 <vTaskSwitchContext+0x8a>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	4a0b      	ldr	r2, [pc, #44]	; (8007d08 <vTaskSwitchContext+0xc0>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <vTaskSwitchContext+0xb8>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <vTaskSwitchContext+0xc0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3354      	adds	r3, #84	; 0x54
 8007ce8:	4a08      	ldr	r2, [pc, #32]	; (8007d0c <vTaskSwitchContext+0xc4>)
 8007cea:	6013      	str	r3, [r2, #0]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20000d30 	.word	0x20000d30
 8007cfc:	20000d1c 	.word	0x20000d1c
 8007d00:	20000d10 	.word	0x20000d10
 8007d04:	20000838 	.word	0x20000838
 8007d08:	20000834 	.word	0x20000834
 8007d0c:	2000001c 	.word	0x2000001c

08007d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <vTaskPlaceOnEventList+0x44>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3318      	adds	r3, #24
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe fa3b 	bl	80061ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d44:	2101      	movs	r1, #1
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f000 fb8e 	bl	8008468 <prvAddCurrentTaskToDelayedList>
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000834 	.word	0x20000834

08007d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	617b      	str	r3, [r7, #20]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <vTaskPlaceOnEventListRestricted+0x54>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3318      	adds	r3, #24
 8007d86:	4619      	mov	r1, r3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7fe f9f2 	bl	8006172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	68b8      	ldr	r0, [r7, #8]
 8007d9e:	f000 fb63 	bl	8008468 <prvAddCurrentTaskToDelayedList>
	}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000834 	.word	0x20000834

08007db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	3318      	adds	r3, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fa23 	bl	800622c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <xTaskRemoveFromEventList+0xb0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11d      	bne.n	8007e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fa1a 	bl	800622c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <xTaskRemoveFromEventList+0xb4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskRemoveFromEventList+0x5c>
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <xTaskRemoveFromEventList+0xb4>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <xTaskRemoveFromEventList+0xb8>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe f9a5 	bl	8006172 <vListInsertEnd>
 8007e28:	e005      	b.n	8007e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	4619      	mov	r1, r3
 8007e30:	480e      	ldr	r0, [pc, #56]	; (8007e6c <xTaskRemoveFromEventList+0xbc>)
 8007e32:	f7fe f99e 	bl	8006172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <xTaskRemoveFromEventList+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d905      	bls.n	8007e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <xTaskRemoveFromEventList+0xc4>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e001      	b.n	8007e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e54:	697b      	ldr	r3, [r7, #20]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000d30 	.word	0x20000d30
 8007e64:	20000d10 	.word	0x20000d10
 8007e68:	20000838 	.word	0x20000838
 8007e6c:	20000cc8 	.word	0x20000cc8
 8007e70:	20000834 	.word	0x20000834
 8007e74:	20000d1c 	.word	0x20000d1c

08007e78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <vTaskInternalSetTimeOutState+0x24>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <vTaskInternalSetTimeOutState+0x28>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000d20 	.word	0x20000d20
 8007ea0:	20000d0c 	.word	0x20000d0c

08007ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	613b      	str	r3, [r7, #16]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ee6:	f000 ff8d 	bl	8008e04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eea:	4b1d      	ldr	r3, [pc, #116]	; (8007f60 <xTaskCheckForTimeOut+0xbc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d102      	bne.n	8007f0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	e023      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <xTaskCheckForTimeOut+0xc0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d007      	beq.n	8007f26 <xTaskCheckForTimeOut+0x82>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d302      	bcc.n	8007f26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
 8007f24:	e015      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d20b      	bcs.n	8007f48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ff9b 	bl	8007e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e004      	b.n	8007f52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f52:	f000 ff87 	bl	8008e64 <vPortExitCritical>

	return xReturn;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000d0c 	.word	0x20000d0c
 8007f64:	20000d20 	.word	0x20000d20

08007f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f6c:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <vTaskMissedYield+0x14>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000d1c 	.word	0x20000d1c

08007f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f88:	f000 f852 	bl	8008030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <prvIdleTask+0x28>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d9f9      	bls.n	8007f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <prvIdleTask+0x2c>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa4:	e7f0      	b.n	8007f88 <prvIdleTask+0x8>
 8007fa6:	bf00      	nop
 8007fa8:	20000838 	.word	0x20000838
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e00c      	b.n	8007fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <prvInitialiseTaskLists+0x60>)
 8007fc8:	4413      	add	r3, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe f8a4 	bl	8006118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b37      	cmp	r3, #55	; 0x37
 8007fda:	d9ef      	bls.n	8007fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fdc:	480d      	ldr	r0, [pc, #52]	; (8008014 <prvInitialiseTaskLists+0x64>)
 8007fde:	f7fe f89b 	bl	8006118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fe2:	480d      	ldr	r0, [pc, #52]	; (8008018 <prvInitialiseTaskLists+0x68>)
 8007fe4:	f7fe f898 	bl	8006118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fe8:	480c      	ldr	r0, [pc, #48]	; (800801c <prvInitialiseTaskLists+0x6c>)
 8007fea:	f7fe f895 	bl	8006118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fee:	480c      	ldr	r0, [pc, #48]	; (8008020 <prvInitialiseTaskLists+0x70>)
 8007ff0:	f7fe f892 	bl	8006118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff4:	480b      	ldr	r0, [pc, #44]	; (8008024 <prvInitialiseTaskLists+0x74>)
 8007ff6:	f7fe f88f 	bl	8006118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <prvInitialiseTaskLists+0x78>)
 8007ffc:	4a05      	ldr	r2, [pc, #20]	; (8008014 <prvInitialiseTaskLists+0x64>)
 8007ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <prvInitialiseTaskLists+0x7c>)
 8008002:	4a05      	ldr	r2, [pc, #20]	; (8008018 <prvInitialiseTaskLists+0x68>)
 8008004:	601a      	str	r2, [r3, #0]
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000838 	.word	0x20000838
 8008014:	20000c98 	.word	0x20000c98
 8008018:	20000cac 	.word	0x20000cac
 800801c:	20000cc8 	.word	0x20000cc8
 8008020:	20000cdc 	.word	0x20000cdc
 8008024:	20000cf4 	.word	0x20000cf4
 8008028:	20000cc0 	.word	0x20000cc0
 800802c:	20000cc4 	.word	0x20000cc4

08008030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008036:	e019      	b.n	800806c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008038:	f000 fee4 	bl	8008e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <prvCheckTasksWaitingTermination+0x50>)
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe f8ef 	bl	800622c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <prvCheckTasksWaitingTermination+0x54>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3b01      	subs	r3, #1
 8008054:	4a0b      	ldr	r2, [pc, #44]	; (8008084 <prvCheckTasksWaitingTermination+0x54>)
 8008056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3b01      	subs	r3, #1
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 8008060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008062:	f000 feff 	bl	8008e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f810 	bl	800808c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <prvCheckTasksWaitingTermination+0x58>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e1      	bne.n	8008038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000cdc 	.word	0x20000cdc
 8008084:	20000d08 	.word	0x20000d08
 8008088:	20000cf0 	.word	0x20000cf0

0800808c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3354      	adds	r3, #84	; 0x54
 8008098:	4618      	mov	r0, r3
 800809a:	f00f f817 	bl	80170cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d108      	bne.n	80080ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 f897 	bl	80091e0 <vPortFree>
				vPortFree( pxTCB );
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 f894 	bl	80091e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080b8:	e018      	b.n	80080ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d103      	bne.n	80080cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f88b 	bl	80091e0 <vPortFree>
	}
 80080ca:	e00f      	b.n	80080ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d00a      	beq.n	80080ec <prvDeleteTCB+0x60>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <prvDeleteTCB+0x5e>
	}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <prvResetNextTaskUnblockTime+0x38>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <prvResetNextTaskUnblockTime+0x3c>)
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800810c:	e008      	b.n	8008120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810e:	4b07      	ldr	r3, [pc, #28]	; (800812c <prvResetNextTaskUnblockTime+0x38>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a04      	ldr	r2, [pc, #16]	; (8008130 <prvResetNextTaskUnblockTime+0x3c>)
 800811e:	6013      	str	r3, [r2, #0]
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20000cc0 	.word	0x20000cc0
 8008130:	20000d28 	.word	0x20000d28

08008134 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <xTaskGetCurrentTaskHandle+0x1c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008140:	687b      	ldr	r3, [r7, #4]
	}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000834 	.word	0x20000834

08008154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800815a:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <xTaskGetSchedulerState+0x34>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008162:	2301      	movs	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	e008      	b.n	800817a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <xTaskGetSchedulerState+0x38>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008170:	2302      	movs	r3, #2
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	e001      	b.n	800817a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800817a:	687b      	ldr	r3, [r7, #4]
	}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	20000d14 	.word	0x20000d14
 800818c:	20000d30 	.word	0x20000d30

08008190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800819c:	2300      	movs	r3, #0
 800819e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d051      	beq.n	800824a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081aa:	4b2a      	ldr	r3, [pc, #168]	; (8008254 <xTaskPriorityInherit+0xc4>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d241      	bcs.n	8008238 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	db06      	blt.n	80081ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081bc:	4b25      	ldr	r3, [pc, #148]	; (8008254 <xTaskPriorityInherit+0xc4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6959      	ldr	r1, [r3, #20]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <xTaskPriorityInherit+0xc8>)
 80081dc:	4413      	add	r3, r2
 80081de:	4299      	cmp	r1, r3
 80081e0:	d122      	bne.n	8008228 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe f820 	bl	800622c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ec:	4b19      	ldr	r3, [pc, #100]	; (8008254 <xTaskPriorityInherit+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fa:	4b18      	ldr	r3, [pc, #96]	; (800825c <xTaskPriorityInherit+0xcc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d903      	bls.n	800820a <xTaskPriorityInherit+0x7a>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	4a15      	ldr	r2, [pc, #84]	; (800825c <xTaskPriorityInherit+0xcc>)
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4a10      	ldr	r2, [pc, #64]	; (8008258 <xTaskPriorityInherit+0xc8>)
 8008218:	441a      	add	r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7fd ffa6 	bl	8006172 <vListInsertEnd>
 8008226:	e004      	b.n	8008232 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <xTaskPriorityInherit+0xc4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008232:	2301      	movs	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e008      	b.n	800824a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <xTaskPriorityInherit+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	429a      	cmp	r2, r3
 8008244:	d201      	bcs.n	800824a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008246:	2301      	movs	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800824a:	68fb      	ldr	r3, [r7, #12]
	}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000834 	.word	0x20000834
 8008258:	20000838 	.word	0x20000838
 800825c:	20000d10 	.word	0x20000d10

08008260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d056      	beq.n	8008324 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <xTaskPriorityDisinherit+0xd0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	429a      	cmp	r2, r3
 800827e:	d00a      	beq.n	8008296 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60fb      	str	r3, [r7, #12]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60bb      	str	r3, [r7, #8]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d02c      	beq.n	8008324 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d128      	bne.n	8008324 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3304      	adds	r3, #4
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd ffa8 	bl	800622c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f4:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <xTaskPriorityDisinherit+0xd4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d903      	bls.n	8008304 <xTaskPriorityDisinherit+0xa4>
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	4a0c      	ldr	r2, [pc, #48]	; (8008334 <xTaskPriorityDisinherit+0xd4>)
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4a09      	ldr	r2, [pc, #36]	; (8008338 <xTaskPriorityDisinherit+0xd8>)
 8008312:	441a      	add	r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	3304      	adds	r3, #4
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7fd ff29 	bl	8006172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008324:	697b      	ldr	r3, [r7, #20]
	}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000834 	.word	0x20000834
 8008334:	20000d10 	.word	0x20000d10
 8008338:	20000838 	.word	0x20000838

0800833c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800834a:	2301      	movs	r3, #1
 800834c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d06a      	beq.n	800842a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d902      	bls.n	8008382 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	e002      	b.n	8008388 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008386:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	429a      	cmp	r2, r3
 8008390:	d04b      	beq.n	800842a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	429a      	cmp	r2, r3
 800839a:	d146      	bne.n	800842a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800839c:	4b25      	ldr	r3, [pc, #148]	; (8008434 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d10a      	bne.n	80083bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60bb      	str	r3, [r7, #8]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	db04      	blt.n	80083da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	6959      	ldr	r1, [r3, #20]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4a13      	ldr	r2, [pc, #76]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083ea:	4413      	add	r3, r2
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d11c      	bne.n	800842a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd ff19 	bl	800622c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d903      	bls.n	800840e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	4a0c      	ldr	r2, [pc, #48]	; (800843c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4a07      	ldr	r2, [pc, #28]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800841c:	441a      	add	r2, r3
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f7fd fea4 	bl	8006172 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800842a:	bf00      	nop
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000834 	.word	0x20000834
 8008438:	20000838 	.word	0x20000838
 800843c:	20000d10 	.word	0x20000d10

08008440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <pvTaskIncrementMutexHeldCount+0x24>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <pvTaskIncrementMutexHeldCount+0x24>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008452:	3201      	adds	r2, #1
 8008454:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <pvTaskIncrementMutexHeldCount+0x24>)
 8008458:	681b      	ldr	r3, [r3, #0]
	}
 800845a:	4618      	mov	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	20000834 	.word	0x20000834

08008468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008478:	4b20      	ldr	r3, [pc, #128]	; (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3304      	adds	r3, #4
 800847e:	4618      	mov	r0, r3
 8008480:	f7fd fed4 	bl	800622c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848a:	d10a      	bne.n	80084a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008492:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4819      	ldr	r0, [pc, #100]	; (8008500 <prvAddCurrentTaskToDelayedList+0x98>)
 800849c:	f7fd fe69 	bl	8006172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a0:	e026      	b.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084aa:	4b14      	ldr	r3, [pc, #80]	; (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d209      	bcs.n	80084ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fd fe77 	bl	80061ba <vListInsert>
}
 80084cc:	e010      	b.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ce:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <prvAddCurrentTaskToDelayedList+0x94>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fd fe6d 	bl	80061ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e0:	4b0a      	ldr	r3, [pc, #40]	; (800850c <prvAddCurrentTaskToDelayedList+0xa4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d202      	bcs.n	80084f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084ea:	4a08      	ldr	r2, [pc, #32]	; (800850c <prvAddCurrentTaskToDelayedList+0xa4>)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6013      	str	r3, [r2, #0]
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000d0c 	.word	0x20000d0c
 80084fc:	20000834 	.word	0x20000834
 8008500:	20000cf4 	.word	0x20000cf4
 8008504:	20000cc4 	.word	0x20000cc4
 8008508:	20000cc0 	.word	0x20000cc0
 800850c:	20000d28 	.word	0x20000d28

08008510 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800851a:	f000 fb07 	bl	8008b2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800851e:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <xTimerCreateTimerTask+0x80>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d021      	beq.n	800856a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800852e:	1d3a      	adds	r2, r7, #4
 8008530:	f107 0108 	add.w	r1, r7, #8
 8008534:	f107 030c 	add.w	r3, r7, #12
 8008538:	4618      	mov	r0, r3
 800853a:	f7fd fdd3 	bl	80060e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	9202      	str	r2, [sp, #8]
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	2302      	movs	r3, #2
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2300      	movs	r3, #0
 800854e:	460a      	mov	r2, r1
 8008550:	4910      	ldr	r1, [pc, #64]	; (8008594 <xTimerCreateTimerTask+0x84>)
 8008552:	4811      	ldr	r0, [pc, #68]	; (8008598 <xTimerCreateTimerTask+0x88>)
 8008554:	f7fe ff94 	bl	8007480 <xTaskCreateStatic>
 8008558:	4603      	mov	r3, r0
 800855a:	4a10      	ldr	r2, [pc, #64]	; (800859c <xTimerCreateTimerTask+0x8c>)
 800855c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <xTimerCreateTimerTask+0x8c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008566:	2301      	movs	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008586:	697b      	ldr	r3, [r7, #20]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000d64 	.word	0x20000d64
 8008594:	0801820c 	.word	0x0801820c
 8008598:	080086d5 	.word	0x080086d5
 800859c:	20000d68 	.word	0x20000d68

080085a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08a      	sub	sp, #40	; 0x28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	623b      	str	r3, [r7, #32]
}
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085ce:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <xTimerGenericCommand+0x98>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d02a      	beq.n	800862c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b05      	cmp	r3, #5
 80085e6:	dc18      	bgt.n	800861a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085e8:	f7ff fdb4 	bl	8008154 <xTaskGetSchedulerState>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d109      	bne.n	8008606 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <xTimerGenericCommand+0x98>)
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	f107 0110 	add.w	r1, r7, #16
 80085fa:	2300      	movs	r3, #0
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	f7fe f89d 	bl	800673c <xQueueGenericSend>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24
 8008604:	e012      	b.n	800862c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <xTimerGenericCommand+0x98>)
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f107 0110 	add.w	r1, r7, #16
 800860e:	2300      	movs	r3, #0
 8008610:	2200      	movs	r2, #0
 8008612:	f7fe f893 	bl	800673c <xQueueGenericSend>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24
 8008618:	e008      	b.n	800862c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <xTimerGenericCommand+0x98>)
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	f107 0110 	add.w	r1, r7, #16
 8008622:	2300      	movs	r3, #0
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	f7fe f987 	bl	8006938 <xQueueGenericSendFromISR>
 800862a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800862e:	4618      	mov	r0, r3
 8008630:	3728      	adds	r7, #40	; 0x28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000d64 	.word	0x20000d64

0800863c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008646:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <prvProcessExpiredTimer+0x94>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3304      	adds	r3, #4
 8008654:	4618      	mov	r0, r3
 8008656:	f7fd fde9 	bl	800622c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d022      	beq.n	80086ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	18d1      	adds	r1, r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	6978      	ldr	r0, [r7, #20]
 8008676:	f000 f8d1 	bl	800881c <prvInsertTimerInActiveList>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01f      	beq.n	80086c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008680:	2300      	movs	r3, #0
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	2100      	movs	r1, #0
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f7ff ff88 	bl	80085a0 <xTimerGenericCommand>
 8008690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d113      	bne.n	80086c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	60fb      	str	r3, [r7, #12]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b4:	f023 0301 	bic.w	r3, r3, #1
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	6978      	ldr	r0, [r7, #20]
 80086c6:	4798      	blx	r3
}
 80086c8:	bf00      	nop
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000d5c 	.word	0x20000d5c

080086d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 f857 	bl	8008794 <prvGetNextExpireTime>
 80086e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4619      	mov	r1, r3
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f803 	bl	80086f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086f2:	f000 f8d5 	bl	80088a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086f6:	e7f1      	b.n	80086dc <prvTimerTask+0x8>

080086f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008702:	f7ff f919 	bl	8007938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f866 	bl	80087dc <prvSampleTimeNow>
 8008710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d130      	bne.n	800877a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <prvProcessTimerOrBlockTask+0x3c>
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	429a      	cmp	r2, r3
 8008724:	d806      	bhi.n	8008734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008726:	f7ff f915 	bl	8007954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff ff85 	bl	800863c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008732:	e024      	b.n	800877e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d008      	beq.n	800874c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <prvProcessTimerOrBlockTask+0x90>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <prvProcessTimerOrBlockTask+0x50>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <prvProcessTimerOrBlockTask+0x52>
 8008748:	2300      	movs	r3, #0
 800874a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <prvProcessTimerOrBlockTask+0x94>)
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe fe5d 	bl	8007418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800875e:	f7ff f8f9 	bl	8007954 <xTaskResumeAll>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008768:	4b09      	ldr	r3, [pc, #36]	; (8008790 <prvProcessTimerOrBlockTask+0x98>)
 800876a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	f3bf 8f6f 	isb	sy
}
 8008778:	e001      	b.n	800877e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800877a:	f7ff f8eb 	bl	8007954 <xTaskResumeAll>
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000d60 	.word	0x20000d60
 800878c:	20000d64 	.word	0x20000d64
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <prvGetNextExpireTime+0x44>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <prvGetNextExpireTime+0x16>
 80087a6:	2201      	movs	r2, #1
 80087a8:	e000      	b.n	80087ac <prvGetNextExpireTime+0x18>
 80087aa:	2200      	movs	r2, #0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <prvGetNextExpireTime+0x44>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	e001      	b.n	80087c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000d5c 	.word	0x20000d5c

080087dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087e4:	f7ff f954 	bl	8007a90 <xTaskGetTickCount>
 80087e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <prvSampleTimeNow+0x3c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d205      	bcs.n	8008800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087f4:	f000 f936 	bl	8008a64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e002      	b.n	8008806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008806:	4a04      	ldr	r2, [pc, #16]	; (8008818 <prvSampleTimeNow+0x3c>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800880c:	68fb      	ldr	r3, [r7, #12]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000d6c 	.word	0x20000d6c

0800881c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	429a      	cmp	r2, r3
 8008840:	d812      	bhi.n	8008868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	1ad2      	subs	r2, r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	429a      	cmp	r2, r3
 800884e:	d302      	bcc.n	8008856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e01b      	b.n	800888e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <prvInsertTimerInActiveList+0x7c>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f7fd fcaa 	bl	80061ba <vListInsert>
 8008866:	e012      	b.n	800888e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d206      	bcs.n	800887e <prvInsertTimerInActiveList+0x62>
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d302      	bcc.n	800887e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008878:	2301      	movs	r3, #1
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	e007      	b.n	800888e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <prvInsertTimerInActiveList+0x80>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fd fc96 	bl	80061ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800888e:	697b      	ldr	r3, [r7, #20]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000d60 	.word	0x20000d60
 800889c:	20000d5c 	.word	0x20000d5c

080088a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088a6:	e0ca      	b.n	8008a3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da18      	bge.n	80088e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	3304      	adds	r3, #4
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	61fb      	str	r3, [r7, #28]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d6:	6850      	ldr	r0, [r2, #4]
 80088d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088da:	6892      	ldr	r2, [r2, #8]
 80088dc:	4611      	mov	r1, r2
 80088de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f2c0 80aa 	blt.w	8008a3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fd fc97 	bl	800622c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088fe:	463b      	mov	r3, r7
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff ff6b 	bl	80087dc <prvSampleTimeNow>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b09      	cmp	r3, #9
 800890c:	f200 8097 	bhi.w	8008a3e <prvProcessReceivedCommands+0x19e>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <prvProcessReceivedCommands+0x78>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008941 	.word	0x08008941
 800891c:	08008941 	.word	0x08008941
 8008920:	08008941 	.word	0x08008941
 8008924:	080089b5 	.word	0x080089b5
 8008928:	080089c9 	.word	0x080089c9
 800892c:	08008a13 	.word	0x08008a13
 8008930:	08008941 	.word	0x08008941
 8008934:	08008941 	.word	0x08008941
 8008938:	080089b5 	.word	0x080089b5
 800893c:	080089c9 	.word	0x080089c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	18d1      	adds	r1, r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008960:	f7ff ff5c 	bl	800881c <prvInsertTimerInActiveList>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d069      	beq.n	8008a3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d05e      	beq.n	8008a3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	441a      	add	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	2300      	movs	r3, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008992:	f7ff fe05 	bl	80085a0 <xTimerGenericCommand>
 8008996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d14f      	bne.n	8008a3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61bb      	str	r3, [r7, #24]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ba:	f023 0301 	bic.w	r3, r3, #1
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089c6:	e03a      	b.n	8008a3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	617b      	str	r3, [r7, #20]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	18d1      	adds	r1, r2, r3
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a0c:	f7ff ff06 	bl	800881c <prvInsertTimerInActiveList>
					break;
 8008a10:	e015      	b.n	8008a3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a22:	f000 fbdd 	bl	80091e0 <vPortFree>
 8008a26:	e00a      	b.n	8008a3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a3a:	e000      	b.n	8008a3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <prvProcessReceivedCommands+0x1c0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	1d39      	adds	r1, r7, #4
 8008a44:	2200      	movs	r2, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe f89e 	bl	8006b88 <xQueueReceive>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f af2a 	bne.w	80088a8 <prvProcessReceivedCommands+0x8>
	}
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	3730      	adds	r7, #48	; 0x30
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000d64 	.word	0x20000d64

08008a64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a6a:	e048      	b.n	8008afe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6c:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fd fbd1 	bl	800622c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d02e      	beq.n	8008afe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d90e      	bls.n	8008ad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008abe:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fd fb76 	bl	80061ba <vListInsert>
 8008ace:	e016      	b.n	8008afe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fd60 	bl	80085a0 <xTimerGenericCommand>
 8008ae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	603b      	str	r3, [r7, #0]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1b1      	bne.n	8008a6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <prvSwitchTimerLists+0xc4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a04      	ldr	r2, [pc, #16]	; (8008b24 <prvSwitchTimerLists+0xc0>)
 8008b14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b16:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <prvSwitchTimerLists+0xc4>)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	6013      	str	r3, [r2, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000d5c 	.word	0x20000d5c
 8008b28:	20000d60 	.word	0x20000d60

08008b2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b32:	f000 f967 	bl	8008e04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <prvCheckForValidListAndQueue+0x60>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d120      	bne.n	8008b80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b3e:	4814      	ldr	r0, [pc, #80]	; (8008b90 <prvCheckForValidListAndQueue+0x64>)
 8008b40:	f7fd faea 	bl	8006118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b44:	4813      	ldr	r0, [pc, #76]	; (8008b94 <prvCheckForValidListAndQueue+0x68>)
 8008b46:	f7fd fae7 	bl	8006118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b4a:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <prvCheckForValidListAndQueue+0x6c>)
 8008b4c:	4a10      	ldr	r2, [pc, #64]	; (8008b90 <prvCheckForValidListAndQueue+0x64>)
 8008b4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b50:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <prvCheckForValidListAndQueue+0x70>)
 8008b52:	4a10      	ldr	r2, [pc, #64]	; (8008b94 <prvCheckForValidListAndQueue+0x68>)
 8008b54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b56:	2300      	movs	r3, #0
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <prvCheckForValidListAndQueue+0x74>)
 8008b5c:	4a11      	ldr	r2, [pc, #68]	; (8008ba4 <prvCheckForValidListAndQueue+0x78>)
 8008b5e:	2110      	movs	r1, #16
 8008b60:	200a      	movs	r0, #10
 8008b62:	f7fd fbf5 	bl	8006350 <xQueueGenericCreateStatic>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <prvCheckForValidListAndQueue+0x60>)
 8008b6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b6c:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <prvCheckForValidListAndQueue+0x60>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <prvCheckForValidListAndQueue+0x60>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	490b      	ldr	r1, [pc, #44]	; (8008ba8 <prvCheckForValidListAndQueue+0x7c>)
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fbf8 	bl	8007370 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b80:	f000 f970 	bl	8008e64 <vPortExitCritical>
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000d64 	.word	0x20000d64
 8008b90:	20000d34 	.word	0x20000d34
 8008b94:	20000d48 	.word	0x20000d48
 8008b98:	20000d5c 	.word	0x20000d5c
 8008b9c:	20000d60 	.word	0x20000d60
 8008ba0:	20000e10 	.word	0x20000e10
 8008ba4:	20000d70 	.word	0x20000d70
 8008ba8:	08018214 	.word	0x08018214

08008bac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3b04      	subs	r3, #4
 8008bbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3b04      	subs	r3, #4
 8008bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f023 0201 	bic.w	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bdc:	4a0c      	ldr	r2, [pc, #48]	; (8008c10 <pxPortInitialiseStack+0x64>)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3b14      	subs	r3, #20
 8008be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3b04      	subs	r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f06f 0202 	mvn.w	r2, #2
 8008bfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3b20      	subs	r3, #32
 8008c00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c02:	68fb      	ldr	r3, [r7, #12]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	08008c15 	.word	0x08008c15

08008c14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <prvTaskExitError+0x54>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d00a      	beq.n	8008c3e <prvTaskExitError+0x2a>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60fb      	str	r3, [r7, #12]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <prvTaskExitError+0x28>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	60bb      	str	r3, [r7, #8]
}
 8008c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c52:	bf00      	nop
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0fc      	beq.n	8008c54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	2000000c 	.word	0x2000000c
 8008c6c:	00000000 	.word	0x00000000

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b46      	ldr	r3, [pc, #280]	; (8008de0 <xPortStartScheduler+0x120>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a46      	ldr	r2, [pc, #280]	; (8008de4 <xPortStartScheduler+0x124>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10a      	bne.n	8008ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	613b      	str	r3, [r7, #16]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce6:	4b3e      	ldr	r3, [pc, #248]	; (8008de0 <xPortStartScheduler+0x120>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a3f      	ldr	r2, [pc, #252]	; (8008de8 <xPortStartScheduler+0x128>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10a      	bne.n	8008d06 <xPortStartScheduler+0x46>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d06:	4b39      	ldr	r3, [pc, #228]	; (8008dec <xPortStartScheduler+0x12c>)
 8008d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	22ff      	movs	r2, #255	; 0xff
 8008d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	4b31      	ldr	r3, [pc, #196]	; (8008df0 <xPortStartScheduler+0x130>)
 8008d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d2e:	4b31      	ldr	r3, [pc, #196]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d34:	e009      	b.n	8008d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d36:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	4a2d      	ldr	r2, [pc, #180]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d0ef      	beq.n	8008d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d56:	4b27      	ldr	r3, [pc, #156]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f1c3 0307 	rsb	r3, r3, #7
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d00a      	beq.n	8008d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	60bb      	str	r3, [r7, #8]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d78:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d8a:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <xPortStartScheduler+0x134>)
 8008d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d96:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <xPortStartScheduler+0x138>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <xPortStartScheduler+0x138>)
 8008d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da2:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <xPortStartScheduler+0x138>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <xPortStartScheduler+0x138>)
 8008da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dae:	f000 f8dd 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <xPortStartScheduler+0x13c>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008db8:	f000 f8fc 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <xPortStartScheduler+0x140>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <xPortStartScheduler+0x140>)
 8008dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dc8:	f7ff ff66 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dcc:	f7fe ff3c 	bl	8007c48 <vTaskSwitchContext>
	prvTaskExitError();
 8008dd0:	f7ff ff20 	bl	8008c14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	e000ed00 	.word	0xe000ed00
 8008de4:	410fc271 	.word	0x410fc271
 8008de8:	410fc270 	.word	0x410fc270
 8008dec:	e000e400 	.word	0xe000e400
 8008df0:	20000e60 	.word	0x20000e60
 8008df4:	20000e64 	.word	0x20000e64
 8008df8:	e000ed20 	.word	0xe000ed20
 8008dfc:	2000000c 	.word	0x2000000c
 8008e00:	e000ef34 	.word	0xe000ef34

08008e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	607b      	str	r3, [r7, #4]
}
 8008e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a0d      	ldr	r2, [pc, #52]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e28:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <vPortEnterCritical+0x58>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d10f      	bne.n	8008e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <vPortEnterCritical+0x5c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	603b      	str	r3, [r7, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <vPortEnterCritical+0x4a>
	}
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	2000000c 	.word	0x2000000c
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <vPortExitCritical+0x24>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	607b      	str	r3, [r7, #4]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d105      	bne.n	8008ea6 <vPortExitCritical+0x42>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	f383 8811 	msr	BASEPRI, r3
}
 8008ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	2000000c 	.word	0x2000000c
	...

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7fe feaa 	bl	8007c48 <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7fe fdc7 	bl	8007ad4 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <xPortSysTickHandler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b0f      	cmp	r3, #15
 8008fd8:	d914      	bls.n	8009004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <vPortValidateInterruptPriority+0x70>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <vPortValidateInterruptPriority+0x74>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d20a      	bcs.n	8009004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <vPortValidateInterruptPriority+0x78>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <vPortValidateInterruptPriority+0x7c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d90a      	bls.n	800902a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	603b      	str	r3, [r7, #0]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <vPortValidateInterruptPriority+0x60>
	}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	e000e3f0 	.word	0xe000e3f0
 800903c:	20000e60 	.word	0x20000e60
 8009040:	e000ed0c 	.word	0xe000ed0c
 8009044:	20000e64 	.word	0x20000e64

08009048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009054:	f7fe fc70 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009058:	4b5b      	ldr	r3, [pc, #364]	; (80091c8 <pvPortMalloc+0x180>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009060:	f000 f920 	bl	80092a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009064:	4b59      	ldr	r3, [pc, #356]	; (80091cc <pvPortMalloc+0x184>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	f040 8093 	bne.w	8009198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01d      	beq.n	80090b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009078:	2208      	movs	r2, #8
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d014      	beq.n	80090b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f023 0307 	bic.w	r3, r3, #7
 8009090:	3308      	adds	r3, #8
 8009092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <pvPortMalloc+0x6c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	617b      	str	r3, [r7, #20]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d06e      	beq.n	8009198 <pvPortMalloc+0x150>
 80090ba:	4b45      	ldr	r3, [pc, #276]	; (80091d0 <pvPortMalloc+0x188>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d869      	bhi.n	8009198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090c4:	4b43      	ldr	r3, [pc, #268]	; (80091d4 <pvPortMalloc+0x18c>)
 80090c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090c8:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <pvPortMalloc+0x18c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ce:	e004      	b.n	80090da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <pvPortMalloc+0xa4>
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f1      	bne.n	80090d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090ec:	4b36      	ldr	r3, [pc, #216]	; (80091c8 <pvPortMalloc+0x180>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d050      	beq.n	8009198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2208      	movs	r2, #8
 80090fc:	4413      	add	r3, r2
 80090fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	2308      	movs	r3, #8
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d91f      	bls.n	8009158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <pvPortMalloc+0xf8>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	613b      	str	r3, [r7, #16]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	1ad2      	subs	r2, r2, r3
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009152:	69b8      	ldr	r0, [r7, #24]
 8009154:	f000 f908 	bl	8009368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <pvPortMalloc+0x188>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <pvPortMalloc+0x188>)
 8009164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <pvPortMalloc+0x188>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <pvPortMalloc+0x190>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d203      	bcs.n	800917a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009172:	4b17      	ldr	r3, [pc, #92]	; (80091d0 <pvPortMalloc+0x188>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <pvPortMalloc+0x190>)
 8009178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <pvPortMalloc+0x184>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	431a      	orrs	r2, r3
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <pvPortMalloc+0x194>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	4a11      	ldr	r2, [pc, #68]	; (80091dc <pvPortMalloc+0x194>)
 8009196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009198:	f7fe fbdc 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <pvPortMalloc+0x174>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60fb      	str	r3, [r7, #12]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <pvPortMalloc+0x172>
	return pvReturn;
 80091bc:	69fb      	ldr	r3, [r7, #28]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20004a70 	.word	0x20004a70
 80091cc:	20004a84 	.word	0x20004a84
 80091d0:	20004a74 	.word	0x20004a74
 80091d4:	20004a68 	.word	0x20004a68
 80091d8:	20004a78 	.word	0x20004a78
 80091dc:	20004a7c 	.word	0x20004a7c

080091e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d04d      	beq.n	800928e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091f2:	2308      	movs	r3, #8
 80091f4:	425b      	negs	r3, r3
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	4b24      	ldr	r3, [pc, #144]	; (8009298 <vPortFree+0xb8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4013      	ands	r3, r2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <vPortFree+0x44>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60fb      	str	r3, [r7, #12]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <vPortFree+0x62>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	60bb      	str	r3, [r7, #8]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <vPortFree+0xb8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01e      	beq.n	800928e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11a      	bne.n	800928e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <vPortFree+0xb8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009268:	f7fe fb66 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <vPortFree+0xbc>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4413      	add	r3, r2
 8009276:	4a09      	ldr	r2, [pc, #36]	; (800929c <vPortFree+0xbc>)
 8009278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f000 f874 	bl	8009368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <vPortFree+0xc0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	4a06      	ldr	r2, [pc, #24]	; (80092a0 <vPortFree+0xc0>)
 8009288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800928a:	f7fe fb63 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800928e:	bf00      	nop
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20004a84 	.word	0x20004a84
 800929c:	20004a74 	.word	0x20004a74
 80092a0:	20004a80 	.word	0x20004a80

080092a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <prvHeapInit+0xac>)
 80092b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00c      	beq.n	80092d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3307      	adds	r3, #7
 80092c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0307 	bic.w	r3, r3, #7
 80092ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <prvHeapInit+0xac>)
 80092d4:	4413      	add	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092dc:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <prvHeapInit+0xb0>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092e2:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <prvHeapInit+0xb0>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092f0:	2208      	movs	r2, #8
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a15      	ldr	r2, [pc, #84]	; (8009358 <prvHeapInit+0xb4>)
 8009304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009306:	4b14      	ldr	r3, [pc, #80]	; (8009358 <prvHeapInit+0xb4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800930e:	4b12      	ldr	r3, [pc, #72]	; (8009358 <prvHeapInit+0xb4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009324:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <prvHeapInit+0xb4>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	4a0a      	ldr	r2, [pc, #40]	; (800935c <prvHeapInit+0xb8>)
 8009332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <prvHeapInit+0xbc>)
 800933a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <prvHeapInit+0xc0>)
 800933e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009342:	601a      	str	r2, [r3, #0]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20000e68 	.word	0x20000e68
 8009354:	20004a68 	.word	0x20004a68
 8009358:	20004a70 	.word	0x20004a70
 800935c:	20004a78 	.word	0x20004a78
 8009360:	20004a74 	.word	0x20004a74
 8009364:	20004a84 	.word	0x20004a84

08009368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009370:	4b28      	ldr	r3, [pc, #160]	; (8009414 <prvInsertBlockIntoFreeList+0xac>)
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e002      	b.n	800937c <prvInsertBlockIntoFreeList+0x14>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	429a      	cmp	r2, r3
 8009384:	d8f7      	bhi.n	8009376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4413      	add	r3, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	d108      	bne.n	80093aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	441a      	add	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d118      	bne.n	80093f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b15      	ldr	r3, [pc, #84]	; (8009418 <prvInsertBlockIntoFreeList+0xb0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d00d      	beq.n	80093e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	441a      	add	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	e008      	b.n	80093f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <prvInsertBlockIntoFreeList+0xb0>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e003      	b.n	80093f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d002      	beq.n	8009406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	20004a68 	.word	0x20004a68
 8009418:	20004a70 	.word	0x20004a70

0800941c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	330c      	adds	r3, #12
 800942c:	461a      	mov	r2, r3
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f002 f9d5 	bl	800b7e0 <tcpip_send_msg_wait_sem>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800943a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009448:	e001      	b.n	800944e <netconn_apimsg+0x32>
  }
  return err;
 800944a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08c      	sub	sp, #48	; 0x30
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	603a      	str	r2, [r7, #0]
 8009462:	71fb      	strb	r3, [r7, #7]
 8009464:	460b      	mov	r3, r1
 8009466:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009468:	79fb      	ldrb	r3, [r7, #7]
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f000 ffeb 	bl	800a448 <netconn_alloc>
 8009472:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d054      	beq.n	8009524 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800947a:	79bb      	ldrb	r3, [r7, #6]
 800947c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009482:	f107 0308 	add.w	r3, r7, #8
 8009486:	4619      	mov	r1, r3
 8009488:	4829      	ldr	r0, [pc, #164]	; (8009530 <netconn_new_with_proto_and_callback+0xd8>)
 800948a:	f7ff ffc7 	bl	800941c <netconn_apimsg>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009494:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009498:	2b00      	cmp	r3, #0
 800949a:	d043      	beq.n	8009524 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <netconn_new_with_proto_and_callback+0x58>
 80094a4:	4b23      	ldr	r3, [pc, #140]	; (8009534 <netconn_new_with_proto_and_callback+0xdc>)
 80094a6:	22a3      	movs	r2, #163	; 0xa3
 80094a8:	4923      	ldr	r1, [pc, #140]	; (8009538 <netconn_new_with_proto_and_callback+0xe0>)
 80094aa:	4824      	ldr	r0, [pc, #144]	; (800953c <netconn_new_with_proto_and_callback+0xe4>)
 80094ac:	f00d fda8 	bl	8017000 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	3310      	adds	r3, #16
 80094b4:	4618      	mov	r0, r3
 80094b6:	f00d fa6d 	bl	8016994 <sys_mbox_valid>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <netconn_new_with_proto_and_callback+0x74>
 80094c0:	4b1c      	ldr	r3, [pc, #112]	; (8009534 <netconn_new_with_proto_and_callback+0xdc>)
 80094c2:	22a4      	movs	r2, #164	; 0xa4
 80094c4:	491e      	ldr	r1, [pc, #120]	; (8009540 <netconn_new_with_proto_and_callback+0xe8>)
 80094c6:	481d      	ldr	r0, [pc, #116]	; (800953c <netconn_new_with_proto_and_callback+0xe4>)
 80094c8:	f00d fd9a 	bl	8017000 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ce:	3314      	adds	r3, #20
 80094d0:	4618      	mov	r0, r3
 80094d2:	f00d fa5f 	bl	8016994 <sys_mbox_valid>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <netconn_new_with_proto_and_callback+0x90>
 80094dc:	4b15      	ldr	r3, [pc, #84]	; (8009534 <netconn_new_with_proto_and_callback+0xdc>)
 80094de:	22a6      	movs	r2, #166	; 0xa6
 80094e0:	4918      	ldr	r1, [pc, #96]	; (8009544 <netconn_new_with_proto_and_callback+0xec>)
 80094e2:	4816      	ldr	r0, [pc, #88]	; (800953c <netconn_new_with_proto_and_callback+0xe4>)
 80094e4:	f00d fd8c 	bl	8017000 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	330c      	adds	r3, #12
 80094ec:	4618      	mov	r0, r3
 80094ee:	f00d fadf 	bl	8016ab0 <sys_sem_valid>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <netconn_new_with_proto_and_callback+0xac>
 80094f8:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <netconn_new_with_proto_and_callback+0xdc>)
 80094fa:	22a9      	movs	r2, #169	; 0xa9
 80094fc:	4912      	ldr	r1, [pc, #72]	; (8009548 <netconn_new_with_proto_and_callback+0xf0>)
 80094fe:	480f      	ldr	r0, [pc, #60]	; (800953c <netconn_new_with_proto_and_callback+0xe4>)
 8009500:	f00d fd7e 	bl	8017000 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	330c      	adds	r3, #12
 8009508:	4618      	mov	r0, r3
 800950a:	f00d fac4 	bl	8016a96 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	3310      	adds	r3, #16
 8009512:	4618      	mov	r0, r3
 8009514:	f00d f9ca 	bl	80168ac <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800951a:	2007      	movs	r0, #7
 800951c:	f002 fec8 	bl	800c2b0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009526:	4618      	mov	r0, r3
 8009528:	3730      	adds	r7, #48	; 0x30
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	0800a41d 	.word	0x0800a41d
 8009534:	0801821c 	.word	0x0801821c
 8009538:	08018250 	.word	0x08018250
 800953c:	08018274 	.word	0x08018274
 8009540:	0801829c 	.word	0x0801829c
 8009544:	080182b4 	.word	0x080182b4
 8009548:	080182d8 	.word	0x080182d8

0800954c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08c      	sub	sp, #48	; 0x30
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	e014      	b.n	8009588 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009562:	2329      	movs	r3, #41	; 0x29
 8009564:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	4619      	mov	r1, r3
 800956c:	4808      	ldr	r0, [pc, #32]	; (8009590 <netconn_prepare_delete+0x44>)
 800956e:	f7ff ff55 	bl	800941c <netconn_apimsg>
 8009572:	4603      	mov	r3, r0
 8009574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <netconn_prepare_delete+0x3a>
    return err;
 8009580:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009584:	e000      	b.n	8009588 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3730      	adds	r7, #48	; 0x30
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	0800a981 	.word	0x0800a981

08009594 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <netconn_delete+0x12>
    return ERR_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e00d      	b.n	80095c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ffd0 	bl	800954c <netconn_prepare_delete>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80095b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <netconn_delete+0x2a>
    netconn_free(conn);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 ffb3 	bl	800a524 <netconn_free>
  }
  return err;
 80095be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <netconn_bind+0x28>
 80095e0:	4b11      	ldr	r3, [pc, #68]	; (8009628 <netconn_bind+0x5c>)
 80095e2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80095e6:	4911      	ldr	r1, [pc, #68]	; (800962c <netconn_bind+0x60>)
 80095e8:	4811      	ldr	r0, [pc, #68]	; (8009630 <netconn_bind+0x64>)
 80095ea:	f00d fd09 	bl	8017000 <iprintf>
 80095ee:	f06f 030f 	mvn.w	r3, #15
 80095f2:	e015      	b.n	8009620 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80095fa:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <netconn_bind+0x68>)
 80095fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800960a:	f107 0314 	add.w	r3, r7, #20
 800960e:	4619      	mov	r1, r3
 8009610:	4809      	ldr	r0, [pc, #36]	; (8009638 <netconn_bind+0x6c>)
 8009612:	f7ff ff03 	bl	800941c <netconn_apimsg>
 8009616:	4603      	mov	r3, r0
 8009618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800961c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009620:	4618      	mov	r0, r3
 8009622:	3738      	adds	r7, #56	; 0x38
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	0801821c 	.word	0x0801821c
 800962c:	08018354 	.word	0x08018354
 8009630:	08018274 	.word	0x08018274
 8009634:	0801b8e4 	.word	0x0801b8e4
 8009638:	0800ab49 	.word	0x0800ab49

0800963c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08e      	sub	sp, #56	; 0x38
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <netconn_connect+0x28>
 8009650:	4b11      	ldr	r3, [pc, #68]	; (8009698 <netconn_connect+0x5c>)
 8009652:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009656:	4911      	ldr	r1, [pc, #68]	; (800969c <netconn_connect+0x60>)
 8009658:	4811      	ldr	r0, [pc, #68]	; (80096a0 <netconn_connect+0x64>)
 800965a:	f00d fcd1 	bl	8017000 <iprintf>
 800965e:	f06f 030f 	mvn.w	r3, #15
 8009662:	e015      	b.n	8009690 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800966a:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <netconn_connect+0x68>)
 800966c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800967a:	f107 0314 	add.w	r3, r7, #20
 800967e:	4619      	mov	r1, r3
 8009680:	4809      	ldr	r0, [pc, #36]	; (80096a8 <netconn_connect+0x6c>)
 8009682:	f7ff fecb 	bl	800941c <netconn_apimsg>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800968c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009690:	4618      	mov	r0, r3
 8009692:	3738      	adds	r7, #56	; 0x38
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	0801821c 	.word	0x0801821c
 800969c:	08018390 	.word	0x08018390
 80096a0:	08018274 	.word	0x08018274
 80096a4:	0801b8e4 	.word	0x0801b8e4
 80096a8:	0800acdd 	.word	0x0800acdd

080096ac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <netconn_recv_data+0x2c>
 80096c4:	4b58      	ldr	r3, [pc, #352]	; (8009828 <netconn_recv_data+0x17c>)
 80096c6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80096ca:	4958      	ldr	r1, [pc, #352]	; (800982c <netconn_recv_data+0x180>)
 80096cc:	4858      	ldr	r0, [pc, #352]	; (8009830 <netconn_recv_data+0x184>)
 80096ce:	f00d fc97 	bl	8017000 <iprintf>
 80096d2:	f06f 030f 	mvn.w	r3, #15
 80096d6:	e0a2      	b.n	800981e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d109      	bne.n	80096f8 <netconn_recv_data+0x4c>
 80096e4:	4b50      	ldr	r3, [pc, #320]	; (8009828 <netconn_recv_data+0x17c>)
 80096e6:	f240 224a 	movw	r2, #586	; 0x24a
 80096ea:	4952      	ldr	r1, [pc, #328]	; (8009834 <netconn_recv_data+0x188>)
 80096ec:	4850      	ldr	r0, [pc, #320]	; (8009830 <netconn_recv_data+0x184>)
 80096ee:	f00d fc87 	bl	8017000 <iprintf>
 80096f2:	f06f 030f 	mvn.w	r3, #15
 80096f6:	e092      	b.n	800981e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3310      	adds	r3, #16
 80096fc:	4618      	mov	r0, r3
 80096fe:	f00d f949 	bl	8016994 <sys_mbox_valid>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10e      	bne.n	8009726 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fad4 	bl	8009cb6 <netconn_err>
 800970e:	4603      	mov	r3, r0
 8009710:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009712:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800971a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800971e:	e07e      	b.n	800981e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009720:	f06f 030a 	mvn.w	r3, #10
 8009724:	e07b      	b.n	800981e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	7f1b      	ldrb	r3, [r3, #28]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10f      	bne.n	8009752 <netconn_recv_data+0xa6>
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	7f1b      	ldrb	r3, [r3, #28]
 8009740:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009744:	2b00      	cmp	r3, #0
 8009746:	d104      	bne.n	8009752 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d023      	beq.n	800979a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3310      	adds	r3, #16
 8009756:	f107 0218 	add.w	r2, r7, #24
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f00d f902 	bl	8016966 <sys_arch_mbox_tryfetch>
 8009762:	4603      	mov	r3, r0
 8009764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009768:	d11f      	bne.n	80097aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 faa3 	bl	8009cb6 <netconn_err>
 8009770:	4603      	mov	r3, r0
 8009772:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009774:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800977c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009780:	e04d      	b.n	800981e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7f1b      	ldrb	r3, [r3, #28]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800978e:	f06f 030a 	mvn.w	r3, #10
 8009792:	e044      	b.n	800981e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009794:	f06f 0306 	mvn.w	r3, #6
 8009798:	e041      	b.n	800981e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3310      	adds	r3, #16
 800979e:	f107 0118 	add.w	r1, r7, #24
 80097a2:	2200      	movs	r2, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f00d f8ad 	bl	8016904 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d117      	bne.n	80097e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f107 0217 	add.w	r2, r7, #23
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 faca 	bl	8009d58 <lwip_netconn_is_err_msg>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80097ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097ce:	f113 0f0f 	cmn.w	r3, #15
 80097d2:	d101      	bne.n	80097d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	e022      	b.n	800981e <netconn_recv_data+0x172>
      }
      return err;
 80097d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097dc:	e01f      	b.n	800981e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	891b      	ldrh	r3, [r3, #8]
 80097e2:	83fb      	strh	r3, [r7, #30]
 80097e4:	e00d      	b.n	8009802 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <netconn_recv_data+0x14e>
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <netconn_recv_data+0x17c>)
 80097ee:	f240 2291 	movw	r2, #657	; 0x291
 80097f2:	4911      	ldr	r1, [pc, #68]	; (8009838 <netconn_recv_data+0x18c>)
 80097f4:	480e      	ldr	r0, [pc, #56]	; (8009830 <netconn_recv_data+0x184>)
 80097f6:	f00d fc03 	bl	8017000 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	891b      	ldrh	r3, [r3, #8]
 8009800:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <netconn_recv_data+0x16a>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	8bfa      	ldrh	r2, [r7, #30]
 8009810:	2101      	movs	r1, #1
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	0801821c 	.word	0x0801821c
 800982c:	08018434 	.word	0x08018434
 8009830:	08018274 	.word	0x08018274
 8009834:	08018454 	.word	0x08018454
 8009838:	08018470 	.word	0x08018470

0800983c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <netconn_tcp_recvd_msg+0x1e>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009856:	2b10      	cmp	r3, #16
 8009858:	d009      	beq.n	800986e <netconn_tcp_recvd_msg+0x32>
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <netconn_tcp_recvd_msg+0x50>)
 800985c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009860:	490b      	ldr	r1, [pc, #44]	; (8009890 <netconn_tcp_recvd_msg+0x54>)
 8009862:	480c      	ldr	r0, [pc, #48]	; (8009894 <netconn_tcp_recvd_msg+0x58>)
 8009864:	f00d fbcc 	bl	8017000 <iprintf>
 8009868:	f06f 030f 	mvn.w	r3, #15
 800986c:	e00a      	b.n	8009884 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4806      	ldr	r0, [pc, #24]	; (8009898 <netconn_tcp_recvd_msg+0x5c>)
 800987e:	f7ff fdcd 	bl	800941c <netconn_apimsg>
 8009882:	4603      	mov	r3, r0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	0801821c 	.word	0x0801821c
 8009890:	0801847c 	.word	0x0801847c
 8009894:	08018274 	.word	0x08018274
 8009898:	0800ae59 	.word	0x0800ae59

0800989c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b090      	sub	sp, #64	; 0x40
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3310      	adds	r3, #16
 80098ae:	4618      	mov	r0, r3
 80098b0:	f00d f870 	bl	8016994 <sys_mbox_valid>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80098ba:	f06f 030a 	mvn.w	r3, #10
 80098be:	e06d      	b.n	800999c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	7f1b      	ldrb	r3, [r3, #28]
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da07      	bge.n	80098da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7f1b      	ldrb	r3, [r3, #28]
 80098ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80098d8:	e039      	b.n	800994e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	461a      	mov	r2, r3
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fee3 	bl	80096ac <netconn_recv_data>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80098ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80098f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098f8:	e050      	b.n	800999c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	f003 0308 	and.w	r3, r3, #8
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10e      	bne.n	8009928 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <netconn_recv_data_tcp+0x7a>
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	891b      	ldrh	r3, [r3, #8]
 8009914:	e000      	b.n	8009918 <netconn_recv_data_tcp+0x7c>
 8009916:	2301      	movs	r3, #1
 8009918:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800991a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800991c:	f107 0214 	add.w	r2, r7, #20
 8009920:	4619      	mov	r1, r3
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7ff ff8a 	bl	800983c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	2b00      	cmp	r3, #0
 800992c:	d134      	bne.n	8009998 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	7f1b      	ldrb	r3, [r3, #28]
 800993c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009940:	b2da      	uxtb	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009946:	f06f 0306 	mvn.w	r3, #6
 800994a:	e027      	b.n	800999c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800994c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d005      	beq.n	8009962 <netconn_recv_data_tcp+0xc6>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2200      	movs	r2, #0
 800995c:	2101      	movs	r1, #1
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10f      	bne.n	800998a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f9a3 	bl	8009cb6 <netconn_err>
 8009970:	4603      	mov	r3, r0
 8009972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009976:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <netconn_recv_data_tcp+0xe8>
          return err;
 800997e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009982:	e00b      	b.n	800999c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009984:	f06f 030d 	mvn.w	r3, #13
 8009988:	e008      	b.n	800999c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800998a:	2101      	movs	r1, #1
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f955 	bl	8009c3c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009992:	f06f 030e 	mvn.w	r3, #14
 8009996:	e001      	b.n	800999c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009998:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800999c:	4618      	mov	r0, r3
 800999e:	3740      	adds	r7, #64	; 0x40
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <netconn_recv+0x28>
 80099b8:	4b32      	ldr	r3, [pc, #200]	; (8009a84 <netconn_recv+0xe0>)
 80099ba:	f240 3263 	movw	r2, #867	; 0x363
 80099be:	4932      	ldr	r1, [pc, #200]	; (8009a88 <netconn_recv+0xe4>)
 80099c0:	4832      	ldr	r0, [pc, #200]	; (8009a8c <netconn_recv+0xe8>)
 80099c2:	f00d fb1d 	bl	8017000 <iprintf>
 80099c6:	f06f 030f 	mvn.w	r3, #15
 80099ca:	e056      	b.n	8009a7a <netconn_recv+0xd6>
  *new_buf = NULL;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2200      	movs	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <netconn_recv+0x48>
 80099d8:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <netconn_recv+0xe0>)
 80099da:	f240 3265 	movw	r2, #869	; 0x365
 80099de:	492c      	ldr	r1, [pc, #176]	; (8009a90 <netconn_recv+0xec>)
 80099e0:	482a      	ldr	r0, [pc, #168]	; (8009a8c <netconn_recv+0xe8>)
 80099e2:	f00d fb0d 	bl	8017000 <iprintf>
 80099e6:	f06f 030f 	mvn.w	r3, #15
 80099ea:	e046      	b.n	8009a7a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d13a      	bne.n	8009a6e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80099fc:	2006      	movs	r0, #6
 80099fe:	f002 fc05 	bl	800c20c <memp_malloc>
 8009a02:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <netconn_recv+0x6c>
      return ERR_MEM;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	e034      	b.n	8009a7a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009a10:	f107 030c 	add.w	r3, r7, #12
 8009a14:	2200      	movs	r2, #0
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff ff3f 	bl	800989c <netconn_recv_data_tcp>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009a22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d006      	beq.n	8009a38 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009a2a:	6979      	ldr	r1, [r7, #20]
 8009a2c:	2006      	movs	r0, #6
 8009a2e:	f002 fc3f 	bl	800c2b0 <memp_free>
      return err;
 8009a32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a36:	e020      	b.n	8009a7a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <netconn_recv+0xa8>
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <netconn_recv+0xe0>)
 8009a40:	f240 3279 	movw	r2, #889	; 0x379
 8009a44:	4913      	ldr	r1, [pc, #76]	; (8009a94 <netconn_recv+0xf0>)
 8009a46:	4811      	ldr	r0, [pc, #68]	; (8009a8c <netconn_recv+0xe8>)
 8009a48:	f00d fada 	bl	8017000 <iprintf>

    buf->p = p;
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e005      	b.n	8009a7a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009a6e:	2200      	movs	r2, #0
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fe1a 	bl	80096ac <netconn_recv_data>
 8009a78:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	0801821c 	.word	0x0801821c
 8009a88:	08018434 	.word	0x08018434
 8009a8c:	08018274 	.word	0x08018274
 8009a90:	08018454 	.word	0x08018454
 8009a94:	080184cc 	.word	0x080184cc

08009a98 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	f107 0110 	add.w	r1, r7, #16
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	2201      	movs	r2, #1
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 f805 	bl	8009acc <netconn_write_vectors_partly>
 8009ac2:	4603      	mov	r3, r0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b092      	sub	sp, #72	; 0x48
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	460b      	mov	r3, r1
 8009adc:	80fb      	strh	r3, [r7, #6]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <netconn_write_vectors_partly+0x30>
 8009ae8:	4b4e      	ldr	r3, [pc, #312]	; (8009c24 <netconn_write_vectors_partly+0x158>)
 8009aea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009aee:	494e      	ldr	r1, [pc, #312]	; (8009c28 <netconn_write_vectors_partly+0x15c>)
 8009af0:	484e      	ldr	r0, [pc, #312]	; (8009c2c <netconn_write_vectors_partly+0x160>)
 8009af2:	f00d fa85 	bl	8017000 <iprintf>
 8009af6:	f06f 030f 	mvn.w	r3, #15
 8009afa:	e08e      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d009      	beq.n	8009b1c <netconn_write_vectors_partly+0x50>
 8009b08:	4b46      	ldr	r3, [pc, #280]	; (8009c24 <netconn_write_vectors_partly+0x158>)
 8009b0a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009b0e:	4948      	ldr	r1, [pc, #288]	; (8009c30 <netconn_write_vectors_partly+0x164>)
 8009b10:	4846      	ldr	r0, [pc, #280]	; (8009c2c <netconn_write_vectors_partly+0x160>)
 8009b12:	f00d fa75 	bl	8017000 <iprintf>
 8009b16:	f06f 0305 	mvn.w	r3, #5
 8009b1a:	e07e      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	7f1b      	ldrb	r3, [r3, #28]
 8009b20:	f003 0302 	and.w	r3, r3, #2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <netconn_write_vectors_partly+0x66>
 8009b28:	797b      	ldrb	r3, [r7, #5]
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <netconn_write_vectors_partly+0x6a>
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <netconn_write_vectors_partly+0x6c>
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009b3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <netconn_write_vectors_partly+0x84>
 8009b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009b4a:	f06f 0305 	mvn.w	r3, #5
 8009b4e:	e064      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009b54:	2300      	movs	r3, #0
 8009b56:	643b      	str	r3, [r7, #64]	; 0x40
 8009b58:	e015      	b.n	8009b86 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	4413      	add	r3, r2
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b66:	4413      	add	r3, r2
 8009b68:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d202      	bcs.n	8009b80 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009b7a:	f06f 0305 	mvn.w	r3, #5
 8009b7e:	e04c      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b82:	3301      	adds	r3, #1
 8009b84:	643b      	str	r3, [r7, #64]	; 0x40
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	dbe5      	blt.n	8009b5a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e040      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da0a      	bge.n	8009bb4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d102      	bne.n	8009baa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009ba4:	f06f 0305 	mvn.w	r3, #5
 8009ba8:	e037      	b.n	8009c1a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009baa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009bbc:	88fb      	ldrh	r3, [r7, #6]
 8009bbe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009bc4:	797b      	ldrb	r3, [r7, #5]
 8009bc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4816      	ldr	r0, [pc, #88]	; (8009c34 <netconn_write_vectors_partly+0x168>)
 8009bda:	f7ff fc1f 	bl	800941c <netconn_apimsg>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009be4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d114      	bne.n	8009c16 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d006      	beq.n	8009c16 <netconn_write_vectors_partly+0x14a>
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <netconn_write_vectors_partly+0x158>)
 8009c0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c0e:	490a      	ldr	r1, [pc, #40]	; (8009c38 <netconn_write_vectors_partly+0x16c>)
 8009c10:	4806      	ldr	r0, [pc, #24]	; (8009c2c <netconn_write_vectors_partly+0x160>)
 8009c12:	f00d f9f5 	bl	8017000 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009c16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3748      	adds	r7, #72	; 0x48
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	0801821c 	.word	0x0801821c
 8009c28:	080184f4 	.word	0x080184f4
 8009c2c:	08018274 	.word	0x08018274
 8009c30:	08018510 	.word	0x08018510
 8009c34:	0800b261 	.word	0x0800b261
 8009c38:	08018534 	.word	0x08018534

08009c3c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08c      	sub	sp, #48	; 0x30
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <netconn_close_shutdown+0x26>
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <netconn_close_shutdown+0x50>)
 8009c50:	f240 4247 	movw	r2, #1095	; 0x447
 8009c54:	490e      	ldr	r1, [pc, #56]	; (8009c90 <netconn_close_shutdown+0x54>)
 8009c56:	480f      	ldr	r0, [pc, #60]	; (8009c94 <netconn_close_shutdown+0x58>)
 8009c58:	f00d f9d2 	bl	8017000 <iprintf>
 8009c5c:	f06f 030f 	mvn.w	r3, #15
 8009c60:	e010      	b.n	8009c84 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c6a:	2329      	movs	r3, #41	; 0x29
 8009c6c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009c6e:	f107 030c 	add.w	r3, r7, #12
 8009c72:	4619      	mov	r1, r3
 8009c74:	4808      	ldr	r0, [pc, #32]	; (8009c98 <netconn_close_shutdown+0x5c>)
 8009c76:	f7ff fbd1 	bl	800941c <netconn_apimsg>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009c80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3730      	adds	r7, #48	; 0x30
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	0801821c 	.word	0x0801821c
 8009c90:	08018558 	.word	0x08018558
 8009c94:	08018274 	.word	0x08018274
 8009c98:	0800b379 	.word	0x0800b379

08009c9c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009ca4:	2103      	movs	r1, #3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff ffc8 	bl	8009c3c <netconn_close_shutdown>
 8009cac:	4603      	mov	r3, r0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <netconn_err+0x12>
    return ERR_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e00d      	b.n	8009ce4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009cc8:	f00c ff6e 	bl	8016ba8 <sys_arch_protect>
 8009ccc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7a1b      	ldrb	r3, [r3, #8]
 8009cd2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f00c ff72 	bl	8016bc4 <sys_arch_unprotect>
  return err;
 8009ce0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfa:	f113 0f0d 	cmn.w	r3, #13
 8009cfe:	d009      	beq.n	8009d14 <lwip_netconn_err_to_msg+0x28>
 8009d00:	f113 0f0d 	cmn.w	r3, #13
 8009d04:	dc0c      	bgt.n	8009d20 <lwip_netconn_err_to_msg+0x34>
 8009d06:	f113 0f0f 	cmn.w	r3, #15
 8009d0a:	d007      	beq.n	8009d1c <lwip_netconn_err_to_msg+0x30>
 8009d0c:	f113 0f0e 	cmn.w	r3, #14
 8009d10:	d002      	beq.n	8009d18 <lwip_netconn_err_to_msg+0x2c>
 8009d12:	e005      	b.n	8009d20 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <lwip_netconn_err_to_msg+0x54>)
 8009d16:	e00e      	b.n	8009d36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <lwip_netconn_err_to_msg+0x58>)
 8009d1a:	e00c      	b.n	8009d36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <lwip_netconn_err_to_msg+0x5c>)
 8009d1e:	e00a      	b.n	8009d36 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <lwip_netconn_err_to_msg+0x48>
 8009d28:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <lwip_netconn_err_to_msg+0x60>)
 8009d2a:	227d      	movs	r2, #125	; 0x7d
 8009d2c:	4908      	ldr	r1, [pc, #32]	; (8009d50 <lwip_netconn_err_to_msg+0x64>)
 8009d2e:	4809      	ldr	r0, [pc, #36]	; (8009d54 <lwip_netconn_err_to_msg+0x68>)
 8009d30:	f00d f966 	bl	8017000 <iprintf>
      return NULL;
 8009d34:	2300      	movs	r3, #0
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	0801b7d0 	.word	0x0801b7d0
 8009d44:	0801b7d1 	.word	0x0801b7d1
 8009d48:	0801b7d2 	.word	0x0801b7d2
 8009d4c:	08018574 	.word	0x08018574
 8009d50:	080185a8 	.word	0x080185a8
 8009d54:	080185b8 	.word	0x080185b8

08009d58 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <lwip_netconn_is_err_msg+0x1c>
 8009d68:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <lwip_netconn_is_err_msg+0x5c>)
 8009d6a:	2285      	movs	r2, #133	; 0x85
 8009d6c:	4912      	ldr	r1, [pc, #72]	; (8009db8 <lwip_netconn_is_err_msg+0x60>)
 8009d6e:	4813      	ldr	r0, [pc, #76]	; (8009dbc <lwip_netconn_is_err_msg+0x64>)
 8009d70:	f00d f946 	bl	8017000 <iprintf>

  if (msg == &netconn_aborted) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a12      	ldr	r2, [pc, #72]	; (8009dc0 <lwip_netconn_is_err_msg+0x68>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d104      	bne.n	8009d86 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	22f3      	movs	r2, #243	; 0xf3
 8009d80:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e012      	b.n	8009dac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a0e      	ldr	r2, [pc, #56]	; (8009dc4 <lwip_netconn_is_err_msg+0x6c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d104      	bne.n	8009d98 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	22f2      	movs	r2, #242	; 0xf2
 8009d92:	701a      	strb	r2, [r3, #0]
    return 1;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e009      	b.n	8009dac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a0b      	ldr	r2, [pc, #44]	; (8009dc8 <lwip_netconn_is_err_msg+0x70>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d104      	bne.n	8009daa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	22f1      	movs	r2, #241	; 0xf1
 8009da4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	08018574 	.word	0x08018574
 8009db8:	080185e0 	.word	0x080185e0
 8009dbc:	080185b8 	.word	0x080185b8
 8009dc0:	0801b7d0 	.word	0x0801b7d0
 8009dc4:	0801b7d1 	.word	0x0801b7d1
 8009dc8:	0801b7d2 	.word	0x0801b7d2

08009dcc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d105      	bne.n	8009dec <recv_udp+0x20>
 8009de0:	4b34      	ldr	r3, [pc, #208]	; (8009eb4 <recv_udp+0xe8>)
 8009de2:	22e5      	movs	r2, #229	; 0xe5
 8009de4:	4934      	ldr	r1, [pc, #208]	; (8009eb8 <recv_udp+0xec>)
 8009de6:	4835      	ldr	r0, [pc, #212]	; (8009ebc <recv_udp+0xf0>)
 8009de8:	f00d f90a 	bl	8017000 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <recv_udp+0x32>
 8009df2:	4b30      	ldr	r3, [pc, #192]	; (8009eb4 <recv_udp+0xe8>)
 8009df4:	22e6      	movs	r2, #230	; 0xe6
 8009df6:	4932      	ldr	r1, [pc, #200]	; (8009ec0 <recv_udp+0xf4>)
 8009df8:	4830      	ldr	r0, [pc, #192]	; (8009ebc <recv_udp+0xf0>)
 8009dfa:	f00d f901 	bl	8017000 <iprintf>
  conn = (struct netconn *)arg;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <recv_udp+0x44>
    pbuf_free(p);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f003 f8f9 	bl	800d000 <pbuf_free>
    return;
 8009e0e:	e04d      	b.n	8009eac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d005      	beq.n	8009e26 <recv_udp+0x5a>
 8009e1a:	4b26      	ldr	r3, [pc, #152]	; (8009eb4 <recv_udp+0xe8>)
 8009e1c:	22ee      	movs	r2, #238	; 0xee
 8009e1e:	4929      	ldr	r1, [pc, #164]	; (8009ec4 <recv_udp+0xf8>)
 8009e20:	4826      	ldr	r0, [pc, #152]	; (8009ebc <recv_udp+0xf0>)
 8009e22:	f00d f8ed 	bl	8017000 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	3310      	adds	r3, #16
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f00c fdb2 	bl	8016994 <sys_mbox_valid>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d103      	bne.n	8009e3e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f003 f8e2 	bl	800d000 <pbuf_free>
    return;
 8009e3c:	e036      	b.n	8009eac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009e3e:	2006      	movs	r0, #6
 8009e40:	f002 f9e4 	bl	800c20c <memp_malloc>
 8009e44:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <recv_udp+0x88>
    pbuf_free(p);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f003 f8d7 	bl	800d000 <pbuf_free>
    return;
 8009e52:	e02b      	b.n	8009eac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <recv_udp+0xa0>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	e000      	b.n	8009e6e <recv_udp+0xa2>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e76:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	891b      	ldrh	r3, [r3, #8]
 8009e7c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	3310      	adds	r3, #16
 8009e82:	69b9      	ldr	r1, [r7, #24]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f00c fd23 	bl	80168d0 <sys_mbox_trypost>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009e90:	69b8      	ldr	r0, [r7, #24]
 8009e92:	f001 fafd 	bl	800b490 <netbuf_delete>
    return;
 8009e96:	e009      	b.n	8009eac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <recv_udp+0xe0>
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	8afa      	ldrh	r2, [r7, #22]
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	69f8      	ldr	r0, [r7, #28]
 8009eaa:	4798      	blx	r3
  }
}
 8009eac:	3720      	adds	r7, #32
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	08018574 	.word	0x08018574
 8009eb8:	080185ec 	.word	0x080185ec
 8009ebc:	080185b8 	.word	0x080185b8
 8009ec0:	08018610 	.word	0x08018610
 8009ec4:	08018630 	.word	0x08018630

08009ec8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <recv_tcp+0x22>
 8009edc:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <recv_tcp+0xf0>)
 8009ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ee2:	4936      	ldr	r1, [pc, #216]	; (8009fbc <recv_tcp+0xf4>)
 8009ee4:	4836      	ldr	r0, [pc, #216]	; (8009fc0 <recv_tcp+0xf8>)
 8009ee6:	f00d f88b 	bl	8017000 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d106      	bne.n	8009efe <recv_tcp+0x36>
 8009ef0:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <recv_tcp+0xf0>)
 8009ef2:	f240 122d 	movw	r2, #301	; 0x12d
 8009ef6:	4933      	ldr	r1, [pc, #204]	; (8009fc4 <recv_tcp+0xfc>)
 8009ef8:	4831      	ldr	r0, [pc, #196]	; (8009fc0 <recv_tcp+0xf8>)
 8009efa:	f00d f881 	bl	8017000 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <recv_tcp+0x4c>
 8009f06:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <recv_tcp+0xf0>)
 8009f08:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009f0c:	492e      	ldr	r1, [pc, #184]	; (8009fc8 <recv_tcp+0x100>)
 8009f0e:	482c      	ldr	r0, [pc, #176]	; (8009fc0 <recv_tcp+0xf8>)
 8009f10:	f00d f876 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <recv_tcp+0x5c>
    return ERR_VAL;
 8009f1e:	f06f 0305 	mvn.w	r3, #5
 8009f22:	e045      	b.n	8009fb0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d006      	beq.n	8009f3c <recv_tcp+0x74>
 8009f2e:	4b22      	ldr	r3, [pc, #136]	; (8009fb8 <recv_tcp+0xf0>)
 8009f30:	f240 1235 	movw	r2, #309	; 0x135
 8009f34:	4925      	ldr	r1, [pc, #148]	; (8009fcc <recv_tcp+0x104>)
 8009f36:	4822      	ldr	r0, [pc, #136]	; (8009fc0 <recv_tcp+0xf8>)
 8009f38:	f00d f862 	bl	8017000 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3310      	adds	r3, #16
 8009f40:	4618      	mov	r0, r3
 8009f42:	f00c fd27 	bl	8016994 <sys_mbox_valid>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	891b      	ldrh	r3, [r3, #8]
 8009f56:	4619      	mov	r1, r3
 8009f58:	68b8      	ldr	r0, [r7, #8]
 8009f5a:	f003 ff3f 	bl	800dddc <tcp_recved>
      pbuf_free(p);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f003 f84e 	bl	800d000 <pbuf_free>
    }
    return ERR_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	e023      	b.n	8009fb0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <recv_tcp+0xb2>
    msg = p;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	891b      	ldrh	r3, [r3, #8]
 8009f76:	83fb      	strh	r3, [r7, #30]
 8009f78:	e003      	b.n	8009f82 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009f7a:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <recv_tcp+0x108>)
 8009f7c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	3310      	adds	r3, #16
 8009f86:	69b9      	ldr	r1, [r7, #24]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f00c fca1 	bl	80168d0 <sys_mbox_trypost>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295
 8009f98:	e00a      	b.n	8009fb0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <recv_tcp+0xe6>
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	8bfa      	ldrh	r2, [r7, #30]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6978      	ldr	r0, [r7, #20]
 8009fac:	4798      	blx	r3
  }

  return ERR_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	08018574 	.word	0x08018574
 8009fbc:	08018650 	.word	0x08018650
 8009fc0:	080185b8 	.word	0x080185b8
 8009fc4:	08018674 	.word	0x08018674
 8009fc8:	08018694 	.word	0x08018694
 8009fcc:	080186ac 	.word	0x080186ac
 8009fd0:	0801b7d2 	.word	0x0801b7d2

08009fd4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <poll_tcp+0x22>
 8009fe8:	4b2a      	ldr	r3, [pc, #168]	; (800a094 <poll_tcp+0xc0>)
 8009fea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009fee:	492a      	ldr	r1, [pc, #168]	; (800a098 <poll_tcp+0xc4>)
 8009ff0:	482a      	ldr	r0, [pc, #168]	; (800a09c <poll_tcp+0xc8>)
 8009ff2:	f00d f805 	bl	8017000 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d104      	bne.n	800a008 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ffe:	2101      	movs	r1, #1
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 ff5f 	bl	800aec4 <lwip_netconn_do_writemore>
 800a006:	e016      	b.n	800a036 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d112      	bne.n	800a036 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <poll_tcp+0x5a>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	7a5b      	ldrb	r3, [r3, #9]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d005      	beq.n	800a02e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	7a5a      	ldrb	r2, [r3, #9]
 800a028:	3a01      	subs	r2, #1
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a02e:	2101      	movs	r1, #1
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fb3f 	bl	800a6b4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	7f1b      	ldrb	r3, [r3, #28]
 800a03a:	f003 0310 	and.w	r3, r3, #16
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d022      	beq.n	800a088 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01e      	beq.n	800a088 <poll_tcp+0xb4>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a052:	f640 0203 	movw	r2, #2051	; 0x803
 800a056:	4293      	cmp	r3, r2
 800a058:	d916      	bls.n	800a088 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a062:	2b31      	cmp	r3, #49	; 0x31
 800a064:	d810      	bhi.n	800a088 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	7f1b      	ldrb	r3, [r3, #28]
 800a06a:	f023 0310 	bic.w	r3, r3, #16
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <poll_tcp+0xb4>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2200      	movs	r2, #0
 800a082:	2102      	movs	r1, #2
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	08018574 	.word	0x08018574
 800a098:	080186cc 	.word	0x080186cc
 800a09c:	080185b8 	.word	0x080185b8

0800a0a0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <sent_tcp+0x26>
 800a0b8:	4b21      	ldr	r3, [pc, #132]	; (800a140 <sent_tcp+0xa0>)
 800a0ba:	f240 1293 	movw	r2, #403	; 0x193
 800a0be:	4921      	ldr	r1, [pc, #132]	; (800a144 <sent_tcp+0xa4>)
 800a0c0:	4821      	ldr	r0, [pc, #132]	; (800a148 <sent_tcp+0xa8>)
 800a0c2:	f00c ff9d 	bl	8017000 <iprintf>

  if (conn) {
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d033      	beq.n	800a134 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	785b      	ldrb	r3, [r3, #1]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d104      	bne.n	800a0de <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	6978      	ldr	r0, [r7, #20]
 800a0d8:	f000 fef4 	bl	800aec4 <lwip_netconn_do_writemore>
 800a0dc:	e007      	b.n	800a0ee <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d103      	bne.n	800a0ee <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6978      	ldr	r0, [r7, #20]
 800a0ea:	f000 fae3 	bl	800a6b4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01e      	beq.n	800a134 <sent_tcp+0x94>
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0fe:	f640 0203 	movw	r2, #2051	; 0x803
 800a102:	4293      	cmp	r3, r2
 800a104:	d916      	bls.n	800a134 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a10e:	2b31      	cmp	r3, #49	; 0x31
 800a110:	d810      	bhi.n	800a134 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	7f1b      	ldrb	r3, [r3, #28]
 800a116:	f023 0310 	bic.w	r3, r3, #16
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <sent_tcp+0x94>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	2102      	movs	r1, #2
 800a130:	6978      	ldr	r0, [r7, #20]
 800a132:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	08018574 	.word	0x08018574
 800a144:	080186cc 	.word	0x080186cc
 800a148:	080185b8 	.word	0x080185b8

0800a14c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <err_tcp+0x24>
 800a162:	4b5f      	ldr	r3, [pc, #380]	; (800a2e0 <err_tcp+0x194>)
 800a164:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a168:	495e      	ldr	r1, [pc, #376]	; (800a2e4 <err_tcp+0x198>)
 800a16a:	485f      	ldr	r0, [pc, #380]	; (800a2e8 <err_tcp+0x19c>)
 800a16c:	f00c ff48 	bl	8017000 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a170:	f00c fd1a 	bl	8016ba8 <sys_arch_protect>
 800a174:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	7f1b      	ldrb	r3, [r3, #28]
 800a186:	f043 0301 	orr.w	r3, r3, #1
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	785b      	ldrb	r3, [r3, #1]
 800a194:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	2200      	movs	r2, #0
 800a19a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a19c:	69b8      	ldr	r0, [r7, #24]
 800a19e:	f00c fd11 	bl	8016bc4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <err_tcp+0x6a>
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2104      	movs	r1, #4
 800a1b2:	69f8      	ldr	r0, [r7, #28]
 800a1b4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <err_tcp+0x7e>
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	69f8      	ldr	r0, [r7, #28]
 800a1c8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <err_tcp+0x92>
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2102      	movs	r1, #2
 800a1da:	69f8      	ldr	r0, [r7, #28]
 800a1dc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a1de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fd82 	bl	8009cec <lwip_netconn_err_to_msg>
 800a1e8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	3310      	adds	r3, #16
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f00c fbd0 	bl	8016994 <sys_mbox_valid>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	3310      	adds	r3, #16
 800a1fe:	6939      	ldr	r1, [r7, #16]
 800a200:	4618      	mov	r0, r3
 800a202:	f00c fb65 	bl	80168d0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	3314      	adds	r3, #20
 800a20a:	4618      	mov	r0, r3
 800a20c:	f00c fbc2 	bl	8016994 <sys_mbox_valid>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	3314      	adds	r3, #20
 800a21a:	6939      	ldr	r1, [r7, #16]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f00c fb57 	bl	80168d0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d005      	beq.n	800a234 <err_tcp+0xe8>
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d002      	beq.n	800a234 <err_tcp+0xe8>
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2b03      	cmp	r3, #3
 800a232:	d143      	bne.n	800a2bc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	7f1b      	ldrb	r3, [r3, #28]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bf14      	ite	ne
 800a240:	2301      	movne	r3, #1
 800a242:	2300      	moveq	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	7f1b      	ldrb	r3, [r3, #28]
 800a24c:	f023 0304 	bic.w	r3, r3, #4
 800a250:	b2da      	uxtb	r2, r3
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d13b      	bne.n	800a2d4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <err_tcp+0x126>
 800a264:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <err_tcp+0x194>)
 800a266:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a26a:	4920      	ldr	r1, [pc, #128]	; (800a2ec <err_tcp+0x1a0>)
 800a26c:	481e      	ldr	r0, [pc, #120]	; (800a2e8 <err_tcp+0x19c>)
 800a26e:	f00c fec7 	bl	8017000 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b04      	cmp	r3, #4
 800a276:	d104      	bne.n	800a282 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	2200      	movs	r2, #0
 800a27e:	711a      	strb	r2, [r3, #4]
 800a280:	e003      	b.n	800a28a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	330c      	adds	r3, #12
 800a292:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a294:	68b8      	ldr	r0, [r7, #8]
 800a296:	f00c fc0b 	bl	8016ab0 <sys_sem_valid>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <err_tcp+0x162>
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <err_tcp+0x194>)
 800a2a2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a2a6:	4912      	ldr	r1, [pc, #72]	; (800a2f0 <err_tcp+0x1a4>)
 800a2a8:	480f      	ldr	r0, [pc, #60]	; (800a2e8 <err_tcp+0x19c>)
 800a2aa:	f00c fea9 	bl	8017000 <iprintf>
      conn->current_msg = NULL;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a2b4:	68b8      	ldr	r0, [r7, #8]
 800a2b6:	f00c fbe1 	bl	8016a7c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a2ba:	e00b      	b.n	800a2d4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <err_tcp+0x18a>
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <err_tcp+0x194>)
 800a2c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a2ca:	490a      	ldr	r1, [pc, #40]	; (800a2f4 <err_tcp+0x1a8>)
 800a2cc:	4806      	ldr	r0, [pc, #24]	; (800a2e8 <err_tcp+0x19c>)
 800a2ce:	f00c fe97 	bl	8017000 <iprintf>
  }
}
 800a2d2:	e000      	b.n	800a2d6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a2d4:	bf00      	nop
}
 800a2d6:	bf00      	nop
 800a2d8:	3720      	adds	r7, #32
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	08018574 	.word	0x08018574
 800a2e4:	080186cc 	.word	0x080186cc
 800a2e8:	080185b8 	.word	0x080185b8
 800a2ec:	080186dc 	.word	0x080186dc
 800a2f0:	080186f8 	.word	0x080186f8
 800a2f4:	08018714 	.word	0x08018714

0800a2f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f004 fd45 	bl	800ed98 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a30e:	490a      	ldr	r1, [pc, #40]	; (800a338 <setup_tcp+0x40>)
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f004 fd53 	bl	800edbc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a316:	4909      	ldr	r1, [pc, #36]	; (800a33c <setup_tcp+0x44>)
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f004 fd71 	bl	800ee00 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a31e:	2202      	movs	r2, #2
 800a320:	4907      	ldr	r1, [pc, #28]	; (800a340 <setup_tcp+0x48>)
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f004 fdc8 	bl	800eeb8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a328:	4906      	ldr	r1, [pc, #24]	; (800a344 <setup_tcp+0x4c>)
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f004 fd8a 	bl	800ee44 <tcp_err>
}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	08009ec9 	.word	0x08009ec9
 800a33c:	0800a0a1 	.word	0x0800a0a1
 800a340:	08009fd5 	.word	0x08009fd5
 800a344:	0800a14d 	.word	0x0800a14d

0800a348 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d006      	beq.n	800a36c <pcb_new+0x24>
 800a35e:	4b2b      	ldr	r3, [pc, #172]	; (800a40c <pcb_new+0xc4>)
 800a360:	f240 2265 	movw	r2, #613	; 0x265
 800a364:	492a      	ldr	r1, [pc, #168]	; (800a410 <pcb_new+0xc8>)
 800a366:	482b      	ldr	r0, [pc, #172]	; (800a414 <pcb_new+0xcc>)
 800a368:	f00c fe4a 	bl	8017000 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a376:	2b10      	cmp	r3, #16
 800a378:	d022      	beq.n	800a3c0 <pcb_new+0x78>
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d133      	bne.n	800a3e6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681c      	ldr	r4, [r3, #0]
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	4618      	mov	r0, r3
 800a386:	f009 fe50 	bl	801402a <udp_new_ip_type>
 800a38a:	4603      	mov	r3, r0
 800a38c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d02a      	beq.n	800a3ee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b22      	cmp	r3, #34	; 0x22
 800a3a0:	d104      	bne.n	800a3ac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6858      	ldr	r0, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4917      	ldr	r1, [pc, #92]	; (800a418 <pcb_new+0xd0>)
 800a3ba:	f009 fdbd 	bl	8013f38 <udp_recv>
      }
      break;
 800a3be:	e016      	b.n	800a3ee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681c      	ldr	r4, [r3, #0]
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f004 fcd8 	bl	800ed7c <tcp_new_ip_type>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00b      	beq.n	800a3f2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ff8a 	bl	800a2f8 <setup_tcp>
      }
      break;
 800a3e4:	e005      	b.n	800a3f2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	22fa      	movs	r2, #250	; 0xfa
 800a3ea:	711a      	strb	r2, [r3, #4]
      return;
 800a3ec:	e00a      	b.n	800a404 <pcb_new+0xbc>
      break;
 800a3ee:	bf00      	nop
 800a3f0:	e000      	b.n	800a3f4 <pcb_new+0xac>
      break;
 800a3f2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	22ff      	movs	r2, #255	; 0xff
 800a402:	711a      	strb	r2, [r3, #4]
  }
}
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	bd90      	pop	{r4, r7, pc}
 800a40a:	bf00      	nop
 800a40c:	08018574 	.word	0x08018574
 800a410:	08018758 	.word	0x08018758
 800a414:	080185b8 	.word	0x080185b8
 800a418:	08009dcd 	.word	0x08009dcd

0800a41c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff ff85 	bl	800a348 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	6039      	str	r1, [r7, #0]
 800a452:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a458:	2007      	movs	r0, #7
 800a45a:	f001 fed7 	bl	800c20c <memp_malloc>
 800a45e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <netconn_alloc+0x22>
    return NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	e052      	b.n	800a510 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	79fa      	ldrb	r2, [r7, #7]
 800a474:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a482:	2b10      	cmp	r3, #16
 800a484:	d004      	beq.n	800a490 <netconn_alloc+0x48>
 800a486:	2b20      	cmp	r3, #32
 800a488:	d105      	bne.n	800a496 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a48a:	2306      	movs	r3, #6
 800a48c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a48e:	e00a      	b.n	800a4a6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a490:	2306      	movs	r3, #6
 800a492:	617b      	str	r3, [r7, #20]
      break;
 800a494:	e007      	b.n	800a4a6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a496:	4b20      	ldr	r3, [pc, #128]	; (800a518 <netconn_alloc+0xd0>)
 800a498:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a49c:	491f      	ldr	r1, [pc, #124]	; (800a51c <netconn_alloc+0xd4>)
 800a49e:	4820      	ldr	r0, [pc, #128]	; (800a520 <netconn_alloc+0xd8>)
 800a4a0:	f00c fdae 	bl	8017000 <iprintf>
      goto free_and_return;
 800a4a4:	e02f      	b.n	800a506 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3310      	adds	r3, #16
 800a4aa:	6979      	ldr	r1, [r7, #20]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f00c f9e3 	bl	8016878 <sys_mbox_new>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d125      	bne.n	800a504 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	330c      	adds	r3, #12
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f00c fa86 	bl	80169d0 <sys_sem_new>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3310      	adds	r3, #16
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f00c f9ec 	bl	80168ac <sys_mbox_free>
    goto free_and_return;
 800a4d4:	e017      	b.n	800a506 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f00c fa6b 	bl	80169b6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	7cfa      	ldrb	r2, [r7, #19]
 800a4fe:	771a      	strb	r2, [r3, #28]
  return conn;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	e005      	b.n	800a510 <netconn_alloc+0xc8>
    goto free_and_return;
 800a504:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	2007      	movs	r0, #7
 800a50a:	f001 fed1 	bl	800c2b0 <memp_free>
  return NULL;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	08018574 	.word	0x08018574
 800a51c:	08018778 	.word	0x08018778
 800a520:	080185b8 	.word	0x080185b8

0800a524 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d006      	beq.n	800a542 <netconn_free+0x1e>
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <netconn_free+0x80>)
 800a536:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a53a:	491b      	ldr	r1, [pc, #108]	; (800a5a8 <netconn_free+0x84>)
 800a53c:	481b      	ldr	r0, [pc, #108]	; (800a5ac <netconn_free+0x88>)
 800a53e:	f00c fd5f 	bl	8017000 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3310      	adds	r3, #16
 800a546:	4618      	mov	r0, r3
 800a548:	f00c fa24 	bl	8016994 <sys_mbox_valid>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d006      	beq.n	800a560 <netconn_free+0x3c>
 800a552:	4b14      	ldr	r3, [pc, #80]	; (800a5a4 <netconn_free+0x80>)
 800a554:	f240 3223 	movw	r2, #803	; 0x323
 800a558:	4915      	ldr	r1, [pc, #84]	; (800a5b0 <netconn_free+0x8c>)
 800a55a:	4814      	ldr	r0, [pc, #80]	; (800a5ac <netconn_free+0x88>)
 800a55c:	f00c fd50 	bl	8017000 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3314      	adds	r3, #20
 800a564:	4618      	mov	r0, r3
 800a566:	f00c fa15 	bl	8016994 <sys_mbox_valid>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <netconn_free+0x5a>
 800a570:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <netconn_free+0x80>)
 800a572:	f240 3226 	movw	r2, #806	; 0x326
 800a576:	490f      	ldr	r1, [pc, #60]	; (800a5b4 <netconn_free+0x90>)
 800a578:	480c      	ldr	r0, [pc, #48]	; (800a5ac <netconn_free+0x88>)
 800a57a:	f00c fd41 	bl	8017000 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	330c      	adds	r3, #12
 800a582:	4618      	mov	r0, r3
 800a584:	f00c fa87 	bl	8016a96 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	330c      	adds	r3, #12
 800a58c:	4618      	mov	r0, r3
 800a58e:	f00c faa0 	bl	8016ad2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	2007      	movs	r0, #7
 800a596:	f001 fe8b 	bl	800c2b0 <memp_free>
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	08018574 	.word	0x08018574
 800a5a8:	080187a0 	.word	0x080187a0
 800a5ac:	080185b8 	.word	0x080185b8
 800a5b0:	080187d0 	.word	0x080187d0
 800a5b4:	0801880c 	.word	0x0801880c

0800a5b8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3310      	adds	r3, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f00c f9e5 	bl	8016994 <sys_mbox_valid>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d02f      	beq.n	800a630 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5d0:	e018      	b.n	800a604 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5da:	2b10      	cmp	r3, #16
 800a5dc:	d10e      	bne.n	800a5fc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f107 020f 	add.w	r2, r7, #15
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff fbb6 	bl	8009d58 <lwip_netconn_is_err_msg>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d108      	bne.n	800a604 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f002 fd03 	bl	800d000 <pbuf_free>
 800a5fa:	e003      	b.n	800a604 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 ff46 	bl	800b490 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3310      	adds	r3, #16
 800a608:	f107 0210 	add.w	r2, r7, #16
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f00c f9a9 	bl	8016966 <sys_arch_mbox_tryfetch>
 800a614:	4603      	mov	r3, r0
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d1da      	bne.n	800a5d2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3310      	adds	r3, #16
 800a620:	4618      	mov	r0, r3
 800a622:	f00c f943 	bl	80168ac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3310      	adds	r3, #16
 800a62a:	4618      	mov	r0, r3
 800a62c:	f00c f9c3 	bl	80169b6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3314      	adds	r3, #20
 800a634:	4618      	mov	r0, r3
 800a636:	f00c f9ad 	bl	8016994 <sys_mbox_valid>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d034      	beq.n	800a6aa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a640:	e01d      	b.n	800a67e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f107 020e 	add.w	r2, r7, #14
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fb84 	bl	8009d58 <lwip_netconn_is_err_msg>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d113      	bne.n	800a67e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a65a:	6978      	ldr	r0, [r7, #20]
 800a65c:	f7ff ffac 	bl	800a5b8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 fab7 	bl	800dbe0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a678:	6978      	ldr	r0, [r7, #20]
 800a67a:	f7ff ff53 	bl	800a524 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3314      	adds	r3, #20
 800a682:	f107 0210 	add.w	r2, r7, #16
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f00c f96c 	bl	8016966 <sys_arch_mbox_tryfetch>
 800a68e:	4603      	mov	r3, r0
 800a690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a694:	d1d5      	bne.n	800a642 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3314      	adds	r3, #20
 800a69a:	4618      	mov	r0, r3
 800a69c:	f00c f906 	bl	80168ac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f00c f986 	bl	80169b6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a6aa:	bf00      	nop
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <lwip_netconn_do_close_internal+0x24>
 800a6ca:	4ba1      	ldr	r3, [pc, #644]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a6cc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a6d0:	49a0      	ldr	r1, [pc, #640]	; (800a954 <lwip_netconn_do_close_internal+0x2a0>)
 800a6d2:	48a1      	ldr	r0, [pc, #644]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a6d4:	f00c fc94 	bl	8017000 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d006      	beq.n	800a6f2 <lwip_netconn_do_close_internal+0x3e>
 800a6e4:	4b9a      	ldr	r3, [pc, #616]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a6e6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a6ea:	499c      	ldr	r1, [pc, #624]	; (800a95c <lwip_netconn_do_close_internal+0x2a8>)
 800a6ec:	489a      	ldr	r0, [pc, #616]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a6ee:	f00c fc87 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	785b      	ldrb	r3, [r3, #1]
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d006      	beq.n	800a708 <lwip_netconn_do_close_internal+0x54>
 800a6fa:	4b95      	ldr	r3, [pc, #596]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a6fc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a700:	4997      	ldr	r1, [pc, #604]	; (800a960 <lwip_netconn_do_close_internal+0x2ac>)
 800a702:	4895      	ldr	r0, [pc, #596]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a704:	f00c fc7c 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d106      	bne.n	800a71e <lwip_netconn_do_close_internal+0x6a>
 800a710:	4b8f      	ldr	r3, [pc, #572]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a712:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a716:	4993      	ldr	r1, [pc, #588]	; (800a964 <lwip_netconn_do_close_internal+0x2b0>)
 800a718:	488f      	ldr	r0, [pc, #572]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a71a:	f00c fc71 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d106      	bne.n	800a734 <lwip_netconn_do_close_internal+0x80>
 800a726:	4b8a      	ldr	r3, [pc, #552]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a728:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a72c:	498e      	ldr	r1, [pc, #568]	; (800a968 <lwip_netconn_do_close_internal+0x2b4>)
 800a72e:	488a      	ldr	r0, [pc, #552]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a730:	f00c fc66 	bl	8017000 <iprintf>

  tpcb = conn->pcb.tcp;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	7a1b      	ldrb	r3, [r3, #8]
 800a740:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d102      	bne.n	800a75e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a758:	2301      	movs	r3, #1
 800a75a:	75bb      	strb	r3, [r7, #22]
 800a75c:	e01f      	b.n	800a79e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00e      	beq.n	800a782 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a768:	2b05      	cmp	r3, #5
 800a76a:	d007      	beq.n	800a77c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a770:	2b06      	cmp	r3, #6
 800a772:	d003      	beq.n	800a77c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d102      	bne.n	800a782 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a77c:	2301      	movs	r3, #1
 800a77e:	75bb      	strb	r3, [r7, #22]
 800a780:	e00d      	b.n	800a79e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a782:	7b7b      	ldrb	r3, [r7, #13]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <lwip_netconn_do_close_internal+0xe6>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	8b5b      	ldrh	r3, [r3, #26]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a794:	2301      	movs	r3, #1
 800a796:	75bb      	strb	r3, [r7, #22]
 800a798:	e001      	b.n	800a79e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a79e:	7dbb      	ldrb	r3, [r7, #22]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	6938      	ldr	r0, [r7, #16]
 800a7a8:	f004 faf6 	bl	800ed98 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	7d1b      	ldrb	r3, [r3, #20]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d104      	bne.n	800a7be <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6938      	ldr	r0, [r7, #16]
 800a7b8:	f004 fb66 	bl	800ee88 <tcp_accept>
 800a7bc:	e01d      	b.n	800a7fa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f004 faf8 	bl	800edbc <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f004 fb5a 	bl	800ee88 <tcp_accept>
    }
    if (shut_tx) {
 800a7d4:	7b7b      	ldrb	r3, [r7, #13]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6938      	ldr	r0, [r7, #16]
 800a7de:	f004 fb0f 	bl	800ee00 <tcp_sent>
    }
    if (shut_close) {
 800a7e2:	7dbb      	ldrb	r3, [r7, #22]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d008      	beq.n	800a7fa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6938      	ldr	r0, [r7, #16]
 800a7ee:	f004 fb63 	bl	800eeb8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	6938      	ldr	r0, [r7, #16]
 800a7f6:	f004 fb25 	bl	800ee44 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a7fa:	7dbb      	ldrb	r3, [r7, #22]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a800:	6938      	ldr	r0, [r7, #16]
 800a802:	f003 f8a7 	bl	800d954 <tcp_close>
 800a806:	4603      	mov	r3, r0
 800a808:	75fb      	strb	r3, [r7, #23]
 800a80a:	e007      	b.n	800a81c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	7b7a      	ldrb	r2, [r7, #13]
 800a810:	4619      	mov	r1, r3
 800a812:	6938      	ldr	r0, [r7, #16]
 800a814:	f003 f8ca 	bl	800d9ac <tcp_shutdown>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	757b      	strb	r3, [r7, #21]
 800a828:	e016      	b.n	800a858 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a82a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	d10f      	bne.n	800a854 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	7a5b      	ldrb	r3, [r3, #9]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10c      	bne.n	800a858 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a83e:	2301      	movs	r3, #1
 800a840:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a842:	7dbb      	ldrb	r3, [r7, #22]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a848:	6938      	ldr	r0, [r7, #16]
 800a84a:	f003 f9c9 	bl	800dbe0 <tcp_abort>
          err = ERR_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e001      	b.n	800a858 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a854:	2301      	movs	r3, #1
 800a856:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a858:	7d7b      	ldrb	r3, [r7, #21]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d044      	beq.n	800a8e8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	7dfa      	ldrb	r2, [r7, #23]
 800a86e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d129      	bne.n	800a8d8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a884:	7dbb      	ldrb	r3, [r7, #22]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00c      	beq.n	800a8a4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <lwip_netconn_do_close_internal+0x1f0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2200      	movs	r2, #0
 800a89e:	2104      	movs	r1, #4
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
      }
      if (shut_rx) {
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d009      	beq.n	800a8be <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <lwip_netconn_do_close_internal+0x20a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	4798      	blx	r3
      }
      if (shut_tx) {
 800a8be:	7b7b      	ldrb	r3, [r7, #13]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <lwip_netconn_do_close_internal+0x224>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a8de:	68b8      	ldr	r0, [r7, #8]
 800a8e0:	f00c f8cc 	bl	8016a7c <sys_sem_signal>
    }
    return ERR_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e02e      	b.n	800a946 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a8e8:	7d7b      	ldrb	r3, [r7, #21]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d11e      	bne.n	800a92c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	7d1b      	ldrb	r3, [r3, #20]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d106      	bne.n	800a904 <lwip_netconn_do_close_internal+0x250>
 800a8f6:	4b16      	ldr	r3, [pc, #88]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a8f8:	f240 4241 	movw	r2, #1089	; 0x441
 800a8fc:	491b      	ldr	r1, [pc, #108]	; (800a96c <lwip_netconn_do_close_internal+0x2b8>)
 800a8fe:	4816      	ldr	r0, [pc, #88]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a900:	f00c fb7e 	bl	8017000 <iprintf>
    if (shut_tx) {
 800a904:	7b7b      	ldrb	r3, [r7, #13]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a90a:	4919      	ldr	r1, [pc, #100]	; (800a970 <lwip_netconn_do_close_internal+0x2bc>)
 800a90c:	6938      	ldr	r0, [r7, #16]
 800a90e:	f004 fa77 	bl	800ee00 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a912:	2201      	movs	r2, #1
 800a914:	4917      	ldr	r1, [pc, #92]	; (800a974 <lwip_netconn_do_close_internal+0x2c0>)
 800a916:	6938      	ldr	r0, [r7, #16]
 800a918:	f004 face 	bl	800eeb8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a91c:	4916      	ldr	r1, [pc, #88]	; (800a978 <lwip_netconn_do_close_internal+0x2c4>)
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f004 fa90 	bl	800ee44 <tcp_err>
    tcp_arg(tpcb, conn);
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	6938      	ldr	r0, [r7, #16]
 800a928:	f004 fa36 	bl	800ed98 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a92c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <lwip_netconn_do_close_internal+0x28e>
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <lwip_netconn_do_close_internal+0x29c>)
 800a936:	f240 424d 	movw	r2, #1101	; 0x44d
 800a93a:	4910      	ldr	r1, [pc, #64]	; (800a97c <lwip_netconn_do_close_internal+0x2c8>)
 800a93c:	4806      	ldr	r0, [pc, #24]	; (800a958 <lwip_netconn_do_close_internal+0x2a4>)
 800a93e:	f00c fb5f 	bl	8017000 <iprintf>
  return err;
 800a942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08018574 	.word	0x08018574
 800a954:	08018848 	.word	0x08018848
 800a958:	080185b8 	.word	0x080185b8
 800a95c:	08018858 	.word	0x08018858
 800a960:	08018878 	.word	0x08018878
 800a964:	0801889c 	.word	0x0801889c
 800a968:	080186dc 	.word	0x080186dc
 800a96c:	080188b0 	.word	0x080188b0
 800a970:	0800a0a1 	.word	0x0800a0a1
 800a974:	08009fd5 	.word	0x08009fd5
 800a978:	0800a14d 	.word	0x0800a14d
 800a97c:	080188d4 	.word	0x080188d4

0800a980 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a994:	7afb      	ldrb	r3, [r7, #11]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00d      	beq.n	800a9b6 <lwip_netconn_do_delconn+0x36>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9a4:	2b10      	cmp	r3, #16
 800a9a6:	d006      	beq.n	800a9b6 <lwip_netconn_do_delconn+0x36>
 800a9a8:	4b60      	ldr	r3, [pc, #384]	; (800ab2c <lwip_netconn_do_delconn+0x1ac>)
 800a9aa:	f240 425e 	movw	r2, #1118	; 0x45e
 800a9ae:	4960      	ldr	r1, [pc, #384]	; (800ab30 <lwip_netconn_do_delconn+0x1b0>)
 800a9b0:	4860      	ldr	r0, [pc, #384]	; (800ab34 <lwip_netconn_do_delconn+0x1b4>)
 800a9b2:	f00c fb25 	bl	8017000 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a9b6:	7afb      	ldrb	r3, [r7, #11]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <lwip_netconn_do_delconn+0x48>
 800a9bc:	7afb      	ldrb	r3, [r7, #11]
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d002      	beq.n	800a9c8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a9c2:	7afb      	ldrb	r3, [r7, #11]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d109      	bne.n	800a9dc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a9c8:	7afb      	ldrb	r3, [r7, #11]
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d10a      	bne.n	800a9e4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	7f1b      	ldrb	r3, [r3, #28]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d103      	bne.n	800a9e4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	22fb      	movs	r2, #251	; 0xfb
 800a9e0:	711a      	strb	r2, [r3, #4]
 800a9e2:	e097      	b.n	800ab14 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d10d      	bne.n	800aa06 <lwip_netconn_do_delconn+0x86>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	7f1b      	ldrb	r3, [r3, #28]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <lwip_netconn_do_delconn+0x86>
 800a9f8:	4b4c      	ldr	r3, [pc, #304]	; (800ab2c <lwip_netconn_do_delconn+0x1ac>)
 800a9fa:	f240 427a 	movw	r2, #1146	; 0x47a
 800a9fe:	494e      	ldr	r1, [pc, #312]	; (800ab38 <lwip_netconn_do_delconn+0x1b8>)
 800aa00:	484c      	ldr	r0, [pc, #304]	; (800ab34 <lwip_netconn_do_delconn+0x1b4>)
 800aa02:	f00c fafd 	bl	8017000 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff fdd1 	bl	800a5b8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d05f      	beq.n	800aae0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa2a:	2b10      	cmp	r3, #16
 800aa2c:	d00d      	beq.n	800aa4a <lwip_netconn_do_delconn+0xca>
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d151      	bne.n	800aad6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f009 fa98 	bl	8013f78 <udp_remove>
          break;
 800aa48:	e046      	b.n	800aad8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <lwip_netconn_do_delconn+0xe2>
 800aa54:	4b35      	ldr	r3, [pc, #212]	; (800ab2c <lwip_netconn_do_delconn+0x1ac>)
 800aa56:	f240 4294 	movw	r2, #1172	; 0x494
 800aa5a:	4938      	ldr	r1, [pc, #224]	; (800ab3c <lwip_netconn_do_delconn+0x1bc>)
 800aa5c:	4835      	ldr	r0, [pc, #212]	; (800ab34 <lwip_netconn_do_delconn+0x1b4>)
 800aa5e:	f00c facf 	bl	8017000 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2204      	movs	r2, #4
 800aa68:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff fe18 	bl	800a6b4 <lwip_netconn_do_close_internal>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d04b      	beq.n	800ab22 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d006      	beq.n	800aaa2 <lwip_netconn_do_delconn+0x122>
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <lwip_netconn_do_delconn+0x1ac>)
 800aa96:	f240 429a 	movw	r2, #1178	; 0x49a
 800aa9a:	4929      	ldr	r1, [pc, #164]	; (800ab40 <lwip_netconn_do_delconn+0x1c0>)
 800aa9c:	4825      	ldr	r0, [pc, #148]	; (800ab34 <lwip_netconn_do_delconn+0x1b4>)
 800aa9e:	f00c faaf 	bl	8017000 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aaa2:	4828      	ldr	r0, [pc, #160]	; (800ab44 <lwip_netconn_do_delconn+0x1c4>)
 800aaa4:	f00c f853 	bl	8016b4e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	330c      	adds	r3, #12
 800aaae:	2100      	movs	r1, #0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f00b ffb2 	bl	8016a1a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aab6:	4823      	ldr	r0, [pc, #140]	; (800ab44 <lwip_netconn_do_delconn+0x1c4>)
 800aab8:	f00c f83a 	bl	8016b30 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d02d      	beq.n	800ab22 <lwip_netconn_do_delconn+0x1a2>
 800aac6:	4b19      	ldr	r3, [pc, #100]	; (800ab2c <lwip_netconn_do_delconn+0x1ac>)
 800aac8:	f240 429e 	movw	r2, #1182	; 0x49e
 800aacc:	491c      	ldr	r1, [pc, #112]	; (800ab40 <lwip_netconn_do_delconn+0x1c0>)
 800aace:	4819      	ldr	r0, [pc, #100]	; (800ab34 <lwip_netconn_do_delconn+0x1b4>)
 800aad0:	f00c fa96 	bl	8017000 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aad4:	e025      	b.n	800ab22 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aad6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2200      	movs	r2, #0
 800aade:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d007      	beq.n	800aafa <lwip_netconn_do_delconn+0x17a>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	6810      	ldr	r0, [r2, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <lwip_netconn_do_delconn+0x194>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	6810      	ldr	r0, [r2, #0]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2102      	movs	r1, #2
 800ab12:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f00b ffc8 	bl	8016ab0 <sys_sem_valid>
 800ab20:	e000      	b.n	800ab24 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ab22:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	08018574 	.word	0x08018574
 800ab30:	080188e4 	.word	0x080188e4
 800ab34:	080185b8 	.word	0x080185b8
 800ab38:	080188f8 	.word	0x080188f8
 800ab3c:	08018918 	.word	0x08018918
 800ab40:	08018934 	.word	0x08018934
 800ab44:	200088e8 	.word	0x200088e8

0800ab48 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d025      	beq.n	800abaa <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab68:	2b10      	cmp	r3, #16
 800ab6a:	d00e      	beq.n	800ab8a <lwip_netconn_do_bind+0x42>
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d119      	bne.n	800aba4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6858      	ldr	r0, [r3, #4]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6899      	ldr	r1, [r3, #8]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	899b      	ldrh	r3, [r3, #12]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f009 f8e4 	bl	8013d4c <udp_bind>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
        break;
 800ab88:	e011      	b.n	800abae <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6858      	ldr	r0, [r3, #4]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	6899      	ldr	r1, [r3, #8]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	899b      	ldrh	r3, [r3, #12]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f003 f82d 	bl	800dbf8 <tcp_bind>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73fb      	strb	r3, [r7, #15]
        break;
 800aba2:	e004      	b.n	800abae <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800aba4:	23fa      	movs	r3, #250	; 0xfa
 800aba6:	73fb      	strb	r3, [r7, #15]
        break;
 800aba8:	e001      	b.n	800abae <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800abaa:	23fa      	movs	r3, #250	; 0xfa
 800abac:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	7bfa      	ldrb	r2, [r7, #15]
 800abb2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800abb4:	bf00      	nop
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800abd8:	f06f 0305 	mvn.w	r3, #5
 800abdc:	e070      	b.n	800acc0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	785b      	ldrb	r3, [r3, #1]
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d006      	beq.n	800abf4 <lwip_netconn_do_connected+0x38>
 800abe6:	4b38      	ldr	r3, [pc, #224]	; (800acc8 <lwip_netconn_do_connected+0x10c>)
 800abe8:	f240 5223 	movw	r2, #1315	; 0x523
 800abec:	4937      	ldr	r1, [pc, #220]	; (800accc <lwip_netconn_do_connected+0x110>)
 800abee:	4838      	ldr	r0, [pc, #224]	; (800acd0 <lwip_netconn_do_connected+0x114>)
 800abf0:	f00c fa06 	bl	8017000 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10c      	bne.n	800ac16 <lwip_netconn_do_connected+0x5a>
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	7f1b      	ldrb	r3, [r3, #28]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <lwip_netconn_do_connected+0x5a>
 800ac08:	4b2f      	ldr	r3, [pc, #188]	; (800acc8 <lwip_netconn_do_connected+0x10c>)
 800ac0a:	f240 5224 	movw	r2, #1316	; 0x524
 800ac0e:	4931      	ldr	r1, [pc, #196]	; (800acd4 <lwip_netconn_do_connected+0x118>)
 800ac10:	482f      	ldr	r0, [pc, #188]	; (800acd0 <lwip_netconn_do_connected+0x114>)
 800ac12:	f00c f9f5 	bl	8017000 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d008      	beq.n	800ac30 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	79fa      	ldrb	r2, [r7, #7]
 800ac24:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d106      	bne.n	800ac4a <lwip_netconn_do_connected+0x8e>
 800ac3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ac44:	69b8      	ldr	r0, [r7, #24]
 800ac46:	f7ff fb57 	bl	800a2f8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	7f1b      	ldrb	r3, [r3, #28]
 800ac4e:	f003 0304 	and.w	r3, r3, #4
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bf0c      	ite	eq
 800ac56:	2301      	moveq	r3, #1
 800ac58:	2300      	movne	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	7f1b      	ldrb	r3, [r3, #28]
 800ac62:	f023 0304 	bic.w	r3, r3, #4
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <lwip_netconn_do_connected+0xbc>
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10c      	bne.n	800ac92 <lwip_netconn_do_connected+0xd6>
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <lwip_netconn_do_connected+0xc8>
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <lwip_netconn_do_connected+0xd6>
 800ac84:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <lwip_netconn_do_connected+0x10c>)
 800ac86:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800ac8a:	4913      	ldr	r1, [pc, #76]	; (800acd8 <lwip_netconn_do_connected+0x11c>)
 800ac8c:	4810      	ldr	r0, [pc, #64]	; (800acd0 <lwip_netconn_do_connected+0x114>)
 800ac8e:	f00c f9b7 	bl	8017000 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2200      	movs	r2, #0
 800ac96:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <lwip_netconn_do_connected+0xf6>
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	2200      	movs	r2, #0
 800acac:	2102      	movs	r1, #2
 800acae:	69b8      	ldr	r0, [r7, #24]
 800acb0:	4798      	blx	r3

  if (was_blocking) {
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800acb8:	69f8      	ldr	r0, [r7, #28]
 800acba:	f00b fedf 	bl	8016a7c <sys_sem_signal>
  }
  return ERR_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	08018574 	.word	0x08018574
 800accc:	0801893c 	.word	0x0801893c
 800acd0:	080185b8 	.word	0x080185b8
 800acd4:	0801895c 	.word	0x0801895c
 800acd8:	0801899c 	.word	0x0801899c

0800acdc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d102      	bne.n	800acf8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800acf2:	23f1      	movs	r3, #241	; 0xf1
 800acf4:	75fb      	strb	r3, [r7, #23]
 800acf6:	e09b      	b.n	800ae30 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d00f      	beq.n	800ad26 <lwip_netconn_do_connect+0x4a>
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	f040 8087 	bne.w	800ae1a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6858      	ldr	r0, [r3, #4]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	6899      	ldr	r1, [r3, #8]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	899b      	ldrh	r3, [r3, #12]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f009 f89e 	bl	8013e5c <udp_connect>
 800ad20:	4603      	mov	r3, r0
 800ad22:	75fb      	strb	r3, [r7, #23]
        break;
 800ad24:	e084      	b.n	800ae30 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d102      	bne.n	800ad36 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800ad30:	23f7      	movs	r3, #247	; 0xf7
 800ad32:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800ad34:	e07b      	b.n	800ae2e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800ad40:	23f6      	movs	r3, #246	; 0xf6
 800ad42:	75fb      	strb	r3, [r7, #23]
        break;
 800ad44:	e073      	b.n	800ae2e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff fad4 	bl	800a2f8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6858      	ldr	r0, [r3, #4]
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	6899      	ldr	r1, [r3, #8]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	899a      	ldrh	r2, [r3, #12]
 800ad5e:	4b38      	ldr	r3, [pc, #224]	; (800ae40 <lwip_netconn_do_connect+0x164>)
 800ad60:	f003 f8d2 	bl	800df08 <tcp_connect>
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800ad68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d15e      	bne.n	800ae2e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	7f1b      	ldrb	r3, [r3, #28]
 800ad76:	f003 0302 	and.w	r3, r3, #2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	bf14      	ite	ne
 800ad7e:	2301      	movne	r3, #1
 800ad80:	2300      	moveq	r3, #0
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <lwip_netconn_do_connect+0xcc>
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	7f1a      	ldrb	r2, [r3, #28]
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0204 	orr.w	r2, r2, #4
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	771a      	strb	r2, [r3, #28]
 800ada6:	e008      	b.n	800adba <lwip_netconn_do_connect+0xde>
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	7f1a      	ldrb	r2, [r3, #28]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 0204 	bic.w	r2, r2, #4
 800adb6:	b2d2      	uxtb	r2, r2
 800adb8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800adc0:	23fb      	movs	r3, #251	; 0xfb
 800adc2:	75fb      	strb	r3, [r7, #23]
        break;
 800adc4:	e033      	b.n	800ae2e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d006      	beq.n	800ade6 <lwip_netconn_do_connect+0x10a>
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <lwip_netconn_do_connect+0x168>)
 800adda:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800adde:	491a      	ldr	r1, [pc, #104]	; (800ae48 <lwip_netconn_do_connect+0x16c>)
 800ade0:	481a      	ldr	r0, [pc, #104]	; (800ae4c <lwip_netconn_do_connect+0x170>)
 800ade2:	f00c f90d 	bl	8017000 <iprintf>
              UNLOCK_TCPIP_CORE();
 800ade6:	481a      	ldr	r0, [pc, #104]	; (800ae50 <lwip_netconn_do_connect+0x174>)
 800ade8:	f00b feb1 	bl	8016b4e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	330c      	adds	r3, #12
 800adf2:	2100      	movs	r1, #0
 800adf4:	4618      	mov	r0, r3
 800adf6:	f00b fe10 	bl	8016a1a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800adfa:	4815      	ldr	r0, [pc, #84]	; (800ae50 <lwip_netconn_do_connect+0x174>)
 800adfc:	f00b fe98 	bl	8016b30 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	785b      	ldrb	r3, [r3, #1]
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d116      	bne.n	800ae38 <lwip_netconn_do_connect+0x15c>
 800ae0a:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <lwip_netconn_do_connect+0x168>)
 800ae0c:	f240 5274 	movw	r2, #1396	; 0x574
 800ae10:	490d      	ldr	r1, [pc, #52]	; (800ae48 <lwip_netconn_do_connect+0x16c>)
 800ae12:	480e      	ldr	r0, [pc, #56]	; (800ae4c <lwip_netconn_do_connect+0x170>)
 800ae14:	f00c f8f4 	bl	8017000 <iprintf>
              return;
 800ae18:	e00e      	b.n	800ae38 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <lwip_netconn_do_connect+0x168>)
 800ae1c:	f240 527d 	movw	r2, #1405	; 0x57d
 800ae20:	490c      	ldr	r1, [pc, #48]	; (800ae54 <lwip_netconn_do_connect+0x178>)
 800ae22:	480a      	ldr	r0, [pc, #40]	; (800ae4c <lwip_netconn_do_connect+0x170>)
 800ae24:	f00c f8ec 	bl	8017000 <iprintf>
 800ae28:	23fa      	movs	r3, #250	; 0xfa
 800ae2a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800ae2c:	e000      	b.n	800ae30 <lwip_netconn_do_connect+0x154>
        break;
 800ae2e:	bf00      	nop
    }
  }
  msg->err = err;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	7dfa      	ldrb	r2, [r7, #23]
 800ae34:	711a      	strb	r2, [r3, #4]
 800ae36:	e000      	b.n	800ae3a <lwip_netconn_do_connect+0x15e>
              return;
 800ae38:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	0800abbd 	.word	0x0800abbd
 800ae44:	08018574 	.word	0x08018574
 800ae48:	08018934 	.word	0x08018934
 800ae4c:	080185b8 	.word	0x080185b8
 800ae50:	200088e8 	.word	0x200088e8
 800ae54:	080189bc 	.word	0x080189bc

0800ae58 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2200      	movs	r2, #0
 800ae68:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d022      	beq.n	800aeba <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae7e:	2b10      	cmp	r3, #16
 800ae80:	d11b      	bne.n	800aeba <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae8e:	d202      	bcs.n	800ae96 <lwip_netconn_do_recv+0x3e>
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	e001      	b.n	800ae9a <lwip_netconn_do_recv+0x42>
 800ae96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae9a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	89fa      	ldrh	r2, [r7, #14]
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f002 ff98 	bl	800dddc <tcp_recved>
        remaining -= recved;
 800aeac:	89fb      	ldrh	r3, [r7, #14]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e6      	bne.n	800ae88 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aeba:	bf00      	nop
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <lwip_netconn_do_writemore+0x24>
 800aeda:	4b96      	ldr	r3, [pc, #600]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800aedc:	f240 6273 	movw	r2, #1651	; 0x673
 800aee0:	4995      	ldr	r1, [pc, #596]	; (800b138 <lwip_netconn_do_writemore+0x274>)
 800aee2:	4896      	ldr	r0, [pc, #600]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800aee4:	f00c f88c 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d006      	beq.n	800aefe <lwip_netconn_do_writemore+0x3a>
 800aef0:	4b90      	ldr	r3, [pc, #576]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800aef2:	f240 6274 	movw	r2, #1652	; 0x674
 800aef6:	4992      	ldr	r1, [pc, #584]	; (800b140 <lwip_netconn_do_writemore+0x27c>)
 800aef8:	4890      	ldr	r0, [pc, #576]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800aefa:	f00c f881 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d106      	bne.n	800af14 <lwip_netconn_do_writemore+0x50>
 800af06:	4b8b      	ldr	r3, [pc, #556]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800af08:	f240 6275 	movw	r2, #1653	; 0x675
 800af0c:	498d      	ldr	r1, [pc, #564]	; (800b144 <lwip_netconn_do_writemore+0x280>)
 800af0e:	488b      	ldr	r0, [pc, #556]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800af10:	f00c f876 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d106      	bne.n	800af2a <lwip_netconn_do_writemore+0x66>
 800af1c:	4b85      	ldr	r3, [pc, #532]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800af1e:	f240 6276 	movw	r2, #1654	; 0x676
 800af22:	4989      	ldr	r1, [pc, #548]	; (800b148 <lwip_netconn_do_writemore+0x284>)
 800af24:	4885      	ldr	r0, [pc, #532]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800af26:	f00c f86b 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	429a      	cmp	r2, r3
 800af38:	d306      	bcc.n	800af48 <lwip_netconn_do_writemore+0x84>
 800af3a:	4b7e      	ldr	r3, [pc, #504]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800af3c:	f240 6277 	movw	r2, #1655	; 0x677
 800af40:	4982      	ldr	r1, [pc, #520]	; (800b14c <lwip_netconn_do_writemore+0x288>)
 800af42:	487e      	ldr	r0, [pc, #504]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800af44:	f00c f85c 	bl	8017000 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	899b      	ldrh	r3, [r3, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <lwip_netconn_do_writemore+0x9c>
 800af52:	4b78      	ldr	r3, [pc, #480]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800af54:	f240 6279 	movw	r2, #1657	; 0x679
 800af58:	497d      	ldr	r1, [pc, #500]	; (800b150 <lwip_netconn_do_writemore+0x28c>)
 800af5a:	4878      	ldr	r0, [pc, #480]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800af5c:	f00c f850 	bl	8017000 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	7f1b      	ldrb	r3, [r3, #28]
 800af66:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7f1b      	ldrb	r3, [r3, #28]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <lwip_netconn_do_writemore+0xba>
 800af74:	7ebb      	ldrb	r3, [r7, #26]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <lwip_netconn_do_writemore+0xbe>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <lwip_netconn_do_writemore+0xc0>
 800af82:	2300      	movs	r3, #0
 800af84:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	4413      	add	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb0:	d307      	bcc.n	800afc2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800afb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afb6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800afb8:	7ebb      	ldrb	r3, [r7, #26]
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	76bb      	strb	r3, [r7, #26]
 800afc0:	e001      	b.n	800afc6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afce:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800afd0:	89fa      	ldrh	r2, [r7, #14]
 800afd2:	8bbb      	ldrh	r3, [r7, #28]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d216      	bcs.n	800b006 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800afd8:	89fb      	ldrh	r3, [r7, #14]
 800afda:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800afdc:	7e3b      	ldrb	r3, [r7, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00d      	beq.n	800affe <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800afe2:	8bbb      	ldrh	r3, [r7, #28]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10e      	bne.n	800b006 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <lwip_netconn_do_writemore+0x134>
 800aff2:	f06f 0306 	mvn.w	r3, #6
 800aff6:	e000      	b.n	800affa <lwip_netconn_do_writemore+0x136>
 800aff8:	2300      	movs	r3, #0
 800affa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800affc:	e07d      	b.n	800b0fa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800affe:	7ebb      	ldrb	r3, [r7, #26]
 800b000:	f043 0302 	orr.w	r3, r3, #2
 800b004:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	8bbb      	ldrh	r3, [r7, #28]
 800b00e:	441a      	add	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d906      	bls.n	800b02a <lwip_netconn_do_writemore+0x166>
 800b01c:	4b45      	ldr	r3, [pc, #276]	; (800b134 <lwip_netconn_do_writemore+0x270>)
 800b01e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b022:	494c      	ldr	r1, [pc, #304]	; (800b154 <lwip_netconn_do_writemore+0x290>)
 800b024:	4845      	ldr	r0, [pc, #276]	; (800b13c <lwip_netconn_do_writemore+0x278>)
 800b026:	f00b ffeb 	bl	8017000 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b02a:	8bbb      	ldrh	r3, [r7, #28]
 800b02c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b030:	4293      	cmp	r3, r2
 800b032:	d103      	bne.n	800b03c <lwip_netconn_do_writemore+0x178>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03a:	d209      	bcs.n	800b050 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b040:	8bba      	ldrh	r2, [r7, #28]
 800b042:	429a      	cmp	r2, r3
 800b044:	d10b      	bne.n	800b05e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	899b      	ldrh	r3, [r3, #12]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d906      	bls.n	800b05e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b050:	2301      	movs	r3, #1
 800b052:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b054:	7ebb      	ldrb	r3, [r7, #26]
 800b056:	f043 0302 	orr.w	r3, r3, #2
 800b05a:	76bb      	strb	r3, [r7, #26]
 800b05c:	e001      	b.n	800b062 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6858      	ldr	r0, [r3, #4]
 800b066:	7ebb      	ldrb	r3, [r7, #26]
 800b068:	8bba      	ldrh	r2, [r7, #28]
 800b06a:	6979      	ldr	r1, [r7, #20]
 800b06c:	f006 fdd2 	bl	8011c14 <tcp_write>
 800b070:	4603      	mov	r3, r0
 800b072:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b074:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d12c      	bne.n	800b0d6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	6999      	ldr	r1, [r3, #24]
 800b082:	8bba      	ldrh	r2, [r7, #28]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	440a      	add	r2, r1
 800b08a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	6919      	ldr	r1, [r3, #16]
 800b092:	8bba      	ldrh	r2, [r7, #28]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	440a      	add	r2, r1
 800b09a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d113      	bne.n	800b0d6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	899a      	ldrh	r2, [r3, #12]
 800b0b4:	3a01      	subs	r2, #1
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	899b      	ldrh	r3, [r3, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	3208      	adds	r2, #8
 800b0cc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b0d6:	7e7b      	ldrb	r3, [r7, #25]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <lwip_netconn_do_writemore+0x222>
 800b0dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f43f af50 	beq.w	800af86 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b0e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <lwip_netconn_do_writemore+0x234>
 800b0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f6:	d147      	bne.n	800b188 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800b0f8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b0fa:	7e3b      	ldrb	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d02b      	beq.n	800b158 <lwip_netconn_do_writemore+0x294>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	699a      	ldr	r2, [r3, #24]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d223      	bcs.n	800b158 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <lwip_netconn_do_writemore+0x260>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2200      	movs	r2, #0
 800b11e:	2103      	movs	r1, #3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7f1b      	ldrb	r3, [r3, #28]
 800b128:	f043 0310 	orr.w	r3, r3, #16
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	771a      	strb	r2, [r3, #28]
 800b132:	e029      	b.n	800b188 <lwip_netconn_do_writemore+0x2c4>
 800b134:	08018574 	.word	0x08018574
 800b138:	080186cc 	.word	0x080186cc
 800b13c:	080185b8 	.word	0x080185b8
 800b140:	080189d4 	.word	0x080189d4
 800b144:	080186dc 	.word	0x080186dc
 800b148:	080189f4 	.word	0x080189f4
 800b14c:	08018a0c 	.word	0x08018a0c
 800b150:	08018a4c 	.word	0x08018a4c
 800b154:	08018a74 	.word	0x08018a74
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b160:	f640 0203 	movw	r2, #2051	; 0x803
 800b164:	4293      	cmp	r3, r2
 800b166:	d905      	bls.n	800b174 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b170:	2b31      	cmp	r3, #49	; 0x31
 800b172:	d909      	bls.n	800b188 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <lwip_netconn_do_writemore+0x2c4>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	2200      	movs	r2, #0
 800b182:	2103      	movs	r1, #3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b188:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11d      	bne.n	800b1cc <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d002      	beq.n	800b1a6 <lwip_netconn_do_writemore+0x2e2>
 800b1a0:	7e3b      	ldrb	r3, [r7, #24]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f007 fb1a 	bl	80127e8 <tcp_output>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b1b8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b1bc:	f113 0f04 	cmn.w	r3, #4
 800b1c0:	d12c      	bne.n	800b21c <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1c2:	7b3b      	ldrb	r3, [r7, #12]
 800b1c4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	76fb      	strb	r3, [r7, #27]
 800b1ca:	e027      	b.n	800b21c <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800b1cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d4:	d120      	bne.n	800b218 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f007 fb04 	bl	80127e8 <tcp_output>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b1e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1e8:	f113 0f04 	cmn.w	r3, #4
 800b1ec:	d104      	bne.n	800b1f8 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b1ee:	7b7b      	ldrb	r3, [r7, #13]
 800b1f0:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	76fb      	strb	r3, [r7, #27]
 800b1f6:	e011      	b.n	800b21c <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800b1f8:	7e3b      	ldrb	r3, [r7, #24]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00e      	beq.n	800b21c <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <lwip_netconn_do_writemore+0x34a>
 800b208:	f06f 0306 	mvn.w	r3, #6
 800b20c:	e000      	b.n	800b210 <lwip_netconn_do_writemore+0x34c>
 800b20e:	2300      	movs	r3, #0
 800b210:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b212:	2301      	movs	r3, #1
 800b214:	76fb      	strb	r3, [r7, #27]
 800b216:	e001      	b.n	800b21c <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b218:	2301      	movs	r3, #1
 800b21a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b21c:	7efb      	ldrb	r3, [r7, #27]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d015      	beq.n	800b24e <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	330c      	adds	r3, #12
 800b22a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	7ffa      	ldrb	r2, [r7, #31]
 800b232:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d006      	beq.n	800b254 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b246:	68b8      	ldr	r0, [r7, #8]
 800b248:	f00b fc18 	bl	8016a7c <sys_sem_signal>
 800b24c:	e002      	b.n	800b254 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b24e:	f04f 33ff 	mov.w	r3, #4294967295
 800b252:	e000      	b.n	800b256 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3720      	adds	r7, #32
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop

0800b260 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4618      	mov	r0, r3
 800b272:	f7fe fd20 	bl	8009cb6 <netconn_err>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d166      	bne.n	800b350 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b28c:	2b10      	cmp	r3, #16
 800b28e:	d15d      	bne.n	800b34c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b29a:	23fb      	movs	r3, #251	; 0xfb
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	e057      	b.n	800b350 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d04d      	beq.n	800b346 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6a1b      	ldr	r3, [r3, #32]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d006      	beq.n	800b2ca <lwip_netconn_do_write+0x6a>
 800b2bc:	4b28      	ldr	r3, [pc, #160]	; (800b360 <lwip_netconn_do_write+0x100>)
 800b2be:	f240 7223 	movw	r2, #1827	; 0x723
 800b2c2:	4928      	ldr	r1, [pc, #160]	; (800b364 <lwip_netconn_do_write+0x104>)
 800b2c4:	4828      	ldr	r0, [pc, #160]	; (800b368 <lwip_netconn_do_write+0x108>)
 800b2c6:	f00b fe9b 	bl	8017000 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <lwip_netconn_do_write+0x80>
 800b2d2:	4b23      	ldr	r3, [pc, #140]	; (800b360 <lwip_netconn_do_write+0x100>)
 800b2d4:	f240 7224 	movw	r2, #1828	; 0x724
 800b2d8:	4924      	ldr	r1, [pc, #144]	; (800b36c <lwip_netconn_do_write+0x10c>)
 800b2da:	4823      	ldr	r0, [pc, #140]	; (800b368 <lwip_netconn_do_write+0x108>)
 800b2dc:	f00b fe90 	bl	8017000 <iprintf>
        msg->conn->current_msg = msg;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fde8 	bl	800aec4 <lwip_netconn_do_writemore>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d02e      	beq.n	800b358 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	785b      	ldrb	r3, [r3, #1]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d006      	beq.n	800b312 <lwip_netconn_do_write+0xb2>
 800b304:	4b16      	ldr	r3, [pc, #88]	; (800b360 <lwip_netconn_do_write+0x100>)
 800b306:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b30a:	4919      	ldr	r1, [pc, #100]	; (800b370 <lwip_netconn_do_write+0x110>)
 800b30c:	4816      	ldr	r0, [pc, #88]	; (800b368 <lwip_netconn_do_write+0x108>)
 800b30e:	f00b fe77 	bl	8017000 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b312:	4818      	ldr	r0, [pc, #96]	; (800b374 <lwip_netconn_do_write+0x114>)
 800b314:	f00b fc1b 	bl	8016b4e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	330c      	adds	r3, #12
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f00b fb7a 	bl	8016a1a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b326:	4813      	ldr	r0, [pc, #76]	; (800b374 <lwip_netconn_do_write+0x114>)
 800b328:	f00b fc02 	bl	8016b30 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d110      	bne.n	800b358 <lwip_netconn_do_write+0xf8>
 800b336:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <lwip_netconn_do_write+0x100>)
 800b338:	f240 722c 	movw	r2, #1836	; 0x72c
 800b33c:	490c      	ldr	r1, [pc, #48]	; (800b370 <lwip_netconn_do_write+0x110>)
 800b33e:	480a      	ldr	r0, [pc, #40]	; (800b368 <lwip_netconn_do_write+0x108>)
 800b340:	f00b fe5e 	bl	8017000 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b344:	e008      	b.n	800b358 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b346:	23f5      	movs	r3, #245	; 0xf5
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	e001      	b.n	800b350 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b34c:	23fa      	movs	r3, #250	; 0xfa
 800b34e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	7bfa      	ldrb	r2, [r7, #15]
 800b354:	711a      	strb	r2, [r3, #4]
 800b356:	e000      	b.n	800b35a <lwip_netconn_do_write+0xfa>
        return;
 800b358:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	08018574 	.word	0x08018574
 800b364:	08018918 	.word	0x08018918
 800b368:	080185b8 	.word	0x080185b8
 800b36c:	08018aa0 	.word	0x08018aa0
 800b370:	08018934 	.word	0x08018934
 800b374:	200088e8 	.word	0x200088e8

0800b378 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d069      	beq.n	800b46a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b3a0:	2b10      	cmp	r3, #16
 800b3a2:	d162      	bne.n	800b46a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d002      	beq.n	800b3b2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d05b      	beq.n	800b46a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b3b2:	7afb      	ldrb	r3, [r7, #11]
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d103      	bne.n	800b3c0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	22f5      	movs	r2, #245	; 0xf5
 800b3bc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3be:	e059      	b.n	800b474 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d103      	bne.n	800b3ce <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	22fb      	movs	r2, #251	; 0xfb
 800b3ca:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b3cc:	e052      	b.n	800b474 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	7a1b      	ldrb	r3, [r3, #8]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d004      	beq.n	800b3e4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff f8ea 	bl	800a5b8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d006      	beq.n	800b3fc <lwip_netconn_do_close+0x84>
 800b3ee:	4b23      	ldr	r3, [pc, #140]	; (800b47c <lwip_netconn_do_close+0x104>)
 800b3f0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b3f4:	4922      	ldr	r1, [pc, #136]	; (800b480 <lwip_netconn_do_close+0x108>)
 800b3f6:	4823      	ldr	r0, [pc, #140]	; (800b484 <lwip_netconn_do_close+0x10c>)
 800b3f8:	f00b fe02 	bl	8017000 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2204      	movs	r2, #4
 800b402:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff f94e 	bl	800a6b4 <lwip_netconn_do_close_internal>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d029      	beq.n	800b472 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	2b04      	cmp	r3, #4
 800b426:	d006      	beq.n	800b436 <lwip_netconn_do_close+0xbe>
 800b428:	4b14      	ldr	r3, [pc, #80]	; (800b47c <lwip_netconn_do_close+0x104>)
 800b42a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b42e:	4916      	ldr	r1, [pc, #88]	; (800b488 <lwip_netconn_do_close+0x110>)
 800b430:	4814      	ldr	r0, [pc, #80]	; (800b484 <lwip_netconn_do_close+0x10c>)
 800b432:	f00b fde5 	bl	8017000 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b436:	4815      	ldr	r0, [pc, #84]	; (800b48c <lwip_netconn_do_close+0x114>)
 800b438:	f00b fb89 	bl	8016b4e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	330c      	adds	r3, #12
 800b442:	2100      	movs	r1, #0
 800b444:	4618      	mov	r0, r3
 800b446:	f00b fae8 	bl	8016a1a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b44a:	4810      	ldr	r0, [pc, #64]	; (800b48c <lwip_netconn_do_close+0x114>)
 800b44c:	f00b fb70 	bl	8016b30 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	785b      	ldrb	r3, [r3, #1]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00b      	beq.n	800b472 <lwip_netconn_do_close+0xfa>
 800b45a:	4b08      	ldr	r3, [pc, #32]	; (800b47c <lwip_netconn_do_close+0x104>)
 800b45c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b460:	4909      	ldr	r1, [pc, #36]	; (800b488 <lwip_netconn_do_close+0x110>)
 800b462:	4808      	ldr	r0, [pc, #32]	; (800b484 <lwip_netconn_do_close+0x10c>)
 800b464:	f00b fdcc 	bl	8017000 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b468:	e003      	b.n	800b472 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	22f5      	movs	r2, #245	; 0xf5
 800b46e:	711a      	strb	r2, [r3, #4]
 800b470:	e000      	b.n	800b474 <lwip_netconn_do_close+0xfc>
      return;
 800b472:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	08018574 	.word	0x08018574
 800b480:	08018918 	.word	0x08018918
 800b484:	080185b8 	.word	0x080185b8
 800b488:	08018934 	.word	0x08018934
 800b48c:	200088e8 	.word	0x200088e8

0800b490 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d013      	beq.n	800b4c6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00b      	beq.n	800b4be <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f001 fda8 	bl	800d000 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	2006      	movs	r0, #6
 800b4c2:	f000 fef5 	bl	800c2b0 <memp_free>
  }
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d108      	bne.n	800b4f0 <netbuf_next+0x20>
 800b4de:	4b11      	ldr	r3, [pc, #68]	; (800b524 <netbuf_next+0x54>)
 800b4e0:	22e0      	movs	r2, #224	; 0xe0
 800b4e2:	4911      	ldr	r1, [pc, #68]	; (800b528 <netbuf_next+0x58>)
 800b4e4:	4811      	ldr	r0, [pc, #68]	; (800b52c <netbuf_next+0x5c>)
 800b4e6:	f00b fd8b 	bl	8017000 <iprintf>
 800b4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ee:	e014      	b.n	800b51a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d102      	bne.n	800b500 <netbuf_next+0x30>
    return -1;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fe:	e00c      	b.n	800b51a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <netbuf_next+0x48>
    return 1;
 800b514:	2301      	movs	r3, #1
 800b516:	e000      	b.n	800b51a <netbuf_next+0x4a>
  }
  return 0;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	08018acc 	.word	0x08018acc
 800b528:	08018c2c 	.word	0x08018c2c
 800b52c:	08018b1c 	.word	0x08018b1c

0800b530 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b53a:	f008 fa0d 	bl	8013958 <sys_timeouts_sleeptime>
 800b53e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b546:	d10b      	bne.n	800b560 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b548:	4813      	ldr	r0, [pc, #76]	; (800b598 <tcpip_timeouts_mbox_fetch+0x68>)
 800b54a:	f00b fb00 	bl	8016b4e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b54e:	2200      	movs	r2, #0
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f00b f9d6 	bl	8016904 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b558:	480f      	ldr	r0, [pc, #60]	; (800b598 <tcpip_timeouts_mbox_fetch+0x68>)
 800b55a:	f00b fae9 	bl	8016b30 <sys_mutex_lock>
    return;
 800b55e:	e018      	b.n	800b592 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d102      	bne.n	800b56c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b566:	f008 f9bd 	bl	80138e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b56a:	e7e6      	b.n	800b53a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b56c:	480a      	ldr	r0, [pc, #40]	; (800b598 <tcpip_timeouts_mbox_fetch+0x68>)
 800b56e:	f00b faee 	bl	8016b4e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f00b f9c4 	bl	8016904 <sys_arch_mbox_fetch>
 800b57c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b57e:	4806      	ldr	r0, [pc, #24]	; (800b598 <tcpip_timeouts_mbox_fetch+0x68>)
 800b580:	f00b fad6 	bl	8016b30 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d102      	bne.n	800b592 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b58c:	f008 f9aa 	bl	80138e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b590:	e7d3      	b.n	800b53a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	200088e8 	.word	0x200088e8

0800b59c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b5a4:	4810      	ldr	r0, [pc, #64]	; (800b5e8 <tcpip_thread+0x4c>)
 800b5a6:	f00b fac3 	bl	8016b30 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b5aa:	4b10      	ldr	r3, [pc, #64]	; (800b5ec <tcpip_thread+0x50>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d005      	beq.n	800b5be <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b5b2:	4b0e      	ldr	r3, [pc, #56]	; (800b5ec <tcpip_thread+0x50>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a0e      	ldr	r2, [pc, #56]	; (800b5f0 <tcpip_thread+0x54>)
 800b5b8:	6812      	ldr	r2, [r2, #0]
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	480b      	ldr	r0, [pc, #44]	; (800b5f4 <tcpip_thread+0x58>)
 800b5c6:	f7ff ffb3 	bl	800b530 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d106      	bne.n	800b5de <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <tcpip_thread+0x5c>)
 800b5d2:	2291      	movs	r2, #145	; 0x91
 800b5d4:	4909      	ldr	r1, [pc, #36]	; (800b5fc <tcpip_thread+0x60>)
 800b5d6:	480a      	ldr	r0, [pc, #40]	; (800b600 <tcpip_thread+0x64>)
 800b5d8:	f00b fd12 	bl	8017000 <iprintf>
      continue;
 800b5dc:	e003      	b.n	800b5e6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 f80f 	bl	800b604 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5e6:	e7ea      	b.n	800b5be <tcpip_thread+0x22>
 800b5e8:	200088e8 	.word	0x200088e8
 800b5ec:	20004a88 	.word	0x20004a88
 800b5f0:	20004a8c 	.word	0x20004a8c
 800b5f4:	20004a90 	.word	0x20004a90
 800b5f8:	08018c64 	.word	0x08018c64
 800b5fc:	08018c94 	.word	0x08018c94
 800b600:	08018cb4 	.word	0x08018cb4

0800b604 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d026      	beq.n	800b662 <tcpip_thread_handle_msg+0x5e>
 800b614:	2b02      	cmp	r3, #2
 800b616:	dc2b      	bgt.n	800b670 <tcpip_thread_handle_msg+0x6c>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <tcpip_thread_handle_msg+0x1e>
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d015      	beq.n	800b64c <tcpip_thread_handle_msg+0x48>
 800b620:	e026      	b.n	800b670 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6850      	ldr	r0, [r2, #4]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	6892      	ldr	r2, [r2, #8]
 800b62e:	4611      	mov	r1, r2
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f001 fcdf 	bl	800d000 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	2009      	movs	r0, #9
 800b646:	f000 fe33 	bl	800c2b0 <memp_free>
      break;
 800b64a:	e018      	b.n	800b67e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6892      	ldr	r2, [r2, #8]
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b658:	6879      	ldr	r1, [r7, #4]
 800b65a:	2008      	movs	r0, #8
 800b65c:	f000 fe28 	bl	800c2b0 <memp_free>
      break;
 800b660:	e00d      	b.n	800b67e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6892      	ldr	r2, [r2, #8]
 800b66a:	4610      	mov	r0, r2
 800b66c:	4798      	blx	r3
      break;
 800b66e:	e006      	b.n	800b67e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b670:	4b05      	ldr	r3, [pc, #20]	; (800b688 <tcpip_thread_handle_msg+0x84>)
 800b672:	22cf      	movs	r2, #207	; 0xcf
 800b674:	4905      	ldr	r1, [pc, #20]	; (800b68c <tcpip_thread_handle_msg+0x88>)
 800b676:	4806      	ldr	r0, [pc, #24]	; (800b690 <tcpip_thread_handle_msg+0x8c>)
 800b678:	f00b fcc2 	bl	8017000 <iprintf>
      break;
 800b67c:	bf00      	nop
  }
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	08018c64 	.word	0x08018c64
 800b68c:	08018c94 	.word	0x08018c94
 800b690:	08018cb4 	.word	0x08018cb4

0800b694 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b6a0:	481a      	ldr	r0, [pc, #104]	; (800b70c <tcpip_inpkt+0x78>)
 800b6a2:	f00b f977 	bl	8016994 <sys_mbox_valid>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d105      	bne.n	800b6b8 <tcpip_inpkt+0x24>
 800b6ac:	4b18      	ldr	r3, [pc, #96]	; (800b710 <tcpip_inpkt+0x7c>)
 800b6ae:	22fc      	movs	r2, #252	; 0xfc
 800b6b0:	4918      	ldr	r1, [pc, #96]	; (800b714 <tcpip_inpkt+0x80>)
 800b6b2:	4819      	ldr	r0, [pc, #100]	; (800b718 <tcpip_inpkt+0x84>)
 800b6b4:	f00b fca4 	bl	8017000 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b6b8:	2009      	movs	r0, #9
 800b6ba:	f000 fda7 	bl	800c20c <memp_malloc>
 800b6be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d102      	bne.n	800b6cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	e01a      	b.n	800b702 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b6e4:	6979      	ldr	r1, [r7, #20]
 800b6e6:	4809      	ldr	r0, [pc, #36]	; (800b70c <tcpip_inpkt+0x78>)
 800b6e8:	f00b f8f2 	bl	80168d0 <sys_mbox_trypost>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b6f2:	6979      	ldr	r1, [r7, #20]
 800b6f4:	2009      	movs	r0, #9
 800b6f6:	f000 fddb 	bl	800c2b0 <memp_free>
    return ERR_MEM;
 800b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fe:	e000      	b.n	800b702 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b700:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20004a90 	.word	0x20004a90
 800b710:	08018c64 	.word	0x08018c64
 800b714:	08018cdc 	.word	0x08018cdc
 800b718:	08018cb4 	.word	0x08018cb4

0800b71c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b72c:	f003 0318 	and.w	r3, r3, #24
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b734:	4a08      	ldr	r2, [pc, #32]	; (800b758 <tcpip_input+0x3c>)
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ffab 	bl	800b694 <tcpip_inpkt>
 800b73e:	4603      	mov	r3, r0
 800b740:	e005      	b.n	800b74e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b742:	4a06      	ldr	r2, [pc, #24]	; (800b75c <tcpip_input+0x40>)
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff ffa4 	bl	800b694 <tcpip_inpkt>
 800b74c:	4603      	mov	r3, r0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	080166cd 	.word	0x080166cd
 800b75c:	0801538d 	.word	0x0801538d

0800b760 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b76a:	4819      	ldr	r0, [pc, #100]	; (800b7d0 <tcpip_try_callback+0x70>)
 800b76c:	f00b f912 	bl	8016994 <sys_mbox_valid>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <tcpip_try_callback+0x24>
 800b776:	4b17      	ldr	r3, [pc, #92]	; (800b7d4 <tcpip_try_callback+0x74>)
 800b778:	f240 125d 	movw	r2, #349	; 0x15d
 800b77c:	4916      	ldr	r1, [pc, #88]	; (800b7d8 <tcpip_try_callback+0x78>)
 800b77e:	4817      	ldr	r0, [pc, #92]	; (800b7dc <tcpip_try_callback+0x7c>)
 800b780:	f00b fc3e 	bl	8017000 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b784:	2008      	movs	r0, #8
 800b786:	f000 fd41 	bl	800c20c <memp_malloc>
 800b78a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d102      	bne.n	800b798 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
 800b796:	e017      	b.n	800b7c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2201      	movs	r2, #1
 800b79c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b7aa:	68f9      	ldr	r1, [r7, #12]
 800b7ac:	4808      	ldr	r0, [pc, #32]	; (800b7d0 <tcpip_try_callback+0x70>)
 800b7ae:	f00b f88f 	bl	80168d0 <sys_mbox_trypost>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	2008      	movs	r0, #8
 800b7bc:	f000 fd78 	bl	800c2b0 <memp_free>
    return ERR_MEM;
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c4:	e000      	b.n	800b7c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20004a90 	.word	0x20004a90
 800b7d4:	08018c64 	.word	0x08018c64
 800b7d8:	08018cdc 	.word	0x08018cdc
 800b7dc:	08018cb4 	.word	0x08018cb4

0800b7e0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b7ec:	4806      	ldr	r0, [pc, #24]	; (800b808 <tcpip_send_msg_wait_sem+0x28>)
 800b7ee:	f00b f99f 	bl	8016b30 <sys_mutex_lock>
  fn(apimsg);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b7f8:	4803      	ldr	r0, [pc, #12]	; (800b808 <tcpip_send_msg_wait_sem+0x28>)
 800b7fa:	f00b f9a8 	bl	8016b4e <sys_mutex_unlock>
  return ERR_OK;
 800b7fe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	200088e8 	.word	0x200088e8

0800b80c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af02      	add	r7, sp, #8
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b816:	f000 f871 	bl	800b8fc <lwip_init>

  tcpip_init_done = initfunc;
 800b81a:	4a17      	ldr	r2, [pc, #92]	; (800b878 <tcpip_init+0x6c>)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b820:	4a16      	ldr	r2, [pc, #88]	; (800b87c <tcpip_init+0x70>)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b826:	2106      	movs	r1, #6
 800b828:	4815      	ldr	r0, [pc, #84]	; (800b880 <tcpip_init+0x74>)
 800b82a:	f00b f825 	bl	8016878 <sys_mbox_new>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b834:	4b13      	ldr	r3, [pc, #76]	; (800b884 <tcpip_init+0x78>)
 800b836:	f240 2261 	movw	r2, #609	; 0x261
 800b83a:	4913      	ldr	r1, [pc, #76]	; (800b888 <tcpip_init+0x7c>)
 800b83c:	4813      	ldr	r0, [pc, #76]	; (800b88c <tcpip_init+0x80>)
 800b83e:	f00b fbdf 	bl	8017000 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b842:	4813      	ldr	r0, [pc, #76]	; (800b890 <tcpip_init+0x84>)
 800b844:	f00b f95e 	bl	8016b04 <sys_mutex_new>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d006      	beq.n	800b85c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b84e:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <tcpip_init+0x78>)
 800b850:	f240 2265 	movw	r2, #613	; 0x265
 800b854:	490f      	ldr	r1, [pc, #60]	; (800b894 <tcpip_init+0x88>)
 800b856:	480d      	ldr	r0, [pc, #52]	; (800b88c <tcpip_init+0x80>)
 800b858:	f00b fbd2 	bl	8017000 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b85c:	2318      	movs	r3, #24
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b864:	2200      	movs	r2, #0
 800b866:	490c      	ldr	r1, [pc, #48]	; (800b898 <tcpip_init+0x8c>)
 800b868:	480c      	ldr	r0, [pc, #48]	; (800b89c <tcpip_init+0x90>)
 800b86a:	f00b f97d 	bl	8016b68 <sys_thread_new>
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20004a88 	.word	0x20004a88
 800b87c:	20004a8c 	.word	0x20004a8c
 800b880:	20004a90 	.word	0x20004a90
 800b884:	08018c64 	.word	0x08018c64
 800b888:	08018cec 	.word	0x08018cec
 800b88c:	08018cb4 	.word	0x08018cb4
 800b890:	200088e8 	.word	0x200088e8
 800b894:	08018d10 	.word	0x08018d10
 800b898:	0800b59d 	.word	0x0800b59d
 800b89c:	08018d34 	.word	0x08018d34

0800b8a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	021b      	lsls	r3, r3, #8
 800b8ae:	b21a      	sxth	r2, r3
 800b8b0:	88fb      	ldrh	r3, [r7, #6]
 800b8b2:	0a1b      	lsrs	r3, r3, #8
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	b21b      	sxth	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	b21b      	sxth	r3, r3
 800b8bc:	b29b      	uxth	r3, r3
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	061a      	lsls	r2, r3, #24
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	0e1b      	lsrs	r3, r3, #24
 800b8ee:	4313      	orrs	r3, r2
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b906:	f00b f8f1 	bl	8016aec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b90a:	f000 f8d5 	bl	800bab8 <mem_init>
  memp_init();
 800b90e:	f000 fc31 	bl	800c174 <memp_init>
  pbuf_init();
  netif_init();
 800b912:	f000 fcf7 	bl	800c304 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b916:	f008 f857 	bl	80139c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b91a:	f001 fe0b 	bl	800d534 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b91e:	f007 ff99 	bl	8013854 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <ptr_to_mem+0x20>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	4413      	add	r3, r2
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	20004a94 	.word	0x20004a94

0800b950 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <mem_to_ptr+0x20>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	b29b      	uxth	r3, r3
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20004a94 	.word	0x20004a94

0800b974 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b97c:	4b45      	ldr	r3, [pc, #276]	; (800ba94 <plug_holes+0x120>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	429a      	cmp	r2, r3
 800b984:	d206      	bcs.n	800b994 <plug_holes+0x20>
 800b986:	4b44      	ldr	r3, [pc, #272]	; (800ba98 <plug_holes+0x124>)
 800b988:	f240 12df 	movw	r2, #479	; 0x1df
 800b98c:	4943      	ldr	r1, [pc, #268]	; (800ba9c <plug_holes+0x128>)
 800b98e:	4844      	ldr	r0, [pc, #272]	; (800baa0 <plug_holes+0x12c>)
 800b990:	f00b fb36 	bl	8017000 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b994:	4b43      	ldr	r3, [pc, #268]	; (800baa4 <plug_holes+0x130>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d306      	bcc.n	800b9ac <plug_holes+0x38>
 800b99e:	4b3e      	ldr	r3, [pc, #248]	; (800ba98 <plug_holes+0x124>)
 800b9a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b9a4:	4940      	ldr	r1, [pc, #256]	; (800baa8 <plug_holes+0x134>)
 800b9a6:	483e      	ldr	r0, [pc, #248]	; (800baa0 <plug_holes+0x12c>)
 800b9a8:	f00b fb2a 	bl	8017000 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	791b      	ldrb	r3, [r3, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d006      	beq.n	800b9c2 <plug_holes+0x4e>
 800b9b4:	4b38      	ldr	r3, [pc, #224]	; (800ba98 <plug_holes+0x124>)
 800b9b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b9ba:	493c      	ldr	r1, [pc, #240]	; (800baac <plug_holes+0x138>)
 800b9bc:	4838      	ldr	r0, [pc, #224]	; (800baa0 <plug_holes+0x12c>)
 800b9be:	f00b fb1f 	bl	8017000 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b9ca:	d906      	bls.n	800b9da <plug_holes+0x66>
 800b9cc:	4b32      	ldr	r3, [pc, #200]	; (800ba98 <plug_holes+0x124>)
 800b9ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b9d2:	4937      	ldr	r1, [pc, #220]	; (800bab0 <plug_holes+0x13c>)
 800b9d4:	4832      	ldr	r0, [pc, #200]	; (800baa0 <plug_holes+0x12c>)
 800b9d6:	f00b fb13 	bl	8017000 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff ffa4 	bl	800b92c <ptr_to_mem>
 800b9e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d024      	beq.n	800ba38 <plug_holes+0xc4>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	791b      	ldrb	r3, [r3, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d120      	bne.n	800ba38 <plug_holes+0xc4>
 800b9f6:	4b2b      	ldr	r3, [pc, #172]	; (800baa4 <plug_holes+0x130>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d01b      	beq.n	800ba38 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ba00:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <plug_holes+0x140>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d102      	bne.n	800ba10 <plug_holes+0x9c>
      lfree = mem;
 800ba0a:	4a2a      	ldr	r2, [pc, #168]	; (800bab4 <plug_holes+0x140>)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	881a      	ldrh	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ba20:	d00a      	beq.n	800ba38 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff ff80 	bl	800b92c <ptr_to_mem>
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff ff8e 	bl	800b950 <mem_to_ptr>
 800ba34:	4603      	mov	r3, r0
 800ba36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	885b      	ldrh	r3, [r3, #2]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff ff75 	bl	800b92c <ptr_to_mem>
 800ba42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d01f      	beq.n	800ba8c <plug_holes+0x118>
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11b      	bne.n	800ba8c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba54:	4b17      	ldr	r3, [pc, #92]	; (800bab4 <plug_holes+0x140>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d102      	bne.n	800ba64 <plug_holes+0xf0>
      lfree = pmem;
 800ba5e:	4a15      	ldr	r2, [pc, #84]	; (800bab4 <plug_holes+0x140>)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	881a      	ldrh	r2, [r3, #0]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ba74:	d00a      	beq.n	800ba8c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff ff56 	bl	800b92c <ptr_to_mem>
 800ba80:	4604      	mov	r4, r0
 800ba82:	68b8      	ldr	r0, [r7, #8]
 800ba84:	f7ff ff64 	bl	800b950 <mem_to_ptr>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd90      	pop	{r4, r7, pc}
 800ba94:	20004a94 	.word	0x20004a94
 800ba98:	08018d44 	.word	0x08018d44
 800ba9c:	08018d74 	.word	0x08018d74
 800baa0:	08018d8c 	.word	0x08018d8c
 800baa4:	20004a98 	.word	0x20004a98
 800baa8:	08018db4 	.word	0x08018db4
 800baac:	08018dd0 	.word	0x08018dd0
 800bab0:	08018dec 	.word	0x08018dec
 800bab4:	20004aa0 	.word	0x20004aa0

0800bab8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800babe:	4b1f      	ldr	r3, [pc, #124]	; (800bb3c <mem_init+0x84>)
 800bac0:	3303      	adds	r3, #3
 800bac2:	f023 0303 	bic.w	r3, r3, #3
 800bac6:	461a      	mov	r2, r3
 800bac8:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <mem_init+0x88>)
 800baca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bacc:	4b1c      	ldr	r3, [pc, #112]	; (800bb40 <mem_init+0x88>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bad8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bae6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800baea:	f7ff ff1f 	bl	800b92c <ptr_to_mem>
 800baee:	4603      	mov	r3, r0
 800baf0:	4a14      	ldr	r2, [pc, #80]	; (800bb44 <mem_init+0x8c>)
 800baf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800baf4:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <mem_init+0x8c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2201      	movs	r2, #1
 800bafa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bafc:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <mem_init+0x8c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bb06:	4b0f      	ldr	r3, [pc, #60]	; (800bb44 <mem_init+0x8c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bb10:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <mem_init+0x88>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a0c      	ldr	r2, [pc, #48]	; (800bb48 <mem_init+0x90>)
 800bb16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bb18:	480c      	ldr	r0, [pc, #48]	; (800bb4c <mem_init+0x94>)
 800bb1a:	f00a fff3 	bl	8016b04 <sys_mutex_new>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bb24:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <mem_init+0x98>)
 800bb26:	f240 221f 	movw	r2, #543	; 0x21f
 800bb2a:	490a      	ldr	r1, [pc, #40]	; (800bb54 <mem_init+0x9c>)
 800bb2c:	480a      	ldr	r0, [pc, #40]	; (800bb58 <mem_init+0xa0>)
 800bb2e:	f00b fa67 	bl	8017000 <iprintf>
  }
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20008904 	.word	0x20008904
 800bb40:	20004a94 	.word	0x20004a94
 800bb44:	20004a98 	.word	0x20004a98
 800bb48:	20004aa0 	.word	0x20004aa0
 800bb4c:	20004a9c 	.word	0x20004a9c
 800bb50:	08018d44 	.word	0x08018d44
 800bb54:	08018e18 	.word	0x08018e18
 800bb58:	08018d8c 	.word	0x08018d8c

0800bb5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff fef3 	bl	800b950 <mem_to_ptr>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7ff feda 	bl	800b92c <ptr_to_mem>
 800bb78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7ff fed4 	bl	800b92c <ptr_to_mem>
 800bb84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb8e:	d818      	bhi.n	800bbc2 <mem_link_valid+0x66>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	885b      	ldrh	r3, [r3, #2]
 800bb94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb98:	d813      	bhi.n	800bbc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb9e:	8afa      	ldrh	r2, [r7, #22]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d004      	beq.n	800bbae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	8afa      	ldrh	r2, [r7, #22]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d109      	bne.n	800bbc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbae:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <mem_link_valid+0x74>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d006      	beq.n	800bbc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	885b      	ldrh	r3, [r3, #2]
 800bbbc:	8afa      	ldrh	r2, [r7, #22]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d001      	beq.n	800bbc6 <mem_link_valid+0x6a>
    return 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e000      	b.n	800bbc8 <mem_link_valid+0x6c>
  }
  return 1;
 800bbc6:	2301      	movs	r3, #1
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20004a98 	.word	0x20004a98

0800bbd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d070      	beq.n	800bcc4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00d      	beq.n	800bc08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbec:	4b37      	ldr	r3, [pc, #220]	; (800bccc <mem_free+0xf8>)
 800bbee:	f240 2273 	movw	r2, #627	; 0x273
 800bbf2:	4937      	ldr	r1, [pc, #220]	; (800bcd0 <mem_free+0xfc>)
 800bbf4:	4837      	ldr	r0, [pc, #220]	; (800bcd4 <mem_free+0x100>)
 800bbf6:	f00b fa03 	bl	8017000 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbfa:	f00a ffd5 	bl	8016ba8 <sys_arch_protect>
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f00a ffdf 	bl	8016bc4 <sys_arch_unprotect>
    return;
 800bc06:	e05e      	b.n	800bcc6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3b08      	subs	r3, #8
 800bc0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc0e:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <mem_free+0x104>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d306      	bcc.n	800bc26 <mem_free+0x52>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 020c 	add.w	r2, r3, #12
 800bc1e:	4b2f      	ldr	r3, [pc, #188]	; (800bcdc <mem_free+0x108>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d90d      	bls.n	800bc42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc26:	4b29      	ldr	r3, [pc, #164]	; (800bccc <mem_free+0xf8>)
 800bc28:	f240 227f 	movw	r2, #639	; 0x27f
 800bc2c:	492c      	ldr	r1, [pc, #176]	; (800bce0 <mem_free+0x10c>)
 800bc2e:	4829      	ldr	r0, [pc, #164]	; (800bcd4 <mem_free+0x100>)
 800bc30:	f00b f9e6 	bl	8017000 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc34:	f00a ffb8 	bl	8016ba8 <sys_arch_protect>
 800bc38:	6138      	str	r0, [r7, #16]
 800bc3a:	6938      	ldr	r0, [r7, #16]
 800bc3c:	f00a ffc2 	bl	8016bc4 <sys_arch_unprotect>
    return;
 800bc40:	e041      	b.n	800bcc6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc42:	4828      	ldr	r0, [pc, #160]	; (800bce4 <mem_free+0x110>)
 800bc44:	f00a ff74 	bl	8016b30 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	791b      	ldrb	r3, [r3, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d110      	bne.n	800bc72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc50:	4b1e      	ldr	r3, [pc, #120]	; (800bccc <mem_free+0xf8>)
 800bc52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc56:	4924      	ldr	r1, [pc, #144]	; (800bce8 <mem_free+0x114>)
 800bc58:	481e      	ldr	r0, [pc, #120]	; (800bcd4 <mem_free+0x100>)
 800bc5a:	f00b f9d1 	bl	8017000 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc5e:	4821      	ldr	r0, [pc, #132]	; (800bce4 <mem_free+0x110>)
 800bc60:	f00a ff75 	bl	8016b4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc64:	f00a ffa0 	bl	8016ba8 <sys_arch_protect>
 800bc68:	6178      	str	r0, [r7, #20]
 800bc6a:	6978      	ldr	r0, [r7, #20]
 800bc6c:	f00a ffaa 	bl	8016bc4 <sys_arch_unprotect>
    return;
 800bc70:	e029      	b.n	800bcc6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc72:	69f8      	ldr	r0, [r7, #28]
 800bc74:	f7ff ff72 	bl	800bb5c <mem_link_valid>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d110      	bne.n	800bca0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc7e:	4b13      	ldr	r3, [pc, #76]	; (800bccc <mem_free+0xf8>)
 800bc80:	f240 2295 	movw	r2, #661	; 0x295
 800bc84:	4919      	ldr	r1, [pc, #100]	; (800bcec <mem_free+0x118>)
 800bc86:	4813      	ldr	r0, [pc, #76]	; (800bcd4 <mem_free+0x100>)
 800bc88:	f00b f9ba 	bl	8017000 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc8c:	4815      	ldr	r0, [pc, #84]	; (800bce4 <mem_free+0x110>)
 800bc8e:	f00a ff5e 	bl	8016b4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc92:	f00a ff89 	bl	8016ba8 <sys_arch_protect>
 800bc96:	61b8      	str	r0, [r7, #24]
 800bc98:	69b8      	ldr	r0, [r7, #24]
 800bc9a:	f00a ff93 	bl	8016bc4 <sys_arch_unprotect>
    return;
 800bc9e:	e012      	b.n	800bcc6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	2200      	movs	r2, #0
 800bca4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bca6:	4b12      	ldr	r3, [pc, #72]	; (800bcf0 <mem_free+0x11c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d202      	bcs.n	800bcb6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bcb0:	4a0f      	ldr	r2, [pc, #60]	; (800bcf0 <mem_free+0x11c>)
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bcb6:	69f8      	ldr	r0, [r7, #28]
 800bcb8:	f7ff fe5c 	bl	800b974 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcbc:	4809      	ldr	r0, [pc, #36]	; (800bce4 <mem_free+0x110>)
 800bcbe:	f00a ff46 	bl	8016b4e <sys_mutex_unlock>
 800bcc2:	e000      	b.n	800bcc6 <mem_free+0xf2>
    return;
 800bcc4:	bf00      	nop
}
 800bcc6:	3720      	adds	r7, #32
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	08018d44 	.word	0x08018d44
 800bcd0:	08018e34 	.word	0x08018e34
 800bcd4:	08018d8c 	.word	0x08018d8c
 800bcd8:	20004a94 	.word	0x20004a94
 800bcdc:	20004a98 	.word	0x20004a98
 800bce0:	08018e58 	.word	0x08018e58
 800bce4:	20004a9c 	.word	0x20004a9c
 800bce8:	08018e74 	.word	0x08018e74
 800bcec:	08018e9c 	.word	0x08018e9c
 800bcf0:	20004aa0 	.word	0x20004aa0

0800bcf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bd00:	887b      	ldrh	r3, [r7, #2]
 800bd02:	3303      	adds	r3, #3
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	f023 0303 	bic.w	r3, r3, #3
 800bd0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bd0c:	8bfb      	ldrh	r3, [r7, #30]
 800bd0e:	2b0b      	cmp	r3, #11
 800bd10:	d801      	bhi.n	800bd16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bd12:	230c      	movs	r3, #12
 800bd14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bd16:	8bfb      	ldrh	r3, [r7, #30]
 800bd18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd1c:	d803      	bhi.n	800bd26 <mem_trim+0x32>
 800bd1e:	8bfa      	ldrh	r2, [r7, #30]
 800bd20:	887b      	ldrh	r3, [r7, #2]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d201      	bcs.n	800bd2a <mem_trim+0x36>
    return NULL;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e0d8      	b.n	800bedc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bd2a:	4b6e      	ldr	r3, [pc, #440]	; (800bee4 <mem_trim+0x1f0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d304      	bcc.n	800bd3e <mem_trim+0x4a>
 800bd34:	4b6c      	ldr	r3, [pc, #432]	; (800bee8 <mem_trim+0x1f4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d306      	bcc.n	800bd4c <mem_trim+0x58>
 800bd3e:	4b6b      	ldr	r3, [pc, #428]	; (800beec <mem_trim+0x1f8>)
 800bd40:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bd44:	496a      	ldr	r1, [pc, #424]	; (800bef0 <mem_trim+0x1fc>)
 800bd46:	486b      	ldr	r0, [pc, #428]	; (800bef4 <mem_trim+0x200>)
 800bd48:	f00b f95a 	bl	8017000 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd4c:	4b65      	ldr	r3, [pc, #404]	; (800bee4 <mem_trim+0x1f0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d304      	bcc.n	800bd60 <mem_trim+0x6c>
 800bd56:	4b64      	ldr	r3, [pc, #400]	; (800bee8 <mem_trim+0x1f4>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d307      	bcc.n	800bd70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd60:	f00a ff22 	bl	8016ba8 <sys_arch_protect>
 800bd64:	60b8      	str	r0, [r7, #8]
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f00a ff2c 	bl	8016bc4 <sys_arch_unprotect>
    return rmem;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	e0b5      	b.n	800bedc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3b08      	subs	r3, #8
 800bd74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd76:	69b8      	ldr	r0, [r7, #24]
 800bd78:	f7ff fdea 	bl	800b950 <mem_to_ptr>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	881a      	ldrh	r2, [r3, #0]
 800bd84:	8afb      	ldrh	r3, [r7, #22]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	3b08      	subs	r3, #8
 800bd8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd8e:	8bfa      	ldrh	r2, [r7, #30]
 800bd90:	8abb      	ldrh	r3, [r7, #20]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d906      	bls.n	800bda4 <mem_trim+0xb0>
 800bd96:	4b55      	ldr	r3, [pc, #340]	; (800beec <mem_trim+0x1f8>)
 800bd98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd9c:	4956      	ldr	r1, [pc, #344]	; (800bef8 <mem_trim+0x204>)
 800bd9e:	4855      	ldr	r0, [pc, #340]	; (800bef4 <mem_trim+0x200>)
 800bda0:	f00b f92e 	bl	8017000 <iprintf>
  if (newsize > size) {
 800bda4:	8bfa      	ldrh	r2, [r7, #30]
 800bda6:	8abb      	ldrh	r3, [r7, #20]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d901      	bls.n	800bdb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e095      	b.n	800bedc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bdb0:	8bfa      	ldrh	r2, [r7, #30]
 800bdb2:	8abb      	ldrh	r3, [r7, #20]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d101      	bne.n	800bdbc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	e08f      	b.n	800bedc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdbc:	484f      	ldr	r0, [pc, #316]	; (800befc <mem_trim+0x208>)
 800bdbe:	f00a feb7 	bl	8016b30 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff fdb0 	bl	800b92c <ptr_to_mem>
 800bdcc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	791b      	ldrb	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d13f      	bne.n	800be56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bdde:	d106      	bne.n	800bdee <mem_trim+0xfa>
 800bde0:	4b42      	ldr	r3, [pc, #264]	; (800beec <mem_trim+0x1f8>)
 800bde2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bde6:	4946      	ldr	r1, [pc, #280]	; (800bf00 <mem_trim+0x20c>)
 800bde8:	4842      	ldr	r0, [pc, #264]	; (800bef4 <mem_trim+0x200>)
 800bdea:	f00b f909 	bl	8017000 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdf4:	8afa      	ldrh	r2, [r7, #22]
 800bdf6:	8bfb      	ldrh	r3, [r7, #30]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3308      	adds	r3, #8
 800bdfe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800be00:	4b40      	ldr	r3, [pc, #256]	; (800bf04 <mem_trim+0x210>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	429a      	cmp	r2, r3
 800be08:	d106      	bne.n	800be18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800be0a:	89fb      	ldrh	r3, [r7, #14]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff fd8d 	bl	800b92c <ptr_to_mem>
 800be12:	4603      	mov	r3, r0
 800be14:	4a3b      	ldr	r2, [pc, #236]	; (800bf04 <mem_trim+0x210>)
 800be16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800be18:	89fb      	ldrh	r3, [r7, #14]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fd86 	bl	800b92c <ptr_to_mem>
 800be20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	2200      	movs	r2, #0
 800be26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	89ba      	ldrh	r2, [r7, #12]
 800be2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	8afa      	ldrh	r2, [r7, #22]
 800be32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	89fa      	ldrh	r2, [r7, #14]
 800be38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be42:	d047      	beq.n	800bed4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fd6f 	bl	800b92c <ptr_to_mem>
 800be4e:	4602      	mov	r2, r0
 800be50:	89fb      	ldrh	r3, [r7, #14]
 800be52:	8053      	strh	r3, [r2, #2]
 800be54:	e03e      	b.n	800bed4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be56:	8bfb      	ldrh	r3, [r7, #30]
 800be58:	f103 0214 	add.w	r2, r3, #20
 800be5c:	8abb      	ldrh	r3, [r7, #20]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d838      	bhi.n	800bed4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be62:	8afa      	ldrh	r2, [r7, #22]
 800be64:	8bfb      	ldrh	r3, [r7, #30]
 800be66:	4413      	add	r3, r2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3308      	adds	r3, #8
 800be6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be76:	d106      	bne.n	800be86 <mem_trim+0x192>
 800be78:	4b1c      	ldr	r3, [pc, #112]	; (800beec <mem_trim+0x1f8>)
 800be7a:	f240 3216 	movw	r2, #790	; 0x316
 800be7e:	4920      	ldr	r1, [pc, #128]	; (800bf00 <mem_trim+0x20c>)
 800be80:	481c      	ldr	r0, [pc, #112]	; (800bef4 <mem_trim+0x200>)
 800be82:	f00b f8bd 	bl	8017000 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be86:	89fb      	ldrh	r3, [r7, #14]
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff fd4f 	bl	800b92c <ptr_to_mem>
 800be8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be90:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <mem_trim+0x210>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	429a      	cmp	r2, r3
 800be98:	d202      	bcs.n	800bea0 <mem_trim+0x1ac>
      lfree = mem2;
 800be9a:	4a1a      	ldr	r2, [pc, #104]	; (800bf04 <mem_trim+0x210>)
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2200      	movs	r2, #0
 800bea4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	881a      	ldrh	r2, [r3, #0]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	8afa      	ldrh	r2, [r7, #22]
 800beb2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	89fa      	ldrh	r2, [r7, #14]
 800beb8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bec2:	d007      	beq.n	800bed4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff fd2f 	bl	800b92c <ptr_to_mem>
 800bece:	4602      	mov	r2, r0
 800bed0:	89fb      	ldrh	r3, [r7, #14]
 800bed2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bed4:	4809      	ldr	r0, [pc, #36]	; (800befc <mem_trim+0x208>)
 800bed6:	f00a fe3a 	bl	8016b4e <sys_mutex_unlock>
  return rmem;
 800beda:	687b      	ldr	r3, [r7, #4]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3720      	adds	r7, #32
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	20004a94 	.word	0x20004a94
 800bee8:	20004a98 	.word	0x20004a98
 800beec:	08018d44 	.word	0x08018d44
 800bef0:	08018ed0 	.word	0x08018ed0
 800bef4:	08018d8c 	.word	0x08018d8c
 800bef8:	08018ee8 	.word	0x08018ee8
 800befc:	20004a9c 	.word	0x20004a9c
 800bf00:	08018f08 	.word	0x08018f08
 800bf04:	20004aa0 	.word	0x20004aa0

0800bf08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <mem_malloc+0x14>
    return NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e0e2      	b.n	800c0e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bf1c:	88fb      	ldrh	r3, [r7, #6]
 800bf1e:	3303      	adds	r3, #3
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bf28:	8bbb      	ldrh	r3, [r7, #28]
 800bf2a:	2b0b      	cmp	r3, #11
 800bf2c:	d801      	bhi.n	800bf32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bf2e:	230c      	movs	r3, #12
 800bf30:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf32:	8bbb      	ldrh	r3, [r7, #28]
 800bf34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bf38:	d803      	bhi.n	800bf42 <mem_malloc+0x3a>
 800bf3a:	8bba      	ldrh	r2, [r7, #28]
 800bf3c:	88fb      	ldrh	r3, [r7, #6]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d201      	bcs.n	800bf46 <mem_malloc+0x3e>
    return NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e0cd      	b.n	800c0e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf46:	4869      	ldr	r0, [pc, #420]	; (800c0ec <mem_malloc+0x1e4>)
 800bf48:	f00a fdf2 	bl	8016b30 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf4c:	4b68      	ldr	r3, [pc, #416]	; (800c0f0 <mem_malloc+0x1e8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff fcfd 	bl	800b950 <mem_to_ptr>
 800bf56:	4603      	mov	r3, r0
 800bf58:	83fb      	strh	r3, [r7, #30]
 800bf5a:	e0b7      	b.n	800c0cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf5c:	8bfb      	ldrh	r3, [r7, #30]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff fce4 	bl	800b92c <ptr_to_mem>
 800bf64:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	791b      	ldrb	r3, [r3, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f040 80a7 	bne.w	800c0be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
 800bf76:	8bfb      	ldrh	r3, [r7, #30]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	f1a3 0208 	sub.w	r2, r3, #8
 800bf7e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf80:	429a      	cmp	r2, r3
 800bf82:	f0c0 809c 	bcc.w	800c0be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	8bfb      	ldrh	r3, [r7, #30]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	f1a3 0208 	sub.w	r2, r3, #8
 800bf94:	8bbb      	ldrh	r3, [r7, #28]
 800bf96:	3314      	adds	r3, #20
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d333      	bcc.n	800c004 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf9c:	8bfa      	ldrh	r2, [r7, #30]
 800bf9e:	8bbb      	ldrh	r3, [r7, #28]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bfa8:	8a7b      	ldrh	r3, [r7, #18]
 800bfaa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bfae:	d106      	bne.n	800bfbe <mem_malloc+0xb6>
 800bfb0:	4b50      	ldr	r3, [pc, #320]	; (800c0f4 <mem_malloc+0x1ec>)
 800bfb2:	f240 3287 	movw	r2, #903	; 0x387
 800bfb6:	4950      	ldr	r1, [pc, #320]	; (800c0f8 <mem_malloc+0x1f0>)
 800bfb8:	4850      	ldr	r0, [pc, #320]	; (800c0fc <mem_malloc+0x1f4>)
 800bfba:	f00b f821 	bl	8017000 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bfbe:	8a7b      	ldrh	r3, [r7, #18]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff fcb3 	bl	800b92c <ptr_to_mem>
 800bfc6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	881a      	ldrh	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8bfa      	ldrh	r2, [r7, #30]
 800bfda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	8a7a      	ldrh	r2, [r7, #18]
 800bfe0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bff0:	d00b      	beq.n	800c00a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff fc98 	bl	800b92c <ptr_to_mem>
 800bffc:	4602      	mov	r2, r0
 800bffe:	8a7b      	ldrh	r3, [r7, #18]
 800c000:	8053      	strh	r3, [r2, #2]
 800c002:	e002      	b.n	800c00a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2201      	movs	r2, #1
 800c008:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c00a:	4b39      	ldr	r3, [pc, #228]	; (800c0f0 <mem_malloc+0x1e8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	d127      	bne.n	800c064 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c014:	4b36      	ldr	r3, [pc, #216]	; (800c0f0 <mem_malloc+0x1e8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c01a:	e005      	b.n	800c028 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff fc83 	bl	800b92c <ptr_to_mem>
 800c026:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	791b      	ldrb	r3, [r3, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <mem_malloc+0x132>
 800c030:	4b33      	ldr	r3, [pc, #204]	; (800c100 <mem_malloc+0x1f8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	429a      	cmp	r2, r3
 800c038:	d1f0      	bne.n	800c01c <mem_malloc+0x114>
          }
          lfree = cur;
 800c03a:	4a2d      	ldr	r2, [pc, #180]	; (800c0f0 <mem_malloc+0x1e8>)
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c040:	4b2b      	ldr	r3, [pc, #172]	; (800c0f0 <mem_malloc+0x1e8>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	4b2e      	ldr	r3, [pc, #184]	; (800c100 <mem_malloc+0x1f8>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d00b      	beq.n	800c064 <mem_malloc+0x15c>
 800c04c:	4b28      	ldr	r3, [pc, #160]	; (800c0f0 <mem_malloc+0x1e8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	791b      	ldrb	r3, [r3, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <mem_malloc+0x15c>
 800c056:	4b27      	ldr	r3, [pc, #156]	; (800c0f4 <mem_malloc+0x1ec>)
 800c058:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c05c:	4929      	ldr	r1, [pc, #164]	; (800c104 <mem_malloc+0x1fc>)
 800c05e:	4827      	ldr	r0, [pc, #156]	; (800c0fc <mem_malloc+0x1f4>)
 800c060:	f00a ffce 	bl	8017000 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c064:	4821      	ldr	r0, [pc, #132]	; (800c0ec <mem_malloc+0x1e4>)
 800c066:	f00a fd72 	bl	8016b4e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c06a:	8bba      	ldrh	r2, [r7, #28]
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	4413      	add	r3, r2
 800c070:	3308      	adds	r3, #8
 800c072:	4a23      	ldr	r2, [pc, #140]	; (800c100 <mem_malloc+0x1f8>)
 800c074:	6812      	ldr	r2, [r2, #0]
 800c076:	4293      	cmp	r3, r2
 800c078:	d906      	bls.n	800c088 <mem_malloc+0x180>
 800c07a:	4b1e      	ldr	r3, [pc, #120]	; (800c0f4 <mem_malloc+0x1ec>)
 800c07c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c080:	4921      	ldr	r1, [pc, #132]	; (800c108 <mem_malloc+0x200>)
 800c082:	481e      	ldr	r0, [pc, #120]	; (800c0fc <mem_malloc+0x1f4>)
 800c084:	f00a ffbc 	bl	8017000 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d006      	beq.n	800c0a0 <mem_malloc+0x198>
 800c092:	4b18      	ldr	r3, [pc, #96]	; (800c0f4 <mem_malloc+0x1ec>)
 800c094:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c098:	491c      	ldr	r1, [pc, #112]	; (800c10c <mem_malloc+0x204>)
 800c09a:	4818      	ldr	r0, [pc, #96]	; (800c0fc <mem_malloc+0x1f4>)
 800c09c:	f00a ffb0 	bl	8017000 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f003 0303 	and.w	r3, r3, #3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <mem_malloc+0x1b0>
 800c0aa:	4b12      	ldr	r3, [pc, #72]	; (800c0f4 <mem_malloc+0x1ec>)
 800c0ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c0b0:	4917      	ldr	r1, [pc, #92]	; (800c110 <mem_malloc+0x208>)
 800c0b2:	4812      	ldr	r0, [pc, #72]	; (800c0fc <mem_malloc+0x1f4>)
 800c0b4:	f00a ffa4 	bl	8017000 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	e011      	b.n	800c0e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c0be:	8bfb      	ldrh	r3, [r7, #30]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff fc33 	bl	800b92c <ptr_to_mem>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0cc:	8bfa      	ldrh	r2, [r7, #30]
 800c0ce:	8bbb      	ldrh	r3, [r7, #28]
 800c0d0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	f4ff af41 	bcc.w	800bf5c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c0da:	4804      	ldr	r0, [pc, #16]	; (800c0ec <mem_malloc+0x1e4>)
 800c0dc:	f00a fd37 	bl	8016b4e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20004a9c 	.word	0x20004a9c
 800c0f0:	20004aa0 	.word	0x20004aa0
 800c0f4:	08018d44 	.word	0x08018d44
 800c0f8:	08018f08 	.word	0x08018f08
 800c0fc:	08018d8c 	.word	0x08018d8c
 800c100:	20004a98 	.word	0x20004a98
 800c104:	08018f1c 	.word	0x08018f1c
 800c108:	08018f38 	.word	0x08018f38
 800c10c:	08018f68 	.word	0x08018f68
 800c110:	08018f98 	.word	0x08018f98

0800c114 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	3303      	adds	r3, #3
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e011      	b.n	800c15a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	4413      	add	r3, r2
 800c152:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	461a      	mov	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4293      	cmp	r3, r2
 800c164:	dbe7      	blt.n	800c136 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c166:	bf00      	nop
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c17a:	2300      	movs	r3, #0
 800c17c:	80fb      	strh	r3, [r7, #6]
 800c17e:	e009      	b.n	800c194 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c180:	88fb      	ldrh	r3, [r7, #6]
 800c182:	4a08      	ldr	r2, [pc, #32]	; (800c1a4 <memp_init+0x30>)
 800c184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7ff ffc3 	bl	800c114 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c18e:	88fb      	ldrh	r3, [r7, #6]
 800c190:	3301      	adds	r3, #1
 800c192:	80fb      	strh	r3, [r7, #6]
 800c194:	88fb      	ldrh	r3, [r7, #6]
 800c196:	2b0c      	cmp	r3, #12
 800c198:	d9f2      	bls.n	800c180 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c19a:	bf00      	nop
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	0801b870 	.word	0x0801b870

0800c1a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c1b0:	f00a fcfa 	bl	8016ba8 <sys_arch_protect>
 800c1b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d015      	beq.n	800c1f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	6812      	ldr	r2, [r2, #0]
 800c1cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	f003 0303 	and.w	r3, r3, #3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d006      	beq.n	800c1e6 <do_memp_malloc_pool+0x3e>
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <do_memp_malloc_pool+0x58>)
 800c1da:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c1de:	4909      	ldr	r1, [pc, #36]	; (800c204 <do_memp_malloc_pool+0x5c>)
 800c1e0:	4809      	ldr	r0, [pc, #36]	; (800c208 <do_memp_malloc_pool+0x60>)
 800c1e2:	f00a ff0d 	bl	8017000 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f00a fcec 	bl	8016bc4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	e003      	b.n	800c1f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f00a fce7 	bl	8016bc4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	08018fbc 	.word	0x08018fbc
 800c204:	08018fec 	.word	0x08018fec
 800c208:	08019010 	.word	0x08019010

0800c20c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	2b0c      	cmp	r3, #12
 800c21a:	d908      	bls.n	800c22e <memp_malloc+0x22>
 800c21c:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <memp_malloc+0x3c>)
 800c21e:	f240 1257 	movw	r2, #343	; 0x157
 800c222:	490a      	ldr	r1, [pc, #40]	; (800c24c <memp_malloc+0x40>)
 800c224:	480a      	ldr	r0, [pc, #40]	; (800c250 <memp_malloc+0x44>)
 800c226:	f00a feeb 	bl	8017000 <iprintf>
 800c22a:	2300      	movs	r3, #0
 800c22c:	e008      	b.n	800c240 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c22e:	79fb      	ldrb	r3, [r7, #7]
 800c230:	4a08      	ldr	r2, [pc, #32]	; (800c254 <memp_malloc+0x48>)
 800c232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff ffb6 	bl	800c1a8 <do_memp_malloc_pool>
 800c23c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c23e:	68fb      	ldr	r3, [r7, #12]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	08018fbc 	.word	0x08018fbc
 800c24c:	0801904c 	.word	0x0801904c
 800c250:	08019010 	.word	0x08019010
 800c254:	0801b870 	.word	0x0801b870

0800c258 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	f003 0303 	and.w	r3, r3, #3
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d006      	beq.n	800c27a <do_memp_free_pool+0x22>
 800c26c:	4b0d      	ldr	r3, [pc, #52]	; (800c2a4 <do_memp_free_pool+0x4c>)
 800c26e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c272:	490d      	ldr	r1, [pc, #52]	; (800c2a8 <do_memp_free_pool+0x50>)
 800c274:	480d      	ldr	r0, [pc, #52]	; (800c2ac <do_memp_free_pool+0x54>)
 800c276:	f00a fec3 	bl	8017000 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c27e:	f00a fc93 	bl	8016ba8 <sys_arch_protect>
 800c282:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c296:	68b8      	ldr	r0, [r7, #8]
 800c298:	f00a fc94 	bl	8016bc4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c29c:	bf00      	nop
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	08018fbc 	.word	0x08018fbc
 800c2a8:	0801906c 	.word	0x0801906c
 800c2ac:	08019010 	.word	0x08019010

0800c2b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b0c      	cmp	r3, #12
 800c2c0:	d907      	bls.n	800c2d2 <memp_free+0x22>
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <memp_free+0x44>)
 800c2c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c2c8:	490b      	ldr	r1, [pc, #44]	; (800c2f8 <memp_free+0x48>)
 800c2ca:	480c      	ldr	r0, [pc, #48]	; (800c2fc <memp_free+0x4c>)
 800c2cc:	f00a fe98 	bl	8017000 <iprintf>
 800c2d0:	e00c      	b.n	800c2ec <memp_free+0x3c>

  if (mem == NULL) {
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d008      	beq.n	800c2ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	4a09      	ldr	r2, [pc, #36]	; (800c300 <memp_free+0x50>)
 800c2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff ffb8 	bl	800c258 <do_memp_free_pool>
 800c2e8:	e000      	b.n	800c2ec <memp_free+0x3c>
    return;
 800c2ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	08018fbc 	.word	0x08018fbc
 800c2f8:	0801908c 	.word	0x0801908c
 800c2fc:	08019010 	.word	0x08019010
 800c300:	0801b870 	.word	0x0801b870

0800c304 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c308:	bf00      	nop
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
	...

0800c314 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d108      	bne.n	800c33a <netif_add+0x26>
 800c328:	4b57      	ldr	r3, [pc, #348]	; (800c488 <netif_add+0x174>)
 800c32a:	f240 1227 	movw	r2, #295	; 0x127
 800c32e:	4957      	ldr	r1, [pc, #348]	; (800c48c <netif_add+0x178>)
 800c330:	4857      	ldr	r0, [pc, #348]	; (800c490 <netif_add+0x17c>)
 800c332:	f00a fe65 	bl	8017000 <iprintf>
 800c336:	2300      	movs	r3, #0
 800c338:	e0a2      	b.n	800c480 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d108      	bne.n	800c352 <netif_add+0x3e>
 800c340:	4b51      	ldr	r3, [pc, #324]	; (800c488 <netif_add+0x174>)
 800c342:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c346:	4953      	ldr	r1, [pc, #332]	; (800c494 <netif_add+0x180>)
 800c348:	4851      	ldr	r0, [pc, #324]	; (800c490 <netif_add+0x17c>)
 800c34a:	f00a fe59 	bl	8017000 <iprintf>
 800c34e:	2300      	movs	r3, #0
 800c350:	e096      	b.n	800c480 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c358:	4b4f      	ldr	r3, [pc, #316]	; (800c498 <netif_add+0x184>)
 800c35a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c362:	4b4d      	ldr	r3, [pc, #308]	; (800c498 <netif_add+0x184>)
 800c364:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c36c:	4b4a      	ldr	r3, [pc, #296]	; (800c498 <netif_add+0x184>)
 800c36e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4a45      	ldr	r2, [pc, #276]	; (800c49c <netif_add+0x188>)
 800c386:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6a3a      	ldr	r2, [r7, #32]
 800c3a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c3a2:	4b3f      	ldr	r3, [pc, #252]	; (800c4a0 <netif_add+0x18c>)
 800c3a4:	781a      	ldrb	r2, [r3, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f913 	bl	800c5e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	4798      	blx	r3
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <netif_add+0xba>
    return NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e058      	b.n	800c480 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3d4:	2bff      	cmp	r3, #255	; 0xff
 800c3d6:	d103      	bne.n	800c3e0 <netif_add+0xcc>
        netif->num = 0;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3e4:	4b2f      	ldr	r3, [pc, #188]	; (800c4a4 <netif_add+0x190>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	617b      	str	r3, [r7, #20]
 800c3ea:	e02b      	b.n	800c444 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d106      	bne.n	800c402 <netif_add+0xee>
 800c3f4:	4b24      	ldr	r3, [pc, #144]	; (800c488 <netif_add+0x174>)
 800c3f6:	f240 128b 	movw	r2, #395	; 0x18b
 800c3fa:	492b      	ldr	r1, [pc, #172]	; (800c4a8 <netif_add+0x194>)
 800c3fc:	4824      	ldr	r0, [pc, #144]	; (800c490 <netif_add+0x17c>)
 800c3fe:	f00a fdff 	bl	8017000 <iprintf>
        num_netifs++;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	3301      	adds	r3, #1
 800c406:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2bff      	cmp	r3, #255	; 0xff
 800c40c:	dd06      	ble.n	800c41c <netif_add+0x108>
 800c40e:	4b1e      	ldr	r3, [pc, #120]	; (800c488 <netif_add+0x174>)
 800c410:	f240 128d 	movw	r2, #397	; 0x18d
 800c414:	4925      	ldr	r1, [pc, #148]	; (800c4ac <netif_add+0x198>)
 800c416:	481e      	ldr	r0, [pc, #120]	; (800c490 <netif_add+0x17c>)
 800c418:	f00a fdf2 	bl	8017000 <iprintf>
        if (netif2->num == netif->num) {
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c428:	429a      	cmp	r2, r3
 800c42a:	d108      	bne.n	800c43e <netif_add+0x12a>
          netif->num++;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c432:	3301      	adds	r3, #1
 800c434:	b2da      	uxtb	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c43c:	e005      	b.n	800c44a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	617b      	str	r3, [r7, #20]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1d0      	bne.n	800c3ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1be      	bne.n	800c3ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c456:	2bfe      	cmp	r3, #254	; 0xfe
 800c458:	d103      	bne.n	800c462 <netif_add+0x14e>
    netif_num = 0;
 800c45a:	4b11      	ldr	r3, [pc, #68]	; (800c4a0 <netif_add+0x18c>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
 800c460:	e006      	b.n	800c470 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c468:	3301      	adds	r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <netif_add+0x18c>)
 800c46e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c470:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <netif_add+0x190>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c478:	4a0a      	ldr	r2, [pc, #40]	; (800c4a4 <netif_add+0x190>)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c47e:	68fb      	ldr	r3, [r7, #12]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	080190a8 	.word	0x080190a8
 800c48c:	0801913c 	.word	0x0801913c
 800c490:	080190f8 	.word	0x080190f8
 800c494:	08019158 	.word	0x08019158
 800c498:	0801b8e4 	.word	0x0801b8e4
 800c49c:	0800c8bf 	.word	0x0800c8bf
 800c4a0:	20004ad8 	.word	0x20004ad8
 800c4a4:	20025830 	.word	0x20025830
 800c4a8:	0801917c 	.word	0x0801917c
 800c4ac:	08019190 	.word	0x08019190

0800c4b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f002 fea1 	bl	800f204 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f007 fdbd 	bl	8014044 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <netif_do_set_ipaddr+0x20>
 800c4e6:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <netif_do_set_ipaddr+0x88>)
 800c4e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c4ec:	491c      	ldr	r1, [pc, #112]	; (800c560 <netif_do_set_ipaddr+0x8c>)
 800c4ee:	481d      	ldr	r0, [pc, #116]	; (800c564 <netif_do_set_ipaddr+0x90>)
 800c4f0:	f00a fd86 	bl	8017000 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <netif_do_set_ipaddr+0x34>
 800c4fa:	4b18      	ldr	r3, [pc, #96]	; (800c55c <netif_do_set_ipaddr+0x88>)
 800c4fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c500:	4917      	ldr	r1, [pc, #92]	; (800c560 <netif_do_set_ipaddr+0x8c>)
 800c502:	4818      	ldr	r0, [pc, #96]	; (800c564 <netif_do_set_ipaddr+0x90>)
 800c504:	f00a fd7c 	bl	8017000 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3304      	adds	r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d01c      	beq.n	800c550 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3304      	adds	r3, #4
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c526:	f107 0314 	add.w	r3, r7, #20
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ffbf 	bl	800c4b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <netif_do_set_ipaddr+0x6a>
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	e000      	b.n	800c540 <netif_do_set_ipaddr+0x6c>
 800c53e:	2300      	movs	r3, #0
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c544:	2101      	movs	r1, #1
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 f8d2 	bl	800c6f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	080190a8 	.word	0x080190a8
 800c560:	080191c0 	.word	0x080191c0
 800c564:	080190f8 	.word	0x080190f8

0800c568 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3308      	adds	r3, #8
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d00a      	beq.n	800c598 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <netif_do_set_netmask+0x26>
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	e000      	b.n	800c590 <netif_do_set_netmask+0x28>
 800c58e:	2300      	movs	r3, #0
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c594:	2301      	movs	r3, #1
 800c596:	e000      	b.n	800c59a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b085      	sub	sp, #20
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d00a      	beq.n	800c5d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <netif_do_set_gw+0x26>
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	e000      	b.n	800c5ce <netif_do_set_gw+0x28>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e000      	b.n	800c5d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c600:	4b1c      	ldr	r3, [pc, #112]	; (800c674 <netif_set_addr+0x90>)
 800c602:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c60a:	4b1a      	ldr	r3, [pc, #104]	; (800c674 <netif_set_addr+0x90>)
 800c60c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c614:	4b17      	ldr	r3, [pc, #92]	; (800c674 <netif_set_addr+0x90>)
 800c616:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <netif_set_addr+0x42>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <netif_set_addr+0x46>
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <netif_set_addr+0x48>
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c634:	f107 0310 	add.w	r3, r7, #16
 800c638:	461a      	mov	r2, r3
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff ff49 	bl	800c4d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c642:	69fa      	ldr	r2, [r7, #28]
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7ff ff8e 	bl	800c568 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c64c:	69ba      	ldr	r2, [r7, #24]
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff ffa8 	bl	800c5a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c65c:	f107 0310 	add.w	r3, r7, #16
 800c660:	461a      	mov	r2, r3
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7ff ff35 	bl	800c4d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c66a:	bf00      	nop
 800c66c:	3720      	adds	r7, #32
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	0801b8e4 	.word	0x0801b8e4

0800c678 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c680:	4a04      	ldr	r2, [pc, #16]	; (800c694 <netif_set_default+0x1c>)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c686:	bf00      	nop
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	20025834 	.word	0x20025834

0800c698 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d107      	bne.n	800c6b6 <netif_set_up+0x1e>
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <netif_set_up+0x4c>)
 800c6a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c6ac:	490e      	ldr	r1, [pc, #56]	; (800c6e8 <netif_set_up+0x50>)
 800c6ae:	480f      	ldr	r0, [pc, #60]	; (800c6ec <netif_set_up+0x54>)
 800c6b0:	f00a fca6 	bl	8017000 <iprintf>
 800c6b4:	e013      	b.n	800c6de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10c      	bne.n	800c6de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6d6:	2103      	movs	r1, #3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f809 	bl	800c6f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	080190a8 	.word	0x080190a8
 800c6e8:	08019230 	.word	0x08019230
 800c6ec:	080190f8 	.word	0x080190f8

0800c6f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <netif_issue_reports+0x20>
 800c702:	4b18      	ldr	r3, [pc, #96]	; (800c764 <netif_issue_reports+0x74>)
 800c704:	f240 326d 	movw	r2, #877	; 0x36d
 800c708:	4917      	ldr	r1, [pc, #92]	; (800c768 <netif_issue_reports+0x78>)
 800c70a:	4818      	ldr	r0, [pc, #96]	; (800c76c <netif_issue_reports+0x7c>)
 800c70c:	f00a fc78 	bl	8017000 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d01e      	beq.n	800c75c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c724:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d017      	beq.n	800c75c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d013      	beq.n	800c75e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3304      	adds	r3, #4
 800c73a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00e      	beq.n	800c75e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c746:	f003 0308 	and.w	r3, r3, #8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d007      	beq.n	800c75e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3304      	adds	r3, #4
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f008 fbdf 	bl	8014f18 <etharp_request>
 800c75a:	e000      	b.n	800c75e <netif_issue_reports+0x6e>
    return;
 800c75c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	080190a8 	.word	0x080190a8
 800c768:	0801924c 	.word	0x0801924c
 800c76c:	080190f8 	.word	0x080190f8

0800c770 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d107      	bne.n	800c78e <netif_set_down+0x1e>
 800c77e:	4b12      	ldr	r3, [pc, #72]	; (800c7c8 <netif_set_down+0x58>)
 800c780:	f240 329b 	movw	r2, #923	; 0x39b
 800c784:	4911      	ldr	r1, [pc, #68]	; (800c7cc <netif_set_down+0x5c>)
 800c786:	4812      	ldr	r0, [pc, #72]	; (800c7d0 <netif_set_down+0x60>)
 800c788:	f00a fc3a 	bl	8017000 <iprintf>
 800c78c:	e019      	b.n	800c7c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d012      	beq.n	800c7c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7a2:	f023 0301 	bic.w	r3, r3, #1
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7b4:	f003 0308 	and.w	r3, r3, #8
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f007 ff69 	bl	8014694 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	080190a8 	.word	0x080190a8
 800c7cc:	08019270 	.word	0x08019270
 800c7d0:	080190f8 	.word	0x080190f8

0800c7d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d107      	bne.n	800c7f2 <netif_set_link_up+0x1e>
 800c7e2:	4b13      	ldr	r3, [pc, #76]	; (800c830 <netif_set_link_up+0x5c>)
 800c7e4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c7e8:	4912      	ldr	r1, [pc, #72]	; (800c834 <netif_set_link_up+0x60>)
 800c7ea:	4813      	ldr	r0, [pc, #76]	; (800c838 <netif_set_link_up+0x64>)
 800c7ec:	f00a fc08 	bl	8017000 <iprintf>
 800c7f0:	e01b      	b.n	800c82a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d114      	bne.n	800c82a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c806:	f043 0304 	orr.w	r3, r3, #4
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c812:	2103      	movs	r1, #3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff ff6b 	bl	800c6f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <netif_set_link_up+0x56>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	080190a8 	.word	0x080190a8
 800c834:	08019290 	.word	0x08019290
 800c838:	080190f8 	.word	0x080190f8

0800c83c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d107      	bne.n	800c85a <netif_set_link_down+0x1e>
 800c84a:	4b11      	ldr	r3, [pc, #68]	; (800c890 <netif_set_link_down+0x54>)
 800c84c:	f240 4206 	movw	r2, #1030	; 0x406
 800c850:	4910      	ldr	r1, [pc, #64]	; (800c894 <netif_set_link_down+0x58>)
 800c852:	4811      	ldr	r0, [pc, #68]	; (800c898 <netif_set_link_down+0x5c>)
 800c854:	f00a fbd4 	bl	8017000 <iprintf>
 800c858:	e017      	b.n	800c88a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c860:	f003 0304 	and.w	r3, r3, #4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d010      	beq.n	800c88a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c86e:	f023 0304 	bic.w	r3, r3, #4
 800c872:	b2da      	uxtb	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <netif_set_link_down+0x4e>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	080190a8 	.word	0x080190a8
 800c894:	080192b4 	.word	0x080192b4
 800c898:	080190f8 	.word	0x080190f8

0800c89c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	61da      	str	r2, [r3, #28]
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b085      	sub	sp, #20
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c8ca:	f06f 030b 	mvn.w	r3, #11
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
	...

0800c8dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d013      	beq.n	800c914 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c8ec:	4b0d      	ldr	r3, [pc, #52]	; (800c924 <netif_get_by_index+0x48>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e00c      	b.n	800c90e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	79fa      	ldrb	r2, [r7, #7]
 800c900:	429a      	cmp	r2, r3
 800c902:	d101      	bne.n	800c908 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	e006      	b.n	800c916 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1ef      	bne.n	800c8f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20025830 	.word	0x20025830

0800c928 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c92e:	f00a f93b 	bl	8016ba8 <sys_arch_protect>
 800c932:	6038      	str	r0, [r7, #0]
 800c934:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <pbuf_free_ooseq+0x44>)
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	6838      	ldr	r0, [r7, #0]
 800c93c:	f00a f942 	bl	8016bc4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c940:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <pbuf_free_ooseq+0x48>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	607b      	str	r3, [r7, #4]
 800c946:	e00a      	b.n	800c95e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f002 fc95 	bl	800f280 <tcp_free_ooseq>
      return;
 800c956:	e005      	b.n	800c964 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	607b      	str	r3, [r7, #4]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1f1      	bne.n	800c948 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	20025838 	.word	0x20025838
 800c970:	20025840 	.word	0x20025840

0800c974 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c97c:	f7ff ffd4 	bl	800c928 <pbuf_free_ooseq>
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c98e:	f00a f90b 	bl	8016ba8 <sys_arch_protect>
 800c992:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c994:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <pbuf_pool_is_empty+0x4c>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c99a:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <pbuf_pool_is_empty+0x4c>)
 800c99c:	2201      	movs	r2, #1
 800c99e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f00a f90f 	bl	8016bc4 <sys_arch_unprotect>

  if (!queued) {
 800c9a6:	78fb      	ldrb	r3, [r7, #3]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10f      	bne.n	800c9cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	480a      	ldr	r0, [pc, #40]	; (800c9d8 <pbuf_pool_is_empty+0x50>)
 800c9b0:	f7fe fed6 	bl	800b760 <tcpip_try_callback>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <pbuf_pool_is_empty+0x44>
 800c9ba:	f00a f8f5 	bl	8016ba8 <sys_arch_protect>
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	4b04      	ldr	r3, [pc, #16]	; (800c9d4 <pbuf_pool_is_empty+0x4c>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f00a f8fc 	bl	8016bc4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20025838 	.word	0x20025838
 800c9d8:	0800c975 	.word	0x0800c975

0800c9dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	80fb      	strh	r3, [r7, #6]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	88fa      	ldrh	r2, [r7, #6]
 800ca02:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	88ba      	ldrh	r2, [r7, #4]
 800ca08:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca0a:	8b3b      	ldrh	r3, [r7, #24]
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	7f3a      	ldrb	r2, [r7, #28]
 800ca16:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	73da      	strb	r2, [r3, #15]
}
 800ca24:	bf00      	nop
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	4603      	mov	r3, r0
 800ca38:	71fb      	strb	r3, [r7, #7]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	80bb      	strh	r3, [r7, #4]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ca46:	887b      	ldrh	r3, [r7, #2]
 800ca48:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca4c:	f000 8082 	beq.w	800cb54 <pbuf_alloc+0x124>
 800ca50:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca54:	f300 80ca 	bgt.w	800cbec <pbuf_alloc+0x1bc>
 800ca58:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca5c:	d010      	beq.n	800ca80 <pbuf_alloc+0x50>
 800ca5e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca62:	f300 80c3 	bgt.w	800cbec <pbuf_alloc+0x1bc>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d002      	beq.n	800ca70 <pbuf_alloc+0x40>
 800ca6a:	2b41      	cmp	r3, #65	; 0x41
 800ca6c:	f040 80be 	bne.w	800cbec <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ca70:	887a      	ldrh	r2, [r7, #2]
 800ca72:	88bb      	ldrh	r3, [r7, #4]
 800ca74:	4619      	mov	r1, r3
 800ca76:	2000      	movs	r0, #0
 800ca78:	f000 f8d4 	bl	800cc24 <pbuf_alloc_reference>
 800ca7c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ca7e:	e0bf      	b.n	800cc00 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ca88:	88bb      	ldrh	r3, [r7, #4]
 800ca8a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ca8c:	200c      	movs	r0, #12
 800ca8e:	f7ff fbbd 	bl	800c20c <memp_malloc>
 800ca92:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d109      	bne.n	800caae <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800ca9a:	f7ff ff75 	bl	800c988 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <pbuf_alloc+0x7a>
            pbuf_free(p);
 800caa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caa6:	f000 faab 	bl	800d000 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	e0a9      	b.n	800cc02 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800caae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cab0:	3303      	adds	r3, #3
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f5c3 53cb 	rsb	r3, r3, #6496	; 0x1960
 800cabe:	3304      	adds	r3, #4
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	8b7a      	ldrh	r2, [r7, #26]
 800cac4:	4293      	cmp	r3, r2
 800cac6:	bf28      	it	cs
 800cac8:	4613      	movcs	r3, r2
 800caca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cacc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cace:	3310      	adds	r3, #16
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	4413      	add	r3, r2
 800cad4:	3303      	adds	r3, #3
 800cad6:	f023 0303 	bic.w	r3, r3, #3
 800cada:	4618      	mov	r0, r3
 800cadc:	89f9      	ldrh	r1, [r7, #14]
 800cade:	8b7a      	ldrh	r2, [r7, #26]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9301      	str	r3, [sp, #4]
 800cae4:	887b      	ldrh	r3, [r7, #2]
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	460b      	mov	r3, r1
 800caea:	4601      	mov	r1, r0
 800caec:	6938      	ldr	r0, [r7, #16]
 800caee:	f7ff ff75 	bl	800c9dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f003 0303 	and.w	r3, r3, #3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d006      	beq.n	800cb0c <pbuf_alloc+0xdc>
 800cafe:	4b43      	ldr	r3, [pc, #268]	; (800cc0c <pbuf_alloc+0x1dc>)
 800cb00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb04:	4942      	ldr	r1, [pc, #264]	; (800cc10 <pbuf_alloc+0x1e0>)
 800cb06:	4843      	ldr	r0, [pc, #268]	; (800cc14 <pbuf_alloc+0x1e4>)
 800cb08:	f00a fa7a 	bl	8017000 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb0e:	3303      	adds	r3, #3
 800cb10:	f023 0303 	bic.w	r3, r3, #3
 800cb14:	f641 1264 	movw	r2, #6500	; 0x1964
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d106      	bne.n	800cb2a <pbuf_alloc+0xfa>
 800cb1c:	4b3b      	ldr	r3, [pc, #236]	; (800cc0c <pbuf_alloc+0x1dc>)
 800cb1e:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cb22:	493d      	ldr	r1, [pc, #244]	; (800cc18 <pbuf_alloc+0x1e8>)
 800cb24:	483b      	ldr	r0, [pc, #236]	; (800cc14 <pbuf_alloc+0x1e4>)
 800cb26:	f00a fa6b 	bl	8017000 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d102      	bne.n	800cb36 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	627b      	str	r3, [r7, #36]	; 0x24
 800cb34:	e002      	b.n	800cb3c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cb40:	8b7a      	ldrh	r2, [r7, #26]
 800cb42:	89fb      	ldrh	r3, [r7, #14]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cb4c:	8b7b      	ldrh	r3, [r7, #26]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d19c      	bne.n	800ca8c <pbuf_alloc+0x5c>
      break;
 800cb52:	e055      	b.n	800cc00 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cb54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb56:	3303      	adds	r3, #3
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	f023 0303 	bic.w	r3, r3, #3
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	88bb      	ldrh	r3, [r7, #4]
 800cb62:	3303      	adds	r3, #3
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	f023 0303 	bic.w	r3, r3, #3
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	4413      	add	r3, r2
 800cb6e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cb70:	8b3b      	ldrh	r3, [r7, #24]
 800cb72:	3310      	adds	r3, #16
 800cb74:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb76:	8b3a      	ldrh	r2, [r7, #24]
 800cb78:	88bb      	ldrh	r3, [r7, #4]
 800cb7a:	3303      	adds	r3, #3
 800cb7c:	f023 0303 	bic.w	r3, r3, #3
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d306      	bcc.n	800cb92 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb84:	8afa      	ldrh	r2, [r7, #22]
 800cb86:	88bb      	ldrh	r3, [r7, #4]
 800cb88:	3303      	adds	r3, #3
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d201      	bcs.n	800cb96 <pbuf_alloc+0x166>
        return NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	e035      	b.n	800cc02 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cb96:	8afb      	ldrh	r3, [r7, #22]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7ff f9b5 	bl	800bf08 <mem_malloc>
 800cb9e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <pbuf_alloc+0x17a>
        return NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	e02b      	b.n	800cc02 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cbaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbac:	3310      	adds	r3, #16
 800cbae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb0:	4413      	add	r3, r2
 800cbb2:	3303      	adds	r3, #3
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	4618      	mov	r0, r3
 800cbba:	88b9      	ldrh	r1, [r7, #4]
 800cbbc:	88ba      	ldrh	r2, [r7, #4]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	887b      	ldrh	r3, [r7, #2]
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4601      	mov	r1, r0
 800cbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbcc:	f7ff ff06 	bl	800c9dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f003 0303 	and.w	r3, r3, #3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d010      	beq.n	800cbfe <pbuf_alloc+0x1ce>
 800cbdc:	4b0b      	ldr	r3, [pc, #44]	; (800cc0c <pbuf_alloc+0x1dc>)
 800cbde:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cbe2:	490e      	ldr	r1, [pc, #56]	; (800cc1c <pbuf_alloc+0x1ec>)
 800cbe4:	480b      	ldr	r0, [pc, #44]	; (800cc14 <pbuf_alloc+0x1e4>)
 800cbe6:	f00a fa0b 	bl	8017000 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cbea:	e008      	b.n	800cbfe <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cbec:	4b07      	ldr	r3, [pc, #28]	; (800cc0c <pbuf_alloc+0x1dc>)
 800cbee:	f240 1227 	movw	r2, #295	; 0x127
 800cbf2:	490b      	ldr	r1, [pc, #44]	; (800cc20 <pbuf_alloc+0x1f0>)
 800cbf4:	4807      	ldr	r0, [pc, #28]	; (800cc14 <pbuf_alloc+0x1e4>)
 800cbf6:	f00a fa03 	bl	8017000 <iprintf>
      return NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e001      	b.n	800cc02 <pbuf_alloc+0x1d2>
      break;
 800cbfe:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	; 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	080192d8 	.word	0x080192d8
 800cc10:	08019308 	.word	0x08019308
 800cc14:	08019338 	.word	0x08019338
 800cc18:	08019360 	.word	0x08019360
 800cc1c:	08019394 	.word	0x08019394
 800cc20:	080193c0 	.word	0x080193c0

0800cc24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	807b      	strh	r3, [r7, #2]
 800cc30:	4613      	mov	r3, r2
 800cc32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc34:	883b      	ldrh	r3, [r7, #0]
 800cc36:	2b41      	cmp	r3, #65	; 0x41
 800cc38:	d009      	beq.n	800cc4e <pbuf_alloc_reference+0x2a>
 800cc3a:	883b      	ldrh	r3, [r7, #0]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d006      	beq.n	800cc4e <pbuf_alloc_reference+0x2a>
 800cc40:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <pbuf_alloc_reference+0x5c>)
 800cc42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cc46:	490f      	ldr	r1, [pc, #60]	; (800cc84 <pbuf_alloc_reference+0x60>)
 800cc48:	480f      	ldr	r0, [pc, #60]	; (800cc88 <pbuf_alloc_reference+0x64>)
 800cc4a:	f00a f9d9 	bl	8017000 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cc4e:	200b      	movs	r0, #11
 800cc50:	f7ff fadc 	bl	800c20c <memp_malloc>
 800cc54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e00b      	b.n	800cc78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cc60:	8879      	ldrh	r1, [r7, #2]
 800cc62:	887a      	ldrh	r2, [r7, #2]
 800cc64:	2300      	movs	r3, #0
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	883b      	ldrh	r3, [r7, #0]
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff feb3 	bl	800c9dc <pbuf_init_alloced_pbuf>
  return p;
 800cc76:	68fb      	ldr	r3, [r7, #12]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	080192d8 	.word	0x080192d8
 800cc84:	080193dc 	.word	0x080193dc
 800cc88:	08019338 	.word	0x08019338

0800cc8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	607b      	str	r3, [r7, #4]
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	81bb      	strh	r3, [r7, #12]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cca4:	8a7b      	ldrh	r3, [r7, #18]
 800cca6:	3303      	adds	r3, #3
 800cca8:	f023 0203 	bic.w	r2, r3, #3
 800ccac:	89bb      	ldrh	r3, [r7, #12]
 800ccae:	441a      	add	r2, r3
 800ccb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d901      	bls.n	800ccba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e018      	b.n	800ccec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d007      	beq.n	800ccd0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ccc0:	8a7b      	ldrh	r3, [r7, #18]
 800ccc2:	3303      	adds	r3, #3
 800ccc4:	f023 0303 	bic.w	r3, r3, #3
 800ccc8:	6a3a      	ldr	r2, [r7, #32]
 800ccca:	4413      	add	r3, r2
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	e001      	b.n	800ccd4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	89b9      	ldrh	r1, [r7, #12]
 800ccd8:	89ba      	ldrh	r2, [r7, #12]
 800ccda:	2302      	movs	r3, #2
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	897b      	ldrh	r3, [r7, #10]
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	460b      	mov	r3, r1
 800cce4:	6979      	ldr	r1, [r7, #20]
 800cce6:	f7ff fe79 	bl	800c9dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ccea:	687b      	ldr	r3, [r7, #4]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <pbuf_realloc+0x20>
 800cd06:	4b3a      	ldr	r3, [pc, #232]	; (800cdf0 <pbuf_realloc+0xfc>)
 800cd08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cd0c:	4939      	ldr	r1, [pc, #228]	; (800cdf4 <pbuf_realloc+0x100>)
 800cd0e:	483a      	ldr	r0, [pc, #232]	; (800cdf8 <pbuf_realloc+0x104>)
 800cd10:	f00a f976 	bl	8017000 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	891b      	ldrh	r3, [r3, #8]
 800cd18:	887a      	ldrh	r2, [r7, #2]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d263      	bcs.n	800cde6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	891a      	ldrh	r2, [r3, #8]
 800cd22:	887b      	ldrh	r3, [r7, #2]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd28:	887b      	ldrh	r3, [r7, #2]
 800cd2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd30:	e018      	b.n	800cd64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	895b      	ldrh	r3, [r3, #10]
 800cd36:	897a      	ldrh	r2, [r7, #10]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	891a      	ldrh	r2, [r3, #8]
 800cd40:	893b      	ldrh	r3, [r7, #8]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <pbuf_realloc+0x70>
 800cd56:	4b26      	ldr	r3, [pc, #152]	; (800cdf0 <pbuf_realloc+0xfc>)
 800cd58:	f240 12af 	movw	r2, #431	; 0x1af
 800cd5c:	4927      	ldr	r1, [pc, #156]	; (800cdfc <pbuf_realloc+0x108>)
 800cd5e:	4826      	ldr	r0, [pc, #152]	; (800cdf8 <pbuf_realloc+0x104>)
 800cd60:	f00a f94e 	bl	8017000 <iprintf>
  while (rem_len > q->len) {
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	895b      	ldrh	r3, [r3, #10]
 800cd68:	897a      	ldrh	r2, [r7, #10]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d8e1      	bhi.n	800cd32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	7b1b      	ldrb	r3, [r3, #12]
 800cd72:	f003 030f 	and.w	r3, r3, #15
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d121      	bne.n	800cdbe <pbuf_realloc+0xca>
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	895b      	ldrh	r3, [r3, #10]
 800cd7e:	897a      	ldrh	r2, [r7, #10]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d01c      	beq.n	800cdbe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	7b5b      	ldrb	r3, [r3, #13]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d116      	bne.n	800cdbe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	897b      	ldrh	r3, [r7, #10]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	4619      	mov	r1, r3
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7fe ffa6 	bl	800bcf4 <mem_trim>
 800cda8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d106      	bne.n	800cdbe <pbuf_realloc+0xca>
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <pbuf_realloc+0xfc>)
 800cdb2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cdb6:	4912      	ldr	r1, [pc, #72]	; (800ce00 <pbuf_realloc+0x10c>)
 800cdb8:	480f      	ldr	r0, [pc, #60]	; (800cdf8 <pbuf_realloc+0x104>)
 800cdba:	f00a f921 	bl	8017000 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	897a      	ldrh	r2, [r7, #10]
 800cdc2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	895a      	ldrh	r2, [r3, #10]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d004      	beq.n	800cdde <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 f911 	bl	800d000 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	e000      	b.n	800cde8 <pbuf_realloc+0xf4>
    return;
 800cde6:	bf00      	nop

}
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	080192d8 	.word	0x080192d8
 800cdf4:	080193f0 	.word	0x080193f0
 800cdf8:	08019338 	.word	0x08019338
 800cdfc:	08019408 	.word	0x08019408
 800ce00:	08019420 	.word	0x08019420

0800ce04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <pbuf_add_header_impl+0x22>
 800ce18:	4b2b      	ldr	r3, [pc, #172]	; (800cec8 <pbuf_add_header_impl+0xc4>)
 800ce1a:	f240 12df 	movw	r2, #479	; 0x1df
 800ce1e:	492b      	ldr	r1, [pc, #172]	; (800cecc <pbuf_add_header_impl+0xc8>)
 800ce20:	482b      	ldr	r0, [pc, #172]	; (800ced0 <pbuf_add_header_impl+0xcc>)
 800ce22:	f00a f8ed 	bl	8017000 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d003      	beq.n	800ce34 <pbuf_add_header_impl+0x30>
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce32:	d301      	bcc.n	800ce38 <pbuf_add_header_impl+0x34>
    return 1;
 800ce34:	2301      	movs	r3, #1
 800ce36:	e043      	b.n	800cec0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <pbuf_add_header_impl+0x3e>
    return 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e03e      	b.n	800cec0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	891a      	ldrh	r2, [r3, #8]
 800ce4a:	8a7b      	ldrh	r3, [r7, #18]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	8a7a      	ldrh	r2, [r7, #18]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d901      	bls.n	800ce5a <pbuf_add_header_impl+0x56>
    return 1;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e032      	b.n	800cec0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	7b1b      	ldrb	r3, [r3, #12]
 800ce5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ce60:	8a3b      	ldrh	r3, [r7, #16]
 800ce62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00c      	beq.n	800ce84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	685a      	ldr	r2, [r3, #4]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	425b      	negs	r3, r3
 800ce72:	4413      	add	r3, r2
 800ce74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3310      	adds	r3, #16
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d20d      	bcs.n	800ce9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e01d      	b.n	800cec0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d006      	beq.n	800ce98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	425b      	negs	r3, r3
 800ce92:	4413      	add	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]
 800ce96:	e001      	b.n	800ce9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e011      	b.n	800cec0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	895a      	ldrh	r2, [r3, #10]
 800cea6:	8a7b      	ldrh	r3, [r7, #18]
 800cea8:	4413      	add	r3, r2
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	891a      	ldrh	r2, [r3, #8]
 800ceb4:	8a7b      	ldrh	r3, [r7, #18]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	811a      	strh	r2, [r3, #8]


  return 0;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	080192d8 	.word	0x080192d8
 800cecc:	0801943c 	.word	0x0801943c
 800ced0:	08019338 	.word	0x08019338

0800ced4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cede:	2200      	movs	r2, #0
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff ff8e 	bl	800ce04 <pbuf_add_header_impl>
 800cee8:	4603      	mov	r3, r0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <pbuf_remove_header+0x1e>
 800cf04:	4b20      	ldr	r3, [pc, #128]	; (800cf88 <pbuf_remove_header+0x94>)
 800cf06:	f240 224b 	movw	r2, #587	; 0x24b
 800cf0a:	4920      	ldr	r1, [pc, #128]	; (800cf8c <pbuf_remove_header+0x98>)
 800cf0c:	4820      	ldr	r0, [pc, #128]	; (800cf90 <pbuf_remove_header+0x9c>)
 800cf0e:	f00a f877 	bl	8017000 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <pbuf_remove_header+0x2c>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf1e:	d301      	bcc.n	800cf24 <pbuf_remove_header+0x30>
    return 1;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e02c      	b.n	800cf7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <pbuf_remove_header+0x3a>
    return 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e027      	b.n	800cf7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	895b      	ldrh	r3, [r3, #10]
 800cf36:	89fa      	ldrh	r2, [r7, #14]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d908      	bls.n	800cf4e <pbuf_remove_header+0x5a>
 800cf3c:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <pbuf_remove_header+0x94>)
 800cf3e:	f240 2255 	movw	r2, #597	; 0x255
 800cf42:	4914      	ldr	r1, [pc, #80]	; (800cf94 <pbuf_remove_header+0xa0>)
 800cf44:	4812      	ldr	r0, [pc, #72]	; (800cf90 <pbuf_remove_header+0x9c>)
 800cf46:	f00a f85b 	bl	8017000 <iprintf>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e017      	b.n	800cf7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	441a      	add	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	895a      	ldrh	r2, [r3, #10]
 800cf64:	89fb      	ldrh	r3, [r7, #14]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	891a      	ldrh	r2, [r3, #8]
 800cf72:	89fb      	ldrh	r3, [r7, #14]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	080192d8 	.word	0x080192d8
 800cf8c:	0801943c 	.word	0x0801943c
 800cf90:	08019338 	.word	0x08019338
 800cf94:	08019448 	.word	0x08019448

0800cf98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	807b      	strh	r3, [r7, #2]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cfa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	da08      	bge.n	800cfc2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cfb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfb4:	425b      	negs	r3, r3
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ff9b 	bl	800cef4 <pbuf_remove_header>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	e007      	b.n	800cfd2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cfc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfc6:	787a      	ldrb	r2, [r7, #1]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff ff1a 	bl	800ce04 <pbuf_add_header_impl>
 800cfd0:	4603      	mov	r3, r0
  }
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cfe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfea:	2201      	movs	r2, #1
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff ffd2 	bl	800cf98 <pbuf_header_impl>
 800cff4:	4603      	mov	r3, r0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
	...

0800d000 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b088      	sub	sp, #32
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10b      	bne.n	800d026 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d106      	bne.n	800d022 <pbuf_free+0x22>
 800d014:	4b3b      	ldr	r3, [pc, #236]	; (800d104 <pbuf_free+0x104>)
 800d016:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d01a:	493b      	ldr	r1, [pc, #236]	; (800d108 <pbuf_free+0x108>)
 800d01c:	483b      	ldr	r0, [pc, #236]	; (800d10c <pbuf_free+0x10c>)
 800d01e:	f009 ffef 	bl	8017000 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d022:	2300      	movs	r3, #0
 800d024:	e069      	b.n	800d0fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d02a:	e062      	b.n	800d0f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d02c:	f009 fdbc 	bl	8016ba8 <sys_arch_protect>
 800d030:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7b9b      	ldrb	r3, [r3, #14]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <pbuf_free+0x48>
 800d03a:	4b32      	ldr	r3, [pc, #200]	; (800d104 <pbuf_free+0x104>)
 800d03c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d040:	4933      	ldr	r1, [pc, #204]	; (800d110 <pbuf_free+0x110>)
 800d042:	4832      	ldr	r0, [pc, #200]	; (800d10c <pbuf_free+0x10c>)
 800d044:	f009 ffdc 	bl	8017000 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	7b9b      	ldrb	r3, [r3, #14]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	739a      	strb	r2, [r3, #14]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7b9b      	ldrb	r3, [r3, #14]
 800d058:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d05a:	69b8      	ldr	r0, [r7, #24]
 800d05c:	f009 fdb2 	bl	8016bc4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d060:	7dfb      	ldrb	r3, [r7, #23]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d143      	bne.n	800d0ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7b1b      	ldrb	r3, [r3, #12]
 800d070:	f003 030f 	and.w	r3, r3, #15
 800d074:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	7b5b      	ldrb	r3, [r3, #13]
 800d07a:	f003 0302 	and.w	r3, r3, #2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d011      	beq.n	800d0a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <pbuf_free+0x9c>
 800d08e:	4b1d      	ldr	r3, [pc, #116]	; (800d104 <pbuf_free+0x104>)
 800d090:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d094:	491f      	ldr	r1, [pc, #124]	; (800d114 <pbuf_free+0x114>)
 800d096:	481d      	ldr	r0, [pc, #116]	; (800d10c <pbuf_free+0x10c>)
 800d098:	f009 ffb2 	bl	8017000 <iprintf>
        pc->custom_free_function(p);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	4798      	blx	r3
 800d0a4:	e01d      	b.n	800d0e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d104      	bne.n	800d0b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	200c      	movs	r0, #12
 800d0b0:	f7ff f8fe 	bl	800c2b0 <memp_free>
 800d0b4:	e015      	b.n	800d0e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d104      	bne.n	800d0c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d0bc:	6879      	ldr	r1, [r7, #4]
 800d0be:	200b      	movs	r0, #11
 800d0c0:	f7ff f8f6 	bl	800c2b0 <memp_free>
 800d0c4:	e00d      	b.n	800d0e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <pbuf_free+0xd4>
          mem_free(p);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7fe fd81 	bl	800bbd4 <mem_free>
 800d0d2:	e006      	b.n	800d0e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <pbuf_free+0x104>)
 800d0d6:	f240 320f 	movw	r2, #783	; 0x30f
 800d0da:	490f      	ldr	r1, [pc, #60]	; (800d118 <pbuf_free+0x118>)
 800d0dc:	480b      	ldr	r0, [pc, #44]	; (800d10c <pbuf_free+0x10c>)
 800d0de:	f009 ff8f 	bl	8017000 <iprintf>
        }
      }
      count++;
 800d0e2:	7ffb      	ldrb	r3, [r7, #31]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	607b      	str	r3, [r7, #4]
 800d0ec:	e001      	b.n	800d0f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d199      	bne.n	800d02c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d0f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3720      	adds	r7, #32
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	080192d8 	.word	0x080192d8
 800d108:	0801943c 	.word	0x0801943c
 800d10c:	08019338 	.word	0x08019338
 800d110:	08019468 	.word	0x08019468
 800d114:	08019480 	.word	0x08019480
 800d118:	080194a4 	.word	0x080194a4

0800d11c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d128:	e005      	b.n	800d136 <pbuf_clen+0x1a>
    ++len;
 800d12a:	89fb      	ldrh	r3, [r7, #14]
 800d12c:	3301      	adds	r3, #1
 800d12e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1f6      	bne.n	800d12a <pbuf_clen+0xe>
  }
  return len;
 800d13c:	89fb      	ldrh	r3, [r7, #14]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
	...

0800d14c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d016      	beq.n	800d188 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d15a:	f009 fd25 	bl	8016ba8 <sys_arch_protect>
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7b9b      	ldrb	r3, [r3, #14]
 800d164:	3301      	adds	r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	739a      	strb	r2, [r3, #14]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f009 fd29 	bl	8016bc4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7b9b      	ldrb	r3, [r3, #14]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <pbuf_ref+0x3c>
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <pbuf_ref+0x44>)
 800d17c:	f240 3242 	movw	r2, #834	; 0x342
 800d180:	4904      	ldr	r1, [pc, #16]	; (800d194 <pbuf_ref+0x48>)
 800d182:	4805      	ldr	r0, [pc, #20]	; (800d198 <pbuf_ref+0x4c>)
 800d184:	f009 ff3c 	bl	8017000 <iprintf>
  }
}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	080192d8 	.word	0x080192d8
 800d194:	080194b8 	.word	0x080194b8
 800d198:	08019338 	.word	0x08019338

0800d19c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <pbuf_cat+0x16>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d107      	bne.n	800d1c2 <pbuf_cat+0x26>
 800d1b2:	4b20      	ldr	r3, [pc, #128]	; (800d234 <pbuf_cat+0x98>)
 800d1b4:	f240 3259 	movw	r2, #857	; 0x359
 800d1b8:	491f      	ldr	r1, [pc, #124]	; (800d238 <pbuf_cat+0x9c>)
 800d1ba:	4820      	ldr	r0, [pc, #128]	; (800d23c <pbuf_cat+0xa0>)
 800d1bc:	f009 ff20 	bl	8017000 <iprintf>
 800d1c0:	e034      	b.n	800d22c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e00a      	b.n	800d1de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	891a      	ldrh	r2, [r3, #8]
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	891b      	ldrh	r3, [r3, #8]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1f0      	bne.n	800d1c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	891a      	ldrh	r2, [r3, #8]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d006      	beq.n	800d200 <pbuf_cat+0x64>
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <pbuf_cat+0x98>)
 800d1f4:	f240 3262 	movw	r2, #866	; 0x362
 800d1f8:	4911      	ldr	r1, [pc, #68]	; (800d240 <pbuf_cat+0xa4>)
 800d1fa:	4810      	ldr	r0, [pc, #64]	; (800d23c <pbuf_cat+0xa0>)
 800d1fc:	f009 ff00 	bl	8017000 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d006      	beq.n	800d216 <pbuf_cat+0x7a>
 800d208:	4b0a      	ldr	r3, [pc, #40]	; (800d234 <pbuf_cat+0x98>)
 800d20a:	f240 3263 	movw	r2, #867	; 0x363
 800d20e:	490d      	ldr	r1, [pc, #52]	; (800d244 <pbuf_cat+0xa8>)
 800d210:	480a      	ldr	r0, [pc, #40]	; (800d23c <pbuf_cat+0xa0>)
 800d212:	f009 fef5 	bl	8017000 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	891a      	ldrh	r2, [r3, #8]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	891b      	ldrh	r3, [r3, #8]
 800d21e:	4413      	add	r3, r2
 800d220:	b29a      	uxth	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	080192d8 	.word	0x080192d8
 800d238:	080194cc 	.word	0x080194cc
 800d23c:	08019338 	.word	0x08019338
 800d240:	08019504 	.word	0x08019504
 800d244:	08019534 	.word	0x08019534

0800d248 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d252:	2300      	movs	r3, #0
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	2300      	movs	r3, #0
 800d258:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d008      	beq.n	800d272 <pbuf_copy+0x2a>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <pbuf_copy+0x2a>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	891a      	ldrh	r2, [r3, #8]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	891b      	ldrh	r3, [r3, #8]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d209      	bcs.n	800d286 <pbuf_copy+0x3e>
 800d272:	4b57      	ldr	r3, [pc, #348]	; (800d3d0 <pbuf_copy+0x188>)
 800d274:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d278:	4956      	ldr	r1, [pc, #344]	; (800d3d4 <pbuf_copy+0x18c>)
 800d27a:	4857      	ldr	r0, [pc, #348]	; (800d3d8 <pbuf_copy+0x190>)
 800d27c:	f009 fec0 	bl	8017000 <iprintf>
 800d280:	f06f 030f 	mvn.w	r3, #15
 800d284:	e09f      	b.n	800d3c6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	895b      	ldrh	r3, [r3, #10]
 800d28a:	461a      	mov	r2, r3
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	1ad2      	subs	r2, r2, r3
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	895b      	ldrh	r3, [r3, #10]
 800d294:	4619      	mov	r1, r3
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	1acb      	subs	r3, r1, r3
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d306      	bcc.n	800d2ac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	895b      	ldrh	r3, [r3, #10]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	e005      	b.n	800d2b8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	895b      	ldrh	r3, [r3, #10]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	18d0      	adds	r0, r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	f009 fdbe 	bl	8016e4c <memcpy>
    offset_to += len;
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	895b      	ldrh	r3, [r3, #10]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d906      	bls.n	800d2fa <pbuf_copy+0xb2>
 800d2ec:	4b38      	ldr	r3, [pc, #224]	; (800d3d0 <pbuf_copy+0x188>)
 800d2ee:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d2f2:	493a      	ldr	r1, [pc, #232]	; (800d3dc <pbuf_copy+0x194>)
 800d2f4:	4838      	ldr	r0, [pc, #224]	; (800d3d8 <pbuf_copy+0x190>)
 800d2f6:	f009 fe83 	bl	8017000 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	895b      	ldrh	r3, [r3, #10]
 800d2fe:	461a      	mov	r2, r3
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	4293      	cmp	r3, r2
 800d304:	d906      	bls.n	800d314 <pbuf_copy+0xcc>
 800d306:	4b32      	ldr	r3, [pc, #200]	; (800d3d0 <pbuf_copy+0x188>)
 800d308:	f240 32da 	movw	r2, #986	; 0x3da
 800d30c:	4934      	ldr	r1, [pc, #208]	; (800d3e0 <pbuf_copy+0x198>)
 800d30e:	4832      	ldr	r0, [pc, #200]	; (800d3d8 <pbuf_copy+0x190>)
 800d310:	f009 fe76 	bl	8017000 <iprintf>
    if (offset_from >= p_from->len) {
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	895b      	ldrh	r3, [r3, #10]
 800d318:	461a      	mov	r2, r3
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d304      	bcc.n	800d32a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	895b      	ldrh	r3, [r3, #10]
 800d32e:	461a      	mov	r2, r3
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	4293      	cmp	r3, r2
 800d334:	d114      	bne.n	800d360 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10c      	bne.n	800d360 <pbuf_copy+0x118>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d009      	beq.n	800d360 <pbuf_copy+0x118>
 800d34c:	4b20      	ldr	r3, [pc, #128]	; (800d3d0 <pbuf_copy+0x188>)
 800d34e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d352:	4924      	ldr	r1, [pc, #144]	; (800d3e4 <pbuf_copy+0x19c>)
 800d354:	4820      	ldr	r0, [pc, #128]	; (800d3d8 <pbuf_copy+0x190>)
 800d356:	f009 fe53 	bl	8017000 <iprintf>
 800d35a:	f06f 030f 	mvn.w	r3, #15
 800d35e:	e032      	b.n	800d3c6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d013      	beq.n	800d38e <pbuf_copy+0x146>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	895a      	ldrh	r2, [r3, #10]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	891b      	ldrh	r3, [r3, #8]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d10d      	bne.n	800d38e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d009      	beq.n	800d38e <pbuf_copy+0x146>
 800d37a:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <pbuf_copy+0x188>)
 800d37c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d380:	4919      	ldr	r1, [pc, #100]	; (800d3e8 <pbuf_copy+0x1a0>)
 800d382:	4815      	ldr	r0, [pc, #84]	; (800d3d8 <pbuf_copy+0x190>)
 800d384:	f009 fe3c 	bl	8017000 <iprintf>
 800d388:	f06f 0305 	mvn.w	r3, #5
 800d38c:	e01b      	b.n	800d3c6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d013      	beq.n	800d3bc <pbuf_copy+0x174>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	895a      	ldrh	r2, [r3, #10]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	891b      	ldrh	r3, [r3, #8]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d10d      	bne.n	800d3bc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d009      	beq.n	800d3bc <pbuf_copy+0x174>
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <pbuf_copy+0x188>)
 800d3aa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d3ae:	490e      	ldr	r1, [pc, #56]	; (800d3e8 <pbuf_copy+0x1a0>)
 800d3b0:	4809      	ldr	r0, [pc, #36]	; (800d3d8 <pbuf_copy+0x190>)
 800d3b2:	f009 fe25 	bl	8017000 <iprintf>
 800d3b6:	f06f 0305 	mvn.w	r3, #5
 800d3ba:	e004      	b.n	800d3c6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f47f af61 	bne.w	800d286 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	080192d8 	.word	0x080192d8
 800d3d4:	08019580 	.word	0x08019580
 800d3d8:	08019338 	.word	0x08019338
 800d3dc:	080195b0 	.word	0x080195b0
 800d3e0:	080195c8 	.word	0x080195c8
 800d3e4:	080195e4 	.word	0x080195e4
 800d3e8:	080195f4 	.word	0x080195f4

0800d3ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	80fb      	strh	r3, [r7, #6]
 800d3fe:	4613      	mov	r3, r2
 800d400:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d108      	bne.n	800d422 <pbuf_copy_partial+0x36>
 800d410:	4b2b      	ldr	r3, [pc, #172]	; (800d4c0 <pbuf_copy_partial+0xd4>)
 800d412:	f240 420a 	movw	r2, #1034	; 0x40a
 800d416:	492b      	ldr	r1, [pc, #172]	; (800d4c4 <pbuf_copy_partial+0xd8>)
 800d418:	482b      	ldr	r0, [pc, #172]	; (800d4c8 <pbuf_copy_partial+0xdc>)
 800d41a:	f009 fdf1 	bl	8017000 <iprintf>
 800d41e:	2300      	movs	r3, #0
 800d420:	e04a      	b.n	800d4b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d108      	bne.n	800d43a <pbuf_copy_partial+0x4e>
 800d428:	4b25      	ldr	r3, [pc, #148]	; (800d4c0 <pbuf_copy_partial+0xd4>)
 800d42a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d42e:	4927      	ldr	r1, [pc, #156]	; (800d4cc <pbuf_copy_partial+0xe0>)
 800d430:	4825      	ldr	r0, [pc, #148]	; (800d4c8 <pbuf_copy_partial+0xdc>)
 800d432:	f009 fde5 	bl	8017000 <iprintf>
 800d436:	2300      	movs	r3, #0
 800d438:	e03e      	b.n	800d4b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	61fb      	str	r3, [r7, #28]
 800d43e:	e034      	b.n	800d4aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d440:	88bb      	ldrh	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <pbuf_copy_partial+0x70>
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	895b      	ldrh	r3, [r3, #10]
 800d44a:	88ba      	ldrh	r2, [r7, #4]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d305      	bcc.n	800d45c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	895b      	ldrh	r3, [r3, #10]
 800d454:	88ba      	ldrh	r2, [r7, #4]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	80bb      	strh	r3, [r7, #4]
 800d45a:	e023      	b.n	800d4a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	895a      	ldrh	r2, [r3, #10]
 800d460:	88bb      	ldrh	r3, [r7, #4]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d466:	8b3a      	ldrh	r2, [r7, #24]
 800d468:	88fb      	ldrh	r3, [r7, #6]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d901      	bls.n	800d472 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d46e:	88fb      	ldrh	r3, [r7, #6]
 800d470:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d472:	8b7b      	ldrh	r3, [r7, #26]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	18d0      	adds	r0, r2, r3
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	88bb      	ldrh	r3, [r7, #4]
 800d47e:	4413      	add	r3, r2
 800d480:	8b3a      	ldrh	r2, [r7, #24]
 800d482:	4619      	mov	r1, r3
 800d484:	f009 fce2 	bl	8016e4c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d488:	8afa      	ldrh	r2, [r7, #22]
 800d48a:	8b3b      	ldrh	r3, [r7, #24]
 800d48c:	4413      	add	r3, r2
 800d48e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d490:	8b7a      	ldrh	r2, [r7, #26]
 800d492:	8b3b      	ldrh	r3, [r7, #24]
 800d494:	4413      	add	r3, r2
 800d496:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d498:	88fa      	ldrh	r2, [r7, #6]
 800d49a:	8b3b      	ldrh	r3, [r7, #24]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	61fb      	str	r3, [r7, #28]
 800d4aa:	88fb      	ldrh	r3, [r7, #6]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <pbuf_copy_partial+0xca>
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1c4      	bne.n	800d440 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d4b6:	8afb      	ldrh	r3, [r7, #22]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	080192d8 	.word	0x080192d8
 800d4c4:	08019620 	.word	0x08019620
 800d4c8:	08019338 	.word	0x08019338
 800d4cc:	08019640 	.word	0x08019640

0800d4d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	603a      	str	r2, [r7, #0]
 800d4da:	71fb      	strb	r3, [r7, #7]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	8919      	ldrh	r1, [r3, #8]
 800d4e4:	88ba      	ldrh	r2, [r7, #4]
 800d4e6:	79fb      	ldrb	r3, [r7, #7]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff faa1 	bl	800ca30 <pbuf_alloc>
 800d4ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <pbuf_clone+0x2a>
    return NULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e011      	b.n	800d51e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7ff fea3 	bl	800d248 <pbuf_copy>
 800d502:	4603      	mov	r3, r0
 800d504:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d506:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d006      	beq.n	800d51c <pbuf_clone+0x4c>
 800d50e:	4b06      	ldr	r3, [pc, #24]	; (800d528 <pbuf_clone+0x58>)
 800d510:	f240 5224 	movw	r2, #1316	; 0x524
 800d514:	4905      	ldr	r1, [pc, #20]	; (800d52c <pbuf_clone+0x5c>)
 800d516:	4806      	ldr	r0, [pc, #24]	; (800d530 <pbuf_clone+0x60>)
 800d518:	f009 fd72 	bl	8017000 <iprintf>
  return q;
 800d51c:	68fb      	ldr	r3, [r7, #12]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	080192d8 	.word	0x080192d8
 800d52c:	0801974c 	.word	0x0801974c
 800d530:	08019338 	.word	0x08019338

0800d534 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d538:	f009 fd7a 	bl	8017030 <rand>
 800d53c:	4603      	mov	r3, r0
 800d53e:	b29b      	uxth	r3, r3
 800d540:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d544:	b29b      	uxth	r3, r3
 800d546:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	4b01      	ldr	r3, [pc, #4]	; (800d554 <tcp_init+0x20>)
 800d54e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d550:	bf00      	nop
 800d552:	bd80      	pop	{r7, pc}
 800d554:	20000010 	.word	0x20000010

0800d558 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7d1b      	ldrb	r3, [r3, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d105      	bne.n	800d574 <tcp_free+0x1c>
 800d568:	4b06      	ldr	r3, [pc, #24]	; (800d584 <tcp_free+0x2c>)
 800d56a:	22d4      	movs	r2, #212	; 0xd4
 800d56c:	4906      	ldr	r1, [pc, #24]	; (800d588 <tcp_free+0x30>)
 800d56e:	4807      	ldr	r0, [pc, #28]	; (800d58c <tcp_free+0x34>)
 800d570:	f009 fd46 	bl	8017000 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	2001      	movs	r0, #1
 800d578:	f7fe fe9a 	bl	800c2b0 <memp_free>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	080197d8 	.word	0x080197d8
 800d588:	08019808 	.word	0x08019808
 800d58c:	0801981c 	.word	0x0801981c

0800d590 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d105      	bne.n	800d5ac <tcp_free_listen+0x1c>
 800d5a0:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <tcp_free_listen+0x2c>)
 800d5a2:	22df      	movs	r2, #223	; 0xdf
 800d5a4:	4906      	ldr	r1, [pc, #24]	; (800d5c0 <tcp_free_listen+0x30>)
 800d5a6:	4807      	ldr	r0, [pc, #28]	; (800d5c4 <tcp_free_listen+0x34>)
 800d5a8:	f009 fd2a 	bl	8017000 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d5ac:	6879      	ldr	r1, [r7, #4]
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f7fe fe7e 	bl	800c2b0 <memp_free>
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	080197d8 	.word	0x080197d8
 800d5c0:	08019844 	.word	0x08019844
 800d5c4:	0801981c 	.word	0x0801981c

0800d5c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d5cc:	f001 f8f4 	bl	800e7b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <tcp_tmr+0x28>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <tcp_tmr+0x28>)
 800d5da:	701a      	strb	r2, [r3, #0]
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <tcp_tmr+0x28>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d5e8:	f000 fda6 	bl	800e138 <tcp_slowtmr>
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20004ad9 	.word	0x20004ad9

0800d5f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d105      	bne.n	800d610 <tcp_remove_listener+0x1c>
 800d604:	4b0d      	ldr	r3, [pc, #52]	; (800d63c <tcp_remove_listener+0x48>)
 800d606:	22ff      	movs	r2, #255	; 0xff
 800d608:	490d      	ldr	r1, [pc, #52]	; (800d640 <tcp_remove_listener+0x4c>)
 800d60a:	480e      	ldr	r0, [pc, #56]	; (800d644 <tcp_remove_listener+0x50>)
 800d60c:	f009 fcf8 	bl	8017000 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e00a      	b.n	800d62c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d102      	bne.n	800d626 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1f1      	bne.n	800d616 <tcp_remove_listener+0x22>
    }
  }
}
 800d632:	bf00      	nop
 800d634:	bf00      	nop
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	080197d8 	.word	0x080197d8
 800d640:	08019860 	.word	0x08019860
 800d644:	0801981c 	.word	0x0801981c

0800d648 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <tcp_listen_closed+0x1c>
 800d656:	4b14      	ldr	r3, [pc, #80]	; (800d6a8 <tcp_listen_closed+0x60>)
 800d658:	f240 1211 	movw	r2, #273	; 0x111
 800d65c:	4913      	ldr	r1, [pc, #76]	; (800d6ac <tcp_listen_closed+0x64>)
 800d65e:	4814      	ldr	r0, [pc, #80]	; (800d6b0 <tcp_listen_closed+0x68>)
 800d660:	f009 fcce 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	7d1b      	ldrb	r3, [r3, #20]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d006      	beq.n	800d67a <tcp_listen_closed+0x32>
 800d66c:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <tcp_listen_closed+0x60>)
 800d66e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d672:	4910      	ldr	r1, [pc, #64]	; (800d6b4 <tcp_listen_closed+0x6c>)
 800d674:	480e      	ldr	r0, [pc, #56]	; (800d6b0 <tcp_listen_closed+0x68>)
 800d676:	f009 fcc3 	bl	8017000 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d67a:	2301      	movs	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	e00b      	b.n	800d698 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d680:	4a0d      	ldr	r2, [pc, #52]	; (800d6b8 <tcp_listen_closed+0x70>)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7ff ffb1 	bl	800d5f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	3301      	adds	r3, #1
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d9f0      	bls.n	800d680 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	080197d8 	.word	0x080197d8
 800d6ac:	08019888 	.word	0x08019888
 800d6b0:	0801981c 	.word	0x0801981c
 800d6b4:	08019894 	.word	0x08019894
 800d6b8:	0801b8bc 	.word	0x0801b8bc

0800d6bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d6bc:	b5b0      	push	{r4, r5, r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af04      	add	r7, sp, #16
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <tcp_close_shutdown+0x20>
 800d6ce:	4b63      	ldr	r3, [pc, #396]	; (800d85c <tcp_close_shutdown+0x1a0>)
 800d6d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d6d4:	4962      	ldr	r1, [pc, #392]	; (800d860 <tcp_close_shutdown+0x1a4>)
 800d6d6:	4863      	ldr	r0, [pc, #396]	; (800d864 <tcp_close_shutdown+0x1a8>)
 800d6d8:	f009 fc92 	bl	8017000 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d6dc:	78fb      	ldrb	r3, [r7, #3]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d066      	beq.n	800d7b0 <tcp_close_shutdown+0xf4>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	7d1b      	ldrb	r3, [r3, #20]
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d003      	beq.n	800d6f2 <tcp_close_shutdown+0x36>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d1b      	ldrb	r3, [r3, #20]
 800d6ee:	2b07      	cmp	r3, #7
 800d6f0:	d15e      	bne.n	800d7b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d104      	bne.n	800d704 <tcp_close_shutdown+0x48>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d702:	d055      	beq.n	800d7b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8b5b      	ldrh	r3, [r3, #26]
 800d708:	f003 0310 	and.w	r3, r3, #16
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <tcp_close_shutdown+0x62>
 800d710:	4b52      	ldr	r3, [pc, #328]	; (800d85c <tcp_close_shutdown+0x1a0>)
 800d712:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d716:	4954      	ldr	r1, [pc, #336]	; (800d868 <tcp_close_shutdown+0x1ac>)
 800d718:	4852      	ldr	r0, [pc, #328]	; (800d864 <tcp_close_shutdown+0x1a8>)
 800d71a:	f009 fc71 	bl	8017000 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d726:	687d      	ldr	r5, [r7, #4]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	3304      	adds	r3, #4
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	8ad2      	ldrh	r2, [r2, #22]
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	8b09      	ldrh	r1, [r1, #24]
 800d734:	9102      	str	r1, [sp, #8]
 800d736:	9201      	str	r2, [sp, #4]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	462b      	mov	r3, r5
 800d73c:	4622      	mov	r2, r4
 800d73e:	4601      	mov	r1, r0
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f005 fe05 	bl	8013350 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 fbe6 	bl	800ef18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d74c:	4b47      	ldr	r3, [pc, #284]	; (800d86c <tcp_close_shutdown+0x1b0>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	429a      	cmp	r2, r3
 800d754:	d105      	bne.n	800d762 <tcp_close_shutdown+0xa6>
 800d756:	4b45      	ldr	r3, [pc, #276]	; (800d86c <tcp_close_shutdown+0x1b0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	4a43      	ldr	r2, [pc, #268]	; (800d86c <tcp_close_shutdown+0x1b0>)
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	e013      	b.n	800d78a <tcp_close_shutdown+0xce>
 800d762:	4b42      	ldr	r3, [pc, #264]	; (800d86c <tcp_close_shutdown+0x1b0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e00c      	b.n	800d784 <tcp_close_shutdown+0xc8>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d104      	bne.n	800d77e <tcp_close_shutdown+0xc2>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68da      	ldr	r2, [r3, #12]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	60da      	str	r2, [r3, #12]
 800d77c:	e005      	b.n	800d78a <tcp_close_shutdown+0xce>
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1ef      	bne.n	800d76a <tcp_close_shutdown+0xae>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	60da      	str	r2, [r3, #12]
 800d790:	4b37      	ldr	r3, [pc, #220]	; (800d870 <tcp_close_shutdown+0x1b4>)
 800d792:	2201      	movs	r2, #1
 800d794:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d796:	4b37      	ldr	r3, [pc, #220]	; (800d874 <tcp_close_shutdown+0x1b8>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d102      	bne.n	800d7a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d7a0:	f004 f87a 	bl	8011898 <tcp_trigger_input_pcb_close>
 800d7a4:	e002      	b.n	800d7ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fed6 	bl	800d558 <tcp_free>
      }
      return ERR_OK;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e050      	b.n	800d852 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d03b      	beq.n	800d830 <tcp_close_shutdown+0x174>
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	dc44      	bgt.n	800d846 <tcp_close_shutdown+0x18a>
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <tcp_close_shutdown+0x10a>
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d02a      	beq.n	800d81a <tcp_close_shutdown+0x15e>
 800d7c4:	e03f      	b.n	800d846 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	8adb      	ldrh	r3, [r3, #22]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d021      	beq.n	800d812 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7ce:	4b2a      	ldr	r3, [pc, #168]	; (800d878 <tcp_close_shutdown+0x1bc>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d105      	bne.n	800d7e4 <tcp_close_shutdown+0x128>
 800d7d8:	4b27      	ldr	r3, [pc, #156]	; (800d878 <tcp_close_shutdown+0x1bc>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	4a26      	ldr	r2, [pc, #152]	; (800d878 <tcp_close_shutdown+0x1bc>)
 800d7e0:	6013      	str	r3, [r2, #0]
 800d7e2:	e013      	b.n	800d80c <tcp_close_shutdown+0x150>
 800d7e4:	4b24      	ldr	r3, [pc, #144]	; (800d878 <tcp_close_shutdown+0x1bc>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60bb      	str	r3, [r7, #8]
 800d7ea:	e00c      	b.n	800d806 <tcp_close_shutdown+0x14a>
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d104      	bne.n	800d800 <tcp_close_shutdown+0x144>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	60da      	str	r2, [r3, #12]
 800d7fe:	e005      	b.n	800d80c <tcp_close_shutdown+0x150>
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	60bb      	str	r3, [r7, #8]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1ef      	bne.n	800d7ec <tcp_close_shutdown+0x130>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fea0 	bl	800d558 <tcp_free>
      break;
 800d818:	e01a      	b.n	800d850 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7ff ff14 	bl	800d648 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d820:	6879      	ldr	r1, [r7, #4]
 800d822:	4816      	ldr	r0, [pc, #88]	; (800d87c <tcp_close_shutdown+0x1c0>)
 800d824:	f001 fbc8 	bl	800efb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff feb1 	bl	800d590 <tcp_free_listen>
      break;
 800d82e:	e00f      	b.n	800d850 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d830:	6879      	ldr	r1, [r7, #4]
 800d832:	480e      	ldr	r0, [pc, #56]	; (800d86c <tcp_close_shutdown+0x1b0>)
 800d834:	f001 fbc0 	bl	800efb8 <tcp_pcb_remove>
 800d838:	4b0d      	ldr	r3, [pc, #52]	; (800d870 <tcp_close_shutdown+0x1b4>)
 800d83a:	2201      	movs	r2, #1
 800d83c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff fe8a 	bl	800d558 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d844:	e004      	b.n	800d850 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f81a 	bl	800d880 <tcp_close_shutdown_fin>
 800d84c:	4603      	mov	r3, r0
 800d84e:	e000      	b.n	800d852 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bdb0      	pop	{r4, r5, r7, pc}
 800d85a:	bf00      	nop
 800d85c:	080197d8 	.word	0x080197d8
 800d860:	080198ac 	.word	0x080198ac
 800d864:	0801981c 	.word	0x0801981c
 800d868:	080198cc 	.word	0x080198cc
 800d86c:	20025840 	.word	0x20025840
 800d870:	2002583c 	.word	0x2002583c
 800d874:	20025854 	.word	0x20025854
 800d878:	2002584c 	.word	0x2002584c
 800d87c:	20025848 	.word	0x20025848

0800d880 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <tcp_close_shutdown_fin+0x1c>
 800d88e:	4b2e      	ldr	r3, [pc, #184]	; (800d948 <tcp_close_shutdown_fin+0xc8>)
 800d890:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d894:	492d      	ldr	r1, [pc, #180]	; (800d94c <tcp_close_shutdown_fin+0xcc>)
 800d896:	482e      	ldr	r0, [pc, #184]	; (800d950 <tcp_close_shutdown_fin+0xd0>)
 800d898:	f009 fbb2 	bl	8017000 <iprintf>

  switch (pcb->state) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
 800d8a0:	2b07      	cmp	r3, #7
 800d8a2:	d020      	beq.n	800d8e6 <tcp_close_shutdown_fin+0x66>
 800d8a4:	2b07      	cmp	r3, #7
 800d8a6:	dc2b      	bgt.n	800d900 <tcp_close_shutdown_fin+0x80>
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d002      	beq.n	800d8b2 <tcp_close_shutdown_fin+0x32>
 800d8ac:	2b04      	cmp	r3, #4
 800d8ae:	d00d      	beq.n	800d8cc <tcp_close_shutdown_fin+0x4c>
 800d8b0:	e026      	b.n	800d900 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f004 fe5a 	bl	801256c <tcp_send_fin>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d11f      	bne.n	800d904 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2205      	movs	r2, #5
 800d8c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8ca:	e01b      	b.n	800d904 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f004 fe4d 	bl	801256c <tcp_send_fin>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d114      	bne.n	800d908 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2205      	movs	r2, #5
 800d8e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8e4:	e010      	b.n	800d908 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f004 fe40 	bl	801256c <tcp_send_fin>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2209      	movs	r2, #9
 800d8fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8fe:	e005      	b.n	800d90c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	e01c      	b.n	800d93e <tcp_close_shutdown_fin+0xbe>
      break;
 800d904:	bf00      	nop
 800d906:	e002      	b.n	800d90e <tcp_close_shutdown_fin+0x8e>
      break;
 800d908:	bf00      	nop
 800d90a:	e000      	b.n	800d90e <tcp_close_shutdown_fin+0x8e>
      break;
 800d90c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f004 ff66 	bl	80127e8 <tcp_output>
 800d91c:	e00d      	b.n	800d93a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d926:	d108      	bne.n	800d93a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	8b5b      	ldrh	r3, [r3, #26]
 800d92c:	f043 0308 	orr.w	r3, r3, #8
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	e001      	b.n	800d93e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	080197d8 	.word	0x080197d8
 800d94c:	08019888 	.word	0x08019888
 800d950:	0801981c 	.word	0x0801981c

0800d954 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d109      	bne.n	800d976 <tcp_close+0x22>
 800d962:	4b0f      	ldr	r3, [pc, #60]	; (800d9a0 <tcp_close+0x4c>)
 800d964:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d968:	490e      	ldr	r1, [pc, #56]	; (800d9a4 <tcp_close+0x50>)
 800d96a:	480f      	ldr	r0, [pc, #60]	; (800d9a8 <tcp_close+0x54>)
 800d96c:	f009 fb48 	bl	8017000 <iprintf>
 800d970:	f06f 030f 	mvn.w	r3, #15
 800d974:	e00f      	b.n	800d996 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d006      	beq.n	800d98c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	8b5b      	ldrh	r3, [r3, #26]
 800d982:	f043 0310 	orr.w	r3, r3, #16
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d98c:	2101      	movs	r1, #1
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7ff fe94 	bl	800d6bc <tcp_close_shutdown>
 800d994:	4603      	mov	r3, r0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	080197d8 	.word	0x080197d8
 800d9a4:	080198e8 	.word	0x080198e8
 800d9a8:	0801981c 	.word	0x0801981c

0800d9ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d109      	bne.n	800d9d2 <tcp_shutdown+0x26>
 800d9be:	4b26      	ldr	r3, [pc, #152]	; (800da58 <tcp_shutdown+0xac>)
 800d9c0:	f240 2207 	movw	r2, #519	; 0x207
 800d9c4:	4925      	ldr	r1, [pc, #148]	; (800da5c <tcp_shutdown+0xb0>)
 800d9c6:	4826      	ldr	r0, [pc, #152]	; (800da60 <tcp_shutdown+0xb4>)
 800d9c8:	f009 fb1a 	bl	8017000 <iprintf>
 800d9cc:	f06f 030f 	mvn.w	r3, #15
 800d9d0:	e03d      	b.n	800da4e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	7d1b      	ldrb	r3, [r3, #20]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d102      	bne.n	800d9e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d9da:	f06f 030a 	mvn.w	r3, #10
 800d9de:	e036      	b.n	800da4e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d01b      	beq.n	800da1e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	8b5b      	ldrh	r3, [r3, #26]
 800d9ea:	f043 0310 	orr.w	r3, r3, #16
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d005      	beq.n	800da06 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7ff fe5d 	bl	800d6bc <tcp_close_shutdown>
 800da02:	4603      	mov	r3, r0
 800da04:	e023      	b.n	800da4e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d007      	beq.n	800da1e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff faf4 	bl	800d000 <pbuf_free>
      pcb->refused_data = NULL;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2200      	movs	r2, #0
 800da1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d013      	beq.n	800da4c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	2b04      	cmp	r3, #4
 800da2a:	dc02      	bgt.n	800da32 <tcp_shutdown+0x86>
 800da2c:	2b03      	cmp	r3, #3
 800da2e:	da02      	bge.n	800da36 <tcp_shutdown+0x8a>
 800da30:	e009      	b.n	800da46 <tcp_shutdown+0x9a>
 800da32:	2b07      	cmp	r3, #7
 800da34:	d107      	bne.n	800da46 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	4619      	mov	r1, r3
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f7ff fe3d 	bl	800d6bc <tcp_close_shutdown>
 800da42:	4603      	mov	r3, r0
 800da44:	e003      	b.n	800da4e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800da46:	f06f 030a 	mvn.w	r3, #10
 800da4a:	e000      	b.n	800da4e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	080197d8 	.word	0x080197d8
 800da5c:	08019900 	.word	0x08019900
 800da60:	0801981c 	.word	0x0801981c

0800da64 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08e      	sub	sp, #56	; 0x38
 800da68:	af04      	add	r7, sp, #16
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d107      	bne.n	800da84 <tcp_abandon+0x20>
 800da74:	4b52      	ldr	r3, [pc, #328]	; (800dbc0 <tcp_abandon+0x15c>)
 800da76:	f240 223d 	movw	r2, #573	; 0x23d
 800da7a:	4952      	ldr	r1, [pc, #328]	; (800dbc4 <tcp_abandon+0x160>)
 800da7c:	4852      	ldr	r0, [pc, #328]	; (800dbc8 <tcp_abandon+0x164>)
 800da7e:	f009 fabf 	bl	8017000 <iprintf>
 800da82:	e099      	b.n	800dbb8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d106      	bne.n	800da9a <tcp_abandon+0x36>
 800da8c:	4b4c      	ldr	r3, [pc, #304]	; (800dbc0 <tcp_abandon+0x15c>)
 800da8e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800da92:	494e      	ldr	r1, [pc, #312]	; (800dbcc <tcp_abandon+0x168>)
 800da94:	484c      	ldr	r0, [pc, #304]	; (800dbc8 <tcp_abandon+0x164>)
 800da96:	f009 fab3 	bl	8017000 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	2b0a      	cmp	r3, #10
 800daa0:	d107      	bne.n	800dab2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800daa2:	6879      	ldr	r1, [r7, #4]
 800daa4:	484a      	ldr	r0, [pc, #296]	; (800dbd0 <tcp_abandon+0x16c>)
 800daa6:	f001 fa87 	bl	800efb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff fd54 	bl	800d558 <tcp_free>
 800dab0:	e082      	b.n	800dbb8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dacc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	7d1b      	ldrb	r3, [r3, #20]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d126      	bne.n	800db2a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	8adb      	ldrh	r3, [r3, #22]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d02e      	beq.n	800db42 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dae4:	4b3b      	ldr	r3, [pc, #236]	; (800dbd4 <tcp_abandon+0x170>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	429a      	cmp	r2, r3
 800daec:	d105      	bne.n	800dafa <tcp_abandon+0x96>
 800daee:	4b39      	ldr	r3, [pc, #228]	; (800dbd4 <tcp_abandon+0x170>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	4a37      	ldr	r2, [pc, #220]	; (800dbd4 <tcp_abandon+0x170>)
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	e013      	b.n	800db22 <tcp_abandon+0xbe>
 800dafa:	4b36      	ldr	r3, [pc, #216]	; (800dbd4 <tcp_abandon+0x170>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	61fb      	str	r3, [r7, #28]
 800db00:	e00c      	b.n	800db1c <tcp_abandon+0xb8>
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d104      	bne.n	800db16 <tcp_abandon+0xb2>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	60da      	str	r2, [r3, #12]
 800db14:	e005      	b.n	800db22 <tcp_abandon+0xbe>
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	61fb      	str	r3, [r7, #28]
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1ef      	bne.n	800db02 <tcp_abandon+0x9e>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	60da      	str	r2, [r3, #12]
 800db28:	e00b      	b.n	800db42 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	8adb      	ldrh	r3, [r3, #22]
 800db32:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	4828      	ldr	r0, [pc, #160]	; (800dbd8 <tcp_abandon+0x174>)
 800db38:	f001 fa3e 	bl	800efb8 <tcp_pcb_remove>
 800db3c:	4b27      	ldr	r3, [pc, #156]	; (800dbdc <tcp_abandon+0x178>)
 800db3e:	2201      	movs	r2, #1
 800db40:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db46:	2b00      	cmp	r3, #0
 800db48:	d004      	beq.n	800db54 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4e:	4618      	mov	r0, r3
 800db50:	f000 ff12 	bl	800e978 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d004      	beq.n	800db66 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db60:	4618      	mov	r0, r3
 800db62:	f000 ff09 	bl	800e978 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d004      	beq.n	800db78 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db72:	4618      	mov	r0, r3
 800db74:	f000 ff00 	bl	800e978 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00e      	beq.n	800db9c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800db7e:	6879      	ldr	r1, [r7, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3304      	adds	r3, #4
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	8b12      	ldrh	r2, [r2, #24]
 800db88:	9202      	str	r2, [sp, #8]
 800db8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db8c:	9201      	str	r2, [sp, #4]
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	460b      	mov	r3, r1
 800db92:	697a      	ldr	r2, [r7, #20]
 800db94:	69b9      	ldr	r1, [r7, #24]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f005 fbda 	bl	8013350 <tcp_rst>
    }
    last_state = pcb->state;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7d1b      	ldrb	r3, [r3, #20]
 800dba0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7ff fcd8 	bl	800d558 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d004      	beq.n	800dbb8 <tcp_abandon+0x154>
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f06f 010c 	mvn.w	r1, #12
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	4798      	blx	r3
  }
}
 800dbb8:	3728      	adds	r7, #40	; 0x28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	080197d8 	.word	0x080197d8
 800dbc4:	0801991c 	.word	0x0801991c
 800dbc8:	0801981c 	.word	0x0801981c
 800dbcc:	08019938 	.word	0x08019938
 800dbd0:	20025850 	.word	0x20025850
 800dbd4:	2002584c 	.word	0x2002584c
 800dbd8:	20025840 	.word	0x20025840
 800dbdc:	2002583c 	.word	0x2002583c

0800dbe0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dbe8:	2101      	movs	r1, #1
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff ff3a 	bl	800da64 <tcp_abandon>
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	4613      	mov	r3, r2
 800dc04:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dc06:	2304      	movs	r3, #4
 800dc08:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dc10:	4b3e      	ldr	r3, [pc, #248]	; (800dd0c <tcp_bind+0x114>)
 800dc12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d109      	bne.n	800dc2e <tcp_bind+0x36>
 800dc1a:	4b3d      	ldr	r3, [pc, #244]	; (800dd10 <tcp_bind+0x118>)
 800dc1c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dc20:	493c      	ldr	r1, [pc, #240]	; (800dd14 <tcp_bind+0x11c>)
 800dc22:	483d      	ldr	r0, [pc, #244]	; (800dd18 <tcp_bind+0x120>)
 800dc24:	f009 f9ec 	bl	8017000 <iprintf>
 800dc28:	f06f 030f 	mvn.w	r3, #15
 800dc2c:	e06a      	b.n	800dd04 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	7d1b      	ldrb	r3, [r3, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d009      	beq.n	800dc4a <tcp_bind+0x52>
 800dc36:	4b36      	ldr	r3, [pc, #216]	; (800dd10 <tcp_bind+0x118>)
 800dc38:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dc3c:	4937      	ldr	r1, [pc, #220]	; (800dd1c <tcp_bind+0x124>)
 800dc3e:	4836      	ldr	r0, [pc, #216]	; (800dd18 <tcp_bind+0x120>)
 800dc40:	f009 f9de 	bl	8017000 <iprintf>
 800dc44:	f06f 0305 	mvn.w	r3, #5
 800dc48:	e05c      	b.n	800dd04 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dc4a:	88fb      	ldrh	r3, [r7, #6]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d109      	bne.n	800dc64 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dc50:	f000 f914 	bl	800de7c <tcp_new_port>
 800dc54:	4603      	mov	r3, r0
 800dc56:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dc58:	88fb      	ldrh	r3, [r7, #6]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d135      	bne.n	800dcca <tcp_bind+0xd2>
      return ERR_BUF;
 800dc5e:	f06f 0301 	mvn.w	r3, #1
 800dc62:	e04f      	b.n	800dd04 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dc64:	2300      	movs	r3, #0
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	e02b      	b.n	800dcc2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dc6a:	4a2d      	ldr	r2, [pc, #180]	; (800dd20 <tcp_bind+0x128>)
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	61bb      	str	r3, [r7, #24]
 800dc76:	e01e      	b.n	800dcb6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	8adb      	ldrh	r3, [r3, #22]
 800dc7c:	88fa      	ldrh	r2, [r7, #6]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d116      	bne.n	800dcb0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dc82:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d010      	beq.n	800dcaa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00c      	beq.n	800dcaa <tcp_bind+0xb2>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d009      	beq.n	800dcaa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d005      	beq.n	800dcaa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d102      	bne.n	800dcb0 <tcp_bind+0xb8>
              return ERR_USE;
 800dcaa:	f06f 0307 	mvn.w	r3, #7
 800dcae:	e029      	b.n	800dd04 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	61bb      	str	r3, [r7, #24]
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1dd      	bne.n	800dc78 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	69fa      	ldr	r2, [r7, #28]
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	dbcf      	blt.n	800dc6a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00c      	beq.n	800dcea <tcp_bind+0xf2>
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d008      	beq.n	800dcea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <tcp_bind+0xec>
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	e000      	b.n	800dce6 <tcp_bind+0xee>
 800dce4:	2300      	movs	r3, #0
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	88fa      	ldrh	r2, [r7, #6]
 800dcee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dcf0:	4b0c      	ldr	r3, [pc, #48]	; (800dd24 <tcp_bind+0x12c>)
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	60da      	str	r2, [r3, #12]
 800dcf8:	4a0a      	ldr	r2, [pc, #40]	; (800dd24 <tcp_bind+0x12c>)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	f005 fce9 	bl	80136d4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	0801b8e4 	.word	0x0801b8e4
 800dd10:	080197d8 	.word	0x080197d8
 800dd14:	0801996c 	.word	0x0801996c
 800dd18:	0801981c 	.word	0x0801981c
 800dd1c:	08019984 	.word	0x08019984
 800dd20:	0801b8bc 	.word	0x0801b8bc
 800dd24:	2002584c 	.word	0x2002584c

0800dd28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <tcp_update_rcv_ann_wnd+0x1c>
 800dd36:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <tcp_update_rcv_ann_wnd+0xa4>)
 800dd38:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd3c:	4924      	ldr	r1, [pc, #144]	; (800ddd0 <tcp_update_rcv_ann_wnd+0xa8>)
 800dd3e:	4825      	ldr	r0, [pc, #148]	; (800ddd4 <tcp_update_rcv_ann_wnd+0xac>)
 800dd40:	f009 f95e 	bl	8017000 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dd4c:	4413      	add	r3, r2
 800dd4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd58:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd5c:	bf28      	it	cs
 800dd5e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd62:	b292      	uxth	r2, r2
 800dd64:	4413      	add	r3, r2
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	db08      	blt.n	800dd80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	e020      	b.n	800ddc2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	dd03      	ble.n	800dd96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd94:	e014      	b.n	800ddc0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dda8:	d306      	bcc.n	800ddb8 <tcp_update_rcv_ann_wnd+0x90>
 800ddaa:	4b08      	ldr	r3, [pc, #32]	; (800ddcc <tcp_update_rcv_ann_wnd+0xa4>)
 800ddac:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ddb0:	4909      	ldr	r1, [pc, #36]	; (800ddd8 <tcp_update_rcv_ann_wnd+0xb0>)
 800ddb2:	4808      	ldr	r0, [pc, #32]	; (800ddd4 <tcp_update_rcv_ann_wnd+0xac>)
 800ddb4:	f009 f924 	bl	8017000 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ddc0:	2300      	movs	r3, #0
  }
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	080197d8 	.word	0x080197d8
 800ddd0:	08019a34 	.word	0x08019a34
 800ddd4:	0801981c 	.word	0x0801981c
 800ddd8:	08019a58 	.word	0x08019a58

0800dddc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d107      	bne.n	800ddfe <tcp_recved+0x22>
 800ddee:	4b1f      	ldr	r3, [pc, #124]	; (800de6c <tcp_recved+0x90>)
 800ddf0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ddf4:	491e      	ldr	r1, [pc, #120]	; (800de70 <tcp_recved+0x94>)
 800ddf6:	481f      	ldr	r0, [pc, #124]	; (800de74 <tcp_recved+0x98>)
 800ddf8:	f009 f902 	bl	8017000 <iprintf>
 800ddfc:	e032      	b.n	800de64 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7d1b      	ldrb	r3, [r3, #20]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d106      	bne.n	800de14 <tcp_recved+0x38>
 800de06:	4b19      	ldr	r3, [pc, #100]	; (800de6c <tcp_recved+0x90>)
 800de08:	f240 32d2 	movw	r2, #978	; 0x3d2
 800de0c:	491a      	ldr	r1, [pc, #104]	; (800de78 <tcp_recved+0x9c>)
 800de0e:	4819      	ldr	r0, [pc, #100]	; (800de74 <tcp_recved+0x98>)
 800de10:	f009 f8f6 	bl	8017000 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de18:	887b      	ldrh	r3, [r7, #2]
 800de1a:	4413      	add	r3, r2
 800de1c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800de1e:	89fb      	ldrh	r3, [r7, #14]
 800de20:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de24:	d804      	bhi.n	800de30 <tcp_recved+0x54>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de2a:	89fa      	ldrh	r2, [r7, #14]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d204      	bcs.n	800de3a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de36:	851a      	strh	r2, [r3, #40]	; 0x28
 800de38:	e002      	b.n	800de40 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	89fa      	ldrh	r2, [r7, #14]
 800de3e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff ff71 	bl	800dd28 <tcp_update_rcv_ann_wnd>
 800de46:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de4e:	d309      	bcc.n	800de64 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	8b5b      	ldrh	r3, [r3, #26]
 800de54:	f043 0302 	orr.w	r3, r3, #2
 800de58:	b29a      	uxth	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f004 fcc2 	bl	80127e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	080197d8 	.word	0x080197d8
 800de70:	08019a74 	.word	0x08019a74
 800de74:	0801981c 	.word	0x0801981c
 800de78:	08019a8c 	.word	0x08019a8c

0800de7c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800de86:	4b1e      	ldr	r3, [pc, #120]	; (800df00 <tcp_new_port+0x84>)
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	4b1c      	ldr	r3, [pc, #112]	; (800df00 <tcp_new_port+0x84>)
 800de90:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800de92:	4b1b      	ldr	r3, [pc, #108]	; (800df00 <tcp_new_port+0x84>)
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d103      	bne.n	800dea6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <tcp_new_port+0x84>)
 800dea0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dea4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dea6:	2300      	movs	r3, #0
 800dea8:	71fb      	strb	r3, [r7, #7]
 800deaa:	e01e      	b.n	800deea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	4a15      	ldr	r2, [pc, #84]	; (800df04 <tcp_new_port+0x88>)
 800deb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	603b      	str	r3, [r7, #0]
 800deb8:	e011      	b.n	800dede <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	8ada      	ldrh	r2, [r3, #22]
 800debe:	4b10      	ldr	r3, [pc, #64]	; (800df00 <tcp_new_port+0x84>)
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d108      	bne.n	800ded8 <tcp_new_port+0x5c>
        n++;
 800dec6:	88bb      	ldrh	r3, [r7, #4]
 800dec8:	3301      	adds	r3, #1
 800deca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800decc:	88bb      	ldrh	r3, [r7, #4]
 800dece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ded2:	d3d8      	bcc.n	800de86 <tcp_new_port+0xa>
          return 0;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e00d      	b.n	800def4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	603b      	str	r3, [r7, #0]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1ea      	bne.n	800deba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	3301      	adds	r3, #1
 800dee8:	71fb      	strb	r3, [r7, #7]
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	2b03      	cmp	r3, #3
 800deee:	d9dd      	bls.n	800deac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800def0:	4b03      	ldr	r3, [pc, #12]	; (800df00 <tcp_new_port+0x84>)
 800def2:	881b      	ldrh	r3, [r3, #0]
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	20000010 	.word	0x20000010
 800df04:	0801b8bc 	.word	0x0801b8bc

0800df08 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08a      	sub	sp, #40	; 0x28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	4613      	mov	r3, r2
 800df16:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800df18:	2300      	movs	r3, #0
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <tcp_connect+0x2e>
 800df22:	4b7d      	ldr	r3, [pc, #500]	; (800e118 <tcp_connect+0x210>)
 800df24:	f240 4235 	movw	r2, #1077	; 0x435
 800df28:	497c      	ldr	r1, [pc, #496]	; (800e11c <tcp_connect+0x214>)
 800df2a:	487d      	ldr	r0, [pc, #500]	; (800e120 <tcp_connect+0x218>)
 800df2c:	f009 f868 	bl	8017000 <iprintf>
 800df30:	f06f 030f 	mvn.w	r3, #15
 800df34:	e0ec      	b.n	800e110 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d109      	bne.n	800df50 <tcp_connect+0x48>
 800df3c:	4b76      	ldr	r3, [pc, #472]	; (800e118 <tcp_connect+0x210>)
 800df3e:	f240 4236 	movw	r2, #1078	; 0x436
 800df42:	4978      	ldr	r1, [pc, #480]	; (800e124 <tcp_connect+0x21c>)
 800df44:	4876      	ldr	r0, [pc, #472]	; (800e120 <tcp_connect+0x218>)
 800df46:	f009 f85b 	bl	8017000 <iprintf>
 800df4a:	f06f 030f 	mvn.w	r3, #15
 800df4e:	e0df      	b.n	800e110 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	7d1b      	ldrb	r3, [r3, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d009      	beq.n	800df6c <tcp_connect+0x64>
 800df58:	4b6f      	ldr	r3, [pc, #444]	; (800e118 <tcp_connect+0x210>)
 800df5a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800df5e:	4972      	ldr	r1, [pc, #456]	; (800e128 <tcp_connect+0x220>)
 800df60:	486f      	ldr	r0, [pc, #444]	; (800e120 <tcp_connect+0x218>)
 800df62:	f009 f84d 	bl	8017000 <iprintf>
 800df66:	f06f 0309 	mvn.w	r3, #9
 800df6a:	e0d1      	b.n	800e110 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <tcp_connect+0x70>
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	e000      	b.n	800df7a <tcp_connect+0x72>
 800df78:	2300      	movs	r3, #0
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	88fa      	ldrh	r2, [r7, #6]
 800df82:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	7a1b      	ldrb	r3, [r3, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d006      	beq.n	800df9a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	7a1b      	ldrb	r3, [r3, #8]
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fca3 	bl	800c8dc <netif_get_by_index>
 800df96:	6278      	str	r0, [r7, #36]	; 0x24
 800df98:	e005      	b.n	800dfa6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3304      	adds	r3, #4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f007 f95a 	bl	8015258 <ip4_route>
 800dfa4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dfac:	f06f 0303 	mvn.w	r3, #3
 800dfb0:	e0ae      	b.n	800e110 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <tcp_connect+0xb8>
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d111      	bne.n	800dfe4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <tcp_connect+0xc4>
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	3304      	adds	r3, #4
 800dfca:	e000      	b.n	800dfce <tcp_connect+0xc6>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d102      	bne.n	800dfdc <tcp_connect+0xd4>
      return ERR_RTE;
 800dfd6:	f06f 0303 	mvn.w	r3, #3
 800dfda:	e099      	b.n	800e110 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	8adb      	ldrh	r3, [r3, #22]
 800dfe8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	8adb      	ldrh	r3, [r3, #22]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10c      	bne.n	800e00c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800dff2:	f7ff ff43 	bl	800de7c <tcp_new_port>
 800dff6:	4603      	mov	r3, r0
 800dff8:	461a      	mov	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	8adb      	ldrh	r3, [r3, #22]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d102      	bne.n	800e00c <tcp_connect+0x104>
      return ERR_BUF;
 800e006:	f06f 0301 	mvn.w	r3, #1
 800e00a:	e081      	b.n	800e110 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f001 f867 	bl	800f0e0 <tcp_next_iss>
 800e012:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2200      	movs	r2, #0
 800e018:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	1e5a      	subs	r2, r3, #1
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	1e5a      	subs	r2, r3, #1
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	1e5a      	subs	r2, r3, #1
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e03e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e060:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3304      	adds	r3, #4
 800e06a:	461a      	mov	r2, r3
 800e06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e06e:	f001 f85d 	bl	800f12c <tcp_eff_send_mss_netif>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e08a:	2102      	movs	r1, #2
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f004 fabd 	bl	801260c <tcp_enqueue_flags>
 800e092:	4603      	mov	r3, r0
 800e094:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e096:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d136      	bne.n	800e10c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e0a4:	8b7b      	ldrh	r3, [r7, #26]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d021      	beq.n	800e0ee <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0aa:	4b20      	ldr	r3, [pc, #128]	; (800e12c <tcp_connect+0x224>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d105      	bne.n	800e0c0 <tcp_connect+0x1b8>
 800e0b4:	4b1d      	ldr	r3, [pc, #116]	; (800e12c <tcp_connect+0x224>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	4a1c      	ldr	r2, [pc, #112]	; (800e12c <tcp_connect+0x224>)
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	e013      	b.n	800e0e8 <tcp_connect+0x1e0>
 800e0c0:	4b1a      	ldr	r3, [pc, #104]	; (800e12c <tcp_connect+0x224>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	623b      	str	r3, [r7, #32]
 800e0c6:	e00c      	b.n	800e0e2 <tcp_connect+0x1da>
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d104      	bne.n	800e0dc <tcp_connect+0x1d4>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	68da      	ldr	r2, [r3, #12]
 800e0d6:	6a3b      	ldr	r3, [r7, #32]
 800e0d8:	60da      	str	r2, [r3, #12]
 800e0da:	e005      	b.n	800e0e8 <tcp_connect+0x1e0>
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	623b      	str	r3, [r7, #32]
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1ef      	bne.n	800e0c8 <tcp_connect+0x1c0>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e0ee:	4b10      	ldr	r3, [pc, #64]	; (800e130 <tcp_connect+0x228>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	60da      	str	r2, [r3, #12]
 800e0f6:	4a0e      	ldr	r2, [pc, #56]	; (800e130 <tcp_connect+0x228>)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	f005 faea 	bl	80136d4 <tcp_timer_needed>
 800e100:	4b0c      	ldr	r3, [pc, #48]	; (800e134 <tcp_connect+0x22c>)
 800e102:	2201      	movs	r2, #1
 800e104:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f004 fb6e 	bl	80127e8 <tcp_output>
  }
  return ret;
 800e10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3728      	adds	r7, #40	; 0x28
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	080197d8 	.word	0x080197d8
 800e11c:	08019ab4 	.word	0x08019ab4
 800e120:	0801981c 	.word	0x0801981c
 800e124:	08019ad0 	.word	0x08019ad0
 800e128:	08019aec 	.word	0x08019aec
 800e12c:	2002584c 	.word	0x2002584c
 800e130:	20025840 	.word	0x20025840
 800e134:	2002583c 	.word	0x2002583c

0800e138 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e138:	b5b0      	push	{r4, r5, r7, lr}
 800e13a:	b090      	sub	sp, #64	; 0x40
 800e13c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e144:	4b94      	ldr	r3, [pc, #592]	; (800e398 <tcp_slowtmr+0x260>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	4a93      	ldr	r2, [pc, #588]	; (800e398 <tcp_slowtmr+0x260>)
 800e14c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e14e:	4b93      	ldr	r3, [pc, #588]	; (800e39c <tcp_slowtmr+0x264>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	b2da      	uxtb	r2, r3
 800e156:	4b91      	ldr	r3, [pc, #580]	; (800e39c <tcp_slowtmr+0x264>)
 800e158:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e15e:	4b90      	ldr	r3, [pc, #576]	; (800e3a0 <tcp_slowtmr+0x268>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e164:	e29f      	b.n	800e6a6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	7d1b      	ldrb	r3, [r3, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d106      	bne.n	800e17c <tcp_slowtmr+0x44>
 800e16e:	4b8d      	ldr	r3, [pc, #564]	; (800e3a4 <tcp_slowtmr+0x26c>)
 800e170:	f240 42be 	movw	r2, #1214	; 0x4be
 800e174:	498c      	ldr	r1, [pc, #560]	; (800e3a8 <tcp_slowtmr+0x270>)
 800e176:	488d      	ldr	r0, [pc, #564]	; (800e3ac <tcp_slowtmr+0x274>)
 800e178:	f008 ff42 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	7d1b      	ldrb	r3, [r3, #20]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d106      	bne.n	800e192 <tcp_slowtmr+0x5a>
 800e184:	4b87      	ldr	r3, [pc, #540]	; (800e3a4 <tcp_slowtmr+0x26c>)
 800e186:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e18a:	4989      	ldr	r1, [pc, #548]	; (800e3b0 <tcp_slowtmr+0x278>)
 800e18c:	4887      	ldr	r0, [pc, #540]	; (800e3ac <tcp_slowtmr+0x274>)
 800e18e:	f008 ff37 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	7d1b      	ldrb	r3, [r3, #20]
 800e196:	2b0a      	cmp	r3, #10
 800e198:	d106      	bne.n	800e1a8 <tcp_slowtmr+0x70>
 800e19a:	4b82      	ldr	r3, [pc, #520]	; (800e3a4 <tcp_slowtmr+0x26c>)
 800e19c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e1a0:	4984      	ldr	r1, [pc, #528]	; (800e3b4 <tcp_slowtmr+0x27c>)
 800e1a2:	4882      	ldr	r0, [pc, #520]	; (800e3ac <tcp_slowtmr+0x274>)
 800e1a4:	f008 ff2c 	bl	8017000 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	7f9a      	ldrb	r2, [r3, #30]
 800e1ac:	4b7b      	ldr	r3, [pc, #492]	; (800e39c <tcp_slowtmr+0x264>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d105      	bne.n	800e1c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e1be:	e272      	b.n	800e6a6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e1c0:	4b76      	ldr	r3, [pc, #472]	; (800e39c <tcp_slowtmr+0x264>)
 800e1c2:	781a      	ldrb	r2, [r3, #0]
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	7d1b      	ldrb	r3, [r3, #20]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d10a      	bne.n	800e1f2 <tcp_slowtmr+0xba>
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1e2:	2b05      	cmp	r3, #5
 800e1e4:	d905      	bls.n	800e1f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1f0:	e11e      	b.n	800e430 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1f8:	2b0b      	cmp	r3, #11
 800e1fa:	d905      	bls.n	800e208 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e200:	3301      	adds	r3, #1
 800e202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e206:	e113      	b.n	800e430 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d075      	beq.n	800e2fe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e216:	2b00      	cmp	r3, #0
 800e218:	d006      	beq.n	800e228 <tcp_slowtmr+0xf0>
 800e21a:	4b62      	ldr	r3, [pc, #392]	; (800e3a4 <tcp_slowtmr+0x26c>)
 800e21c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e220:	4965      	ldr	r1, [pc, #404]	; (800e3b8 <tcp_slowtmr+0x280>)
 800e222:	4862      	ldr	r0, [pc, #392]	; (800e3ac <tcp_slowtmr+0x274>)
 800e224:	f008 feec 	bl	8017000 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <tcp_slowtmr+0x106>
 800e230:	4b5c      	ldr	r3, [pc, #368]	; (800e3a4 <tcp_slowtmr+0x26c>)
 800e232:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e236:	4961      	ldr	r1, [pc, #388]	; (800e3bc <tcp_slowtmr+0x284>)
 800e238:	485c      	ldr	r0, [pc, #368]	; (800e3ac <tcp_slowtmr+0x274>)
 800e23a:	f008 fee1 	bl	8017000 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e240:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e244:	2b0b      	cmp	r3, #11
 800e246:	d905      	bls.n	800e254 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e24c:	3301      	adds	r3, #1
 800e24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e252:	e0ed      	b.n	800e430 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e25a:	3b01      	subs	r3, #1
 800e25c:	4a58      	ldr	r2, [pc, #352]	; (800e3c0 <tcp_slowtmr+0x288>)
 800e25e:	5cd3      	ldrb	r3, [r2, r3]
 800e260:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e268:	7c7a      	ldrb	r2, [r7, #17]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d907      	bls.n	800e27e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e274:	3301      	adds	r3, #1
 800e276:	b2da      	uxtb	r2, r3
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e284:	7c7a      	ldrb	r2, [r7, #17]
 800e286:	429a      	cmp	r2, r3
 800e288:	f200 80d2 	bhi.w	800e430 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e28c:	2301      	movs	r3, #1
 800e28e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e296:	2b00      	cmp	r3, #0
 800e298:	d108      	bne.n	800e2ac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e29a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e29c:	f005 f94c 	bl	8013538 <tcp_zero_window_probe>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d014      	beq.n	800e2d0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	623b      	str	r3, [r7, #32]
 800e2aa:	e011      	b.n	800e2d0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2b6:	f004 f811 	bl	80122dc <tcp_split_unsent_seg>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d107      	bne.n	800e2d0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e2c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c2:	f004 fa91 	bl	80127e8 <tcp_output>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f000 80ac 	beq.w	800e430 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2e6:	2b06      	cmp	r3, #6
 800e2e8:	f200 80a2 	bhi.w	800e430 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e2fc:	e098      	b.n	800e430 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e304:	2b00      	cmp	r3, #0
 800e306:	db0f      	blt.n	800e328 <tcp_slowtmr+0x1f0>
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e30e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e312:	4293      	cmp	r3, r2
 800e314:	d008      	beq.n	800e328 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3301      	adds	r3, #1
 800e320:	b29b      	uxth	r3, r3
 800e322:	b21a      	sxth	r2, r3
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e334:	429a      	cmp	r2, r3
 800e336:	db7b      	blt.n	800e430 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e33a:	f004 fd47 	bl	8012dcc <tcp_rexmit_rto_prepare>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <tcp_slowtmr+0x21c>
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d171      	bne.n	800e430 <tcp_slowtmr+0x2f8>
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e350:	2b00      	cmp	r3, #0
 800e352:	d06d      	beq.n	800e430 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d03a      	beq.n	800e3d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e362:	2b0c      	cmp	r3, #12
 800e364:	bf28      	it	cs
 800e366:	230c      	movcs	r3, #12
 800e368:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e370:	10db      	asrs	r3, r3, #3
 800e372:	b21b      	sxth	r3, r3
 800e374:	461a      	mov	r2, r3
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e37c:	4413      	add	r3, r2
 800e37e:	7efa      	ldrb	r2, [r7, #27]
 800e380:	4910      	ldr	r1, [pc, #64]	; (800e3c4 <tcp_slowtmr+0x28c>)
 800e382:	5c8a      	ldrb	r2, [r1, r2]
 800e384:	4093      	lsls	r3, r2
 800e386:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e38e:	4293      	cmp	r3, r2
 800e390:	dc1a      	bgt.n	800e3c8 <tcp_slowtmr+0x290>
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	b21a      	sxth	r2, r3
 800e396:	e019      	b.n	800e3cc <tcp_slowtmr+0x294>
 800e398:	20025844 	.word	0x20025844
 800e39c:	20004ada 	.word	0x20004ada
 800e3a0:	20025840 	.word	0x20025840
 800e3a4:	080197d8 	.word	0x080197d8
 800e3a8:	08019b1c 	.word	0x08019b1c
 800e3ac:	0801981c 	.word	0x0801981c
 800e3b0:	08019b48 	.word	0x08019b48
 800e3b4:	08019b74 	.word	0x08019b74
 800e3b8:	08019ba4 	.word	0x08019ba4
 800e3bc:	08019bd8 	.word	0x08019bd8
 800e3c0:	0801b8b4 	.word	0x0801b8b4
 800e3c4:	0801b8a4 	.word	0x0801b8a4
 800e3c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	bf28      	it	cs
 800e3e8:	4613      	movcs	r3, r2
 800e3ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e3ec:	8a7b      	ldrh	r3, [r7, #18]
 800e3ee:	085b      	lsrs	r3, r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e402:	005b      	lsls	r3, r3, #1
 800e404:	b29b      	uxth	r3, r3
 800e406:	429a      	cmp	r2, r3
 800e408:	d206      	bcs.n	800e418 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	b29a      	uxth	r2, r3
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	2200      	movs	r2, #0
 800e426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e42c:	f004 fd3e 	bl	8012eac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	7d1b      	ldrb	r3, [r3, #20]
 800e434:	2b06      	cmp	r3, #6
 800e436:	d111      	bne.n	800e45c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	8b5b      	ldrh	r3, [r3, #26]
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00b      	beq.n	800e45c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e444:	4b9d      	ldr	r3, [pc, #628]	; (800e6bc <tcp_slowtmr+0x584>)
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	2b28      	cmp	r3, #40	; 0x28
 800e450:	d904      	bls.n	800e45c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e456:	3301      	adds	r3, #1
 800e458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	7a5b      	ldrb	r3, [r3, #9]
 800e460:	f003 0308 	and.w	r3, r3, #8
 800e464:	2b00      	cmp	r3, #0
 800e466:	d04c      	beq.n	800e502 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	d003      	beq.n	800e478 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e474:	2b07      	cmp	r3, #7
 800e476:	d144      	bne.n	800e502 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e478:	4b90      	ldr	r3, [pc, #576]	; (800e6bc <tcp_slowtmr+0x584>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	6a1b      	ldr	r3, [r3, #32]
 800e480:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e488:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e48c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e490:	498b      	ldr	r1, [pc, #556]	; (800e6c0 <tcp_slowtmr+0x588>)
 800e492:	fba1 1303 	umull	r1, r3, r1, r3
 800e496:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e498:	429a      	cmp	r2, r3
 800e49a:	d90a      	bls.n	800e4b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e4a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4b0:	e027      	b.n	800e502 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4b2:	4b82      	ldr	r3, [pc, #520]	; (800e6bc <tcp_slowtmr+0x584>)
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	6a1b      	ldr	r3, [r3, #32]
 800e4ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	4b7e      	ldr	r3, [pc, #504]	; (800e6c4 <tcp_slowtmr+0x58c>)
 800e4cc:	fb03 f300 	mul.w	r3, r3, r0
 800e4d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e4d2:	497b      	ldr	r1, [pc, #492]	; (800e6c0 <tcp_slowtmr+0x588>)
 800e4d4:	fba1 1303 	umull	r1, r3, r1, r3
 800e4d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d911      	bls.n	800e502 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4e0:	f004 ffea 	bl	80134b8 <tcp_keepalive>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e4ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d107      	bne.n	800e502 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e506:	2b00      	cmp	r3, #0
 800e508:	d011      	beq.n	800e52e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e50a:	4b6c      	ldr	r3, [pc, #432]	; (800e6bc <tcp_slowtmr+0x584>)
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	1ad2      	subs	r2, r2, r3
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e51a:	4619      	mov	r1, r3
 800e51c:	460b      	mov	r3, r1
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	440b      	add	r3, r1
 800e522:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e524:	429a      	cmp	r2, r3
 800e526:	d302      	bcc.n	800e52e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e52a:	f000 fea9 	bl	800f280 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	7d1b      	ldrb	r3, [r3, #20]
 800e532:	2b03      	cmp	r3, #3
 800e534:	d10b      	bne.n	800e54e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e536:	4b61      	ldr	r3, [pc, #388]	; (800e6bc <tcp_slowtmr+0x584>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53c:	6a1b      	ldr	r3, [r3, #32]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	2b28      	cmp	r3, #40	; 0x28
 800e542:	d904      	bls.n	800e54e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e548:	3301      	adds	r3, #1
 800e54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	7d1b      	ldrb	r3, [r3, #20]
 800e552:	2b09      	cmp	r3, #9
 800e554:	d10b      	bne.n	800e56e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e556:	4b59      	ldr	r3, [pc, #356]	; (800e6bc <tcp_slowtmr+0x584>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	1ad3      	subs	r3, r2, r3
 800e560:	2bf0      	cmp	r3, #240	; 0xf0
 800e562:	d904      	bls.n	800e56e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e568:	3301      	adds	r3, #1
 800e56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e572:	2b00      	cmp	r3, #0
 800e574:	d060      	beq.n	800e638 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e57c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e57e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e580:	f000 fcca 	bl	800ef18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	2b00      	cmp	r3, #0
 800e588:	d010      	beq.n	800e5ac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e58a:	4b4f      	ldr	r3, [pc, #316]	; (800e6c8 <tcp_slowtmr+0x590>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e590:	429a      	cmp	r2, r3
 800e592:	d106      	bne.n	800e5a2 <tcp_slowtmr+0x46a>
 800e594:	4b4d      	ldr	r3, [pc, #308]	; (800e6cc <tcp_slowtmr+0x594>)
 800e596:	f240 526d 	movw	r2, #1389	; 0x56d
 800e59a:	494d      	ldr	r1, [pc, #308]	; (800e6d0 <tcp_slowtmr+0x598>)
 800e59c:	484d      	ldr	r0, [pc, #308]	; (800e6d4 <tcp_slowtmr+0x59c>)
 800e59e:	f008 fd2f 	bl	8017000 <iprintf>
        prev->next = pcb->next;
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	60da      	str	r2, [r3, #12]
 800e5aa:	e00f      	b.n	800e5cc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e5ac:	4b46      	ldr	r3, [pc, #280]	; (800e6c8 <tcp_slowtmr+0x590>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d006      	beq.n	800e5c4 <tcp_slowtmr+0x48c>
 800e5b6:	4b45      	ldr	r3, [pc, #276]	; (800e6cc <tcp_slowtmr+0x594>)
 800e5b8:	f240 5271 	movw	r2, #1393	; 0x571
 800e5bc:	4946      	ldr	r1, [pc, #280]	; (800e6d8 <tcp_slowtmr+0x5a0>)
 800e5be:	4845      	ldr	r0, [pc, #276]	; (800e6d4 <tcp_slowtmr+0x59c>)
 800e5c0:	f008 fd1e 	bl	8017000 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	4a3f      	ldr	r2, [pc, #252]	; (800e6c8 <tcp_slowtmr+0x590>)
 800e5ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d013      	beq.n	800e5fc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5e4:	8ad2      	ldrh	r2, [r2, #22]
 800e5e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5e8:	8b09      	ldrh	r1, [r1, #24]
 800e5ea:	9102      	str	r1, [sp, #8]
 800e5ec:	9201      	str	r2, [sp, #4]
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4622      	mov	r2, r4
 800e5f4:	4601      	mov	r1, r0
 800e5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f8:	f004 feaa 	bl	8013350 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	7d1b      	ldrb	r3, [r3, #20]
 800e606:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e612:	6838      	ldr	r0, [r7, #0]
 800e614:	f7fe ffa0 	bl	800d558 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e618:	4b30      	ldr	r3, [pc, #192]	; (800e6dc <tcp_slowtmr+0x5a4>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d004      	beq.n	800e62e <tcp_slowtmr+0x4f6>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f06f 010c 	mvn.w	r1, #12
 800e62a:	68b8      	ldr	r0, [r7, #8]
 800e62c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e62e:	4b2b      	ldr	r3, [pc, #172]	; (800e6dc <tcp_slowtmr+0x5a4>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d037      	beq.n	800e6a6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e636:	e590      	b.n	800e15a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e644:	7f1b      	ldrb	r3, [r3, #28]
 800e646:	3301      	adds	r3, #1
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	7f1a      	ldrb	r2, [r3, #28]
 800e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e654:	7f5b      	ldrb	r3, [r3, #29]
 800e656:	429a      	cmp	r2, r3
 800e658:	d325      	bcc.n	800e6a6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	2200      	movs	r2, #0
 800e65e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e660:	4b1e      	ldr	r3, [pc, #120]	; (800e6dc <tcp_slowtmr+0x5a4>)
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <tcp_slowtmr+0x550>
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e678:	6912      	ldr	r2, [r2, #16]
 800e67a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e67c:	4610      	mov	r0, r2
 800e67e:	4798      	blx	r3
 800e680:	4603      	mov	r3, r0
 800e682:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e686:	e002      	b.n	800e68e <tcp_slowtmr+0x556>
 800e688:	2300      	movs	r3, #0
 800e68a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e68e:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <tcp_slowtmr+0x5a4>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d000      	beq.n	800e698 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e696:	e560      	b.n	800e15a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e698:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d102      	bne.n	800e6a6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a2:	f004 f8a1 	bl	80127e8 <tcp_output>
  while (pcb != NULL) {
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f47f ad5c 	bne.w	800e166 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e6b2:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <tcp_slowtmr+0x5a8>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e6b8:	e067      	b.n	800e78a <tcp_slowtmr+0x652>
 800e6ba:	bf00      	nop
 800e6bc:	20025844 	.word	0x20025844
 800e6c0:	10624dd3 	.word	0x10624dd3
 800e6c4:	000124f8 	.word	0x000124f8
 800e6c8:	20025840 	.word	0x20025840
 800e6cc:	080197d8 	.word	0x080197d8
 800e6d0:	08019c10 	.word	0x08019c10
 800e6d4:	0801981c 	.word	0x0801981c
 800e6d8:	08019c3c 	.word	0x08019c3c
 800e6dc:	2002583c 	.word	0x2002583c
 800e6e0:	20025850 	.word	0x20025850
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	2b0a      	cmp	r3, #10
 800e6ea:	d006      	beq.n	800e6fa <tcp_slowtmr+0x5c2>
 800e6ec:	4b2b      	ldr	r3, [pc, #172]	; (800e79c <tcp_slowtmr+0x664>)
 800e6ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e6f2:	492b      	ldr	r1, [pc, #172]	; (800e7a0 <tcp_slowtmr+0x668>)
 800e6f4:	482b      	ldr	r0, [pc, #172]	; (800e7a4 <tcp_slowtmr+0x66c>)
 800e6f6:	f008 fc83 	bl	8017000 <iprintf>
    pcb_remove = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e700:	4b29      	ldr	r3, [pc, #164]	; (800e7a8 <tcp_slowtmr+0x670>)
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	6a1b      	ldr	r3, [r3, #32]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	2bf0      	cmp	r3, #240	; 0xf0
 800e70c:	d904      	bls.n	800e718 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e712:	3301      	adds	r3, #1
 800e714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d02f      	beq.n	800e780 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e722:	f000 fbf9 	bl	800ef18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d010      	beq.n	800e74e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e72c:	4b1f      	ldr	r3, [pc, #124]	; (800e7ac <tcp_slowtmr+0x674>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e732:	429a      	cmp	r2, r3
 800e734:	d106      	bne.n	800e744 <tcp_slowtmr+0x60c>
 800e736:	4b19      	ldr	r3, [pc, #100]	; (800e79c <tcp_slowtmr+0x664>)
 800e738:	f240 52af 	movw	r2, #1455	; 0x5af
 800e73c:	491c      	ldr	r1, [pc, #112]	; (800e7b0 <tcp_slowtmr+0x678>)
 800e73e:	4819      	ldr	r0, [pc, #100]	; (800e7a4 <tcp_slowtmr+0x66c>)
 800e740:	f008 fc5e 	bl	8017000 <iprintf>
        prev->next = pcb->next;
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	68da      	ldr	r2, [r3, #12]
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	60da      	str	r2, [r3, #12]
 800e74c:	e00f      	b.n	800e76e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e74e:	4b17      	ldr	r3, [pc, #92]	; (800e7ac <tcp_slowtmr+0x674>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e754:	429a      	cmp	r2, r3
 800e756:	d006      	beq.n	800e766 <tcp_slowtmr+0x62e>
 800e758:	4b10      	ldr	r3, [pc, #64]	; (800e79c <tcp_slowtmr+0x664>)
 800e75a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e75e:	4915      	ldr	r1, [pc, #84]	; (800e7b4 <tcp_slowtmr+0x67c>)
 800e760:	4810      	ldr	r0, [pc, #64]	; (800e7a4 <tcp_slowtmr+0x66c>)
 800e762:	f008 fc4d 	bl	8017000 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	4a10      	ldr	r2, [pc, #64]	; (800e7ac <tcp_slowtmr+0x674>)
 800e76c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e778:	69f8      	ldr	r0, [r7, #28]
 800e77a:	f7fe feed 	bl	800d558 <tcp_free>
 800e77e:	e004      	b.n	800e78a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1a9      	bne.n	800e6e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	3730      	adds	r7, #48	; 0x30
 800e796:	46bd      	mov	sp, r7
 800e798:	bdb0      	pop	{r4, r5, r7, pc}
 800e79a:	bf00      	nop
 800e79c:	080197d8 	.word	0x080197d8
 800e7a0:	08019c68 	.word	0x08019c68
 800e7a4:	0801981c 	.word	0x0801981c
 800e7a8:	20025844 	.word	0x20025844
 800e7ac:	20025850 	.word	0x20025850
 800e7b0:	08019c98 	.word	0x08019c98
 800e7b4:	08019cc0 	.word	0x08019cc0

0800e7b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e7be:	4b2d      	ldr	r3, [pc, #180]	; (800e874 <tcp_fasttmr+0xbc>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	4b2b      	ldr	r3, [pc, #172]	; (800e874 <tcp_fasttmr+0xbc>)
 800e7c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e7ca:	4b2b      	ldr	r3, [pc, #172]	; (800e878 <tcp_fasttmr+0xc0>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e7d0:	e048      	b.n	800e864 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	7f9a      	ldrb	r2, [r3, #30]
 800e7d6:	4b27      	ldr	r3, [pc, #156]	; (800e874 <tcp_fasttmr+0xbc>)
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d03f      	beq.n	800e85e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e7de:	4b25      	ldr	r3, [pc, #148]	; (800e874 <tcp_fasttmr+0xbc>)
 800e7e0:	781a      	ldrb	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ea:	f003 0301 	and.w	r3, r3, #1
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d010      	beq.n	800e814 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	8b5b      	ldrh	r3, [r3, #26]
 800e7f6:	f043 0302 	orr.w	r3, r3, #2
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f003 fff1 	bl	80127e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8b5b      	ldrh	r3, [r3, #26]
 800e80a:	f023 0303 	bic.w	r3, r3, #3
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f003 0308 	and.w	r3, r3, #8
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d009      	beq.n	800e834 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	8b5b      	ldrh	r3, [r3, #26]
 800e824:	f023 0308 	bic.w	r3, r3, #8
 800e828:	b29a      	uxth	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff f826 	bl	800d880 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00a      	beq.n	800e858 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e842:	4b0e      	ldr	r3, [pc, #56]	; (800e87c <tcp_fasttmr+0xc4>)
 800e844:	2200      	movs	r2, #0
 800e846:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f819 	bl	800e880 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e84e:	4b0b      	ldr	r3, [pc, #44]	; (800e87c <tcp_fasttmr+0xc4>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d000      	beq.n	800e858 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e856:	e7b8      	b.n	800e7ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e002      	b.n	800e864 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d1b3      	bne.n	800e7d2 <tcp_fasttmr+0x1a>
    }
  }
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20004ada 	.word	0x20004ada
 800e878:	20025840 	.word	0x20025840
 800e87c:	2002583c 	.word	0x2002583c

0800e880 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e880:	b590      	push	{r4, r7, lr}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d109      	bne.n	800e8a2 <tcp_process_refused_data+0x22>
 800e88e:	4b37      	ldr	r3, [pc, #220]	; (800e96c <tcp_process_refused_data+0xec>)
 800e890:	f240 6209 	movw	r2, #1545	; 0x609
 800e894:	4936      	ldr	r1, [pc, #216]	; (800e970 <tcp_process_refused_data+0xf0>)
 800e896:	4837      	ldr	r0, [pc, #220]	; (800e974 <tcp_process_refused_data+0xf4>)
 800e898:	f008 fbb2 	bl	8017000 <iprintf>
 800e89c:	f06f 030f 	mvn.w	r3, #15
 800e8a0:	e060      	b.n	800e964 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8a6:	7b5b      	ldrb	r3, [r3, #13]
 800e8a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00b      	beq.n	800e8d8 <tcp_process_refused_data+0x58>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6918      	ldr	r0, [r3, #16]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	47a0      	blx	r4
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	73fb      	strb	r3, [r7, #15]
 800e8d6:	e007      	b.n	800e8e8 <tcp_process_refused_data+0x68>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f000 f8a4 	bl	800ea2c <tcp_recv_null>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d12a      	bne.n	800e946 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e8f0:	7bbb      	ldrb	r3, [r7, #14]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d033      	beq.n	800e962 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e902:	d005      	beq.n	800e910 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e908:	3301      	adds	r3, #1
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00b      	beq.n	800e932 <tcp_process_refused_data+0xb2>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6918      	ldr	r0, [r3, #16]
 800e924:	2300      	movs	r3, #0
 800e926:	2200      	movs	r2, #0
 800e928:	6879      	ldr	r1, [r7, #4]
 800e92a:	47a0      	blx	r4
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]
 800e930:	e001      	b.n	800e936 <tcp_process_refused_data+0xb6>
 800e932:	2300      	movs	r3, #0
 800e934:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e93a:	f113 0f0d 	cmn.w	r3, #13
 800e93e:	d110      	bne.n	800e962 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e940:	f06f 030c 	mvn.w	r3, #12
 800e944:	e00e      	b.n	800e964 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e94a:	f113 0f0d 	cmn.w	r3, #13
 800e94e:	d102      	bne.n	800e956 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e950:	f06f 030c 	mvn.w	r3, #12
 800e954:	e006      	b.n	800e964 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e95c:	f06f 0304 	mvn.w	r3, #4
 800e960:	e000      	b.n	800e964 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd90      	pop	{r4, r7, pc}
 800e96c:	080197d8 	.word	0x080197d8
 800e970:	08019ce8 	.word	0x08019ce8
 800e974:	0801981c 	.word	0x0801981c

0800e978 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e980:	e007      	b.n	800e992 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f80a 	bl	800e9a2 <tcp_seg_free>
    seg = next;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1f4      	bne.n	800e982 <tcp_segs_free+0xa>
  }
}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00c      	beq.n	800e9ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fb1f 	bl	800d000 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e9c2:	6879      	ldr	r1, [r7, #4]
 800e9c4:	2003      	movs	r0, #3
 800e9c6:	f7fd fc73 	bl	800c2b0 <memp_free>
  }
}
 800e9ca:	bf00      	nop
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
	...

0800e9d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <tcp_seg_copy+0x1c>
 800e9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ea20 <tcp_seg_copy+0x4c>)
 800e9e4:	f240 6282 	movw	r2, #1666	; 0x682
 800e9e8:	490e      	ldr	r1, [pc, #56]	; (800ea24 <tcp_seg_copy+0x50>)
 800e9ea:	480f      	ldr	r0, [pc, #60]	; (800ea28 <tcp_seg_copy+0x54>)
 800e9ec:	f008 fb08 	bl	8017000 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e9f0:	2003      	movs	r0, #3
 800e9f2:	f7fd fc0b 	bl	800c20c <memp_malloc>
 800e9f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <tcp_seg_copy+0x2e>
    return NULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e00a      	b.n	800ea18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ea02:	2210      	movs	r2, #16
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f008 fa20 	bl	8016e4c <memcpy>
  pbuf_ref(cseg->p);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe fb9b 	bl	800d14c <pbuf_ref>
  return cseg;
 800ea16:	68fb      	ldr	r3, [r7, #12]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	080197d8 	.word	0x080197d8
 800ea24:	08019d2c 	.word	0x08019d2c
 800ea28:	0801981c 	.word	0x0801981c

0800ea2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d109      	bne.n	800ea54 <tcp_recv_null+0x28>
 800ea40:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <tcp_recv_null+0x60>)
 800ea42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea46:	4912      	ldr	r1, [pc, #72]	; (800ea90 <tcp_recv_null+0x64>)
 800ea48:	4812      	ldr	r0, [pc, #72]	; (800ea94 <tcp_recv_null+0x68>)
 800ea4a:	f008 fad9 	bl	8017000 <iprintf>
 800ea4e:	f06f 030f 	mvn.w	r3, #15
 800ea52:	e016      	b.n	800ea82 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d009      	beq.n	800ea6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	891b      	ldrh	r3, [r3, #8]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	68b8      	ldr	r0, [r7, #8]
 800ea62:	f7ff f9bb 	bl	800dddc <tcp_recved>
    pbuf_free(p);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7fe faca 	bl	800d000 <pbuf_free>
 800ea6c:	e008      	b.n	800ea80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d104      	bne.n	800ea80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea76:	68b8      	ldr	r0, [r7, #8]
 800ea78:	f7fe ff6c 	bl	800d954 <tcp_close>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	e000      	b.n	800ea82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	080197d8 	.word	0x080197d8
 800ea90:	08019d48 	.word	0x08019d48
 800ea94:	0801981c 	.word	0x0801981c

0800ea98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eaa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	db01      	blt.n	800eaae <tcp_kill_prio+0x16>
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	e000      	b.n	800eab0 <tcp_kill_prio+0x18>
 800eaae:	237f      	movs	r3, #127	; 0x7f
 800eab0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eab2:	7afb      	ldrb	r3, [r7, #11]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d034      	beq.n	800eb22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eab8:	7afb      	ldrb	r3, [r7, #11]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eac2:	2300      	movs	r3, #0
 800eac4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eac6:	4b19      	ldr	r3, [pc, #100]	; (800eb2c <tcp_kill_prio+0x94>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	617b      	str	r3, [r7, #20]
 800eacc:	e01f      	b.n	800eb0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	7d5b      	ldrb	r3, [r3, #21]
 800ead2:	7afa      	ldrb	r2, [r7, #11]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d80c      	bhi.n	800eaf2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eadc:	7afa      	ldrb	r2, [r7, #11]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d112      	bne.n	800eb08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eae2:	4b13      	ldr	r3, [pc, #76]	; (800eb30 <tcp_kill_prio+0x98>)
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d80a      	bhi.n	800eb08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eaf2:	4b0f      	ldr	r3, [pc, #60]	; (800eb30 <tcp_kill_prio+0x98>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	7d5b      	ldrb	r3, [r3, #21]
 800eb06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	617b      	str	r3, [r7, #20]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1dc      	bne.n	800eace <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d004      	beq.n	800eb24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb1a:	6938      	ldr	r0, [r7, #16]
 800eb1c:	f7ff f860 	bl	800dbe0 <tcp_abort>
 800eb20:	e000      	b.n	800eb24 <tcp_kill_prio+0x8c>
    return;
 800eb22:	bf00      	nop
  }
}
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20025840 	.word	0x20025840
 800eb30:	20025844 	.word	0x20025844

0800eb34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb3e:	79fb      	ldrb	r3, [r7, #7]
 800eb40:	2b08      	cmp	r3, #8
 800eb42:	d009      	beq.n	800eb58 <tcp_kill_state+0x24>
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	2b09      	cmp	r3, #9
 800eb48:	d006      	beq.n	800eb58 <tcp_kill_state+0x24>
 800eb4a:	4b1a      	ldr	r3, [pc, #104]	; (800ebb4 <tcp_kill_state+0x80>)
 800eb4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb50:	4919      	ldr	r1, [pc, #100]	; (800ebb8 <tcp_kill_state+0x84>)
 800eb52:	481a      	ldr	r0, [pc, #104]	; (800ebbc <tcp_kill_state+0x88>)
 800eb54:	f008 fa54 	bl	8017000 <iprintf>

  inactivity = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb60:	4b17      	ldr	r3, [pc, #92]	; (800ebc0 <tcp_kill_state+0x8c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	617b      	str	r3, [r7, #20]
 800eb66:	e017      	b.n	800eb98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	7d1b      	ldrb	r3, [r3, #20]
 800eb6c:	79fa      	ldrb	r2, [r7, #7]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d10f      	bne.n	800eb92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb72:	4b14      	ldr	r3, [pc, #80]	; (800ebc4 <tcp_kill_state+0x90>)
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	6a1b      	ldr	r3, [r3, #32]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d807      	bhi.n	800eb92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eb82:	4b10      	ldr	r3, [pc, #64]	; (800ebc4 <tcp_kill_state+0x90>)
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e4      	bne.n	800eb68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d003      	beq.n	800ebac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eba4:	2100      	movs	r1, #0
 800eba6:	6938      	ldr	r0, [r7, #16]
 800eba8:	f7fe ff5c 	bl	800da64 <tcp_abandon>
  }
}
 800ebac:	bf00      	nop
 800ebae:	3718      	adds	r7, #24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	080197d8 	.word	0x080197d8
 800ebb8:	08019d64 	.word	0x08019d64
 800ebbc:	0801981c 	.word	0x0801981c
 800ebc0:	20025840 	.word	0x20025840
 800ebc4:	20025844 	.word	0x20025844

0800ebc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd6:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <tcp_kill_timewait+0x58>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	e012      	b.n	800ec04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ebde:	4b11      	ldr	r3, [pc, #68]	; (800ec24 <tcp_kill_timewait+0x5c>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d807      	bhi.n	800ebfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ebee:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <tcp_kill_timewait+0x5c>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6a1b      	ldr	r3, [r3, #32]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	60fb      	str	r3, [r7, #12]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1e9      	bne.n	800ebde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec10:	68b8      	ldr	r0, [r7, #8]
 800ec12:	f7fe ffe5 	bl	800dbe0 <tcp_abort>
  }
}
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	20025850 	.word	0x20025850
 800ec24:	20025844 	.word	0x20025844

0800ec28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec2e:	4b10      	ldr	r3, [pc, #64]	; (800ec70 <tcp_handle_closepend+0x48>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec34:	e014      	b.n	800ec60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	8b5b      	ldrh	r3, [r3, #26]
 800ec40:	f003 0308 	and.w	r3, r3, #8
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d009      	beq.n	800ec5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	8b5b      	ldrh	r3, [r3, #26]
 800ec4c:	f023 0308 	bic.w	r3, r3, #8
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7fe fe12 	bl	800d880 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e7      	bne.n	800ec36 <tcp_handle_closepend+0xe>
  }
}
 800ec66:	bf00      	nop
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	20025840 	.word	0x20025840

0800ec74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec7e:	2001      	movs	r0, #1
 800ec80:	f7fd fac4 	bl	800c20c <memp_malloc>
 800ec84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d126      	bne.n	800ecda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ec8c:	f7ff ffcc 	bl	800ec28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec90:	f7ff ff9a 	bl	800ebc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec94:	2001      	movs	r0, #1
 800ec96:	f7fd fab9 	bl	800c20c <memp_malloc>
 800ec9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d11b      	bne.n	800ecda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eca2:	2009      	movs	r0, #9
 800eca4:	f7ff ff46 	bl	800eb34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca8:	2001      	movs	r0, #1
 800ecaa:	f7fd faaf 	bl	800c20c <memp_malloc>
 800ecae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d111      	bne.n	800ecda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ecb6:	2008      	movs	r0, #8
 800ecb8:	f7ff ff3c 	bl	800eb34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecbc:	2001      	movs	r0, #1
 800ecbe:	f7fd faa5 	bl	800c20c <memp_malloc>
 800ecc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d107      	bne.n	800ecda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ecca:	79fb      	ldrb	r3, [r7, #7]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7ff fee3 	bl	800ea98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f7fd fa9a 	bl	800c20c <memp_malloc>
 800ecd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d03f      	beq.n	800ed60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ece0:	229c      	movs	r2, #156	; 0x9c
 800ece2:	2100      	movs	r1, #0
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f008 f8d9 	bl	8016e9c <memset>
    pcb->prio = prio;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	79fa      	ldrb	r2, [r7, #7]
 800ecee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ecf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	22ff      	movs	r2, #255	; 0xff
 800ed0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2206      	movs	r2, #6
 800ed1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2206      	movs	r2, #6
 800ed24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed36:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <tcp_alloc+0xf8>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed3e:	4b0c      	ldr	r3, [pc, #48]	; (800ed70 <tcp_alloc+0xfc>)
 800ed40:	781a      	ldrb	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ed4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4a08      	ldr	r2, [pc, #32]	; (800ed74 <tcp_alloc+0x100>)
 800ed54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	4a07      	ldr	r2, [pc, #28]	; (800ed78 <tcp_alloc+0x104>)
 800ed5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed60:	68fb      	ldr	r3, [r7, #12]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	20025844 	.word	0x20025844
 800ed70:	20004ada 	.word	0x20004ada
 800ed74:	0800ea2d 	.word	0x0800ea2d
 800ed78:	006ddd00 	.word	0x006ddd00

0800ed7c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ed86:	2040      	movs	r0, #64	; 0x40
 800ed88:	f7ff ff74 	bl	800ec74 <tcp_alloc>
 800ed8c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	683a      	ldr	r2, [r7, #0]
 800edac:	611a      	str	r2, [r3, #16]
  }
}
 800edae:	bf00      	nop
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
	...

0800edbc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00e      	beq.n	800edea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7d1b      	ldrb	r3, [r3, #20]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d106      	bne.n	800ede2 <tcp_recv+0x26>
 800edd4:	4b07      	ldr	r3, [pc, #28]	; (800edf4 <tcp_recv+0x38>)
 800edd6:	f240 72df 	movw	r2, #2015	; 0x7df
 800edda:	4907      	ldr	r1, [pc, #28]	; (800edf8 <tcp_recv+0x3c>)
 800eddc:	4807      	ldr	r0, [pc, #28]	; (800edfc <tcp_recv+0x40>)
 800edde:	f008 f90f 	bl	8017000 <iprintf>
    pcb->recv = recv;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800edea:	bf00      	nop
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	080197d8 	.word	0x080197d8
 800edf8:	08019d74 	.word	0x08019d74
 800edfc:	0801981c 	.word	0x0801981c

0800ee00 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00e      	beq.n	800ee2e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d106      	bne.n	800ee26 <tcp_sent+0x26>
 800ee18:	4b07      	ldr	r3, [pc, #28]	; (800ee38 <tcp_sent+0x38>)
 800ee1a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ee1e:	4907      	ldr	r1, [pc, #28]	; (800ee3c <tcp_sent+0x3c>)
 800ee20:	4807      	ldr	r0, [pc, #28]	; (800ee40 <tcp_sent+0x40>)
 800ee22:	f008 f8ed 	bl	8017000 <iprintf>
    pcb->sent = sent;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	080197d8 	.word	0x080197d8
 800ee3c:	08019d9c 	.word	0x08019d9c
 800ee40:	0801981c 	.word	0x0801981c

0800ee44 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7d1b      	ldrb	r3, [r3, #20]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d106      	bne.n	800ee6a <tcp_err+0x26>
 800ee5c:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <tcp_err+0x38>)
 800ee5e:	f640 020d 	movw	r2, #2061	; 0x80d
 800ee62:	4907      	ldr	r1, [pc, #28]	; (800ee80 <tcp_err+0x3c>)
 800ee64:	4807      	ldr	r0, [pc, #28]	; (800ee84 <tcp_err+0x40>)
 800ee66:	f008 f8cb 	bl	8017000 <iprintf>
    pcb->errf = err;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	080197d8 	.word	0x080197d8
 800ee80:	08019dc4 	.word	0x08019dc4
 800ee84:	0801981c 	.word	0x0801981c

0800ee88 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d008      	beq.n	800eeaa <tcp_accept+0x22>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d104      	bne.n	800eeaa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	619a      	str	r2, [r3, #24]
  }
}
 800eeaa:	bf00      	nop
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
	...

0800eeb8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d107      	bne.n	800eedc <tcp_poll+0x24>
 800eecc:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <tcp_poll+0x50>)
 800eece:	f640 023d 	movw	r2, #2109	; 0x83d
 800eed2:	490e      	ldr	r1, [pc, #56]	; (800ef0c <tcp_poll+0x54>)
 800eed4:	480e      	ldr	r0, [pc, #56]	; (800ef10 <tcp_poll+0x58>)
 800eed6:	f008 f893 	bl	8017000 <iprintf>
 800eeda:	e011      	b.n	800ef00 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d106      	bne.n	800eef2 <tcp_poll+0x3a>
 800eee4:	4b08      	ldr	r3, [pc, #32]	; (800ef08 <tcp_poll+0x50>)
 800eee6:	f640 023e 	movw	r2, #2110	; 0x83e
 800eeea:	490a      	ldr	r1, [pc, #40]	; (800ef14 <tcp_poll+0x5c>)
 800eeec:	4808      	ldr	r0, [pc, #32]	; (800ef10 <tcp_poll+0x58>)
 800eeee:	f008 f887 	bl	8017000 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	79fa      	ldrb	r2, [r7, #7]
 800eefe:	775a      	strb	r2, [r3, #29]
}
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	080197d8 	.word	0x080197d8
 800ef0c:	08019dec 	.word	0x08019dec
 800ef10:	0801981c 	.word	0x0801981c
 800ef14:	08019e04 	.word	0x08019e04

0800ef18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d107      	bne.n	800ef36 <tcp_pcb_purge+0x1e>
 800ef26:	4b21      	ldr	r3, [pc, #132]	; (800efac <tcp_pcb_purge+0x94>)
 800ef28:	f640 0251 	movw	r2, #2129	; 0x851
 800ef2c:	4920      	ldr	r1, [pc, #128]	; (800efb0 <tcp_pcb_purge+0x98>)
 800ef2e:	4821      	ldr	r0, [pc, #132]	; (800efb4 <tcp_pcb_purge+0x9c>)
 800ef30:	f008 f866 	bl	8017000 <iprintf>
 800ef34:	e037      	b.n	800efa6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	7d1b      	ldrb	r3, [r3, #20]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d033      	beq.n	800efa6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef42:	2b0a      	cmp	r3, #10
 800ef44:	d02f      	beq.n	800efa6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d02b      	beq.n	800efa6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe f850 	bl	800d000 <pbuf_free>
      pcb->refused_data = NULL;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d002      	beq.n	800ef74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f986 	bl	800f280 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fcf9 	bl	800e978 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff fcf4 	bl	800e978 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	66da      	str	r2, [r3, #108]	; 0x6c
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	080197d8 	.word	0x080197d8
 800efb0:	08019e24 	.word	0x08019e24
 800efb4:	0801981c 	.word	0x0801981c

0800efb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <tcp_pcb_remove+0x1e>
 800efc8:	4b3e      	ldr	r3, [pc, #248]	; (800f0c4 <tcp_pcb_remove+0x10c>)
 800efca:	f640 0283 	movw	r2, #2179	; 0x883
 800efce:	493e      	ldr	r1, [pc, #248]	; (800f0c8 <tcp_pcb_remove+0x110>)
 800efd0:	483e      	ldr	r0, [pc, #248]	; (800f0cc <tcp_pcb_remove+0x114>)
 800efd2:	f008 f815 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <tcp_pcb_remove+0x32>
 800efdc:	4b39      	ldr	r3, [pc, #228]	; (800f0c4 <tcp_pcb_remove+0x10c>)
 800efde:	f640 0284 	movw	r2, #2180	; 0x884
 800efe2:	493b      	ldr	r1, [pc, #236]	; (800f0d0 <tcp_pcb_remove+0x118>)
 800efe4:	4839      	ldr	r0, [pc, #228]	; (800f0cc <tcp_pcb_remove+0x114>)
 800efe6:	f008 f80b 	bl	8017000 <iprintf>

  TCP_RMV(pcblist, pcb);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d105      	bne.n	800f000 <tcp_pcb_remove+0x48>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68da      	ldr	r2, [r3, #12]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	e013      	b.n	800f028 <tcp_pcb_remove+0x70>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	60fb      	str	r3, [r7, #12]
 800f006:	e00c      	b.n	800f022 <tcp_pcb_remove+0x6a>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	683a      	ldr	r2, [r7, #0]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d104      	bne.n	800f01c <tcp_pcb_remove+0x64>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	68da      	ldr	r2, [r3, #12]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	60da      	str	r2, [r3, #12]
 800f01a:	e005      	b.n	800f028 <tcp_pcb_remove+0x70>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1ef      	bne.n	800f008 <tcp_pcb_remove+0x50>
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	2200      	movs	r2, #0
 800f02c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f02e:	6838      	ldr	r0, [r7, #0]
 800f030:	f7ff ff72 	bl	800ef18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	7d1b      	ldrb	r3, [r3, #20]
 800f038:	2b0a      	cmp	r3, #10
 800f03a:	d013      	beq.n	800f064 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f040:	2b01      	cmp	r3, #1
 800f042:	d00f      	beq.n	800f064 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	8b5b      	ldrh	r3, [r3, #26]
 800f048:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d009      	beq.n	800f064 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	8b5b      	ldrh	r3, [r3, #26]
 800f054:	f043 0302 	orr.w	r3, r3, #2
 800f058:	b29a      	uxth	r2, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f05e:	6838      	ldr	r0, [r7, #0]
 800f060:	f003 fbc2 	bl	80127e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d020      	beq.n	800f0ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f070:	2b00      	cmp	r3, #0
 800f072:	d006      	beq.n	800f082 <tcp_pcb_remove+0xca>
 800f074:	4b13      	ldr	r3, [pc, #76]	; (800f0c4 <tcp_pcb_remove+0x10c>)
 800f076:	f640 0293 	movw	r2, #2195	; 0x893
 800f07a:	4916      	ldr	r1, [pc, #88]	; (800f0d4 <tcp_pcb_remove+0x11c>)
 800f07c:	4813      	ldr	r0, [pc, #76]	; (800f0cc <tcp_pcb_remove+0x114>)
 800f07e:	f007 ffbf 	bl	8017000 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f086:	2b00      	cmp	r3, #0
 800f088:	d006      	beq.n	800f098 <tcp_pcb_remove+0xe0>
 800f08a:	4b0e      	ldr	r3, [pc, #56]	; (800f0c4 <tcp_pcb_remove+0x10c>)
 800f08c:	f640 0294 	movw	r2, #2196	; 0x894
 800f090:	4911      	ldr	r1, [pc, #68]	; (800f0d8 <tcp_pcb_remove+0x120>)
 800f092:	480e      	ldr	r0, [pc, #56]	; (800f0cc <tcp_pcb_remove+0x114>)
 800f094:	f007 ffb4 	bl	8017000 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d006      	beq.n	800f0ae <tcp_pcb_remove+0xf6>
 800f0a0:	4b08      	ldr	r3, [pc, #32]	; (800f0c4 <tcp_pcb_remove+0x10c>)
 800f0a2:	f640 0296 	movw	r2, #2198	; 0x896
 800f0a6:	490d      	ldr	r1, [pc, #52]	; (800f0dc <tcp_pcb_remove+0x124>)
 800f0a8:	4808      	ldr	r0, [pc, #32]	; (800f0cc <tcp_pcb_remove+0x114>)
 800f0aa:	f007 ffa9 	bl	8017000 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	080197d8 	.word	0x080197d8
 800f0c8:	08019e40 	.word	0x08019e40
 800f0cc:	0801981c 	.word	0x0801981c
 800f0d0:	08019e5c 	.word	0x08019e5c
 800f0d4:	08019e7c 	.word	0x08019e7c
 800f0d8:	08019e94 	.word	0x08019e94
 800f0dc:	08019eb0 	.word	0x08019eb0

0800f0e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <tcp_next_iss+0x1c>
 800f0ee:	4b0a      	ldr	r3, [pc, #40]	; (800f118 <tcp_next_iss+0x38>)
 800f0f0:	f640 02af 	movw	r2, #2223	; 0x8af
 800f0f4:	4909      	ldr	r1, [pc, #36]	; (800f11c <tcp_next_iss+0x3c>)
 800f0f6:	480a      	ldr	r0, [pc, #40]	; (800f120 <tcp_next_iss+0x40>)
 800f0f8:	f007 ff82 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f0fc:	4b09      	ldr	r3, [pc, #36]	; (800f124 <tcp_next_iss+0x44>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	4b09      	ldr	r3, [pc, #36]	; (800f128 <tcp_next_iss+0x48>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4413      	add	r3, r2
 800f106:	4a07      	ldr	r2, [pc, #28]	; (800f124 <tcp_next_iss+0x44>)
 800f108:	6013      	str	r3, [r2, #0]
  return iss;
 800f10a:	4b06      	ldr	r3, [pc, #24]	; (800f124 <tcp_next_iss+0x44>)
 800f10c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	080197d8 	.word	0x080197d8
 800f11c:	08019ec8 	.word	0x08019ec8
 800f120:	0801981c 	.word	0x0801981c
 800f124:	20000014 	.word	0x20000014
 800f128:	20025844 	.word	0x20025844

0800f12c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <tcp_eff_send_mss_netif+0x22>
 800f140:	4b14      	ldr	r3, [pc, #80]	; (800f194 <tcp_eff_send_mss_netif+0x68>)
 800f142:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f146:	4914      	ldr	r1, [pc, #80]	; (800f198 <tcp_eff_send_mss_netif+0x6c>)
 800f148:	4814      	ldr	r0, [pc, #80]	; (800f19c <tcp_eff_send_mss_netif+0x70>)
 800f14a:	f007 ff59 	bl	8017000 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f154:	89fb      	ldrh	r3, [r7, #14]
 800f156:	e019      	b.n	800f18c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f15c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f15e:	8afb      	ldrh	r3, [r7, #22]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d012      	beq.n	800f18a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f164:	2328      	movs	r3, #40	; 0x28
 800f166:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f168:	8afa      	ldrh	r2, [r7, #22]
 800f16a:	8abb      	ldrh	r3, [r7, #20]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d904      	bls.n	800f17a <tcp_eff_send_mss_netif+0x4e>
 800f170:	8afa      	ldrh	r2, [r7, #22]
 800f172:	8abb      	ldrh	r3, [r7, #20]
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	b29b      	uxth	r3, r3
 800f178:	e000      	b.n	800f17c <tcp_eff_send_mss_netif+0x50>
 800f17a:	2300      	movs	r3, #0
 800f17c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f17e:	8a7a      	ldrh	r2, [r7, #18]
 800f180:	89fb      	ldrh	r3, [r7, #14]
 800f182:	4293      	cmp	r3, r2
 800f184:	bf28      	it	cs
 800f186:	4613      	movcs	r3, r2
 800f188:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f18a:	89fb      	ldrh	r3, [r7, #14]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	080197d8 	.word	0x080197d8
 800f198:	08019ee4 	.word	0x08019ee4
 800f19c:	0801981c 	.word	0x0801981c

0800f1a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d119      	bne.n	800f1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f1b4:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f1b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f1ba:	4910      	ldr	r1, [pc, #64]	; (800f1fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f1bc:	4810      	ldr	r0, [pc, #64]	; (800f200 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f1be:	f007 ff1f 	bl	8017000 <iprintf>

  while (pcb != NULL) {
 800f1c2:	e011      	b.n	800f1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d108      	bne.n	800f1e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f7fe fd02 	bl	800dbe0 <tcp_abort>
      pcb = next;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	60fb      	str	r3, [r7, #12]
 800f1e0:	e002      	b.n	800f1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1ea      	bne.n	800f1c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	080197d8 	.word	0x080197d8
 800f1fc:	08019f0c 	.word	0x08019f0c
 800f200:	0801981c 	.word	0x0801981c

0800f204 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d02a      	beq.n	800f26a <tcp_netif_ip_addr_changed+0x66>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d026      	beq.n	800f26a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f21c:	4b15      	ldr	r3, [pc, #84]	; (800f274 <tcp_netif_ip_addr_changed+0x70>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4619      	mov	r1, r3
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff ffbc 	bl	800f1a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f228:	4b13      	ldr	r3, [pc, #76]	; (800f278 <tcp_netif_ip_addr_changed+0x74>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7ff ffb6 	bl	800f1a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d017      	beq.n	800f26a <tcp_netif_ip_addr_changed+0x66>
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d013      	beq.n	800f26a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f242:	4b0e      	ldr	r3, [pc, #56]	; (800f27c <tcp_netif_ip_addr_changed+0x78>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	60fb      	str	r3, [r7, #12]
 800f248:	e00c      	b.n	800f264 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	d103      	bne.n	800f25e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	60fb      	str	r3, [r7, #12]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1ef      	bne.n	800f24a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f26a:	bf00      	nop
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	20025840 	.word	0x20025840
 800f278:	2002584c 	.word	0x2002584c
 800f27c:	20025848 	.word	0x20025848

0800f280 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d007      	beq.n	800f2a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fb6f 	bl	800e978 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b08d      	sub	sp, #52	; 0x34
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d105      	bne.n	800f2c4 <tcp_input+0x1c>
 800f2b8:	4b9b      	ldr	r3, [pc, #620]	; (800f528 <tcp_input+0x280>)
 800f2ba:	2283      	movs	r2, #131	; 0x83
 800f2bc:	499b      	ldr	r1, [pc, #620]	; (800f52c <tcp_input+0x284>)
 800f2be:	489c      	ldr	r0, [pc, #624]	; (800f530 <tcp_input+0x288>)
 800f2c0:	f007 fe9e 	bl	8017000 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	4a9a      	ldr	r2, [pc, #616]	; (800f534 <tcp_input+0x28c>)
 800f2ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	895b      	ldrh	r3, [r3, #10]
 800f2d0:	2b13      	cmp	r3, #19
 800f2d2:	f240 83c4 	bls.w	800fa5e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2d6:	4b98      	ldr	r3, [pc, #608]	; (800f538 <tcp_input+0x290>)
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	4a97      	ldr	r2, [pc, #604]	; (800f538 <tcp_input+0x290>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	4611      	mov	r1, r2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f006 fa4f 	bl	8015784 <ip4_addr_isbroadcast_u32>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f040 83ba 	bne.w	800fa62 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2ee:	4b92      	ldr	r3, [pc, #584]	; (800f538 <tcp_input+0x290>)
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2f6:	2be0      	cmp	r3, #224	; 0xe0
 800f2f8:	f000 83b3 	beq.w	800fa62 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f2fc:	4b8d      	ldr	r3, [pc, #564]	; (800f534 <tcp_input+0x28c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	899b      	ldrh	r3, [r3, #12]
 800f302:	b29b      	uxth	r3, r3
 800f304:	4618      	mov	r0, r3
 800f306:	f7fc facb 	bl	800b8a0 <lwip_htons>
 800f30a:	4603      	mov	r3, r0
 800f30c:	0b1b      	lsrs	r3, r3, #12
 800f30e:	b29b      	uxth	r3, r3
 800f310:	b2db      	uxtb	r3, r3
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f316:	7cbb      	ldrb	r3, [r7, #18]
 800f318:	2b13      	cmp	r3, #19
 800f31a:	f240 83a4 	bls.w	800fa66 <tcp_input+0x7be>
 800f31e:	7cbb      	ldrb	r3, [r7, #18]
 800f320:	b29a      	uxth	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	891b      	ldrh	r3, [r3, #8]
 800f326:	429a      	cmp	r2, r3
 800f328:	f200 839d 	bhi.w	800fa66 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f32c:	7cbb      	ldrb	r3, [r7, #18]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	3b14      	subs	r3, #20
 800f332:	b29a      	uxth	r2, r3
 800f334:	4b81      	ldr	r3, [pc, #516]	; (800f53c <tcp_input+0x294>)
 800f336:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f338:	4b81      	ldr	r3, [pc, #516]	; (800f540 <tcp_input+0x298>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	895a      	ldrh	r2, [r3, #10]
 800f342:	7cbb      	ldrb	r3, [r7, #18]
 800f344:	b29b      	uxth	r3, r3
 800f346:	429a      	cmp	r2, r3
 800f348:	d309      	bcc.n	800f35e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f34a:	4b7c      	ldr	r3, [pc, #496]	; (800f53c <tcp_input+0x294>)
 800f34c:	881a      	ldrh	r2, [r3, #0]
 800f34e:	4b7d      	ldr	r3, [pc, #500]	; (800f544 <tcp_input+0x29c>)
 800f350:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f352:	7cbb      	ldrb	r3, [r7, #18]
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7fd fdcc 	bl	800cef4 <pbuf_remove_header>
 800f35c:	e04e      	b.n	800f3fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d105      	bne.n	800f372 <tcp_input+0xca>
 800f366:	4b70      	ldr	r3, [pc, #448]	; (800f528 <tcp_input+0x280>)
 800f368:	22c2      	movs	r2, #194	; 0xc2
 800f36a:	4977      	ldr	r1, [pc, #476]	; (800f548 <tcp_input+0x2a0>)
 800f36c:	4870      	ldr	r0, [pc, #448]	; (800f530 <tcp_input+0x288>)
 800f36e:	f007 fe47 	bl	8017000 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f372:	2114      	movs	r1, #20
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7fd fdbd 	bl	800cef4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	895a      	ldrh	r2, [r3, #10]
 800f37e:	4b71      	ldr	r3, [pc, #452]	; (800f544 <tcp_input+0x29c>)
 800f380:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f382:	4b6e      	ldr	r3, [pc, #440]	; (800f53c <tcp_input+0x294>)
 800f384:	881a      	ldrh	r2, [r3, #0]
 800f386:	4b6f      	ldr	r3, [pc, #444]	; (800f544 <tcp_input+0x29c>)
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f38e:	4b6d      	ldr	r3, [pc, #436]	; (800f544 <tcp_input+0x29c>)
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7fd fdad 	bl	800cef4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	8a3a      	ldrh	r2, [r7, #16]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	f200 8361 	bhi.w	800fa6a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4a64      	ldr	r2, [pc, #400]	; (800f540 <tcp_input+0x298>)
 800f3b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	8a3a      	ldrh	r2, [r7, #16]
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fd fd9a 	bl	800cef4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	891a      	ldrh	r2, [r3, #8]
 800f3c4:	8a3b      	ldrh	r3, [r7, #16]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	895b      	ldrh	r3, [r3, #10]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <tcp_input+0x13a>
 800f3d6:	4b54      	ldr	r3, [pc, #336]	; (800f528 <tcp_input+0x280>)
 800f3d8:	22df      	movs	r2, #223	; 0xdf
 800f3da:	495c      	ldr	r1, [pc, #368]	; (800f54c <tcp_input+0x2a4>)
 800f3dc:	4854      	ldr	r0, [pc, #336]	; (800f530 <tcp_input+0x288>)
 800f3de:	f007 fe0f 	bl	8017000 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	891a      	ldrh	r2, [r3, #8]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	891b      	ldrh	r3, [r3, #8]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d005      	beq.n	800f3fc <tcp_input+0x154>
 800f3f0:	4b4d      	ldr	r3, [pc, #308]	; (800f528 <tcp_input+0x280>)
 800f3f2:	22e0      	movs	r2, #224	; 0xe0
 800f3f4:	4956      	ldr	r1, [pc, #344]	; (800f550 <tcp_input+0x2a8>)
 800f3f6:	484e      	ldr	r0, [pc, #312]	; (800f530 <tcp_input+0x288>)
 800f3f8:	f007 fe02 	bl	8017000 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f3fc:	4b4d      	ldr	r3, [pc, #308]	; (800f534 <tcp_input+0x28c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4a4b      	ldr	r2, [pc, #300]	; (800f534 <tcp_input+0x28c>)
 800f406:	6814      	ldr	r4, [r2, #0]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fc fa49 	bl	800b8a0 <lwip_htons>
 800f40e:	4603      	mov	r3, r0
 800f410:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f412:	4b48      	ldr	r3, [pc, #288]	; (800f534 <tcp_input+0x28c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	885b      	ldrh	r3, [r3, #2]
 800f418:	b29b      	uxth	r3, r3
 800f41a:	4a46      	ldr	r2, [pc, #280]	; (800f534 <tcp_input+0x28c>)
 800f41c:	6814      	ldr	r4, [r2, #0]
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc fa3e 	bl	800b8a0 <lwip_htons>
 800f424:	4603      	mov	r3, r0
 800f426:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f428:	4b42      	ldr	r3, [pc, #264]	; (800f534 <tcp_input+0x28c>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	4a41      	ldr	r2, [pc, #260]	; (800f534 <tcp_input+0x28c>)
 800f430:	6814      	ldr	r4, [r2, #0]
 800f432:	4618      	mov	r0, r3
 800f434:	f7fc fa49 	bl	800b8ca <lwip_htonl>
 800f438:	4603      	mov	r3, r0
 800f43a:	6063      	str	r3, [r4, #4]
 800f43c:	6863      	ldr	r3, [r4, #4]
 800f43e:	4a45      	ldr	r2, [pc, #276]	; (800f554 <tcp_input+0x2ac>)
 800f440:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f442:	4b3c      	ldr	r3, [pc, #240]	; (800f534 <tcp_input+0x28c>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	4a3a      	ldr	r2, [pc, #232]	; (800f534 <tcp_input+0x28c>)
 800f44a:	6814      	ldr	r4, [r2, #0]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fc fa3c 	bl	800b8ca <lwip_htonl>
 800f452:	4603      	mov	r3, r0
 800f454:	60a3      	str	r3, [r4, #8]
 800f456:	68a3      	ldr	r3, [r4, #8]
 800f458:	4a3f      	ldr	r2, [pc, #252]	; (800f558 <tcp_input+0x2b0>)
 800f45a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f45c:	4b35      	ldr	r3, [pc, #212]	; (800f534 <tcp_input+0x28c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	89db      	ldrh	r3, [r3, #14]
 800f462:	b29b      	uxth	r3, r3
 800f464:	4a33      	ldr	r2, [pc, #204]	; (800f534 <tcp_input+0x28c>)
 800f466:	6814      	ldr	r4, [r2, #0]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fc fa19 	bl	800b8a0 <lwip_htons>
 800f46e:	4603      	mov	r3, r0
 800f470:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f472:	4b30      	ldr	r3, [pc, #192]	; (800f534 <tcp_input+0x28c>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	899b      	ldrh	r3, [r3, #12]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fc fa10 	bl	800b8a0 <lwip_htons>
 800f480:	4603      	mov	r3, r0
 800f482:	b2db      	uxtb	r3, r3
 800f484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	4b34      	ldr	r3, [pc, #208]	; (800f55c <tcp_input+0x2b4>)
 800f48c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	891a      	ldrh	r2, [r3, #8]
 800f492:	4b33      	ldr	r3, [pc, #204]	; (800f560 <tcp_input+0x2b8>)
 800f494:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f496:	4b31      	ldr	r3, [pc, #196]	; (800f55c <tcp_input+0x2b4>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	f003 0303 	and.w	r3, r3, #3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00c      	beq.n	800f4bc <tcp_input+0x214>
    tcplen++;
 800f4a2:	4b2f      	ldr	r3, [pc, #188]	; (800f560 <tcp_input+0x2b8>)
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	4b2d      	ldr	r3, [pc, #180]	; (800f560 <tcp_input+0x2b8>)
 800f4ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	891a      	ldrh	r2, [r3, #8]
 800f4b2:	4b2b      	ldr	r3, [pc, #172]	; (800f560 <tcp_input+0x2b8>)
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	f200 82d9 	bhi.w	800fa6e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4c0:	4b28      	ldr	r3, [pc, #160]	; (800f564 <tcp_input+0x2bc>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	61fb      	str	r3, [r7, #28]
 800f4c6:	e09d      	b.n	800f604 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	7d1b      	ldrb	r3, [r3, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d105      	bne.n	800f4dc <tcp_input+0x234>
 800f4d0:	4b15      	ldr	r3, [pc, #84]	; (800f528 <tcp_input+0x280>)
 800f4d2:	22fb      	movs	r2, #251	; 0xfb
 800f4d4:	4924      	ldr	r1, [pc, #144]	; (800f568 <tcp_input+0x2c0>)
 800f4d6:	4816      	ldr	r0, [pc, #88]	; (800f530 <tcp_input+0x288>)
 800f4d8:	f007 fd92 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	7d1b      	ldrb	r3, [r3, #20]
 800f4e0:	2b0a      	cmp	r3, #10
 800f4e2:	d105      	bne.n	800f4f0 <tcp_input+0x248>
 800f4e4:	4b10      	ldr	r3, [pc, #64]	; (800f528 <tcp_input+0x280>)
 800f4e6:	22fc      	movs	r2, #252	; 0xfc
 800f4e8:	4920      	ldr	r1, [pc, #128]	; (800f56c <tcp_input+0x2c4>)
 800f4ea:	4811      	ldr	r0, [pc, #68]	; (800f530 <tcp_input+0x288>)
 800f4ec:	f007 fd88 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	7d1b      	ldrb	r3, [r3, #20]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d105      	bne.n	800f504 <tcp_input+0x25c>
 800f4f8:	4b0b      	ldr	r3, [pc, #44]	; (800f528 <tcp_input+0x280>)
 800f4fa:	22fd      	movs	r2, #253	; 0xfd
 800f4fc:	491c      	ldr	r1, [pc, #112]	; (800f570 <tcp_input+0x2c8>)
 800f4fe:	480c      	ldr	r0, [pc, #48]	; (800f530 <tcp_input+0x288>)
 800f500:	f007 fd7e 	bl	8017000 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	7a1b      	ldrb	r3, [r3, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d033      	beq.n	800f574 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	7a1a      	ldrb	r2, [r3, #8]
 800f510:	4b09      	ldr	r3, [pc, #36]	; (800f538 <tcp_input+0x290>)
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f518:	3301      	adds	r3, #1
 800f51a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d029      	beq.n	800f574 <tcp_input+0x2cc>
      prev = pcb;
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	61bb      	str	r3, [r7, #24]
      continue;
 800f524:	e06b      	b.n	800f5fe <tcp_input+0x356>
 800f526:	bf00      	nop
 800f528:	08019f40 	.word	0x08019f40
 800f52c:	08019f74 	.word	0x08019f74
 800f530:	08019f8c 	.word	0x08019f8c
 800f534:	20004aec 	.word	0x20004aec
 800f538:	200088ec 	.word	0x200088ec
 800f53c:	20004af0 	.word	0x20004af0
 800f540:	20004af4 	.word	0x20004af4
 800f544:	20004af2 	.word	0x20004af2
 800f548:	08019fb4 	.word	0x08019fb4
 800f54c:	08019fc4 	.word	0x08019fc4
 800f550:	08019fd0 	.word	0x08019fd0
 800f554:	20004afc 	.word	0x20004afc
 800f558:	20004b00 	.word	0x20004b00
 800f55c:	20004b08 	.word	0x20004b08
 800f560:	20004b06 	.word	0x20004b06
 800f564:	20025840 	.word	0x20025840
 800f568:	08019ff0 	.word	0x08019ff0
 800f56c:	0801a018 	.word	0x0801a018
 800f570:	0801a044 	.word	0x0801a044
    }

    if (pcb->remote_port == tcphdr->src &&
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	8b1a      	ldrh	r2, [r3, #24]
 800f578:	4b94      	ldr	r3, [pc, #592]	; (800f7cc <tcp_input+0x524>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	429a      	cmp	r2, r3
 800f582:	d13a      	bne.n	800f5fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	8ada      	ldrh	r2, [r3, #22]
 800f588:	4b90      	ldr	r3, [pc, #576]	; (800f7cc <tcp_input+0x524>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	885b      	ldrh	r3, [r3, #2]
 800f58e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f590:	429a      	cmp	r2, r3
 800f592:	d132      	bne.n	800f5fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	4b8d      	ldr	r3, [pc, #564]	; (800f7d0 <tcp_input+0x528>)
 800f59a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d12c      	bne.n	800f5fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	4b8a      	ldr	r3, [pc, #552]	; (800f7d0 <tcp_input+0x528>)
 800f5a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d126      	bne.n	800f5fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	69fa      	ldr	r2, [r7, #28]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d106      	bne.n	800f5c4 <tcp_input+0x31c>
 800f5b6:	4b87      	ldr	r3, [pc, #540]	; (800f7d4 <tcp_input+0x52c>)
 800f5b8:	f240 120d 	movw	r2, #269	; 0x10d
 800f5bc:	4986      	ldr	r1, [pc, #536]	; (800f7d8 <tcp_input+0x530>)
 800f5be:	4887      	ldr	r0, [pc, #540]	; (800f7dc <tcp_input+0x534>)
 800f5c0:	f007 fd1e 	bl	8017000 <iprintf>
      if (prev != NULL) {
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00a      	beq.n	800f5e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5d2:	4b83      	ldr	r3, [pc, #524]	; (800f7e0 <tcp_input+0x538>)
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5da:	4a81      	ldr	r2, [pc, #516]	; (800f7e0 <tcp_input+0x538>)
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	69fa      	ldr	r2, [r7, #28]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d111      	bne.n	800f60e <tcp_input+0x366>
 800f5ea:	4b7a      	ldr	r3, [pc, #488]	; (800f7d4 <tcp_input+0x52c>)
 800f5ec:	f240 1215 	movw	r2, #277	; 0x115
 800f5f0:	497c      	ldr	r1, [pc, #496]	; (800f7e4 <tcp_input+0x53c>)
 800f5f2:	487a      	ldr	r0, [pc, #488]	; (800f7dc <tcp_input+0x534>)
 800f5f4:	f007 fd04 	bl	8017000 <iprintf>
      break;
 800f5f8:	e009      	b.n	800f60e <tcp_input+0x366>
    }
    prev = pcb;
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	61fb      	str	r3, [r7, #28]
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	2b00      	cmp	r3, #0
 800f608:	f47f af5e 	bne.w	800f4c8 <tcp_input+0x220>
 800f60c:	e000      	b.n	800f610 <tcp_input+0x368>
      break;
 800f60e:	bf00      	nop
  }

  if (pcb == NULL) {
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f040 8095 	bne.w	800f742 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f618:	4b73      	ldr	r3, [pc, #460]	; (800f7e8 <tcp_input+0x540>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	61fb      	str	r3, [r7, #28]
 800f61e:	e03f      	b.n	800f6a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	7d1b      	ldrb	r3, [r3, #20]
 800f624:	2b0a      	cmp	r3, #10
 800f626:	d006      	beq.n	800f636 <tcp_input+0x38e>
 800f628:	4b6a      	ldr	r3, [pc, #424]	; (800f7d4 <tcp_input+0x52c>)
 800f62a:	f240 121f 	movw	r2, #287	; 0x11f
 800f62e:	496f      	ldr	r1, [pc, #444]	; (800f7ec <tcp_input+0x544>)
 800f630:	486a      	ldr	r0, [pc, #424]	; (800f7dc <tcp_input+0x534>)
 800f632:	f007 fce5 	bl	8017000 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	7a1b      	ldrb	r3, [r3, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d009      	beq.n	800f652 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	7a1a      	ldrb	r2, [r3, #8]
 800f642:	4b63      	ldr	r3, [pc, #396]	; (800f7d0 <tcp_input+0x528>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f64a:	3301      	adds	r3, #1
 800f64c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f64e:	429a      	cmp	r2, r3
 800f650:	d122      	bne.n	800f698 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	8b1a      	ldrh	r2, [r3, #24]
 800f656:	4b5d      	ldr	r3, [pc, #372]	; (800f7cc <tcp_input+0x524>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	429a      	cmp	r2, r3
 800f660:	d11b      	bne.n	800f69a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	8ada      	ldrh	r2, [r3, #22]
 800f666:	4b59      	ldr	r3, [pc, #356]	; (800f7cc <tcp_input+0x524>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	885b      	ldrh	r3, [r3, #2]
 800f66c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f66e:	429a      	cmp	r2, r3
 800f670:	d113      	bne.n	800f69a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	4b56      	ldr	r3, [pc, #344]	; (800f7d0 <tcp_input+0x528>)
 800f678:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d10d      	bne.n	800f69a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	4b53      	ldr	r3, [pc, #332]	; (800f7d0 <tcp_input+0x528>)
 800f684:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f686:	429a      	cmp	r2, r3
 800f688:	d107      	bne.n	800f69a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f68a:	69f8      	ldr	r0, [r7, #28]
 800f68c:	f000 fb54 	bl	800fd38 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7fd fcb5 	bl	800d000 <pbuf_free>
        return;
 800f696:	e1f0      	b.n	800fa7a <tcp_input+0x7d2>
        continue;
 800f698:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	61fb      	str	r3, [r7, #28]
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1bc      	bne.n	800f620 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6aa:	4b51      	ldr	r3, [pc, #324]	; (800f7f0 <tcp_input+0x548>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e02a      	b.n	800f708 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	7a1b      	ldrb	r3, [r3, #8]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00c      	beq.n	800f6d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	7a1a      	ldrb	r2, [r3, #8]
 800f6be:	4b44      	ldr	r3, [pc, #272]	; (800f7d0 <tcp_input+0x528>)
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d002      	beq.n	800f6d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	61bb      	str	r3, [r7, #24]
        continue;
 800f6d2:	e016      	b.n	800f702 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	8ada      	ldrh	r2, [r3, #22]
 800f6d8:	4b3c      	ldr	r3, [pc, #240]	; (800f7cc <tcp_input+0x524>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	885b      	ldrh	r3, [r3, #2]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d10c      	bne.n	800f6fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	4b39      	ldr	r3, [pc, #228]	; (800f7d0 <tcp_input+0x528>)
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d00f      	beq.n	800f710 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00d      	beq.n	800f712 <tcp_input+0x46a>
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d009      	beq.n	800f712 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	617b      	str	r3, [r7, #20]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d1d1      	bne.n	800f6b2 <tcp_input+0x40a>
 800f70e:	e000      	b.n	800f712 <tcp_input+0x46a>
            break;
 800f710:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d014      	beq.n	800f742 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	68da      	ldr	r2, [r3, #12]
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f726:	4b32      	ldr	r3, [pc, #200]	; (800f7f0 <tcp_input+0x548>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f72e:	4a30      	ldr	r2, [pc, #192]	; (800f7f0 <tcp_input+0x548>)
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f734:	6978      	ldr	r0, [r7, #20]
 800f736:	f000 fa01 	bl	800fb3c <tcp_listen_input>
      }
      pbuf_free(p);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7fd fc60 	bl	800d000 <pbuf_free>
      return;
 800f740:	e19b      	b.n	800fa7a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 8160 	beq.w	800fa0a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f74a:	4b2a      	ldr	r3, [pc, #168]	; (800f7f4 <tcp_input+0x54c>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	891a      	ldrh	r2, [r3, #8]
 800f754:	4b27      	ldr	r3, [pc, #156]	; (800f7f4 <tcp_input+0x54c>)
 800f756:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f758:	4a26      	ldr	r2, [pc, #152]	; (800f7f4 <tcp_input+0x54c>)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f75e:	4b1b      	ldr	r3, [pc, #108]	; (800f7cc <tcp_input+0x524>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4a24      	ldr	r2, [pc, #144]	; (800f7f4 <tcp_input+0x54c>)
 800f764:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f766:	4b24      	ldr	r3, [pc, #144]	; (800f7f8 <tcp_input+0x550>)
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f76c:	4b23      	ldr	r3, [pc, #140]	; (800f7fc <tcp_input+0x554>)
 800f76e:	2200      	movs	r2, #0
 800f770:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f772:	4b23      	ldr	r3, [pc, #140]	; (800f800 <tcp_input+0x558>)
 800f774:	2200      	movs	r2, #0
 800f776:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f778:	4b22      	ldr	r3, [pc, #136]	; (800f804 <tcp_input+0x55c>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f003 0308 	and.w	r3, r3, #8
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7b5b      	ldrb	r3, [r3, #13]
 800f788:	f043 0301 	orr.w	r3, r3, #1
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f796:	2b00      	cmp	r3, #0
 800f798:	d038      	beq.n	800f80c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f79a:	69f8      	ldr	r0, [r7, #28]
 800f79c:	f7ff f870 	bl	800e880 <tcp_process_refused_data>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	f113 0f0d 	cmn.w	r3, #13
 800f7a6:	d007      	beq.n	800f7b8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d02d      	beq.n	800f80c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7b0:	4b15      	ldr	r3, [pc, #84]	; (800f808 <tcp_input+0x560>)
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d029      	beq.n	800f80c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f040 8104 	bne.w	800f9ca <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7c2:	69f8      	ldr	r0, [r7, #28]
 800f7c4:	f003 fe16 	bl	80133f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7c8:	e0ff      	b.n	800f9ca <tcp_input+0x722>
 800f7ca:	bf00      	nop
 800f7cc:	20004aec 	.word	0x20004aec
 800f7d0:	200088ec 	.word	0x200088ec
 800f7d4:	08019f40 	.word	0x08019f40
 800f7d8:	0801a06c 	.word	0x0801a06c
 800f7dc:	08019f8c 	.word	0x08019f8c
 800f7e0:	20025840 	.word	0x20025840
 800f7e4:	0801a098 	.word	0x0801a098
 800f7e8:	20025850 	.word	0x20025850
 800f7ec:	0801a0c4 	.word	0x0801a0c4
 800f7f0:	20025848 	.word	0x20025848
 800f7f4:	20004adc 	.word	0x20004adc
 800f7f8:	20004b0c 	.word	0x20004b0c
 800f7fc:	20004b09 	.word	0x20004b09
 800f800:	20004b04 	.word	0x20004b04
 800f804:	20004b08 	.word	0x20004b08
 800f808:	20004b06 	.word	0x20004b06
      }
    }
    tcp_input_pcb = pcb;
 800f80c:	4a9c      	ldr	r2, [pc, #624]	; (800fa80 <tcp_input+0x7d8>)
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f812:	69f8      	ldr	r0, [r7, #28]
 800f814:	f000 fb0a 	bl	800fe2c <tcp_process>
 800f818:	4603      	mov	r3, r0
 800f81a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f81c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f820:	f113 0f0d 	cmn.w	r3, #13
 800f824:	f000 80d3 	beq.w	800f9ce <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f828:	4b96      	ldr	r3, [pc, #600]	; (800fa84 <tcp_input+0x7dc>)
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	f003 0308 	and.w	r3, r3, #8
 800f830:	2b00      	cmp	r3, #0
 800f832:	d015      	beq.n	800f860 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d008      	beq.n	800f850 <tcp_input+0x5a8>
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f844:	69fa      	ldr	r2, [r7, #28]
 800f846:	6912      	ldr	r2, [r2, #16]
 800f848:	f06f 010d 	mvn.w	r1, #13
 800f84c:	4610      	mov	r0, r2
 800f84e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f850:	69f9      	ldr	r1, [r7, #28]
 800f852:	488d      	ldr	r0, [pc, #564]	; (800fa88 <tcp_input+0x7e0>)
 800f854:	f7ff fbb0 	bl	800efb8 <tcp_pcb_remove>
        tcp_free(pcb);
 800f858:	69f8      	ldr	r0, [r7, #28]
 800f85a:	f7fd fe7d 	bl	800d558 <tcp_free>
 800f85e:	e0c1      	b.n	800f9e4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f864:	4b89      	ldr	r3, [pc, #548]	; (800fa8c <tcp_input+0x7e4>)
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01d      	beq.n	800f8a8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f86c:	4b87      	ldr	r3, [pc, #540]	; (800fa8c <tcp_input+0x7e4>)
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00a      	beq.n	800f892 <tcp_input+0x5ea>
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f882:	69fa      	ldr	r2, [r7, #28]
 800f884:	6910      	ldr	r0, [r2, #16]
 800f886:	89fa      	ldrh	r2, [r7, #14]
 800f888:	69f9      	ldr	r1, [r7, #28]
 800f88a:	4798      	blx	r3
 800f88c:	4603      	mov	r3, r0
 800f88e:	74fb      	strb	r3, [r7, #19]
 800f890:	e001      	b.n	800f896 <tcp_input+0x5ee>
 800f892:	2300      	movs	r3, #0
 800f894:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f89a:	f113 0f0d 	cmn.w	r3, #13
 800f89e:	f000 8098 	beq.w	800f9d2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f8a2:	4b7a      	ldr	r3, [pc, #488]	; (800fa8c <tcp_input+0x7e4>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f8a8:	69f8      	ldr	r0, [r7, #28]
 800f8aa:	f000 f907 	bl	800fabc <tcp_input_delayed_close>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f040 8090 	bne.w	800f9d6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f8b6:	4b76      	ldr	r3, [pc, #472]	; (800fa90 <tcp_input+0x7e8>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d041      	beq.n	800f942 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d006      	beq.n	800f8d4 <tcp_input+0x62c>
 800f8c6:	4b73      	ldr	r3, [pc, #460]	; (800fa94 <tcp_input+0x7ec>)
 800f8c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8cc:	4972      	ldr	r1, [pc, #456]	; (800fa98 <tcp_input+0x7f0>)
 800f8ce:	4873      	ldr	r0, [pc, #460]	; (800fa9c <tcp_input+0x7f4>)
 800f8d0:	f007 fb96 	bl	8017000 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	8b5b      	ldrh	r3, [r3, #26]
 800f8d8:	f003 0310 	and.w	r3, r3, #16
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d008      	beq.n	800f8f2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f8e0:	4b6b      	ldr	r3, [pc, #428]	; (800fa90 <tcp_input+0x7e8>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fd fb8b 	bl	800d000 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f8ea:	69f8      	ldr	r0, [r7, #28]
 800f8ec:	f7fe f978 	bl	800dbe0 <tcp_abort>
            goto aborted;
 800f8f0:	e078      	b.n	800f9e4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00c      	beq.n	800f916 <tcp_input+0x66e>
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	6918      	ldr	r0, [r3, #16]
 800f906:	4b62      	ldr	r3, [pc, #392]	; (800fa90 <tcp_input+0x7e8>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	2300      	movs	r3, #0
 800f90c:	69f9      	ldr	r1, [r7, #28]
 800f90e:	47a0      	blx	r4
 800f910:	4603      	mov	r3, r0
 800f912:	74fb      	strb	r3, [r7, #19]
 800f914:	e008      	b.n	800f928 <tcp_input+0x680>
 800f916:	4b5e      	ldr	r3, [pc, #376]	; (800fa90 <tcp_input+0x7e8>)
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	2300      	movs	r3, #0
 800f91c:	69f9      	ldr	r1, [r7, #28]
 800f91e:	2000      	movs	r0, #0
 800f920:	f7ff f884 	bl	800ea2c <tcp_recv_null>
 800f924:	4603      	mov	r3, r0
 800f926:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f92c:	f113 0f0d 	cmn.w	r3, #13
 800f930:	d053      	beq.n	800f9da <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d003      	beq.n	800f942 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f93a:	4b55      	ldr	r3, [pc, #340]	; (800fa90 <tcp_input+0x7e8>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f942:	4b50      	ldr	r3, [pc, #320]	; (800fa84 <tcp_input+0x7dc>)
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	f003 0320 	and.w	r3, r3, #32
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d030      	beq.n	800f9b0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f952:	2b00      	cmp	r3, #0
 800f954:	d009      	beq.n	800f96a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f95a:	7b5a      	ldrb	r2, [r3, #13]
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f960:	f042 0220 	orr.w	r2, r2, #32
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	735a      	strb	r2, [r3, #13]
 800f968:	e022      	b.n	800f9b0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f96e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f972:	d005      	beq.n	800f980 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f978:	3301      	adds	r3, #1
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00b      	beq.n	800f9a2 <tcp_input+0x6fa>
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	6918      	ldr	r0, [r3, #16]
 800f994:	2300      	movs	r3, #0
 800f996:	2200      	movs	r2, #0
 800f998:	69f9      	ldr	r1, [r7, #28]
 800f99a:	47a0      	blx	r4
 800f99c:	4603      	mov	r3, r0
 800f99e:	74fb      	strb	r3, [r7, #19]
 800f9a0:	e001      	b.n	800f9a6 <tcp_input+0x6fe>
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9aa:	f113 0f0d 	cmn.w	r3, #13
 800f9ae:	d016      	beq.n	800f9de <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f9b0:	4b33      	ldr	r3, [pc, #204]	; (800fa80 <tcp_input+0x7d8>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f9b6:	69f8      	ldr	r0, [r7, #28]
 800f9b8:	f000 f880 	bl	800fabc <tcp_input_delayed_close>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d10f      	bne.n	800f9e2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f9c2:	69f8      	ldr	r0, [r7, #28]
 800f9c4:	f002 ff10 	bl	80127e8 <tcp_output>
 800f9c8:	e00c      	b.n	800f9e4 <tcp_input+0x73c>
        goto aborted;
 800f9ca:	bf00      	nop
 800f9cc:	e00a      	b.n	800f9e4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f9ce:	bf00      	nop
 800f9d0:	e008      	b.n	800f9e4 <tcp_input+0x73c>
              goto aborted;
 800f9d2:	bf00      	nop
 800f9d4:	e006      	b.n	800f9e4 <tcp_input+0x73c>
          goto aborted;
 800f9d6:	bf00      	nop
 800f9d8:	e004      	b.n	800f9e4 <tcp_input+0x73c>
            goto aborted;
 800f9da:	bf00      	nop
 800f9dc:	e002      	b.n	800f9e4 <tcp_input+0x73c>
              goto aborted;
 800f9de:	bf00      	nop
 800f9e0:	e000      	b.n	800f9e4 <tcp_input+0x73c>
          goto aborted;
 800f9e2:	bf00      	nop
    tcp_input_pcb = NULL;
 800f9e4:	4b26      	ldr	r3, [pc, #152]	; (800fa80 <tcp_input+0x7d8>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f9ea:	4b29      	ldr	r3, [pc, #164]	; (800fa90 <tcp_input+0x7e8>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f9f0:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <tcp_input+0x7f8>)
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d03f      	beq.n	800fa78 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f9f8:	4b29      	ldr	r3, [pc, #164]	; (800faa0 <tcp_input+0x7f8>)
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fd faff 	bl	800d000 <pbuf_free>
      inseg.p = NULL;
 800fa02:	4b27      	ldr	r3, [pc, #156]	; (800faa0 <tcp_input+0x7f8>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa08:	e036      	b.n	800fa78 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa0a:	4b26      	ldr	r3, [pc, #152]	; (800faa4 <tcp_input+0x7fc>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fb ff44 	bl	800b8a0 <lwip_htons>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	f003 0304 	and.w	r3, r3, #4
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d118      	bne.n	800fa56 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa24:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <tcp_input+0x800>)
 800fa26:	6819      	ldr	r1, [r3, #0]
 800fa28:	4b20      	ldr	r3, [pc, #128]	; (800faac <tcp_input+0x804>)
 800fa2a:	881b      	ldrh	r3, [r3, #0]
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	4b20      	ldr	r3, [pc, #128]	; (800fab0 <tcp_input+0x808>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa34:	4b1b      	ldr	r3, [pc, #108]	; (800faa4 <tcp_input+0x7fc>)
 800fa36:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa38:	885b      	ldrh	r3, [r3, #2]
 800fa3a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa3c:	4a19      	ldr	r2, [pc, #100]	; (800faa4 <tcp_input+0x7fc>)
 800fa3e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	b292      	uxth	r2, r2
 800fa44:	9202      	str	r2, [sp, #8]
 800fa46:	9301      	str	r3, [sp, #4]
 800fa48:	4b1a      	ldr	r3, [pc, #104]	; (800fab4 <tcp_input+0x80c>)
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	4b1a      	ldr	r3, [pc, #104]	; (800fab8 <tcp_input+0x810>)
 800fa4e:	4602      	mov	r2, r0
 800fa50:	2000      	movs	r0, #0
 800fa52:	f003 fc7d 	bl	8013350 <tcp_rst>
    pbuf_free(p);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7fd fad2 	bl	800d000 <pbuf_free>
  return;
 800fa5c:	e00c      	b.n	800fa78 <tcp_input+0x7d0>
    goto dropped;
 800fa5e:	bf00      	nop
 800fa60:	e006      	b.n	800fa70 <tcp_input+0x7c8>
    goto dropped;
 800fa62:	bf00      	nop
 800fa64:	e004      	b.n	800fa70 <tcp_input+0x7c8>
    goto dropped;
 800fa66:	bf00      	nop
 800fa68:	e002      	b.n	800fa70 <tcp_input+0x7c8>
      goto dropped;
 800fa6a:	bf00      	nop
 800fa6c:	e000      	b.n	800fa70 <tcp_input+0x7c8>
      goto dropped;
 800fa6e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7fd fac5 	bl	800d000 <pbuf_free>
 800fa76:	e000      	b.n	800fa7a <tcp_input+0x7d2>
  return;
 800fa78:	bf00      	nop
}
 800fa7a:	3724      	adds	r7, #36	; 0x24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd90      	pop	{r4, r7, pc}
 800fa80:	20025854 	.word	0x20025854
 800fa84:	20004b09 	.word	0x20004b09
 800fa88:	20025840 	.word	0x20025840
 800fa8c:	20004b04 	.word	0x20004b04
 800fa90:	20004b0c 	.word	0x20004b0c
 800fa94:	08019f40 	.word	0x08019f40
 800fa98:	0801a0f4 	.word	0x0801a0f4
 800fa9c:	08019f8c 	.word	0x08019f8c
 800faa0:	20004adc 	.word	0x20004adc
 800faa4:	20004aec 	.word	0x20004aec
 800faa8:	20004b00 	.word	0x20004b00
 800faac:	20004b06 	.word	0x20004b06
 800fab0:	20004afc 	.word	0x20004afc
 800fab4:	200088fc 	.word	0x200088fc
 800fab8:	20008900 	.word	0x20008900

0800fabc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <tcp_input_delayed_close+0x1c>
 800faca:	4b17      	ldr	r3, [pc, #92]	; (800fb28 <tcp_input_delayed_close+0x6c>)
 800facc:	f240 225a 	movw	r2, #602	; 0x25a
 800fad0:	4916      	ldr	r1, [pc, #88]	; (800fb2c <tcp_input_delayed_close+0x70>)
 800fad2:	4817      	ldr	r0, [pc, #92]	; (800fb30 <tcp_input_delayed_close+0x74>)
 800fad4:	f007 fa94 	bl	8017000 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fad8:	4b16      	ldr	r3, [pc, #88]	; (800fb34 <tcp_input_delayed_close+0x78>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	f003 0310 	and.w	r3, r3, #16
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d01c      	beq.n	800fb1e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	8b5b      	ldrh	r3, [r3, #26]
 800fae8:	f003 0310 	and.w	r3, r3, #16
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10d      	bne.n	800fb0c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d008      	beq.n	800fb0c <tcp_input_delayed_close+0x50>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	6912      	ldr	r2, [r2, #16]
 800fb04:	f06f 010e 	mvn.w	r1, #14
 800fb08:	4610      	mov	r0, r2
 800fb0a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb0c:	6879      	ldr	r1, [r7, #4]
 800fb0e:	480a      	ldr	r0, [pc, #40]	; (800fb38 <tcp_input_delayed_close+0x7c>)
 800fb10:	f7ff fa52 	bl	800efb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7fd fd1f 	bl	800d558 <tcp_free>
    return 1;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e000      	b.n	800fb20 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	08019f40 	.word	0x08019f40
 800fb2c:	0801a110 	.word	0x0801a110
 800fb30:	08019f8c 	.word	0x08019f8c
 800fb34:	20004b09 	.word	0x20004b09
 800fb38:	20025840 	.word	0x20025840

0800fb3c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb3c:	b590      	push	{r4, r7, lr}
 800fb3e:	b08b      	sub	sp, #44	; 0x2c
 800fb40:	af04      	add	r7, sp, #16
 800fb42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb44:	4b6f      	ldr	r3, [pc, #444]	; (800fd04 <tcp_listen_input+0x1c8>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	f003 0304 	and.w	r3, r3, #4
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f040 80d2 	bne.w	800fcf6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d106      	bne.n	800fb66 <tcp_listen_input+0x2a>
 800fb58:	4b6b      	ldr	r3, [pc, #428]	; (800fd08 <tcp_listen_input+0x1cc>)
 800fb5a:	f240 2281 	movw	r2, #641	; 0x281
 800fb5e:	496b      	ldr	r1, [pc, #428]	; (800fd0c <tcp_listen_input+0x1d0>)
 800fb60:	486b      	ldr	r0, [pc, #428]	; (800fd10 <tcp_listen_input+0x1d4>)
 800fb62:	f007 fa4d 	bl	8017000 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb66:	4b67      	ldr	r3, [pc, #412]	; (800fd04 <tcp_listen_input+0x1c8>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	f003 0310 	and.w	r3, r3, #16
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d019      	beq.n	800fba6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb72:	4b68      	ldr	r3, [pc, #416]	; (800fd14 <tcp_listen_input+0x1d8>)
 800fb74:	6819      	ldr	r1, [r3, #0]
 800fb76:	4b68      	ldr	r3, [pc, #416]	; (800fd18 <tcp_listen_input+0x1dc>)
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	4b67      	ldr	r3, [pc, #412]	; (800fd1c <tcp_listen_input+0x1e0>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb82:	4b67      	ldr	r3, [pc, #412]	; (800fd20 <tcp_listen_input+0x1e4>)
 800fb84:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb86:	885b      	ldrh	r3, [r3, #2]
 800fb88:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb8a:	4a65      	ldr	r2, [pc, #404]	; (800fd20 <tcp_listen_input+0x1e4>)
 800fb8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8e:	8812      	ldrh	r2, [r2, #0]
 800fb90:	b292      	uxth	r2, r2
 800fb92:	9202      	str	r2, [sp, #8]
 800fb94:	9301      	str	r3, [sp, #4]
 800fb96:	4b63      	ldr	r3, [pc, #396]	; (800fd24 <tcp_listen_input+0x1e8>)
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	4b63      	ldr	r3, [pc, #396]	; (800fd28 <tcp_listen_input+0x1ec>)
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f003 fbd6 	bl	8013350 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fba4:	e0a9      	b.n	800fcfa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fba6:	4b57      	ldr	r3, [pc, #348]	; (800fd04 <tcp_listen_input+0x1c8>)
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	f003 0302 	and.w	r3, r3, #2
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f000 80a3 	beq.w	800fcfa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	7d5b      	ldrb	r3, [r3, #21]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff f85b 	bl	800ec74 <tcp_alloc>
 800fbbe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d111      	bne.n	800fbea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00a      	beq.n	800fbe4 <tcp_listen_input+0xa8>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	699b      	ldr	r3, [r3, #24]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	6910      	ldr	r0, [r2, #16]
 800fbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbda:	2100      	movs	r1, #0
 800fbdc:	4798      	blx	r3
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73bb      	strb	r3, [r7, #14]
      return;
 800fbe2:	e08b      	b.n	800fcfc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbe4:	23f0      	movs	r3, #240	; 0xf0
 800fbe6:	73bb      	strb	r3, [r7, #14]
      return;
 800fbe8:	e088      	b.n	800fcfc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbea:	4b50      	ldr	r3, [pc, #320]	; (800fd2c <tcp_listen_input+0x1f0>)
 800fbec:	695a      	ldr	r2, [r3, #20]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbf2:	4b4e      	ldr	r3, [pc, #312]	; (800fd2c <tcp_listen_input+0x1f0>)
 800fbf4:	691a      	ldr	r2, [r3, #16]
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8ada      	ldrh	r2, [r3, #22]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fc02:	4b47      	ldr	r3, [pc, #284]	; (800fd20 <tcp_listen_input+0x1e4>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2203      	movs	r2, #3
 800fc12:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc14:	4b41      	ldr	r3, [pc, #260]	; (800fd1c <tcp_listen_input+0x1e0>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fc26:	6978      	ldr	r0, [r7, #20]
 800fc28:	f7ff fa5a 	bl	800f0e0 <tcp_next_iss>
 800fc2c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	693a      	ldr	r2, [r7, #16]
 800fc38:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc46:	4b35      	ldr	r3, [pc, #212]	; (800fd1c <tcp_listen_input+0x1e0>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	1e5a      	subs	r2, r3, #1
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	691a      	ldr	r2, [r3, #16]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7a5b      	ldrb	r3, [r3, #9]
 800fc62:	f003 030c 	and.w	r3, r3, #12
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	7a1a      	ldrb	r2, [r3, #8]
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc74:	4b2e      	ldr	r3, [pc, #184]	; (800fd30 <tcp_listen_input+0x1f4>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	60da      	str	r2, [r3, #12]
 800fc7c:	4a2c      	ldr	r2, [pc, #176]	; (800fd30 <tcp_listen_input+0x1f4>)
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	f003 fd27 	bl	80136d4 <tcp_timer_needed>
 800fc86:	4b2b      	ldr	r3, [pc, #172]	; (800fd34 <tcp_listen_input+0x1f8>)
 800fc88:	2201      	movs	r2, #1
 800fc8a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc8c:	6978      	ldr	r0, [r7, #20]
 800fc8e:	f001 fd8d 	bl	80117ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc92:	4b23      	ldr	r3, [pc, #140]	; (800fd20 <tcp_listen_input+0x1e4>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	89db      	ldrh	r3, [r3, #14]
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f005 facf 	bl	8015258 <ip4_route>
 800fcba:	4601      	mov	r1, r0
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f7ff fa32 	bl	800f12c <tcp_eff_send_mss_netif>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	461a      	mov	r2, r3
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fcd0:	2112      	movs	r1, #18
 800fcd2:	6978      	ldr	r0, [r7, #20]
 800fcd4:	f002 fc9a 	bl	801260c <tcp_enqueue_flags>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fcdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d004      	beq.n	800fcee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fce4:	2100      	movs	r1, #0
 800fce6:	6978      	ldr	r0, [r7, #20]
 800fce8:	f7fd febc 	bl	800da64 <tcp_abandon>
      return;
 800fcec:	e006      	b.n	800fcfc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fcee:	6978      	ldr	r0, [r7, #20]
 800fcf0:	f002 fd7a 	bl	80127e8 <tcp_output>
  return;
 800fcf4:	e001      	b.n	800fcfa <tcp_listen_input+0x1be>
    return;
 800fcf6:	bf00      	nop
 800fcf8:	e000      	b.n	800fcfc <tcp_listen_input+0x1c0>
  return;
 800fcfa:	bf00      	nop
}
 800fcfc:	371c      	adds	r7, #28
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd90      	pop	{r4, r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20004b08 	.word	0x20004b08
 800fd08:	08019f40 	.word	0x08019f40
 800fd0c:	0801a138 	.word	0x0801a138
 800fd10:	08019f8c 	.word	0x08019f8c
 800fd14:	20004b00 	.word	0x20004b00
 800fd18:	20004b06 	.word	0x20004b06
 800fd1c:	20004afc 	.word	0x20004afc
 800fd20:	20004aec 	.word	0x20004aec
 800fd24:	200088fc 	.word	0x200088fc
 800fd28:	20008900 	.word	0x20008900
 800fd2c:	200088ec 	.word	0x200088ec
 800fd30:	20025840 	.word	0x20025840
 800fd34:	2002583c 	.word	0x2002583c

0800fd38 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af04      	add	r7, sp, #16
 800fd3e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd40:	4b2f      	ldr	r3, [pc, #188]	; (800fe00 <tcp_timewait_input+0xc8>)
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	f003 0304 	and.w	r3, r3, #4
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d153      	bne.n	800fdf4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d106      	bne.n	800fd60 <tcp_timewait_input+0x28>
 800fd52:	4b2c      	ldr	r3, [pc, #176]	; (800fe04 <tcp_timewait_input+0xcc>)
 800fd54:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fd58:	492b      	ldr	r1, [pc, #172]	; (800fe08 <tcp_timewait_input+0xd0>)
 800fd5a:	482c      	ldr	r0, [pc, #176]	; (800fe0c <tcp_timewait_input+0xd4>)
 800fd5c:	f007 f950 	bl	8017000 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd60:	4b27      	ldr	r3, [pc, #156]	; (800fe00 <tcp_timewait_input+0xc8>)
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	f003 0302 	and.w	r3, r3, #2
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d02a      	beq.n	800fdc2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd6c:	4b28      	ldr	r3, [pc, #160]	; (800fe10 <tcp_timewait_input+0xd8>)
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	db2d      	blt.n	800fdd6 <tcp_timewait_input+0x9e>
 800fd7a:	4b25      	ldr	r3, [pc, #148]	; (800fe10 <tcp_timewait_input+0xd8>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd86:	440b      	add	r3, r1
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	dc23      	bgt.n	800fdd6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd8e:	4b21      	ldr	r3, [pc, #132]	; (800fe14 <tcp_timewait_input+0xdc>)
 800fd90:	6819      	ldr	r1, [r3, #0]
 800fd92:	4b21      	ldr	r3, [pc, #132]	; (800fe18 <tcp_timewait_input+0xe0>)
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	461a      	mov	r2, r3
 800fd98:	4b1d      	ldr	r3, [pc, #116]	; (800fe10 <tcp_timewait_input+0xd8>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd9e:	4b1f      	ldr	r3, [pc, #124]	; (800fe1c <tcp_timewait_input+0xe4>)
 800fda0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda2:	885b      	ldrh	r3, [r3, #2]
 800fda4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fda6:	4a1d      	ldr	r2, [pc, #116]	; (800fe1c <tcp_timewait_input+0xe4>)
 800fda8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdaa:	8812      	ldrh	r2, [r2, #0]
 800fdac:	b292      	uxth	r2, r2
 800fdae:	9202      	str	r2, [sp, #8]
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	4b1b      	ldr	r3, [pc, #108]	; (800fe20 <tcp_timewait_input+0xe8>)
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	4b1b      	ldr	r3, [pc, #108]	; (800fe24 <tcp_timewait_input+0xec>)
 800fdb8:	4602      	mov	r2, r0
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f003 fac8 	bl	8013350 <tcp_rst>
      return;
 800fdc0:	e01b      	b.n	800fdfa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fdc2:	4b0f      	ldr	r3, [pc, #60]	; (800fe00 <tcp_timewait_input+0xc8>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 0301 	and.w	r3, r3, #1
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d003      	beq.n	800fdd6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fdce:	4b16      	ldr	r3, [pc, #88]	; (800fe28 <tcp_timewait_input+0xf0>)
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fdd6:	4b10      	ldr	r3, [pc, #64]	; (800fe18 <tcp_timewait_input+0xe0>)
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00c      	beq.n	800fdf8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	8b5b      	ldrh	r3, [r3, #26]
 800fde2:	f043 0302 	orr.w	r3, r3, #2
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f002 fcfb 	bl	80127e8 <tcp_output>
  }
  return;
 800fdf2:	e001      	b.n	800fdf8 <tcp_timewait_input+0xc0>
    return;
 800fdf4:	bf00      	nop
 800fdf6:	e000      	b.n	800fdfa <tcp_timewait_input+0xc2>
  return;
 800fdf8:	bf00      	nop
}
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	20004b08 	.word	0x20004b08
 800fe04:	08019f40 	.word	0x08019f40
 800fe08:	0801a158 	.word	0x0801a158
 800fe0c:	08019f8c 	.word	0x08019f8c
 800fe10:	20004afc 	.word	0x20004afc
 800fe14:	20004b00 	.word	0x20004b00
 800fe18:	20004b06 	.word	0x20004b06
 800fe1c:	20004aec 	.word	0x20004aec
 800fe20:	200088fc 	.word	0x200088fc
 800fe24:	20008900 	.word	0x20008900
 800fe28:	20025844 	.word	0x20025844

0800fe2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b08d      	sub	sp, #52	; 0x34
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <tcp_process+0x24>
 800fe42:	4ba5      	ldr	r3, [pc, #660]	; (80100d8 <tcp_process+0x2ac>)
 800fe44:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fe48:	49a4      	ldr	r1, [pc, #656]	; (80100dc <tcp_process+0x2b0>)
 800fe4a:	48a5      	ldr	r0, [pc, #660]	; (80100e0 <tcp_process+0x2b4>)
 800fe4c:	f007 f8d8 	bl	8017000 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe50:	4ba4      	ldr	r3, [pc, #656]	; (80100e4 <tcp_process+0x2b8>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 0304 	and.w	r3, r3, #4
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d04e      	beq.n	800fefa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	7d1b      	ldrb	r3, [r3, #20]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d108      	bne.n	800fe76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe68:	4b9f      	ldr	r3, [pc, #636]	; (80100e8 <tcp_process+0x2bc>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d123      	bne.n	800feb8 <tcp_process+0x8c>
        acceptable = 1;
 800fe70:	2301      	movs	r3, #1
 800fe72:	76fb      	strb	r3, [r7, #27]
 800fe74:	e020      	b.n	800feb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe7a:	4b9c      	ldr	r3, [pc, #624]	; (80100ec <tcp_process+0x2c0>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d102      	bne.n	800fe88 <tcp_process+0x5c>
        acceptable = 1;
 800fe82:	2301      	movs	r3, #1
 800fe84:	76fb      	strb	r3, [r7, #27]
 800fe86:	e017      	b.n	800feb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe88:	4b98      	ldr	r3, [pc, #608]	; (80100ec <tcp_process+0x2c0>)
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	db10      	blt.n	800feb8 <tcp_process+0x8c>
 800fe96:	4b95      	ldr	r3, [pc, #596]	; (80100ec <tcp_process+0x2c0>)
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9e:	6879      	ldr	r1, [r7, #4]
 800fea0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fea2:	440b      	add	r3, r1
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	dc06      	bgt.n	800feb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	8b5b      	ldrh	r3, [r3, #26]
 800feae:	f043 0302 	orr.w	r3, r3, #2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800feb8:	7efb      	ldrb	r3, [r7, #27]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d01b      	beq.n	800fef6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	7d1b      	ldrb	r3, [r3, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d106      	bne.n	800fed4 <tcp_process+0xa8>
 800fec6:	4b84      	ldr	r3, [pc, #528]	; (80100d8 <tcp_process+0x2ac>)
 800fec8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fecc:	4988      	ldr	r1, [pc, #544]	; (80100f0 <tcp_process+0x2c4>)
 800fece:	4884      	ldr	r0, [pc, #528]	; (80100e0 <tcp_process+0x2b4>)
 800fed0:	f007 f896 	bl	8017000 <iprintf>
      recv_flags |= TF_RESET;
 800fed4:	4b87      	ldr	r3, [pc, #540]	; (80100f4 <tcp_process+0x2c8>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	f043 0308 	orr.w	r3, r3, #8
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	4b85      	ldr	r3, [pc, #532]	; (80100f4 <tcp_process+0x2c8>)
 800fee0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8b5b      	ldrh	r3, [r3, #26]
 800fee6:	f023 0301 	bic.w	r3, r3, #1
 800feea:	b29a      	uxth	r2, r3
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fef0:	f06f 030d 	mvn.w	r3, #13
 800fef4:	e37a      	b.n	80105ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fef6:	2300      	movs	r3, #0
 800fef8:	e378      	b.n	80105ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fefa:	4b7a      	ldr	r3, [pc, #488]	; (80100e4 <tcp_process+0x2b8>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	f003 0302 	and.w	r3, r3, #2
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d010      	beq.n	800ff28 <tcp_process+0xfc>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	7d1b      	ldrb	r3, [r3, #20]
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d00c      	beq.n	800ff28 <tcp_process+0xfc>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	7d1b      	ldrb	r3, [r3, #20]
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d008      	beq.n	800ff28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	8b5b      	ldrh	r3, [r3, #26]
 800ff1a:	f043 0302 	orr.w	r3, r3, #2
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	e361      	b.n	80105ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	8b5b      	ldrh	r3, [r3, #26]
 800ff2c:	f003 0310 	and.w	r3, r3, #16
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d103      	bne.n	800ff3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff34:	4b70      	ldr	r3, [pc, #448]	; (80100f8 <tcp_process+0x2cc>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f001 fc2d 	bl	80117ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	7d1b      	ldrb	r3, [r3, #20]
 800ff56:	3b02      	subs	r3, #2
 800ff58:	2b07      	cmp	r3, #7
 800ff5a:	f200 8337 	bhi.w	80105cc <tcp_process+0x7a0>
 800ff5e:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <tcp_process+0x138>)
 800ff60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff64:	0800ff85 	.word	0x0800ff85
 800ff68:	080101b5 	.word	0x080101b5
 800ff6c:	0801032d 	.word	0x0801032d
 800ff70:	08010357 	.word	0x08010357
 800ff74:	0801047b 	.word	0x0801047b
 800ff78:	0801032d 	.word	0x0801032d
 800ff7c:	08010507 	.word	0x08010507
 800ff80:	08010597 	.word	0x08010597
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff84:	4b57      	ldr	r3, [pc, #348]	; (80100e4 <tcp_process+0x2b8>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 0310 	and.w	r3, r3, #16
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f000 80e4 	beq.w	801015a <tcp_process+0x32e>
 800ff92:	4b54      	ldr	r3, [pc, #336]	; (80100e4 <tcp_process+0x2b8>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	f003 0302 	and.w	r3, r3, #2
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 80dd 	beq.w	801015a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffa4:	1c5a      	adds	r2, r3, #1
 800ffa6:	4b50      	ldr	r3, [pc, #320]	; (80100e8 <tcp_process+0x2bc>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	f040 80d5 	bne.w	801015a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ffb0:	4b4e      	ldr	r3, [pc, #312]	; (80100ec <tcp_process+0x2c0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ffc2:	4b49      	ldr	r3, [pc, #292]	; (80100e8 <tcp_process+0x2bc>)
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ffca:	4b4c      	ldr	r3, [pc, #304]	; (80100fc <tcp_process+0x2d0>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	89db      	ldrh	r3, [r3, #14]
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ffe4:	4b41      	ldr	r3, [pc, #260]	; (80100ec <tcp_process+0x2c0>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	1e5a      	subs	r2, r3, #1
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2204      	movs	r2, #4
 800fff2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	3304      	adds	r3, #4
 800fffc:	4618      	mov	r0, r3
 800fffe:	f005 f92b 	bl	8015258 <ip4_route>
 8010002:	4601      	mov	r1, r0
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3304      	adds	r3, #4
 8010008:	461a      	mov	r2, r3
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff f88e 	bl	800f12c <tcp_eff_send_mss_netif>
 8010010:	4603      	mov	r3, r0
 8010012:	461a      	mov	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801001c:	009a      	lsls	r2, r3, #2
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	f241 111c 	movw	r1, #4380	; 0x111c
 8010028:	428b      	cmp	r3, r1
 801002a:	bf38      	it	cc
 801002c:	460b      	movcc	r3, r1
 801002e:	429a      	cmp	r2, r3
 8010030:	d204      	bcs.n	801003c <tcp_process+0x210>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	b29b      	uxth	r3, r3
 801003a:	e00d      	b.n	8010058 <tcp_process+0x22c>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010040:	005b      	lsls	r3, r3, #1
 8010042:	f241 121c 	movw	r2, #4380	; 0x111c
 8010046:	4293      	cmp	r3, r2
 8010048:	d904      	bls.n	8010054 <tcp_process+0x228>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	b29b      	uxth	r3, r3
 8010052:	e001      	b.n	8010058 <tcp_process+0x22c>
 8010054:	f241 131c 	movw	r3, #4380	; 0x111c
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010064:	2b00      	cmp	r3, #0
 8010066:	d106      	bne.n	8010076 <tcp_process+0x24a>
 8010068:	4b1b      	ldr	r3, [pc, #108]	; (80100d8 <tcp_process+0x2ac>)
 801006a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801006e:	4924      	ldr	r1, [pc, #144]	; (8010100 <tcp_process+0x2d4>)
 8010070:	481b      	ldr	r0, [pc, #108]	; (80100e0 <tcp_process+0x2b4>)
 8010072:	f006 ffc5 	bl	8017000 <iprintf>
        --pcb->snd_queuelen;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801007c:	3b01      	subs	r3, #1
 801007e:	b29a      	uxth	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801008a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d111      	bne.n	80100b6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010096:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d106      	bne.n	80100ac <tcp_process+0x280>
 801009e:	4b0e      	ldr	r3, [pc, #56]	; (80100d8 <tcp_process+0x2ac>)
 80100a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80100a4:	4917      	ldr	r1, [pc, #92]	; (8010104 <tcp_process+0x2d8>)
 80100a6:	480e      	ldr	r0, [pc, #56]	; (80100e0 <tcp_process+0x2b4>)
 80100a8:	f006 ffaa 	bl	8017000 <iprintf>
          pcb->unsent = rseg->next;
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80100b4:	e003      	b.n	80100be <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80100be:	69f8      	ldr	r0, [r7, #28]
 80100c0:	f7fe fc6f 	bl	800e9a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d11d      	bne.n	8010108 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80100d4:	e01f      	b.n	8010116 <tcp_process+0x2ea>
 80100d6:	bf00      	nop
 80100d8:	08019f40 	.word	0x08019f40
 80100dc:	0801a178 	.word	0x0801a178
 80100e0:	08019f8c 	.word	0x08019f8c
 80100e4:	20004b08 	.word	0x20004b08
 80100e8:	20004b00 	.word	0x20004b00
 80100ec:	20004afc 	.word	0x20004afc
 80100f0:	0801a194 	.word	0x0801a194
 80100f4:	20004b09 	.word	0x20004b09
 80100f8:	20025844 	.word	0x20025844
 80100fc:	20004aec 	.word	0x20004aec
 8010100:	0801a1b4 	.word	0x0801a1b4
 8010104:	0801a1cc 	.word	0x0801a1cc
        } else {
          pcb->rtime = 0;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2200      	movs	r2, #0
 8010112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00a      	beq.n	8010136 <tcp_process+0x30a>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	6910      	ldr	r0, [r2, #16]
 801012a:	2200      	movs	r2, #0
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	4798      	blx	r3
 8010130:	4603      	mov	r3, r0
 8010132:	76bb      	strb	r3, [r7, #26]
 8010134:	e001      	b.n	801013a <tcp_process+0x30e>
 8010136:	2300      	movs	r3, #0
 8010138:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801013a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801013e:	f113 0f0d 	cmn.w	r3, #13
 8010142:	d102      	bne.n	801014a <tcp_process+0x31e>
          return ERR_ABRT;
 8010144:	f06f 030c 	mvn.w	r3, #12
 8010148:	e250      	b.n	80105ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8b5b      	ldrh	r3, [r3, #26]
 801014e:	f043 0302 	orr.w	r3, r3, #2
 8010152:	b29a      	uxth	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010158:	e23a      	b.n	80105d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801015a:	4b9d      	ldr	r3, [pc, #628]	; (80103d0 <tcp_process+0x5a4>)
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	f003 0310 	and.w	r3, r3, #16
 8010162:	2b00      	cmp	r3, #0
 8010164:	f000 8234 	beq.w	80105d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010168:	4b9a      	ldr	r3, [pc, #616]	; (80103d4 <tcp_process+0x5a8>)
 801016a:	6819      	ldr	r1, [r3, #0]
 801016c:	4b9a      	ldr	r3, [pc, #616]	; (80103d8 <tcp_process+0x5ac>)
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	4b9a      	ldr	r3, [pc, #616]	; (80103dc <tcp_process+0x5b0>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010178:	4b99      	ldr	r3, [pc, #612]	; (80103e0 <tcp_process+0x5b4>)
 801017a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801017c:	885b      	ldrh	r3, [r3, #2]
 801017e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010180:	4a97      	ldr	r2, [pc, #604]	; (80103e0 <tcp_process+0x5b4>)
 8010182:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010184:	8812      	ldrh	r2, [r2, #0]
 8010186:	b292      	uxth	r2, r2
 8010188:	9202      	str	r2, [sp, #8]
 801018a:	9301      	str	r3, [sp, #4]
 801018c:	4b95      	ldr	r3, [pc, #596]	; (80103e4 <tcp_process+0x5b8>)
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	4b95      	ldr	r3, [pc, #596]	; (80103e8 <tcp_process+0x5bc>)
 8010192:	4602      	mov	r2, r0
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f003 f8db 	bl	8013350 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101a0:	2b05      	cmp	r3, #5
 80101a2:	f200 8215 	bhi.w	80105d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f002 fea5 	bl	8012efc <tcp_rexmit_rto>
      break;
 80101b2:	e20d      	b.n	80105d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80101b4:	4b86      	ldr	r3, [pc, #536]	; (80103d0 <tcp_process+0x5a4>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	f003 0310 	and.w	r3, r3, #16
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 80a1 	beq.w	8010304 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101c2:	4b84      	ldr	r3, [pc, #528]	; (80103d4 <tcp_process+0x5a8>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	3b01      	subs	r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	db7e      	blt.n	80102d0 <tcp_process+0x4a4>
 80101d2:	4b80      	ldr	r3, [pc, #512]	; (80103d4 <tcp_process+0x5a8>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dc77      	bgt.n	80102d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2204      	movs	r2, #4
 80101e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d102      	bne.n	80101f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101ee:	23fa      	movs	r3, #250	; 0xfa
 80101f0:	76bb      	strb	r3, [r7, #26]
 80101f2:	e01d      	b.n	8010230 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d106      	bne.n	801020c <tcp_process+0x3e0>
 80101fe:	4b7b      	ldr	r3, [pc, #492]	; (80103ec <tcp_process+0x5c0>)
 8010200:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010204:	497a      	ldr	r1, [pc, #488]	; (80103f0 <tcp_process+0x5c4>)
 8010206:	487b      	ldr	r0, [pc, #492]	; (80103f4 <tcp_process+0x5c8>)
 8010208:	f006 fefa 	bl	8017000 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <tcp_process+0x400>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	6910      	ldr	r0, [r2, #16]
 8010220:	2200      	movs	r2, #0
 8010222:	6879      	ldr	r1, [r7, #4]
 8010224:	4798      	blx	r3
 8010226:	4603      	mov	r3, r0
 8010228:	76bb      	strb	r3, [r7, #26]
 801022a:	e001      	b.n	8010230 <tcp_process+0x404>
 801022c:	23f0      	movs	r3, #240	; 0xf0
 801022e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010230:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00a      	beq.n	801024e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010238:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801023c:	f113 0f0d 	cmn.w	r3, #13
 8010240:	d002      	beq.n	8010248 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7fd fccc 	bl	800dbe0 <tcp_abort>
            }
            return ERR_ABRT;
 8010248:	f06f 030c 	mvn.w	r3, #12
 801024c:	e1ce      	b.n	80105ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fae0 	bl	8010814 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010254:	4b68      	ldr	r3, [pc, #416]	; (80103f8 <tcp_process+0x5cc>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d005      	beq.n	8010268 <tcp_process+0x43c>
            recv_acked--;
 801025c:	4b66      	ldr	r3, [pc, #408]	; (80103f8 <tcp_process+0x5cc>)
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	3b01      	subs	r3, #1
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b64      	ldr	r3, [pc, #400]	; (80103f8 <tcp_process+0x5cc>)
 8010266:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801026c:	009a      	lsls	r2, r3, #2
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	f241 111c 	movw	r1, #4380	; 0x111c
 8010278:	428b      	cmp	r3, r1
 801027a:	bf38      	it	cc
 801027c:	460b      	movcc	r3, r1
 801027e:	429a      	cmp	r2, r3
 8010280:	d204      	bcs.n	801028c <tcp_process+0x460>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	b29b      	uxth	r3, r3
 801028a:	e00d      	b.n	80102a8 <tcp_process+0x47c>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	f241 121c 	movw	r2, #4380	; 0x111c
 8010296:	4293      	cmp	r3, r2
 8010298:	d904      	bls.n	80102a4 <tcp_process+0x478>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	e001      	b.n	80102a8 <tcp_process+0x47c>
 80102a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80102ae:	4b53      	ldr	r3, [pc, #332]	; (80103fc <tcp_process+0x5d0>)
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	f003 0320 	and.w	r3, r3, #32
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d037      	beq.n	801032a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8b5b      	ldrh	r3, [r3, #26]
 80102be:	f043 0302 	orr.w	r3, r3, #2
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2207      	movs	r2, #7
 80102cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80102ce:	e02c      	b.n	801032a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d0:	4b40      	ldr	r3, [pc, #256]	; (80103d4 <tcp_process+0x5a8>)
 80102d2:	6819      	ldr	r1, [r3, #0]
 80102d4:	4b40      	ldr	r3, [pc, #256]	; (80103d8 <tcp_process+0x5ac>)
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	461a      	mov	r2, r3
 80102da:	4b40      	ldr	r3, [pc, #256]	; (80103dc <tcp_process+0x5b0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e0:	4b3f      	ldr	r3, [pc, #252]	; (80103e0 <tcp_process+0x5b4>)
 80102e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e4:	885b      	ldrh	r3, [r3, #2]
 80102e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e8:	4a3d      	ldr	r2, [pc, #244]	; (80103e0 <tcp_process+0x5b4>)
 80102ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ec:	8812      	ldrh	r2, [r2, #0]
 80102ee:	b292      	uxth	r2, r2
 80102f0:	9202      	str	r2, [sp, #8]
 80102f2:	9301      	str	r3, [sp, #4]
 80102f4:	4b3b      	ldr	r3, [pc, #236]	; (80103e4 <tcp_process+0x5b8>)
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	4b3b      	ldr	r3, [pc, #236]	; (80103e8 <tcp_process+0x5bc>)
 80102fa:	4602      	mov	r2, r0
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f003 f827 	bl	8013350 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010302:	e167      	b.n	80105d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010304:	4b32      	ldr	r3, [pc, #200]	; (80103d0 <tcp_process+0x5a4>)
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	f000 8161 	beq.w	80105d4 <tcp_process+0x7a8>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010316:	1e5a      	subs	r2, r3, #1
 8010318:	4b30      	ldr	r3, [pc, #192]	; (80103dc <tcp_process+0x5b0>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	429a      	cmp	r2, r3
 801031e:	f040 8159 	bne.w	80105d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f002 fe0c 	bl	8012f40 <tcp_rexmit>
      break;
 8010328:	e154      	b.n	80105d4 <tcp_process+0x7a8>
 801032a:	e153      	b.n	80105d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 fa71 	bl	8010814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010332:	4b32      	ldr	r3, [pc, #200]	; (80103fc <tcp_process+0x5d0>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f003 0320 	and.w	r3, r3, #32
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 814c 	beq.w	80105d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	8b5b      	ldrh	r3, [r3, #26]
 8010344:	f043 0302 	orr.w	r3, r3, #2
 8010348:	b29a      	uxth	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2207      	movs	r2, #7
 8010352:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010354:	e140      	b.n	80105d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fa5c 	bl	8010814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801035c:	4b27      	ldr	r3, [pc, #156]	; (80103fc <tcp_process+0x5d0>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	f003 0320 	and.w	r3, r3, #32
 8010364:	2b00      	cmp	r3, #0
 8010366:	d071      	beq.n	801044c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010368:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <tcp_process+0x5a4>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f003 0310 	and.w	r3, r3, #16
 8010370:	2b00      	cmp	r3, #0
 8010372:	d060      	beq.n	8010436 <tcp_process+0x60a>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010378:	4b16      	ldr	r3, [pc, #88]	; (80103d4 <tcp_process+0x5a8>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	429a      	cmp	r2, r3
 801037e:	d15a      	bne.n	8010436 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010384:	2b00      	cmp	r3, #0
 8010386:	d156      	bne.n	8010436 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8b5b      	ldrh	r3, [r3, #26]
 801038c:	f043 0302 	orr.w	r3, r3, #2
 8010390:	b29a      	uxth	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7fe fdbe 	bl	800ef18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801039c:	4b18      	ldr	r3, [pc, #96]	; (8010400 <tcp_process+0x5d4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d105      	bne.n	80103b2 <tcp_process+0x586>
 80103a6:	4b16      	ldr	r3, [pc, #88]	; (8010400 <tcp_process+0x5d4>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	4a14      	ldr	r2, [pc, #80]	; (8010400 <tcp_process+0x5d4>)
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	e02e      	b.n	8010410 <tcp_process+0x5e4>
 80103b2:	4b13      	ldr	r3, [pc, #76]	; (8010400 <tcp_process+0x5d4>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	e027      	b.n	801040a <tcp_process+0x5de>
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d11f      	bne.n	8010404 <tcp_process+0x5d8>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	68da      	ldr	r2, [r3, #12]
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	60da      	str	r2, [r3, #12]
 80103cc:	e020      	b.n	8010410 <tcp_process+0x5e4>
 80103ce:	bf00      	nop
 80103d0:	20004b08 	.word	0x20004b08
 80103d4:	20004b00 	.word	0x20004b00
 80103d8:	20004b06 	.word	0x20004b06
 80103dc:	20004afc 	.word	0x20004afc
 80103e0:	20004aec 	.word	0x20004aec
 80103e4:	200088fc 	.word	0x200088fc
 80103e8:	20008900 	.word	0x20008900
 80103ec:	08019f40 	.word	0x08019f40
 80103f0:	0801a1e0 	.word	0x0801a1e0
 80103f4:	08019f8c 	.word	0x08019f8c
 80103f8:	20004b04 	.word	0x20004b04
 80103fc:	20004b09 	.word	0x20004b09
 8010400:	20025840 	.word	0x20025840
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	617b      	str	r3, [r7, #20]
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1d4      	bne.n	80103ba <tcp_process+0x58e>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	60da      	str	r2, [r3, #12]
 8010416:	4b77      	ldr	r3, [pc, #476]	; (80105f4 <tcp_process+0x7c8>)
 8010418:	2201      	movs	r2, #1
 801041a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	220a      	movs	r2, #10
 8010420:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010422:	4b75      	ldr	r3, [pc, #468]	; (80105f8 <tcp_process+0x7cc>)
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	60da      	str	r2, [r3, #12]
 801042a:	4a73      	ldr	r2, [pc, #460]	; (80105f8 <tcp_process+0x7cc>)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	f003 f950 	bl	80136d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010434:	e0d2      	b.n	80105dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	8b5b      	ldrh	r3, [r3, #26]
 801043a:	f043 0302 	orr.w	r3, r3, #2
 801043e:	b29a      	uxth	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2208      	movs	r2, #8
 8010448:	751a      	strb	r2, [r3, #20]
      break;
 801044a:	e0c7      	b.n	80105dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801044c:	4b6b      	ldr	r3, [pc, #428]	; (80105fc <tcp_process+0x7d0>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	f003 0310 	and.w	r3, r3, #16
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80c1 	beq.w	80105dc <tcp_process+0x7b0>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801045e:	4b68      	ldr	r3, [pc, #416]	; (8010600 <tcp_process+0x7d4>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	f040 80ba 	bne.w	80105dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801046c:	2b00      	cmp	r3, #0
 801046e:	f040 80b5 	bne.w	80105dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2206      	movs	r2, #6
 8010476:	751a      	strb	r2, [r3, #20]
      break;
 8010478:	e0b0      	b.n	80105dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9ca 	bl	8010814 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010480:	4b60      	ldr	r3, [pc, #384]	; (8010604 <tcp_process+0x7d8>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	f003 0320 	and.w	r3, r3, #32
 8010488:	2b00      	cmp	r3, #0
 801048a:	f000 80a9 	beq.w	80105e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	8b5b      	ldrh	r3, [r3, #26]
 8010492:	f043 0302 	orr.w	r3, r3, #2
 8010496:	b29a      	uxth	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7fe fd3b 	bl	800ef18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104a2:	4b59      	ldr	r3, [pc, #356]	; (8010608 <tcp_process+0x7dc>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d105      	bne.n	80104b8 <tcp_process+0x68c>
 80104ac:	4b56      	ldr	r3, [pc, #344]	; (8010608 <tcp_process+0x7dc>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	4a55      	ldr	r2, [pc, #340]	; (8010608 <tcp_process+0x7dc>)
 80104b4:	6013      	str	r3, [r2, #0]
 80104b6:	e013      	b.n	80104e0 <tcp_process+0x6b4>
 80104b8:	4b53      	ldr	r3, [pc, #332]	; (8010608 <tcp_process+0x7dc>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	613b      	str	r3, [r7, #16]
 80104be:	e00c      	b.n	80104da <tcp_process+0x6ae>
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d104      	bne.n	80104d4 <tcp_process+0x6a8>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	68da      	ldr	r2, [r3, #12]
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	60da      	str	r2, [r3, #12]
 80104d2:	e005      	b.n	80104e0 <tcp_process+0x6b4>
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	613b      	str	r3, [r7, #16]
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1ef      	bne.n	80104c0 <tcp_process+0x694>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	60da      	str	r2, [r3, #12]
 80104e6:	4b43      	ldr	r3, [pc, #268]	; (80105f4 <tcp_process+0x7c8>)
 80104e8:	2201      	movs	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	220a      	movs	r2, #10
 80104f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104f2:	4b41      	ldr	r3, [pc, #260]	; (80105f8 <tcp_process+0x7cc>)
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	60da      	str	r2, [r3, #12]
 80104fa:	4a3f      	ldr	r2, [pc, #252]	; (80105f8 <tcp_process+0x7cc>)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	f003 f8e8 	bl	80136d4 <tcp_timer_needed>
      }
      break;
 8010504:	e06c      	b.n	80105e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f984 	bl	8010814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801050c:	4b3b      	ldr	r3, [pc, #236]	; (80105fc <tcp_process+0x7d0>)
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	f003 0310 	and.w	r3, r3, #16
 8010514:	2b00      	cmp	r3, #0
 8010516:	d065      	beq.n	80105e4 <tcp_process+0x7b8>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801051c:	4b38      	ldr	r3, [pc, #224]	; (8010600 <tcp_process+0x7d4>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	429a      	cmp	r2, r3
 8010522:	d15f      	bne.n	80105e4 <tcp_process+0x7b8>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010528:	2b00      	cmp	r3, #0
 801052a:	d15b      	bne.n	80105e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7fe fcf3 	bl	800ef18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010532:	4b35      	ldr	r3, [pc, #212]	; (8010608 <tcp_process+0x7dc>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	429a      	cmp	r2, r3
 801053a:	d105      	bne.n	8010548 <tcp_process+0x71c>
 801053c:	4b32      	ldr	r3, [pc, #200]	; (8010608 <tcp_process+0x7dc>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	4a31      	ldr	r2, [pc, #196]	; (8010608 <tcp_process+0x7dc>)
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	e013      	b.n	8010570 <tcp_process+0x744>
 8010548:	4b2f      	ldr	r3, [pc, #188]	; (8010608 <tcp_process+0x7dc>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	60fb      	str	r3, [r7, #12]
 801054e:	e00c      	b.n	801056a <tcp_process+0x73e>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	429a      	cmp	r2, r3
 8010558:	d104      	bne.n	8010564 <tcp_process+0x738>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68da      	ldr	r2, [r3, #12]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	60da      	str	r2, [r3, #12]
 8010562:	e005      	b.n	8010570 <tcp_process+0x744>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1ef      	bne.n	8010550 <tcp_process+0x724>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	60da      	str	r2, [r3, #12]
 8010576:	4b1f      	ldr	r3, [pc, #124]	; (80105f4 <tcp_process+0x7c8>)
 8010578:	2201      	movs	r2, #1
 801057a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	220a      	movs	r2, #10
 8010580:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010582:	4b1d      	ldr	r3, [pc, #116]	; (80105f8 <tcp_process+0x7cc>)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	60da      	str	r2, [r3, #12]
 801058a:	4a1b      	ldr	r2, [pc, #108]	; (80105f8 <tcp_process+0x7cc>)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6013      	str	r3, [r2, #0]
 8010590:	f003 f8a0 	bl	80136d4 <tcp_timer_needed>
      }
      break;
 8010594:	e026      	b.n	80105e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 f93c 	bl	8010814 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801059c:	4b17      	ldr	r3, [pc, #92]	; (80105fc <tcp_process+0x7d0>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f003 0310 	and.w	r3, r3, #16
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d01f      	beq.n	80105e8 <tcp_process+0x7bc>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ac:	4b14      	ldr	r3, [pc, #80]	; (8010600 <tcp_process+0x7d4>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d119      	bne.n	80105e8 <tcp_process+0x7bc>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d115      	bne.n	80105e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80105bc:	4b11      	ldr	r3, [pc, #68]	; (8010604 <tcp_process+0x7d8>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	f043 0310 	orr.w	r3, r3, #16
 80105c4:	b2da      	uxtb	r2, r3
 80105c6:	4b0f      	ldr	r3, [pc, #60]	; (8010604 <tcp_process+0x7d8>)
 80105c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80105ca:	e00d      	b.n	80105e8 <tcp_process+0x7bc>
    default:
      break;
 80105cc:	bf00      	nop
 80105ce:	e00c      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105d0:	bf00      	nop
 80105d2:	e00a      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105d4:	bf00      	nop
 80105d6:	e008      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105d8:	bf00      	nop
 80105da:	e006      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105dc:	bf00      	nop
 80105de:	e004      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105e0:	bf00      	nop
 80105e2:	e002      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105e4:	bf00      	nop
 80105e6:	e000      	b.n	80105ea <tcp_process+0x7be>
      break;
 80105e8:	bf00      	nop
  }
  return ERR_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3724      	adds	r7, #36	; 0x24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd90      	pop	{r4, r7, pc}
 80105f4:	2002583c 	.word	0x2002583c
 80105f8:	20025850 	.word	0x20025850
 80105fc:	20004b08 	.word	0x20004b08
 8010600:	20004b00 	.word	0x20004b00
 8010604:	20004b09 	.word	0x20004b09
 8010608:	20025840 	.word	0x20025840

0801060c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801060c:	b590      	push	{r4, r7, lr}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d106      	bne.n	801062a <tcp_oos_insert_segment+0x1e>
 801061c:	4b3b      	ldr	r3, [pc, #236]	; (801070c <tcp_oos_insert_segment+0x100>)
 801061e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010622:	493b      	ldr	r1, [pc, #236]	; (8010710 <tcp_oos_insert_segment+0x104>)
 8010624:	483b      	ldr	r0, [pc, #236]	; (8010714 <tcp_oos_insert_segment+0x108>)
 8010626:	f006 fceb 	bl	8017000 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	899b      	ldrh	r3, [r3, #12]
 8010630:	b29b      	uxth	r3, r3
 8010632:	4618      	mov	r0, r3
 8010634:	f7fb f934 	bl	800b8a0 <lwip_htons>
 8010638:	4603      	mov	r3, r0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	f003 0301 	and.w	r3, r3, #1
 8010640:	2b00      	cmp	r3, #0
 8010642:	d028      	beq.n	8010696 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010644:	6838      	ldr	r0, [r7, #0]
 8010646:	f7fe f997 	bl	800e978 <tcp_segs_free>
    next = NULL;
 801064a:	2300      	movs	r3, #0
 801064c:	603b      	str	r3, [r7, #0]
 801064e:	e056      	b.n	80106fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	899b      	ldrh	r3, [r3, #12]
 8010656:	b29b      	uxth	r3, r3
 8010658:	4618      	mov	r0, r3
 801065a:	f7fb f921 	bl	800b8a0 <lwip_htons>
 801065e:	4603      	mov	r3, r0
 8010660:	b2db      	uxtb	r3, r3
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00d      	beq.n	8010686 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	899b      	ldrh	r3, [r3, #12]
 8010670:	b29c      	uxth	r4, r3
 8010672:	2001      	movs	r0, #1
 8010674:	f7fb f914 	bl	800b8a0 <lwip_htons>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	4322      	orrs	r2, r4
 8010682:	b292      	uxth	r2, r2
 8010684:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f7fe f986 	bl	800e9a2 <tcp_seg_free>
    while (next &&
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00e      	beq.n	80106ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	891b      	ldrh	r3, [r3, #8]
 80106a0:	461a      	mov	r2, r3
 80106a2:	4b1d      	ldr	r3, [pc, #116]	; (8010718 <tcp_oos_insert_segment+0x10c>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	441a      	add	r2, r3
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	6839      	ldr	r1, [r7, #0]
 80106b0:	8909      	ldrh	r1, [r1, #8]
 80106b2:	440b      	add	r3, r1
 80106b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	daca      	bge.n	8010650 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d01e      	beq.n	80106fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	891b      	ldrh	r3, [r3, #8]
 80106c4:	461a      	mov	r2, r3
 80106c6:	4b14      	ldr	r3, [pc, #80]	; (8010718 <tcp_oos_insert_segment+0x10c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	441a      	add	r2, r3
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	dd12      	ble.n	80106fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	b29a      	uxth	r2, r3
 80106e0:	4b0d      	ldr	r3, [pc, #52]	; (8010718 <tcp_oos_insert_segment+0x10c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	891b      	ldrh	r3, [r3, #8]
 80106f6:	4619      	mov	r1, r3
 80106f8:	4610      	mov	r0, r2
 80106fa:	f7fc fafb 	bl	800ccf4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	683a      	ldr	r2, [r7, #0]
 8010702:	601a      	str	r2, [r3, #0]
}
 8010704:	bf00      	nop
 8010706:	3714      	adds	r7, #20
 8010708:	46bd      	mov	sp, r7
 801070a:	bd90      	pop	{r4, r7, pc}
 801070c:	08019f40 	.word	0x08019f40
 8010710:	0801a200 	.word	0x0801a200
 8010714:	08019f8c 	.word	0x08019f8c
 8010718:	20004afc 	.word	0x20004afc

0801071c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801071c:	b5b0      	push	{r4, r5, r7, lr}
 801071e:	b086      	sub	sp, #24
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801072a:	e03e      	b.n	80107aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	4618      	mov	r0, r3
 801073c:	f7fc fcee 	bl	800d11c <pbuf_clen>
 8010740:	4603      	mov	r3, r0
 8010742:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801074a:	8a7a      	ldrh	r2, [r7, #18]
 801074c:	429a      	cmp	r2, r3
 801074e:	d906      	bls.n	801075e <tcp_free_acked_segments+0x42>
 8010750:	4b2a      	ldr	r3, [pc, #168]	; (80107fc <tcp_free_acked_segments+0xe0>)
 8010752:	f240 4257 	movw	r2, #1111	; 0x457
 8010756:	492a      	ldr	r1, [pc, #168]	; (8010800 <tcp_free_acked_segments+0xe4>)
 8010758:	482a      	ldr	r0, [pc, #168]	; (8010804 <tcp_free_acked_segments+0xe8>)
 801075a:	f006 fc51 	bl	8017000 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010764:	8a7b      	ldrh	r3, [r7, #18]
 8010766:	1ad3      	subs	r3, r2, r3
 8010768:	b29a      	uxth	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	891a      	ldrh	r2, [r3, #8]
 8010774:	4b24      	ldr	r3, [pc, #144]	; (8010808 <tcp_free_acked_segments+0xec>)
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	4413      	add	r3, r2
 801077a:	b29a      	uxth	r2, r3
 801077c:	4b22      	ldr	r3, [pc, #136]	; (8010808 <tcp_free_acked_segments+0xec>)
 801077e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010780:	6978      	ldr	r0, [r7, #20]
 8010782:	f7fe f90e 	bl	800e9a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00c      	beq.n	80107aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d109      	bne.n	80107aa <tcp_free_acked_segments+0x8e>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d106      	bne.n	80107aa <tcp_free_acked_segments+0x8e>
 801079c:	4b17      	ldr	r3, [pc, #92]	; (80107fc <tcp_free_acked_segments+0xe0>)
 801079e:	f240 4261 	movw	r2, #1121	; 0x461
 80107a2:	491a      	ldr	r1, [pc, #104]	; (801080c <tcp_free_acked_segments+0xf0>)
 80107a4:	4817      	ldr	r0, [pc, #92]	; (8010804 <tcp_free_acked_segments+0xe8>)
 80107a6:	f006 fc2b 	bl	8017000 <iprintf>
  while (seg_list != NULL &&
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d020      	beq.n	80107f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fb f887 	bl	800b8ca <lwip_htonl>
 80107bc:	4604      	mov	r4, r0
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	891b      	ldrh	r3, [r3, #8]
 80107c2:	461d      	mov	r5, r3
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	899b      	ldrh	r3, [r3, #12]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fb f867 	bl	800b8a0 <lwip_htons>
 80107d2:	4603      	mov	r3, r0
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	f003 0303 	and.w	r3, r3, #3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <tcp_free_acked_segments+0xc6>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <tcp_free_acked_segments+0xc8>
 80107e2:	2300      	movs	r3, #0
 80107e4:	442b      	add	r3, r5
 80107e6:	18e2      	adds	r2, r4, r3
 80107e8:	4b09      	ldr	r3, [pc, #36]	; (8010810 <tcp_free_acked_segments+0xf4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	dd9c      	ble.n	801072c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80107f2:	68bb      	ldr	r3, [r7, #8]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3718      	adds	r7, #24
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bdb0      	pop	{r4, r5, r7, pc}
 80107fc:	08019f40 	.word	0x08019f40
 8010800:	0801a228 	.word	0x0801a228
 8010804:	08019f8c 	.word	0x08019f8c
 8010808:	20004b04 	.word	0x20004b04
 801080c:	0801a250 	.word	0x0801a250
 8010810:	20004b00 	.word	0x20004b00

08010814 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010814:	b5b0      	push	{r4, r5, r7, lr}
 8010816:	b094      	sub	sp, #80	; 0x50
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801081c:	2300      	movs	r3, #0
 801081e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d106      	bne.n	8010834 <tcp_receive+0x20>
 8010826:	4ba6      	ldr	r3, [pc, #664]	; (8010ac0 <tcp_receive+0x2ac>)
 8010828:	f240 427b 	movw	r2, #1147	; 0x47b
 801082c:	49a5      	ldr	r1, [pc, #660]	; (8010ac4 <tcp_receive+0x2b0>)
 801082e:	48a6      	ldr	r0, [pc, #664]	; (8010ac8 <tcp_receive+0x2b4>)
 8010830:	f006 fbe6 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	7d1b      	ldrb	r3, [r3, #20]
 8010838:	2b03      	cmp	r3, #3
 801083a:	d806      	bhi.n	801084a <tcp_receive+0x36>
 801083c:	4ba0      	ldr	r3, [pc, #640]	; (8010ac0 <tcp_receive+0x2ac>)
 801083e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010842:	49a2      	ldr	r1, [pc, #648]	; (8010acc <tcp_receive+0x2b8>)
 8010844:	48a0      	ldr	r0, [pc, #640]	; (8010ac8 <tcp_receive+0x2b4>)
 8010846:	f006 fbdb 	bl	8017000 <iprintf>

  if (flags & TCP_ACK) {
 801084a:	4ba1      	ldr	r3, [pc, #644]	; (8010ad0 <tcp_receive+0x2bc>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	f003 0310 	and.w	r3, r3, #16
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 8263 	beq.w	8010d1e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801085e:	461a      	mov	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010864:	4413      	add	r3, r2
 8010866:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801086c:	4b99      	ldr	r3, [pc, #612]	; (8010ad4 <tcp_receive+0x2c0>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	db1b      	blt.n	80108ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801087a:	4b96      	ldr	r3, [pc, #600]	; (8010ad4 <tcp_receive+0x2c0>)
 801087c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801087e:	429a      	cmp	r2, r3
 8010880:	d106      	bne.n	8010890 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010886:	4b94      	ldr	r3, [pc, #592]	; (8010ad8 <tcp_receive+0x2c4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	db0e      	blt.n	80108ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010894:	4b90      	ldr	r3, [pc, #576]	; (8010ad8 <tcp_receive+0x2c4>)
 8010896:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010898:	429a      	cmp	r2, r3
 801089a:	d125      	bne.n	80108e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801089c:	4b8f      	ldr	r3, [pc, #572]	; (8010adc <tcp_receive+0x2c8>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	89db      	ldrh	r3, [r3, #14]
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d91c      	bls.n	80108e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80108ae:	4b8b      	ldr	r3, [pc, #556]	; (8010adc <tcp_receive+0x2c8>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	89db      	ldrh	r3, [r3, #14]
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d205      	bcs.n	80108d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80108d8:	4b7e      	ldr	r3, [pc, #504]	; (8010ad4 <tcp_receive+0x2c0>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80108e0:	4b7d      	ldr	r3, [pc, #500]	; (8010ad8 <tcp_receive+0x2c4>)
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108e8:	4b7b      	ldr	r3, [pc, #492]	; (8010ad8 <tcp_receive+0x2c4>)
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	dc58      	bgt.n	80109a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80108f6:	4b7a      	ldr	r3, [pc, #488]	; (8010ae0 <tcp_receive+0x2cc>)
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d14b      	bne.n	8010996 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010908:	4413      	add	r3, r2
 801090a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801090c:	429a      	cmp	r2, r3
 801090e:	d142      	bne.n	8010996 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010916:	2b00      	cmp	r3, #0
 8010918:	db3d      	blt.n	8010996 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801091e:	4b6e      	ldr	r3, [pc, #440]	; (8010ad8 <tcp_receive+0x2c4>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	429a      	cmp	r2, r3
 8010924:	d137      	bne.n	8010996 <tcp_receive+0x182>
              found_dupack = 1;
 8010926:	2301      	movs	r3, #1
 8010928:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010930:	2bff      	cmp	r3, #255	; 0xff
 8010932:	d007      	beq.n	8010944 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801093a:	3301      	adds	r3, #1
 801093c:	b2da      	uxtb	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801094a:	2b03      	cmp	r3, #3
 801094c:	d91b      	bls.n	8010986 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010958:	4413      	add	r3, r2
 801095a:	b29a      	uxth	r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010962:	429a      	cmp	r2, r3
 8010964:	d30a      	bcc.n	801097c <tcp_receive+0x168>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010970:	4413      	add	r3, r2
 8010972:	b29a      	uxth	r2, r3
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801097a:	e004      	b.n	8010986 <tcp_receive+0x172>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801098c:	2b02      	cmp	r3, #2
 801098e:	d902      	bls.n	8010996 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f002 fb41 	bl	8013018 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010998:	2b00      	cmp	r3, #0
 801099a:	f040 8160 	bne.w	8010c5e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109a6:	e15a      	b.n	8010c5e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109a8:	4b4b      	ldr	r3, [pc, #300]	; (8010ad8 <tcp_receive+0x2c4>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	3b01      	subs	r3, #1
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f2c0 814d 	blt.w	8010c54 <tcp_receive+0x440>
 80109ba:	4b47      	ldr	r3, [pc, #284]	; (8010ad8 <tcp_receive+0x2c4>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f300 8145 	bgt.w	8010c54 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	8b5b      	ldrh	r3, [r3, #26]
 80109ce:	f003 0304 	and.w	r3, r3, #4
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d010      	beq.n	80109f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	8b5b      	ldrh	r3, [r3, #26]
 80109da:	f023 0304 	bic.w	r3, r3, #4
 80109de:	b29a      	uxth	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a06:	10db      	asrs	r3, r3, #3
 8010a08:	b21b      	sxth	r3, r3
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	4413      	add	r3, r2
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	b21a      	sxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010a20:	4b2d      	ldr	r3, [pc, #180]	; (8010ad8 <tcp_receive+0x2c4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a38:	4b27      	ldr	r3, [pc, #156]	; (8010ad8 <tcp_receive+0x2c4>)
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	7d1b      	ldrb	r3, [r3, #20]
 8010a44:	2b03      	cmp	r3, #3
 8010a46:	f240 8096 	bls.w	8010b76 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d244      	bcs.n	8010ae4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	8b5b      	ldrh	r3, [r3, #26]
 8010a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <tcp_receive+0x256>
 8010a66:	2301      	movs	r3, #1
 8010a68:	e000      	b.n	8010a6c <tcp_receive+0x258>
 8010a6a:	2302      	movs	r3, #2
 8010a6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a7a:	fb12 f303 	smulbb	r3, r2, r3
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a82:	4293      	cmp	r3, r2
 8010a84:	bf28      	it	cs
 8010a86:	4613      	movcs	r3, r2
 8010a88:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a92:	4413      	add	r3, r2
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d309      	bcc.n	8010ab4 <tcp_receive+0x2a0>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010aa8:	4413      	add	r3, r2
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ab2:	e060      	b.n	8010b76 <tcp_receive+0x362>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010abe:	e05a      	b.n	8010b76 <tcp_receive+0x362>
 8010ac0:	08019f40 	.word	0x08019f40
 8010ac4:	0801a270 	.word	0x0801a270
 8010ac8:	08019f8c 	.word	0x08019f8c
 8010acc:	0801a28c 	.word	0x0801a28c
 8010ad0:	20004b08 	.word	0x20004b08
 8010ad4:	20004afc 	.word	0x20004afc
 8010ad8:	20004b00 	.word	0x20004b00
 8010adc:	20004aec 	.word	0x20004aec
 8010ae0:	20004b06 	.word	0x20004b06
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010aec:	4413      	add	r3, r2
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d309      	bcc.n	8010b0e <tcp_receive+0x2fa>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b02:	4413      	add	r3, r2
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010b0c:	e004      	b.n	8010b18 <tcp_receive+0x304>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d326      	bcc.n	8010b76 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b48:	4413      	add	r3, r2
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d30a      	bcc.n	8010b6c <tcp_receive+0x358>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b60:	4413      	add	r3, r2
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b6a:	e004      	b.n	8010b76 <tcp_receive+0x362>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b7e:	4a98      	ldr	r2, [pc, #608]	; (8010de0 <tcp_receive+0x5cc>)
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fdcb 	bl	801071c <tcp_free_acked_segments>
 8010b86:	4602      	mov	r2, r0
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b94:	4a93      	ldr	r2, [pc, #588]	; (8010de4 <tcp_receive+0x5d0>)
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff fdc0 	bl	801071c <tcp_free_acked_segments>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d104      	bne.n	8010bb4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bb0:	861a      	strh	r2, [r3, #48]	; 0x30
 8010bb2:	e002      	b.n	8010bba <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d103      	bne.n	8010bd0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010bd6:	4b84      	ldr	r3, [pc, #528]	; (8010de8 <tcp_receive+0x5d4>)
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	4413      	add	r3, r2
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	8b5b      	ldrh	r3, [r3, #26]
 8010be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d035      	beq.n	8010c5c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d118      	bne.n	8010c2a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00c      	beq.n	8010c1a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fa fe5c 	bl	800b8ca <lwip_htonl>
 8010c12:	4603      	mov	r3, r0
 8010c14:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dc20      	bgt.n	8010c5c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c28:	e018      	b.n	8010c5c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fa fe47 	bl	800b8ca <lwip_htonl>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	1ae3      	subs	r3, r4, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	dc0b      	bgt.n	8010c5c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	8b5b      	ldrh	r3, [r3, #26]
 8010c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c52:	e003      	b.n	8010c5c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f002 fbcd 	bl	80133f4 <tcp_send_empty_ack>
 8010c5a:	e000      	b.n	8010c5e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c5c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d05b      	beq.n	8010d1e <tcp_receive+0x50a>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c6a:	4b60      	ldr	r3, [pc, #384]	; (8010dec <tcp_receive+0x5d8>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	da54      	bge.n	8010d1e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c74:	4b5e      	ldr	r3, [pc, #376]	; (8010df0 <tcp_receive+0x5dc>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c92:	10db      	asrs	r3, r3, #3
 8010c94:	b21b      	sxth	r3, r3
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cac:	4413      	add	r3, r2
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	b21a      	sxth	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010cb6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	da05      	bge.n	8010cca <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cc2:	425b      	negs	r3, r3
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010cca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cd4:	109b      	asrs	r3, r3, #2
 8010cd6:	b21b      	sxth	r3, r3
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cee:	4413      	add	r3, r2
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	b21a      	sxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cfe:	10db      	asrs	r3, r3, #3
 8010d00:	b21b      	sxth	r3, r3
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	4413      	add	r3, r2
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	b21a      	sxth	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010d1e:	4b35      	ldr	r3, [pc, #212]	; (8010df4 <tcp_receive+0x5e0>)
 8010d20:	881b      	ldrh	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f000 84e1 	beq.w	80116ea <tcp_receive+0xed6>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	7d1b      	ldrb	r3, [r3, #20]
 8010d2c:	2b06      	cmp	r3, #6
 8010d2e:	f200 84dc 	bhi.w	80116ea <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d36:	4b30      	ldr	r3, [pc, #192]	; (8010df8 <tcp_receive+0x5e4>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f2c0 808e 	blt.w	8010e60 <tcp_receive+0x64c>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d48:	4b2a      	ldr	r3, [pc, #168]	; (8010df4 <tcp_receive+0x5e0>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	4b2a      	ldr	r3, [pc, #168]	; (8010df8 <tcp_receive+0x5e4>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	440b      	add	r3, r1
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	3301      	adds	r3, #1
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f300 8081 	bgt.w	8010e60 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d5e:	4b27      	ldr	r3, [pc, #156]	; (8010dfc <tcp_receive+0x5e8>)
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d68:	4b23      	ldr	r3, [pc, #140]	; (8010df8 <tcp_receive+0x5e4>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d70:	4b22      	ldr	r3, [pc, #136]	; (8010dfc <tcp_receive+0x5e8>)
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d106      	bne.n	8010d86 <tcp_receive+0x572>
 8010d78:	4b21      	ldr	r3, [pc, #132]	; (8010e00 <tcp_receive+0x5ec>)
 8010d7a:	f240 5294 	movw	r2, #1428	; 0x594
 8010d7e:	4921      	ldr	r1, [pc, #132]	; (8010e04 <tcp_receive+0x5f0>)
 8010d80:	4821      	ldr	r0, [pc, #132]	; (8010e08 <tcp_receive+0x5f4>)
 8010d82:	f006 f93d 	bl	8017000 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d906      	bls.n	8010d9e <tcp_receive+0x58a>
 8010d90:	4b1b      	ldr	r3, [pc, #108]	; (8010e00 <tcp_receive+0x5ec>)
 8010d92:	f240 5295 	movw	r2, #1429	; 0x595
 8010d96:	491d      	ldr	r1, [pc, #116]	; (8010e0c <tcp_receive+0x5f8>)
 8010d98:	481b      	ldr	r0, [pc, #108]	; (8010e08 <tcp_receive+0x5f4>)
 8010d9a:	f006 f931 	bl	8017000 <iprintf>
      off = (u16_t)off32;
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <tcp_receive+0x5e8>)
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	891b      	ldrh	r3, [r3, #8]
 8010daa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d906      	bls.n	8010dc0 <tcp_receive+0x5ac>
 8010db2:	4b13      	ldr	r3, [pc, #76]	; (8010e00 <tcp_receive+0x5ec>)
 8010db4:	f240 5297 	movw	r2, #1431	; 0x597
 8010db8:	4915      	ldr	r1, [pc, #84]	; (8010e10 <tcp_receive+0x5fc>)
 8010dba:	4813      	ldr	r0, [pc, #76]	; (8010e08 <tcp_receive+0x5f4>)
 8010dbc:	f006 f920 	bl	8017000 <iprintf>
      inseg.len -= off;
 8010dc0:	4b0e      	ldr	r3, [pc, #56]	; (8010dfc <tcp_receive+0x5e8>)
 8010dc2:	891a      	ldrh	r2, [r3, #8]
 8010dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	4b0b      	ldr	r3, [pc, #44]	; (8010dfc <tcp_receive+0x5e8>)
 8010dce:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010dd0:	4b0a      	ldr	r3, [pc, #40]	; (8010dfc <tcp_receive+0x5e8>)
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	891a      	ldrh	r2, [r3, #8]
 8010dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010dde:	e029      	b.n	8010e34 <tcp_receive+0x620>
 8010de0:	0801a2a8 	.word	0x0801a2a8
 8010de4:	0801a2b0 	.word	0x0801a2b0
 8010de8:	20004b04 	.word	0x20004b04
 8010dec:	20004b00 	.word	0x20004b00
 8010df0:	20025844 	.word	0x20025844
 8010df4:	20004b06 	.word	0x20004b06
 8010df8:	20004afc 	.word	0x20004afc
 8010dfc:	20004adc 	.word	0x20004adc
 8010e00:	08019f40 	.word	0x08019f40
 8010e04:	0801a2b8 	.word	0x0801a2b8
 8010e08:	08019f8c 	.word	0x08019f8c
 8010e0c:	0801a2c8 	.word	0x0801a2c8
 8010e10:	0801a2d8 	.word	0x0801a2d8
        off -= p->len;
 8010e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e16:	895b      	ldrh	r3, [r3, #10]
 8010e18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e1c:	1ad3      	subs	r3, r2, r3
 8010e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e36:	895b      	ldrh	r3, [r3, #10]
 8010e38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d8e9      	bhi.n	8010e14 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e44:	4619      	mov	r1, r3
 8010e46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e48:	f7fc f854 	bl	800cef4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e50:	4a91      	ldr	r2, [pc, #580]	; (8011098 <tcp_receive+0x884>)
 8010e52:	6013      	str	r3, [r2, #0]
 8010e54:	4b91      	ldr	r3, [pc, #580]	; (801109c <tcp_receive+0x888>)
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	4a8f      	ldr	r2, [pc, #572]	; (8011098 <tcp_receive+0x884>)
 8010e5a:	6812      	ldr	r2, [r2, #0]
 8010e5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e5e:	e00d      	b.n	8010e7c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e60:	4b8d      	ldr	r3, [pc, #564]	; (8011098 <tcp_receive+0x884>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	da06      	bge.n	8010e7c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8b5b      	ldrh	r3, [r3, #26]
 8010e72:	f043 0302 	orr.w	r3, r3, #2
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e7c:	4b86      	ldr	r3, [pc, #536]	; (8011098 <tcp_receive+0x884>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f2c0 842a 	blt.w	80116e0 <tcp_receive+0xecc>
 8010e8c:	4b82      	ldr	r3, [pc, #520]	; (8011098 <tcp_receive+0x884>)
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e94:	6879      	ldr	r1, [r7, #4]
 8010e96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e98:	440b      	add	r3, r1
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f300 841e 	bgt.w	80116e0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ea8:	4b7b      	ldr	r3, [pc, #492]	; (8011098 <tcp_receive+0x884>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	f040 829a 	bne.w	80113e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010eb2:	4b7a      	ldr	r3, [pc, #488]	; (801109c <tcp_receive+0x888>)
 8010eb4:	891c      	ldrh	r4, [r3, #8]
 8010eb6:	4b79      	ldr	r3, [pc, #484]	; (801109c <tcp_receive+0x888>)
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	899b      	ldrh	r3, [r3, #12]
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fa fcee 	bl	800b8a0 <lwip_htons>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	f003 0303 	and.w	r3, r3, #3
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d001      	beq.n	8010ed4 <tcp_receive+0x6c0>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e000      	b.n	8010ed6 <tcp_receive+0x6c2>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	4423      	add	r3, r4
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	4b71      	ldr	r3, [pc, #452]	; (80110a0 <tcp_receive+0x88c>)
 8010edc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ee2:	4b6f      	ldr	r3, [pc, #444]	; (80110a0 <tcp_receive+0x88c>)
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d275      	bcs.n	8010fd6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010eea:	4b6c      	ldr	r3, [pc, #432]	; (801109c <tcp_receive+0x888>)
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	899b      	ldrh	r3, [r3, #12]
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fa fcd4 	bl	800b8a0 <lwip_htons>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01f      	beq.n	8010f44 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010f04:	4b65      	ldr	r3, [pc, #404]	; (801109c <tcp_receive+0x888>)
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	899b      	ldrh	r3, [r3, #12]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	b21b      	sxth	r3, r3
 8010f0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f12:	b21c      	sxth	r4, r3
 8010f14:	4b61      	ldr	r3, [pc, #388]	; (801109c <tcp_receive+0x888>)
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	899b      	ldrh	r3, [r3, #12]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7fa fcbf 	bl	800b8a0 <lwip_htons>
 8010f22:	4603      	mov	r3, r0
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fa fcb6 	bl	800b8a0 <lwip_htons>
 8010f34:	4603      	mov	r3, r0
 8010f36:	b21b      	sxth	r3, r3
 8010f38:	4323      	orrs	r3, r4
 8010f3a:	b21a      	sxth	r2, r3
 8010f3c:	4b57      	ldr	r3, [pc, #348]	; (801109c <tcp_receive+0x888>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	b292      	uxth	r2, r2
 8010f42:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f48:	4b54      	ldr	r3, [pc, #336]	; (801109c <tcp_receive+0x888>)
 8010f4a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f4c:	4b53      	ldr	r3, [pc, #332]	; (801109c <tcp_receive+0x888>)
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	899b      	ldrh	r3, [r3, #12]
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fa fca3 	bl	800b8a0 <lwip_htons>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f003 0302 	and.w	r3, r3, #2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010f66:	4b4d      	ldr	r3, [pc, #308]	; (801109c <tcp_receive+0x888>)
 8010f68:	891b      	ldrh	r3, [r3, #8]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	4b4b      	ldr	r3, [pc, #300]	; (801109c <tcp_receive+0x888>)
 8010f70:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f72:	4b4a      	ldr	r3, [pc, #296]	; (801109c <tcp_receive+0x888>)
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	4a49      	ldr	r2, [pc, #292]	; (801109c <tcp_receive+0x888>)
 8010f78:	8912      	ldrh	r2, [r2, #8]
 8010f7a:	4611      	mov	r1, r2
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fb feb9 	bl	800ccf4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f82:	4b46      	ldr	r3, [pc, #280]	; (801109c <tcp_receive+0x888>)
 8010f84:	891c      	ldrh	r4, [r3, #8]
 8010f86:	4b45      	ldr	r3, [pc, #276]	; (801109c <tcp_receive+0x888>)
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	899b      	ldrh	r3, [r3, #12]
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fa fc86 	bl	800b8a0 <lwip_htons>
 8010f94:	4603      	mov	r3, r0
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	f003 0303 	and.w	r3, r3, #3
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <tcp_receive+0x790>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e000      	b.n	8010fa6 <tcp_receive+0x792>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	4423      	add	r3, r4
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	4b3d      	ldr	r3, [pc, #244]	; (80110a0 <tcp_receive+0x88c>)
 8010fac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010fae:	4b3c      	ldr	r3, [pc, #240]	; (80110a0 <tcp_receive+0x88c>)
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	4b38      	ldr	r3, [pc, #224]	; (8011098 <tcp_receive+0x884>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	441a      	add	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbe:	6879      	ldr	r1, [r7, #4]
 8010fc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fc2:	440b      	add	r3, r1
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d006      	beq.n	8010fd6 <tcp_receive+0x7c2>
 8010fc8:	4b36      	ldr	r3, [pc, #216]	; (80110a4 <tcp_receive+0x890>)
 8010fca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010fce:	4936      	ldr	r1, [pc, #216]	; (80110a8 <tcp_receive+0x894>)
 8010fd0:	4836      	ldr	r0, [pc, #216]	; (80110ac <tcp_receive+0x898>)
 8010fd2:	f006 f815 	bl	8017000 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 80e7 	beq.w	80111ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fe0:	4b2e      	ldr	r3, [pc, #184]	; (801109c <tcp_receive+0x888>)
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	899b      	ldrh	r3, [r3, #12]
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fa fc59 	bl	800b8a0 <lwip_htons>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	f003 0301 	and.w	r3, r3, #1
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d010      	beq.n	801101c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010ffa:	e00a      	b.n	8011012 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011000:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f7fd fcc8 	bl	800e9a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1f0      	bne.n	8010ffc <tcp_receive+0x7e8>
 801101a:	e0c8      	b.n	80111ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011020:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011022:	e052      	b.n	80110ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	899b      	ldrh	r3, [r3, #12]
 801102a:	b29b      	uxth	r3, r3
 801102c:	4618      	mov	r0, r3
 801102e:	f7fa fc37 	bl	800b8a0 <lwip_htons>
 8011032:	4603      	mov	r3, r0
 8011034:	b2db      	uxtb	r3, r3
 8011036:	f003 0301 	and.w	r3, r3, #1
 801103a:	2b00      	cmp	r3, #0
 801103c:	d03d      	beq.n	80110ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801103e:	4b17      	ldr	r3, [pc, #92]	; (801109c <tcp_receive+0x888>)
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	899b      	ldrh	r3, [r3, #12]
 8011044:	b29b      	uxth	r3, r3
 8011046:	4618      	mov	r0, r3
 8011048:	f7fa fc2a 	bl	800b8a0 <lwip_htons>
 801104c:	4603      	mov	r3, r0
 801104e:	b2db      	uxtb	r3, r3
 8011050:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011054:	2b00      	cmp	r3, #0
 8011056:	d130      	bne.n	80110ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011058:	4b10      	ldr	r3, [pc, #64]	; (801109c <tcp_receive+0x888>)
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	899b      	ldrh	r3, [r3, #12]
 801105e:	b29c      	uxth	r4, r3
 8011060:	2001      	movs	r0, #1
 8011062:	f7fa fc1d 	bl	800b8a0 <lwip_htons>
 8011066:	4603      	mov	r3, r0
 8011068:	461a      	mov	r2, r3
 801106a:	4b0c      	ldr	r3, [pc, #48]	; (801109c <tcp_receive+0x888>)
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	4322      	orrs	r2, r4
 8011070:	b292      	uxth	r2, r2
 8011072:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011074:	4b09      	ldr	r3, [pc, #36]	; (801109c <tcp_receive+0x888>)
 8011076:	891c      	ldrh	r4, [r3, #8]
 8011078:	4b08      	ldr	r3, [pc, #32]	; (801109c <tcp_receive+0x888>)
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	899b      	ldrh	r3, [r3, #12]
 801107e:	b29b      	uxth	r3, r3
 8011080:	4618      	mov	r0, r3
 8011082:	f7fa fc0d 	bl	800b8a0 <lwip_htons>
 8011086:	4603      	mov	r3, r0
 8011088:	b2db      	uxtb	r3, r3
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00e      	beq.n	80110b0 <tcp_receive+0x89c>
 8011092:	2301      	movs	r3, #1
 8011094:	e00d      	b.n	80110b2 <tcp_receive+0x89e>
 8011096:	bf00      	nop
 8011098:	20004afc 	.word	0x20004afc
 801109c:	20004adc 	.word	0x20004adc
 80110a0:	20004b06 	.word	0x20004b06
 80110a4:	08019f40 	.word	0x08019f40
 80110a8:	0801a2e8 	.word	0x0801a2e8
 80110ac:	08019f8c 	.word	0x08019f8c
 80110b0:	2300      	movs	r3, #0
 80110b2:	4423      	add	r3, r4
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	4b98      	ldr	r3, [pc, #608]	; (8011318 <tcp_receive+0xb04>)
 80110b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80110ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80110be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80110c4:	6938      	ldr	r0, [r7, #16]
 80110c6:	f7fd fc6c 	bl	800e9a2 <tcp_seg_free>
            while (next &&
 80110ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00e      	beq.n	80110ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80110d0:	4b91      	ldr	r3, [pc, #580]	; (8011318 <tcp_receive+0xb04>)
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	461a      	mov	r2, r3
 80110d6:	4b91      	ldr	r3, [pc, #580]	; (801131c <tcp_receive+0xb08>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	441a      	add	r2, r3
 80110dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110e4:	8909      	ldrh	r1, [r1, #8]
 80110e6:	440b      	add	r3, r1
 80110e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	da9a      	bge.n	8011024 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80110ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d059      	beq.n	80111a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80110f4:	4b88      	ldr	r3, [pc, #544]	; (8011318 <tcp_receive+0xb04>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	461a      	mov	r2, r3
 80110fa:	4b88      	ldr	r3, [pc, #544]	; (801131c <tcp_receive+0xb08>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	441a      	add	r2, r3
 8011100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011108:	2b00      	cmp	r3, #0
 801110a:	dd4d      	ble.n	80111a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801110c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b81      	ldr	r3, [pc, #516]	; (801131c <tcp_receive+0xb08>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	b29b      	uxth	r3, r3
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	b29a      	uxth	r2, r3
 801111e:	4b80      	ldr	r3, [pc, #512]	; (8011320 <tcp_receive+0xb0c>)
 8011120:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011122:	4b7f      	ldr	r3, [pc, #508]	; (8011320 <tcp_receive+0xb0c>)
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	899b      	ldrh	r3, [r3, #12]
 8011128:	b29b      	uxth	r3, r3
 801112a:	4618      	mov	r0, r3
 801112c:	f7fa fbb8 	bl	800b8a0 <lwip_htons>
 8011130:	4603      	mov	r3, r0
 8011132:	b2db      	uxtb	r3, r3
 8011134:	f003 0302 	and.w	r3, r3, #2
 8011138:	2b00      	cmp	r3, #0
 801113a:	d005      	beq.n	8011148 <tcp_receive+0x934>
                inseg.len -= 1;
 801113c:	4b78      	ldr	r3, [pc, #480]	; (8011320 <tcp_receive+0xb0c>)
 801113e:	891b      	ldrh	r3, [r3, #8]
 8011140:	3b01      	subs	r3, #1
 8011142:	b29a      	uxth	r2, r3
 8011144:	4b76      	ldr	r3, [pc, #472]	; (8011320 <tcp_receive+0xb0c>)
 8011146:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011148:	4b75      	ldr	r3, [pc, #468]	; (8011320 <tcp_receive+0xb0c>)
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	4a74      	ldr	r2, [pc, #464]	; (8011320 <tcp_receive+0xb0c>)
 801114e:	8912      	ldrh	r2, [r2, #8]
 8011150:	4611      	mov	r1, r2
 8011152:	4618      	mov	r0, r3
 8011154:	f7fb fdce 	bl	800ccf4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011158:	4b71      	ldr	r3, [pc, #452]	; (8011320 <tcp_receive+0xb0c>)
 801115a:	891c      	ldrh	r4, [r3, #8]
 801115c:	4b70      	ldr	r3, [pc, #448]	; (8011320 <tcp_receive+0xb0c>)
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	b29b      	uxth	r3, r3
 8011164:	4618      	mov	r0, r3
 8011166:	f7fa fb9b 	bl	800b8a0 <lwip_htons>
 801116a:	4603      	mov	r3, r0
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 0303 	and.w	r3, r3, #3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d001      	beq.n	801117a <tcp_receive+0x966>
 8011176:	2301      	movs	r3, #1
 8011178:	e000      	b.n	801117c <tcp_receive+0x968>
 801117a:	2300      	movs	r3, #0
 801117c:	4423      	add	r3, r4
 801117e:	b29a      	uxth	r2, r3
 8011180:	4b65      	ldr	r3, [pc, #404]	; (8011318 <tcp_receive+0xb04>)
 8011182:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011184:	4b64      	ldr	r3, [pc, #400]	; (8011318 <tcp_receive+0xb04>)
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	461a      	mov	r2, r3
 801118a:	4b64      	ldr	r3, [pc, #400]	; (801131c <tcp_receive+0xb08>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	441a      	add	r2, r3
 8011190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	429a      	cmp	r2, r3
 8011198:	d006      	beq.n	80111a8 <tcp_receive+0x994>
 801119a:	4b62      	ldr	r3, [pc, #392]	; (8011324 <tcp_receive+0xb10>)
 801119c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80111a0:	4961      	ldr	r1, [pc, #388]	; (8011328 <tcp_receive+0xb14>)
 80111a2:	4862      	ldr	r0, [pc, #392]	; (801132c <tcp_receive+0xb18>)
 80111a4:	f005 ff2c 	bl	8017000 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111ac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80111ae:	4b5a      	ldr	r3, [pc, #360]	; (8011318 <tcp_receive+0xb04>)
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	461a      	mov	r2, r3
 80111b4:	4b59      	ldr	r3, [pc, #356]	; (801131c <tcp_receive+0xb08>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	441a      	add	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111c2:	4b55      	ldr	r3, [pc, #340]	; (8011318 <tcp_receive+0xb04>)
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d206      	bcs.n	80111d8 <tcp_receive+0x9c4>
 80111ca:	4b56      	ldr	r3, [pc, #344]	; (8011324 <tcp_receive+0xb10>)
 80111cc:	f240 6207 	movw	r2, #1543	; 0x607
 80111d0:	4957      	ldr	r1, [pc, #348]	; (8011330 <tcp_receive+0xb1c>)
 80111d2:	4856      	ldr	r0, [pc, #344]	; (801132c <tcp_receive+0xb18>)
 80111d4:	f005 ff14 	bl	8017000 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111dc:	4b4e      	ldr	r3, [pc, #312]	; (8011318 <tcp_receive+0xb04>)
 80111de:	881b      	ldrh	r3, [r3, #0]
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7fc fd9d 	bl	800dd28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80111ee:	4b4c      	ldr	r3, [pc, #304]	; (8011320 <tcp_receive+0xb0c>)
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	891b      	ldrh	r3, [r3, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d006      	beq.n	8011206 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80111f8:	4b49      	ldr	r3, [pc, #292]	; (8011320 <tcp_receive+0xb0c>)
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	4a4d      	ldr	r2, [pc, #308]	; (8011334 <tcp_receive+0xb20>)
 80111fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011200:	4b47      	ldr	r3, [pc, #284]	; (8011320 <tcp_receive+0xb0c>)
 8011202:	2200      	movs	r2, #0
 8011204:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011206:	4b46      	ldr	r3, [pc, #280]	; (8011320 <tcp_receive+0xb0c>)
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	899b      	ldrh	r3, [r3, #12]
 801120c:	b29b      	uxth	r3, r3
 801120e:	4618      	mov	r0, r3
 8011210:	f7fa fb46 	bl	800b8a0 <lwip_htons>
 8011214:	4603      	mov	r3, r0
 8011216:	b2db      	uxtb	r3, r3
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	f000 80b8 	beq.w	8011392 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011222:	4b45      	ldr	r3, [pc, #276]	; (8011338 <tcp_receive+0xb24>)
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	f043 0320 	orr.w	r3, r3, #32
 801122a:	b2da      	uxtb	r2, r3
 801122c:	4b42      	ldr	r3, [pc, #264]	; (8011338 <tcp_receive+0xb24>)
 801122e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011230:	e0af      	b.n	8011392 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011236:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4a36      	ldr	r2, [pc, #216]	; (801131c <tcp_receive+0xb08>)
 8011242:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	891b      	ldrh	r3, [r3, #8]
 8011248:	461c      	mov	r4, r3
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	b29b      	uxth	r3, r3
 8011252:	4618      	mov	r0, r3
 8011254:	f7fa fb24 	bl	800b8a0 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	b2db      	uxtb	r3, r3
 801125c:	f003 0303 	and.w	r3, r3, #3
 8011260:	2b00      	cmp	r3, #0
 8011262:	d001      	beq.n	8011268 <tcp_receive+0xa54>
 8011264:	2301      	movs	r3, #1
 8011266:	e000      	b.n	801126a <tcp_receive+0xa56>
 8011268:	2300      	movs	r3, #0
 801126a:	191a      	adds	r2, r3, r4
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011270:	441a      	add	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801127a:	461c      	mov	r4, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	461d      	mov	r5, r3
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	899b      	ldrh	r3, [r3, #12]
 8011288:	b29b      	uxth	r3, r3
 801128a:	4618      	mov	r0, r3
 801128c:	f7fa fb08 	bl	800b8a0 <lwip_htons>
 8011290:	4603      	mov	r3, r0
 8011292:	b2db      	uxtb	r3, r3
 8011294:	f003 0303 	and.w	r3, r3, #3
 8011298:	2b00      	cmp	r3, #0
 801129a:	d001      	beq.n	80112a0 <tcp_receive+0xa8c>
 801129c:	2301      	movs	r3, #1
 801129e:	e000      	b.n	80112a2 <tcp_receive+0xa8e>
 80112a0:	2300      	movs	r3, #0
 80112a2:	442b      	add	r3, r5
 80112a4:	429c      	cmp	r4, r3
 80112a6:	d206      	bcs.n	80112b6 <tcp_receive+0xaa2>
 80112a8:	4b1e      	ldr	r3, [pc, #120]	; (8011324 <tcp_receive+0xb10>)
 80112aa:	f240 622b 	movw	r2, #1579	; 0x62b
 80112ae:	4923      	ldr	r1, [pc, #140]	; (801133c <tcp_receive+0xb28>)
 80112b0:	481e      	ldr	r0, [pc, #120]	; (801132c <tcp_receive+0xb18>)
 80112b2:	f005 fea5 	bl	8017000 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	891b      	ldrh	r3, [r3, #8]
 80112ba:	461c      	mov	r4, r3
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	899b      	ldrh	r3, [r3, #12]
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fa faeb 	bl	800b8a0 <lwip_htons>
 80112ca:	4603      	mov	r3, r0
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	f003 0303 	and.w	r3, r3, #3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d001      	beq.n	80112da <tcp_receive+0xac6>
 80112d6:	2301      	movs	r3, #1
 80112d8:	e000      	b.n	80112dc <tcp_receive+0xac8>
 80112da:	2300      	movs	r3, #0
 80112dc:	1919      	adds	r1, r3, r4
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112e2:	b28b      	uxth	r3, r1
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7fc fd1b 	bl	800dd28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	891b      	ldrh	r3, [r3, #8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d028      	beq.n	801134e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <tcp_receive+0xb20>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d01d      	beq.n	8011340 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011304:	4b0b      	ldr	r3, [pc, #44]	; (8011334 <tcp_receive+0xb20>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	4619      	mov	r1, r3
 801130e:	4610      	mov	r0, r2
 8011310:	f7fb ff44 	bl	800d19c <pbuf_cat>
 8011314:	e018      	b.n	8011348 <tcp_receive+0xb34>
 8011316:	bf00      	nop
 8011318:	20004b06 	.word	0x20004b06
 801131c:	20004afc 	.word	0x20004afc
 8011320:	20004adc 	.word	0x20004adc
 8011324:	08019f40 	.word	0x08019f40
 8011328:	0801a320 	.word	0x0801a320
 801132c:	08019f8c 	.word	0x08019f8c
 8011330:	0801a35c 	.word	0x0801a35c
 8011334:	20004b0c 	.word	0x20004b0c
 8011338:	20004b09 	.word	0x20004b09
 801133c:	0801a37c 	.word	0x0801a37c
            } else {
              recv_data = cseg->p;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	4a70      	ldr	r2, [pc, #448]	; (8011508 <tcp_receive+0xcf4>)
 8011346:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	2200      	movs	r2, #0
 801134c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	899b      	ldrh	r3, [r3, #12]
 8011354:	b29b      	uxth	r3, r3
 8011356:	4618      	mov	r0, r3
 8011358:	f7fa faa2 	bl	800b8a0 <lwip_htons>
 801135c:	4603      	mov	r3, r0
 801135e:	b2db      	uxtb	r3, r3
 8011360:	f003 0301 	and.w	r3, r3, #1
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00d      	beq.n	8011384 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011368:	4b68      	ldr	r3, [pc, #416]	; (801150c <tcp_receive+0xcf8>)
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	f043 0320 	orr.w	r3, r3, #32
 8011370:	b2da      	uxtb	r2, r3
 8011372:	4b66      	ldr	r3, [pc, #408]	; (801150c <tcp_receive+0xcf8>)
 8011374:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	7d1b      	ldrb	r3, [r3, #20]
 801137a:	2b04      	cmp	r3, #4
 801137c:	d102      	bne.n	8011384 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2207      	movs	r2, #7
 8011382:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801138c:	68b8      	ldr	r0, [r7, #8]
 801138e:	f7fd fb08 	bl	800e9a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011396:	2b00      	cmp	r3, #0
 8011398:	d008      	beq.n	80113ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685a      	ldr	r2, [r3, #4]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80113a6:	429a      	cmp	r2, r3
 80113a8:	f43f af43 	beq.w	8011232 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	8b5b      	ldrh	r3, [r3, #26]
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00e      	beq.n	80113d6 <tcp_receive+0xbc2>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	8b5b      	ldrh	r3, [r3, #26]
 80113bc:	f023 0301 	bic.w	r3, r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	835a      	strh	r2, [r3, #26]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8b5b      	ldrh	r3, [r3, #26]
 80113ca:	f043 0302 	orr.w	r3, r3, #2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113d4:	e188      	b.n	80116e8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	8b5b      	ldrh	r3, [r3, #26]
 80113da:	f043 0301 	orr.w	r3, r3, #1
 80113de:	b29a      	uxth	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113e4:	e180      	b.n	80116e8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d106      	bne.n	80113fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80113ee:	4848      	ldr	r0, [pc, #288]	; (8011510 <tcp_receive+0xcfc>)
 80113f0:	f7fd faf0 	bl	800e9d4 <tcp_seg_copy>
 80113f4:	4602      	mov	r2, r0
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	675a      	str	r2, [r3, #116]	; 0x74
 80113fa:	e16d      	b.n	80116d8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80113fc:	2300      	movs	r3, #0
 80113fe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011404:	63bb      	str	r3, [r7, #56]	; 0x38
 8011406:	e157      	b.n	80116b8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	4b41      	ldr	r3, [pc, #260]	; (8011514 <tcp_receive+0xd00>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	429a      	cmp	r2, r3
 8011414:	d11d      	bne.n	8011452 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011416:	4b3e      	ldr	r3, [pc, #248]	; (8011510 <tcp_receive+0xcfc>)
 8011418:	891a      	ldrh	r2, [r3, #8]
 801141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141c:	891b      	ldrh	r3, [r3, #8]
 801141e:	429a      	cmp	r2, r3
 8011420:	f240 814f 	bls.w	80116c2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011424:	483a      	ldr	r0, [pc, #232]	; (8011510 <tcp_receive+0xcfc>)
 8011426:	f7fd fad5 	bl	800e9d4 <tcp_seg_copy>
 801142a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 8149 	beq.w	80116c6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143c:	697a      	ldr	r2, [r7, #20]
 801143e:	601a      	str	r2, [r3, #0]
 8011440:	e002      	b.n	8011448 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801144a:	6978      	ldr	r0, [r7, #20]
 801144c:	f7ff f8de 	bl	801060c <tcp_oos_insert_segment>
                }
                break;
 8011450:	e139      	b.n	80116c6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011454:	2b00      	cmp	r3, #0
 8011456:	d117      	bne.n	8011488 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011458:	4b2e      	ldr	r3, [pc, #184]	; (8011514 <tcp_receive+0xd00>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	2b00      	cmp	r3, #0
 8011466:	da57      	bge.n	8011518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011468:	4829      	ldr	r0, [pc, #164]	; (8011510 <tcp_receive+0xcfc>)
 801146a:	f7fd fab3 	bl	800e9d4 <tcp_seg_copy>
 801146e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	2b00      	cmp	r3, #0
 8011474:	f000 8129 	beq.w	80116ca <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	69ba      	ldr	r2, [r7, #24]
 801147c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801147e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011480:	69b8      	ldr	r0, [r7, #24]
 8011482:	f7ff f8c3 	bl	801060c <tcp_oos_insert_segment>
                  }
                  break;
 8011486:	e120      	b.n	80116ca <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011488:	4b22      	ldr	r3, [pc, #136]	; (8011514 <tcp_receive+0xd00>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	3b01      	subs	r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	db3e      	blt.n	8011518 <tcp_receive+0xd04>
 801149a:	4b1e      	ldr	r3, [pc, #120]	; (8011514 <tcp_receive+0xd00>)
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	3301      	adds	r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	dc35      	bgt.n	8011518 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80114ac:	4818      	ldr	r0, [pc, #96]	; (8011510 <tcp_receive+0xcfc>)
 80114ae:	f7fd fa91 	bl	800e9d4 <tcp_seg_copy>
 80114b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 8109 	beq.w	80116ce <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80114bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114c4:	8912      	ldrh	r2, [r2, #8]
 80114c6:	441a      	add	r2, r3
 80114c8:	4b12      	ldr	r3, [pc, #72]	; (8011514 <tcp_receive+0xd00>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	1ad3      	subs	r3, r2, r3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	dd12      	ble.n	80114f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80114d2:	4b10      	ldr	r3, [pc, #64]	; (8011514 <tcp_receive+0xd00>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	b29b      	uxth	r3, r3
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80114e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ea:	685a      	ldr	r2, [r3, #4]
 80114ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ee:	891b      	ldrh	r3, [r3, #8]
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7fb fbfe 	bl	800ccf4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80114f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fa:	69fa      	ldr	r2, [r7, #28]
 80114fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80114fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011500:	69f8      	ldr	r0, [r7, #28]
 8011502:	f7ff f883 	bl	801060c <tcp_oos_insert_segment>
                  }
                  break;
 8011506:	e0e2      	b.n	80116ce <tcp_receive+0xeba>
 8011508:	20004b0c 	.word	0x20004b0c
 801150c:	20004b09 	.word	0x20004b09
 8011510:	20004adc 	.word	0x20004adc
 8011514:	20004afc 	.word	0x20004afc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	f040 80c6 	bne.w	80116b2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011526:	4b80      	ldr	r3, [pc, #512]	; (8011728 <tcp_receive+0xf14>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011532:	2b00      	cmp	r3, #0
 8011534:	f340 80bd 	ble.w	80116b2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	899b      	ldrh	r3, [r3, #12]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4618      	mov	r0, r3
 8011542:	f7fa f9ad 	bl	800b8a0 <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f003 0301 	and.w	r3, r3, #1
 801154e:	2b00      	cmp	r3, #0
 8011550:	f040 80bf 	bne.w	80116d2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011554:	4875      	ldr	r0, [pc, #468]	; (801172c <tcp_receive+0xf18>)
 8011556:	f7fd fa3d 	bl	800e9d4 <tcp_seg_copy>
 801155a:	4602      	mov	r2, r0
 801155c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	f000 80b6 	beq.w	80116d6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011572:	8912      	ldrh	r2, [r2, #8]
 8011574:	441a      	add	r2, r3
 8011576:	4b6c      	ldr	r3, [pc, #432]	; (8011728 <tcp_receive+0xf14>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	2b00      	cmp	r3, #0
 801157e:	dd12      	ble.n	80115a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011580:	4b69      	ldr	r3, [pc, #420]	; (8011728 <tcp_receive+0xf14>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	b29a      	uxth	r2, r3
 8011586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	b29b      	uxth	r3, r3
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	b29a      	uxth	r2, r3
 8011592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011594:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	4619      	mov	r1, r3
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7fb fba7 	bl	800ccf4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80115a6:	4b62      	ldr	r3, [pc, #392]	; (8011730 <tcp_receive+0xf1c>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	4b5e      	ldr	r3, [pc, #376]	; (8011728 <tcp_receive+0xf14>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	441a      	add	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b6:	6879      	ldr	r1, [r7, #4]
 80115b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115ba:	440b      	add	r3, r1
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f340 8089 	ble.w	80116d6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80115c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	899b      	ldrh	r3, [r3, #12]
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fa f966 	bl	800b8a0 <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d022      	beq.n	8011626 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	899b      	ldrh	r3, [r3, #12]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	b21b      	sxth	r3, r3
 80115ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115f0:	b21c      	sxth	r4, r3
 80115f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	899b      	ldrh	r3, [r3, #12]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fa f94f 	bl	800b8a0 <lwip_htons>
 8011602:	4603      	mov	r3, r0
 8011604:	b2db      	uxtb	r3, r3
 8011606:	b29b      	uxth	r3, r3
 8011608:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801160c:	b29b      	uxth	r3, r3
 801160e:	4618      	mov	r0, r3
 8011610:	f7fa f946 	bl	800b8a0 <lwip_htons>
 8011614:	4603      	mov	r3, r0
 8011616:	b21b      	sxth	r3, r3
 8011618:	4323      	orrs	r3, r4
 801161a:	b21a      	sxth	r2, r3
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	b292      	uxth	r2, r2
 8011624:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801162a:	b29a      	uxth	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011630:	4413      	add	r3, r2
 8011632:	b299      	uxth	r1, r3
 8011634:	4b3c      	ldr	r3, [pc, #240]	; (8011728 <tcp_receive+0xf14>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	b29a      	uxth	r2, r3
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	1a8a      	subs	r2, r1, r2
 8011640:	b292      	uxth	r2, r2
 8011642:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	685a      	ldr	r2, [r3, #4]
 801164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	891b      	ldrh	r3, [r3, #8]
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7fb fb4e 	bl	800ccf4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	891c      	ldrh	r4, [r3, #8]
 801165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	899b      	ldrh	r3, [r3, #12]
 8011666:	b29b      	uxth	r3, r3
 8011668:	4618      	mov	r0, r3
 801166a:	f7fa f919 	bl	800b8a0 <lwip_htons>
 801166e:	4603      	mov	r3, r0
 8011670:	b2db      	uxtb	r3, r3
 8011672:	f003 0303 	and.w	r3, r3, #3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d001      	beq.n	801167e <tcp_receive+0xe6a>
 801167a:	2301      	movs	r3, #1
 801167c:	e000      	b.n	8011680 <tcp_receive+0xe6c>
 801167e:	2300      	movs	r3, #0
 8011680:	4423      	add	r3, r4
 8011682:	b29a      	uxth	r2, r3
 8011684:	4b2a      	ldr	r3, [pc, #168]	; (8011730 <tcp_receive+0xf1c>)
 8011686:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011688:	4b29      	ldr	r3, [pc, #164]	; (8011730 <tcp_receive+0xf1c>)
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	461a      	mov	r2, r3
 801168e:	4b26      	ldr	r3, [pc, #152]	; (8011728 <tcp_receive+0xf14>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	441a      	add	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011698:	6879      	ldr	r1, [r7, #4]
 801169a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801169c:	440b      	add	r3, r1
 801169e:	429a      	cmp	r2, r3
 80116a0:	d019      	beq.n	80116d6 <tcp_receive+0xec2>
 80116a2:	4b24      	ldr	r3, [pc, #144]	; (8011734 <tcp_receive+0xf20>)
 80116a4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80116a8:	4923      	ldr	r1, [pc, #140]	; (8011738 <tcp_receive+0xf24>)
 80116aa:	4824      	ldr	r0, [pc, #144]	; (801173c <tcp_receive+0xf28>)
 80116ac:	f005 fca8 	bl	8017000 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80116b0:	e011      	b.n	80116d6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f47f aea4 	bne.w	8011408 <tcp_receive+0xbf4>
 80116c0:	e00a      	b.n	80116d8 <tcp_receive+0xec4>
                break;
 80116c2:	bf00      	nop
 80116c4:	e008      	b.n	80116d8 <tcp_receive+0xec4>
                break;
 80116c6:	bf00      	nop
 80116c8:	e006      	b.n	80116d8 <tcp_receive+0xec4>
                  break;
 80116ca:	bf00      	nop
 80116cc:	e004      	b.n	80116d8 <tcp_receive+0xec4>
                  break;
 80116ce:	bf00      	nop
 80116d0:	e002      	b.n	80116d8 <tcp_receive+0xec4>
                  break;
 80116d2:	bf00      	nop
 80116d4:	e000      	b.n	80116d8 <tcp_receive+0xec4>
                break;
 80116d6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f001 fe8b 	bl	80133f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80116de:	e003      	b.n	80116e8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f001 fe87 	bl	80133f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116e6:	e01a      	b.n	801171e <tcp_receive+0xf0a>
 80116e8:	e019      	b.n	801171e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116ea:	4b0f      	ldr	r3, [pc, #60]	; (8011728 <tcp_receive+0xf14>)
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	db0a      	blt.n	801170e <tcp_receive+0xefa>
 80116f8:	4b0b      	ldr	r3, [pc, #44]	; (8011728 <tcp_receive+0xf14>)
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011704:	440b      	add	r3, r1
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	3301      	adds	r3, #1
 801170a:	2b00      	cmp	r3, #0
 801170c:	dd07      	ble.n	801171e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	8b5b      	ldrh	r3, [r3, #26]
 8011712:	f043 0302 	orr.w	r3, r3, #2
 8011716:	b29a      	uxth	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801171c:	e7ff      	b.n	801171e <tcp_receive+0xf0a>
 801171e:	bf00      	nop
 8011720:	3750      	adds	r7, #80	; 0x50
 8011722:	46bd      	mov	sp, r7
 8011724:	bdb0      	pop	{r4, r5, r7, pc}
 8011726:	bf00      	nop
 8011728:	20004afc 	.word	0x20004afc
 801172c:	20004adc 	.word	0x20004adc
 8011730:	20004b06 	.word	0x20004b06
 8011734:	08019f40 	.word	0x08019f40
 8011738:	0801a2e8 	.word	0x0801a2e8
 801173c:	08019f8c 	.word	0x08019f8c

08011740 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011746:	4b15      	ldr	r3, [pc, #84]	; (801179c <tcp_get_next_optbyte+0x5c>)
 8011748:	881b      	ldrh	r3, [r3, #0]
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	b291      	uxth	r1, r2
 801174e:	4a13      	ldr	r2, [pc, #76]	; (801179c <tcp_get_next_optbyte+0x5c>)
 8011750:	8011      	strh	r1, [r2, #0]
 8011752:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011754:	4b12      	ldr	r3, [pc, #72]	; (80117a0 <tcp_get_next_optbyte+0x60>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d004      	beq.n	8011766 <tcp_get_next_optbyte+0x26>
 801175c:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <tcp_get_next_optbyte+0x64>)
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	88fa      	ldrh	r2, [r7, #6]
 8011762:	429a      	cmp	r2, r3
 8011764:	d208      	bcs.n	8011778 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011766:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <tcp_get_next_optbyte+0x68>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	3314      	adds	r3, #20
 801176c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801176e:	88fb      	ldrh	r3, [r7, #6]
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	4413      	add	r3, r2
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	e00b      	b.n	8011790 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011778:	88fb      	ldrh	r3, [r7, #6]
 801177a:	b2da      	uxtb	r2, r3
 801177c:	4b09      	ldr	r3, [pc, #36]	; (80117a4 <tcp_get_next_optbyte+0x64>)
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	b2db      	uxtb	r3, r3
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011786:	4b06      	ldr	r3, [pc, #24]	; (80117a0 <tcp_get_next_optbyte+0x60>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	797b      	ldrb	r3, [r7, #5]
 801178c:	4413      	add	r3, r2
 801178e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011790:	4618      	mov	r0, r3
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	20004af8 	.word	0x20004af8
 80117a0:	20004af4 	.word	0x20004af4
 80117a4:	20004af2 	.word	0x20004af2
 80117a8:	20004aec 	.word	0x20004aec

080117ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d106      	bne.n	80117c8 <tcp_parseopt+0x1c>
 80117ba:	4b32      	ldr	r3, [pc, #200]	; (8011884 <tcp_parseopt+0xd8>)
 80117bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80117c0:	4931      	ldr	r1, [pc, #196]	; (8011888 <tcp_parseopt+0xdc>)
 80117c2:	4832      	ldr	r0, [pc, #200]	; (801188c <tcp_parseopt+0xe0>)
 80117c4:	f005 fc1c 	bl	8017000 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80117c8:	4b31      	ldr	r3, [pc, #196]	; (8011890 <tcp_parseopt+0xe4>)
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d056      	beq.n	801187e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117d0:	4b30      	ldr	r3, [pc, #192]	; (8011894 <tcp_parseopt+0xe8>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	801a      	strh	r2, [r3, #0]
 80117d6:	e046      	b.n	8011866 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80117d8:	f7ff ffb2 	bl	8011740 <tcp_get_next_optbyte>
 80117dc:	4603      	mov	r3, r0
 80117de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80117e0:	7bfb      	ldrb	r3, [r7, #15]
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d006      	beq.n	80117f4 <tcp_parseopt+0x48>
 80117e6:	2b02      	cmp	r3, #2
 80117e8:	dc2c      	bgt.n	8011844 <tcp_parseopt+0x98>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d042      	beq.n	8011874 <tcp_parseopt+0xc8>
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d128      	bne.n	8011844 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80117f2:	e038      	b.n	8011866 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80117f4:	f7ff ffa4 	bl	8011740 <tcp_get_next_optbyte>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b04      	cmp	r3, #4
 80117fc:	d13c      	bne.n	8011878 <tcp_parseopt+0xcc>
 80117fe:	4b25      	ldr	r3, [pc, #148]	; (8011894 <tcp_parseopt+0xe8>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	3301      	adds	r3, #1
 8011804:	4a22      	ldr	r2, [pc, #136]	; (8011890 <tcp_parseopt+0xe4>)
 8011806:	8812      	ldrh	r2, [r2, #0]
 8011808:	4293      	cmp	r3, r2
 801180a:	da35      	bge.n	8011878 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801180c:	f7ff ff98 	bl	8011740 <tcp_get_next_optbyte>
 8011810:	4603      	mov	r3, r0
 8011812:	b29b      	uxth	r3, r3
 8011814:	021b      	lsls	r3, r3, #8
 8011816:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011818:	f7ff ff92 	bl	8011740 <tcp_get_next_optbyte>
 801181c:	4603      	mov	r3, r0
 801181e:	b29a      	uxth	r2, r3
 8011820:	89bb      	ldrh	r3, [r7, #12]
 8011822:	4313      	orrs	r3, r2
 8011824:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011826:	89bb      	ldrh	r3, [r7, #12]
 8011828:	f240 4201 	movw	r2, #1025	; 0x401
 801182c:	4293      	cmp	r3, r2
 801182e:	d804      	bhi.n	801183a <tcp_parseopt+0x8e>
 8011830:	89bb      	ldrh	r3, [r7, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <tcp_parseopt+0x8e>
 8011836:	89ba      	ldrh	r2, [r7, #12]
 8011838:	e001      	b.n	801183e <tcp_parseopt+0x92>
 801183a:	f240 4201 	movw	r2, #1025	; 0x401
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011842:	e010      	b.n	8011866 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011844:	f7ff ff7c 	bl	8011740 <tcp_get_next_optbyte>
 8011848:	4603      	mov	r3, r0
 801184a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801184c:	7afb      	ldrb	r3, [r7, #11]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d914      	bls.n	801187c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011852:	7afb      	ldrb	r3, [r7, #11]
 8011854:	b29a      	uxth	r2, r3
 8011856:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <tcp_parseopt+0xe8>)
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	4413      	add	r3, r2
 801185c:	b29b      	uxth	r3, r3
 801185e:	3b02      	subs	r3, #2
 8011860:	b29a      	uxth	r2, r3
 8011862:	4b0c      	ldr	r3, [pc, #48]	; (8011894 <tcp_parseopt+0xe8>)
 8011864:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011866:	4b0b      	ldr	r3, [pc, #44]	; (8011894 <tcp_parseopt+0xe8>)
 8011868:	881a      	ldrh	r2, [r3, #0]
 801186a:	4b09      	ldr	r3, [pc, #36]	; (8011890 <tcp_parseopt+0xe4>)
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	429a      	cmp	r2, r3
 8011870:	d3b2      	bcc.n	80117d8 <tcp_parseopt+0x2c>
 8011872:	e004      	b.n	801187e <tcp_parseopt+0xd2>
          return;
 8011874:	bf00      	nop
 8011876:	e002      	b.n	801187e <tcp_parseopt+0xd2>
            return;
 8011878:	bf00      	nop
 801187a:	e000      	b.n	801187e <tcp_parseopt+0xd2>
            return;
 801187c:	bf00      	nop
      }
    }
  }
}
 801187e:	3710      	adds	r7, #16
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	08019f40 	.word	0x08019f40
 8011888:	0801a3a4 	.word	0x0801a3a4
 801188c:	08019f8c 	.word	0x08019f8c
 8011890:	20004af0 	.word	0x20004af0
 8011894:	20004af8 	.word	0x20004af8

08011898 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801189c:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <tcp_trigger_input_pcb_close+0x1c>)
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	f043 0310 	orr.w	r3, r3, #16
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	4b03      	ldr	r3, [pc, #12]	; (80118b4 <tcp_trigger_input_pcb_close+0x1c>)
 80118a8:	701a      	strb	r2, [r3, #0]
}
 80118aa:	bf00      	nop
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	20004b09 	.word	0x20004b09

080118b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00a      	beq.n	80118e0 <tcp_route+0x28>
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	7a1b      	ldrb	r3, [r3, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d006      	beq.n	80118e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	7a1b      	ldrb	r3, [r3, #8]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fb f800 	bl	800c8dc <netif_get_by_index>
 80118dc:	4603      	mov	r3, r0
 80118de:	e003      	b.n	80118e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f003 fcb9 	bl	8015258 <ip4_route>
 80118e6:	4603      	mov	r3, r0
  }
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3710      	adds	r7, #16
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80118f0:	b590      	push	{r4, r7, lr}
 80118f2:	b087      	sub	sp, #28
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	60b9      	str	r1, [r7, #8]
 80118fa:	603b      	str	r3, [r7, #0]
 80118fc:	4613      	mov	r3, r2
 80118fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d105      	bne.n	8011912 <tcp_create_segment+0x22>
 8011906:	4b44      	ldr	r3, [pc, #272]	; (8011a18 <tcp_create_segment+0x128>)
 8011908:	22a3      	movs	r2, #163	; 0xa3
 801190a:	4944      	ldr	r1, [pc, #272]	; (8011a1c <tcp_create_segment+0x12c>)
 801190c:	4844      	ldr	r0, [pc, #272]	; (8011a20 <tcp_create_segment+0x130>)
 801190e:	f005 fb77 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d105      	bne.n	8011924 <tcp_create_segment+0x34>
 8011918:	4b3f      	ldr	r3, [pc, #252]	; (8011a18 <tcp_create_segment+0x128>)
 801191a:	22a4      	movs	r2, #164	; 0xa4
 801191c:	4941      	ldr	r1, [pc, #260]	; (8011a24 <tcp_create_segment+0x134>)
 801191e:	4840      	ldr	r0, [pc, #256]	; (8011a20 <tcp_create_segment+0x130>)
 8011920:	f005 fb6e 	bl	8017000 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011924:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f003 0304 	and.w	r3, r3, #4
 8011930:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011932:	2003      	movs	r0, #3
 8011934:	f7fa fc6a 	bl	800c20c <memp_malloc>
 8011938:	6138      	str	r0, [r7, #16]
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d104      	bne.n	801194a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011940:	68b8      	ldr	r0, [r7, #8]
 8011942:	f7fb fb5d 	bl	800d000 <pbuf_free>
    return NULL;
 8011946:	2300      	movs	r3, #0
 8011948:	e061      	b.n	8011a0e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011950:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	2200      	movs	r2, #0
 8011956:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	891a      	ldrh	r2, [r3, #8]
 8011962:	7dfb      	ldrb	r3, [r7, #23]
 8011964:	b29b      	uxth	r3, r3
 8011966:	429a      	cmp	r2, r3
 8011968:	d205      	bcs.n	8011976 <tcp_create_segment+0x86>
 801196a:	4b2b      	ldr	r3, [pc, #172]	; (8011a18 <tcp_create_segment+0x128>)
 801196c:	22b0      	movs	r2, #176	; 0xb0
 801196e:	492e      	ldr	r1, [pc, #184]	; (8011a28 <tcp_create_segment+0x138>)
 8011970:	482b      	ldr	r0, [pc, #172]	; (8011a20 <tcp_create_segment+0x130>)
 8011972:	f005 fb45 	bl	8017000 <iprintf>
  seg->len = p->tot_len - optlen;
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	891a      	ldrh	r2, [r3, #8]
 801197a:	7dfb      	ldrb	r3, [r7, #23]
 801197c:	b29b      	uxth	r3, r3
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	b29a      	uxth	r2, r3
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011986:	2114      	movs	r1, #20
 8011988:	68b8      	ldr	r0, [r7, #8]
 801198a:	f7fb faa3 	bl	800ced4 <pbuf_add_header>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d004      	beq.n	801199e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011994:	6938      	ldr	r0, [r7, #16]
 8011996:	f7fd f804 	bl	800e9a2 <tcp_seg_free>
    return NULL;
 801199a:	2300      	movs	r3, #0
 801199c:	e037      	b.n	8011a0e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	685a      	ldr	r2, [r3, #4]
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	8ada      	ldrh	r2, [r3, #22]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	68dc      	ldr	r4, [r3, #12]
 80119b0:	4610      	mov	r0, r2
 80119b2:	f7f9 ff75 	bl	800b8a0 <lwip_htons>
 80119b6:	4603      	mov	r3, r0
 80119b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	8b1a      	ldrh	r2, [r3, #24]
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	68dc      	ldr	r4, [r3, #12]
 80119c2:	4610      	mov	r0, r2
 80119c4:	f7f9 ff6c 	bl	800b8a0 <lwip_htons>
 80119c8:	4603      	mov	r3, r0
 80119ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	68dc      	ldr	r4, [r3, #12]
 80119d0:	6838      	ldr	r0, [r7, #0]
 80119d2:	f7f9 ff7a 	bl	800b8ca <lwip_htonl>
 80119d6:	4603      	mov	r3, r0
 80119d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80119da:	7dfb      	ldrb	r3, [r7, #23]
 80119dc:	089b      	lsrs	r3, r3, #2
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	3305      	adds	r3, #5
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	031b      	lsls	r3, r3, #12
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	79fb      	ldrb	r3, [r7, #7]
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	4313      	orrs	r3, r2
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	68dc      	ldr	r4, [r3, #12]
 80119f6:	4610      	mov	r0, r2
 80119f8:	f7f9 ff52 	bl	800b8a0 <lwip_htons>
 80119fc:	4603      	mov	r3, r0
 80119fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	2200      	movs	r2, #0
 8011a06:	749a      	strb	r2, [r3, #18]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011a0c:	693b      	ldr	r3, [r7, #16]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	371c      	adds	r7, #28
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd90      	pop	{r4, r7, pc}
 8011a16:	bf00      	nop
 8011a18:	0801a3c0 	.word	0x0801a3c0
 8011a1c:	0801a3f4 	.word	0x0801a3f4
 8011a20:	0801a414 	.word	0x0801a414
 8011a24:	0801a43c 	.word	0x0801a43c
 8011a28:	0801a460 	.word	0x0801a460

08011a2c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	607b      	str	r3, [r7, #4]
 8011a34:	4603      	mov	r3, r0
 8011a36:	73fb      	strb	r3, [r7, #15]
 8011a38:	460b      	mov	r3, r1
 8011a3a:	81bb      	strh	r3, [r7, #12]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a40:	89bb      	ldrh	r3, [r7, #12]
 8011a42:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d105      	bne.n	8011a56 <tcp_pbuf_prealloc+0x2a>
 8011a4a:	4b30      	ldr	r3, [pc, #192]	; (8011b0c <tcp_pbuf_prealloc+0xe0>)
 8011a4c:	22e8      	movs	r2, #232	; 0xe8
 8011a4e:	4930      	ldr	r1, [pc, #192]	; (8011b10 <tcp_pbuf_prealloc+0xe4>)
 8011a50:	4830      	ldr	r0, [pc, #192]	; (8011b14 <tcp_pbuf_prealloc+0xe8>)
 8011a52:	f005 fad5 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d105      	bne.n	8011a68 <tcp_pbuf_prealloc+0x3c>
 8011a5c:	4b2b      	ldr	r3, [pc, #172]	; (8011b0c <tcp_pbuf_prealloc+0xe0>)
 8011a5e:	22e9      	movs	r2, #233	; 0xe9
 8011a60:	492d      	ldr	r1, [pc, #180]	; (8011b18 <tcp_pbuf_prealloc+0xec>)
 8011a62:	482c      	ldr	r0, [pc, #176]	; (8011b14 <tcp_pbuf_prealloc+0xe8>)
 8011a64:	f005 facc 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a68:	89ba      	ldrh	r2, [r7, #12]
 8011a6a:	897b      	ldrh	r3, [r7, #10]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d221      	bcs.n	8011ab4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a74:	f003 0302 	and.w	r3, r3, #2
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d111      	bne.n	8011aa0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011a7c:	6a3b      	ldr	r3, [r7, #32]
 8011a7e:	8b5b      	ldrh	r3, [r3, #26]
 8011a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d115      	bne.n	8011ab4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d007      	beq.n	8011aa0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d103      	bne.n	8011aa0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d009      	beq.n	8011ab4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011aa0:	89bb      	ldrh	r3, [r7, #12]
 8011aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011aa6:	f023 0203 	bic.w	r2, r3, #3
 8011aaa:	897b      	ldrh	r3, [r7, #10]
 8011aac:	4293      	cmp	r3, r2
 8011aae:	bf28      	it	cs
 8011ab0:	4613      	movcs	r3, r2
 8011ab2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011ab4:	8af9      	ldrh	r1, [r7, #22]
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
 8011ab8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fa ffb7 	bl	800ca30 <pbuf_alloc>
 8011ac2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d101      	bne.n	8011ace <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	e019      	b.n	8011b02 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d006      	beq.n	8011ae4 <tcp_pbuf_prealloc+0xb8>
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	; (8011b0c <tcp_pbuf_prealloc+0xe0>)
 8011ad8:	f240 120b 	movw	r2, #267	; 0x10b
 8011adc:	490f      	ldr	r1, [pc, #60]	; (8011b1c <tcp_pbuf_prealloc+0xf0>)
 8011ade:	480d      	ldr	r0, [pc, #52]	; (8011b14 <tcp_pbuf_prealloc+0xe8>)
 8011ae0:	f005 fa8e 	bl	8017000 <iprintf>
  *oversize = p->len - length;
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	895a      	ldrh	r2, [r3, #10]
 8011ae8:	89bb      	ldrh	r3, [r7, #12]
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	89ba      	ldrh	r2, [r7, #12]
 8011af6:	811a      	strh	r2, [r3, #8]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	891a      	ldrh	r2, [r3, #8]
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	815a      	strh	r2, [r3, #10]
  return p;
 8011b00:	693b      	ldr	r3, [r7, #16]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0801a3c0 	.word	0x0801a3c0
 8011b10:	0801a478 	.word	0x0801a478
 8011b14:	0801a414 	.word	0x0801a414
 8011b18:	0801a49c 	.word	0x0801a49c
 8011b1c:	0801a4bc 	.word	0x0801a4bc

08011b20 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d106      	bne.n	8011b40 <tcp_write_checks+0x20>
 8011b32:	4b33      	ldr	r3, [pc, #204]	; (8011c00 <tcp_write_checks+0xe0>)
 8011b34:	f240 1233 	movw	r2, #307	; 0x133
 8011b38:	4932      	ldr	r1, [pc, #200]	; (8011c04 <tcp_write_checks+0xe4>)
 8011b3a:	4833      	ldr	r0, [pc, #204]	; (8011c08 <tcp_write_checks+0xe8>)
 8011b3c:	f005 fa60 	bl	8017000 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	7d1b      	ldrb	r3, [r3, #20]
 8011b44:	2b04      	cmp	r3, #4
 8011b46:	d00e      	beq.n	8011b66 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011b4c:	2b07      	cmp	r3, #7
 8011b4e:	d00a      	beq.n	8011b66 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	d006      	beq.n	8011b66 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b5c:	2b03      	cmp	r3, #3
 8011b5e:	d002      	beq.n	8011b66 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b60:	f06f 030a 	mvn.w	r3, #10
 8011b64:	e048      	b.n	8011bf8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011b66:	887b      	ldrh	r3, [r7, #2]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d101      	bne.n	8011b70 <tcp_write_checks+0x50>
    return ERR_OK;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	e043      	b.n	8011bf8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b76:	887a      	ldrh	r2, [r7, #2]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d909      	bls.n	8011b90 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	8b5b      	ldrh	r3, [r3, #26]
 8011b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8e:	e033      	b.n	8011bf8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b96:	2b63      	cmp	r3, #99	; 0x63
 8011b98:	d909      	bls.n	8011bae <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8b5b      	ldrh	r3, [r3, #26]
 8011b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bac:	e024      	b.n	8011bf8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00f      	beq.n	8011bd8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d11a      	bne.n	8011bf6 <tcp_write_checks+0xd6>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d116      	bne.n	8011bf6 <tcp_write_checks+0xd6>
 8011bc8:	4b0d      	ldr	r3, [pc, #52]	; (8011c00 <tcp_write_checks+0xe0>)
 8011bca:	f240 1255 	movw	r2, #341	; 0x155
 8011bce:	490f      	ldr	r1, [pc, #60]	; (8011c0c <tcp_write_checks+0xec>)
 8011bd0:	480d      	ldr	r0, [pc, #52]	; (8011c08 <tcp_write_checks+0xe8>)
 8011bd2:	f005 fa15 	bl	8017000 <iprintf>
 8011bd6:	e00e      	b.n	8011bf6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d103      	bne.n	8011be8 <tcp_write_checks+0xc8>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d006      	beq.n	8011bf6 <tcp_write_checks+0xd6>
 8011be8:	4b05      	ldr	r3, [pc, #20]	; (8011c00 <tcp_write_checks+0xe0>)
 8011bea:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011bee:	4908      	ldr	r1, [pc, #32]	; (8011c10 <tcp_write_checks+0xf0>)
 8011bf0:	4805      	ldr	r0, [pc, #20]	; (8011c08 <tcp_write_checks+0xe8>)
 8011bf2:	f005 fa05 	bl	8017000 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011bf6:	2300      	movs	r3, #0
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	0801a3c0 	.word	0x0801a3c0
 8011c04:	0801a4d0 	.word	0x0801a4d0
 8011c08:	0801a414 	.word	0x0801a414
 8011c0c:	0801a4f0 	.word	0x0801a4f0
 8011c10:	0801a52c 	.word	0x0801a52c

08011c14 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011c14:	b590      	push	{r4, r7, lr}
 8011c16:	b09b      	sub	sp, #108	; 0x6c
 8011c18:	af04      	add	r7, sp, #16
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	4611      	mov	r1, r2
 8011c20:	461a      	mov	r2, r3
 8011c22:	460b      	mov	r3, r1
 8011c24:	80fb      	strh	r3, [r7, #6]
 8011c26:	4613      	mov	r3, r2
 8011c28:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	653b      	str	r3, [r7, #80]	; 0x50
 8011c32:	2300      	movs	r3, #0
 8011c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c36:	2300      	movs	r3, #0
 8011c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011c3e:	2300      	movs	r3, #0
 8011c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d109      	bne.n	8011c70 <tcp_write+0x5c>
 8011c5c:	4ba4      	ldr	r3, [pc, #656]	; (8011ef0 <tcp_write+0x2dc>)
 8011c5e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011c62:	49a4      	ldr	r1, [pc, #656]	; (8011ef4 <tcp_write+0x2e0>)
 8011c64:	48a4      	ldr	r0, [pc, #656]	; (8011ef8 <tcp_write+0x2e4>)
 8011c66:	f005 f9cb 	bl	8017000 <iprintf>
 8011c6a:	f06f 030f 	mvn.w	r3, #15
 8011c6e:	e32a      	b.n	80122c6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c76:	085b      	lsrs	r3, r3, #1
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	bf28      	it	cs
 8011c82:	4613      	movcs	r3, r2
 8011c84:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d102      	bne.n	8011c92 <tcp_write+0x7e>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c90:	e000      	b.n	8011c94 <tcp_write+0x80>
 8011c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c94:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d109      	bne.n	8011cb0 <tcp_write+0x9c>
 8011c9c:	4b94      	ldr	r3, [pc, #592]	; (8011ef0 <tcp_write+0x2dc>)
 8011c9e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011ca2:	4996      	ldr	r1, [pc, #600]	; (8011efc <tcp_write+0x2e8>)
 8011ca4:	4894      	ldr	r0, [pc, #592]	; (8011ef8 <tcp_write+0x2e4>)
 8011ca6:	f005 f9ab 	bl	8017000 <iprintf>
 8011caa:	f06f 030f 	mvn.w	r3, #15
 8011cae:	e30a      	b.n	80122c6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011cb0:	88fb      	ldrh	r3, [r7, #6]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f7ff ff33 	bl	8011b20 <tcp_write_checks>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011cc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <tcp_write+0xba>
    return err;
 8011cc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ccc:	e2fb      	b.n	80122c6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cd8:	2300      	movs	r3, #0
 8011cda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 80f6 	beq.w	8011ed4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cec:	653b      	str	r3, [r7, #80]	; 0x50
 8011cee:	e002      	b.n	8011cf6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1f8      	bne.n	8011cf0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d00:	7a9b      	ldrb	r3, [r3, #10]
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	f003 0304 	and.w	r3, r3, #4
 8011d0a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011d0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d10:	891b      	ldrh	r3, [r3, #8]
 8011d12:	4619      	mov	r1, r3
 8011d14:	8c3b      	ldrh	r3, [r7, #32]
 8011d16:	440b      	add	r3, r1
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	da06      	bge.n	8011d2a <tcp_write+0x116>
 8011d1c:	4b74      	ldr	r3, [pc, #464]	; (8011ef0 <tcp_write+0x2dc>)
 8011d1e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011d22:	4977      	ldr	r1, [pc, #476]	; (8011f00 <tcp_write+0x2ec>)
 8011d24:	4874      	ldr	r0, [pc, #464]	; (8011ef8 <tcp_write+0x2e4>)
 8011d26:	f005 f96b 	bl	8017000 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d2c:	891a      	ldrh	r2, [r3, #8]
 8011d2e:	8c3b      	ldrh	r3, [r7, #32]
 8011d30:	4413      	add	r3, r2
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d40:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011d42:	8a7b      	ldrh	r3, [r7, #18]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d026      	beq.n	8011d96 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011d48:	8a7b      	ldrh	r3, [r7, #18]
 8011d4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d206      	bcs.n	8011d5e <tcp_write+0x14a>
 8011d50:	4b67      	ldr	r3, [pc, #412]	; (8011ef0 <tcp_write+0x2dc>)
 8011d52:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011d56:	496b      	ldr	r1, [pc, #428]	; (8011f04 <tcp_write+0x2f0>)
 8011d58:	4867      	ldr	r0, [pc, #412]	; (8011ef8 <tcp_write+0x2e4>)
 8011d5a:	f005 f951 	bl	8017000 <iprintf>
      seg = last_unsent;
 8011d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d60:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d62:	8a7b      	ldrh	r3, [r7, #18]
 8011d64:	88fa      	ldrh	r2, [r7, #6]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	bf28      	it	cs
 8011d6a:	4613      	movcs	r3, r2
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d70:	4293      	cmp	r3, r2
 8011d72:	bf28      	it	cs
 8011d74:	4613      	movcs	r3, r2
 8011d76:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d7e:	4413      	add	r3, r2
 8011d80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011d84:	8a7a      	ldrh	r2, [r7, #18]
 8011d86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011d8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011d96:	8a7b      	ldrh	r3, [r7, #18]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00b      	beq.n	8011db4 <tcp_write+0x1a0>
 8011d9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011da0:	88fb      	ldrh	r3, [r7, #6]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d006      	beq.n	8011db4 <tcp_write+0x1a0>
 8011da6:	4b52      	ldr	r3, [pc, #328]	; (8011ef0 <tcp_write+0x2dc>)
 8011da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dac:	4956      	ldr	r1, [pc, #344]	; (8011f08 <tcp_write+0x2f4>)
 8011dae:	4852      	ldr	r0, [pc, #328]	; (8011ef8 <tcp_write+0x2e4>)
 8011db0:	f005 f926 	bl	8017000 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011db8:	88fb      	ldrh	r3, [r7, #6]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	f080 8167 	bcs.w	801208e <tcp_write+0x47a>
 8011dc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	f000 8163 	beq.w	801208e <tcp_write+0x47a>
 8011dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dca:	891b      	ldrh	r3, [r3, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f000 815e 	beq.w	801208e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011dd2:	88fa      	ldrh	r2, [r7, #6]
 8011dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dd8:	1ad2      	subs	r2, r2, r3
 8011dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	bfa8      	it	ge
 8011de0:	4613      	movge	r3, r2
 8011de2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011de6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011de8:	797b      	ldrb	r3, [r7, #5]
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d027      	beq.n	8011e42 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011df2:	f107 0012 	add.w	r0, r7, #18
 8011df6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011df8:	8bf9      	ldrh	r1, [r7, #30]
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	9302      	str	r3, [sp, #8]
 8011dfe:	797b      	ldrb	r3, [r7, #5]
 8011e00:	9301      	str	r3, [sp, #4]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	4603      	mov	r3, r0
 8011e08:	2000      	movs	r0, #0
 8011e0a:	f7ff fe0f 	bl	8011a2c <tcp_pbuf_prealloc>
 8011e0e:	6578      	str	r0, [r7, #84]	; 0x54
 8011e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f000 8225 	beq.w	8012262 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e1a:	6858      	ldr	r0, [r3, #4]
 8011e1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	4413      	add	r3, r2
 8011e24:	8bfa      	ldrh	r2, [r7, #30]
 8011e26:	4619      	mov	r1, r3
 8011e28:	f005 f810 	bl	8016e4c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011e2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e2e:	f7fb f975 	bl	800d11c <pbuf_clen>
 8011e32:	4603      	mov	r3, r0
 8011e34:	461a      	mov	r2, r3
 8011e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e3a:	4413      	add	r3, r2
 8011e3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011e40:	e041      	b.n	8011ec6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	637b      	str	r3, [r7, #52]	; 0x34
 8011e48:	e002      	b.n	8011e50 <tcp_write+0x23c>
 8011e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1f8      	bne.n	8011e4a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e5a:	7b1b      	ldrb	r3, [r3, #12]
 8011e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d115      	bne.n	8011e90 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e6a:	8952      	ldrh	r2, [r2, #10]
 8011e6c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d10d      	bne.n	8011e90 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d006      	beq.n	8011e8a <tcp_write+0x276>
 8011e7c:	4b1c      	ldr	r3, [pc, #112]	; (8011ef0 <tcp_write+0x2dc>)
 8011e7e:	f240 2231 	movw	r2, #561	; 0x231
 8011e82:	4922      	ldr	r1, [pc, #136]	; (8011f0c <tcp_write+0x2f8>)
 8011e84:	481c      	ldr	r0, [pc, #112]	; (8011ef8 <tcp_write+0x2e4>)
 8011e86:	f005 f8bb 	bl	8017000 <iprintf>
          extendlen = seglen;
 8011e8a:	8bfb      	ldrh	r3, [r7, #30]
 8011e8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e8e:	e01a      	b.n	8011ec6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011e90:	8bfb      	ldrh	r3, [r7, #30]
 8011e92:	2201      	movs	r2, #1
 8011e94:	4619      	mov	r1, r3
 8011e96:	2000      	movs	r0, #0
 8011e98:	f7fa fdca 	bl	800ca30 <pbuf_alloc>
 8011e9c:	6578      	str	r0, [r7, #84]	; 0x54
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f000 81e0 	beq.w	8012266 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011ea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	441a      	add	r2, r3
 8011eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011eb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011eb4:	f7fb f932 	bl	800d11c <pbuf_clen>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011ec6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011eca:	8bfb      	ldrh	r3, [r7, #30]
 8011ecc:	4413      	add	r3, r2
 8011ece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011ed2:	e0dc      	b.n	801208e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f000 80d7 	beq.w	801208e <tcp_write+0x47a>
 8011ee0:	4b03      	ldr	r3, [pc, #12]	; (8011ef0 <tcp_write+0x2dc>)
 8011ee2:	f240 224a 	movw	r2, #586	; 0x24a
 8011ee6:	490a      	ldr	r1, [pc, #40]	; (8011f10 <tcp_write+0x2fc>)
 8011ee8:	4803      	ldr	r0, [pc, #12]	; (8011ef8 <tcp_write+0x2e4>)
 8011eea:	f005 f889 	bl	8017000 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011eee:	e0ce      	b.n	801208e <tcp_write+0x47a>
 8011ef0:	0801a3c0 	.word	0x0801a3c0
 8011ef4:	0801a560 	.word	0x0801a560
 8011ef8:	0801a414 	.word	0x0801a414
 8011efc:	0801a578 	.word	0x0801a578
 8011f00:	0801a5ac 	.word	0x0801a5ac
 8011f04:	0801a5c4 	.word	0x0801a5c4
 8011f08:	0801a5e4 	.word	0x0801a5e4
 8011f0c:	0801a604 	.word	0x0801a604
 8011f10:	0801a630 	.word	0x0801a630
    struct pbuf *p;
    u16_t left = len - pos;
 8011f14:	88fa      	ldrh	r2, [r7, #6]
 8011f16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011f1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011f2a:	8b7a      	ldrh	r2, [r7, #26]
 8011f2c:	8bbb      	ldrh	r3, [r7, #28]
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	bf28      	it	cs
 8011f32:	4613      	movcs	r3, r2
 8011f34:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f36:	797b      	ldrb	r3, [r7, #5]
 8011f38:	f003 0301 	and.w	r3, r3, #1
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d036      	beq.n	8011fae <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011f40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	8b3b      	ldrh	r3, [r7, #24]
 8011f48:	4413      	add	r3, r2
 8011f4a:	b299      	uxth	r1, r3
 8011f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	bf0c      	ite	eq
 8011f52:	2301      	moveq	r3, #1
 8011f54:	2300      	movne	r3, #0
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	f107 0012 	add.w	r0, r7, #18
 8011f5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f5e:	9302      	str	r3, [sp, #8]
 8011f60:	797b      	ldrb	r3, [r7, #5]
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	9300      	str	r3, [sp, #0]
 8011f68:	4603      	mov	r3, r0
 8011f6a:	2036      	movs	r0, #54	; 0x36
 8011f6c:	f7ff fd5e 	bl	8011a2c <tcp_pbuf_prealloc>
 8011f70:	6338      	str	r0, [r7, #48]	; 0x30
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f000 8178 	beq.w	801226a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7c:	895b      	ldrh	r3, [r3, #10]
 8011f7e:	8b3a      	ldrh	r2, [r7, #24]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d906      	bls.n	8011f92 <tcp_write+0x37e>
 8011f84:	4b8c      	ldr	r3, [pc, #560]	; (80121b8 <tcp_write+0x5a4>)
 8011f86:	f240 2266 	movw	r2, #614	; 0x266
 8011f8a:	498c      	ldr	r1, [pc, #560]	; (80121bc <tcp_write+0x5a8>)
 8011f8c:	488c      	ldr	r0, [pc, #560]	; (80121c0 <tcp_write+0x5ac>)
 8011f8e:	f005 f837 	bl	8017000 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	685a      	ldr	r2, [r3, #4]
 8011f96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f9a:	18d0      	adds	r0, r2, r3
 8011f9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	8b3a      	ldrh	r2, [r7, #24]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	f004 ff50 	bl	8016e4c <memcpy>
 8011fac:	e02f      	b.n	801200e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011fae:	8a7b      	ldrh	r3, [r7, #18]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d006      	beq.n	8011fc2 <tcp_write+0x3ae>
 8011fb4:	4b80      	ldr	r3, [pc, #512]	; (80121b8 <tcp_write+0x5a4>)
 8011fb6:	f240 2271 	movw	r2, #625	; 0x271
 8011fba:	4982      	ldr	r1, [pc, #520]	; (80121c4 <tcp_write+0x5b0>)
 8011fbc:	4880      	ldr	r0, [pc, #512]	; (80121c0 <tcp_write+0x5ac>)
 8011fbe:	f005 f81f 	bl	8017000 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011fc2:	8b3b      	ldrh	r3, [r7, #24]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	2036      	movs	r0, #54	; 0x36
 8011fca:	f7fa fd31 	bl	800ca30 <pbuf_alloc>
 8011fce:	6178      	str	r0, [r7, #20]
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f000 814b 	beq.w	801226e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	441a      	add	r2, r3
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011fe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fee:	4619      	mov	r1, r3
 8011ff0:	2036      	movs	r0, #54	; 0x36
 8011ff2:	f7fa fd1d 	bl	800ca30 <pbuf_alloc>
 8011ff6:	6338      	str	r0, [r7, #48]	; 0x30
 8011ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d103      	bne.n	8012006 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011ffe:	6978      	ldr	r0, [r7, #20]
 8012000:	f7fa fffe 	bl	800d000 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012004:	e136      	b.n	8012274 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012006:	6979      	ldr	r1, [r7, #20]
 8012008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801200a:	f7fb f8c7 	bl	800d19c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801200e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012010:	f7fb f884 	bl	800d11c <pbuf_clen>
 8012014:	4603      	mov	r3, r0
 8012016:	461a      	mov	r2, r3
 8012018:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801201c:	4413      	add	r3, r2
 801201e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012022:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012026:	2b64      	cmp	r3, #100	; 0x64
 8012028:	d903      	bls.n	8012032 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801202a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801202c:	f7fa ffe8 	bl	800d000 <pbuf_free>
      goto memerr;
 8012030:	e120      	b.n	8012274 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012036:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801203a:	441a      	add	r2, r3
 801203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4613      	mov	r3, r2
 8012044:	2200      	movs	r2, #0
 8012046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	f7ff fc51 	bl	80118f0 <tcp_create_segment>
 801204e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012052:	2b00      	cmp	r3, #0
 8012054:	f000 810d 	beq.w	8012272 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801205a:	2b00      	cmp	r3, #0
 801205c:	d102      	bne.n	8012064 <tcp_write+0x450>
      queue = seg;
 801205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012060:	647b      	str	r3, [r7, #68]	; 0x44
 8012062:	e00c      	b.n	801207e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012066:	2b00      	cmp	r3, #0
 8012068:	d106      	bne.n	8012078 <tcp_write+0x464>
 801206a:	4b53      	ldr	r3, [pc, #332]	; (80121b8 <tcp_write+0x5a4>)
 801206c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012070:	4955      	ldr	r1, [pc, #340]	; (80121c8 <tcp_write+0x5b4>)
 8012072:	4853      	ldr	r0, [pc, #332]	; (80121c0 <tcp_write+0x5ac>)
 8012074:	f004 ffc4 	bl	8017000 <iprintf>
      prev_seg->next = seg;
 8012078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801207a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801207c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012080:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012086:	8b3b      	ldrh	r3, [r7, #24]
 8012088:	4413      	add	r3, r2
 801208a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801208e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012092:	88fb      	ldrh	r3, [r7, #6]
 8012094:	429a      	cmp	r2, r3
 8012096:	f4ff af3d 	bcc.w	8011f14 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801209a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801209c:	2b00      	cmp	r3, #0
 801209e:	d02c      	beq.n	80120fa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80120a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120a6:	e01e      	b.n	80120e6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80120a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120aa:	891a      	ldrh	r2, [r3, #8]
 80120ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120ae:	4413      	add	r3, r2
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d110      	bne.n	80120e0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80120be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120c4:	8952      	ldrh	r2, [r2, #10]
 80120c6:	4413      	add	r3, r2
 80120c8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80120ca:	68b9      	ldr	r1, [r7, #8]
 80120cc:	4618      	mov	r0, r3
 80120ce:	f004 febd 	bl	8016e4c <memcpy>
        p->len += oversize_used;
 80120d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d4:	895a      	ldrh	r2, [r3, #10]
 80120d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120d8:	4413      	add	r3, r2
 80120da:	b29a      	uxth	r2, r3
 80120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120de:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80120e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1dd      	bne.n	80120a8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80120ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ee:	891a      	ldrh	r2, [r3, #8]
 80120f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120f2:	4413      	add	r3, r2
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80120fa:	8a7a      	ldrh	r2, [r7, #18]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012104:	2b00      	cmp	r3, #0
 8012106:	d018      	beq.n	801213a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	2b00      	cmp	r3, #0
 801210c:	d106      	bne.n	801211c <tcp_write+0x508>
 801210e:	4b2a      	ldr	r3, [pc, #168]	; (80121b8 <tcp_write+0x5a4>)
 8012110:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012114:	492d      	ldr	r1, [pc, #180]	; (80121cc <tcp_write+0x5b8>)
 8012116:	482a      	ldr	r0, [pc, #168]	; (80121c0 <tcp_write+0x5ac>)
 8012118:	f004 ff72 	bl	8017000 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012122:	4618      	mov	r0, r3
 8012124:	f7fb f83a 	bl	800d19c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801212a:	891a      	ldrh	r2, [r3, #8]
 801212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801212e:	891b      	ldrh	r3, [r3, #8]
 8012130:	4413      	add	r3, r2
 8012132:	b29a      	uxth	r2, r3
 8012134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012136:	811a      	strh	r2, [r3, #8]
 8012138:	e037      	b.n	80121aa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801213a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801213c:	2b00      	cmp	r3, #0
 801213e:	d034      	beq.n	80121aa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012142:	2b00      	cmp	r3, #0
 8012144:	d003      	beq.n	801214e <tcp_write+0x53a>
 8012146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <tcp_write+0x548>
 801214e:	4b1a      	ldr	r3, [pc, #104]	; (80121b8 <tcp_write+0x5a4>)
 8012150:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012154:	491e      	ldr	r1, [pc, #120]	; (80121d0 <tcp_write+0x5bc>)
 8012156:	481a      	ldr	r0, [pc, #104]	; (80121c0 <tcp_write+0x5ac>)
 8012158:	f004 ff52 	bl	8017000 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801215c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	62bb      	str	r3, [r7, #40]	; 0x28
 8012162:	e009      	b.n	8012178 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012166:	891a      	ldrh	r2, [r3, #8]
 8012168:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801216a:	4413      	add	r3, r2
 801216c:	b29a      	uxth	r2, r3
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	62bb      	str	r3, [r7, #40]	; 0x28
 8012178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d1f1      	bne.n	8012164 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012182:	891a      	ldrh	r2, [r3, #8]
 8012184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012186:	4413      	add	r3, r2
 8012188:	b29a      	uxth	r2, r3
 801218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012190:	895a      	ldrh	r2, [r3, #10]
 8012192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012194:	4413      	add	r3, r2
 8012196:	b29a      	uxth	r2, r3
 8012198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801219c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801219e:	891a      	ldrh	r2, [r3, #8]
 80121a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121a2:	4413      	add	r3, r2
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121a8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80121aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d111      	bne.n	80121d4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80121b6:	e010      	b.n	80121da <tcp_write+0x5c6>
 80121b8:	0801a3c0 	.word	0x0801a3c0
 80121bc:	0801a660 	.word	0x0801a660
 80121c0:	0801a414 	.word	0x0801a414
 80121c4:	0801a6a0 	.word	0x0801a6a0
 80121c8:	0801a6b0 	.word	0x0801a6b0
 80121cc:	0801a6c4 	.word	0x0801a6c4
 80121d0:	0801a6fc 	.word	0x0801a6fc
  } else {
    last_unsent->next = queue;
 80121d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121de:	88fb      	ldrh	r3, [r7, #6]
 80121e0:	441a      	add	r2, r3
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80121ec:	88fb      	ldrh	r3, [r7, #6]
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80121fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012208:	2b00      	cmp	r3, #0
 801220a:	d00e      	beq.n	801222a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10a      	bne.n	801222a <tcp_write+0x616>
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012218:	2b00      	cmp	r3, #0
 801221a:	d106      	bne.n	801222a <tcp_write+0x616>
 801221c:	4b2c      	ldr	r3, [pc, #176]	; (80122d0 <tcp_write+0x6bc>)
 801221e:	f240 3212 	movw	r2, #786	; 0x312
 8012222:	492c      	ldr	r1, [pc, #176]	; (80122d4 <tcp_write+0x6c0>)
 8012224:	482c      	ldr	r0, [pc, #176]	; (80122d8 <tcp_write+0x6c4>)
 8012226:	f004 feeb 	bl	8017000 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d016      	beq.n	801225e <tcp_write+0x64a>
 8012230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d012      	beq.n	801225e <tcp_write+0x64a>
 8012238:	797b      	ldrb	r3, [r7, #5]
 801223a:	f003 0302 	and.w	r3, r3, #2
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10d      	bne.n	801225e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	899b      	ldrh	r3, [r3, #12]
 8012248:	b29c      	uxth	r4, r3
 801224a:	2008      	movs	r0, #8
 801224c:	f7f9 fb28 	bl	800b8a0 <lwip_htons>
 8012250:	4603      	mov	r3, r0
 8012252:	461a      	mov	r2, r3
 8012254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	4322      	orrs	r2, r4
 801225a:	b292      	uxth	r2, r2
 801225c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801225e:	2300      	movs	r3, #0
 8012260:	e031      	b.n	80122c6 <tcp_write+0x6b2>
          goto memerr;
 8012262:	bf00      	nop
 8012264:	e006      	b.n	8012274 <tcp_write+0x660>
            goto memerr;
 8012266:	bf00      	nop
 8012268:	e004      	b.n	8012274 <tcp_write+0x660>
        goto memerr;
 801226a:	bf00      	nop
 801226c:	e002      	b.n	8012274 <tcp_write+0x660>
        goto memerr;
 801226e:	bf00      	nop
 8012270:	e000      	b.n	8012274 <tcp_write+0x660>
      goto memerr;
 8012272:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	8b5b      	ldrh	r3, [r3, #26]
 8012278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801227c:	b29a      	uxth	r2, r3
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012284:	2b00      	cmp	r3, #0
 8012286:	d002      	beq.n	801228e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012288:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801228a:	f7fa feb9 	bl	800d000 <pbuf_free>
  }
  if (queue != NULL) {
 801228e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012290:	2b00      	cmp	r3, #0
 8012292:	d002      	beq.n	801229a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012294:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012296:	f7fc fb6f 	bl	800e978 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00e      	beq.n	80122c2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10a      	bne.n	80122c2 <tcp_write+0x6ae>
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d106      	bne.n	80122c2 <tcp_write+0x6ae>
 80122b4:	4b06      	ldr	r3, [pc, #24]	; (80122d0 <tcp_write+0x6bc>)
 80122b6:	f240 3227 	movw	r2, #807	; 0x327
 80122ba:	4906      	ldr	r1, [pc, #24]	; (80122d4 <tcp_write+0x6c0>)
 80122bc:	4806      	ldr	r0, [pc, #24]	; (80122d8 <tcp_write+0x6c4>)
 80122be:	f004 fe9f 	bl	8017000 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80122c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	375c      	adds	r7, #92	; 0x5c
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd90      	pop	{r4, r7, pc}
 80122ce:	bf00      	nop
 80122d0:	0801a3c0 	.word	0x0801a3c0
 80122d4:	0801a734 	.word	0x0801a734
 80122d8:	0801a414 	.word	0x0801a414

080122dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80122dc:	b590      	push	{r4, r7, lr}
 80122de:	b08b      	sub	sp, #44	; 0x2c
 80122e0:	af02      	add	r7, sp, #8
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	460b      	mov	r3, r1
 80122e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80122e8:	2300      	movs	r3, #0
 80122ea:	61fb      	str	r3, [r7, #28]
 80122ec:	2300      	movs	r3, #0
 80122ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d106      	bne.n	8012308 <tcp_split_unsent_seg+0x2c>
 80122fa:	4b95      	ldr	r3, [pc, #596]	; (8012550 <tcp_split_unsent_seg+0x274>)
 80122fc:	f240 324b 	movw	r2, #843	; 0x34b
 8012300:	4994      	ldr	r1, [pc, #592]	; (8012554 <tcp_split_unsent_seg+0x278>)
 8012302:	4895      	ldr	r0, [pc, #596]	; (8012558 <tcp_split_unsent_seg+0x27c>)
 8012304:	f004 fe7c 	bl	8017000 <iprintf>

  useg = pcb->unsent;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d102      	bne.n	801231a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012314:	f04f 33ff 	mov.w	r3, #4294967295
 8012318:	e116      	b.n	8012548 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801231a:	887b      	ldrh	r3, [r7, #2]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d109      	bne.n	8012334 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012320:	4b8b      	ldr	r3, [pc, #556]	; (8012550 <tcp_split_unsent_seg+0x274>)
 8012322:	f240 3253 	movw	r2, #851	; 0x353
 8012326:	498d      	ldr	r1, [pc, #564]	; (801255c <tcp_split_unsent_seg+0x280>)
 8012328:	488b      	ldr	r0, [pc, #556]	; (8012558 <tcp_split_unsent_seg+0x27c>)
 801232a:	f004 fe69 	bl	8017000 <iprintf>
    return ERR_VAL;
 801232e:	f06f 0305 	mvn.w	r3, #5
 8012332:	e109      	b.n	8012548 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	891b      	ldrh	r3, [r3, #8]
 8012338:	887a      	ldrh	r2, [r7, #2]
 801233a:	429a      	cmp	r2, r3
 801233c:	d301      	bcc.n	8012342 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	e102      	b.n	8012548 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012346:	887a      	ldrh	r2, [r7, #2]
 8012348:	429a      	cmp	r2, r3
 801234a:	d906      	bls.n	801235a <tcp_split_unsent_seg+0x7e>
 801234c:	4b80      	ldr	r3, [pc, #512]	; (8012550 <tcp_split_unsent_seg+0x274>)
 801234e:	f240 325b 	movw	r2, #859	; 0x35b
 8012352:	4983      	ldr	r1, [pc, #524]	; (8012560 <tcp_split_unsent_seg+0x284>)
 8012354:	4880      	ldr	r0, [pc, #512]	; (8012558 <tcp_split_unsent_seg+0x27c>)
 8012356:	f004 fe53 	bl	8017000 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	891b      	ldrh	r3, [r3, #8]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d106      	bne.n	8012370 <tcp_split_unsent_seg+0x94>
 8012362:	4b7b      	ldr	r3, [pc, #492]	; (8012550 <tcp_split_unsent_seg+0x274>)
 8012364:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012368:	497e      	ldr	r1, [pc, #504]	; (8012564 <tcp_split_unsent_seg+0x288>)
 801236a:	487b      	ldr	r0, [pc, #492]	; (8012558 <tcp_split_unsent_seg+0x27c>)
 801236c:	f004 fe48 	bl	8017000 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	7a9b      	ldrb	r3, [r3, #10]
 8012374:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012376:	7bfb      	ldrb	r3, [r7, #15]
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	b2db      	uxtb	r3, r3
 801237c:	f003 0304 	and.w	r3, r3, #4
 8012380:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	891a      	ldrh	r2, [r3, #8]
 8012386:	887b      	ldrh	r3, [r7, #2]
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	b29a      	uxth	r2, r3
 8012390:	89bb      	ldrh	r3, [r7, #12]
 8012392:	4413      	add	r3, r2
 8012394:	b29b      	uxth	r3, r3
 8012396:	f44f 7220 	mov.w	r2, #640	; 0x280
 801239a:	4619      	mov	r1, r3
 801239c:	2036      	movs	r0, #54	; 0x36
 801239e:	f7fa fb47 	bl	800ca30 <pbuf_alloc>
 80123a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 80b7 	beq.w	801251a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	891a      	ldrh	r2, [r3, #8]
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	891b      	ldrh	r3, [r3, #8]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	887b      	ldrh	r3, [r7, #2]
 80123bc:	4413      	add	r3, r2
 80123be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	6858      	ldr	r0, [r3, #4]
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	7bbb      	ldrb	r3, [r7, #14]
 80123ca:	18d1      	adds	r1, r2, r3
 80123cc:	897b      	ldrh	r3, [r7, #10]
 80123ce:	89ba      	ldrh	r2, [r7, #12]
 80123d0:	f7fb f80c 	bl	800d3ec <pbuf_copy_partial>
 80123d4:	4603      	mov	r3, r0
 80123d6:	461a      	mov	r2, r3
 80123d8:	89bb      	ldrh	r3, [r7, #12]
 80123da:	4293      	cmp	r3, r2
 80123dc:	f040 809f 	bne.w	801251e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	68db      	ldr	r3, [r3, #12]
 80123e4:	899b      	ldrh	r3, [r3, #12]
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f9 fa59 	bl	800b8a0 <lwip_htons>
 80123ee:	4603      	mov	r3, r0
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80123f8:	2300      	movs	r3, #0
 80123fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80123fc:	7efb      	ldrb	r3, [r7, #27]
 80123fe:	f003 0308 	and.w	r3, r3, #8
 8012402:	2b00      	cmp	r3, #0
 8012404:	d007      	beq.n	8012416 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012406:	7efb      	ldrb	r3, [r7, #27]
 8012408:	f023 0308 	bic.w	r3, r3, #8
 801240c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801240e:	7ebb      	ldrb	r3, [r7, #26]
 8012410:	f043 0308 	orr.w	r3, r3, #8
 8012414:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012416:	7efb      	ldrb	r3, [r7, #27]
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	2b00      	cmp	r3, #0
 801241e:	d007      	beq.n	8012430 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012420:	7efb      	ldrb	r3, [r7, #27]
 8012422:	f023 0301 	bic.w	r3, r3, #1
 8012426:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012428:	7ebb      	ldrb	r3, [r7, #26]
 801242a:	f043 0301 	orr.w	r3, r3, #1
 801242e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f7f9 fa47 	bl	800b8ca <lwip_htonl>
 801243c:	4602      	mov	r2, r0
 801243e:	887b      	ldrh	r3, [r7, #2]
 8012440:	18d1      	adds	r1, r2, r3
 8012442:	7eba      	ldrb	r2, [r7, #26]
 8012444:	7bfb      	ldrb	r3, [r7, #15]
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	460b      	mov	r3, r1
 801244a:	6939      	ldr	r1, [r7, #16]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff fa4f 	bl	80118f0 <tcp_create_segment>
 8012452:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d063      	beq.n	8012522 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f7fa fe5c 	bl	800d11c <pbuf_clen>
 8012464:	4603      	mov	r3, r0
 8012466:	461a      	mov	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801246e:	1a9b      	subs	r3, r3, r2
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	6858      	ldr	r0, [r3, #4]
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	891a      	ldrh	r2, [r3, #8]
 8012482:	89bb      	ldrh	r3, [r7, #12]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	b29b      	uxth	r3, r3
 8012488:	4619      	mov	r1, r3
 801248a:	f7fa fc33 	bl	800ccf4 <pbuf_realloc>
  useg->len -= remainder;
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	891a      	ldrh	r2, [r3, #8]
 8012492:	89bb      	ldrh	r3, [r7, #12]
 8012494:	1ad3      	subs	r3, r2, r3
 8012496:	b29a      	uxth	r2, r3
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	899b      	ldrh	r3, [r3, #12]
 80124a2:	b29c      	uxth	r4, r3
 80124a4:	7efb      	ldrb	r3, [r7, #27]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7f9 f9f9 	bl	800b8a0 <lwip_htons>
 80124ae:	4603      	mov	r3, r0
 80124b0:	461a      	mov	r2, r3
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	4322      	orrs	r2, r4
 80124b8:	b292      	uxth	r2, r2
 80124ba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7fa fe2b 	bl	800d11c <pbuf_clen>
 80124c6:	4603      	mov	r3, r0
 80124c8:	461a      	mov	r2, r3
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124d0:	4413      	add	r3, r2
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fa fe1c 	bl	800d11c <pbuf_clen>
 80124e4:	4603      	mov	r3, r0
 80124e6:	461a      	mov	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ee:	4413      	add	r3, r2
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	69fa      	ldr	r2, [r7, #28]
 8012504:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d103      	bne.n	8012516 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012516:	2300      	movs	r3, #0
 8012518:	e016      	b.n	8012548 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801251a:	bf00      	nop
 801251c:	e002      	b.n	8012524 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801251e:	bf00      	nop
 8012520:	e000      	b.n	8012524 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012522:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d006      	beq.n	8012538 <tcp_split_unsent_seg+0x25c>
 801252a:	4b09      	ldr	r3, [pc, #36]	; (8012550 <tcp_split_unsent_seg+0x274>)
 801252c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012530:	490d      	ldr	r1, [pc, #52]	; (8012568 <tcp_split_unsent_seg+0x28c>)
 8012532:	4809      	ldr	r0, [pc, #36]	; (8012558 <tcp_split_unsent_seg+0x27c>)
 8012534:	f004 fd64 	bl	8017000 <iprintf>
  if (p != NULL) {
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801253e:	6938      	ldr	r0, [r7, #16]
 8012540:	f7fa fd5e 	bl	800d000 <pbuf_free>
  }

  return ERR_MEM;
 8012544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012548:	4618      	mov	r0, r3
 801254a:	3724      	adds	r7, #36	; 0x24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd90      	pop	{r4, r7, pc}
 8012550:	0801a3c0 	.word	0x0801a3c0
 8012554:	0801a754 	.word	0x0801a754
 8012558:	0801a414 	.word	0x0801a414
 801255c:	0801a778 	.word	0x0801a778
 8012560:	0801a79c 	.word	0x0801a79c
 8012564:	0801a7ac 	.word	0x0801a7ac
 8012568:	0801a7bc 	.word	0x0801a7bc

0801256c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801256c:	b590      	push	{r4, r7, lr}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <tcp_send_fin+0x1c>
 801257a:	4b21      	ldr	r3, [pc, #132]	; (8012600 <tcp_send_fin+0x94>)
 801257c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012580:	4920      	ldr	r1, [pc, #128]	; (8012604 <tcp_send_fin+0x98>)
 8012582:	4821      	ldr	r0, [pc, #132]	; (8012608 <tcp_send_fin+0x9c>)
 8012584:	f004 fd3c 	bl	8017000 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801258c:	2b00      	cmp	r3, #0
 801258e:	d02e      	beq.n	80125ee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012594:	60fb      	str	r3, [r7, #12]
 8012596:	e002      	b.n	801259e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1f8      	bne.n	8012598 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7f9 f976 	bl	800b8a0 <lwip_htons>
 80125b4:	4603      	mov	r3, r0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0307 	and.w	r3, r3, #7
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d116      	bne.n	80125ee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	899b      	ldrh	r3, [r3, #12]
 80125c6:	b29c      	uxth	r4, r3
 80125c8:	2001      	movs	r0, #1
 80125ca:	f7f9 f969 	bl	800b8a0 <lwip_htons>
 80125ce:	4603      	mov	r3, r0
 80125d0:	461a      	mov	r2, r3
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	4322      	orrs	r2, r4
 80125d8:	b292      	uxth	r2, r2
 80125da:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	8b5b      	ldrh	r3, [r3, #26]
 80125e0:	f043 0320 	orr.w	r3, r3, #32
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80125ea:	2300      	movs	r3, #0
 80125ec:	e004      	b.n	80125f8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80125ee:	2101      	movs	r1, #1
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 f80b 	bl	801260c <tcp_enqueue_flags>
 80125f6:	4603      	mov	r3, r0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd90      	pop	{r4, r7, pc}
 8012600:	0801a3c0 	.word	0x0801a3c0
 8012604:	0801a7c8 	.word	0x0801a7c8
 8012608:	0801a414 	.word	0x0801a414

0801260c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b08a      	sub	sp, #40	; 0x28
 8012610:	af02      	add	r7, sp, #8
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	460b      	mov	r3, r1
 8012616:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012618:	2300      	movs	r3, #0
 801261a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801261c:	2300      	movs	r3, #0
 801261e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012620:	78fb      	ldrb	r3, [r7, #3]
 8012622:	f003 0303 	and.w	r3, r3, #3
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <tcp_enqueue_flags+0x2c>
 801262a:	4b67      	ldr	r3, [pc, #412]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 801262c:	f240 4211 	movw	r2, #1041	; 0x411
 8012630:	4966      	ldr	r1, [pc, #408]	; (80127cc <tcp_enqueue_flags+0x1c0>)
 8012632:	4867      	ldr	r0, [pc, #412]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 8012634:	f004 fce4 	bl	8017000 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d106      	bne.n	801264c <tcp_enqueue_flags+0x40>
 801263e:	4b62      	ldr	r3, [pc, #392]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 8012640:	f240 4213 	movw	r2, #1043	; 0x413
 8012644:	4963      	ldr	r1, [pc, #396]	; (80127d4 <tcp_enqueue_flags+0x1c8>)
 8012646:	4862      	ldr	r0, [pc, #392]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 8012648:	f004 fcda 	bl	8017000 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801264c:	78fb      	ldrb	r3, [r7, #3]
 801264e:	f003 0302 	and.w	r3, r3, #2
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012656:	2301      	movs	r3, #1
 8012658:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801265a:	7ffb      	ldrb	r3, [r7, #31]
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	b2db      	uxtb	r3, r3
 8012660:	f003 0304 	and.w	r3, r3, #4
 8012664:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012666:	7dfb      	ldrb	r3, [r7, #23]
 8012668:	b29b      	uxth	r3, r3
 801266a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801266e:	4619      	mov	r1, r3
 8012670:	2036      	movs	r0, #54	; 0x36
 8012672:	f7fa f9dd 	bl	800ca30 <pbuf_alloc>
 8012676:	6138      	str	r0, [r7, #16]
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d109      	bne.n	8012692 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	8b5b      	ldrh	r3, [r3, #26]
 8012682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012686:	b29a      	uxth	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801268c:	f04f 33ff 	mov.w	r3, #4294967295
 8012690:	e095      	b.n	80127be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	895a      	ldrh	r2, [r3, #10]
 8012696:	7dfb      	ldrb	r3, [r7, #23]
 8012698:	b29b      	uxth	r3, r3
 801269a:	429a      	cmp	r2, r3
 801269c:	d206      	bcs.n	80126ac <tcp_enqueue_flags+0xa0>
 801269e:	4b4a      	ldr	r3, [pc, #296]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 80126a0:	f240 4239 	movw	r2, #1081	; 0x439
 80126a4:	494c      	ldr	r1, [pc, #304]	; (80127d8 <tcp_enqueue_flags+0x1cc>)
 80126a6:	484a      	ldr	r0, [pc, #296]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 80126a8:	f004 fcaa 	bl	8017000 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80126b0:	78fa      	ldrb	r2, [r7, #3]
 80126b2:	7ffb      	ldrb	r3, [r7, #31]
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	460b      	mov	r3, r1
 80126b8:	6939      	ldr	r1, [r7, #16]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff f918 	bl	80118f0 <tcp_create_segment>
 80126c0:	60f8      	str	r0, [r7, #12]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d109      	bne.n	80126dc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	8b5b      	ldrh	r3, [r3, #26]
 80126cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126d6:	f04f 33ff 	mov.w	r3, #4294967295
 80126da:	e070      	b.n	80127be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	f003 0303 	and.w	r3, r3, #3
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d006      	beq.n	80126f6 <tcp_enqueue_flags+0xea>
 80126e8:	4b37      	ldr	r3, [pc, #220]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 80126ea:	f240 4242 	movw	r2, #1090	; 0x442
 80126ee:	493b      	ldr	r1, [pc, #236]	; (80127dc <tcp_enqueue_flags+0x1d0>)
 80126f0:	4837      	ldr	r0, [pc, #220]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 80126f2:	f004 fc85 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	891b      	ldrh	r3, [r3, #8]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d006      	beq.n	801270c <tcp_enqueue_flags+0x100>
 80126fe:	4b32      	ldr	r3, [pc, #200]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 8012700:	f240 4243 	movw	r2, #1091	; 0x443
 8012704:	4936      	ldr	r1, [pc, #216]	; (80127e0 <tcp_enqueue_flags+0x1d4>)
 8012706:	4832      	ldr	r0, [pc, #200]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 8012708:	f004 fc7a 	bl	8017000 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012710:	2b00      	cmp	r3, #0
 8012712:	d103      	bne.n	801271c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	66da      	str	r2, [r3, #108]	; 0x6c
 801271a:	e00d      	b.n	8012738 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012720:	61bb      	str	r3, [r7, #24]
 8012722:	e002      	b.n	801272a <tcp_enqueue_flags+0x11e>
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	61bb      	str	r3, [r7, #24]
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1f8      	bne.n	8012724 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012740:	78fb      	ldrb	r3, [r7, #3]
 8012742:	f003 0302 	and.w	r3, r3, #2
 8012746:	2b00      	cmp	r3, #0
 8012748:	d104      	bne.n	8012754 <tcp_enqueue_flags+0x148>
 801274a:	78fb      	ldrb	r3, [r7, #3]
 801274c:	f003 0301 	and.w	r3, r3, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	d004      	beq.n	801275e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	f003 0301 	and.w	r3, r3, #1
 8012764:	2b00      	cmp	r3, #0
 8012766:	d006      	beq.n	8012776 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	8b5b      	ldrh	r3, [r3, #26]
 801276c:	f043 0320 	orr.w	r3, r3, #32
 8012770:	b29a      	uxth	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	f7fa fcce 	bl	800d11c <pbuf_clen>
 8012780:	4603      	mov	r3, r0
 8012782:	461a      	mov	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801278a:	4413      	add	r3, r2
 801278c:	b29a      	uxth	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00e      	beq.n	80127bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10a      	bne.n	80127bc <tcp_enqueue_flags+0x1b0>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <tcp_enqueue_flags+0x1b0>
 80127ae:	4b06      	ldr	r3, [pc, #24]	; (80127c8 <tcp_enqueue_flags+0x1bc>)
 80127b0:	f240 4265 	movw	r2, #1125	; 0x465
 80127b4:	490b      	ldr	r1, [pc, #44]	; (80127e4 <tcp_enqueue_flags+0x1d8>)
 80127b6:	4806      	ldr	r0, [pc, #24]	; (80127d0 <tcp_enqueue_flags+0x1c4>)
 80127b8:	f004 fc22 	bl	8017000 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80127bc:	2300      	movs	r3, #0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3720      	adds	r7, #32
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	0801a3c0 	.word	0x0801a3c0
 80127cc:	0801a7e4 	.word	0x0801a7e4
 80127d0:	0801a414 	.word	0x0801a414
 80127d4:	0801a83c 	.word	0x0801a83c
 80127d8:	0801a85c 	.word	0x0801a85c
 80127dc:	0801a898 	.word	0x0801a898
 80127e0:	0801a8b0 	.word	0x0801a8b0
 80127e4:	0801a8dc 	.word	0x0801a8dc

080127e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80127e8:	b5b0      	push	{r4, r5, r7, lr}
 80127ea:	b08a      	sub	sp, #40	; 0x28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d106      	bne.n	8012804 <tcp_output+0x1c>
 80127f6:	4b9e      	ldr	r3, [pc, #632]	; (8012a70 <tcp_output+0x288>)
 80127f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80127fc:	499d      	ldr	r1, [pc, #628]	; (8012a74 <tcp_output+0x28c>)
 80127fe:	489e      	ldr	r0, [pc, #632]	; (8012a78 <tcp_output+0x290>)
 8012800:	f004 fbfe 	bl	8017000 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7d1b      	ldrb	r3, [r3, #20]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d106      	bne.n	801281a <tcp_output+0x32>
 801280c:	4b98      	ldr	r3, [pc, #608]	; (8012a70 <tcp_output+0x288>)
 801280e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012812:	499a      	ldr	r1, [pc, #616]	; (8012a7c <tcp_output+0x294>)
 8012814:	4898      	ldr	r0, [pc, #608]	; (8012a78 <tcp_output+0x290>)
 8012816:	f004 fbf3 	bl	8017000 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801281a:	4b99      	ldr	r3, [pc, #612]	; (8012a80 <tcp_output+0x298>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	429a      	cmp	r2, r3
 8012822:	d101      	bne.n	8012828 <tcp_output+0x40>
    return ERR_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	e1ce      	b.n	8012bc6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012834:	4293      	cmp	r3, r2
 8012836:	bf28      	it	cs
 8012838:	4613      	movcs	r3, r2
 801283a:	b29b      	uxth	r3, r3
 801283c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012842:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012846:	2b00      	cmp	r3, #0
 8012848:	d10b      	bne.n	8012862 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	8b5b      	ldrh	r3, [r3, #26]
 801284e:	f003 0302 	and.w	r3, r3, #2
 8012852:	2b00      	cmp	r3, #0
 8012854:	f000 81aa 	beq.w	8012bac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 fdcb 	bl	80133f4 <tcp_send_empty_ack>
 801285e:	4603      	mov	r3, r0
 8012860:	e1b1      	b.n	8012bc6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012862:	6879      	ldr	r1, [r7, #4]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	3304      	adds	r3, #4
 8012868:	461a      	mov	r2, r3
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7ff f824 	bl	80118b8 <tcp_route>
 8012870:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d102      	bne.n	801287e <tcp_output+0x96>
    return ERR_RTE;
 8012878:	f06f 0303 	mvn.w	r3, #3
 801287c:	e1a3      	b.n	8012bc6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d003      	beq.n	801288c <tcp_output+0xa4>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d111      	bne.n	80128b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <tcp_output+0xb0>
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	3304      	adds	r3, #4
 8012896:	e000      	b.n	801289a <tcp_output+0xb2>
 8012898:	2300      	movs	r3, #0
 801289a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d102      	bne.n	80128a8 <tcp_output+0xc0>
      return ERR_RTE;
 80128a2:	f06f 0303 	mvn.w	r3, #3
 80128a6:	e18e      	b.n	8012bc6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80128b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7f9 f807 	bl	800b8ca <lwip_htonl>
 80128bc:	4602      	mov	r2, r0
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c2:	1ad3      	subs	r3, r2, r3
 80128c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128c6:	8912      	ldrh	r2, [r2, #8]
 80128c8:	4413      	add	r3, r2
 80128ca:	69ba      	ldr	r2, [r7, #24]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d227      	bcs.n	8012920 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128d6:	461a      	mov	r2, r3
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	4293      	cmp	r3, r2
 80128dc:	d114      	bne.n	8012908 <tcp_output+0x120>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d110      	bne.n	8012908 <tcp_output+0x120>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10b      	bne.n	8012908 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2201      	movs	r2, #1
 80128fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2200      	movs	r2, #0
 8012904:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	8b5b      	ldrh	r3, [r3, #26]
 801290c:	f003 0302 	and.w	r3, r3, #2
 8012910:	2b00      	cmp	r3, #0
 8012912:	f000 814d 	beq.w	8012bb0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 fd6c 	bl	80133f4 <tcp_send_empty_ack>
 801291c:	4603      	mov	r3, r0
 801291e:	e152      	b.n	8012bc6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801292c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801292e:	6a3b      	ldr	r3, [r7, #32]
 8012930:	2b00      	cmp	r3, #0
 8012932:	f000 811c 	beq.w	8012b6e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012936:	e002      	b.n	801293e <tcp_output+0x156>
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	623b      	str	r3, [r7, #32]
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d1f8      	bne.n	8012938 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012946:	e112      	b.n	8012b6e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	899b      	ldrh	r3, [r3, #12]
 801294e:	b29b      	uxth	r3, r3
 8012950:	4618      	mov	r0, r3
 8012952:	f7f8 ffa5 	bl	800b8a0 <lwip_htons>
 8012956:	4603      	mov	r3, r0
 8012958:	b2db      	uxtb	r3, r3
 801295a:	f003 0304 	and.w	r3, r3, #4
 801295e:	2b00      	cmp	r3, #0
 8012960:	d006      	beq.n	8012970 <tcp_output+0x188>
 8012962:	4b43      	ldr	r3, [pc, #268]	; (8012a70 <tcp_output+0x288>)
 8012964:	f240 5236 	movw	r2, #1334	; 0x536
 8012968:	4946      	ldr	r1, [pc, #280]	; (8012a84 <tcp_output+0x29c>)
 801296a:	4843      	ldr	r0, [pc, #268]	; (8012a78 <tcp_output+0x290>)
 801296c:	f004 fb48 	bl	8017000 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012974:	2b00      	cmp	r3, #0
 8012976:	d01f      	beq.n	80129b8 <tcp_output+0x1d0>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	8b5b      	ldrh	r3, [r3, #26]
 801297c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012980:	2b00      	cmp	r3, #0
 8012982:	d119      	bne.n	80129b8 <tcp_output+0x1d0>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00b      	beq.n	80129a4 <tcp_output+0x1bc>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d110      	bne.n	80129b8 <tcp_output+0x1d0>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299a:	891a      	ldrh	r2, [r3, #8]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d209      	bcs.n	80129b8 <tcp_output+0x1d0>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d004      	beq.n	80129b8 <tcp_output+0x1d0>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129b4:	2b63      	cmp	r3, #99	; 0x63
 80129b6:	d901      	bls.n	80129bc <tcp_output+0x1d4>
 80129b8:	2301      	movs	r3, #1
 80129ba:	e000      	b.n	80129be <tcp_output+0x1d6>
 80129bc:	2300      	movs	r3, #0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d106      	bne.n	80129d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	8b5b      	ldrh	r3, [r3, #26]
 80129c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	f000 80e4 	beq.w	8012b98 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7d1b      	ldrb	r3, [r3, #20]
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	d00d      	beq.n	80129f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	899b      	ldrh	r3, [r3, #12]
 80129de:	b29c      	uxth	r4, r3
 80129e0:	2010      	movs	r0, #16
 80129e2:	f7f8 ff5d 	bl	800b8a0 <lwip_htons>
 80129e6:	4603      	mov	r3, r0
 80129e8:	461a      	mov	r2, r3
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	4322      	orrs	r2, r4
 80129f0:	b292      	uxth	r2, r2
 80129f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80129f4:	697a      	ldr	r2, [r7, #20]
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129fa:	f000 f909 	bl	8012c10 <tcp_output_segment>
 80129fe:	4603      	mov	r3, r0
 8012a00:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d009      	beq.n	8012a1e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	8b5b      	ldrh	r3, [r3, #26]
 8012a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	835a      	strh	r2, [r3, #26]
      return err;
 8012a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a1c:	e0d3      	b.n	8012bc6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	7d1b      	ldrb	r3, [r3, #20]
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d006      	beq.n	8012a3c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	8b5b      	ldrh	r3, [r3, #26]
 8012a32:	f023 0303 	bic.w	r3, r3, #3
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f8 ff41 	bl	800b8ca <lwip_htonl>
 8012a48:	4604      	mov	r4, r0
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4c:	891b      	ldrh	r3, [r3, #8]
 8012a4e:	461d      	mov	r5, r3
 8012a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	899b      	ldrh	r3, [r3, #12]
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f8 ff21 	bl	800b8a0 <lwip_htons>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	f003 0303 	and.w	r3, r3, #3
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d00e      	beq.n	8012a88 <tcp_output+0x2a0>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e00d      	b.n	8012a8a <tcp_output+0x2a2>
 8012a6e:	bf00      	nop
 8012a70:	0801a3c0 	.word	0x0801a3c0
 8012a74:	0801a904 	.word	0x0801a904
 8012a78:	0801a414 	.word	0x0801a414
 8012a7c:	0801a91c 	.word	0x0801a91c
 8012a80:	20025854 	.word	0x20025854
 8012a84:	0801a944 	.word	0x0801a944
 8012a88:	2300      	movs	r3, #0
 8012a8a:	442b      	add	r3, r5
 8012a8c:	4423      	add	r3, r4
 8012a8e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	1ad3      	subs	r3, r2, r3
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	da02      	bge.n	8012aa2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68ba      	ldr	r2, [r7, #8]
 8012aa0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	891b      	ldrh	r3, [r3, #8]
 8012aa6:	461c      	mov	r4, r3
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	899b      	ldrh	r3, [r3, #12]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f8 fef5 	bl	800b8a0 <lwip_htons>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	f003 0303 	and.w	r3, r3, #3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d001      	beq.n	8012ac6 <tcp_output+0x2de>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e000      	b.n	8012ac8 <tcp_output+0x2e0>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	4423      	add	r3, r4
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d049      	beq.n	8012b62 <tcp_output+0x37a>
      seg->next = NULL;
 8012ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d105      	bne.n	8012ae8 <tcp_output+0x300>
        pcb->unacked = seg;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ae0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae4:	623b      	str	r3, [r7, #32]
 8012ae6:	e03f      	b.n	8012b68 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f8 feeb 	bl	800b8ca <lwip_htonl>
 8012af4:	4604      	mov	r4, r0
 8012af6:	6a3b      	ldr	r3, [r7, #32]
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7f8 fee4 	bl	800b8ca <lwip_htonl>
 8012b02:	4603      	mov	r3, r0
 8012b04:	1ae3      	subs	r3, r4, r3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	da24      	bge.n	8012b54 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	3370      	adds	r3, #112	; 0x70
 8012b0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b10:	e002      	b.n	8012b18 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d011      	beq.n	8012b44 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f8 fece 	bl	800b8ca <lwip_htonl>
 8012b2e:	4604      	mov	r4, r0
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7f8 fec7 	bl	800b8ca <lwip_htonl>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	dbe6      	blt.n	8012b12 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	e009      	b.n	8012b68 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012b54:	6a3b      	ldr	r3, [r7, #32]
 8012b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b58:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	623b      	str	r3, [r7, #32]
 8012b60:	e002      	b.n	8012b68 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b64:	f7fb ff1d 	bl	800e9a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d012      	beq.n	8012b9a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f8 fea5 	bl	800b8ca <lwip_htonl>
 8012b80:	4602      	mov	r2, r0
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b8a:	8912      	ldrh	r2, [r2, #8]
 8012b8c:	4413      	add	r3, r2
  while (seg != NULL &&
 8012b8e:	69ba      	ldr	r2, [r7, #24]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	f4bf aed9 	bcs.w	8012948 <tcp_output+0x160>
 8012b96:	e000      	b.n	8012b9a <tcp_output+0x3b2>
      break;
 8012b98:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d108      	bne.n	8012bb4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012baa:	e004      	b.n	8012bb6 <tcp_output+0x3ce>
    goto output_done;
 8012bac:	bf00      	nop
 8012bae:	e002      	b.n	8012bb6 <tcp_output+0x3ce>
    goto output_done;
 8012bb0:	bf00      	nop
 8012bb2:	e000      	b.n	8012bb6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012bb4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	8b5b      	ldrh	r3, [r3, #26]
 8012bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3728      	adds	r7, #40	; 0x28
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8012bce:	bf00      	nop

08012bd0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d106      	bne.n	8012bec <tcp_output_segment_busy+0x1c>
 8012bde:	4b09      	ldr	r3, [pc, #36]	; (8012c04 <tcp_output_segment_busy+0x34>)
 8012be0:	f240 529a 	movw	r2, #1434	; 0x59a
 8012be4:	4908      	ldr	r1, [pc, #32]	; (8012c08 <tcp_output_segment_busy+0x38>)
 8012be6:	4809      	ldr	r0, [pc, #36]	; (8012c0c <tcp_output_segment_busy+0x3c>)
 8012be8:	f004 fa0a 	bl	8017000 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	7b9b      	ldrb	r3, [r3, #14]
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d001      	beq.n	8012bfa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e000      	b.n	8012bfc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	0801a3c0 	.word	0x0801a3c0
 8012c08:	0801a95c 	.word	0x0801a95c
 8012c0c:	0801a414 	.word	0x0801a414

08012c10 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012c10:	b5b0      	push	{r4, r5, r7, lr}
 8012c12:	b08c      	sub	sp, #48	; 0x30
 8012c14:	af04      	add	r7, sp, #16
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d106      	bne.n	8012c30 <tcp_output_segment+0x20>
 8012c22:	4b63      	ldr	r3, [pc, #396]	; (8012db0 <tcp_output_segment+0x1a0>)
 8012c24:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012c28:	4962      	ldr	r1, [pc, #392]	; (8012db4 <tcp_output_segment+0x1a4>)
 8012c2a:	4863      	ldr	r0, [pc, #396]	; (8012db8 <tcp_output_segment+0x1a8>)
 8012c2c:	f004 f9e8 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d106      	bne.n	8012c44 <tcp_output_segment+0x34>
 8012c36:	4b5e      	ldr	r3, [pc, #376]	; (8012db0 <tcp_output_segment+0x1a0>)
 8012c38:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012c3c:	495f      	ldr	r1, [pc, #380]	; (8012dbc <tcp_output_segment+0x1ac>)
 8012c3e:	485e      	ldr	r0, [pc, #376]	; (8012db8 <tcp_output_segment+0x1a8>)
 8012c40:	f004 f9de 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <tcp_output_segment+0x48>
 8012c4a:	4b59      	ldr	r3, [pc, #356]	; (8012db0 <tcp_output_segment+0x1a0>)
 8012c4c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012c50:	495b      	ldr	r1, [pc, #364]	; (8012dc0 <tcp_output_segment+0x1b0>)
 8012c52:	4859      	ldr	r0, [pc, #356]	; (8012db8 <tcp_output_segment+0x1a8>)
 8012c54:	f004 f9d4 	bl	8017000 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f7ff ffb9 	bl	8012bd0 <tcp_output_segment_busy>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d001      	beq.n	8012c68 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012c64:	2300      	movs	r3, #0
 8012c66:	e09f      	b.n	8012da8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	68dc      	ldr	r4, [r3, #12]
 8012c70:	4610      	mov	r0, r2
 8012c72:	f7f8 fe2a 	bl	800b8ca <lwip_htonl>
 8012c76:	4603      	mov	r3, r0
 8012c78:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	68dc      	ldr	r4, [r3, #12]
 8012c82:	4610      	mov	r0, r2
 8012c84:	f7f8 fe0c 	bl	800b8a0 <lwip_htons>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c90:	68ba      	ldr	r2, [r7, #8]
 8012c92:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012c94:	441a      	add	r2, r3
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	3314      	adds	r3, #20
 8012ca0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	7a9b      	ldrb	r3, [r3, #10]
 8012ca6:	f003 0301 	and.w	r3, r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d015      	beq.n	8012cda <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	3304      	adds	r3, #4
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6879      	ldr	r1, [r7, #4]
 8012cb6:	f240 4001 	movw	r0, #1025	; 0x401
 8012cba:	f7fc fa37 	bl	800f12c <tcp_eff_send_mss_netif>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012cc2:	8b7b      	ldrh	r3, [r7, #26]
 8012cc4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7f8 fdfe 	bl	800b8ca <lwip_htonl>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	da02      	bge.n	8012cea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d10c      	bne.n	8012d0c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012cf2:	4b34      	ldr	r3, [pc, #208]	; (8012dc4 <tcp_output_segment+0x1b4>)
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f8 fde2 	bl	800b8ca <lwip_htonl>
 8012d06:	4602      	mov	r2, r0
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	68da      	ldr	r2, [r3, #12]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	8959      	ldrh	r1, [r3, #10]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	8b3a      	ldrh	r2, [r7, #24]
 8012d26:	1a8a      	subs	r2, r1, r2
 8012d28:	b292      	uxth	r2, r2
 8012d2a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	8919      	ldrh	r1, [r3, #8]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	8b3a      	ldrh	r2, [r7, #24]
 8012d38:	1a8a      	subs	r2, r1, r2
 8012d3a:	b292      	uxth	r2, r2
 8012d3c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	68d2      	ldr	r2, [r2, #12]
 8012d46:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	741a      	strb	r2, [r3, #16]
 8012d50:	2200      	movs	r2, #0
 8012d52:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	f103 0214 	add.w	r2, r3, #20
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	7a9b      	ldrb	r3, [r3, #10]
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	f003 0304 	and.w	r3, r3, #4
 8012d66:	4413      	add	r3, r2
 8012d68:	69fa      	ldr	r2, [r7, #28]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d006      	beq.n	8012d7c <tcp_output_segment+0x16c>
 8012d6e:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <tcp_output_segment+0x1a0>)
 8012d70:	f240 621c 	movw	r2, #1564	; 0x61c
 8012d74:	4914      	ldr	r1, [pc, #80]	; (8012dc8 <tcp_output_segment+0x1b8>)
 8012d76:	4810      	ldr	r0, [pc, #64]	; (8012db8 <tcp_output_segment+0x1a8>)
 8012d78:	f004 f942 	bl	8017000 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6858      	ldr	r0, [r3, #4]
 8012d80:	68b9      	ldr	r1, [r7, #8]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	1d1c      	adds	r4, r3, #4
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	7add      	ldrb	r5, [r3, #11]
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	7a9b      	ldrb	r3, [r3, #10]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	9202      	str	r2, [sp, #8]
 8012d92:	2206      	movs	r2, #6
 8012d94:	9201      	str	r2, [sp, #4]
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	462b      	mov	r3, r5
 8012d9a:	4622      	mov	r2, r4
 8012d9c:	f002 fc1a 	bl	80155d4 <ip4_output_if>
 8012da0:	4603      	mov	r3, r0
 8012da2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3720      	adds	r7, #32
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bdb0      	pop	{r4, r5, r7, pc}
 8012db0:	0801a3c0 	.word	0x0801a3c0
 8012db4:	0801a984 	.word	0x0801a984
 8012db8:	0801a414 	.word	0x0801a414
 8012dbc:	0801a9a4 	.word	0x0801a9a4
 8012dc0:	0801a9c4 	.word	0x0801a9c4
 8012dc4:	20025844 	.word	0x20025844
 8012dc8:	0801a9e8 	.word	0x0801a9e8

08012dcc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012dcc:	b5b0      	push	{r4, r5, r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <tcp_rexmit_rto_prepare+0x1c>
 8012dda:	4b31      	ldr	r3, [pc, #196]	; (8012ea0 <tcp_rexmit_rto_prepare+0xd4>)
 8012ddc:	f240 6263 	movw	r2, #1635	; 0x663
 8012de0:	4930      	ldr	r1, [pc, #192]	; (8012ea4 <tcp_rexmit_rto_prepare+0xd8>)
 8012de2:	4831      	ldr	r0, [pc, #196]	; (8012ea8 <tcp_rexmit_rto_prepare+0xdc>)
 8012de4:	f004 f90c 	bl	8017000 <iprintf>

  if (pcb->unacked == NULL) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d102      	bne.n	8012df6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012df0:	f06f 0305 	mvn.w	r3, #5
 8012df4:	e050      	b.n	8012e98 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dfa:	60fb      	str	r3, [r7, #12]
 8012dfc:	e00b      	b.n	8012e16 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f7ff fee6 	bl	8012bd0 <tcp_output_segment_busy>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d002      	beq.n	8012e10 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012e0a:	f06f 0305 	mvn.w	r3, #5
 8012e0e:	e043      	b.n	8012e98 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	60fb      	str	r3, [r7, #12]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d1ef      	bne.n	8012dfe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f7ff fed6 	bl	8012bd0 <tcp_output_segment_busy>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d002      	beq.n	8012e30 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012e2a:	f06f 0305 	mvn.w	r3, #5
 8012e2e:	e033      	b.n	8012e98 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	8b5b      	ldrh	r3, [r3, #26]
 8012e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7f8 fd35 	bl	800b8ca <lwip_htonl>
 8012e60:	4604      	mov	r4, r0
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	891b      	ldrh	r3, [r3, #8]
 8012e66:	461d      	mov	r5, r3
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	899b      	ldrh	r3, [r3, #12]
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7f8 fd15 	bl	800b8a0 <lwip_htons>
 8012e76:	4603      	mov	r3, r0
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	f003 0303 	and.w	r3, r3, #3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <tcp_rexmit_rto_prepare+0xba>
 8012e82:	2301      	movs	r3, #1
 8012e84:	e000      	b.n	8012e88 <tcp_rexmit_rto_prepare+0xbc>
 8012e86:	2300      	movs	r3, #0
 8012e88:	442b      	add	r3, r5
 8012e8a:	18e2      	adds	r2, r4, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3710      	adds	r7, #16
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea0:	0801a3c0 	.word	0x0801a3c0
 8012ea4:	0801a9fc 	.word	0x0801a9fc
 8012ea8:	0801a414 	.word	0x0801a414

08012eac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d106      	bne.n	8012ec8 <tcp_rexmit_rto_commit+0x1c>
 8012eba:	4b0d      	ldr	r3, [pc, #52]	; (8012ef0 <tcp_rexmit_rto_commit+0x44>)
 8012ebc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ec0:	490c      	ldr	r1, [pc, #48]	; (8012ef4 <tcp_rexmit_rto_commit+0x48>)
 8012ec2:	480d      	ldr	r0, [pc, #52]	; (8012ef8 <tcp_rexmit_rto_commit+0x4c>)
 8012ec4:	f004 f89c 	bl	8017000 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ece:	2bff      	cmp	r3, #255	; 0xff
 8012ed0:	d007      	beq.n	8012ee2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ed8:	3301      	adds	r3, #1
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7ff fc80 	bl	80127e8 <tcp_output>
}
 8012ee8:	bf00      	nop
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	0801a3c0 	.word	0x0801a3c0
 8012ef4:	0801aa20 	.word	0x0801aa20
 8012ef8:	0801a414 	.word	0x0801a414

08012efc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d106      	bne.n	8012f18 <tcp_rexmit_rto+0x1c>
 8012f0a:	4b0a      	ldr	r3, [pc, #40]	; (8012f34 <tcp_rexmit_rto+0x38>)
 8012f0c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012f10:	4909      	ldr	r1, [pc, #36]	; (8012f38 <tcp_rexmit_rto+0x3c>)
 8012f12:	480a      	ldr	r0, [pc, #40]	; (8012f3c <tcp_rexmit_rto+0x40>)
 8012f14:	f004 f874 	bl	8017000 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ff57 	bl	8012dcc <tcp_rexmit_rto_prepare>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d102      	bne.n	8012f2a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f7ff ffc1 	bl	8012eac <tcp_rexmit_rto_commit>
  }
}
 8012f2a:	bf00      	nop
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	0801a3c0 	.word	0x0801a3c0
 8012f38:	0801aa44 	.word	0x0801aa44
 8012f3c:	0801a414 	.word	0x0801a414

08012f40 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012f40:	b590      	push	{r4, r7, lr}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_rexmit+0x1c>
 8012f4e:	4b2f      	ldr	r3, [pc, #188]	; (801300c <tcp_rexmit+0xcc>)
 8012f50:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012f54:	492e      	ldr	r1, [pc, #184]	; (8013010 <tcp_rexmit+0xd0>)
 8012f56:	482f      	ldr	r0, [pc, #188]	; (8013014 <tcp_rexmit+0xd4>)
 8012f58:	f004 f852 	bl	8017000 <iprintf>

  if (pcb->unacked == NULL) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d102      	bne.n	8012f6a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012f64:	f06f 0305 	mvn.w	r3, #5
 8012f68:	e04c      	b.n	8013004 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012f70:	68b8      	ldr	r0, [r7, #8]
 8012f72:	f7ff fe2d 	bl	8012bd0 <tcp_output_segment_busy>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012f7c:	f06f 0305 	mvn.w	r3, #5
 8012f80:	e040      	b.n	8013004 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	336c      	adds	r3, #108	; 0x6c
 8012f8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f90:	e002      	b.n	8012f98 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d011      	beq.n	8012fc4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7f8 fc8e 	bl	800b8ca <lwip_htonl>
 8012fae:	4604      	mov	r4, r0
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7f8 fc87 	bl	800b8ca <lwip_htonl>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	dbe6      	blt.n	8012f92 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d103      	bne.n	8012fe2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fe8:	2bff      	cmp	r3, #255	; 0xff
 8012fea:	d007      	beq.n	8012ffc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	b2da      	uxtb	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	3714      	adds	r7, #20
 8013008:	46bd      	mov	sp, r7
 801300a:	bd90      	pop	{r4, r7, pc}
 801300c:	0801a3c0 	.word	0x0801a3c0
 8013010:	0801aa60 	.word	0x0801aa60
 8013014:	0801a414 	.word	0x0801a414

08013018 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d106      	bne.n	8013034 <tcp_rexmit_fast+0x1c>
 8013026:	4b2a      	ldr	r3, [pc, #168]	; (80130d0 <tcp_rexmit_fast+0xb8>)
 8013028:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801302c:	4929      	ldr	r1, [pc, #164]	; (80130d4 <tcp_rexmit_fast+0xbc>)
 801302e:	482a      	ldr	r0, [pc, #168]	; (80130d8 <tcp_rexmit_fast+0xc0>)
 8013030:	f003 ffe6 	bl	8017000 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013038:	2b00      	cmp	r3, #0
 801303a:	d044      	beq.n	80130c6 <tcp_rexmit_fast+0xae>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8b5b      	ldrh	r3, [r3, #26]
 8013040:	f003 0304 	and.w	r3, r3, #4
 8013044:	2b00      	cmp	r3, #0
 8013046:	d13e      	bne.n	80130c6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7ff ff79 	bl	8012f40 <tcp_rexmit>
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	d138      	bne.n	80130c6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013060:	4293      	cmp	r3, r2
 8013062:	bf28      	it	cs
 8013064:	4613      	movcs	r3, r2
 8013066:	b29b      	uxth	r3, r3
 8013068:	0fda      	lsrs	r2, r3, #31
 801306a:	4413      	add	r3, r2
 801306c:	105b      	asrs	r3, r3, #1
 801306e:	b29a      	uxth	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801307c:	461a      	mov	r2, r3
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	429a      	cmp	r2, r3
 8013086:	d206      	bcs.n	8013096 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801308c:	005b      	lsls	r3, r3, #1
 801308e:	b29a      	uxth	r2, r3
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130a0:	4619      	mov	r1, r3
 80130a2:	0049      	lsls	r1, r1, #1
 80130a4:	440b      	add	r3, r1
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	4413      	add	r3, r2
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	8b5b      	ldrh	r3, [r3, #26]
 80130b6:	f043 0304 	orr.w	r3, r3, #4
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	0801a3c0 	.word	0x0801a3c0
 80130d4:	0801aa78 	.word	0x0801aa78
 80130d8:	0801a414 	.word	0x0801a414

080130dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b086      	sub	sp, #24
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	607b      	str	r3, [r7, #4]
 80130e6:	460b      	mov	r3, r1
 80130e8:	817b      	strh	r3, [r7, #10]
 80130ea:	4613      	mov	r3, r2
 80130ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80130ee:	897a      	ldrh	r2, [r7, #10]
 80130f0:	893b      	ldrh	r3, [r7, #8]
 80130f2:	4413      	add	r3, r2
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	3314      	adds	r3, #20
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130fe:	4619      	mov	r1, r3
 8013100:	2022      	movs	r0, #34	; 0x22
 8013102:	f7f9 fc95 	bl	800ca30 <pbuf_alloc>
 8013106:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d04d      	beq.n	80131aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801310e:	897b      	ldrh	r3, [r7, #10]
 8013110:	3313      	adds	r3, #19
 8013112:	697a      	ldr	r2, [r7, #20]
 8013114:	8952      	ldrh	r2, [r2, #10]
 8013116:	4293      	cmp	r3, r2
 8013118:	db06      	blt.n	8013128 <tcp_output_alloc_header_common+0x4c>
 801311a:	4b26      	ldr	r3, [pc, #152]	; (80131b4 <tcp_output_alloc_header_common+0xd8>)
 801311c:	f240 7223 	movw	r2, #1827	; 0x723
 8013120:	4925      	ldr	r1, [pc, #148]	; (80131b8 <tcp_output_alloc_header_common+0xdc>)
 8013122:	4826      	ldr	r0, [pc, #152]	; (80131bc <tcp_output_alloc_header_common+0xe0>)
 8013124:	f003 ff6c 	bl	8017000 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801312e:	8c3b      	ldrh	r3, [r7, #32]
 8013130:	4618      	mov	r0, r3
 8013132:	f7f8 fbb5 	bl	800b8a0 <lwip_htons>
 8013136:	4603      	mov	r3, r0
 8013138:	461a      	mov	r2, r3
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801313e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013140:	4618      	mov	r0, r3
 8013142:	f7f8 fbad 	bl	800b8a0 <lwip_htons>
 8013146:	4603      	mov	r3, r0
 8013148:	461a      	mov	r2, r3
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7f8 fbb8 	bl	800b8ca <lwip_htonl>
 801315a:	4602      	mov	r2, r0
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013160:	897b      	ldrh	r3, [r7, #10]
 8013162:	089b      	lsrs	r3, r3, #2
 8013164:	b29b      	uxth	r3, r3
 8013166:	3305      	adds	r3, #5
 8013168:	b29b      	uxth	r3, r3
 801316a:	031b      	lsls	r3, r3, #12
 801316c:	b29a      	uxth	r2, r3
 801316e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013172:	b29b      	uxth	r3, r3
 8013174:	4313      	orrs	r3, r2
 8013176:	b29b      	uxth	r3, r3
 8013178:	4618      	mov	r0, r3
 801317a:	f7f8 fb91 	bl	800b8a0 <lwip_htons>
 801317e:	4603      	mov	r3, r0
 8013180:	461a      	mov	r2, r3
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013186:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013188:	4618      	mov	r0, r3
 801318a:	f7f8 fb89 	bl	800b8a0 <lwip_htons>
 801318e:	4603      	mov	r3, r0
 8013190:	461a      	mov	r2, r3
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	2200      	movs	r2, #0
 801319a:	741a      	strb	r2, [r3, #16]
 801319c:	2200      	movs	r2, #0
 801319e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	2200      	movs	r2, #0
 80131a4:	749a      	strb	r2, [r3, #18]
 80131a6:	2200      	movs	r2, #0
 80131a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80131aa:	697b      	ldr	r3, [r7, #20]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3718      	adds	r7, #24
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	0801a3c0 	.word	0x0801a3c0
 80131b8:	0801aa98 	.word	0x0801aa98
 80131bc:	0801a414 	.word	0x0801a414

080131c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80131c0:	b5b0      	push	{r4, r5, r7, lr}
 80131c2:	b08a      	sub	sp, #40	; 0x28
 80131c4:	af04      	add	r7, sp, #16
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	607b      	str	r3, [r7, #4]
 80131ca:	460b      	mov	r3, r1
 80131cc:	817b      	strh	r3, [r7, #10]
 80131ce:	4613      	mov	r3, r2
 80131d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d106      	bne.n	80131e6 <tcp_output_alloc_header+0x26>
 80131d8:	4b15      	ldr	r3, [pc, #84]	; (8013230 <tcp_output_alloc_header+0x70>)
 80131da:	f240 7242 	movw	r2, #1858	; 0x742
 80131de:	4915      	ldr	r1, [pc, #84]	; (8013234 <tcp_output_alloc_header+0x74>)
 80131e0:	4815      	ldr	r0, [pc, #84]	; (8013238 <tcp_output_alloc_header+0x78>)
 80131e2:	f003 ff0d 	bl	8017000 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	8adb      	ldrh	r3, [r3, #22]
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	8b12      	ldrh	r2, [r2, #24]
 80131f2:	68f9      	ldr	r1, [r7, #12]
 80131f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80131f6:	893d      	ldrh	r5, [r7, #8]
 80131f8:	897c      	ldrh	r4, [r7, #10]
 80131fa:	9103      	str	r1, [sp, #12]
 80131fc:	2110      	movs	r1, #16
 80131fe:	9102      	str	r1, [sp, #8]
 8013200:	9201      	str	r2, [sp, #4]
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	462a      	mov	r2, r5
 8013208:	4621      	mov	r1, r4
 801320a:	f7ff ff67 	bl	80130dc <tcp_output_alloc_header_common>
 801320e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d006      	beq.n	8013224 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801321e:	441a      	add	r2, r3
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013224:	697b      	ldr	r3, [r7, #20]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3718      	adds	r7, #24
 801322a:	46bd      	mov	sp, r7
 801322c:	bdb0      	pop	{r4, r5, r7, pc}
 801322e:	bf00      	nop
 8013230:	0801a3c0 	.word	0x0801a3c0
 8013234:	0801aac8 	.word	0x0801aac8
 8013238:	0801a414 	.word	0x0801a414

0801323c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b088      	sub	sp, #32
 8013240:	af00      	add	r7, sp, #0
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	60b9      	str	r1, [r7, #8]
 8013246:	4611      	mov	r1, r2
 8013248:	461a      	mov	r2, r3
 801324a:	460b      	mov	r3, r1
 801324c:	71fb      	strb	r3, [r7, #7]
 801324e:	4613      	mov	r3, r2
 8013250:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013252:	2300      	movs	r3, #0
 8013254:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d106      	bne.n	801326a <tcp_output_fill_options+0x2e>
 801325c:	4b13      	ldr	r3, [pc, #76]	; (80132ac <tcp_output_fill_options+0x70>)
 801325e:	f240 7256 	movw	r2, #1878	; 0x756
 8013262:	4913      	ldr	r1, [pc, #76]	; (80132b0 <tcp_output_fill_options+0x74>)
 8013264:	4813      	ldr	r0, [pc, #76]	; (80132b4 <tcp_output_fill_options+0x78>)
 8013266:	f003 fecb 	bl	8017000 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	3314      	adds	r3, #20
 8013274:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	f103 0214 	add.w	r2, r3, #20
 801327c:	8bfb      	ldrh	r3, [r7, #30]
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	4619      	mov	r1, r3
 8013282:	79fb      	ldrb	r3, [r7, #7]
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	f003 0304 	and.w	r3, r3, #4
 801328a:	440b      	add	r3, r1
 801328c:	4413      	add	r3, r2
 801328e:	697a      	ldr	r2, [r7, #20]
 8013290:	429a      	cmp	r2, r3
 8013292:	d006      	beq.n	80132a2 <tcp_output_fill_options+0x66>
 8013294:	4b05      	ldr	r3, [pc, #20]	; (80132ac <tcp_output_fill_options+0x70>)
 8013296:	f240 7275 	movw	r2, #1909	; 0x775
 801329a:	4907      	ldr	r1, [pc, #28]	; (80132b8 <tcp_output_fill_options+0x7c>)
 801329c:	4805      	ldr	r0, [pc, #20]	; (80132b4 <tcp_output_fill_options+0x78>)
 801329e:	f003 feaf 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80132a2:	bf00      	nop
 80132a4:	3720      	adds	r7, #32
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	0801a3c0 	.word	0x0801a3c0
 80132b0:	0801aaf0 	.word	0x0801aaf0
 80132b4:	0801a414 	.word	0x0801a414
 80132b8:	0801a9e8 	.word	0x0801a9e8

080132bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08a      	sub	sp, #40	; 0x28
 80132c0:	af04      	add	r7, sp, #16
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d106      	bne.n	80132de <tcp_output_control_segment+0x22>
 80132d0:	4b1c      	ldr	r3, [pc, #112]	; (8013344 <tcp_output_control_segment+0x88>)
 80132d2:	f240 7287 	movw	r2, #1927	; 0x787
 80132d6:	491c      	ldr	r1, [pc, #112]	; (8013348 <tcp_output_control_segment+0x8c>)
 80132d8:	481c      	ldr	r0, [pc, #112]	; (801334c <tcp_output_control_segment+0x90>)
 80132da:	f003 fe91 	bl	8017000 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80132de:	683a      	ldr	r2, [r7, #0]
 80132e0:	6879      	ldr	r1, [r7, #4]
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	f7fe fae8 	bl	80118b8 <tcp_route>
 80132e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d102      	bne.n	80132f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80132f0:	23fc      	movs	r3, #252	; 0xfc
 80132f2:	75fb      	strb	r3, [r7, #23]
 80132f4:	e01c      	b.n	8013330 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d006      	beq.n	801330a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	7adb      	ldrb	r3, [r3, #11]
 8013300:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	7a9b      	ldrb	r3, [r3, #10]
 8013306:	757b      	strb	r3, [r7, #21]
 8013308:	e003      	b.n	8013312 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801330a:	23ff      	movs	r3, #255	; 0xff
 801330c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013312:	7dba      	ldrb	r2, [r7, #22]
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	9302      	str	r3, [sp, #8]
 8013318:	2306      	movs	r3, #6
 801331a:	9301      	str	r3, [sp, #4]
 801331c:	7d7b      	ldrb	r3, [r7, #21]
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	4613      	mov	r3, r2
 8013322:	683a      	ldr	r2, [r7, #0]
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	68b8      	ldr	r0, [r7, #8]
 8013328:	f002 f954 	bl	80155d4 <ip4_output_if>
 801332c:	4603      	mov	r3, r0
 801332e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013330:	68b8      	ldr	r0, [r7, #8]
 8013332:	f7f9 fe65 	bl	800d000 <pbuf_free>
  return err;
 8013336:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3718      	adds	r7, #24
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	0801a3c0 	.word	0x0801a3c0
 8013348:	0801ab18 	.word	0x0801ab18
 801334c:	0801a414 	.word	0x0801a414

08013350 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013350:	b590      	push	{r4, r7, lr}
 8013352:	b08b      	sub	sp, #44	; 0x2c
 8013354:	af04      	add	r7, sp, #16
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
 801335c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d106      	bne.n	8013372 <tcp_rst+0x22>
 8013364:	4b1f      	ldr	r3, [pc, #124]	; (80133e4 <tcp_rst+0x94>)
 8013366:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801336a:	491f      	ldr	r1, [pc, #124]	; (80133e8 <tcp_rst+0x98>)
 801336c:	481f      	ldr	r0, [pc, #124]	; (80133ec <tcp_rst+0x9c>)
 801336e:	f003 fe47 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013374:	2b00      	cmp	r3, #0
 8013376:	d106      	bne.n	8013386 <tcp_rst+0x36>
 8013378:	4b1a      	ldr	r3, [pc, #104]	; (80133e4 <tcp_rst+0x94>)
 801337a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801337e:	491c      	ldr	r1, [pc, #112]	; (80133f0 <tcp_rst+0xa0>)
 8013380:	481a      	ldr	r0, [pc, #104]	; (80133ec <tcp_rst+0x9c>)
 8013382:	f003 fe3d 	bl	8017000 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013386:	2300      	movs	r3, #0
 8013388:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801338a:	f246 0308 	movw	r3, #24584	; 0x6008
 801338e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	b29c      	uxth	r4, r3
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f7f8 fa98 	bl	800b8ca <lwip_htonl>
 801339a:	4602      	mov	r2, r0
 801339c:	8abb      	ldrh	r3, [r7, #20]
 801339e:	9303      	str	r3, [sp, #12]
 80133a0:	2314      	movs	r3, #20
 80133a2:	9302      	str	r3, [sp, #8]
 80133a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80133a6:	9301      	str	r3, [sp, #4]
 80133a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	4613      	mov	r3, r2
 80133ae:	2200      	movs	r2, #0
 80133b0:	4621      	mov	r1, r4
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7ff fe92 	bl	80130dc <tcp_output_alloc_header_common>
 80133b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00c      	beq.n	80133da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133c0:	7dfb      	ldrb	r3, [r7, #23]
 80133c2:	2200      	movs	r2, #0
 80133c4:	6939      	ldr	r1, [r7, #16]
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f7ff ff38 	bl	801323c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80133cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ce:	683a      	ldr	r2, [r7, #0]
 80133d0:	6939      	ldr	r1, [r7, #16]
 80133d2:	68f8      	ldr	r0, [r7, #12]
 80133d4:	f7ff ff72 	bl	80132bc <tcp_output_control_segment>
 80133d8:	e000      	b.n	80133dc <tcp_rst+0x8c>
    return;
 80133da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80133dc:	371c      	adds	r7, #28
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd90      	pop	{r4, r7, pc}
 80133e2:	bf00      	nop
 80133e4:	0801a3c0 	.word	0x0801a3c0
 80133e8:	0801ab44 	.word	0x0801ab44
 80133ec:	0801a414 	.word	0x0801a414
 80133f0:	0801ab60 	.word	0x0801ab60

080133f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80133f4:	b590      	push	{r4, r7, lr}
 80133f6:	b087      	sub	sp, #28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80133fc:	2300      	movs	r3, #0
 80133fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013400:	2300      	movs	r3, #0
 8013402:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d106      	bne.n	8013418 <tcp_send_empty_ack+0x24>
 801340a:	4b28      	ldr	r3, [pc, #160]	; (80134ac <tcp_send_empty_ack+0xb8>)
 801340c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013410:	4927      	ldr	r1, [pc, #156]	; (80134b0 <tcp_send_empty_ack+0xbc>)
 8013412:	4828      	ldr	r0, [pc, #160]	; (80134b4 <tcp_send_empty_ack+0xc0>)
 8013414:	f003 fdf4 	bl	8017000 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013418:	7dfb      	ldrb	r3, [r7, #23]
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	b2db      	uxtb	r3, r3
 801341e:	f003 0304 	and.w	r3, r3, #4
 8013422:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013424:	7d7b      	ldrb	r3, [r7, #21]
 8013426:	b29c      	uxth	r4, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801342c:	4618      	mov	r0, r3
 801342e:	f7f8 fa4c 	bl	800b8ca <lwip_htonl>
 8013432:	4603      	mov	r3, r0
 8013434:	2200      	movs	r2, #0
 8013436:	4621      	mov	r1, r4
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7ff fec1 	bl	80131c0 <tcp_output_alloc_header>
 801343e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d109      	bne.n	801345a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	8b5b      	ldrh	r3, [r3, #26]
 801344a:	f043 0303 	orr.w	r3, r3, #3
 801344e:	b29a      	uxth	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013454:	f06f 0301 	mvn.w	r3, #1
 8013458:	e023      	b.n	80134a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801345a:	7dbb      	ldrb	r3, [r7, #22]
 801345c:	7dfa      	ldrb	r2, [r7, #23]
 801345e:	6939      	ldr	r1, [r7, #16]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff feeb 	bl	801323c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	3304      	adds	r3, #4
 801346c:	6939      	ldr	r1, [r7, #16]
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f7ff ff24 	bl	80132bc <tcp_output_control_segment>
 8013474:	4603      	mov	r3, r0
 8013476:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d007      	beq.n	8013490 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	8b5b      	ldrh	r3, [r3, #26]
 8013484:	f043 0303 	orr.w	r3, r3, #3
 8013488:	b29a      	uxth	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	835a      	strh	r2, [r3, #26]
 801348e:	e006      	b.n	801349e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	8b5b      	ldrh	r3, [r3, #26]
 8013494:	f023 0303 	bic.w	r3, r3, #3
 8013498:	b29a      	uxth	r2, r3
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	371c      	adds	r7, #28
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd90      	pop	{r4, r7, pc}
 80134aa:	bf00      	nop
 80134ac:	0801a3c0 	.word	0x0801a3c0
 80134b0:	0801ab7c 	.word	0x0801ab7c
 80134b4:	0801a414 	.word	0x0801a414

080134b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80134b8:	b590      	push	{r4, r7, lr}
 80134ba:	b087      	sub	sp, #28
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134c0:	2300      	movs	r3, #0
 80134c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d106      	bne.n	80134d8 <tcp_keepalive+0x20>
 80134ca:	4b18      	ldr	r3, [pc, #96]	; (801352c <tcp_keepalive+0x74>)
 80134cc:	f640 0224 	movw	r2, #2084	; 0x824
 80134d0:	4917      	ldr	r1, [pc, #92]	; (8013530 <tcp_keepalive+0x78>)
 80134d2:	4818      	ldr	r0, [pc, #96]	; (8013534 <tcp_keepalive+0x7c>)
 80134d4:	f003 fd94 	bl	8017000 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134d8:	7dfb      	ldrb	r3, [r7, #23]
 80134da:	b29c      	uxth	r4, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134e0:	3b01      	subs	r3, #1
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f8 f9f1 	bl	800b8ca <lwip_htonl>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2200      	movs	r2, #0
 80134ec:	4621      	mov	r1, r4
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7ff fe66 	bl	80131c0 <tcp_output_alloc_header>
 80134f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d102      	bne.n	8013502 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	e010      	b.n	8013524 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013502:	7dfb      	ldrb	r3, [r7, #23]
 8013504:	2200      	movs	r2, #0
 8013506:	6939      	ldr	r1, [r7, #16]
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f7ff fe97 	bl	801323c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	3304      	adds	r3, #4
 8013514:	6939      	ldr	r1, [r7, #16]
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7ff fed0 	bl	80132bc <tcp_output_control_segment>
 801351c:	4603      	mov	r3, r0
 801351e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013524:	4618      	mov	r0, r3
 8013526:	371c      	adds	r7, #28
 8013528:	46bd      	mov	sp, r7
 801352a:	bd90      	pop	{r4, r7, pc}
 801352c:	0801a3c0 	.word	0x0801a3c0
 8013530:	0801ab9c 	.word	0x0801ab9c
 8013534:	0801a414 	.word	0x0801a414

08013538 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013538:	b590      	push	{r4, r7, lr}
 801353a:	b08b      	sub	sp, #44	; 0x2c
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013540:	2300      	movs	r3, #0
 8013542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d106      	bne.n	801355a <tcp_zero_window_probe+0x22>
 801354c:	4b4c      	ldr	r3, [pc, #304]	; (8013680 <tcp_zero_window_probe+0x148>)
 801354e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013552:	494c      	ldr	r1, [pc, #304]	; (8013684 <tcp_zero_window_probe+0x14c>)
 8013554:	484c      	ldr	r0, [pc, #304]	; (8013688 <tcp_zero_window_probe+0x150>)
 8013556:	f003 fd53 	bl	8017000 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801355e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013566:	2300      	movs	r3, #0
 8013568:	e086      	b.n	8013678 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013570:	2bff      	cmp	r3, #255	; 0xff
 8013572:	d007      	beq.n	8013584 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801357a:	3301      	adds	r3, #1
 801357c:	b2da      	uxtb	r2, r3
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013584:	6a3b      	ldr	r3, [r7, #32]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	899b      	ldrh	r3, [r3, #12]
 801358a:	b29b      	uxth	r3, r3
 801358c:	4618      	mov	r0, r3
 801358e:	f7f8 f987 	bl	800b8a0 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	b2db      	uxtb	r3, r3
 8013596:	f003 0301 	and.w	r3, r3, #1
 801359a:	2b00      	cmp	r3, #0
 801359c:	d005      	beq.n	80135aa <tcp_zero_window_probe+0x72>
 801359e:	6a3b      	ldr	r3, [r7, #32]
 80135a0:	891b      	ldrh	r3, [r3, #8]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d101      	bne.n	80135aa <tcp_zero_window_probe+0x72>
 80135a6:	2301      	movs	r3, #1
 80135a8:	e000      	b.n	80135ac <tcp_zero_window_probe+0x74>
 80135aa:	2300      	movs	r3, #0
 80135ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80135ae:	7ffb      	ldrb	r3, [r7, #31]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	bf0c      	ite	eq
 80135b4:	2301      	moveq	r3, #1
 80135b6:	2300      	movne	r3, #0
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80135bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135c0:	b299      	uxth	r1, r3
 80135c2:	6a3b      	ldr	r3, [r7, #32]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	8bba      	ldrh	r2, [r7, #28]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f7ff fdf8 	bl	80131c0 <tcp_output_alloc_header>
 80135d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d102      	bne.n	80135de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135d8:	f04f 33ff 	mov.w	r3, #4294967295
 80135dc:	e04c      	b.n	8013678 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80135e4:	7ffb      	ldrb	r3, [r7, #31]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d011      	beq.n	801360e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	899b      	ldrh	r3, [r3, #12]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	b21b      	sxth	r3, r3
 80135f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80135f6:	b21c      	sxth	r4, r3
 80135f8:	2011      	movs	r0, #17
 80135fa:	f7f8 f951 	bl	800b8a0 <lwip_htons>
 80135fe:	4603      	mov	r3, r0
 8013600:	b21b      	sxth	r3, r3
 8013602:	4323      	orrs	r3, r4
 8013604:	b21b      	sxth	r3, r3
 8013606:	b29a      	uxth	r2, r3
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	819a      	strh	r2, [r3, #12]
 801360c:	e010      	b.n	8013630 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	3314      	adds	r3, #20
 8013614:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013616:	6a3b      	ldr	r3, [r7, #32]
 8013618:	6858      	ldr	r0, [r3, #4]
 801361a:	6a3b      	ldr	r3, [r7, #32]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	891a      	ldrh	r2, [r3, #8]
 8013620:	6a3b      	ldr	r3, [r7, #32]
 8013622:	891b      	ldrh	r3, [r3, #8]
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	b29b      	uxth	r3, r3
 8013628:	2201      	movs	r2, #1
 801362a:	6939      	ldr	r1, [r7, #16]
 801362c:	f7f9 fede 	bl	800d3ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013630:	6a3b      	ldr	r3, [r7, #32]
 8013632:	68db      	ldr	r3, [r3, #12]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	4618      	mov	r0, r3
 8013638:	f7f8 f947 	bl	800b8ca <lwip_htonl>
 801363c:	4603      	mov	r3, r0
 801363e:	3301      	adds	r3, #1
 8013640:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	2b00      	cmp	r3, #0
 801364c:	da02      	bge.n	8013654 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013658:	2200      	movs	r2, #0
 801365a:	69b9      	ldr	r1, [r7, #24]
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff fded 	bl	801323c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	3304      	adds	r3, #4
 8013668:	69b9      	ldr	r1, [r7, #24]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f7ff fe26 	bl	80132bc <tcp_output_control_segment>
 8013670:	4603      	mov	r3, r0
 8013672:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013674:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013678:	4618      	mov	r0, r3
 801367a:	372c      	adds	r7, #44	; 0x2c
 801367c:	46bd      	mov	sp, r7
 801367e:	bd90      	pop	{r4, r7, pc}
 8013680:	0801a3c0 	.word	0x0801a3c0
 8013684:	0801abb8 	.word	0x0801abb8
 8013688:	0801a414 	.word	0x0801a414

0801368c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013694:	f7f9 ff98 	bl	800d5c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013698:	4b0a      	ldr	r3, [pc, #40]	; (80136c4 <tcpip_tcp_timer+0x38>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <tcpip_tcp_timer+0x1c>
 80136a0:	4b09      	ldr	r3, [pc, #36]	; (80136c8 <tcpip_tcp_timer+0x3c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d005      	beq.n	80136b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136a8:	2200      	movs	r2, #0
 80136aa:	4908      	ldr	r1, [pc, #32]	; (80136cc <tcpip_tcp_timer+0x40>)
 80136ac:	20fa      	movs	r0, #250	; 0xfa
 80136ae:	f000 f8f3 	bl	8013898 <sys_timeout>
 80136b2:	e003      	b.n	80136bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80136b4:	4b06      	ldr	r3, [pc, #24]	; (80136d0 <tcpip_tcp_timer+0x44>)
 80136b6:	2200      	movs	r2, #0
 80136b8:	601a      	str	r2, [r3, #0]
  }
}
 80136ba:	bf00      	nop
 80136bc:	bf00      	nop
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	20025840 	.word	0x20025840
 80136c8:	20025850 	.word	0x20025850
 80136cc:	0801368d 	.word	0x0801368d
 80136d0:	20004b18 	.word	0x20004b18

080136d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136d8:	4b0a      	ldr	r3, [pc, #40]	; (8013704 <tcp_timer_needed+0x30>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d10f      	bne.n	8013700 <tcp_timer_needed+0x2c>
 80136e0:	4b09      	ldr	r3, [pc, #36]	; (8013708 <tcp_timer_needed+0x34>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d103      	bne.n	80136f0 <tcp_timer_needed+0x1c>
 80136e8:	4b08      	ldr	r3, [pc, #32]	; (801370c <tcp_timer_needed+0x38>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d007      	beq.n	8013700 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80136f0:	4b04      	ldr	r3, [pc, #16]	; (8013704 <tcp_timer_needed+0x30>)
 80136f2:	2201      	movs	r2, #1
 80136f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136f6:	2200      	movs	r2, #0
 80136f8:	4905      	ldr	r1, [pc, #20]	; (8013710 <tcp_timer_needed+0x3c>)
 80136fa:	20fa      	movs	r0, #250	; 0xfa
 80136fc:	f000 f8cc 	bl	8013898 <sys_timeout>
  }
}
 8013700:	bf00      	nop
 8013702:	bd80      	pop	{r7, pc}
 8013704:	20004b18 	.word	0x20004b18
 8013708:	20025840 	.word	0x20025840
 801370c:	20025850 	.word	0x20025850
 8013710:	0801368d 	.word	0x0801368d

08013714 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013720:	200a      	movs	r0, #10
 8013722:	f7f8 fd73 	bl	800c20c <memp_malloc>
 8013726:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d109      	bne.n	8013742 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d151      	bne.n	80137d8 <sys_timeout_abs+0xc4>
 8013734:	4b2a      	ldr	r3, [pc, #168]	; (80137e0 <sys_timeout_abs+0xcc>)
 8013736:	22be      	movs	r2, #190	; 0xbe
 8013738:	492a      	ldr	r1, [pc, #168]	; (80137e4 <sys_timeout_abs+0xd0>)
 801373a:	482b      	ldr	r0, [pc, #172]	; (80137e8 <sys_timeout_abs+0xd4>)
 801373c:	f003 fc60 	bl	8017000 <iprintf>
    return;
 8013740:	e04a      	b.n	80137d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	2200      	movs	r2, #0
 8013746:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	68ba      	ldr	r2, [r7, #8]
 801374c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801375a:	4b24      	ldr	r3, [pc, #144]	; (80137ec <sys_timeout_abs+0xd8>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d103      	bne.n	801376a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013762:	4a22      	ldr	r2, [pc, #136]	; (80137ec <sys_timeout_abs+0xd8>)
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	6013      	str	r3, [r2, #0]
    return;
 8013768:	e037      	b.n	80137da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	685a      	ldr	r2, [r3, #4]
 801376e:	4b1f      	ldr	r3, [pc, #124]	; (80137ec <sys_timeout_abs+0xd8>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	1ad3      	subs	r3, r2, r3
 8013776:	0fdb      	lsrs	r3, r3, #31
 8013778:	f003 0301 	and.w	r3, r3, #1
 801377c:	b2db      	uxtb	r3, r3
 801377e:	2b00      	cmp	r3, #0
 8013780:	d007      	beq.n	8013792 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013782:	4b1a      	ldr	r3, [pc, #104]	; (80137ec <sys_timeout_abs+0xd8>)
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801378a:	4a18      	ldr	r2, [pc, #96]	; (80137ec <sys_timeout_abs+0xd8>)
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	6013      	str	r3, [r2, #0]
 8013790:	e023      	b.n	80137da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013792:	4b16      	ldr	r3, [pc, #88]	; (80137ec <sys_timeout_abs+0xd8>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	617b      	str	r3, [r7, #20]
 8013798:	e01a      	b.n	80137d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00b      	beq.n	80137ba <sys_timeout_abs+0xa6>
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	685a      	ldr	r2, [r3, #4]
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	0fdb      	lsrs	r3, r3, #31
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d007      	beq.n	80137ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	601a      	str	r2, [r3, #0]
        break;
 80137c8:	e007      	b.n	80137da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	617b      	str	r3, [r7, #20]
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1e1      	bne.n	801379a <sys_timeout_abs+0x86>
 80137d6:	e000      	b.n	80137da <sys_timeout_abs+0xc6>
    return;
 80137d8:	bf00      	nop
      }
    }
  }
}
 80137da:	3718      	adds	r7, #24
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	0801abdc 	.word	0x0801abdc
 80137e4:	0801ac10 	.word	0x0801ac10
 80137e8:	0801ac50 	.word	0x0801ac50
 80137ec:	20004b10 	.word	0x20004b10

080137f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	4798      	blx	r3

  now = sys_now();
 8013802:	f7f1 fe73 	bl	80054ec <sys_now>
 8013806:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	681a      	ldr	r2, [r3, #0]
 801380c:	4b0f      	ldr	r3, [pc, #60]	; (801384c <lwip_cyclic_timer+0x5c>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4413      	add	r3, r2
 8013812:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013814:	68fa      	ldr	r2, [r7, #12]
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	1ad3      	subs	r3, r2, r3
 801381a:	0fdb      	lsrs	r3, r3, #31
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d009      	beq.n	801383a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	4413      	add	r3, r2
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	4907      	ldr	r1, [pc, #28]	; (8013850 <lwip_cyclic_timer+0x60>)
 8013832:	4618      	mov	r0, r3
 8013834:	f7ff ff6e 	bl	8013714 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013838:	e004      	b.n	8013844 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	4904      	ldr	r1, [pc, #16]	; (8013850 <lwip_cyclic_timer+0x60>)
 801383e:	68f8      	ldr	r0, [r7, #12]
 8013840:	f7ff ff68 	bl	8013714 <sys_timeout_abs>
}
 8013844:	bf00      	nop
 8013846:	3718      	adds	r7, #24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	20004b14 	.word	0x20004b14
 8013850:	080137f1 	.word	0x080137f1

08013854 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801385a:	2301      	movs	r3, #1
 801385c:	607b      	str	r3, [r7, #4]
 801385e:	e00e      	b.n	801387e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013860:	4a0b      	ldr	r2, [pc, #44]	; (8013890 <sys_timeouts_init+0x3c>)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	00db      	lsls	r3, r3, #3
 801386c:	4a08      	ldr	r2, [pc, #32]	; (8013890 <sys_timeouts_init+0x3c>)
 801386e:	4413      	add	r3, r2
 8013870:	461a      	mov	r2, r3
 8013872:	4908      	ldr	r1, [pc, #32]	; (8013894 <sys_timeouts_init+0x40>)
 8013874:	f000 f810 	bl	8013898 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	3301      	adds	r3, #1
 801387c:	607b      	str	r3, [r7, #4]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2b02      	cmp	r3, #2
 8013882:	d9ed      	bls.n	8013860 <sys_timeouts_init+0xc>
  }
}
 8013884:	bf00      	nop
 8013886:	bf00      	nop
 8013888:	3708      	adds	r7, #8
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	0801b8cc 	.word	0x0801b8cc
 8013894:	080137f1 	.word	0x080137f1

08013898 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138aa:	d306      	bcc.n	80138ba <sys_timeout+0x22>
 80138ac:	4b0a      	ldr	r3, [pc, #40]	; (80138d8 <sys_timeout+0x40>)
 80138ae:	f240 1229 	movw	r2, #297	; 0x129
 80138b2:	490a      	ldr	r1, [pc, #40]	; (80138dc <sys_timeout+0x44>)
 80138b4:	480a      	ldr	r0, [pc, #40]	; (80138e0 <sys_timeout+0x48>)
 80138b6:	f003 fba3 	bl	8017000 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80138ba:	f7f1 fe17 	bl	80054ec <sys_now>
 80138be:	4602      	mov	r2, r0
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	4413      	add	r3, r2
 80138c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	68b9      	ldr	r1, [r7, #8]
 80138ca:	6978      	ldr	r0, [r7, #20]
 80138cc:	f7ff ff22 	bl	8013714 <sys_timeout_abs>
#endif
}
 80138d0:	bf00      	nop
 80138d2:	3718      	adds	r7, #24
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	0801abdc 	.word	0x0801abdc
 80138dc:	0801ac78 	.word	0x0801ac78
 80138e0:	0801ac50 	.word	0x0801ac50

080138e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80138ea:	f7f1 fdff 	bl	80054ec <sys_now>
 80138ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80138f0:	4b17      	ldr	r3, [pc, #92]	; (8013950 <sys_check_timeouts+0x6c>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d022      	beq.n	8013942 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	68fa      	ldr	r2, [r7, #12]
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	0fdb      	lsrs	r3, r3, #31
 8013906:	f003 0301 	and.w	r3, r3, #1
 801390a:	b2db      	uxtb	r3, r3
 801390c:	2b00      	cmp	r3, #0
 801390e:	d11a      	bne.n	8013946 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4a0e      	ldr	r2, [pc, #56]	; (8013950 <sys_check_timeouts+0x6c>)
 8013916:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	689b      	ldr	r3, [r3, #8]
 801391c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	4a0a      	ldr	r2, [pc, #40]	; (8013954 <sys_check_timeouts+0x70>)
 801392a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801392c:	68b9      	ldr	r1, [r7, #8]
 801392e:	200a      	movs	r0, #10
 8013930:	f7f8 fcbe 	bl	800c2b0 <memp_free>
    if (handler != NULL) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d0da      	beq.n	80138f0 <sys_check_timeouts+0xc>
      handler(arg);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6838      	ldr	r0, [r7, #0]
 801393e:	4798      	blx	r3
  do {
 8013940:	e7d6      	b.n	80138f0 <sys_check_timeouts+0xc>
      return;
 8013942:	bf00      	nop
 8013944:	e000      	b.n	8013948 <sys_check_timeouts+0x64>
      return;
 8013946:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	20004b10 	.word	0x20004b10
 8013954:	20004b14 	.word	0x20004b14

08013958 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801395e:	4b16      	ldr	r3, [pc, #88]	; (80139b8 <sys_timeouts_sleeptime+0x60>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d102      	bne.n	801396c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013966:	f04f 33ff 	mov.w	r3, #4294967295
 801396a:	e020      	b.n	80139ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801396c:	f7f1 fdbe 	bl	80054ec <sys_now>
 8013970:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013972:	4b11      	ldr	r3, [pc, #68]	; (80139b8 <sys_timeouts_sleeptime+0x60>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	685a      	ldr	r2, [r3, #4]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	0fdb      	lsrs	r3, r3, #31
 801397e:	f003 0301 	and.w	r3, r3, #1
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	d001      	beq.n	801398c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013988:	2300      	movs	r3, #0
 801398a:	e010      	b.n	80139ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801398c:	4b0a      	ldr	r3, [pc, #40]	; (80139b8 <sys_timeouts_sleeptime+0x60>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	685a      	ldr	r2, [r3, #4]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	1ad3      	subs	r3, r2, r3
 8013996:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	da06      	bge.n	80139ac <sys_timeouts_sleeptime+0x54>
 801399e:	4b07      	ldr	r3, [pc, #28]	; (80139bc <sys_timeouts_sleeptime+0x64>)
 80139a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80139a4:	4906      	ldr	r1, [pc, #24]	; (80139c0 <sys_timeouts_sleeptime+0x68>)
 80139a6:	4807      	ldr	r0, [pc, #28]	; (80139c4 <sys_timeouts_sleeptime+0x6c>)
 80139a8:	f003 fb2a 	bl	8017000 <iprintf>
    return ret;
 80139ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	20004b10 	.word	0x20004b10
 80139bc:	0801abdc 	.word	0x0801abdc
 80139c0:	0801acb0 	.word	0x0801acb0
 80139c4:	0801ac50 	.word	0x0801ac50

080139c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80139cc:	f003 fb30 	bl	8017030 <rand>
 80139d0:	4603      	mov	r3, r0
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80139d8:	b29b      	uxth	r3, r3
 80139da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80139de:	b29a      	uxth	r2, r3
 80139e0:	4b01      	ldr	r3, [pc, #4]	; (80139e8 <udp_init+0x20>)
 80139e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80139e4:	bf00      	nop
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	20000018 	.word	0x20000018

080139ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80139f2:	2300      	movs	r3, #0
 80139f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80139f6:	4b17      	ldr	r3, [pc, #92]	; (8013a54 <udp_new_port+0x68>)
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	1c5a      	adds	r2, r3, #1
 80139fc:	b291      	uxth	r1, r2
 80139fe:	4a15      	ldr	r2, [pc, #84]	; (8013a54 <udp_new_port+0x68>)
 8013a00:	8011      	strh	r1, [r2, #0]
 8013a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d103      	bne.n	8013a12 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013a0a:	4b12      	ldr	r3, [pc, #72]	; (8013a54 <udp_new_port+0x68>)
 8013a0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013a10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a12:	4b11      	ldr	r3, [pc, #68]	; (8013a58 <udp_new_port+0x6c>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	603b      	str	r3, [r7, #0]
 8013a18:	e011      	b.n	8013a3e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	8a5a      	ldrh	r2, [r3, #18]
 8013a1e:	4b0d      	ldr	r3, [pc, #52]	; (8013a54 <udp_new_port+0x68>)
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d108      	bne.n	8013a38 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013a26:	88fb      	ldrh	r3, [r7, #6]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	80fb      	strh	r3, [r7, #6]
 8013a2c:	88fb      	ldrh	r3, [r7, #6]
 8013a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a32:	d3e0      	bcc.n	80139f6 <udp_new_port+0xa>
        return 0;
 8013a34:	2300      	movs	r3, #0
 8013a36:	e007      	b.n	8013a48 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	603b      	str	r3, [r7, #0]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d1ea      	bne.n	8013a1a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013a44:	4b03      	ldr	r3, [pc, #12]	; (8013a54 <udp_new_port+0x68>)
 8013a46:	881b      	ldrh	r3, [r3, #0]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	370c      	adds	r7, #12
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr
 8013a54:	20000018 	.word	0x20000018
 8013a58:	20025858 	.word	0x20025858

08013a5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b084      	sub	sp, #16
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	4613      	mov	r3, r2
 8013a68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d105      	bne.n	8013a7c <udp_input_local_match+0x20>
 8013a70:	4b27      	ldr	r3, [pc, #156]	; (8013b10 <udp_input_local_match+0xb4>)
 8013a72:	2287      	movs	r2, #135	; 0x87
 8013a74:	4927      	ldr	r1, [pc, #156]	; (8013b14 <udp_input_local_match+0xb8>)
 8013a76:	4828      	ldr	r0, [pc, #160]	; (8013b18 <udp_input_local_match+0xbc>)
 8013a78:	f003 fac2 	bl	8017000 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d105      	bne.n	8013a8e <udp_input_local_match+0x32>
 8013a82:	4b23      	ldr	r3, [pc, #140]	; (8013b10 <udp_input_local_match+0xb4>)
 8013a84:	2288      	movs	r2, #136	; 0x88
 8013a86:	4925      	ldr	r1, [pc, #148]	; (8013b1c <udp_input_local_match+0xc0>)
 8013a88:	4823      	ldr	r0, [pc, #140]	; (8013b18 <udp_input_local_match+0xbc>)
 8013a8a:	f003 fab9 	bl	8017000 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	7a1b      	ldrb	r3, [r3, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00b      	beq.n	8013aae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	7a1a      	ldrb	r2, [r3, #8]
 8013a9a:	4b21      	ldr	r3, [pc, #132]	; (8013b20 <udp_input_local_match+0xc4>)
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d001      	beq.n	8013aae <udp_input_local_match+0x52>
    return 0;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	e02b      	b.n	8013b06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013aae:	79fb      	ldrb	r3, [r7, #7]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d018      	beq.n	8013ae6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d013      	beq.n	8013ae2 <udp_input_local_match+0x86>
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d00f      	beq.n	8013ae2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ac2:	4b17      	ldr	r3, [pc, #92]	; (8013b20 <udp_input_local_match+0xc4>)
 8013ac4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aca:	d00a      	beq.n	8013ae2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	4b13      	ldr	r3, [pc, #76]	; (8013b20 <udp_input_local_match+0xc4>)
 8013ad2:	695b      	ldr	r3, [r3, #20]
 8013ad4:	405a      	eors	r2, r3
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	3308      	adds	r3, #8
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d110      	bne.n	8013b04 <udp_input_local_match+0xa8>
          return 1;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	e00f      	b.n	8013b06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d009      	beq.n	8013b00 <udp_input_local_match+0xa4>
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d005      	beq.n	8013b00 <udp_input_local_match+0xa4>
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	4b09      	ldr	r3, [pc, #36]	; (8013b20 <udp_input_local_match+0xc4>)
 8013afa:	695b      	ldr	r3, [r3, #20]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d101      	bne.n	8013b04 <udp_input_local_match+0xa8>
        return 1;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e000      	b.n	8013b06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	0801acc4 	.word	0x0801acc4
 8013b14:	0801acf4 	.word	0x0801acf4
 8013b18:	0801ad18 	.word	0x0801ad18
 8013b1c:	0801ad40 	.word	0x0801ad40
 8013b20:	200088ec 	.word	0x200088ec

08013b24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013b24:	b590      	push	{r4, r7, lr}
 8013b26:	b08d      	sub	sp, #52	; 0x34
 8013b28:	af02      	add	r7, sp, #8
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d105      	bne.n	8013b44 <udp_input+0x20>
 8013b38:	4b7c      	ldr	r3, [pc, #496]	; (8013d2c <udp_input+0x208>)
 8013b3a:	22cf      	movs	r2, #207	; 0xcf
 8013b3c:	497c      	ldr	r1, [pc, #496]	; (8013d30 <udp_input+0x20c>)
 8013b3e:	487d      	ldr	r0, [pc, #500]	; (8013d34 <udp_input+0x210>)
 8013b40:	f003 fa5e 	bl	8017000 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d105      	bne.n	8013b56 <udp_input+0x32>
 8013b4a:	4b78      	ldr	r3, [pc, #480]	; (8013d2c <udp_input+0x208>)
 8013b4c:	22d0      	movs	r2, #208	; 0xd0
 8013b4e:	497a      	ldr	r1, [pc, #488]	; (8013d38 <udp_input+0x214>)
 8013b50:	4878      	ldr	r0, [pc, #480]	; (8013d34 <udp_input+0x210>)
 8013b52:	f003 fa55 	bl	8017000 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	895b      	ldrh	r3, [r3, #10]
 8013b5a:	2b07      	cmp	r3, #7
 8013b5c:	d803      	bhi.n	8013b66 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7f9 fa4e 	bl	800d000 <pbuf_free>
    goto end;
 8013b64:	e0de      	b.n	8013d24 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013b6c:	4b73      	ldr	r3, [pc, #460]	; (8013d3c <udp_input+0x218>)
 8013b6e:	695b      	ldr	r3, [r3, #20]
 8013b70:	4a72      	ldr	r2, [pc, #456]	; (8013d3c <udp_input+0x218>)
 8013b72:	6812      	ldr	r2, [r2, #0]
 8013b74:	4611      	mov	r1, r2
 8013b76:	4618      	mov	r0, r3
 8013b78:	f001 fe04 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	881b      	ldrh	r3, [r3, #0]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f7 fe8a 	bl	800b8a0 <lwip_htons>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	885b      	ldrh	r3, [r3, #2]
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7f7 fe82 	bl	800b8a0 <lwip_htons>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bac:	4b64      	ldr	r3, [pc, #400]	; (8013d40 <udp_input+0x21c>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8013bb2:	e054      	b.n	8013c5e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb6:	8a5b      	ldrh	r3, [r3, #18]
 8013bb8:	89fa      	ldrh	r2, [r7, #14]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d14a      	bne.n	8013c54 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013bbe:	7cfb      	ldrb	r3, [r7, #19]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6839      	ldr	r1, [r7, #0]
 8013bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bc6:	f7ff ff49 	bl	8013a5c <udp_input_local_match>
 8013bca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d041      	beq.n	8013c54 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	7c1b      	ldrb	r3, [r3, #16]
 8013bd4:	f003 0304 	and.w	r3, r3, #4
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d11d      	bne.n	8013c18 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d102      	bne.n	8013be8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be4:	61fb      	str	r3, [r7, #28]
 8013be6:	e017      	b.n	8013c18 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013be8:	7cfb      	ldrb	r3, [r7, #19]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d014      	beq.n	8013c18 <udp_input+0xf4>
 8013bee:	4b53      	ldr	r3, [pc, #332]	; (8013d3c <udp_input+0x218>)
 8013bf0:	695b      	ldr	r3, [r3, #20]
 8013bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf6:	d10f      	bne.n	8013c18 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013bf8:	69fb      	ldr	r3, [r7, #28]
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	3304      	adds	r3, #4
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d008      	beq.n	8013c18 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d101      	bne.n	8013c18 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c16:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	8a9b      	ldrh	r3, [r3, #20]
 8013c1c:	8a3a      	ldrh	r2, [r7, #16]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d118      	bne.n	8013c54 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c24:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d005      	beq.n	8013c36 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	685a      	ldr	r2, [r3, #4]
 8013c2e:	4b43      	ldr	r3, [pc, #268]	; (8013d3c <udp_input+0x218>)
 8013c30:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d10e      	bne.n	8013c54 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d014      	beq.n	8013c66 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3e:	68da      	ldr	r2, [r3, #12]
 8013c40:	6a3b      	ldr	r3, [r7, #32]
 8013c42:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013c44:	4b3e      	ldr	r3, [pc, #248]	; (8013d40 <udp_input+0x21c>)
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013c4c:	4a3c      	ldr	r2, [pc, #240]	; (8013d40 <udp_input+0x21c>)
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013c52:	e008      	b.n	8013c66 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c56:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1a7      	bne.n	8013bb4 <udp_input+0x90>
 8013c64:	e000      	b.n	8013c68 <udp_input+0x144>
        break;
 8013c66:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d101      	bne.n	8013c72 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <udp_input+0x15a>
    for_us = 1;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	76fb      	strb	r3, [r7, #27]
 8013c7c:	e00a      	b.n	8013c94 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	3304      	adds	r3, #4
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	4b2d      	ldr	r3, [pc, #180]	; (8013d3c <udp_input+0x218>)
 8013c86:	695b      	ldr	r3, [r3, #20]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	bf0c      	ite	eq
 8013c8c:	2301      	moveq	r3, #1
 8013c8e:	2300      	movne	r3, #0
 8013c90:	b2db      	uxtb	r3, r3
 8013c92:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013c94:	7efb      	ldrb	r3, [r7, #27]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d041      	beq.n	8013d1e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013c9a:	2108      	movs	r1, #8
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f7f9 f929 	bl	800cef4 <pbuf_remove_header>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00a      	beq.n	8013cbe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013ca8:	4b20      	ldr	r3, [pc, #128]	; (8013d2c <udp_input+0x208>)
 8013caa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013cae:	4925      	ldr	r1, [pc, #148]	; (8013d44 <udp_input+0x220>)
 8013cb0:	4820      	ldr	r0, [pc, #128]	; (8013d34 <udp_input+0x210>)
 8013cb2:	f003 f9a5 	bl	8017000 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7f9 f9a2 	bl	800d000 <pbuf_free>
      goto end;
 8013cbc:	e032      	b.n	8013d24 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d012      	beq.n	8013cea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	699b      	ldr	r3, [r3, #24]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d00a      	beq.n	8013ce2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	699c      	ldr	r4, [r3, #24]
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd2:	69d8      	ldr	r0, [r3, #28]
 8013cd4:	8a3b      	ldrh	r3, [r7, #16]
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	4b1b      	ldr	r3, [pc, #108]	; (8013d48 <udp_input+0x224>)
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cde:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013ce0:	e021      	b.n	8013d26 <udp_input+0x202>
        pbuf_free(p);
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f7f9 f98c 	bl	800d000 <pbuf_free>
        goto end;
 8013ce8:	e01c      	b.n	8013d24 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013cea:	7cfb      	ldrb	r3, [r7, #19]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d112      	bne.n	8013d16 <udp_input+0x1f2>
 8013cf0:	4b12      	ldr	r3, [pc, #72]	; (8013d3c <udp_input+0x218>)
 8013cf2:	695b      	ldr	r3, [r3, #20]
 8013cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013cf8:	2be0      	cmp	r3, #224	; 0xe0
 8013cfa:	d00c      	beq.n	8013d16 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013cfc:	4b0f      	ldr	r3, [pc, #60]	; (8013d3c <udp_input+0x218>)
 8013cfe:	899b      	ldrh	r3, [r3, #12]
 8013d00:	3308      	adds	r3, #8
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	b21b      	sxth	r3, r3
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7f9 f966 	bl	800cfda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013d0e:	2103      	movs	r1, #3
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f001 fa17 	bl	8015144 <icmp_dest_unreach>
      pbuf_free(p);
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7f9 f972 	bl	800d000 <pbuf_free>
  return;
 8013d1c:	e003      	b.n	8013d26 <udp_input+0x202>
    pbuf_free(p);
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7f9 f96e 	bl	800d000 <pbuf_free>
  return;
 8013d24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013d26:	372c      	adds	r7, #44	; 0x2c
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd90      	pop	{r4, r7, pc}
 8013d2c:	0801acc4 	.word	0x0801acc4
 8013d30:	0801ad68 	.word	0x0801ad68
 8013d34:	0801ad18 	.word	0x0801ad18
 8013d38:	0801ad80 	.word	0x0801ad80
 8013d3c:	200088ec 	.word	0x200088ec
 8013d40:	20025858 	.word	0x20025858
 8013d44:	0801ad9c 	.word	0x0801ad9c
 8013d48:	200088fc 	.word	0x200088fc

08013d4c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b086      	sub	sp, #24
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	4613      	mov	r3, r2
 8013d58:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d101      	bne.n	8013d64 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013d60:	4b39      	ldr	r3, [pc, #228]	; (8013e48 <udp_bind+0xfc>)
 8013d62:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <udp_bind+0x32>
 8013d6a:	4b38      	ldr	r3, [pc, #224]	; (8013e4c <udp_bind+0x100>)
 8013d6c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013d70:	4937      	ldr	r1, [pc, #220]	; (8013e50 <udp_bind+0x104>)
 8013d72:	4838      	ldr	r0, [pc, #224]	; (8013e54 <udp_bind+0x108>)
 8013d74:	f003 f944 	bl	8017000 <iprintf>
 8013d78:	f06f 030f 	mvn.w	r3, #15
 8013d7c:	e060      	b.n	8013e40 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d82:	4b35      	ldr	r3, [pc, #212]	; (8013e58 <udp_bind+0x10c>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	617b      	str	r3, [r7, #20]
 8013d88:	e009      	b.n	8013d9e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d102      	bne.n	8013d98 <udp_bind+0x4c>
      rebind = 1;
 8013d92:	2301      	movs	r3, #1
 8013d94:	74fb      	strb	r3, [r7, #19]
      break;
 8013d96:	e005      	b.n	8013da4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	617b      	str	r3, [r7, #20]
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d1f2      	bne.n	8013d8a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013da4:	88fb      	ldrh	r3, [r7, #6]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d109      	bne.n	8013dbe <udp_bind+0x72>
    port = udp_new_port();
 8013daa:	f7ff fe1f 	bl	80139ec <udp_new_port>
 8013dae:	4603      	mov	r3, r0
 8013db0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013db2:	88fb      	ldrh	r3, [r7, #6]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d12c      	bne.n	8013e12 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013db8:	f06f 0307 	mvn.w	r3, #7
 8013dbc:	e040      	b.n	8013e40 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013dbe:	4b26      	ldr	r3, [pc, #152]	; (8013e58 <udp_bind+0x10c>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	617b      	str	r3, [r7, #20]
 8013dc4:	e022      	b.n	8013e0c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013dc6:	68fa      	ldr	r2, [r7, #12]
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d01b      	beq.n	8013e06 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	8a5b      	ldrh	r3, [r3, #18]
 8013dd2:	88fa      	ldrh	r2, [r7, #6]
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d116      	bne.n	8013e06 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d00d      	beq.n	8013e00 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00a      	beq.n	8013e00 <udp_bind+0xb4>
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d006      	beq.n	8013e00 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013df2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d003      	beq.n	8013e00 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d102      	bne.n	8013e06 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013e00:	f06f 0307 	mvn.w	r3, #7
 8013e04:	e01c      	b.n	8013e40 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1d9      	bne.n	8013dc6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d002      	beq.n	8013e1e <udp_bind+0xd2>
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	e000      	b.n	8013e20 <udp_bind+0xd4>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	68fa      	ldr	r2, [r7, #12]
 8013e22:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	88fa      	ldrh	r2, [r7, #6]
 8013e28:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013e2a:	7cfb      	ldrb	r3, [r7, #19]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d106      	bne.n	8013e3e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013e30:	4b09      	ldr	r3, [pc, #36]	; (8013e58 <udp_bind+0x10c>)
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013e38:	4a07      	ldr	r2, [pc, #28]	; (8013e58 <udp_bind+0x10c>)
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013e3e:	2300      	movs	r3, #0
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3718      	adds	r7, #24
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	0801b8e4 	.word	0x0801b8e4
 8013e4c:	0801acc4 	.word	0x0801acc4
 8013e50:	0801af8c 	.word	0x0801af8c
 8013e54:	0801ad18 	.word	0x0801ad18
 8013e58:	20025858 	.word	0x20025858

08013e5c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	4613      	mov	r3, r2
 8013e68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d109      	bne.n	8013e84 <udp_connect+0x28>
 8013e70:	4b2c      	ldr	r3, [pc, #176]	; (8013f24 <udp_connect+0xc8>)
 8013e72:	f240 4235 	movw	r2, #1077	; 0x435
 8013e76:	492c      	ldr	r1, [pc, #176]	; (8013f28 <udp_connect+0xcc>)
 8013e78:	482c      	ldr	r0, [pc, #176]	; (8013f2c <udp_connect+0xd0>)
 8013e7a:	f003 f8c1 	bl	8017000 <iprintf>
 8013e7e:	f06f 030f 	mvn.w	r3, #15
 8013e82:	e04b      	b.n	8013f1c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d109      	bne.n	8013e9e <udp_connect+0x42>
 8013e8a:	4b26      	ldr	r3, [pc, #152]	; (8013f24 <udp_connect+0xc8>)
 8013e8c:	f240 4236 	movw	r2, #1078	; 0x436
 8013e90:	4927      	ldr	r1, [pc, #156]	; (8013f30 <udp_connect+0xd4>)
 8013e92:	4826      	ldr	r0, [pc, #152]	; (8013f2c <udp_connect+0xd0>)
 8013e94:	f003 f8b4 	bl	8017000 <iprintf>
 8013e98:	f06f 030f 	mvn.w	r3, #15
 8013e9c:	e03e      	b.n	8013f1c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	8a5b      	ldrh	r3, [r3, #18]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d10f      	bne.n	8013ec6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013ea6:	68f9      	ldr	r1, [r7, #12]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	8a5b      	ldrh	r3, [r3, #18]
 8013eac:	461a      	mov	r2, r3
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f7ff ff4c 	bl	8013d4c <udp_bind>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013eb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <udp_connect+0x6a>
      return err;
 8013ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ec4:	e02a      	b.n	8013f1c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d002      	beq.n	8013ed2 <udp_connect+0x76>
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	e000      	b.n	8013ed4 <udp_connect+0x78>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	68fa      	ldr	r2, [r7, #12]
 8013ed6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	88fa      	ldrh	r2, [r7, #6]
 8013edc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	7c1b      	ldrb	r3, [r3, #16]
 8013ee2:	f043 0304 	orr.w	r3, r3, #4
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013eec:	4b11      	ldr	r3, [pc, #68]	; (8013f34 <udp_connect+0xd8>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	617b      	str	r3, [r7, #20]
 8013ef2:	e008      	b.n	8013f06 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013ef4:	68fa      	ldr	r2, [r7, #12]
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d101      	bne.n	8013f00 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013efc:	2300      	movs	r3, #0
 8013efe:	e00d      	b.n	8013f1c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	617b      	str	r3, [r7, #20]
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d1f3      	bne.n	8013ef4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013f0c:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <udp_connect+0xd8>)
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013f14:	4a07      	ldr	r2, [pc, #28]	; (8013f34 <udp_connect+0xd8>)
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3718      	adds	r7, #24
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	0801acc4 	.word	0x0801acc4
 8013f28:	0801afa4 	.word	0x0801afa4
 8013f2c:	0801ad18 	.word	0x0801ad18
 8013f30:	0801afc0 	.word	0x0801afc0
 8013f34:	20025858 	.word	0x20025858

08013f38 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d107      	bne.n	8013f5a <udp_recv+0x22>
 8013f4a:	4b08      	ldr	r3, [pc, #32]	; (8013f6c <udp_recv+0x34>)
 8013f4c:	f240 428a 	movw	r2, #1162	; 0x48a
 8013f50:	4907      	ldr	r1, [pc, #28]	; (8013f70 <udp_recv+0x38>)
 8013f52:	4808      	ldr	r0, [pc, #32]	; (8013f74 <udp_recv+0x3c>)
 8013f54:	f003 f854 	bl	8017000 <iprintf>
 8013f58:	e005      	b.n	8013f66 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	61da      	str	r2, [r3, #28]
}
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	0801acc4 	.word	0x0801acc4
 8013f70:	0801aff8 	.word	0x0801aff8
 8013f74:	0801ad18 	.word	0x0801ad18

08013f78 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d107      	bne.n	8013f96 <udp_remove+0x1e>
 8013f86:	4b19      	ldr	r3, [pc, #100]	; (8013fec <udp_remove+0x74>)
 8013f88:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013f8c:	4918      	ldr	r1, [pc, #96]	; (8013ff0 <udp_remove+0x78>)
 8013f8e:	4819      	ldr	r0, [pc, #100]	; (8013ff4 <udp_remove+0x7c>)
 8013f90:	f003 f836 	bl	8017000 <iprintf>
 8013f94:	e026      	b.n	8013fe4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013f96:	4b18      	ldr	r3, [pc, #96]	; (8013ff8 <udp_remove+0x80>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d105      	bne.n	8013fac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013fa0:	4b15      	ldr	r3, [pc, #84]	; (8013ff8 <udp_remove+0x80>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	4a14      	ldr	r2, [pc, #80]	; (8013ff8 <udp_remove+0x80>)
 8013fa8:	6013      	str	r3, [r2, #0]
 8013faa:	e017      	b.n	8013fdc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013fac:	4b12      	ldr	r3, [pc, #72]	; (8013ff8 <udp_remove+0x80>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	e010      	b.n	8013fd6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d009      	beq.n	8013fd0 <udp_remove+0x58>
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d104      	bne.n	8013fd0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	68da      	ldr	r2, [r3, #12]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	60da      	str	r2, [r3, #12]
        break;
 8013fce:	e005      	b.n	8013fdc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	60fb      	str	r3, [r7, #12]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d1eb      	bne.n	8013fb4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	2000      	movs	r0, #0
 8013fe0:	f7f8 f966 	bl	800c2b0 <memp_free>
}
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	0801acc4 	.word	0x0801acc4
 8013ff0:	0801b010 	.word	0x0801b010
 8013ff4:	0801ad18 	.word	0x0801ad18
 8013ff8:	20025858 	.word	0x20025858

08013ffc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014002:	2000      	movs	r0, #0
 8014004:	f7f8 f902 	bl	800c20c <memp_malloc>
 8014008:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d007      	beq.n	8014020 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014010:	2220      	movs	r2, #32
 8014012:	2100      	movs	r1, #0
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f002 ff41 	bl	8016e9c <memset>
    pcb->ttl = UDP_TTL;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	22ff      	movs	r2, #255	; 0xff
 801401e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014020:	687b      	ldr	r3, [r7, #4]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3708      	adds	r7, #8
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b084      	sub	sp, #16
 801402e:	af00      	add	r7, sp, #0
 8014030:	4603      	mov	r3, r0
 8014032:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014034:	f7ff ffe2 	bl	8013ffc <udp_new>
 8014038:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801403a:	68fb      	ldr	r3, [r7, #12]
}
 801403c:	4618      	mov	r0, r3
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014044:	b480      	push	{r7}
 8014046:	b085      	sub	sp, #20
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d01e      	beq.n	8014092 <udp_netif_ip_addr_changed+0x4e>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d01a      	beq.n	8014092 <udp_netif_ip_addr_changed+0x4e>
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d017      	beq.n	8014092 <udp_netif_ip_addr_changed+0x4e>
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d013      	beq.n	8014092 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801406a:	4b0d      	ldr	r3, [pc, #52]	; (80140a0 <udp_netif_ip_addr_changed+0x5c>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	60fb      	str	r3, [r7, #12]
 8014070:	e00c      	b.n	801408c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681a      	ldr	r2, [r3, #0]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	429a      	cmp	r2, r3
 801407c:	d103      	bne.n	8014086 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	60fb      	str	r3, [r7, #12]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1ef      	bne.n	8014072 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014092:	bf00      	nop
 8014094:	3714      	adds	r7, #20
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr
 801409e:	bf00      	nop
 80140a0:	20025858 	.word	0x20025858

080140a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80140ac:	4915      	ldr	r1, [pc, #84]	; (8014104 <etharp_free_entry+0x60>)
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	440b      	add	r3, r1
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d013      	beq.n	80140e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80140c0:	4910      	ldr	r1, [pc, #64]	; (8014104 <etharp_free_entry+0x60>)
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	4613      	mov	r3, r2
 80140c6:	005b      	lsls	r3, r3, #1
 80140c8:	4413      	add	r3, r2
 80140ca:	00db      	lsls	r3, r3, #3
 80140cc:	440b      	add	r3, r1
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7f8 ff95 	bl	800d000 <pbuf_free>
    arp_table[i].q = NULL;
 80140d6:	490b      	ldr	r1, [pc, #44]	; (8014104 <etharp_free_entry+0x60>)
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	4613      	mov	r3, r2
 80140dc:	005b      	lsls	r3, r3, #1
 80140de:	4413      	add	r3, r2
 80140e0:	00db      	lsls	r3, r3, #3
 80140e2:	440b      	add	r3, r1
 80140e4:	2200      	movs	r2, #0
 80140e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80140e8:	4906      	ldr	r1, [pc, #24]	; (8014104 <etharp_free_entry+0x60>)
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	4613      	mov	r3, r2
 80140ee:	005b      	lsls	r3, r3, #1
 80140f0:	4413      	add	r3, r2
 80140f2:	00db      	lsls	r3, r3, #3
 80140f4:	440b      	add	r3, r1
 80140f6:	3314      	adds	r3, #20
 80140f8:	2200      	movs	r2, #0
 80140fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80140fc:	bf00      	nop
 80140fe:	3708      	adds	r7, #8
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	20004b1c 	.word	0x20004b1c

08014108 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801410e:	2300      	movs	r3, #0
 8014110:	607b      	str	r3, [r7, #4]
 8014112:	e096      	b.n	8014242 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014114:	494f      	ldr	r1, [pc, #316]	; (8014254 <etharp_tmr+0x14c>)
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3314      	adds	r3, #20
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014128:	78fb      	ldrb	r3, [r7, #3]
 801412a:	2b00      	cmp	r3, #0
 801412c:	f000 8086 	beq.w	801423c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014130:	4948      	ldr	r1, [pc, #288]	; (8014254 <etharp_tmr+0x14c>)
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	4613      	mov	r3, r2
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	4413      	add	r3, r2
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	440b      	add	r3, r1
 801413e:	3312      	adds	r3, #18
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	b298      	uxth	r0, r3
 8014146:	4943      	ldr	r1, [pc, #268]	; (8014254 <etharp_tmr+0x14c>)
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	3312      	adds	r3, #18
 8014156:	4602      	mov	r2, r0
 8014158:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801415a:	493e      	ldr	r1, [pc, #248]	; (8014254 <etharp_tmr+0x14c>)
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	005b      	lsls	r3, r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	440b      	add	r3, r1
 8014168:	3312      	adds	r3, #18
 801416a:	881b      	ldrh	r3, [r3, #0]
 801416c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014170:	d215      	bcs.n	801419e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014172:	4938      	ldr	r1, [pc, #224]	; (8014254 <etharp_tmr+0x14c>)
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	4613      	mov	r3, r2
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	4413      	add	r3, r2
 801417c:	00db      	lsls	r3, r3, #3
 801417e:	440b      	add	r3, r1
 8014180:	3314      	adds	r3, #20
 8014182:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014184:	2b01      	cmp	r3, #1
 8014186:	d10e      	bne.n	80141a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014188:	4932      	ldr	r1, [pc, #200]	; (8014254 <etharp_tmr+0x14c>)
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	4613      	mov	r3, r2
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	4413      	add	r3, r2
 8014192:	00db      	lsls	r3, r3, #3
 8014194:	440b      	add	r3, r1
 8014196:	3312      	adds	r3, #18
 8014198:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801419a:	2b04      	cmp	r3, #4
 801419c:	d903      	bls.n	80141a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f7ff ff80 	bl	80140a4 <etharp_free_entry>
 80141a4:	e04a      	b.n	801423c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80141a6:	492b      	ldr	r1, [pc, #172]	; (8014254 <etharp_tmr+0x14c>)
 80141a8:	687a      	ldr	r2, [r7, #4]
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	440b      	add	r3, r1
 80141b4:	3314      	adds	r3, #20
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	2b03      	cmp	r3, #3
 80141ba:	d10a      	bne.n	80141d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80141bc:	4925      	ldr	r1, [pc, #148]	; (8014254 <etharp_tmr+0x14c>)
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	4613      	mov	r3, r2
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	440b      	add	r3, r1
 80141ca:	3314      	adds	r3, #20
 80141cc:	2204      	movs	r2, #4
 80141ce:	701a      	strb	r2, [r3, #0]
 80141d0:	e034      	b.n	801423c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80141d2:	4920      	ldr	r1, [pc, #128]	; (8014254 <etharp_tmr+0x14c>)
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	440b      	add	r3, r1
 80141e0:	3314      	adds	r3, #20
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	2b04      	cmp	r3, #4
 80141e6:	d10a      	bne.n	80141fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80141e8:	491a      	ldr	r1, [pc, #104]	; (8014254 <etharp_tmr+0x14c>)
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	4613      	mov	r3, r2
 80141ee:	005b      	lsls	r3, r3, #1
 80141f0:	4413      	add	r3, r2
 80141f2:	00db      	lsls	r3, r3, #3
 80141f4:	440b      	add	r3, r1
 80141f6:	3314      	adds	r3, #20
 80141f8:	2202      	movs	r2, #2
 80141fa:	701a      	strb	r2, [r3, #0]
 80141fc:	e01e      	b.n	801423c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80141fe:	4915      	ldr	r1, [pc, #84]	; (8014254 <etharp_tmr+0x14c>)
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	4613      	mov	r3, r2
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	4413      	add	r3, r2
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	440b      	add	r3, r1
 801420c:	3314      	adds	r3, #20
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d113      	bne.n	801423c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014214:	490f      	ldr	r1, [pc, #60]	; (8014254 <etharp_tmr+0x14c>)
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	4613      	mov	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4413      	add	r3, r2
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	440b      	add	r3, r1
 8014222:	3308      	adds	r3, #8
 8014224:	6818      	ldr	r0, [r3, #0]
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	4613      	mov	r3, r2
 801422a:	005b      	lsls	r3, r3, #1
 801422c:	4413      	add	r3, r2
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	4a08      	ldr	r2, [pc, #32]	; (8014254 <etharp_tmr+0x14c>)
 8014232:	4413      	add	r3, r2
 8014234:	3304      	adds	r3, #4
 8014236:	4619      	mov	r1, r3
 8014238:	f000 fe6e 	bl	8014f18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	3301      	adds	r3, #1
 8014240:	607b      	str	r3, [r7, #4]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b09      	cmp	r3, #9
 8014246:	f77f af65 	ble.w	8014114 <etharp_tmr+0xc>
      }
    }
  }
}
 801424a:	bf00      	nop
 801424c:	bf00      	nop
 801424e:	3708      	adds	r7, #8
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}
 8014254:	20004b1c 	.word	0x20004b1c

08014258 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b08a      	sub	sp, #40	; 0x28
 801425c:	af00      	add	r7, sp, #0
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	460b      	mov	r3, r1
 8014262:	607a      	str	r2, [r7, #4]
 8014264:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014266:	230a      	movs	r3, #10
 8014268:	84fb      	strh	r3, [r7, #38]	; 0x26
 801426a:	230a      	movs	r3, #10
 801426c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801426e:	230a      	movs	r3, #10
 8014270:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014272:	2300      	movs	r3, #0
 8014274:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014276:	230a      	movs	r3, #10
 8014278:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	83bb      	strh	r3, [r7, #28]
 801427e:	2300      	movs	r3, #0
 8014280:	837b      	strh	r3, [r7, #26]
 8014282:	2300      	movs	r3, #0
 8014284:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014286:	2300      	movs	r3, #0
 8014288:	843b      	strh	r3, [r7, #32]
 801428a:	e0ae      	b.n	80143ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801428c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014290:	49a6      	ldr	r1, [pc, #664]	; (801452c <etharp_find_entry+0x2d4>)
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3314      	adds	r3, #20
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80142a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142a6:	2b0a      	cmp	r3, #10
 80142a8:	d105      	bne.n	80142b6 <etharp_find_entry+0x5e>
 80142aa:	7dfb      	ldrb	r3, [r7, #23]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d102      	bne.n	80142b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80142b0:	8c3b      	ldrh	r3, [r7, #32]
 80142b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80142b4:	e095      	b.n	80143e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80142b6:	7dfb      	ldrb	r3, [r7, #23]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f000 8092 	beq.w	80143e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80142be:	7dfb      	ldrb	r3, [r7, #23]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d009      	beq.n	80142d8 <etharp_find_entry+0x80>
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d806      	bhi.n	80142d8 <etharp_find_entry+0x80>
 80142ca:	4b99      	ldr	r3, [pc, #612]	; (8014530 <etharp_find_entry+0x2d8>)
 80142cc:	f240 1223 	movw	r2, #291	; 0x123
 80142d0:	4998      	ldr	r1, [pc, #608]	; (8014534 <etharp_find_entry+0x2dc>)
 80142d2:	4899      	ldr	r0, [pc, #612]	; (8014538 <etharp_find_entry+0x2e0>)
 80142d4:	f002 fe94 	bl	8017000 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d020      	beq.n	8014320 <etharp_find_entry+0xc8>
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6819      	ldr	r1, [r3, #0]
 80142e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142e6:	4891      	ldr	r0, [pc, #580]	; (801452c <etharp_find_entry+0x2d4>)
 80142e8:	4613      	mov	r3, r2
 80142ea:	005b      	lsls	r3, r3, #1
 80142ec:	4413      	add	r3, r2
 80142ee:	00db      	lsls	r3, r3, #3
 80142f0:	4403      	add	r3, r0
 80142f2:	3304      	adds	r3, #4
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4299      	cmp	r1, r3
 80142f8:	d112      	bne.n	8014320 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d00c      	beq.n	801431a <etharp_find_entry+0xc2>
 8014300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014304:	4989      	ldr	r1, [pc, #548]	; (801452c <etharp_find_entry+0x2d4>)
 8014306:	4613      	mov	r3, r2
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	4413      	add	r3, r2
 801430c:	00db      	lsls	r3, r3, #3
 801430e:	440b      	add	r3, r1
 8014310:	3308      	adds	r3, #8
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	687a      	ldr	r2, [r7, #4]
 8014316:	429a      	cmp	r2, r3
 8014318:	d102      	bne.n	8014320 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801431a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801431e:	e100      	b.n	8014522 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014320:	7dfb      	ldrb	r3, [r7, #23]
 8014322:	2b01      	cmp	r3, #1
 8014324:	d140      	bne.n	80143a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801432a:	4980      	ldr	r1, [pc, #512]	; (801452c <etharp_find_entry+0x2d4>)
 801432c:	4613      	mov	r3, r2
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	4413      	add	r3, r2
 8014332:	00db      	lsls	r3, r3, #3
 8014334:	440b      	add	r3, r1
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d01a      	beq.n	8014372 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801433c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014340:	497a      	ldr	r1, [pc, #488]	; (801452c <etharp_find_entry+0x2d4>)
 8014342:	4613      	mov	r3, r2
 8014344:	005b      	lsls	r3, r3, #1
 8014346:	4413      	add	r3, r2
 8014348:	00db      	lsls	r3, r3, #3
 801434a:	440b      	add	r3, r1
 801434c:	3312      	adds	r3, #18
 801434e:	881b      	ldrh	r3, [r3, #0]
 8014350:	8bba      	ldrh	r2, [r7, #28]
 8014352:	429a      	cmp	r2, r3
 8014354:	d845      	bhi.n	80143e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014356:	8c3b      	ldrh	r3, [r7, #32]
 8014358:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801435a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801435e:	4973      	ldr	r1, [pc, #460]	; (801452c <etharp_find_entry+0x2d4>)
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	440b      	add	r3, r1
 801436a:	3312      	adds	r3, #18
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	83bb      	strh	r3, [r7, #28]
 8014370:	e037      	b.n	80143e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014372:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014376:	496d      	ldr	r1, [pc, #436]	; (801452c <etharp_find_entry+0x2d4>)
 8014378:	4613      	mov	r3, r2
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	4413      	add	r3, r2
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	440b      	add	r3, r1
 8014382:	3312      	adds	r3, #18
 8014384:	881b      	ldrh	r3, [r3, #0]
 8014386:	8b7a      	ldrh	r2, [r7, #26]
 8014388:	429a      	cmp	r2, r3
 801438a:	d82a      	bhi.n	80143e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801438c:	8c3b      	ldrh	r3, [r7, #32]
 801438e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014394:	4965      	ldr	r1, [pc, #404]	; (801452c <etharp_find_entry+0x2d4>)
 8014396:	4613      	mov	r3, r2
 8014398:	005b      	lsls	r3, r3, #1
 801439a:	4413      	add	r3, r2
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	440b      	add	r3, r1
 80143a0:	3312      	adds	r3, #18
 80143a2:	881b      	ldrh	r3, [r3, #0]
 80143a4:	837b      	strh	r3, [r7, #26]
 80143a6:	e01c      	b.n	80143e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80143a8:	7dfb      	ldrb	r3, [r7, #23]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d919      	bls.n	80143e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80143ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143b2:	495e      	ldr	r1, [pc, #376]	; (801452c <etharp_find_entry+0x2d4>)
 80143b4:	4613      	mov	r3, r2
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	4413      	add	r3, r2
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	440b      	add	r3, r1
 80143be:	3312      	adds	r3, #18
 80143c0:	881b      	ldrh	r3, [r3, #0]
 80143c2:	8b3a      	ldrh	r2, [r7, #24]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d80c      	bhi.n	80143e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80143c8:	8c3b      	ldrh	r3, [r7, #32]
 80143ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80143cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143d0:	4956      	ldr	r1, [pc, #344]	; (801452c <etharp_find_entry+0x2d4>)
 80143d2:	4613      	mov	r3, r2
 80143d4:	005b      	lsls	r3, r3, #1
 80143d6:	4413      	add	r3, r2
 80143d8:	00db      	lsls	r3, r3, #3
 80143da:	440b      	add	r3, r1
 80143dc:	3312      	adds	r3, #18
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143e2:	8c3b      	ldrh	r3, [r7, #32]
 80143e4:	3301      	adds	r3, #1
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	843b      	strh	r3, [r7, #32]
 80143ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143ee:	2b09      	cmp	r3, #9
 80143f0:	f77f af4c 	ble.w	801428c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80143f4:	7afb      	ldrb	r3, [r7, #11]
 80143f6:	f003 0302 	and.w	r3, r3, #2
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d108      	bne.n	8014410 <etharp_find_entry+0x1b8>
 80143fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014402:	2b0a      	cmp	r3, #10
 8014404:	d107      	bne.n	8014416 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014406:	7afb      	ldrb	r3, [r7, #11]
 8014408:	f003 0301 	and.w	r3, r3, #1
 801440c:	2b00      	cmp	r3, #0
 801440e:	d102      	bne.n	8014416 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014410:	f04f 33ff 	mov.w	r3, #4294967295
 8014414:	e085      	b.n	8014522 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014416:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801441a:	2b09      	cmp	r3, #9
 801441c:	dc02      	bgt.n	8014424 <etharp_find_entry+0x1cc>
    i = empty;
 801441e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014420:	843b      	strh	r3, [r7, #32]
 8014422:	e039      	b.n	8014498 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014424:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014428:	2b09      	cmp	r3, #9
 801442a:	dc14      	bgt.n	8014456 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801442c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801442e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014430:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014434:	493d      	ldr	r1, [pc, #244]	; (801452c <etharp_find_entry+0x2d4>)
 8014436:	4613      	mov	r3, r2
 8014438:	005b      	lsls	r3, r3, #1
 801443a:	4413      	add	r3, r2
 801443c:	00db      	lsls	r3, r3, #3
 801443e:	440b      	add	r3, r1
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d018      	beq.n	8014478 <etharp_find_entry+0x220>
 8014446:	4b3a      	ldr	r3, [pc, #232]	; (8014530 <etharp_find_entry+0x2d8>)
 8014448:	f240 126d 	movw	r2, #365	; 0x16d
 801444c:	493b      	ldr	r1, [pc, #236]	; (801453c <etharp_find_entry+0x2e4>)
 801444e:	483a      	ldr	r0, [pc, #232]	; (8014538 <etharp_find_entry+0x2e0>)
 8014450:	f002 fdd6 	bl	8017000 <iprintf>
 8014454:	e010      	b.n	8014478 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014456:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801445a:	2b09      	cmp	r3, #9
 801445c:	dc02      	bgt.n	8014464 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801445e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014460:	843b      	strh	r3, [r7, #32]
 8014462:	e009      	b.n	8014478 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014464:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014468:	2b09      	cmp	r3, #9
 801446a:	dc02      	bgt.n	8014472 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801446c:	8bfb      	ldrh	r3, [r7, #30]
 801446e:	843b      	strh	r3, [r7, #32]
 8014470:	e002      	b.n	8014478 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014472:	f04f 33ff 	mov.w	r3, #4294967295
 8014476:	e054      	b.n	8014522 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014478:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801447c:	2b09      	cmp	r3, #9
 801447e:	dd06      	ble.n	801448e <etharp_find_entry+0x236>
 8014480:	4b2b      	ldr	r3, [pc, #172]	; (8014530 <etharp_find_entry+0x2d8>)
 8014482:	f240 127f 	movw	r2, #383	; 0x17f
 8014486:	492e      	ldr	r1, [pc, #184]	; (8014540 <etharp_find_entry+0x2e8>)
 8014488:	482b      	ldr	r0, [pc, #172]	; (8014538 <etharp_find_entry+0x2e0>)
 801448a:	f002 fdb9 	bl	8017000 <iprintf>
    etharp_free_entry(i);
 801448e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff fe06 	bl	80140a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801449c:	2b09      	cmp	r3, #9
 801449e:	dd06      	ble.n	80144ae <etharp_find_entry+0x256>
 80144a0:	4b23      	ldr	r3, [pc, #140]	; (8014530 <etharp_find_entry+0x2d8>)
 80144a2:	f240 1283 	movw	r2, #387	; 0x183
 80144a6:	4926      	ldr	r1, [pc, #152]	; (8014540 <etharp_find_entry+0x2e8>)
 80144a8:	4823      	ldr	r0, [pc, #140]	; (8014538 <etharp_find_entry+0x2e0>)
 80144aa:	f002 fda9 	bl	8017000 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80144ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144b2:	491e      	ldr	r1, [pc, #120]	; (801452c <etharp_find_entry+0x2d4>)
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	3314      	adds	r3, #20
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d006      	beq.n	80144d4 <etharp_find_entry+0x27c>
 80144c6:	4b1a      	ldr	r3, [pc, #104]	; (8014530 <etharp_find_entry+0x2d8>)
 80144c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80144cc:	491d      	ldr	r1, [pc, #116]	; (8014544 <etharp_find_entry+0x2ec>)
 80144ce:	481a      	ldr	r0, [pc, #104]	; (8014538 <etharp_find_entry+0x2e0>)
 80144d0:	f002 fd96 	bl	8017000 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00b      	beq.n	80144f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80144da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6819      	ldr	r1, [r3, #0]
 80144e2:	4812      	ldr	r0, [pc, #72]	; (801452c <etharp_find_entry+0x2d4>)
 80144e4:	4613      	mov	r3, r2
 80144e6:	005b      	lsls	r3, r3, #1
 80144e8:	4413      	add	r3, r2
 80144ea:	00db      	lsls	r3, r3, #3
 80144ec:	4403      	add	r3, r0
 80144ee:	3304      	adds	r3, #4
 80144f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80144f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144f6:	490d      	ldr	r1, [pc, #52]	; (801452c <etharp_find_entry+0x2d4>)
 80144f8:	4613      	mov	r3, r2
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	4413      	add	r3, r2
 80144fe:	00db      	lsls	r3, r3, #3
 8014500:	440b      	add	r3, r1
 8014502:	3312      	adds	r3, #18
 8014504:	2200      	movs	r2, #0
 8014506:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014508:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801450c:	4907      	ldr	r1, [pc, #28]	; (801452c <etharp_find_entry+0x2d4>)
 801450e:	4613      	mov	r3, r2
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	4413      	add	r3, r2
 8014514:	00db      	lsls	r3, r3, #3
 8014516:	440b      	add	r3, r1
 8014518:	3308      	adds	r3, #8
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801451e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014522:	4618      	mov	r0, r3
 8014524:	3728      	adds	r7, #40	; 0x28
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	20004b1c 	.word	0x20004b1c
 8014530:	0801b028 	.word	0x0801b028
 8014534:	0801b060 	.word	0x0801b060
 8014538:	0801b0a0 	.word	0x0801b0a0
 801453c:	0801b0c8 	.word	0x0801b0c8
 8014540:	0801b0e0 	.word	0x0801b0e0
 8014544:	0801b0f4 	.word	0x0801b0f4

08014548 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b088      	sub	sp, #32
 801454c:	af02      	add	r7, sp, #8
 801454e:	60f8      	str	r0, [r7, #12]
 8014550:	60b9      	str	r1, [r7, #8]
 8014552:	607a      	str	r2, [r7, #4]
 8014554:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801455c:	2b06      	cmp	r3, #6
 801455e:	d006      	beq.n	801456e <etharp_update_arp_entry+0x26>
 8014560:	4b48      	ldr	r3, [pc, #288]	; (8014684 <etharp_update_arp_entry+0x13c>)
 8014562:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014566:	4948      	ldr	r1, [pc, #288]	; (8014688 <etharp_update_arp_entry+0x140>)
 8014568:	4848      	ldr	r0, [pc, #288]	; (801468c <etharp_update_arp_entry+0x144>)
 801456a:	f002 fd49 	bl	8017000 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d012      	beq.n	801459a <etharp_update_arp_entry+0x52>
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00e      	beq.n	801459a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	68f9      	ldr	r1, [r7, #12]
 8014582:	4618      	mov	r0, r3
 8014584:	f001 f8fe 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8014588:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801458a:	2b00      	cmp	r3, #0
 801458c:	d105      	bne.n	801459a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014596:	2be0      	cmp	r3, #224	; 0xe0
 8014598:	d102      	bne.n	80145a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801459a:	f06f 030f 	mvn.w	r3, #15
 801459e:	e06c      	b.n	801467a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	68fa      	ldr	r2, [r7, #12]
 80145a4:	4619      	mov	r1, r3
 80145a6:	68b8      	ldr	r0, [r7, #8]
 80145a8:	f7ff fe56 	bl	8014258 <etharp_find_entry>
 80145ac:	4603      	mov	r3, r0
 80145ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80145b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	da02      	bge.n	80145be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80145b8:	8afb      	ldrh	r3, [r7, #22]
 80145ba:	b25b      	sxtb	r3, r3
 80145bc:	e05d      	b.n	801467a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80145be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145c2:	4933      	ldr	r1, [pc, #204]	; (8014690 <etharp_update_arp_entry+0x148>)
 80145c4:	4613      	mov	r3, r2
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	4413      	add	r3, r2
 80145ca:	00db      	lsls	r3, r3, #3
 80145cc:	440b      	add	r3, r1
 80145ce:	3314      	adds	r3, #20
 80145d0:	2202      	movs	r2, #2
 80145d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80145d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145d8:	492d      	ldr	r1, [pc, #180]	; (8014690 <etharp_update_arp_entry+0x148>)
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	440b      	add	r3, r1
 80145e4:	3308      	adds	r3, #8
 80145e6:	68fa      	ldr	r2, [r7, #12]
 80145e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80145ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145ee:	4613      	mov	r3, r2
 80145f0:	005b      	lsls	r3, r3, #1
 80145f2:	4413      	add	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	3308      	adds	r3, #8
 80145f8:	4a25      	ldr	r2, [pc, #148]	; (8014690 <etharp_update_arp_entry+0x148>)
 80145fa:	4413      	add	r3, r2
 80145fc:	3304      	adds	r3, #4
 80145fe:	2206      	movs	r2, #6
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	f002 fc22 	bl	8016e4c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801460c:	4920      	ldr	r1, [pc, #128]	; (8014690 <etharp_update_arp_entry+0x148>)
 801460e:	4613      	mov	r3, r2
 8014610:	005b      	lsls	r3, r3, #1
 8014612:	4413      	add	r3, r2
 8014614:	00db      	lsls	r3, r3, #3
 8014616:	440b      	add	r3, r1
 8014618:	3312      	adds	r3, #18
 801461a:	2200      	movs	r2, #0
 801461c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801461e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014622:	491b      	ldr	r1, [pc, #108]	; (8014690 <etharp_update_arp_entry+0x148>)
 8014624:	4613      	mov	r3, r2
 8014626:	005b      	lsls	r3, r3, #1
 8014628:	4413      	add	r3, r2
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	440b      	add	r3, r1
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d021      	beq.n	8014678 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014638:	4915      	ldr	r1, [pc, #84]	; (8014690 <etharp_update_arp_entry+0x148>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801464c:	4910      	ldr	r1, [pc, #64]	; (8014690 <etharp_update_arp_entry+0x148>)
 801464e:	4613      	mov	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	4413      	add	r3, r2
 8014654:	00db      	lsls	r3, r3, #3
 8014656:	440b      	add	r3, r1
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6939      	ldr	r1, [r7, #16]
 801466c:	68f8      	ldr	r0, [r7, #12]
 801466e:	f002 f8bb 	bl	80167e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014672:	6938      	ldr	r0, [r7, #16]
 8014674:	f7f8 fcc4 	bl	800d000 <pbuf_free>
  }
  return ERR_OK;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	0801b028 	.word	0x0801b028
 8014688:	0801b120 	.word	0x0801b120
 801468c:	0801b0a0 	.word	0x0801b0a0
 8014690:	20004b1c 	.word	0x20004b1c

08014694 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801469c:	2300      	movs	r3, #0
 801469e:	60fb      	str	r3, [r7, #12]
 80146a0:	e01e      	b.n	80146e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80146a2:	4913      	ldr	r1, [pc, #76]	; (80146f0 <etharp_cleanup_netif+0x5c>)
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	4613      	mov	r3, r2
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	4413      	add	r3, r2
 80146ac:	00db      	lsls	r3, r3, #3
 80146ae:	440b      	add	r3, r1
 80146b0:	3314      	adds	r3, #20
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80146b6:	7afb      	ldrb	r3, [r7, #11]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00e      	beq.n	80146da <etharp_cleanup_netif+0x46>
 80146bc:	490c      	ldr	r1, [pc, #48]	; (80146f0 <etharp_cleanup_netif+0x5c>)
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	4613      	mov	r3, r2
 80146c2:	005b      	lsls	r3, r3, #1
 80146c4:	4413      	add	r3, r2
 80146c6:	00db      	lsls	r3, r3, #3
 80146c8:	440b      	add	r3, r1
 80146ca:	3308      	adds	r3, #8
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d102      	bne.n	80146da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f7ff fce5 	bl	80140a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	3301      	adds	r3, #1
 80146de:	60fb      	str	r3, [r7, #12]
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2b09      	cmp	r3, #9
 80146e4:	dddd      	ble.n	80146a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80146e6:	bf00      	nop
 80146e8:	bf00      	nop
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	20004b1c 	.word	0x20004b1c

080146f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80146f4:	b5b0      	push	{r4, r5, r7, lr}
 80146f6:	b08a      	sub	sp, #40	; 0x28
 80146f8:	af04      	add	r7, sp, #16
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d107      	bne.n	8014714 <etharp_input+0x20>
 8014704:	4b3d      	ldr	r3, [pc, #244]	; (80147fc <etharp_input+0x108>)
 8014706:	f240 228a 	movw	r2, #650	; 0x28a
 801470a:	493d      	ldr	r1, [pc, #244]	; (8014800 <etharp_input+0x10c>)
 801470c:	483d      	ldr	r0, [pc, #244]	; (8014804 <etharp_input+0x110>)
 801470e:	f002 fc77 	bl	8017000 <iprintf>
 8014712:	e06f      	b.n	80147f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	b29b      	uxth	r3, r3
 8014720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014724:	d10c      	bne.n	8014740 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801472a:	2b06      	cmp	r3, #6
 801472c:	d108      	bne.n	8014740 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014732:	2b04      	cmp	r3, #4
 8014734:	d104      	bne.n	8014740 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801473c:	2b08      	cmp	r3, #8
 801473e:	d003      	beq.n	8014748 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7f8 fc5d 	bl	800d000 <pbuf_free>
    return;
 8014746:	e055      	b.n	80147f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	330e      	adds	r3, #14
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	3318      	adds	r3, #24
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	3304      	adds	r3, #4
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d102      	bne.n	8014768 <etharp_input+0x74>
    for_us = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	75fb      	strb	r3, [r7, #23]
 8014766:	e009      	b.n	801477c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014768:	68ba      	ldr	r2, [r7, #8]
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	3304      	adds	r3, #4
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	429a      	cmp	r2, r3
 8014772:	bf0c      	ite	eq
 8014774:	2301      	moveq	r3, #1
 8014776:	2300      	movne	r3, #0
 8014778:	b2db      	uxtb	r3, r3
 801477a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	f103 0208 	add.w	r2, r3, #8
 8014782:	7dfb      	ldrb	r3, [r7, #23]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d001      	beq.n	801478c <etharp_input+0x98>
 8014788:	2301      	movs	r3, #1
 801478a:	e000      	b.n	801478e <etharp_input+0x9a>
 801478c:	2302      	movs	r3, #2
 801478e:	f107 010c 	add.w	r1, r7, #12
 8014792:	6838      	ldr	r0, [r7, #0]
 8014794:	f7ff fed8 	bl	8014548 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	88db      	ldrh	r3, [r3, #6]
 801479c:	b29b      	uxth	r3, r3
 801479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147a2:	d003      	beq.n	80147ac <etharp_input+0xb8>
 80147a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147a8:	d01e      	beq.n	80147e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80147aa:	e020      	b.n	80147ee <etharp_input+0xfa>
      if (for_us) {
 80147ac:	7dfb      	ldrb	r3, [r7, #23]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d01c      	beq.n	80147ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80147c8:	693a      	ldr	r2, [r7, #16]
 80147ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80147cc:	2102      	movs	r1, #2
 80147ce:	9103      	str	r1, [sp, #12]
 80147d0:	f107 010c 	add.w	r1, r7, #12
 80147d4:	9102      	str	r1, [sp, #8]
 80147d6:	9201      	str	r2, [sp, #4]
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	462b      	mov	r3, r5
 80147dc:	4622      	mov	r2, r4
 80147de:	4601      	mov	r1, r0
 80147e0:	6838      	ldr	r0, [r7, #0]
 80147e2:	f000 faeb 	bl	8014dbc <etharp_raw>
      break;
 80147e6:	e001      	b.n	80147ec <etharp_input+0xf8>
      break;
 80147e8:	bf00      	nop
 80147ea:	e000      	b.n	80147ee <etharp_input+0xfa>
      break;
 80147ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f7f8 fc06 	bl	800d000 <pbuf_free>
}
 80147f4:	3718      	adds	r7, #24
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bdb0      	pop	{r4, r5, r7, pc}
 80147fa:	bf00      	nop
 80147fc:	0801b028 	.word	0x0801b028
 8014800:	0801b178 	.word	0x0801b178
 8014804:	0801b0a0 	.word	0x0801b0a0

08014808 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af02      	add	r7, sp, #8
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	4613      	mov	r3, r2
 8014814:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014816:	79fa      	ldrb	r2, [r7, #7]
 8014818:	4944      	ldr	r1, [pc, #272]	; (801492c <etharp_output_to_arp_index+0x124>)
 801481a:	4613      	mov	r3, r2
 801481c:	005b      	lsls	r3, r3, #1
 801481e:	4413      	add	r3, r2
 8014820:	00db      	lsls	r3, r3, #3
 8014822:	440b      	add	r3, r1
 8014824:	3314      	adds	r3, #20
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	2b01      	cmp	r3, #1
 801482a:	d806      	bhi.n	801483a <etharp_output_to_arp_index+0x32>
 801482c:	4b40      	ldr	r3, [pc, #256]	; (8014930 <etharp_output_to_arp_index+0x128>)
 801482e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014832:	4940      	ldr	r1, [pc, #256]	; (8014934 <etharp_output_to_arp_index+0x12c>)
 8014834:	4840      	ldr	r0, [pc, #256]	; (8014938 <etharp_output_to_arp_index+0x130>)
 8014836:	f002 fbe3 	bl	8017000 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801483a:	79fa      	ldrb	r2, [r7, #7]
 801483c:	493b      	ldr	r1, [pc, #236]	; (801492c <etharp_output_to_arp_index+0x124>)
 801483e:	4613      	mov	r3, r2
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	4413      	add	r3, r2
 8014844:	00db      	lsls	r3, r3, #3
 8014846:	440b      	add	r3, r1
 8014848:	3314      	adds	r3, #20
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	2b02      	cmp	r3, #2
 801484e:	d153      	bne.n	80148f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014850:	79fa      	ldrb	r2, [r7, #7]
 8014852:	4936      	ldr	r1, [pc, #216]	; (801492c <etharp_output_to_arp_index+0x124>)
 8014854:	4613      	mov	r3, r2
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	4413      	add	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	440b      	add	r3, r1
 801485e:	3312      	adds	r3, #18
 8014860:	881b      	ldrh	r3, [r3, #0]
 8014862:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014866:	d919      	bls.n	801489c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014868:	79fa      	ldrb	r2, [r7, #7]
 801486a:	4613      	mov	r3, r2
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	4413      	add	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	4a2e      	ldr	r2, [pc, #184]	; (801492c <etharp_output_to_arp_index+0x124>)
 8014874:	4413      	add	r3, r2
 8014876:	3304      	adds	r3, #4
 8014878:	4619      	mov	r1, r3
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f000 fb4c 	bl	8014f18 <etharp_request>
 8014880:	4603      	mov	r3, r0
 8014882:	2b00      	cmp	r3, #0
 8014884:	d138      	bne.n	80148f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014886:	79fa      	ldrb	r2, [r7, #7]
 8014888:	4928      	ldr	r1, [pc, #160]	; (801492c <etharp_output_to_arp_index+0x124>)
 801488a:	4613      	mov	r3, r2
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	4413      	add	r3, r2
 8014890:	00db      	lsls	r3, r3, #3
 8014892:	440b      	add	r3, r1
 8014894:	3314      	adds	r3, #20
 8014896:	2203      	movs	r2, #3
 8014898:	701a      	strb	r2, [r3, #0]
 801489a:	e02d      	b.n	80148f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801489c:	79fa      	ldrb	r2, [r7, #7]
 801489e:	4923      	ldr	r1, [pc, #140]	; (801492c <etharp_output_to_arp_index+0x124>)
 80148a0:	4613      	mov	r3, r2
 80148a2:	005b      	lsls	r3, r3, #1
 80148a4:	4413      	add	r3, r2
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	440b      	add	r3, r1
 80148aa:	3312      	adds	r3, #18
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80148b2:	d321      	bcc.n	80148f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80148b4:	79fa      	ldrb	r2, [r7, #7]
 80148b6:	4613      	mov	r3, r2
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	00db      	lsls	r3, r3, #3
 80148be:	4a1b      	ldr	r2, [pc, #108]	; (801492c <etharp_output_to_arp_index+0x124>)
 80148c0:	4413      	add	r3, r2
 80148c2:	1d19      	adds	r1, r3, #4
 80148c4:	79fa      	ldrb	r2, [r7, #7]
 80148c6:	4613      	mov	r3, r2
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	4413      	add	r3, r2
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	3308      	adds	r3, #8
 80148d0:	4a16      	ldr	r2, [pc, #88]	; (801492c <etharp_output_to_arp_index+0x124>)
 80148d2:	4413      	add	r3, r2
 80148d4:	3304      	adds	r3, #4
 80148d6:	461a      	mov	r2, r3
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f000 fafb 	bl	8014ed4 <etharp_request_dst>
 80148de:	4603      	mov	r3, r0
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d109      	bne.n	80148f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80148e4:	79fa      	ldrb	r2, [r7, #7]
 80148e6:	4911      	ldr	r1, [pc, #68]	; (801492c <etharp_output_to_arp_index+0x124>)
 80148e8:	4613      	mov	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	4413      	add	r3, r2
 80148ee:	00db      	lsls	r3, r3, #3
 80148f0:	440b      	add	r3, r1
 80148f2:	3314      	adds	r3, #20
 80148f4:	2203      	movs	r2, #3
 80148f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80148fe:	79fa      	ldrb	r2, [r7, #7]
 8014900:	4613      	mov	r3, r2
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	4413      	add	r3, r2
 8014906:	00db      	lsls	r3, r3, #3
 8014908:	3308      	adds	r3, #8
 801490a:	4a08      	ldr	r2, [pc, #32]	; (801492c <etharp_output_to_arp_index+0x124>)
 801490c:	4413      	add	r3, r2
 801490e:	3304      	adds	r3, #4
 8014910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014914:	9200      	str	r2, [sp, #0]
 8014916:	460a      	mov	r2, r1
 8014918:	68b9      	ldr	r1, [r7, #8]
 801491a:	68f8      	ldr	r0, [r7, #12]
 801491c:	f001 ff64 	bl	80167e8 <ethernet_output>
 8014920:	4603      	mov	r3, r0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	20004b1c 	.word	0x20004b1c
 8014930:	0801b028 	.word	0x0801b028
 8014934:	0801b198 	.word	0x0801b198
 8014938:	0801b0a0 	.word	0x0801b0a0

0801493c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	; 0x28
 8014940:	af02      	add	r7, sp, #8
 8014942:	60f8      	str	r0, [r7, #12]
 8014944:	60b9      	str	r1, [r7, #8]
 8014946:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <etharp_output+0x24>
 8014952:	4b73      	ldr	r3, [pc, #460]	; (8014b20 <etharp_output+0x1e4>)
 8014954:	f240 321e 	movw	r2, #798	; 0x31e
 8014958:	4972      	ldr	r1, [pc, #456]	; (8014b24 <etharp_output+0x1e8>)
 801495a:	4873      	ldr	r0, [pc, #460]	; (8014b28 <etharp_output+0x1ec>)
 801495c:	f002 fb50 	bl	8017000 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d106      	bne.n	8014974 <etharp_output+0x38>
 8014966:	4b6e      	ldr	r3, [pc, #440]	; (8014b20 <etharp_output+0x1e4>)
 8014968:	f240 321f 	movw	r2, #799	; 0x31f
 801496c:	496f      	ldr	r1, [pc, #444]	; (8014b2c <etharp_output+0x1f0>)
 801496e:	486e      	ldr	r0, [pc, #440]	; (8014b28 <etharp_output+0x1ec>)
 8014970:	f002 fb46 	bl	8017000 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <etharp_output+0x4c>
 801497a:	4b69      	ldr	r3, [pc, #420]	; (8014b20 <etharp_output+0x1e4>)
 801497c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014980:	496b      	ldr	r1, [pc, #428]	; (8014b30 <etharp_output+0x1f4>)
 8014982:	4869      	ldr	r0, [pc, #420]	; (8014b28 <etharp_output+0x1ec>)
 8014984:	f002 fb3c 	bl	8017000 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	68f9      	ldr	r1, [r7, #12]
 801498e:	4618      	mov	r0, r3
 8014990:	f000 fef8 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8014994:	4603      	mov	r3, r0
 8014996:	2b00      	cmp	r3, #0
 8014998:	d002      	beq.n	80149a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801499a:	4b66      	ldr	r3, [pc, #408]	; (8014b34 <etharp_output+0x1f8>)
 801499c:	61fb      	str	r3, [r7, #28]
 801499e:	e0af      	b.n	8014b00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149a8:	2be0      	cmp	r3, #224	; 0xe0
 80149aa:	d118      	bne.n	80149de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80149ac:	2301      	movs	r3, #1
 80149ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80149b0:	2300      	movs	r3, #0
 80149b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80149b4:	235e      	movs	r3, #94	; 0x5e
 80149b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	3301      	adds	r3, #1
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	3302      	adds	r3, #2
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	3303      	adds	r3, #3
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80149d6:	f107 0310 	add.w	r3, r7, #16
 80149da:	61fb      	str	r3, [r7, #28]
 80149dc:	e090      	b.n	8014b00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	3304      	adds	r3, #4
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	405a      	eors	r2, r3
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	3308      	adds	r3, #8
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	4013      	ands	r3, r2
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d012      	beq.n	8014a1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014a00:	4293      	cmp	r3, r2
 8014a02:	d00b      	beq.n	8014a1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	330c      	adds	r3, #12
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d003      	beq.n	8014a16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	330c      	adds	r3, #12
 8014a12:	61bb      	str	r3, [r7, #24]
 8014a14:	e002      	b.n	8014a1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014a16:	f06f 0303 	mvn.w	r3, #3
 8014a1a:	e07d      	b.n	8014b18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a1c:	4b46      	ldr	r3, [pc, #280]	; (8014b38 <etharp_output+0x1fc>)
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	4619      	mov	r1, r3
 8014a22:	4a46      	ldr	r2, [pc, #280]	; (8014b3c <etharp_output+0x200>)
 8014a24:	460b      	mov	r3, r1
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	440b      	add	r3, r1
 8014a2a:	00db      	lsls	r3, r3, #3
 8014a2c:	4413      	add	r3, r2
 8014a2e:	3314      	adds	r3, #20
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d925      	bls.n	8014a82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a36:	4b40      	ldr	r3, [pc, #256]	; (8014b38 <etharp_output+0x1fc>)
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	4a3f      	ldr	r2, [pc, #252]	; (8014b3c <etharp_output+0x200>)
 8014a3e:	460b      	mov	r3, r1
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	440b      	add	r3, r1
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	4413      	add	r3, r2
 8014a48:	3308      	adds	r3, #8
 8014a4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d117      	bne.n	8014a82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	681a      	ldr	r2, [r3, #0]
 8014a56:	4b38      	ldr	r3, [pc, #224]	; (8014b38 <etharp_output+0x1fc>)
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	4937      	ldr	r1, [pc, #220]	; (8014b3c <etharp_output+0x200>)
 8014a5e:	4603      	mov	r3, r0
 8014a60:	005b      	lsls	r3, r3, #1
 8014a62:	4403      	add	r3, r0
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	440b      	add	r3, r1
 8014a68:	3304      	adds	r3, #4
 8014a6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d108      	bne.n	8014a82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014a70:	4b31      	ldr	r3, [pc, #196]	; (8014b38 <etharp_output+0x1fc>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	461a      	mov	r2, r3
 8014a76:	68b9      	ldr	r1, [r7, #8]
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7ff fec5 	bl	8014808 <etharp_output_to_arp_index>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	e04a      	b.n	8014b18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a82:	2300      	movs	r3, #0
 8014a84:	75fb      	strb	r3, [r7, #23]
 8014a86:	e031      	b.n	8014aec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a88:	7dfa      	ldrb	r2, [r7, #23]
 8014a8a:	492c      	ldr	r1, [pc, #176]	; (8014b3c <etharp_output+0x200>)
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4413      	add	r3, r2
 8014a92:	00db      	lsls	r3, r3, #3
 8014a94:	440b      	add	r3, r1
 8014a96:	3314      	adds	r3, #20
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	d923      	bls.n	8014ae6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a9e:	7dfa      	ldrb	r2, [r7, #23]
 8014aa0:	4926      	ldr	r1, [pc, #152]	; (8014b3c <etharp_output+0x200>)
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	005b      	lsls	r3, r3, #1
 8014aa6:	4413      	add	r3, r2
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	440b      	add	r3, r1
 8014aac:	3308      	adds	r3, #8
 8014aae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d117      	bne.n	8014ae6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	6819      	ldr	r1, [r3, #0]
 8014aba:	7dfa      	ldrb	r2, [r7, #23]
 8014abc:	481f      	ldr	r0, [pc, #124]	; (8014b3c <etharp_output+0x200>)
 8014abe:	4613      	mov	r3, r2
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	4403      	add	r3, r0
 8014ac8:	3304      	adds	r3, #4
 8014aca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014acc:	4299      	cmp	r1, r3
 8014ace:	d10a      	bne.n	8014ae6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014ad0:	4a19      	ldr	r2, [pc, #100]	; (8014b38 <etharp_output+0x1fc>)
 8014ad2:	7dfb      	ldrb	r3, [r7, #23]
 8014ad4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
 8014ad8:	461a      	mov	r2, r3
 8014ada:	68b9      	ldr	r1, [r7, #8]
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f7ff fe93 	bl	8014808 <etharp_output_to_arp_index>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	e018      	b.n	8014b18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014ae6:	7dfb      	ldrb	r3, [r7, #23]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	75fb      	strb	r3, [r7, #23]
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
 8014aee:	2b09      	cmp	r3, #9
 8014af0:	d9ca      	bls.n	8014a88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014af2:	68ba      	ldr	r2, [r7, #8]
 8014af4:	69b9      	ldr	r1, [r7, #24]
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f000 f822 	bl	8014b40 <etharp_query>
 8014afc:	4603      	mov	r3, r0
 8014afe:	e00b      	b.n	8014b18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b0a:	9300      	str	r3, [sp, #0]
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	68b9      	ldr	r1, [r7, #8]
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f001 fe69 	bl	80167e8 <ethernet_output>
 8014b16:	4603      	mov	r3, r0
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3720      	adds	r7, #32
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	0801b028 	.word	0x0801b028
 8014b24:	0801b178 	.word	0x0801b178
 8014b28:	0801b0a0 	.word	0x0801b0a0
 8014b2c:	0801b1c8 	.word	0x0801b1c8
 8014b30:	0801b168 	.word	0x0801b168
 8014b34:	0801b8e8 	.word	0x0801b8e8
 8014b38:	20004c0c 	.word	0x20004c0c
 8014b3c:	20004b1c 	.word	0x20004b1c

08014b40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b08c      	sub	sp, #48	; 0x30
 8014b44:	af02      	add	r7, sp, #8
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	3326      	adds	r3, #38	; 0x26
 8014b50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014b52:	23ff      	movs	r3, #255	; 0xff
 8014b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68f9      	ldr	r1, [r7, #12]
 8014b62:	4618      	mov	r0, r3
 8014b64:	f000 fe0e 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d10c      	bne.n	8014b88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b76:	2be0      	cmp	r3, #224	; 0xe0
 8014b78:	d006      	beq.n	8014b88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d003      	beq.n	8014b88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d102      	bne.n	8014b8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b88:	f06f 030f 	mvn.w	r3, #15
 8014b8c:	e101      	b.n	8014d92 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b8e:	68fa      	ldr	r2, [r7, #12]
 8014b90:	2101      	movs	r1, #1
 8014b92:	68b8      	ldr	r0, [r7, #8]
 8014b94:	f7ff fb60 	bl	8014258 <etharp_find_entry>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	da02      	bge.n	8014baa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014ba4:	8a7b      	ldrh	r3, [r7, #18]
 8014ba6:	b25b      	sxtb	r3, r3
 8014ba8:	e0f3      	b.n	8014d92 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014baa:	8a7b      	ldrh	r3, [r7, #18]
 8014bac:	2b7e      	cmp	r3, #126	; 0x7e
 8014bae:	d906      	bls.n	8014bbe <etharp_query+0x7e>
 8014bb0:	4b7a      	ldr	r3, [pc, #488]	; (8014d9c <etharp_query+0x25c>)
 8014bb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014bb6:	497a      	ldr	r1, [pc, #488]	; (8014da0 <etharp_query+0x260>)
 8014bb8:	487a      	ldr	r0, [pc, #488]	; (8014da4 <etharp_query+0x264>)
 8014bba:	f002 fa21 	bl	8017000 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014bbe:	8a7b      	ldrh	r3, [r7, #18]
 8014bc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014bc2:	7c7a      	ldrb	r2, [r7, #17]
 8014bc4:	4978      	ldr	r1, [pc, #480]	; (8014da8 <etharp_query+0x268>)
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	4413      	add	r3, r2
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	440b      	add	r3, r1
 8014bd0:	3314      	adds	r3, #20
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d115      	bne.n	8014c04 <etharp_query+0xc4>
    is_new_entry = 1;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014bdc:	7c7a      	ldrb	r2, [r7, #17]
 8014bde:	4972      	ldr	r1, [pc, #456]	; (8014da8 <etharp_query+0x268>)
 8014be0:	4613      	mov	r3, r2
 8014be2:	005b      	lsls	r3, r3, #1
 8014be4:	4413      	add	r3, r2
 8014be6:	00db      	lsls	r3, r3, #3
 8014be8:	440b      	add	r3, r1
 8014bea:	3314      	adds	r3, #20
 8014bec:	2201      	movs	r2, #1
 8014bee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014bf0:	7c7a      	ldrb	r2, [r7, #17]
 8014bf2:	496d      	ldr	r1, [pc, #436]	; (8014da8 <etharp_query+0x268>)
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	4413      	add	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	440b      	add	r3, r1
 8014bfe:	3308      	adds	r3, #8
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014c04:	7c7a      	ldrb	r2, [r7, #17]
 8014c06:	4968      	ldr	r1, [pc, #416]	; (8014da8 <etharp_query+0x268>)
 8014c08:	4613      	mov	r3, r2
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	00db      	lsls	r3, r3, #3
 8014c10:	440b      	add	r3, r1
 8014c12:	3314      	adds	r3, #20
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	2b01      	cmp	r3, #1
 8014c18:	d011      	beq.n	8014c3e <etharp_query+0xfe>
 8014c1a:	7c7a      	ldrb	r2, [r7, #17]
 8014c1c:	4962      	ldr	r1, [pc, #392]	; (8014da8 <etharp_query+0x268>)
 8014c1e:	4613      	mov	r3, r2
 8014c20:	005b      	lsls	r3, r3, #1
 8014c22:	4413      	add	r3, r2
 8014c24:	00db      	lsls	r3, r3, #3
 8014c26:	440b      	add	r3, r1
 8014c28:	3314      	adds	r3, #20
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d806      	bhi.n	8014c3e <etharp_query+0xfe>
 8014c30:	4b5a      	ldr	r3, [pc, #360]	; (8014d9c <etharp_query+0x25c>)
 8014c32:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014c36:	495d      	ldr	r1, [pc, #372]	; (8014dac <etharp_query+0x26c>)
 8014c38:	485a      	ldr	r0, [pc, #360]	; (8014da4 <etharp_query+0x264>)
 8014c3a:	f002 f9e1 	bl	8017000 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014c3e:	6a3b      	ldr	r3, [r7, #32]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <etharp_query+0x10a>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d10c      	bne.n	8014c64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014c4a:	68b9      	ldr	r1, [r7, #8]
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f000 f963 	bl	8014f18 <etharp_request>
 8014c52:	4603      	mov	r3, r0
 8014c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d102      	bne.n	8014c64 <etharp_query+0x124>
      return result;
 8014c5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014c62:	e096      	b.n	8014d92 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d106      	bne.n	8014c78 <etharp_query+0x138>
 8014c6a:	4b4c      	ldr	r3, [pc, #304]	; (8014d9c <etharp_query+0x25c>)
 8014c6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014c70:	494f      	ldr	r1, [pc, #316]	; (8014db0 <etharp_query+0x270>)
 8014c72:	484c      	ldr	r0, [pc, #304]	; (8014da4 <etharp_query+0x264>)
 8014c74:	f002 f9c4 	bl	8017000 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c78:	7c7a      	ldrb	r2, [r7, #17]
 8014c7a:	494b      	ldr	r1, [pc, #300]	; (8014da8 <etharp_query+0x268>)
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	4413      	add	r3, r2
 8014c82:	00db      	lsls	r3, r3, #3
 8014c84:	440b      	add	r3, r1
 8014c86:	3314      	adds	r3, #20
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d917      	bls.n	8014cbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c8e:	4a49      	ldr	r2, [pc, #292]	; (8014db4 <etharp_query+0x274>)
 8014c90:	7c7b      	ldrb	r3, [r7, #17]
 8014c92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c94:	7c7a      	ldrb	r2, [r7, #17]
 8014c96:	4613      	mov	r3, r2
 8014c98:	005b      	lsls	r3, r3, #1
 8014c9a:	4413      	add	r3, r2
 8014c9c:	00db      	lsls	r3, r3, #3
 8014c9e:	3308      	adds	r3, #8
 8014ca0:	4a41      	ldr	r2, [pc, #260]	; (8014da8 <etharp_query+0x268>)
 8014ca2:	4413      	add	r3, r2
 8014ca4:	3304      	adds	r3, #4
 8014ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014caa:	9200      	str	r2, [sp, #0]
 8014cac:	697a      	ldr	r2, [r7, #20]
 8014cae:	6879      	ldr	r1, [r7, #4]
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f001 fd99 	bl	80167e8 <ethernet_output>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cbc:	e067      	b.n	8014d8e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014cbe:	7c7a      	ldrb	r2, [r7, #17]
 8014cc0:	4939      	ldr	r1, [pc, #228]	; (8014da8 <etharp_query+0x268>)
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	4413      	add	r3, r2
 8014cc8:	00db      	lsls	r3, r3, #3
 8014cca:	440b      	add	r3, r1
 8014ccc:	3314      	adds	r3, #20
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d15c      	bne.n	8014d8e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014cdc:	e01c      	b.n	8014d18 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	895a      	ldrh	r2, [r3, #10]
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	891b      	ldrh	r3, [r3, #8]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d10a      	bne.n	8014d00 <etharp_query+0x1c0>
 8014cea:	69fb      	ldr	r3, [r7, #28]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d006      	beq.n	8014d00 <etharp_query+0x1c0>
 8014cf2:	4b2a      	ldr	r3, [pc, #168]	; (8014d9c <etharp_query+0x25c>)
 8014cf4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014cf8:	492f      	ldr	r1, [pc, #188]	; (8014db8 <etharp_query+0x278>)
 8014cfa:	482a      	ldr	r0, [pc, #168]	; (8014da4 <etharp_query+0x264>)
 8014cfc:	f002 f980 	bl	8017000 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	7b1b      	ldrb	r3, [r3, #12]
 8014d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d002      	beq.n	8014d12 <etharp_query+0x1d2>
        copy_needed = 1;
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	61bb      	str	r3, [r7, #24]
        break;
 8014d10:	e005      	b.n	8014d1e <etharp_query+0x1de>
      }
      p = p->next;
 8014d12:	69fb      	ldr	r3, [r7, #28]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d18:	69fb      	ldr	r3, [r7, #28]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d1df      	bne.n	8014cde <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d007      	beq.n	8014d34 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014d2a:	200e      	movs	r0, #14
 8014d2c:	f7f8 fbd0 	bl	800d4d0 <pbuf_clone>
 8014d30:	61f8      	str	r0, [r7, #28]
 8014d32:	e004      	b.n	8014d3e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014d38:	69f8      	ldr	r0, [r7, #28]
 8014d3a:	f7f8 fa07 	bl	800d14c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014d3e:	69fb      	ldr	r3, [r7, #28]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d021      	beq.n	8014d88 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014d44:	7c7a      	ldrb	r2, [r7, #17]
 8014d46:	4918      	ldr	r1, [pc, #96]	; (8014da8 <etharp_query+0x268>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00a      	beq.n	8014d6e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014d58:	7c7a      	ldrb	r2, [r7, #17]
 8014d5a:	4913      	ldr	r1, [pc, #76]	; (8014da8 <etharp_query+0x268>)
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	005b      	lsls	r3, r3, #1
 8014d60:	4413      	add	r3, r2
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	440b      	add	r3, r1
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f8 f949 	bl	800d000 <pbuf_free>
      }
      arp_table[i].q = p;
 8014d6e:	7c7a      	ldrb	r2, [r7, #17]
 8014d70:	490d      	ldr	r1, [pc, #52]	; (8014da8 <etharp_query+0x268>)
 8014d72:	4613      	mov	r3, r2
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	4413      	add	r3, r2
 8014d78:	00db      	lsls	r3, r3, #3
 8014d7a:	440b      	add	r3, r1
 8014d7c:	69fa      	ldr	r2, [r7, #28]
 8014d7e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d86:	e002      	b.n	8014d8e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d88:	23ff      	movs	r3, #255	; 0xff
 8014d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014d8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3728      	adds	r7, #40	; 0x28
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	0801b028 	.word	0x0801b028
 8014da0:	0801b1d4 	.word	0x0801b1d4
 8014da4:	0801b0a0 	.word	0x0801b0a0
 8014da8:	20004b1c 	.word	0x20004b1c
 8014dac:	0801b1e4 	.word	0x0801b1e4
 8014db0:	0801b1c8 	.word	0x0801b1c8
 8014db4:	20004c0c 	.word	0x20004c0c
 8014db8:	0801b20c 	.word	0x0801b20c

08014dbc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b08a      	sub	sp, #40	; 0x28
 8014dc0:	af02      	add	r7, sp, #8
 8014dc2:	60f8      	str	r0, [r7, #12]
 8014dc4:	60b9      	str	r1, [r7, #8]
 8014dc6:	607a      	str	r2, [r7, #4]
 8014dc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d106      	bne.n	8014de2 <etharp_raw+0x26>
 8014dd4:	4b3a      	ldr	r3, [pc, #232]	; (8014ec0 <etharp_raw+0x104>)
 8014dd6:	f240 4257 	movw	r2, #1111	; 0x457
 8014dda:	493a      	ldr	r1, [pc, #232]	; (8014ec4 <etharp_raw+0x108>)
 8014ddc:	483a      	ldr	r0, [pc, #232]	; (8014ec8 <etharp_raw+0x10c>)
 8014dde:	f002 f90f 	bl	8017000 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014de2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014de6:	211c      	movs	r1, #28
 8014de8:	200e      	movs	r0, #14
 8014dea:	f7f7 fe21 	bl	800ca30 <pbuf_alloc>
 8014dee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d102      	bne.n	8014dfc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014df6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dfa:	e05d      	b.n	8014eb8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	895b      	ldrh	r3, [r3, #10]
 8014e00:	2b1b      	cmp	r3, #27
 8014e02:	d806      	bhi.n	8014e12 <etharp_raw+0x56>
 8014e04:	4b2e      	ldr	r3, [pc, #184]	; (8014ec0 <etharp_raw+0x104>)
 8014e06:	f240 4262 	movw	r2, #1122	; 0x462
 8014e0a:	4930      	ldr	r1, [pc, #192]	; (8014ecc <etharp_raw+0x110>)
 8014e0c:	482e      	ldr	r0, [pc, #184]	; (8014ec8 <etharp_raw+0x10c>)
 8014e0e:	f002 f8f7 	bl	8017000 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014e18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7f6 fd40 	bl	800b8a0 <lwip_htons>
 8014e20:	4603      	mov	r3, r0
 8014e22:	461a      	mov	r2, r3
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e2e:	2b06      	cmp	r3, #6
 8014e30:	d006      	beq.n	8014e40 <etharp_raw+0x84>
 8014e32:	4b23      	ldr	r3, [pc, #140]	; (8014ec0 <etharp_raw+0x104>)
 8014e34:	f240 4269 	movw	r2, #1129	; 0x469
 8014e38:	4925      	ldr	r1, [pc, #148]	; (8014ed0 <etharp_raw+0x114>)
 8014e3a:	4823      	ldr	r0, [pc, #140]	; (8014ec8 <etharp_raw+0x10c>)
 8014e3c:	f002 f8e0 	bl	8017000 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	3308      	adds	r3, #8
 8014e44:	2206      	movs	r2, #6
 8014e46:	6839      	ldr	r1, [r7, #0]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f001 ffff 	bl	8016e4c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	3312      	adds	r3, #18
 8014e52:	2206      	movs	r2, #6
 8014e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e56:	4618      	mov	r0, r3
 8014e58:	f001 fff8 	bl	8016e4c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	330e      	adds	r3, #14
 8014e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e62:	6812      	ldr	r2, [r2, #0]
 8014e64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	3318      	adds	r3, #24
 8014e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e6c:	6812      	ldr	r2, [r2, #0]
 8014e6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	2200      	movs	r2, #0
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f042 0201 	orr.w	r2, r2, #1
 8014e7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2200      	movs	r2, #0
 8014e82:	f042 0208 	orr.w	r2, r2, #8
 8014e86:	709a      	strb	r2, [r3, #2]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	2206      	movs	r2, #6
 8014e90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	2204      	movs	r2, #4
 8014e96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e98:	f640 0306 	movw	r3, #2054	; 0x806
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	68ba      	ldr	r2, [r7, #8]
 8014ea2:	69b9      	ldr	r1, [r7, #24]
 8014ea4:	68f8      	ldr	r0, [r7, #12]
 8014ea6:	f001 fc9f 	bl	80167e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014eaa:	69b8      	ldr	r0, [r7, #24]
 8014eac:	f7f8 f8a8 	bl	800d000 <pbuf_free>
  p = NULL;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3720      	adds	r7, #32
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}
 8014ec0:	0801b028 	.word	0x0801b028
 8014ec4:	0801b178 	.word	0x0801b178
 8014ec8:	0801b0a0 	.word	0x0801b0a0
 8014ecc:	0801b228 	.word	0x0801b228
 8014ed0:	0801b25c 	.word	0x0801b25c

08014ed4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b088      	sub	sp, #32
 8014ed8:	af04      	add	r7, sp, #16
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	60b9      	str	r1, [r7, #8]
 8014ede:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	9203      	str	r2, [sp, #12]
 8014ef4:	68ba      	ldr	r2, [r7, #8]
 8014ef6:	9202      	str	r2, [sp, #8]
 8014ef8:	4a06      	ldr	r2, [pc, #24]	; (8014f14 <etharp_request_dst+0x40>)
 8014efa:	9201      	str	r2, [sp, #4]
 8014efc:	9300      	str	r3, [sp, #0]
 8014efe:	4603      	mov	r3, r0
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f7ff ff5a 	bl	8014dbc <etharp_raw>
 8014f08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3710      	adds	r7, #16
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	0801b8f0 	.word	0x0801b8f0

08014f18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014f22:	4a05      	ldr	r2, [pc, #20]	; (8014f38 <etharp_request+0x20>)
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff ffd4 	bl	8014ed4 <etharp_request_dst>
 8014f2c:	4603      	mov	r3, r0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	0801b8e8 	.word	0x0801b8e8

08014f3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b08e      	sub	sp, #56	; 0x38
 8014f40:	af04      	add	r7, sp, #16
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014f46:	4b79      	ldr	r3, [pc, #484]	; (801512c <icmp_input+0x1f0>)
 8014f48:	689b      	ldr	r3, [r3, #8]
 8014f4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	f003 030f 	and.w	r3, r3, #15
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f5e:	2b13      	cmp	r3, #19
 8014f60:	f240 80cd 	bls.w	80150fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	895b      	ldrh	r3, [r3, #10]
 8014f68:	2b03      	cmp	r3, #3
 8014f6a:	f240 80ca 	bls.w	8015102 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 80b7 	beq.w	80150f0 <icmp_input+0x1b4>
 8014f82:	2b08      	cmp	r3, #8
 8014f84:	f040 80b7 	bne.w	80150f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f88:	4b69      	ldr	r3, [pc, #420]	; (8015130 <icmp_input+0x1f4>)
 8014f8a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f8c:	4b67      	ldr	r3, [pc, #412]	; (801512c <icmp_input+0x1f0>)
 8014f8e:	695b      	ldr	r3, [r3, #20]
 8014f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f94:	2be0      	cmp	r3, #224	; 0xe0
 8014f96:	f000 80bb 	beq.w	8015110 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f9a:	4b64      	ldr	r3, [pc, #400]	; (801512c <icmp_input+0x1f0>)
 8014f9c:	695b      	ldr	r3, [r3, #20]
 8014f9e:	4a63      	ldr	r2, [pc, #396]	; (801512c <icmp_input+0x1f0>)
 8014fa0:	6812      	ldr	r2, [r2, #0]
 8014fa2:	4611      	mov	r1, r2
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f000 fbed 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	f040 80b1 	bne.w	8015114 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	891b      	ldrh	r3, [r3, #8]
 8014fb6:	2b07      	cmp	r3, #7
 8014fb8:	f240 80a5 	bls.w	8015106 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fbe:	330e      	adds	r3, #14
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7f7 ff86 	bl	800ced4 <pbuf_add_header>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d04b      	beq.n	8015066 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	891a      	ldrh	r2, [r3, #8]
 8014fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fd4:	4413      	add	r3, r2
 8014fd6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	891b      	ldrh	r3, [r3, #8]
 8014fdc:	8b7a      	ldrh	r2, [r7, #26]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	f0c0 809a 	bcc.w	8015118 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014fe4:	8b7b      	ldrh	r3, [r7, #26]
 8014fe6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fea:	4619      	mov	r1, r3
 8014fec:	200e      	movs	r0, #14
 8014fee:	f7f7 fd1f 	bl	800ca30 <pbuf_alloc>
 8014ff2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f000 8090 	beq.w	801511c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	895b      	ldrh	r3, [r3, #10]
 8015000:	461a      	mov	r2, r3
 8015002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015004:	3308      	adds	r3, #8
 8015006:	429a      	cmp	r2, r3
 8015008:	d203      	bcs.n	8015012 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801500a:	6978      	ldr	r0, [r7, #20]
 801500c:	f7f7 fff8 	bl	800d000 <pbuf_free>
          goto icmperr;
 8015010:	e085      	b.n	801511e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801501a:	4618      	mov	r0, r3
 801501c:	f001 ff16 	bl	8016e4c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015022:	4619      	mov	r1, r3
 8015024:	6978      	ldr	r0, [r7, #20]
 8015026:	f7f7 ff65 	bl	800cef4 <pbuf_remove_header>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d009      	beq.n	8015044 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015030:	4b40      	ldr	r3, [pc, #256]	; (8015134 <icmp_input+0x1f8>)
 8015032:	22b6      	movs	r2, #182	; 0xb6
 8015034:	4940      	ldr	r1, [pc, #256]	; (8015138 <icmp_input+0x1fc>)
 8015036:	4841      	ldr	r0, [pc, #260]	; (801513c <icmp_input+0x200>)
 8015038:	f001 ffe2 	bl	8017000 <iprintf>
          pbuf_free(r);
 801503c:	6978      	ldr	r0, [r7, #20]
 801503e:	f7f7 ffdf 	bl	800d000 <pbuf_free>
          goto icmperr;
 8015042:	e06c      	b.n	801511e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015044:	6879      	ldr	r1, [r7, #4]
 8015046:	6978      	ldr	r0, [r7, #20]
 8015048:	f7f8 f8fe 	bl	800d248 <pbuf_copy>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d003      	beq.n	801505a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015052:	6978      	ldr	r0, [r7, #20]
 8015054:	f7f7 ffd4 	bl	800d000 <pbuf_free>
          goto icmperr;
 8015058:	e061      	b.n	801511e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f7f7 ffd0 	bl	800d000 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	607b      	str	r3, [r7, #4]
 8015064:	e00f      	b.n	8015086 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015068:	330e      	adds	r3, #14
 801506a:	4619      	mov	r1, r3
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f7f7 ff41 	bl	800cef4 <pbuf_remove_header>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	d006      	beq.n	8015086 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015078:	4b2e      	ldr	r3, [pc, #184]	; (8015134 <icmp_input+0x1f8>)
 801507a:	22c7      	movs	r2, #199	; 0xc7
 801507c:	4930      	ldr	r1, [pc, #192]	; (8015140 <icmp_input+0x204>)
 801507e:	482f      	ldr	r0, [pc, #188]	; (801513c <icmp_input+0x200>)
 8015080:	f001 ffbe 	bl	8017000 <iprintf>
          goto icmperr;
 8015084:	e04b      	b.n	801511e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801508c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801508e:	4619      	mov	r1, r3
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7f7 ff1f 	bl	800ced4 <pbuf_add_header>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d12b      	bne.n	80150f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80150aa:	4b20      	ldr	r3, [pc, #128]	; (801512c <icmp_input+0x1f0>)
 80150ac:	691a      	ldr	r2, [r3, #16]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	2200      	movs	r2, #0
 80150b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	2200      	movs	r2, #0
 80150bc:	709a      	strb	r2, [r3, #2]
 80150be:	2200      	movs	r2, #0
 80150c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	22ff      	movs	r2, #255	; 0xff
 80150c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2200      	movs	r2, #0
 80150cc:	729a      	strb	r2, [r3, #10]
 80150ce:	2200      	movs	r2, #0
 80150d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	9302      	str	r3, [sp, #8]
 80150d6:	2301      	movs	r3, #1
 80150d8:	9301      	str	r3, [sp, #4]
 80150da:	2300      	movs	r3, #0
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	23ff      	movs	r3, #255	; 0xff
 80150e0:	2200      	movs	r2, #0
 80150e2:	69f9      	ldr	r1, [r7, #28]
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f000 fa75 	bl	80155d4 <ip4_output_if>
 80150ea:	4603      	mov	r3, r0
 80150ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80150ee:	e001      	b.n	80150f4 <icmp_input+0x1b8>
      break;
 80150f0:	bf00      	nop
 80150f2:	e000      	b.n	80150f6 <icmp_input+0x1ba>
      break;
 80150f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f7f7 ff82 	bl	800d000 <pbuf_free>
  return;
 80150fc:	e013      	b.n	8015126 <icmp_input+0x1ea>
    goto lenerr;
 80150fe:	bf00      	nop
 8015100:	e002      	b.n	8015108 <icmp_input+0x1cc>
    goto lenerr;
 8015102:	bf00      	nop
 8015104:	e000      	b.n	8015108 <icmp_input+0x1cc>
        goto lenerr;
 8015106:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7f7 ff79 	bl	800d000 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801510e:	e00a      	b.n	8015126 <icmp_input+0x1ea>
        goto icmperr;
 8015110:	bf00      	nop
 8015112:	e004      	b.n	801511e <icmp_input+0x1e2>
        goto icmperr;
 8015114:	bf00      	nop
 8015116:	e002      	b.n	801511e <icmp_input+0x1e2>
          goto icmperr;
 8015118:	bf00      	nop
 801511a:	e000      	b.n	801511e <icmp_input+0x1e2>
          goto icmperr;
 801511c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7f7 ff6e 	bl	800d000 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015124:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015126:	3728      	adds	r7, #40	; 0x28
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	200088ec 	.word	0x200088ec
 8015130:	20008900 	.word	0x20008900
 8015134:	0801b2a0 	.word	0x0801b2a0
 8015138:	0801b2d8 	.word	0x0801b2d8
 801513c:	0801b310 	.word	0x0801b310
 8015140:	0801b338 	.word	0x0801b338

08015144 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	460b      	mov	r3, r1
 801514e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015150:	78fb      	ldrb	r3, [r7, #3]
 8015152:	461a      	mov	r2, r3
 8015154:	2103      	movs	r1, #3
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f000 f814 	bl	8015184 <icmp_send_response>
}
 801515c:	bf00      	nop
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015170:	78fb      	ldrb	r3, [r7, #3]
 8015172:	461a      	mov	r2, r3
 8015174:	210b      	movs	r1, #11
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f000 f804 	bl	8015184 <icmp_send_response>
}
 801517c:	bf00      	nop
 801517e:	3708      	adds	r7, #8
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}

08015184 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b08c      	sub	sp, #48	; 0x30
 8015188:	af04      	add	r7, sp, #16
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	460b      	mov	r3, r1
 801518e:	70fb      	strb	r3, [r7, #3]
 8015190:	4613      	mov	r3, r2
 8015192:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015194:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015198:	2124      	movs	r1, #36	; 0x24
 801519a:	2022      	movs	r0, #34	; 0x22
 801519c:	f7f7 fc48 	bl	800ca30 <pbuf_alloc>
 80151a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80151a2:	69fb      	ldr	r3, [r7, #28]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d04c      	beq.n	8015242 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	895b      	ldrh	r3, [r3, #10]
 80151ac:	2b23      	cmp	r3, #35	; 0x23
 80151ae:	d806      	bhi.n	80151be <icmp_send_response+0x3a>
 80151b0:	4b26      	ldr	r3, [pc, #152]	; (801524c <icmp_send_response+0xc8>)
 80151b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80151b6:	4926      	ldr	r1, [pc, #152]	; (8015250 <icmp_send_response+0xcc>)
 80151b8:	4826      	ldr	r0, [pc, #152]	; (8015254 <icmp_send_response+0xd0>)
 80151ba:	f001 ff21 	bl	8017000 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	78fa      	ldrb	r2, [r7, #3]
 80151ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	78ba      	ldrb	r2, [r7, #2]
 80151d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	2200      	movs	r2, #0
 80151da:	711a      	strb	r2, [r3, #4]
 80151dc:	2200      	movs	r2, #0
 80151de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	2200      	movs	r2, #0
 80151e4:	719a      	strb	r2, [r3, #6]
 80151e6:	2200      	movs	r2, #0
 80151e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	f103 0008 	add.w	r0, r3, #8
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	221c      	movs	r2, #28
 80151f8:	4619      	mov	r1, r3
 80151fa:	f001 fe27 	bl	8016e4c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015204:	f107 030c 	add.w	r3, r7, #12
 8015208:	4618      	mov	r0, r3
 801520a:	f000 f825 	bl	8015258 <ip4_route>
 801520e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d011      	beq.n	801523a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2200      	movs	r2, #0
 801521a:	709a      	strb	r2, [r3, #2]
 801521c:	2200      	movs	r2, #0
 801521e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015220:	f107 020c 	add.w	r2, r7, #12
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	9302      	str	r3, [sp, #8]
 8015228:	2301      	movs	r3, #1
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	2300      	movs	r3, #0
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	23ff      	movs	r3, #255	; 0xff
 8015232:	2100      	movs	r1, #0
 8015234:	69f8      	ldr	r0, [r7, #28]
 8015236:	f000 f9cd 	bl	80155d4 <ip4_output_if>
  }
  pbuf_free(q);
 801523a:	69f8      	ldr	r0, [r7, #28]
 801523c:	f7f7 fee0 	bl	800d000 <pbuf_free>
 8015240:	e000      	b.n	8015244 <icmp_send_response+0xc0>
    return;
 8015242:	bf00      	nop
}
 8015244:	3720      	adds	r7, #32
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	0801b2a0 	.word	0x0801b2a0
 8015250:	0801b36c 	.word	0x0801b36c
 8015254:	0801b310 	.word	0x0801b310

08015258 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015258:	b480      	push	{r7}
 801525a:	b085      	sub	sp, #20
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015260:	4b33      	ldr	r3, [pc, #204]	; (8015330 <ip4_route+0xd8>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	60fb      	str	r3, [r7, #12]
 8015266:	e036      	b.n	80152d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801526e:	f003 0301 	and.w	r3, r3, #1
 8015272:	b2db      	uxtb	r3, r3
 8015274:	2b00      	cmp	r3, #0
 8015276:	d02b      	beq.n	80152d0 <ip4_route+0x78>
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801527e:	089b      	lsrs	r3, r3, #2
 8015280:	f003 0301 	and.w	r3, r3, #1
 8015284:	b2db      	uxtb	r3, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	d022      	beq.n	80152d0 <ip4_route+0x78>
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	3304      	adds	r3, #4
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d01d      	beq.n	80152d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	3304      	adds	r3, #4
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	405a      	eors	r2, r3
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	3308      	adds	r3, #8
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	4013      	ands	r3, r2
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d101      	bne.n	80152b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	e038      	b.n	8015322 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152b6:	f003 0302 	and.w	r3, r3, #2
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d108      	bne.n	80152d0 <ip4_route+0x78>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	330c      	adds	r3, #12
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d101      	bne.n	80152d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	e028      	b.n	8015322 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	60fb      	str	r3, [r7, #12]
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d1c5      	bne.n	8015268 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152dc:	4b15      	ldr	r3, [pc, #84]	; (8015334 <ip4_route+0xdc>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d01a      	beq.n	801531a <ip4_route+0xc2>
 80152e4:	4b13      	ldr	r3, [pc, #76]	; (8015334 <ip4_route+0xdc>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152ec:	f003 0301 	and.w	r3, r3, #1
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d012      	beq.n	801531a <ip4_route+0xc2>
 80152f4:	4b0f      	ldr	r3, [pc, #60]	; (8015334 <ip4_route+0xdc>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152fc:	f003 0304 	and.w	r3, r3, #4
 8015300:	2b00      	cmp	r3, #0
 8015302:	d00a      	beq.n	801531a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015304:	4b0b      	ldr	r3, [pc, #44]	; (8015334 <ip4_route+0xdc>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	3304      	adds	r3, #4
 801530a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801530c:	2b00      	cmp	r3, #0
 801530e:	d004      	beq.n	801531a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	b2db      	uxtb	r3, r3
 8015316:	2b7f      	cmp	r3, #127	; 0x7f
 8015318:	d101      	bne.n	801531e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801531a:	2300      	movs	r3, #0
 801531c:	e001      	b.n	8015322 <ip4_route+0xca>
  }

  return netif_default;
 801531e:	4b05      	ldr	r3, [pc, #20]	; (8015334 <ip4_route+0xdc>)
 8015320:	681b      	ldr	r3, [r3, #0]
}
 8015322:	4618      	mov	r0, r3
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	20025830 	.word	0x20025830
 8015334:	20025834 	.word	0x20025834

08015338 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015346:	f003 0301 	and.w	r3, r3, #1
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b00      	cmp	r3, #0
 801534e:	d016      	beq.n	801537e <ip4_input_accept+0x46>
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	3304      	adds	r3, #4
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d011      	beq.n	801537e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801535a:	4b0b      	ldr	r3, [pc, #44]	; (8015388 <ip4_input_accept+0x50>)
 801535c:	695a      	ldr	r2, [r3, #20]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	3304      	adds	r3, #4
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	429a      	cmp	r2, r3
 8015366:	d008      	beq.n	801537a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015368:	4b07      	ldr	r3, [pc, #28]	; (8015388 <ip4_input_accept+0x50>)
 801536a:	695b      	ldr	r3, [r3, #20]
 801536c:	6879      	ldr	r1, [r7, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	f000 fa08 	bl	8015784 <ip4_addr_isbroadcast_u32>
 8015374:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801537a:	2301      	movs	r3, #1
 801537c:	e000      	b.n	8015380 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	200088ec 	.word	0x200088ec

0801538c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b086      	sub	sp, #24
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	091b      	lsrs	r3, r3, #4
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	2b04      	cmp	r3, #4
 80153a6:	d004      	beq.n	80153b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f7f7 fe29 	bl	800d000 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80153ae:	2300      	movs	r3, #0
 80153b0:	e107      	b.n	80155c2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	f003 030f 	and.w	r3, r3, #15
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	885b      	ldrh	r3, [r3, #2]
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7f6 fa69 	bl	800b8a0 <lwip_htons>
 80153ce:	4603      	mov	r3, r0
 80153d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	891b      	ldrh	r3, [r3, #8]
 80153d6:	89ba      	ldrh	r2, [r7, #12]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d204      	bcs.n	80153e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80153dc:	89bb      	ldrh	r3, [r7, #12]
 80153de:	4619      	mov	r1, r3
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7f7 fc87 	bl	800ccf4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	895b      	ldrh	r3, [r3, #10]
 80153ea:	89fa      	ldrh	r2, [r7, #14]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d807      	bhi.n	8015400 <ip4_input+0x74>
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	891b      	ldrh	r3, [r3, #8]
 80153f4:	89ba      	ldrh	r2, [r7, #12]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d802      	bhi.n	8015400 <ip4_input+0x74>
 80153fa:	89fb      	ldrh	r3, [r7, #14]
 80153fc:	2b13      	cmp	r3, #19
 80153fe:	d804      	bhi.n	801540a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7f7 fdfd 	bl	800d000 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015406:	2300      	movs	r3, #0
 8015408:	e0db      	b.n	80155c2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	691b      	ldr	r3, [r3, #16]
 801540e:	4a6f      	ldr	r2, [pc, #444]	; (80155cc <ip4_input+0x240>)
 8015410:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	68db      	ldr	r3, [r3, #12]
 8015416:	4a6d      	ldr	r2, [pc, #436]	; (80155cc <ip4_input+0x240>)
 8015418:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801541a:	4b6c      	ldr	r3, [pc, #432]	; (80155cc <ip4_input+0x240>)
 801541c:	695b      	ldr	r3, [r3, #20]
 801541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015422:	2be0      	cmp	r3, #224	; 0xe0
 8015424:	d112      	bne.n	801544c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801542c:	f003 0301 	and.w	r3, r3, #1
 8015430:	b2db      	uxtb	r3, r3
 8015432:	2b00      	cmp	r3, #0
 8015434:	d007      	beq.n	8015446 <ip4_input+0xba>
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	3304      	adds	r3, #4
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d002      	beq.n	8015446 <ip4_input+0xba>
      netif = inp;
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	613b      	str	r3, [r7, #16]
 8015444:	e02a      	b.n	801549c <ip4_input+0x110>
    } else {
      netif = NULL;
 8015446:	2300      	movs	r3, #0
 8015448:	613b      	str	r3, [r7, #16]
 801544a:	e027      	b.n	801549c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801544c:	6838      	ldr	r0, [r7, #0]
 801544e:	f7ff ff73 	bl	8015338 <ip4_input_accept>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d002      	beq.n	801545e <ip4_input+0xd2>
      netif = inp;
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	613b      	str	r3, [r7, #16]
 801545c:	e01e      	b.n	801549c <ip4_input+0x110>
    } else {
      netif = NULL;
 801545e:	2300      	movs	r3, #0
 8015460:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015462:	4b5a      	ldr	r3, [pc, #360]	; (80155cc <ip4_input+0x240>)
 8015464:	695b      	ldr	r3, [r3, #20]
 8015466:	b2db      	uxtb	r3, r3
 8015468:	2b7f      	cmp	r3, #127	; 0x7f
 801546a:	d017      	beq.n	801549c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801546c:	4b58      	ldr	r3, [pc, #352]	; (80155d0 <ip4_input+0x244>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	613b      	str	r3, [r7, #16]
 8015472:	e00e      	b.n	8015492 <ip4_input+0x106>
          if (netif == inp) {
 8015474:	693a      	ldr	r2, [r7, #16]
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	429a      	cmp	r2, r3
 801547a:	d006      	beq.n	801548a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801547c:	6938      	ldr	r0, [r7, #16]
 801547e:	f7ff ff5b 	bl	8015338 <ip4_input_accept>
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d108      	bne.n	801549a <ip4_input+0x10e>
 8015488:	e000      	b.n	801548c <ip4_input+0x100>
            continue;
 801548a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	613b      	str	r3, [r7, #16]
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1ed      	bne.n	8015474 <ip4_input+0xe8>
 8015498:	e000      	b.n	801549c <ip4_input+0x110>
            break;
 801549a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801549c:	4b4b      	ldr	r3, [pc, #300]	; (80155cc <ip4_input+0x240>)
 801549e:	691b      	ldr	r3, [r3, #16]
 80154a0:	6839      	ldr	r1, [r7, #0]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f000 f96e 	bl	8015784 <ip4_addr_isbroadcast_u32>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d105      	bne.n	80154ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80154ae:	4b47      	ldr	r3, [pc, #284]	; (80155cc <ip4_input+0x240>)
 80154b0:	691b      	ldr	r3, [r3, #16]
 80154b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80154b6:	2be0      	cmp	r3, #224	; 0xe0
 80154b8:	d104      	bne.n	80154c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7f7 fda0 	bl	800d000 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80154c0:	2300      	movs	r3, #0
 80154c2:	e07e      	b.n	80155c2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d104      	bne.n	80154d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f7f7 fd98 	bl	800d000 <pbuf_free>
    return ERR_OK;
 80154d0:	2300      	movs	r3, #0
 80154d2:	e076      	b.n	80155c2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	88db      	ldrh	r3, [r3, #6]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	461a      	mov	r2, r3
 80154dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80154e0:	4013      	ands	r3, r2
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00b      	beq.n	80154fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 fdbc 	bl	8016064 <ip4_reass>
 80154ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d101      	bne.n	80154f8 <ip4_input+0x16c>
      return ERR_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	e064      	b.n	80155c2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80154fe:	4a33      	ldr	r2, [pc, #204]	; (80155cc <ip4_input+0x240>)
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015504:	4a31      	ldr	r2, [pc, #196]	; (80155cc <ip4_input+0x240>)
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801550a:	4a30      	ldr	r2, [pc, #192]	; (80155cc <ip4_input+0x240>)
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	f003 030f 	and.w	r3, r3, #15
 8015518:	b2db      	uxtb	r3, r3
 801551a:	009b      	lsls	r3, r3, #2
 801551c:	b2db      	uxtb	r3, r3
 801551e:	b29a      	uxth	r2, r3
 8015520:	4b2a      	ldr	r3, [pc, #168]	; (80155cc <ip4_input+0x240>)
 8015522:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015524:	89fb      	ldrh	r3, [r7, #14]
 8015526:	4619      	mov	r1, r3
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7f7 fce3 	bl	800cef4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	7a5b      	ldrb	r3, [r3, #9]
 8015532:	2b11      	cmp	r3, #17
 8015534:	d006      	beq.n	8015544 <ip4_input+0x1b8>
 8015536:	2b11      	cmp	r3, #17
 8015538:	dc13      	bgt.n	8015562 <ip4_input+0x1d6>
 801553a:	2b01      	cmp	r3, #1
 801553c:	d00c      	beq.n	8015558 <ip4_input+0x1cc>
 801553e:	2b06      	cmp	r3, #6
 8015540:	d005      	beq.n	801554e <ip4_input+0x1c2>
 8015542:	e00e      	b.n	8015562 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015544:	6839      	ldr	r1, [r7, #0]
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7fe faec 	bl	8013b24 <udp_input>
        break;
 801554c:	e026      	b.n	801559c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801554e:	6839      	ldr	r1, [r7, #0]
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f7f9 fea9 	bl	800f2a8 <tcp_input>
        break;
 8015556:	e021      	b.n	801559c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015558:	6839      	ldr	r1, [r7, #0]
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff fcee 	bl	8014f3c <icmp_input>
        break;
 8015560:	e01c      	b.n	801559c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015562:	4b1a      	ldr	r3, [pc, #104]	; (80155cc <ip4_input+0x240>)
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	6939      	ldr	r1, [r7, #16]
 8015568:	4618      	mov	r0, r3
 801556a:	f000 f90b 	bl	8015784 <ip4_addr_isbroadcast_u32>
 801556e:	4603      	mov	r3, r0
 8015570:	2b00      	cmp	r3, #0
 8015572:	d10f      	bne.n	8015594 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015574:	4b15      	ldr	r3, [pc, #84]	; (80155cc <ip4_input+0x240>)
 8015576:	695b      	ldr	r3, [r3, #20]
 8015578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801557c:	2be0      	cmp	r3, #224	; 0xe0
 801557e:	d009      	beq.n	8015594 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015584:	4619      	mov	r1, r3
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7f7 fd27 	bl	800cfda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801558c:	2102      	movs	r1, #2
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f7ff fdd8 	bl	8015144 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f7f7 fd33 	bl	800d000 <pbuf_free>
        break;
 801559a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801559c:	4b0b      	ldr	r3, [pc, #44]	; (80155cc <ip4_input+0x240>)
 801559e:	2200      	movs	r2, #0
 80155a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80155a2:	4b0a      	ldr	r3, [pc, #40]	; (80155cc <ip4_input+0x240>)
 80155a4:	2200      	movs	r2, #0
 80155a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80155a8:	4b08      	ldr	r3, [pc, #32]	; (80155cc <ip4_input+0x240>)
 80155aa:	2200      	movs	r2, #0
 80155ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80155ae:	4b07      	ldr	r3, [pc, #28]	; (80155cc <ip4_input+0x240>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80155b4:	4b05      	ldr	r3, [pc, #20]	; (80155cc <ip4_input+0x240>)
 80155b6:	2200      	movs	r2, #0
 80155b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80155ba:	4b04      	ldr	r3, [pc, #16]	; (80155cc <ip4_input+0x240>)
 80155bc:	2200      	movs	r2, #0
 80155be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3718      	adds	r7, #24
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	200088ec 	.word	0x200088ec
 80155d0:	20025830 	.word	0x20025830

080155d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b08a      	sub	sp, #40	; 0x28
 80155d8:	af04      	add	r7, sp, #16
 80155da:	60f8      	str	r0, [r7, #12]
 80155dc:	60b9      	str	r1, [r7, #8]
 80155de:	607a      	str	r2, [r7, #4]
 80155e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d009      	beq.n	8015600 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d003      	beq.n	80155fa <ip4_output_if+0x26>
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d102      	bne.n	8015600 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80155fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fc:	3304      	adds	r3, #4
 80155fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015600:	78fa      	ldrb	r2, [r7, #3]
 8015602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015604:	9302      	str	r3, [sp, #8]
 8015606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801560a:	9301      	str	r3, [sp, #4]
 801560c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	4613      	mov	r3, r2
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	6979      	ldr	r1, [r7, #20]
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f000 f805 	bl	8015628 <ip4_output_if_src>
 801561e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015620:	4618      	mov	r0, r3
 8015622:	3718      	adds	r7, #24
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b088      	sub	sp, #32
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	7b9b      	ldrb	r3, [r3, #14]
 801563a:	2b01      	cmp	r3, #1
 801563c:	d006      	beq.n	801564c <ip4_output_if_src+0x24>
 801563e:	4b4b      	ldr	r3, [pc, #300]	; (801576c <ip4_output_if_src+0x144>)
 8015640:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015644:	494a      	ldr	r1, [pc, #296]	; (8015770 <ip4_output_if_src+0x148>)
 8015646:	484b      	ldr	r0, [pc, #300]	; (8015774 <ip4_output_if_src+0x14c>)
 8015648:	f001 fcda 	bl	8017000 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d060      	beq.n	8015714 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015652:	2314      	movs	r3, #20
 8015654:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015656:	2114      	movs	r1, #20
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7f7 fc3b 	bl	800ced4 <pbuf_add_header>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d002      	beq.n	801566a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015664:	f06f 0301 	mvn.w	r3, #1
 8015668:	e07c      	b.n	8015764 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	895b      	ldrh	r3, [r3, #10]
 8015674:	2b13      	cmp	r3, #19
 8015676:	d806      	bhi.n	8015686 <ip4_output_if_src+0x5e>
 8015678:	4b3c      	ldr	r3, [pc, #240]	; (801576c <ip4_output_if_src+0x144>)
 801567a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801567e:	493e      	ldr	r1, [pc, #248]	; (8015778 <ip4_output_if_src+0x150>)
 8015680:	483c      	ldr	r0, [pc, #240]	; (8015774 <ip4_output_if_src+0x14c>)
 8015682:	f001 fcbd 	bl	8017000 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	78fa      	ldrb	r2, [r7, #3]
 801568a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015692:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801569c:	8b7b      	ldrh	r3, [r7, #26]
 801569e:	089b      	lsrs	r3, r3, #2
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80156b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	891b      	ldrh	r3, [r3, #8]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7f6 f8f0 	bl	800b8a0 <lwip_htons>
 80156c0:	4603      	mov	r3, r0
 80156c2:	461a      	mov	r2, r3
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	2200      	movs	r2, #0
 80156cc:	719a      	strb	r2, [r3, #6]
 80156ce:	2200      	movs	r2, #0
 80156d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80156d2:	4b2a      	ldr	r3, [pc, #168]	; (801577c <ip4_output_if_src+0x154>)
 80156d4:	881b      	ldrh	r3, [r3, #0]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7f6 f8e2 	bl	800b8a0 <lwip_htons>
 80156dc:	4603      	mov	r3, r0
 80156de:	461a      	mov	r2, r3
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80156e4:	4b25      	ldr	r3, [pc, #148]	; (801577c <ip4_output_if_src+0x154>)
 80156e6:	881b      	ldrh	r3, [r3, #0]
 80156e8:	3301      	adds	r3, #1
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	4b23      	ldr	r3, [pc, #140]	; (801577c <ip4_output_if_src+0x154>)
 80156ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d104      	bne.n	8015700 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80156f6:	4b22      	ldr	r3, [pc, #136]	; (8015780 <ip4_output_if_src+0x158>)
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	60da      	str	r2, [r3, #12]
 80156fe:	e003      	b.n	8015708 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	681a      	ldr	r2, [r3, #0]
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	2200      	movs	r2, #0
 801570c:	729a      	strb	r2, [r3, #10]
 801570e:	2200      	movs	r2, #0
 8015710:	72da      	strb	r2, [r3, #11]
 8015712:	e00f      	b.n	8015734 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	895b      	ldrh	r3, [r3, #10]
 8015718:	2b13      	cmp	r3, #19
 801571a:	d802      	bhi.n	8015722 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801571c:	f06f 0301 	mvn.w	r3, #1
 8015720:	e020      	b.n	8015764 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	691b      	ldr	r3, [r3, #16]
 801572c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801572e:	f107 0314 	add.w	r3, r7, #20
 8015732:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015738:	2b00      	cmp	r3, #0
 801573a:	d00c      	beq.n	8015756 <ip4_output_if_src+0x12e>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	891a      	ldrh	r2, [r3, #8]
 8015740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015744:	429a      	cmp	r2, r3
 8015746:	d906      	bls.n	8015756 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f000 fe77 	bl	8016440 <ip4_frag>
 8015752:	4603      	mov	r3, r0
 8015754:	e006      	b.n	8015764 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015758:	695b      	ldr	r3, [r3, #20]
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	68f9      	ldr	r1, [r7, #12]
 801575e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015760:	4798      	blx	r3
 8015762:	4603      	mov	r3, r0
}
 8015764:	4618      	mov	r0, r3
 8015766:	3720      	adds	r7, #32
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	0801b398 	.word	0x0801b398
 8015770:	0801b3cc 	.word	0x0801b3cc
 8015774:	0801b3d8 	.word	0x0801b3d8
 8015778:	0801b400 	.word	0x0801b400
 801577c:	20004c0e 	.word	0x20004c0e
 8015780:	0801b8e4 	.word	0x0801b8e4

08015784 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015784:	b480      	push	{r7}
 8015786:	b085      	sub	sp, #20
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015798:	d002      	beq.n	80157a0 <ip4_addr_isbroadcast_u32+0x1c>
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80157a0:	2301      	movs	r3, #1
 80157a2:	e02a      	b.n	80157fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80157aa:	f003 0302 	and.w	r3, r3, #2
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d101      	bne.n	80157b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80157b2:	2300      	movs	r3, #0
 80157b4:	e021      	b.n	80157fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	3304      	adds	r3, #4
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d101      	bne.n	80157c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80157c2:	2300      	movs	r3, #0
 80157c4:	e019      	b.n	80157fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80157c6:	68fa      	ldr	r2, [r7, #12]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	3304      	adds	r3, #4
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	405a      	eors	r2, r3
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	3308      	adds	r3, #8
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	4013      	ands	r3, r2
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d10d      	bne.n	80157f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	3308      	adds	r3, #8
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	43da      	mvns	r2, r3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	3308      	adds	r3, #8
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d101      	bne.n	80157f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80157f4:	2301      	movs	r3, #1
 80157f6:	e000      	b.n	80157fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80157f8:	2300      	movs	r3, #0
  }
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3714      	adds	r7, #20
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr
	...

08015808 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b08a      	sub	sp, #40	; 0x28
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8015812:	f107 030c 	add.w	r3, r7, #12
 8015816:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8015820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015824:	3301      	adds	r3, #1
 8015826:	4a89      	ldr	r2, [pc, #548]	; (8015a4c <ip4addr_aton+0x244>)
 8015828:	4413      	add	r3, r2
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	f003 0304 	and.w	r3, r3, #4
 8015830:	2b00      	cmp	r3, #0
 8015832:	d101      	bne.n	8015838 <ip4addr_aton+0x30>
      return 0;
 8015834:	2300      	movs	r3, #0
 8015836:	e105      	b.n	8015a44 <ip4addr_aton+0x23c>
    }
    val = 0;
 8015838:	2300      	movs	r3, #0
 801583a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801583c:	230a      	movs	r3, #10
 801583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8015842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015846:	2b30      	cmp	r3, #48	; 0x30
 8015848:	d11c      	bne.n	8015884 <ip4addr_aton+0x7c>
      c = *++cp;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	3301      	adds	r3, #1
 801584e:	607b      	str	r3, [r7, #4]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8015858:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801585c:	2b78      	cmp	r3, #120	; 0x78
 801585e:	d003      	beq.n	8015868 <ip4addr_aton+0x60>
 8015860:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015864:	2b58      	cmp	r3, #88	; 0x58
 8015866:	d10a      	bne.n	801587e <ip4addr_aton+0x76>
        base = 16;
 8015868:	2310      	movs	r3, #16
 801586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	3301      	adds	r3, #1
 8015872:	607b      	str	r3, [r7, #4]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	781b      	ldrb	r3, [r3, #0]
 8015878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801587c:	e002      	b.n	8015884 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801587e:	2308      	movs	r3, #8
 8015880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8015884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015888:	3301      	adds	r3, #1
 801588a:	4a70      	ldr	r2, [pc, #448]	; (8015a4c <ip4addr_aton+0x244>)
 801588c:	4413      	add	r3, r2
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	f003 0304 	and.w	r3, r3, #4
 8015894:	2b00      	cmp	r3, #0
 8015896:	d011      	beq.n	80158bc <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8015898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801589c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801589e:	fb02 f203 	mul.w	r2, r2, r3
 80158a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80158a6:	4413      	add	r3, r2
 80158a8:	3b30      	subs	r3, #48	; 0x30
 80158aa:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3301      	adds	r3, #1
 80158b0:	607b      	str	r3, [r7, #4]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80158ba:	e7e3      	b.n	8015884 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80158bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158c0:	2b10      	cmp	r3, #16
 80158c2:	d127      	bne.n	8015914 <ip4addr_aton+0x10c>
 80158c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80158c8:	3301      	adds	r3, #1
 80158ca:	4a60      	ldr	r2, [pc, #384]	; (8015a4c <ip4addr_aton+0x244>)
 80158cc:	4413      	add	r3, r2
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d01d      	beq.n	8015914 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80158d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158da:	011b      	lsls	r3, r3, #4
 80158dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80158e0:	f102 010a 	add.w	r1, r2, #10
 80158e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80158e8:	3201      	adds	r2, #1
 80158ea:	4858      	ldr	r0, [pc, #352]	; (8015a4c <ip4addr_aton+0x244>)
 80158ec:	4402      	add	r2, r0
 80158ee:	7812      	ldrb	r2, [r2, #0]
 80158f0:	f002 0203 	and.w	r2, r2, #3
 80158f4:	2a02      	cmp	r2, #2
 80158f6:	d101      	bne.n	80158fc <ip4addr_aton+0xf4>
 80158f8:	2261      	movs	r2, #97	; 0x61
 80158fa:	e000      	b.n	80158fe <ip4addr_aton+0xf6>
 80158fc:	2241      	movs	r2, #65	; 0x41
 80158fe:	1a8a      	subs	r2, r1, r2
 8015900:	4313      	orrs	r3, r2
 8015902:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	3301      	adds	r3, #1
 8015908:	607b      	str	r3, [r7, #4]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8015912:	e7b7      	b.n	8015884 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015914:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015918:	2b2e      	cmp	r3, #46	; 0x2e
 801591a:	d114      	bne.n	8015946 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801591c:	f107 030c 	add.w	r3, r7, #12
 8015920:	330c      	adds	r3, #12
 8015922:	69fa      	ldr	r2, [r7, #28]
 8015924:	429a      	cmp	r2, r3
 8015926:	d301      	bcc.n	801592c <ip4addr_aton+0x124>
        return 0;
 8015928:	2300      	movs	r3, #0
 801592a:	e08b      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	1d1a      	adds	r2, r3, #4
 8015930:	61fa      	str	r2, [r7, #28]
 8015932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015934:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	3301      	adds	r3, #1
 801593a:	607b      	str	r3, [r7, #4]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8015944:	e76c      	b.n	8015820 <ip4addr_aton+0x18>
    } else {
      break;
 8015946:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8015948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801594c:	2b00      	cmp	r3, #0
 801594e:	d00b      	beq.n	8015968 <ip4addr_aton+0x160>
 8015950:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015954:	3301      	adds	r3, #1
 8015956:	4a3d      	ldr	r2, [pc, #244]	; (8015a4c <ip4addr_aton+0x244>)
 8015958:	4413      	add	r3, r2
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	f003 0308 	and.w	r3, r3, #8
 8015960:	2b00      	cmp	r3, #0
 8015962:	d101      	bne.n	8015968 <ip4addr_aton+0x160>
    return 0;
 8015964:	2300      	movs	r3, #0
 8015966:	e06d      	b.n	8015a44 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015968:	f107 030c 	add.w	r3, r7, #12
 801596c:	69fa      	ldr	r2, [r7, #28]
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	109b      	asrs	r3, r3, #2
 8015972:	3301      	adds	r3, #1
 8015974:	2b04      	cmp	r3, #4
 8015976:	d853      	bhi.n	8015a20 <ip4addr_aton+0x218>
 8015978:	a201      	add	r2, pc, #4	; (adr r2, 8015980 <ip4addr_aton+0x178>)
 801597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801597e:	bf00      	nop
 8015980:	08015995 	.word	0x08015995
 8015984:	08015a2f 	.word	0x08015a2f
 8015988:	08015999 	.word	0x08015999
 801598c:	080159bb 	.word	0x080159bb
 8015990:	080159e9 	.word	0x080159e9

    case 0:
      return 0;       /* initial nondigit */
 8015994:	2300      	movs	r3, #0
 8015996:	e055      	b.n	8015a44 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801599e:	d301      	bcc.n	80159a4 <ip4addr_aton+0x19c>
        return 0;
 80159a0:	2300      	movs	r3, #0
 80159a2:	e04f      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2bff      	cmp	r3, #255	; 0xff
 80159a8:	d901      	bls.n	80159ae <ip4addr_aton+0x1a6>
        return 0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	e04a      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	061b      	lsls	r3, r3, #24
 80159b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159b4:	4313      	orrs	r3, r2
 80159b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80159b8:	e03a      	b.n	8015a30 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80159ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159c0:	d301      	bcc.n	80159c6 <ip4addr_aton+0x1be>
        return 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	e03e      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2bff      	cmp	r3, #255	; 0xff
 80159ca:	d802      	bhi.n	80159d2 <ip4addr_aton+0x1ca>
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	2bff      	cmp	r3, #255	; 0xff
 80159d0:	d901      	bls.n	80159d6 <ip4addr_aton+0x1ce>
        return 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	e036      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	061a      	lsls	r2, r3, #24
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	041b      	lsls	r3, r3, #16
 80159de:	4313      	orrs	r3, r2
 80159e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159e2:	4313      	orrs	r3, r2
 80159e4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80159e6:	e023      	b.n	8015a30 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80159e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ea:	2bff      	cmp	r3, #255	; 0xff
 80159ec:	d901      	bls.n	80159f2 <ip4addr_aton+0x1ea>
        return 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	e028      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2bff      	cmp	r3, #255	; 0xff
 80159f6:	d805      	bhi.n	8015a04 <ip4addr_aton+0x1fc>
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	2bff      	cmp	r3, #255	; 0xff
 80159fc:	d802      	bhi.n	8015a04 <ip4addr_aton+0x1fc>
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	2bff      	cmp	r3, #255	; 0xff
 8015a02:	d901      	bls.n	8015a08 <ip4addr_aton+0x200>
        return 0;
 8015a04:	2300      	movs	r3, #0
 8015a06:	e01d      	b.n	8015a44 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	061a      	lsls	r2, r3, #24
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	041b      	lsls	r3, r3, #16
 8015a10:	431a      	orrs	r2, r3
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	021b      	lsls	r3, r3, #8
 8015a16:	4313      	orrs	r3, r2
 8015a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a1a:	4313      	orrs	r3, r2
 8015a1c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015a1e:	e007      	b.n	8015a30 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015a20:	4b0b      	ldr	r3, [pc, #44]	; (8015a50 <ip4addr_aton+0x248>)
 8015a22:	22f9      	movs	r2, #249	; 0xf9
 8015a24:	490b      	ldr	r1, [pc, #44]	; (8015a54 <ip4addr_aton+0x24c>)
 8015a26:	480c      	ldr	r0, [pc, #48]	; (8015a58 <ip4addr_aton+0x250>)
 8015a28:	f001 faea 	bl	8017000 <iprintf>
      break;
 8015a2c:	e000      	b.n	8015a30 <ip4addr_aton+0x228>
      break;
 8015a2e:	bf00      	nop
  }
  if (addr) {
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d005      	beq.n	8015a42 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a38:	f7f5 ff47 	bl	800b8ca <lwip_htonl>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015a42:	2301      	movs	r3, #1
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3728      	adds	r7, #40	; 0x28
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	0801b8f6 	.word	0x0801b8f6
 8015a50:	0801b430 	.word	0x0801b430
 8015a54:	0801b46c 	.word	0x0801b46c
 8015a58:	0801b478 	.word	0x0801b478

08015a5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015a62:	2300      	movs	r3, #0
 8015a64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015a66:	4b12      	ldr	r3, [pc, #72]	; (8015ab0 <ip_reass_tmr+0x54>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015a6c:	e018      	b.n	8015aa0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	7fdb      	ldrb	r3, [r3, #31]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00b      	beq.n	8015a8e <ip_reass_tmr+0x32>
      r->timer--;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	7fdb      	ldrb	r3, [r3, #31]
 8015a7a:	3b01      	subs	r3, #1
 8015a7c:	b2da      	uxtb	r2, r3
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	60fb      	str	r3, [r7, #12]
 8015a8c:	e008      	b.n	8015aa0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015a98:	68b9      	ldr	r1, [r7, #8]
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f000 f80a 	bl	8015ab4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d1e3      	bne.n	8015a6e <ip_reass_tmr+0x12>
    }
  }
}
 8015aa6:	bf00      	nop
 8015aa8:	bf00      	nop
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	20004c10 	.word	0x20004c10

08015ab4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b088      	sub	sp, #32
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ac2:	683a      	ldr	r2, [r7, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d105      	bne.n	8015ad6 <ip_reass_free_complete_datagram+0x22>
 8015aca:	4b45      	ldr	r3, [pc, #276]	; (8015be0 <ip_reass_free_complete_datagram+0x12c>)
 8015acc:	22ab      	movs	r2, #171	; 0xab
 8015ace:	4945      	ldr	r1, [pc, #276]	; (8015be4 <ip_reass_free_complete_datagram+0x130>)
 8015ad0:	4845      	ldr	r0, [pc, #276]	; (8015be8 <ip_reass_free_complete_datagram+0x134>)
 8015ad2:	f001 fa95 	bl	8017000 <iprintf>
  if (prev != NULL) {
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d00a      	beq.n	8015af2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d005      	beq.n	8015af2 <ip_reass_free_complete_datagram+0x3e>
 8015ae6:	4b3e      	ldr	r3, [pc, #248]	; (8015be0 <ip_reass_free_complete_datagram+0x12c>)
 8015ae8:	22ad      	movs	r2, #173	; 0xad
 8015aea:	4940      	ldr	r1, [pc, #256]	; (8015bec <ip_reass_free_complete_datagram+0x138>)
 8015aec:	483e      	ldr	r0, [pc, #248]	; (8015be8 <ip_reass_free_complete_datagram+0x134>)
 8015aee:	f001 fa87 	bl	8017000 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	889b      	ldrh	r3, [r3, #4]
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d12a      	bne.n	8015b5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	6858      	ldr	r0, [r3, #4]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	3308      	adds	r3, #8
 8015b1a:	2214      	movs	r2, #20
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	f001 f995 	bl	8016e4c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015b22:	2101      	movs	r1, #1
 8015b24:	69b8      	ldr	r0, [r7, #24]
 8015b26:	f7ff fb1d 	bl	8015164 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015b2a:	69b8      	ldr	r0, [r7, #24]
 8015b2c:	f7f7 faf6 	bl	800d11c <pbuf_clen>
 8015b30:	4603      	mov	r3, r0
 8015b32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b34:	8bfa      	ldrh	r2, [r7, #30]
 8015b36:	8a7b      	ldrh	r3, [r7, #18]
 8015b38:	4413      	add	r3, r2
 8015b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b3e:	db05      	blt.n	8015b4c <ip_reass_free_complete_datagram+0x98>
 8015b40:	4b27      	ldr	r3, [pc, #156]	; (8015be0 <ip_reass_free_complete_datagram+0x12c>)
 8015b42:	22bc      	movs	r2, #188	; 0xbc
 8015b44:	492a      	ldr	r1, [pc, #168]	; (8015bf0 <ip_reass_free_complete_datagram+0x13c>)
 8015b46:	4828      	ldr	r0, [pc, #160]	; (8015be8 <ip_reass_free_complete_datagram+0x134>)
 8015b48:	f001 fa5a 	bl	8017000 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b4c:	8bfa      	ldrh	r2, [r7, #30]
 8015b4e:	8a7b      	ldrh	r3, [r7, #18]
 8015b50:	4413      	add	r3, r2
 8015b52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015b54:	69b8      	ldr	r0, [r7, #24]
 8015b56:	f7f7 fa53 	bl	800d000 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015b60:	e01f      	b.n	8015ba2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015b68:	69bb      	ldr	r3, [r7, #24]
 8015b6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7f7 fad2 	bl	800d11c <pbuf_clen>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b7c:	8bfa      	ldrh	r2, [r7, #30]
 8015b7e:	8a7b      	ldrh	r3, [r7, #18]
 8015b80:	4413      	add	r3, r2
 8015b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b86:	db05      	blt.n	8015b94 <ip_reass_free_complete_datagram+0xe0>
 8015b88:	4b15      	ldr	r3, [pc, #84]	; (8015be0 <ip_reass_free_complete_datagram+0x12c>)
 8015b8a:	22cc      	movs	r2, #204	; 0xcc
 8015b8c:	4918      	ldr	r1, [pc, #96]	; (8015bf0 <ip_reass_free_complete_datagram+0x13c>)
 8015b8e:	4816      	ldr	r0, [pc, #88]	; (8015be8 <ip_reass_free_complete_datagram+0x134>)
 8015b90:	f001 fa36 	bl	8017000 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b94:	8bfa      	ldrh	r2, [r7, #30]
 8015b96:	8a7b      	ldrh	r3, [r7, #18]
 8015b98:	4413      	add	r3, r2
 8015b9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f7f7 fa2f 	bl	800d000 <pbuf_free>
  while (p != NULL) {
 8015ba2:	69bb      	ldr	r3, [r7, #24]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d1dc      	bne.n	8015b62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015ba8:	6839      	ldr	r1, [r7, #0]
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f000 f8c2 	bl	8015d34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015bb0:	4b10      	ldr	r3, [pc, #64]	; (8015bf4 <ip_reass_free_complete_datagram+0x140>)
 8015bb2:	881b      	ldrh	r3, [r3, #0]
 8015bb4:	8bfa      	ldrh	r2, [r7, #30]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d905      	bls.n	8015bc6 <ip_reass_free_complete_datagram+0x112>
 8015bba:	4b09      	ldr	r3, [pc, #36]	; (8015be0 <ip_reass_free_complete_datagram+0x12c>)
 8015bbc:	22d2      	movs	r2, #210	; 0xd2
 8015bbe:	490e      	ldr	r1, [pc, #56]	; (8015bf8 <ip_reass_free_complete_datagram+0x144>)
 8015bc0:	4809      	ldr	r0, [pc, #36]	; (8015be8 <ip_reass_free_complete_datagram+0x134>)
 8015bc2:	f001 fa1d 	bl	8017000 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015bc6:	4b0b      	ldr	r3, [pc, #44]	; (8015bf4 <ip_reass_free_complete_datagram+0x140>)
 8015bc8:	881a      	ldrh	r2, [r3, #0]
 8015bca:	8bfb      	ldrh	r3, [r7, #30]
 8015bcc:	1ad3      	subs	r3, r2, r3
 8015bce:	b29a      	uxth	r2, r3
 8015bd0:	4b08      	ldr	r3, [pc, #32]	; (8015bf4 <ip_reass_free_complete_datagram+0x140>)
 8015bd2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015bd4:	8bfb      	ldrh	r3, [r7, #30]
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3720      	adds	r7, #32
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	0801b4a0 	.word	0x0801b4a0
 8015be4:	0801b4dc 	.word	0x0801b4dc
 8015be8:	0801b4e8 	.word	0x0801b4e8
 8015bec:	0801b510 	.word	0x0801b510
 8015bf0:	0801b524 	.word	0x0801b524
 8015bf4:	20004c14 	.word	0x20004c14
 8015bf8:	0801b544 	.word	0x0801b544

08015bfc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b08a      	sub	sp, #40	; 0x28
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015c06:	2300      	movs	r3, #0
 8015c08:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015c12:	2300      	movs	r3, #0
 8015c14:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015c16:	2300      	movs	r3, #0
 8015c18:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015c1a:	4b28      	ldr	r3, [pc, #160]	; (8015cbc <ip_reass_remove_oldest_datagram+0xc0>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c20:	e030      	b.n	8015c84 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	695a      	ldr	r2, [r3, #20]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d10c      	bne.n	8015c48 <ip_reass_remove_oldest_datagram+0x4c>
 8015c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c30:	699a      	ldr	r2, [r3, #24]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	691b      	ldr	r3, [r3, #16]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d106      	bne.n	8015c48 <ip_reass_remove_oldest_datagram+0x4c>
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3c:	899a      	ldrh	r2, [r3, #12]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	889b      	ldrh	r3, [r3, #4]
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d014      	beq.n	8015c72 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015c4e:	6a3b      	ldr	r3, [r7, #32]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d104      	bne.n	8015c5e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c56:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	61bb      	str	r3, [r7, #24]
 8015c5c:	e009      	b.n	8015c72 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	7fda      	ldrb	r2, [r3, #31]
 8015c62:	6a3b      	ldr	r3, [r7, #32]
 8015c64:	7fdb      	ldrb	r3, [r3, #31]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d803      	bhi.n	8015c72 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c6e:	69fb      	ldr	r3, [r7, #28]
 8015c70:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d001      	beq.n	8015c7e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d1cb      	bne.n	8015c22 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015c8a:	6a3b      	ldr	r3, [r7, #32]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d008      	beq.n	8015ca2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015c90:	69b9      	ldr	r1, [r7, #24]
 8015c92:	6a38      	ldr	r0, [r7, #32]
 8015c94:	f7ff ff0e 	bl	8015ab4 <ip_reass_free_complete_datagram>
 8015c98:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015c9a:	697a      	ldr	r2, [r7, #20]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	4413      	add	r3, r2
 8015ca0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ca2:	697a      	ldr	r2, [r7, #20]
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	da02      	bge.n	8015cb0 <ip_reass_remove_oldest_datagram+0xb4>
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	dcac      	bgt.n	8015c0a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015cb0:	697b      	ldr	r3, [r7, #20]
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3728      	adds	r7, #40	; 0x28
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	20004c10 	.word	0x20004c10

08015cc0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015cca:	2004      	movs	r0, #4
 8015ccc:	f7f6 fa9e 	bl	800c20c <memp_malloc>
 8015cd0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d110      	bne.n	8015cfa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f7ff ff8e 	bl	8015bfc <ip_reass_remove_oldest_datagram>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	dc03      	bgt.n	8015cf0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ce8:	2004      	movs	r0, #4
 8015cea:	f7f6 fa8f 	bl	800c20c <memp_malloc>
 8015cee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d101      	bne.n	8015cfa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	e016      	b.n	8015d28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015cfa:	2220      	movs	r2, #32
 8015cfc:	2100      	movs	r1, #0
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f001 f8cc 	bl	8016e9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	220f      	movs	r2, #15
 8015d08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015d0a:	4b09      	ldr	r3, [pc, #36]	; (8015d30 <ip_reass_enqueue_new_datagram+0x70>)
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015d12:	4a07      	ldr	r2, [pc, #28]	; (8015d30 <ip_reass_enqueue_new_datagram+0x70>)
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	3308      	adds	r3, #8
 8015d1c:	2214      	movs	r2, #20
 8015d1e:	6879      	ldr	r1, [r7, #4]
 8015d20:	4618      	mov	r0, r3
 8015d22:	f001 f893 	bl	8016e4c <memcpy>
  return ipr;
 8015d26:	68fb      	ldr	r3, [r7, #12]
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3710      	adds	r7, #16
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}
 8015d30:	20004c10 	.word	0x20004c10

08015d34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015d3e:	4b10      	ldr	r3, [pc, #64]	; (8015d80 <ip_reass_dequeue_datagram+0x4c>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	687a      	ldr	r2, [r7, #4]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d104      	bne.n	8015d52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	4a0c      	ldr	r2, [pc, #48]	; (8015d80 <ip_reass_dequeue_datagram+0x4c>)
 8015d4e:	6013      	str	r3, [r2, #0]
 8015d50:	e00d      	b.n	8015d6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d106      	bne.n	8015d66 <ip_reass_dequeue_datagram+0x32>
 8015d58:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <ip_reass_dequeue_datagram+0x50>)
 8015d5a:	f240 1245 	movw	r2, #325	; 0x145
 8015d5e:	490a      	ldr	r1, [pc, #40]	; (8015d88 <ip_reass_dequeue_datagram+0x54>)
 8015d60:	480a      	ldr	r0, [pc, #40]	; (8015d8c <ip_reass_dequeue_datagram+0x58>)
 8015d62:	f001 f94d 	bl	8017000 <iprintf>
    prev->next = ipr->next;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	2004      	movs	r0, #4
 8015d72:	f7f6 fa9d 	bl	800c2b0 <memp_free>
}
 8015d76:	bf00      	nop
 8015d78:	3708      	adds	r7, #8
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}
 8015d7e:	bf00      	nop
 8015d80:	20004c10 	.word	0x20004c10
 8015d84:	0801b4a0 	.word	0x0801b4a0
 8015d88:	0801b568 	.word	0x0801b568
 8015d8c:	0801b4e8 	.word	0x0801b4e8

08015d90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b08c      	sub	sp, #48	; 0x30
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015da0:	2301      	movs	r3, #1
 8015da2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	885b      	ldrh	r3, [r3, #2]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f5 fd75 	bl	800b8a0 <lwip_htons>
 8015db6:	4603      	mov	r3, r0
 8015db8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015dba:	69fb      	ldr	r3, [r7, #28]
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	f003 030f 	and.w	r3, r3, #15
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015dc8:	7e7b      	ldrb	r3, [r7, #25]
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	8b7a      	ldrh	r2, [r7, #26]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d202      	bcs.n	8015dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd6:	e135      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015dd8:	7e7b      	ldrb	r3, [r7, #25]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	8b7a      	ldrh	r2, [r7, #26]
 8015dde:	1ad3      	subs	r3, r2, r3
 8015de0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015de2:	69fb      	ldr	r3, [r7, #28]
 8015de4:	88db      	ldrh	r3, [r3, #6]
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7f5 fd59 	bl	800b8a0 <lwip_htons>
 8015dee:	4603      	mov	r3, r0
 8015df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e02:	2200      	movs	r2, #0
 8015e04:	701a      	strb	r2, [r3, #0]
 8015e06:	2200      	movs	r2, #0
 8015e08:	705a      	strb	r2, [r3, #1]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	709a      	strb	r2, [r3, #2]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e14:	8afa      	ldrh	r2, [r7, #22]
 8015e16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015e18:	8afa      	ldrh	r2, [r7, #22]
 8015e1a:	8b7b      	ldrh	r3, [r7, #26]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e26:	88db      	ldrh	r3, [r3, #6]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	8afa      	ldrh	r2, [r7, #22]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d902      	bls.n	8015e36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295
 8015e34:	e106      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	685b      	ldr	r3, [r3, #4]
 8015e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e3c:	e068      	b.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	889b      	ldrh	r3, [r3, #4]
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	889b      	ldrh	r3, [r3, #4]
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d235      	bcs.n	8015ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d020      	beq.n	8015ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e62:	889b      	ldrh	r3, [r3, #4]
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e68:	88db      	ldrh	r3, [r3, #6]
 8015e6a:	b29b      	uxth	r3, r3
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d307      	bcc.n	8015e80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e72:	88db      	ldrh	r3, [r3, #6]
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	889b      	ldrh	r3, [r3, #4]
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	d902      	bls.n	8015e86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e80:	f04f 33ff 	mov.w	r3, #4294967295
 8015e84:	e0de      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e88:	68ba      	ldr	r2, [r7, #8]
 8015e8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8e:	88db      	ldrh	r3, [r3, #6]
 8015e90:	b29a      	uxth	r2, r3
 8015e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e94:	889b      	ldrh	r3, [r3, #4]
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d03d      	beq.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015ea0:	e03a      	b.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea4:	88db      	ldrh	r3, [r3, #6]
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	889b      	ldrh	r3, [r3, #4]
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d902      	bls.n	8015eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb6:	e0c5      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	68ba      	ldr	r2, [r7, #8]
 8015ebc:	605a      	str	r2, [r3, #4]
      break;
 8015ebe:	e02b      	b.n	8015f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec2:	889b      	ldrh	r3, [r3, #4]
 8015ec4:	b29a      	uxth	r2, r3
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	889b      	ldrh	r3, [r3, #4]
 8015eca:	b29b      	uxth	r3, r3
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d102      	bne.n	8015ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed4:	e0b6      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed8:	889b      	ldrh	r3, [r3, #4]
 8015eda:	b29a      	uxth	r2, r3
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	88db      	ldrh	r3, [r3, #6]
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d202      	bcs.n	8015eec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eea:	e0ab      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d009      	beq.n	8015f06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	88db      	ldrh	r3, [r3, #6]
 8015ef6:	b29a      	uxth	r2, r3
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	889b      	ldrh	r3, [r3, #4]
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d001      	beq.n	8015f06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015f02:	2300      	movs	r3, #0
 8015f04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d193      	bne.n	8015e3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015f16:	e000      	b.n	8015f1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015f18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d12d      	bne.n	8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d01c      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f28:	88db      	ldrh	r3, [r3, #6]
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2e:	889b      	ldrh	r3, [r3, #4]
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d906      	bls.n	8015f44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015f36:	4b45      	ldr	r3, [pc, #276]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f38:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015f3c:	4944      	ldr	r1, [pc, #272]	; (8016050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f3e:	4845      	ldr	r0, [pc, #276]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f40:	f001 f85e 	bl	8017000 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f46:	68ba      	ldr	r2, [r7, #8]
 8015f48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4c:	88db      	ldrh	r3, [r3, #6]
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f52:	889b      	ldrh	r3, [r3, #4]
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d010      	beq.n	8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	623b      	str	r3, [r7, #32]
 8015f5e:	e00d      	b.n	8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d006      	beq.n	8015f76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015f68:	4b38      	ldr	r3, [pc, #224]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f6a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015f6e:	493a      	ldr	r1, [pc, #232]	; (8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f70:	4838      	ldr	r0, [pc, #224]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f72:	f001 f845 	bl	8017000 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	68ba      	ldr	r2, [r7, #8]
 8015f7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d105      	bne.n	8015f8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	7f9b      	ldrb	r3, [r3, #30]
 8015f86:	f003 0301 	and.w	r3, r3, #1
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d059      	beq.n	8016042 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015f8e:	6a3b      	ldr	r3, [r7, #32]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d04f      	beq.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d006      	beq.n	8015faa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	685b      	ldr	r3, [r3, #4]
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	889b      	ldrh	r3, [r3, #4]
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d002      	beq.n	8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015faa:	2300      	movs	r3, #0
 8015fac:	623b      	str	r3, [r7, #32]
 8015fae:	e041      	b.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015fba:	e012      	b.n	8015fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc4:	88db      	ldrh	r3, [r3, #6]
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	889b      	ldrh	r3, [r3, #4]
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d002      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	623b      	str	r3, [r7, #32]
            break;
 8015fd6:	e007      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fda:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d1e9      	bne.n	8015fbc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015fe8:	6a3b      	ldr	r3, [r7, #32]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d022      	beq.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d106      	bne.n	8016004 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015ff6:	4b15      	ldr	r3, [pc, #84]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ff8:	f240 12df 	movw	r2, #479	; 0x1df
 8015ffc:	4917      	ldr	r1, [pc, #92]	; (801605c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ffe:	4815      	ldr	r0, [pc, #84]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016000:	f000 fffe 	bl	8017000 <iprintf>
          LWIP_ASSERT("sanity check",
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	685b      	ldr	r3, [r3, #4]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801600c:	429a      	cmp	r2, r3
 801600e:	d106      	bne.n	801601e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016010:	4b0e      	ldr	r3, [pc, #56]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016012:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016016:	4911      	ldr	r1, [pc, #68]	; (801605c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016018:	480e      	ldr	r0, [pc, #56]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801601a:	f000 fff1 	bl	8017000 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d006      	beq.n	8016034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016026:	4b09      	ldr	r3, [pc, #36]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016028:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801602c:	490c      	ldr	r1, [pc, #48]	; (8016060 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801602e:	4809      	ldr	r0, [pc, #36]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016030:	f000 ffe6 	bl	8017000 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016034:	6a3b      	ldr	r3, [r7, #32]
 8016036:	2b00      	cmp	r3, #0
 8016038:	bf14      	ite	ne
 801603a:	2301      	movne	r3, #1
 801603c:	2300      	moveq	r3, #0
 801603e:	b2db      	uxtb	r3, r3
 8016040:	e000      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016042:	2300      	movs	r3, #0
}
 8016044:	4618      	mov	r0, r3
 8016046:	3730      	adds	r7, #48	; 0x30
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	0801b4a0 	.word	0x0801b4a0
 8016050:	0801b584 	.word	0x0801b584
 8016054:	0801b4e8 	.word	0x0801b4e8
 8016058:	0801b5a4 	.word	0x0801b5a4
 801605c:	0801b5dc 	.word	0x0801b5dc
 8016060:	0801b5ec 	.word	0x0801b5ec

08016064 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b08e      	sub	sp, #56	; 0x38
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	f003 030f 	and.w	r3, r3, #15
 801607a:	b2db      	uxtb	r3, r3
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b14      	cmp	r3, #20
 8016082:	f040 8167 	bne.w	8016354 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	b29b      	uxth	r3, r3
 801608c:	4618      	mov	r0, r3
 801608e:	f7f5 fc07 	bl	800b8a0 <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016098:	b29b      	uxth	r3, r3
 801609a:	00db      	lsls	r3, r3, #3
 801609c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	885b      	ldrh	r3, [r3, #2]
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7f5 fbfb 	bl	800b8a0 <lwip_htons>
 80160aa:	4603      	mov	r3, r0
 80160ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80160ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	f003 030f 	and.w	r3, r3, #15
 80160b6:	b2db      	uxtb	r3, r3
 80160b8:	009b      	lsls	r3, r3, #2
 80160ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80160be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160c2:	b29b      	uxth	r3, r3
 80160c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160c6:	429a      	cmp	r2, r3
 80160c8:	f0c0 8146 	bcc.w	8016358 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80160cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160d4:	1ad3      	subs	r3, r2, r3
 80160d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7f7 f81f 	bl	800d11c <pbuf_clen>
 80160de:	4603      	mov	r3, r0
 80160e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80160e2:	4b9f      	ldr	r3, [pc, #636]	; (8016360 <ip4_reass+0x2fc>)
 80160e4:	881b      	ldrh	r3, [r3, #0]
 80160e6:	461a      	mov	r2, r3
 80160e8:	8c3b      	ldrh	r3, [r7, #32]
 80160ea:	4413      	add	r3, r2
 80160ec:	2b0a      	cmp	r3, #10
 80160ee:	dd10      	ble.n	8016112 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80160f0:	8c3b      	ldrh	r3, [r7, #32]
 80160f2:	4619      	mov	r1, r3
 80160f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160f6:	f7ff fd81 	bl	8015bfc <ip_reass_remove_oldest_datagram>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f000 812d 	beq.w	801635c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016102:	4b97      	ldr	r3, [pc, #604]	; (8016360 <ip4_reass+0x2fc>)
 8016104:	881b      	ldrh	r3, [r3, #0]
 8016106:	461a      	mov	r2, r3
 8016108:	8c3b      	ldrh	r3, [r7, #32]
 801610a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801610c:	2b0a      	cmp	r3, #10
 801610e:	f300 8125 	bgt.w	801635c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016112:	4b94      	ldr	r3, [pc, #592]	; (8016364 <ip4_reass+0x300>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	633b      	str	r3, [r7, #48]	; 0x30
 8016118:	e015      	b.n	8016146 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611c:	695a      	ldr	r2, [r3, #20]
 801611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	429a      	cmp	r2, r3
 8016124:	d10c      	bne.n	8016140 <ip4_reass+0xdc>
 8016126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016128:	699a      	ldr	r2, [r3, #24]
 801612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612c:	691b      	ldr	r3, [r3, #16]
 801612e:	429a      	cmp	r2, r3
 8016130:	d106      	bne.n	8016140 <ip4_reass+0xdc>
 8016132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016134:	899a      	ldrh	r2, [r3, #12]
 8016136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016138:	889b      	ldrh	r3, [r3, #4]
 801613a:	b29b      	uxth	r3, r3
 801613c:	429a      	cmp	r2, r3
 801613e:	d006      	beq.n	801614e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	633b      	str	r3, [r7, #48]	; 0x30
 8016146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016148:	2b00      	cmp	r3, #0
 801614a:	d1e6      	bne.n	801611a <ip4_reass+0xb6>
 801614c:	e000      	b.n	8016150 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801614e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016152:	2b00      	cmp	r3, #0
 8016154:	d109      	bne.n	801616a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016156:	8c3b      	ldrh	r3, [r7, #32]
 8016158:	4619      	mov	r1, r3
 801615a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801615c:	f7ff fdb0 	bl	8015cc0 <ip_reass_enqueue_new_datagram>
 8016160:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016164:	2b00      	cmp	r3, #0
 8016166:	d11c      	bne.n	80161a2 <ip4_reass+0x13e>
      goto nullreturn;
 8016168:	e109      	b.n	801637e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801616c:	88db      	ldrh	r3, [r3, #6]
 801616e:	b29b      	uxth	r3, r3
 8016170:	4618      	mov	r0, r3
 8016172:	f7f5 fb95 	bl	800b8a0 <lwip_htons>
 8016176:	4603      	mov	r3, r0
 8016178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801617c:	2b00      	cmp	r3, #0
 801617e:	d110      	bne.n	80161a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016182:	89db      	ldrh	r3, [r3, #14]
 8016184:	4618      	mov	r0, r3
 8016186:	f7f5 fb8b 	bl	800b8a0 <lwip_htons>
 801618a:	4603      	mov	r3, r0
 801618c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016190:	2b00      	cmp	r3, #0
 8016192:	d006      	beq.n	80161a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016196:	3308      	adds	r3, #8
 8016198:	2214      	movs	r2, #20
 801619a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801619c:	4618      	mov	r0, r3
 801619e:	f000 fe55 	bl	8016e4c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80161a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a4:	88db      	ldrh	r3, [r3, #6]
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	f003 0320 	and.w	r3, r3, #32
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	bf0c      	ite	eq
 80161b0:	2301      	moveq	r3, #1
 80161b2:	2300      	movne	r3, #0
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d00e      	beq.n	80161dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80161be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161c2:	4413      	add	r3, r2
 80161c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80161c6:	8b7a      	ldrh	r2, [r7, #26]
 80161c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161ca:	429a      	cmp	r2, r3
 80161cc:	f0c0 80a0 	bcc.w	8016310 <ip4_reass+0x2ac>
 80161d0:	8b7b      	ldrh	r3, [r7, #26]
 80161d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80161d6:	4293      	cmp	r3, r2
 80161d8:	f200 809a 	bhi.w	8016310 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80161dc:	69fa      	ldr	r2, [r7, #28]
 80161de:	6879      	ldr	r1, [r7, #4]
 80161e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161e2:	f7ff fdd5 	bl	8015d90 <ip_reass_chain_frag_into_datagram_and_validate>
 80161e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ee:	f000 8091 	beq.w	8016314 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80161f2:	4b5b      	ldr	r3, [pc, #364]	; (8016360 <ip4_reass+0x2fc>)
 80161f4:	881a      	ldrh	r2, [r3, #0]
 80161f6:	8c3b      	ldrh	r3, [r7, #32]
 80161f8:	4413      	add	r3, r2
 80161fa:	b29a      	uxth	r2, r3
 80161fc:	4b58      	ldr	r3, [pc, #352]	; (8016360 <ip4_reass+0x2fc>)
 80161fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016200:	69fb      	ldr	r3, [r7, #28]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d00d      	beq.n	8016222 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801620a:	4413      	add	r3, r2
 801620c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016210:	8a7a      	ldrh	r2, [r7, #18]
 8016212:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016216:	7f9b      	ldrb	r3, [r3, #30]
 8016218:	f043 0301 	orr.w	r3, r3, #1
 801621c:	b2da      	uxtb	r2, r3
 801621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016220:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2b01      	cmp	r3, #1
 8016226:	d171      	bne.n	801630c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622a:	8b9b      	ldrh	r3, [r3, #28]
 801622c:	3314      	adds	r3, #20
 801622e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	685b      	ldr	r3, [r3, #4]
 8016240:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016244:	3308      	adds	r3, #8
 8016246:	2214      	movs	r2, #20
 8016248:	4619      	mov	r1, r3
 801624a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801624c:	f000 fdfe 	bl	8016e4c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016250:	8a3b      	ldrh	r3, [r7, #16]
 8016252:	4618      	mov	r0, r3
 8016254:	f7f5 fb24 	bl	800b8a0 <lwip_htons>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
 801625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801625e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016262:	2200      	movs	r2, #0
 8016264:	719a      	strb	r2, [r3, #6]
 8016266:	2200      	movs	r2, #0
 8016268:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626c:	2200      	movs	r2, #0
 801626e:	729a      	strb	r2, [r3, #10]
 8016270:	2200      	movs	r2, #0
 8016272:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	685b      	ldr	r3, [r3, #4]
 8016278:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801627a:	e00d      	b.n	8016298 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016282:	2114      	movs	r1, #20
 8016284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016286:	f7f6 fe35 	bl	800cef4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801628a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f7f6 ff85 	bl	800d19c <pbuf_cat>
      r = iprh->next_pbuf;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629a:	2b00      	cmp	r3, #0
 801629c:	d1ee      	bne.n	801627c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801629e:	4b31      	ldr	r3, [pc, #196]	; (8016364 <ip4_reass+0x300>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d102      	bne.n	80162ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80162a8:	2300      	movs	r3, #0
 80162aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ac:	e010      	b.n	80162d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162ae:	4b2d      	ldr	r3, [pc, #180]	; (8016364 <ip4_reass+0x300>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162b4:	e007      	b.n	80162c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80162b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162bc:	429a      	cmp	r2, r3
 80162be:	d006      	beq.n	80162ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d1f4      	bne.n	80162b6 <ip4_reass+0x252>
 80162cc:	e000      	b.n	80162d0 <ip4_reass+0x26c>
          break;
 80162ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80162d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162d4:	f7ff fd2e 	bl	8015d34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f7f6 ff1f 	bl	800d11c <pbuf_clen>
 80162de:	4603      	mov	r3, r0
 80162e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80162e2:	4b1f      	ldr	r3, [pc, #124]	; (8016360 <ip4_reass+0x2fc>)
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	8c3a      	ldrh	r2, [r7, #32]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d906      	bls.n	80162fa <ip4_reass+0x296>
 80162ec:	4b1e      	ldr	r3, [pc, #120]	; (8016368 <ip4_reass+0x304>)
 80162ee:	f240 229b 	movw	r2, #667	; 0x29b
 80162f2:	491e      	ldr	r1, [pc, #120]	; (801636c <ip4_reass+0x308>)
 80162f4:	481e      	ldr	r0, [pc, #120]	; (8016370 <ip4_reass+0x30c>)
 80162f6:	f000 fe83 	bl	8017000 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80162fa:	4b19      	ldr	r3, [pc, #100]	; (8016360 <ip4_reass+0x2fc>)
 80162fc:	881a      	ldrh	r2, [r3, #0]
 80162fe:	8c3b      	ldrh	r3, [r7, #32]
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	b29a      	uxth	r2, r3
 8016304:	4b16      	ldr	r3, [pc, #88]	; (8016360 <ip4_reass+0x2fc>)
 8016306:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	e03c      	b.n	8016386 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801630c:	2300      	movs	r3, #0
 801630e:	e03a      	b.n	8016386 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016310:	bf00      	nop
 8016312:	e000      	b.n	8016316 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016314:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	2b00      	cmp	r3, #0
 801631a:	d106      	bne.n	801632a <ip4_reass+0x2c6>
 801631c:	4b12      	ldr	r3, [pc, #72]	; (8016368 <ip4_reass+0x304>)
 801631e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016322:	4914      	ldr	r1, [pc, #80]	; (8016374 <ip4_reass+0x310>)
 8016324:	4812      	ldr	r0, [pc, #72]	; (8016370 <ip4_reass+0x30c>)
 8016326:	f000 fe6b 	bl	8017000 <iprintf>
  if (ipr->p == NULL) {
 801632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d124      	bne.n	801637c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016332:	4b0c      	ldr	r3, [pc, #48]	; (8016364 <ip4_reass+0x300>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016338:	429a      	cmp	r2, r3
 801633a:	d006      	beq.n	801634a <ip4_reass+0x2e6>
 801633c:	4b0a      	ldr	r3, [pc, #40]	; (8016368 <ip4_reass+0x304>)
 801633e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016342:	490d      	ldr	r1, [pc, #52]	; (8016378 <ip4_reass+0x314>)
 8016344:	480a      	ldr	r0, [pc, #40]	; (8016370 <ip4_reass+0x30c>)
 8016346:	f000 fe5b 	bl	8017000 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801634a:	2100      	movs	r1, #0
 801634c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801634e:	f7ff fcf1 	bl	8015d34 <ip_reass_dequeue_datagram>
 8016352:	e014      	b.n	801637e <ip4_reass+0x31a>
    goto nullreturn;
 8016354:	bf00      	nop
 8016356:	e012      	b.n	801637e <ip4_reass+0x31a>
    goto nullreturn;
 8016358:	bf00      	nop
 801635a:	e010      	b.n	801637e <ip4_reass+0x31a>
      goto nullreturn;
 801635c:	bf00      	nop
 801635e:	e00e      	b.n	801637e <ip4_reass+0x31a>
 8016360:	20004c14 	.word	0x20004c14
 8016364:	20004c10 	.word	0x20004c10
 8016368:	0801b4a0 	.word	0x0801b4a0
 801636c:	0801b610 	.word	0x0801b610
 8016370:	0801b4e8 	.word	0x0801b4e8
 8016374:	0801b62c 	.word	0x0801b62c
 8016378:	0801b638 	.word	0x0801b638
  }

nullreturn:
 801637c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7f6 fe3e 	bl	800d000 <pbuf_free>
  return NULL;
 8016384:	2300      	movs	r3, #0
}
 8016386:	4618      	mov	r0, r3
 8016388:	3738      	adds	r7, #56	; 0x38
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop

08016390 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016394:	2005      	movs	r0, #5
 8016396:	f7f5 ff39 	bl	800c20c <memp_malloc>
 801639a:	4603      	mov	r3, r0
}
 801639c:	4618      	mov	r0, r3
 801639e:	bd80      	pop	{r7, pc}

080163a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d106      	bne.n	80163bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80163ae:	4b07      	ldr	r3, [pc, #28]	; (80163cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80163b0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80163b4:	4906      	ldr	r1, [pc, #24]	; (80163d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80163b6:	4807      	ldr	r0, [pc, #28]	; (80163d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80163b8:	f000 fe22 	bl	8017000 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80163bc:	6879      	ldr	r1, [r7, #4]
 80163be:	2005      	movs	r0, #5
 80163c0:	f7f5 ff76 	bl	800c2b0 <memp_free>
}
 80163c4:	bf00      	nop
 80163c6:	3708      	adds	r7, #8
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	0801b4a0 	.word	0x0801b4a0
 80163d0:	0801b658 	.word	0x0801b658
 80163d4:	0801b4e8 	.word	0x0801b4e8

080163d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d106      	bne.n	80163f8 <ipfrag_free_pbuf_custom+0x20>
 80163ea:	4b11      	ldr	r3, [pc, #68]	; (8016430 <ipfrag_free_pbuf_custom+0x58>)
 80163ec:	f240 22ce 	movw	r2, #718	; 0x2ce
 80163f0:	4910      	ldr	r1, [pc, #64]	; (8016434 <ipfrag_free_pbuf_custom+0x5c>)
 80163f2:	4811      	ldr	r0, [pc, #68]	; (8016438 <ipfrag_free_pbuf_custom+0x60>)
 80163f4:	f000 fe04 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80163f8:	68fa      	ldr	r2, [r7, #12]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d006      	beq.n	801640e <ipfrag_free_pbuf_custom+0x36>
 8016400:	4b0b      	ldr	r3, [pc, #44]	; (8016430 <ipfrag_free_pbuf_custom+0x58>)
 8016402:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016406:	490d      	ldr	r1, [pc, #52]	; (801643c <ipfrag_free_pbuf_custom+0x64>)
 8016408:	480b      	ldr	r0, [pc, #44]	; (8016438 <ipfrag_free_pbuf_custom+0x60>)
 801640a:	f000 fdf9 	bl	8017000 <iprintf>
  if (pcr->original != NULL) {
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	695b      	ldr	r3, [r3, #20]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d004      	beq.n	8016420 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	695b      	ldr	r3, [r3, #20]
 801641a:	4618      	mov	r0, r3
 801641c:	f7f6 fdf0 	bl	800d000 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f7ff ffbd 	bl	80163a0 <ip_frag_free_pbuf_custom_ref>
}
 8016426:	bf00      	nop
 8016428:	3710      	adds	r7, #16
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	0801b4a0 	.word	0x0801b4a0
 8016434:	0801b664 	.word	0x0801b664
 8016438:	0801b4e8 	.word	0x0801b4e8
 801643c:	0801b670 	.word	0x0801b670

08016440 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b094      	sub	sp, #80	; 0x50
 8016444:	af02      	add	r7, sp, #8
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801644c:	2300      	movs	r3, #0
 801644e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016456:	3b14      	subs	r3, #20
 8016458:	2b00      	cmp	r3, #0
 801645a:	da00      	bge.n	801645e <ip4_frag+0x1e>
 801645c:	3307      	adds	r3, #7
 801645e:	10db      	asrs	r3, r3, #3
 8016460:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016462:	2314      	movs	r3, #20
 8016464:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801646e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	f003 030f 	and.w	r3, r3, #15
 8016478:	b2db      	uxtb	r3, r3
 801647a:	009b      	lsls	r3, r3, #2
 801647c:	b2db      	uxtb	r3, r3
 801647e:	2b14      	cmp	r3, #20
 8016480:	d002      	beq.n	8016488 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016482:	f06f 0305 	mvn.w	r3, #5
 8016486:	e110      	b.n	80166aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	895b      	ldrh	r3, [r3, #10]
 801648c:	2b13      	cmp	r3, #19
 801648e:	d809      	bhi.n	80164a4 <ip4_frag+0x64>
 8016490:	4b88      	ldr	r3, [pc, #544]	; (80166b4 <ip4_frag+0x274>)
 8016492:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016496:	4988      	ldr	r1, [pc, #544]	; (80166b8 <ip4_frag+0x278>)
 8016498:	4888      	ldr	r0, [pc, #544]	; (80166bc <ip4_frag+0x27c>)
 801649a:	f000 fdb1 	bl	8017000 <iprintf>
 801649e:	f06f 0305 	mvn.w	r3, #5
 80164a2:	e102      	b.n	80166aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80164a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a6:	88db      	ldrh	r3, [r3, #6]
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7f5 f9f8 	bl	800b8a0 <lwip_htons>
 80164b0:	4603      	mov	r3, r0
 80164b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80164b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80164be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80164c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	891b      	ldrh	r3, [r3, #8]
 80164ca:	3b14      	subs	r3, #20
 80164cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80164d0:	e0e1      	b.n	8016696 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80164d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80164d4:	00db      	lsls	r3, r3, #3
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164dc:	4293      	cmp	r3, r2
 80164de:	bf28      	it	cs
 80164e0:	4613      	movcs	r3, r2
 80164e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80164e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164e8:	2114      	movs	r1, #20
 80164ea:	200e      	movs	r0, #14
 80164ec:	f7f6 faa0 	bl	800ca30 <pbuf_alloc>
 80164f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80164f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	f000 80d5 	beq.w	80166a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	895b      	ldrh	r3, [r3, #10]
 80164fe:	2b13      	cmp	r3, #19
 8016500:	d806      	bhi.n	8016510 <ip4_frag+0xd0>
 8016502:	4b6c      	ldr	r3, [pc, #432]	; (80166b4 <ip4_frag+0x274>)
 8016504:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016508:	496d      	ldr	r1, [pc, #436]	; (80166c0 <ip4_frag+0x280>)
 801650a:	486c      	ldr	r0, [pc, #432]	; (80166bc <ip4_frag+0x27c>)
 801650c:	f000 fd78 	bl	8017000 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016512:	685b      	ldr	r3, [r3, #4]
 8016514:	2214      	movs	r2, #20
 8016516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016518:	4618      	mov	r0, r3
 801651a:	f000 fc97 	bl	8016e4c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016524:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801652a:	e064      	b.n	80165f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	895a      	ldrh	r2, [r3, #10]
 8016530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016532:	1ad3      	subs	r3, r2, r3
 8016534:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	895b      	ldrh	r3, [r3, #10]
 801653a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801653c:	429a      	cmp	r2, r3
 801653e:	d906      	bls.n	801654e <ip4_frag+0x10e>
 8016540:	4b5c      	ldr	r3, [pc, #368]	; (80166b4 <ip4_frag+0x274>)
 8016542:	f240 322d 	movw	r2, #813	; 0x32d
 8016546:	495f      	ldr	r1, [pc, #380]	; (80166c4 <ip4_frag+0x284>)
 8016548:	485c      	ldr	r0, [pc, #368]	; (80166bc <ip4_frag+0x27c>)
 801654a:	f000 fd59 	bl	8017000 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801654e:	8bfa      	ldrh	r2, [r7, #30]
 8016550:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016554:	4293      	cmp	r3, r2
 8016556:	bf28      	it	cs
 8016558:	4613      	movcs	r3, r2
 801655a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801655e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016562:	2b00      	cmp	r3, #0
 8016564:	d105      	bne.n	8016572 <ip4_frag+0x132>
        poff = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	60fb      	str	r3, [r7, #12]
        continue;
 8016570:	e041      	b.n	80165f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016572:	f7ff ff0d 	bl	8016390 <ip_frag_alloc_pbuf_custom_ref>
 8016576:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d103      	bne.n	8016586 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801657e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016580:	f7f6 fd3e 	bl	800d000 <pbuf_free>
        goto memerr;
 8016584:	e08f      	b.n	80166a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016586:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801658c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801658e:	4413      	add	r3, r2
 8016590:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016594:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016598:	9201      	str	r2, [sp, #4]
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	4603      	mov	r3, r0
 801659e:	2241      	movs	r2, #65	; 0x41
 80165a0:	2000      	movs	r0, #0
 80165a2:	f7f6 fb73 	bl	800cc8c <pbuf_alloced_custom>
 80165a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d106      	bne.n	80165bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80165ae:	69b8      	ldr	r0, [r7, #24]
 80165b0:	f7ff fef6 	bl	80163a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80165b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165b6:	f7f6 fd23 	bl	800d000 <pbuf_free>
        goto memerr;
 80165ba:	e074      	b.n	80166a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f7f6 fdc5 	bl	800d14c <pbuf_ref>
      pcr->original = p;
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	4a3f      	ldr	r2, [pc, #252]	; (80166c8 <ip4_frag+0x288>)
 80165cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80165ce:	6979      	ldr	r1, [r7, #20]
 80165d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165d2:	f7f6 fde3 	bl	800d19c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80165d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80165da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80165e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d004      	beq.n	80165f6 <ip4_frag+0x1b6>
        poff = 0;
 80165ec:	2300      	movs	r3, #0
 80165ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80165f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d196      	bne.n	801652c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80165fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016600:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016604:	4413      	add	r3, r2
 8016606:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801660c:	f1a3 0213 	sub.w	r2, r3, #19
 8016610:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016614:	429a      	cmp	r2, r3
 8016616:	bfcc      	ite	gt
 8016618:	2301      	movgt	r3, #1
 801661a:	2300      	movle	r3, #0
 801661c:	b2db      	uxtb	r3, r3
 801661e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016628:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801662a:	6a3b      	ldr	r3, [r7, #32]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d002      	beq.n	8016636 <ip4_frag+0x1f6>
 8016630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016632:	2b00      	cmp	r3, #0
 8016634:	d003      	beq.n	801663e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016636:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801663c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801663e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016640:	4618      	mov	r0, r3
 8016642:	f7f5 f92d 	bl	800b8a0 <lwip_htons>
 8016646:	4603      	mov	r3, r0
 8016648:	461a      	mov	r2, r3
 801664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801664c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801664e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016650:	3314      	adds	r3, #20
 8016652:	b29b      	uxth	r3, r3
 8016654:	4618      	mov	r0, r3
 8016656:	f7f5 f923 	bl	800b8a0 <lwip_htons>
 801665a:	4603      	mov	r3, r0
 801665c:	461a      	mov	r2, r3
 801665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016660:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016664:	2200      	movs	r2, #0
 8016666:	729a      	strb	r2, [r3, #10]
 8016668:	2200      	movs	r2, #0
 801666a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	695b      	ldr	r3, [r3, #20]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016674:	68b8      	ldr	r0, [r7, #8]
 8016676:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801667a:	f7f6 fcc1 	bl	800d000 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801667e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016684:	1ad3      	subs	r3, r2, r3
 8016686:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801668a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801668e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016690:	4413      	add	r3, r2
 8016692:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801669a:	2b00      	cmp	r3, #0
 801669c:	f47f af19 	bne.w	80164d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80166a0:	2300      	movs	r3, #0
 80166a2:	e002      	b.n	80166aa <ip4_frag+0x26a>
      goto memerr;
 80166a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80166a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3748      	adds	r7, #72	; 0x48
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	0801b4a0 	.word	0x0801b4a0
 80166b8:	0801b67c 	.word	0x0801b67c
 80166bc:	0801b4e8 	.word	0x0801b4e8
 80166c0:	0801b698 	.word	0x0801b698
 80166c4:	0801b6b8 	.word	0x0801b6b8
 80166c8:	080163d9 	.word	0x080163d9

080166cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80166d6:	230e      	movs	r3, #14
 80166d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	895b      	ldrh	r3, [r3, #10]
 80166de:	2b0e      	cmp	r3, #14
 80166e0:	d96e      	bls.n	80167c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	7bdb      	ldrb	r3, [r3, #15]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d106      	bne.n	80166f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166f0:	3301      	adds	r3, #1
 80166f2:	b2da      	uxtb	r2, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	7b1a      	ldrb	r2, [r3, #12]
 8016702:	7b5b      	ldrb	r3, [r3, #13]
 8016704:	021b      	lsls	r3, r3, #8
 8016706:	4313      	orrs	r3, r2
 8016708:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	f003 0301 	and.w	r3, r3, #1
 8016712:	2b00      	cmp	r3, #0
 8016714:	d023      	beq.n	801675e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	2b01      	cmp	r3, #1
 801671c:	d10f      	bne.n	801673e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	785b      	ldrb	r3, [r3, #1]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d11b      	bne.n	801675e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801672a:	2b5e      	cmp	r3, #94	; 0x5e
 801672c:	d117      	bne.n	801675e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	7b5b      	ldrb	r3, [r3, #13]
 8016732:	f043 0310 	orr.w	r3, r3, #16
 8016736:	b2da      	uxtb	r2, r3
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	735a      	strb	r2, [r3, #13]
 801673c:	e00f      	b.n	801675e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	2206      	movs	r2, #6
 8016742:	4928      	ldr	r1, [pc, #160]	; (80167e4 <ethernet_input+0x118>)
 8016744:	4618      	mov	r0, r3
 8016746:	f000 fb73 	bl	8016e30 <memcmp>
 801674a:	4603      	mov	r3, r0
 801674c:	2b00      	cmp	r3, #0
 801674e:	d106      	bne.n	801675e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	7b5b      	ldrb	r3, [r3, #13]
 8016754:	f043 0308 	orr.w	r3, r3, #8
 8016758:	b2da      	uxtb	r2, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801675e:	89fb      	ldrh	r3, [r7, #14]
 8016760:	2b08      	cmp	r3, #8
 8016762:	d003      	beq.n	801676c <ethernet_input+0xa0>
 8016764:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016768:	d014      	beq.n	8016794 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801676a:	e032      	b.n	80167d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016772:	f003 0308 	and.w	r3, r3, #8
 8016776:	2b00      	cmp	r3, #0
 8016778:	d024      	beq.n	80167c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801677a:	8afb      	ldrh	r3, [r7, #22]
 801677c:	4619      	mov	r1, r3
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f7f6 fbb8 	bl	800cef4 <pbuf_remove_header>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d11e      	bne.n	80167c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801678a:	6839      	ldr	r1, [r7, #0]
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f7fe fdfd 	bl	801538c <ip4_input>
      break;
 8016792:	e013      	b.n	80167bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801679a:	f003 0308 	and.w	r3, r3, #8
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d014      	beq.n	80167cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80167a2:	8afb      	ldrh	r3, [r7, #22]
 80167a4:	4619      	mov	r1, r3
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f7f6 fba4 	bl	800cef4 <pbuf_remove_header>
 80167ac:	4603      	mov	r3, r0
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d10e      	bne.n	80167d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80167b2:	6839      	ldr	r1, [r7, #0]
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7fd ff9d 	bl	80146f4 <etharp_input>
      break;
 80167ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80167bc:	2300      	movs	r3, #0
 80167be:	e00c      	b.n	80167da <ethernet_input+0x10e>
    goto free_and_return;
 80167c0:	bf00      	nop
 80167c2:	e006      	b.n	80167d2 <ethernet_input+0x106>
        goto free_and_return;
 80167c4:	bf00      	nop
 80167c6:	e004      	b.n	80167d2 <ethernet_input+0x106>
        goto free_and_return;
 80167c8:	bf00      	nop
 80167ca:	e002      	b.n	80167d2 <ethernet_input+0x106>
        goto free_and_return;
 80167cc:	bf00      	nop
 80167ce:	e000      	b.n	80167d2 <ethernet_input+0x106>
        goto free_and_return;
 80167d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f7f6 fc14 	bl	800d000 <pbuf_free>
  return ERR_OK;
 80167d8:	2300      	movs	r3, #0
}
 80167da:	4618      	mov	r0, r3
 80167dc:	3718      	adds	r7, #24
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	0801b8e8 	.word	0x0801b8e8

080167e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b086      	sub	sp, #24
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	607a      	str	r2, [r7, #4]
 80167f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80167f6:	8c3b      	ldrh	r3, [r7, #32]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7f5 f851 	bl	800b8a0 <lwip_htons>
 80167fe:	4603      	mov	r3, r0
 8016800:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016802:	210e      	movs	r1, #14
 8016804:	68b8      	ldr	r0, [r7, #8]
 8016806:	f7f6 fb65 	bl	800ced4 <pbuf_add_header>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d125      	bne.n	801685c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	685b      	ldr	r3, [r3, #4]
 8016814:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	8afa      	ldrh	r2, [r7, #22]
 801681a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	2206      	movs	r2, #6
 8016820:	6839      	ldr	r1, [r7, #0]
 8016822:	4618      	mov	r0, r3
 8016824:	f000 fb12 	bl	8016e4c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	3306      	adds	r3, #6
 801682c:	2206      	movs	r2, #6
 801682e:	6879      	ldr	r1, [r7, #4]
 8016830:	4618      	mov	r0, r3
 8016832:	f000 fb0b 	bl	8016e4c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801683c:	2b06      	cmp	r3, #6
 801683e:	d006      	beq.n	801684e <ethernet_output+0x66>
 8016840:	4b0a      	ldr	r3, [pc, #40]	; (801686c <ethernet_output+0x84>)
 8016842:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016846:	490a      	ldr	r1, [pc, #40]	; (8016870 <ethernet_output+0x88>)
 8016848:	480a      	ldr	r0, [pc, #40]	; (8016874 <ethernet_output+0x8c>)
 801684a:	f000 fbd9 	bl	8017000 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	699b      	ldr	r3, [r3, #24]
 8016852:	68b9      	ldr	r1, [r7, #8]
 8016854:	68f8      	ldr	r0, [r7, #12]
 8016856:	4798      	blx	r3
 8016858:	4603      	mov	r3, r0
 801685a:	e002      	b.n	8016862 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801685c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801685e:	f06f 0301 	mvn.w	r3, #1
}
 8016862:	4618      	mov	r0, r3
 8016864:	3718      	adds	r7, #24
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	0801b6c8 	.word	0x0801b6c8
 8016870:	0801b700 	.word	0x0801b700
 8016874:	0801b734 	.word	0x0801b734

08016878 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	2200      	movs	r2, #0
 8016886:	2104      	movs	r1, #4
 8016888:	4618      	mov	r0, r3
 801688a:	f7ef fa9b 	bl	8005dc4 <osMessageQueueNew>
 801688e:	4602      	mov	r2, r0
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d102      	bne.n	80168a2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801689c:	f04f 33ff 	mov.w	r3, #4294967295
 80168a0:	e000      	b.n	80168a4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80168a2:	2300      	movs	r3, #0
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7ef fbb5 	bl	8006028 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7ef fbd0 	bl	8006068 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80168c8:	bf00      	nop
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6818      	ldr	r0, [r3, #0]
 80168de:	4639      	mov	r1, r7
 80168e0:	2300      	movs	r3, #0
 80168e2:	2200      	movs	r2, #0
 80168e4:	f7ef fae2 	bl	8005eac <osMessageQueuePut>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d102      	bne.n	80168f4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80168ee:	2300      	movs	r3, #0
 80168f0:	73fb      	strb	r3, [r7, #15]
 80168f2:	e001      	b.n	80168f8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80168f4:	23ff      	movs	r3, #255	; 0xff
 80168f6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80168f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b086      	sub	sp, #24
 8016908:	af00      	add	r7, sp, #0
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016910:	f7ee ff44 	bl	800579c <osKernelGetTickCount>
 8016914:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d013      	beq.n	8016944 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	6818      	ldr	r0, [r3, #0]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2200      	movs	r2, #0
 8016924:	68b9      	ldr	r1, [r7, #8]
 8016926:	f7ef fb21 	bl	8005f6c <osMessageQueueGet>
 801692a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d105      	bne.n	801693e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016932:	f7ee ff33 	bl	800579c <osKernelGetTickCount>
 8016936:	4602      	mov	r2, r0
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	1ad3      	subs	r3, r2, r3
 801693c:	e00f      	b.n	801695e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801693e:	f04f 33ff 	mov.w	r3, #4294967295
 8016942:	e00c      	b.n	801695e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	6818      	ldr	r0, [r3, #0]
 8016948:	f04f 33ff 	mov.w	r3, #4294967295
 801694c:	2200      	movs	r2, #0
 801694e:	68b9      	ldr	r1, [r7, #8]
 8016950:	f7ef fb0c 	bl	8005f6c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016954:	f7ee ff22 	bl	800579c <osKernelGetTickCount>
 8016958:	4602      	mov	r2, r0
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801695e:	4618      	mov	r0, r3
 8016960:	3718      	adds	r7, #24
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}

08016966 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016966:	b580      	push	{r7, lr}
 8016968:	b082      	sub	sp, #8
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
 801696e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6818      	ldr	r0, [r3, #0]
 8016974:	2300      	movs	r3, #0
 8016976:	2200      	movs	r2, #0
 8016978:	6839      	ldr	r1, [r7, #0]
 801697a:	f7ef faf7 	bl	8005f6c <osMessageQueueGet>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d101      	bne.n	8016988 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8016984:	2300      	movs	r3, #0
 8016986:	e001      	b.n	801698c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016988:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801698c:	4618      	mov	r0, r3
 801698e:	3708      	adds	r7, #8
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d101      	bne.n	80169a8 <sys_mbox_valid+0x14>
    return 0;
 80169a4:	2300      	movs	r3, #0
 80169a6:	e000      	b.n	80169aa <sys_mbox_valid+0x16>
  else
    return 1;
 80169a8:	2301      	movs	r3, #1
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	370c      	adds	r7, #12
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr

080169b6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80169b6:	b480      	push	{r7}
 80169b8:	b083      	sub	sp, #12
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2200      	movs	r2, #0
 80169c2:	601a      	str	r2, [r3, #0]
}
 80169c4:	bf00      	nop
 80169c6:	370c      	adds	r7, #12
 80169c8:	46bd      	mov	sp, r7
 80169ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ce:	4770      	bx	lr

080169d0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b082      	sub	sp, #8
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	460b      	mov	r3, r1
 80169da:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80169dc:	78fb      	ldrb	r3, [r7, #3]
 80169de:	2200      	movs	r2, #0
 80169e0:	4619      	mov	r1, r3
 80169e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80169e6:	f7ef f8a9 	bl	8005b3c <osSemaphoreNew>
 80169ea:	4602      	mov	r2, r0
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d102      	bne.n	80169fe <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80169f8:	f04f 33ff 	mov.w	r3, #4294967295
 80169fc:	e009      	b.n	8016a12 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80169fe:	78fb      	ldrb	r3, [r7, #3]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d105      	bne.n	8016a10 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	2100      	movs	r1, #0
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7ef f920 	bl	8005c50 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016a10:	2300      	movs	r3, #0
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3708      	adds	r7, #8
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016a1a:	b580      	push	{r7, lr}
 8016a1c:	b084      	sub	sp, #16
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
 8016a22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016a24:	f7ee feba 	bl	800579c <osKernelGetTickCount>
 8016a28:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d011      	beq.n	8016a54 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	6839      	ldr	r1, [r7, #0]
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7ef f90a 	bl	8005c50 <osSemaphoreAcquire>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d105      	bne.n	8016a4e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8016a42:	f7ee feab 	bl	800579c <osKernelGetTickCount>
 8016a46:	4602      	mov	r2, r0
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	e012      	b.n	8016a74 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016a52:	e00f      	b.n	8016a74 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8016a54:	bf00      	nop
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7ef f8f6 	bl	8005c50 <osSemaphoreAcquire>
 8016a64:	4603      	mov	r3, r0
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d1f5      	bne.n	8016a56 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8016a6a:	f7ee fe97 	bl	800579c <osKernelGetTickCount>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3710      	adds	r7, #16
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7ef f933 	bl	8005cf4 <osSemaphoreRelease>
}
 8016a8e:	bf00      	nop
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}

08016a96 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016a96:	b580      	push	{r7, lr}
 8016a98:	b082      	sub	sp, #8
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7ef f96a 	bl	8005d7c <osSemaphoreDelete>
}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d101      	bne.n	8016ac4 <sys_sem_valid+0x14>
    return 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	e000      	b.n	8016ac6 <sys_sem_valid+0x16>
  else
    return 1;
 8016ac4:	2301      	movs	r3, #1
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	370c      	adds	r7, #12
 8016aca:	46bd      	mov	sp, r7
 8016acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad0:	4770      	bx	lr

08016ad2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016ad2:	b480      	push	{r7}
 8016ad4:	b083      	sub	sp, #12
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2200      	movs	r2, #0
 8016ade:	601a      	str	r2, [r3, #0]
}
 8016ae0:	bf00      	nop
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr

08016aec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016af0:	2000      	movs	r0, #0
 8016af2:	f7ee ff15 	bl	8005920 <osMutexNew>
 8016af6:	4603      	mov	r3, r0
 8016af8:	4a01      	ldr	r2, [pc, #4]	; (8016b00 <sys_init+0x14>)
 8016afa:	6013      	str	r3, [r2, #0]
#endif
}
 8016afc:	bf00      	nop
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	20025860 	.word	0x20025860

08016b04 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016b0c:	2000      	movs	r0, #0
 8016b0e:	f7ee ff07 	bl	8005920 <osMutexNew>
 8016b12:	4602      	mov	r2, r0
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d102      	bne.n	8016b26 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016b20:	f04f 33ff 	mov.w	r3, #4294967295
 8016b24:	e000      	b.n	8016b28 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016b26:	2300      	movs	r3, #0
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3708      	adds	r7, #8
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b082      	sub	sp, #8
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7ee ff73 	bl	8005a2c <osMutexAcquire>
#endif
}
 8016b46:	bf00      	nop
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016b4e:	b580      	push	{r7, lr}
 8016b50:	b082      	sub	sp, #8
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7ee ffb1 	bl	8005ac2 <osMutexRelease>
}
 8016b60:	bf00      	nop
 8016b62:	3708      	adds	r7, #8
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b08e      	sub	sp, #56	; 0x38
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016b76:	f107 0314 	add.w	r3, r7, #20
 8016b7a:	2224      	movs	r2, #36	; 0x24
 8016b7c:	2100      	movs	r1, #0
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 f98c 	bl	8016e9c <memset>
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	617b      	str	r3, [r7, #20]
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016b90:	f107 0314 	add.w	r3, r7, #20
 8016b94:	461a      	mov	r2, r3
 8016b96:	6879      	ldr	r1, [r7, #4]
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f7ee fe14 	bl	80057c6 <osThreadNew>
 8016b9e:	4603      	mov	r3, r0
#endif
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3738      	adds	r7, #56	; 0x38
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016bac:	4b04      	ldr	r3, [pc, #16]	; (8016bc0 <sys_arch_protect+0x18>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7ee ff39 	bl	8005a2c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016bba:	2301      	movs	r3, #1
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	20025860 	.word	0x20025860

08016bc4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016bcc:	4b04      	ldr	r3, [pc, #16]	; (8016be0 <sys_arch_unprotect+0x1c>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7ee ff76 	bl	8005ac2 <osMutexRelease>
}
 8016bd6:	bf00      	nop
 8016bd8:	3708      	adds	r7, #8
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
 8016bde:	bf00      	nop
 8016be0:	20025860 	.word	0x20025860

08016be4 <std>:
 8016be4:	2300      	movs	r3, #0
 8016be6:	b510      	push	{r4, lr}
 8016be8:	4604      	mov	r4, r0
 8016bea:	e9c0 3300 	strd	r3, r3, [r0]
 8016bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016bf2:	6083      	str	r3, [r0, #8]
 8016bf4:	8181      	strh	r1, [r0, #12]
 8016bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8016bf8:	81c2      	strh	r2, [r0, #14]
 8016bfa:	6183      	str	r3, [r0, #24]
 8016bfc:	4619      	mov	r1, r3
 8016bfe:	2208      	movs	r2, #8
 8016c00:	305c      	adds	r0, #92	; 0x5c
 8016c02:	f000 f94b 	bl	8016e9c <memset>
 8016c06:	4b05      	ldr	r3, [pc, #20]	; (8016c1c <std+0x38>)
 8016c08:	6263      	str	r3, [r4, #36]	; 0x24
 8016c0a:	4b05      	ldr	r3, [pc, #20]	; (8016c20 <std+0x3c>)
 8016c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c0e:	4b05      	ldr	r3, [pc, #20]	; (8016c24 <std+0x40>)
 8016c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c12:	4b05      	ldr	r3, [pc, #20]	; (8016c28 <std+0x44>)
 8016c14:	6224      	str	r4, [r4, #32]
 8016c16:	6323      	str	r3, [r4, #48]	; 0x30
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	bf00      	nop
 8016c1c:	080171e5 	.word	0x080171e5
 8016c20:	08017207 	.word	0x08017207
 8016c24:	0801723f 	.word	0x0801723f
 8016c28:	08017263 	.word	0x08017263

08016c2c <_cleanup_r>:
 8016c2c:	4901      	ldr	r1, [pc, #4]	; (8016c34 <_cleanup_r+0x8>)
 8016c2e:	f000 b8af 	b.w	8016d90 <_fwalk_reent>
 8016c32:	bf00      	nop
 8016c34:	0801742d 	.word	0x0801742d

08016c38 <__sfmoreglue>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	1e4a      	subs	r2, r1, #1
 8016c3c:	2568      	movs	r5, #104	; 0x68
 8016c3e:	4355      	muls	r5, r2
 8016c40:	460e      	mov	r6, r1
 8016c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016c46:	f000 f981 	bl	8016f4c <_malloc_r>
 8016c4a:	4604      	mov	r4, r0
 8016c4c:	b140      	cbz	r0, 8016c60 <__sfmoreglue+0x28>
 8016c4e:	2100      	movs	r1, #0
 8016c50:	e9c0 1600 	strd	r1, r6, [r0]
 8016c54:	300c      	adds	r0, #12
 8016c56:	60a0      	str	r0, [r4, #8]
 8016c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016c5c:	f000 f91e 	bl	8016e9c <memset>
 8016c60:	4620      	mov	r0, r4
 8016c62:	bd70      	pop	{r4, r5, r6, pc}

08016c64 <__sfp_lock_acquire>:
 8016c64:	4801      	ldr	r0, [pc, #4]	; (8016c6c <__sfp_lock_acquire+0x8>)
 8016c66:	f000 b8d8 	b.w	8016e1a <__retarget_lock_acquire_recursive>
 8016c6a:	bf00      	nop
 8016c6c:	2002586c 	.word	0x2002586c

08016c70 <__sfp_lock_release>:
 8016c70:	4801      	ldr	r0, [pc, #4]	; (8016c78 <__sfp_lock_release+0x8>)
 8016c72:	f000 b8d3 	b.w	8016e1c <__retarget_lock_release_recursive>
 8016c76:	bf00      	nop
 8016c78:	2002586c 	.word	0x2002586c

08016c7c <__sinit_lock_acquire>:
 8016c7c:	4801      	ldr	r0, [pc, #4]	; (8016c84 <__sinit_lock_acquire+0x8>)
 8016c7e:	f000 b8cc 	b.w	8016e1a <__retarget_lock_acquire_recursive>
 8016c82:	bf00      	nop
 8016c84:	20025867 	.word	0x20025867

08016c88 <__sinit_lock_release>:
 8016c88:	4801      	ldr	r0, [pc, #4]	; (8016c90 <__sinit_lock_release+0x8>)
 8016c8a:	f000 b8c7 	b.w	8016e1c <__retarget_lock_release_recursive>
 8016c8e:	bf00      	nop
 8016c90:	20025867 	.word	0x20025867

08016c94 <__sinit>:
 8016c94:	b510      	push	{r4, lr}
 8016c96:	4604      	mov	r4, r0
 8016c98:	f7ff fff0 	bl	8016c7c <__sinit_lock_acquire>
 8016c9c:	69a3      	ldr	r3, [r4, #24]
 8016c9e:	b11b      	cbz	r3, 8016ca8 <__sinit+0x14>
 8016ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca4:	f7ff bff0 	b.w	8016c88 <__sinit_lock_release>
 8016ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016cac:	6523      	str	r3, [r4, #80]	; 0x50
 8016cae:	4b13      	ldr	r3, [pc, #76]	; (8016cfc <__sinit+0x68>)
 8016cb0:	4a13      	ldr	r2, [pc, #76]	; (8016d00 <__sinit+0x6c>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016cb6:	42a3      	cmp	r3, r4
 8016cb8:	bf04      	itt	eq
 8016cba:	2301      	moveq	r3, #1
 8016cbc:	61a3      	streq	r3, [r4, #24]
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f000 f820 	bl	8016d04 <__sfp>
 8016cc4:	6060      	str	r0, [r4, #4]
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f000 f81c 	bl	8016d04 <__sfp>
 8016ccc:	60a0      	str	r0, [r4, #8]
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f000 f818 	bl	8016d04 <__sfp>
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	60e0      	str	r0, [r4, #12]
 8016cd8:	2104      	movs	r1, #4
 8016cda:	6860      	ldr	r0, [r4, #4]
 8016cdc:	f7ff ff82 	bl	8016be4 <std>
 8016ce0:	68a0      	ldr	r0, [r4, #8]
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	2109      	movs	r1, #9
 8016ce6:	f7ff ff7d 	bl	8016be4 <std>
 8016cea:	68e0      	ldr	r0, [r4, #12]
 8016cec:	2202      	movs	r2, #2
 8016cee:	2112      	movs	r1, #18
 8016cf0:	f7ff ff78 	bl	8016be4 <std>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	61a3      	str	r3, [r4, #24]
 8016cf8:	e7d2      	b.n	8016ca0 <__sinit+0xc>
 8016cfa:	bf00      	nop
 8016cfc:	0801ba58 	.word	0x0801ba58
 8016d00:	08016c2d 	.word	0x08016c2d

08016d04 <__sfp>:
 8016d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d06:	4607      	mov	r7, r0
 8016d08:	f7ff ffac 	bl	8016c64 <__sfp_lock_acquire>
 8016d0c:	4b1e      	ldr	r3, [pc, #120]	; (8016d88 <__sfp+0x84>)
 8016d0e:	681e      	ldr	r6, [r3, #0]
 8016d10:	69b3      	ldr	r3, [r6, #24]
 8016d12:	b913      	cbnz	r3, 8016d1a <__sfp+0x16>
 8016d14:	4630      	mov	r0, r6
 8016d16:	f7ff ffbd 	bl	8016c94 <__sinit>
 8016d1a:	3648      	adds	r6, #72	; 0x48
 8016d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016d20:	3b01      	subs	r3, #1
 8016d22:	d503      	bpl.n	8016d2c <__sfp+0x28>
 8016d24:	6833      	ldr	r3, [r6, #0]
 8016d26:	b30b      	cbz	r3, 8016d6c <__sfp+0x68>
 8016d28:	6836      	ldr	r6, [r6, #0]
 8016d2a:	e7f7      	b.n	8016d1c <__sfp+0x18>
 8016d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d30:	b9d5      	cbnz	r5, 8016d68 <__sfp+0x64>
 8016d32:	4b16      	ldr	r3, [pc, #88]	; (8016d8c <__sfp+0x88>)
 8016d34:	60e3      	str	r3, [r4, #12]
 8016d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8016d3c:	f000 f86c 	bl	8016e18 <__retarget_lock_init_recursive>
 8016d40:	f7ff ff96 	bl	8016c70 <__sfp_lock_release>
 8016d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016d4c:	6025      	str	r5, [r4, #0]
 8016d4e:	61a5      	str	r5, [r4, #24]
 8016d50:	2208      	movs	r2, #8
 8016d52:	4629      	mov	r1, r5
 8016d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016d58:	f000 f8a0 	bl	8016e9c <memset>
 8016d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016d64:	4620      	mov	r0, r4
 8016d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d68:	3468      	adds	r4, #104	; 0x68
 8016d6a:	e7d9      	b.n	8016d20 <__sfp+0x1c>
 8016d6c:	2104      	movs	r1, #4
 8016d6e:	4638      	mov	r0, r7
 8016d70:	f7ff ff62 	bl	8016c38 <__sfmoreglue>
 8016d74:	4604      	mov	r4, r0
 8016d76:	6030      	str	r0, [r6, #0]
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	d1d5      	bne.n	8016d28 <__sfp+0x24>
 8016d7c:	f7ff ff78 	bl	8016c70 <__sfp_lock_release>
 8016d80:	230c      	movs	r3, #12
 8016d82:	603b      	str	r3, [r7, #0]
 8016d84:	e7ee      	b.n	8016d64 <__sfp+0x60>
 8016d86:	bf00      	nop
 8016d88:	0801ba58 	.word	0x0801ba58
 8016d8c:	ffff0001 	.word	0xffff0001

08016d90 <_fwalk_reent>:
 8016d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d94:	4606      	mov	r6, r0
 8016d96:	4688      	mov	r8, r1
 8016d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016d9c:	2700      	movs	r7, #0
 8016d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016da2:	f1b9 0901 	subs.w	r9, r9, #1
 8016da6:	d505      	bpl.n	8016db4 <_fwalk_reent+0x24>
 8016da8:	6824      	ldr	r4, [r4, #0]
 8016daa:	2c00      	cmp	r4, #0
 8016dac:	d1f7      	bne.n	8016d9e <_fwalk_reent+0xe>
 8016dae:	4638      	mov	r0, r7
 8016db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016db4:	89ab      	ldrh	r3, [r5, #12]
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d907      	bls.n	8016dca <_fwalk_reent+0x3a>
 8016dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	d003      	beq.n	8016dca <_fwalk_reent+0x3a>
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	47c0      	blx	r8
 8016dc8:	4307      	orrs	r7, r0
 8016dca:	3568      	adds	r5, #104	; 0x68
 8016dcc:	e7e9      	b.n	8016da2 <_fwalk_reent+0x12>
	...

08016dd0 <__libc_init_array>:
 8016dd0:	b570      	push	{r4, r5, r6, lr}
 8016dd2:	4d0d      	ldr	r5, [pc, #52]	; (8016e08 <__libc_init_array+0x38>)
 8016dd4:	4c0d      	ldr	r4, [pc, #52]	; (8016e0c <__libc_init_array+0x3c>)
 8016dd6:	1b64      	subs	r4, r4, r5
 8016dd8:	10a4      	asrs	r4, r4, #2
 8016dda:	2600      	movs	r6, #0
 8016ddc:	42a6      	cmp	r6, r4
 8016dde:	d109      	bne.n	8016df4 <__libc_init_array+0x24>
 8016de0:	4d0b      	ldr	r5, [pc, #44]	; (8016e10 <__libc_init_array+0x40>)
 8016de2:	4c0c      	ldr	r4, [pc, #48]	; (8016e14 <__libc_init_array+0x44>)
 8016de4:	f001 f9aa 	bl	801813c <_init>
 8016de8:	1b64      	subs	r4, r4, r5
 8016dea:	10a4      	asrs	r4, r4, #2
 8016dec:	2600      	movs	r6, #0
 8016dee:	42a6      	cmp	r6, r4
 8016df0:	d105      	bne.n	8016dfe <__libc_init_array+0x2e>
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016df8:	4798      	blx	r3
 8016dfa:	3601      	adds	r6, #1
 8016dfc:	e7ee      	b.n	8016ddc <__libc_init_array+0xc>
 8016dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e02:	4798      	blx	r3
 8016e04:	3601      	adds	r6, #1
 8016e06:	e7f2      	b.n	8016dee <__libc_init_array+0x1e>
 8016e08:	0801bb4c 	.word	0x0801bb4c
 8016e0c:	0801bb4c 	.word	0x0801bb4c
 8016e10:	0801bb4c 	.word	0x0801bb4c
 8016e14:	0801bb50 	.word	0x0801bb50

08016e18 <__retarget_lock_init_recursive>:
 8016e18:	4770      	bx	lr

08016e1a <__retarget_lock_acquire_recursive>:
 8016e1a:	4770      	bx	lr

08016e1c <__retarget_lock_release_recursive>:
 8016e1c:	4770      	bx	lr
	...

08016e20 <malloc>:
 8016e20:	4b02      	ldr	r3, [pc, #8]	; (8016e2c <malloc+0xc>)
 8016e22:	4601      	mov	r1, r0
 8016e24:	6818      	ldr	r0, [r3, #0]
 8016e26:	f000 b891 	b.w	8016f4c <_malloc_r>
 8016e2a:	bf00      	nop
 8016e2c:	2000001c 	.word	0x2000001c

08016e30 <memcmp>:
 8016e30:	b530      	push	{r4, r5, lr}
 8016e32:	3901      	subs	r1, #1
 8016e34:	2400      	movs	r4, #0
 8016e36:	42a2      	cmp	r2, r4
 8016e38:	d101      	bne.n	8016e3e <memcmp+0xe>
 8016e3a:	2000      	movs	r0, #0
 8016e3c:	e005      	b.n	8016e4a <memcmp+0x1a>
 8016e3e:	5d03      	ldrb	r3, [r0, r4]
 8016e40:	3401      	adds	r4, #1
 8016e42:	5d0d      	ldrb	r5, [r1, r4]
 8016e44:	42ab      	cmp	r3, r5
 8016e46:	d0f6      	beq.n	8016e36 <memcmp+0x6>
 8016e48:	1b58      	subs	r0, r3, r5
 8016e4a:	bd30      	pop	{r4, r5, pc}

08016e4c <memcpy>:
 8016e4c:	440a      	add	r2, r1
 8016e4e:	4291      	cmp	r1, r2
 8016e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e54:	d100      	bne.n	8016e58 <memcpy+0xc>
 8016e56:	4770      	bx	lr
 8016e58:	b510      	push	{r4, lr}
 8016e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e62:	4291      	cmp	r1, r2
 8016e64:	d1f9      	bne.n	8016e5a <memcpy+0xe>
 8016e66:	bd10      	pop	{r4, pc}

08016e68 <memmove>:
 8016e68:	4288      	cmp	r0, r1
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	eb01 0402 	add.w	r4, r1, r2
 8016e70:	d902      	bls.n	8016e78 <memmove+0x10>
 8016e72:	4284      	cmp	r4, r0
 8016e74:	4623      	mov	r3, r4
 8016e76:	d807      	bhi.n	8016e88 <memmove+0x20>
 8016e78:	1e43      	subs	r3, r0, #1
 8016e7a:	42a1      	cmp	r1, r4
 8016e7c:	d008      	beq.n	8016e90 <memmove+0x28>
 8016e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e86:	e7f8      	b.n	8016e7a <memmove+0x12>
 8016e88:	4402      	add	r2, r0
 8016e8a:	4601      	mov	r1, r0
 8016e8c:	428a      	cmp	r2, r1
 8016e8e:	d100      	bne.n	8016e92 <memmove+0x2a>
 8016e90:	bd10      	pop	{r4, pc}
 8016e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e9a:	e7f7      	b.n	8016e8c <memmove+0x24>

08016e9c <memset>:
 8016e9c:	4402      	add	r2, r0
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	d100      	bne.n	8016ea6 <memset+0xa>
 8016ea4:	4770      	bx	lr
 8016ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eaa:	e7f9      	b.n	8016ea0 <memset+0x4>

08016eac <_free_r>:
 8016eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016eae:	2900      	cmp	r1, #0
 8016eb0:	d048      	beq.n	8016f44 <_free_r+0x98>
 8016eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016eb6:	9001      	str	r0, [sp, #4]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	f1a1 0404 	sub.w	r4, r1, #4
 8016ebe:	bfb8      	it	lt
 8016ec0:	18e4      	addlt	r4, r4, r3
 8016ec2:	f000 fb13 	bl	80174ec <__malloc_lock>
 8016ec6:	4a20      	ldr	r2, [pc, #128]	; (8016f48 <_free_r+0x9c>)
 8016ec8:	9801      	ldr	r0, [sp, #4]
 8016eca:	6813      	ldr	r3, [r2, #0]
 8016ecc:	4615      	mov	r5, r2
 8016ece:	b933      	cbnz	r3, 8016ede <_free_r+0x32>
 8016ed0:	6063      	str	r3, [r4, #4]
 8016ed2:	6014      	str	r4, [r2, #0]
 8016ed4:	b003      	add	sp, #12
 8016ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016eda:	f000 bb0d 	b.w	80174f8 <__malloc_unlock>
 8016ede:	42a3      	cmp	r3, r4
 8016ee0:	d90b      	bls.n	8016efa <_free_r+0x4e>
 8016ee2:	6821      	ldr	r1, [r4, #0]
 8016ee4:	1862      	adds	r2, r4, r1
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	bf04      	itt	eq
 8016eea:	681a      	ldreq	r2, [r3, #0]
 8016eec:	685b      	ldreq	r3, [r3, #4]
 8016eee:	6063      	str	r3, [r4, #4]
 8016ef0:	bf04      	itt	eq
 8016ef2:	1852      	addeq	r2, r2, r1
 8016ef4:	6022      	streq	r2, [r4, #0]
 8016ef6:	602c      	str	r4, [r5, #0]
 8016ef8:	e7ec      	b.n	8016ed4 <_free_r+0x28>
 8016efa:	461a      	mov	r2, r3
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	b10b      	cbz	r3, 8016f04 <_free_r+0x58>
 8016f00:	42a3      	cmp	r3, r4
 8016f02:	d9fa      	bls.n	8016efa <_free_r+0x4e>
 8016f04:	6811      	ldr	r1, [r2, #0]
 8016f06:	1855      	adds	r5, r2, r1
 8016f08:	42a5      	cmp	r5, r4
 8016f0a:	d10b      	bne.n	8016f24 <_free_r+0x78>
 8016f0c:	6824      	ldr	r4, [r4, #0]
 8016f0e:	4421      	add	r1, r4
 8016f10:	1854      	adds	r4, r2, r1
 8016f12:	42a3      	cmp	r3, r4
 8016f14:	6011      	str	r1, [r2, #0]
 8016f16:	d1dd      	bne.n	8016ed4 <_free_r+0x28>
 8016f18:	681c      	ldr	r4, [r3, #0]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	6053      	str	r3, [r2, #4]
 8016f1e:	4421      	add	r1, r4
 8016f20:	6011      	str	r1, [r2, #0]
 8016f22:	e7d7      	b.n	8016ed4 <_free_r+0x28>
 8016f24:	d902      	bls.n	8016f2c <_free_r+0x80>
 8016f26:	230c      	movs	r3, #12
 8016f28:	6003      	str	r3, [r0, #0]
 8016f2a:	e7d3      	b.n	8016ed4 <_free_r+0x28>
 8016f2c:	6825      	ldr	r5, [r4, #0]
 8016f2e:	1961      	adds	r1, r4, r5
 8016f30:	428b      	cmp	r3, r1
 8016f32:	bf04      	itt	eq
 8016f34:	6819      	ldreq	r1, [r3, #0]
 8016f36:	685b      	ldreq	r3, [r3, #4]
 8016f38:	6063      	str	r3, [r4, #4]
 8016f3a:	bf04      	itt	eq
 8016f3c:	1949      	addeq	r1, r1, r5
 8016f3e:	6021      	streq	r1, [r4, #0]
 8016f40:	6054      	str	r4, [r2, #4]
 8016f42:	e7c7      	b.n	8016ed4 <_free_r+0x28>
 8016f44:	b003      	add	sp, #12
 8016f46:	bd30      	pop	{r4, r5, pc}
 8016f48:	20004c18 	.word	0x20004c18

08016f4c <_malloc_r>:
 8016f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4e:	1ccd      	adds	r5, r1, #3
 8016f50:	f025 0503 	bic.w	r5, r5, #3
 8016f54:	3508      	adds	r5, #8
 8016f56:	2d0c      	cmp	r5, #12
 8016f58:	bf38      	it	cc
 8016f5a:	250c      	movcc	r5, #12
 8016f5c:	2d00      	cmp	r5, #0
 8016f5e:	4606      	mov	r6, r0
 8016f60:	db01      	blt.n	8016f66 <_malloc_r+0x1a>
 8016f62:	42a9      	cmp	r1, r5
 8016f64:	d903      	bls.n	8016f6e <_malloc_r+0x22>
 8016f66:	230c      	movs	r3, #12
 8016f68:	6033      	str	r3, [r6, #0]
 8016f6a:	2000      	movs	r0, #0
 8016f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f6e:	f000 fabd 	bl	80174ec <__malloc_lock>
 8016f72:	4921      	ldr	r1, [pc, #132]	; (8016ff8 <_malloc_r+0xac>)
 8016f74:	680a      	ldr	r2, [r1, #0]
 8016f76:	4614      	mov	r4, r2
 8016f78:	b99c      	cbnz	r4, 8016fa2 <_malloc_r+0x56>
 8016f7a:	4f20      	ldr	r7, [pc, #128]	; (8016ffc <_malloc_r+0xb0>)
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	b923      	cbnz	r3, 8016f8a <_malloc_r+0x3e>
 8016f80:	4621      	mov	r1, r4
 8016f82:	4630      	mov	r0, r6
 8016f84:	f000 f8fe 	bl	8017184 <_sbrk_r>
 8016f88:	6038      	str	r0, [r7, #0]
 8016f8a:	4629      	mov	r1, r5
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f000 f8f9 	bl	8017184 <_sbrk_r>
 8016f92:	1c43      	adds	r3, r0, #1
 8016f94:	d123      	bne.n	8016fde <_malloc_r+0x92>
 8016f96:	230c      	movs	r3, #12
 8016f98:	6033      	str	r3, [r6, #0]
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	f000 faac 	bl	80174f8 <__malloc_unlock>
 8016fa0:	e7e3      	b.n	8016f6a <_malloc_r+0x1e>
 8016fa2:	6823      	ldr	r3, [r4, #0]
 8016fa4:	1b5b      	subs	r3, r3, r5
 8016fa6:	d417      	bmi.n	8016fd8 <_malloc_r+0x8c>
 8016fa8:	2b0b      	cmp	r3, #11
 8016faa:	d903      	bls.n	8016fb4 <_malloc_r+0x68>
 8016fac:	6023      	str	r3, [r4, #0]
 8016fae:	441c      	add	r4, r3
 8016fb0:	6025      	str	r5, [r4, #0]
 8016fb2:	e004      	b.n	8016fbe <_malloc_r+0x72>
 8016fb4:	6863      	ldr	r3, [r4, #4]
 8016fb6:	42a2      	cmp	r2, r4
 8016fb8:	bf0c      	ite	eq
 8016fba:	600b      	streq	r3, [r1, #0]
 8016fbc:	6053      	strne	r3, [r2, #4]
 8016fbe:	4630      	mov	r0, r6
 8016fc0:	f000 fa9a 	bl	80174f8 <__malloc_unlock>
 8016fc4:	f104 000b 	add.w	r0, r4, #11
 8016fc8:	1d23      	adds	r3, r4, #4
 8016fca:	f020 0007 	bic.w	r0, r0, #7
 8016fce:	1ac2      	subs	r2, r0, r3
 8016fd0:	d0cc      	beq.n	8016f6c <_malloc_r+0x20>
 8016fd2:	1a1b      	subs	r3, r3, r0
 8016fd4:	50a3      	str	r3, [r4, r2]
 8016fd6:	e7c9      	b.n	8016f6c <_malloc_r+0x20>
 8016fd8:	4622      	mov	r2, r4
 8016fda:	6864      	ldr	r4, [r4, #4]
 8016fdc:	e7cc      	b.n	8016f78 <_malloc_r+0x2c>
 8016fde:	1cc4      	adds	r4, r0, #3
 8016fe0:	f024 0403 	bic.w	r4, r4, #3
 8016fe4:	42a0      	cmp	r0, r4
 8016fe6:	d0e3      	beq.n	8016fb0 <_malloc_r+0x64>
 8016fe8:	1a21      	subs	r1, r4, r0
 8016fea:	4630      	mov	r0, r6
 8016fec:	f000 f8ca 	bl	8017184 <_sbrk_r>
 8016ff0:	3001      	adds	r0, #1
 8016ff2:	d1dd      	bne.n	8016fb0 <_malloc_r+0x64>
 8016ff4:	e7cf      	b.n	8016f96 <_malloc_r+0x4a>
 8016ff6:	bf00      	nop
 8016ff8:	20004c18 	.word	0x20004c18
 8016ffc:	20004c1c 	.word	0x20004c1c

08017000 <iprintf>:
 8017000:	b40f      	push	{r0, r1, r2, r3}
 8017002:	4b0a      	ldr	r3, [pc, #40]	; (801702c <iprintf+0x2c>)
 8017004:	b513      	push	{r0, r1, r4, lr}
 8017006:	681c      	ldr	r4, [r3, #0]
 8017008:	b124      	cbz	r4, 8017014 <iprintf+0x14>
 801700a:	69a3      	ldr	r3, [r4, #24]
 801700c:	b913      	cbnz	r3, 8017014 <iprintf+0x14>
 801700e:	4620      	mov	r0, r4
 8017010:	f7ff fe40 	bl	8016c94 <__sinit>
 8017014:	ab05      	add	r3, sp, #20
 8017016:	9a04      	ldr	r2, [sp, #16]
 8017018:	68a1      	ldr	r1, [r4, #8]
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	4620      	mov	r0, r4
 801701e:	f000 fbf7 	bl	8017810 <_vfiprintf_r>
 8017022:	b002      	add	sp, #8
 8017024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017028:	b004      	add	sp, #16
 801702a:	4770      	bx	lr
 801702c:	2000001c 	.word	0x2000001c

08017030 <rand>:
 8017030:	4b17      	ldr	r3, [pc, #92]	; (8017090 <rand+0x60>)
 8017032:	b510      	push	{r4, lr}
 8017034:	681c      	ldr	r4, [r3, #0]
 8017036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017038:	b9b3      	cbnz	r3, 8017068 <rand+0x38>
 801703a:	2018      	movs	r0, #24
 801703c:	f7ff fef0 	bl	8016e20 <malloc>
 8017040:	63a0      	str	r0, [r4, #56]	; 0x38
 8017042:	b928      	cbnz	r0, 8017050 <rand+0x20>
 8017044:	4602      	mov	r2, r0
 8017046:	4b13      	ldr	r3, [pc, #76]	; (8017094 <rand+0x64>)
 8017048:	4813      	ldr	r0, [pc, #76]	; (8017098 <rand+0x68>)
 801704a:	214e      	movs	r1, #78	; 0x4e
 801704c:	f000 f93a 	bl	80172c4 <__assert_func>
 8017050:	4a12      	ldr	r2, [pc, #72]	; (801709c <rand+0x6c>)
 8017052:	4b13      	ldr	r3, [pc, #76]	; (80170a0 <rand+0x70>)
 8017054:	e9c0 2300 	strd	r2, r3, [r0]
 8017058:	4b12      	ldr	r3, [pc, #72]	; (80170a4 <rand+0x74>)
 801705a:	6083      	str	r3, [r0, #8]
 801705c:	230b      	movs	r3, #11
 801705e:	8183      	strh	r3, [r0, #12]
 8017060:	2201      	movs	r2, #1
 8017062:	2300      	movs	r3, #0
 8017064:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017068:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801706a:	480f      	ldr	r0, [pc, #60]	; (80170a8 <rand+0x78>)
 801706c:	690a      	ldr	r2, [r1, #16]
 801706e:	694b      	ldr	r3, [r1, #20]
 8017070:	4c0e      	ldr	r4, [pc, #56]	; (80170ac <rand+0x7c>)
 8017072:	4350      	muls	r0, r2
 8017074:	fb04 0003 	mla	r0, r4, r3, r0
 8017078:	fba2 3404 	umull	r3, r4, r2, r4
 801707c:	1c5a      	adds	r2, r3, #1
 801707e:	4404      	add	r4, r0
 8017080:	f144 0000 	adc.w	r0, r4, #0
 8017084:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017088:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801708c:	bd10      	pop	{r4, pc}
 801708e:	bf00      	nop
 8017090:	2000001c 	.word	0x2000001c
 8017094:	0801ba5c 	.word	0x0801ba5c
 8017098:	0801ba73 	.word	0x0801ba73
 801709c:	abcd330e 	.word	0xabcd330e
 80170a0:	e66d1234 	.word	0xe66d1234
 80170a4:	0005deec 	.word	0x0005deec
 80170a8:	5851f42d 	.word	0x5851f42d
 80170ac:	4c957f2d 	.word	0x4c957f2d

080170b0 <cleanup_glue>:
 80170b0:	b538      	push	{r3, r4, r5, lr}
 80170b2:	460c      	mov	r4, r1
 80170b4:	6809      	ldr	r1, [r1, #0]
 80170b6:	4605      	mov	r5, r0
 80170b8:	b109      	cbz	r1, 80170be <cleanup_glue+0xe>
 80170ba:	f7ff fff9 	bl	80170b0 <cleanup_glue>
 80170be:	4621      	mov	r1, r4
 80170c0:	4628      	mov	r0, r5
 80170c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170c6:	f7ff bef1 	b.w	8016eac <_free_r>
	...

080170cc <_reclaim_reent>:
 80170cc:	4b2c      	ldr	r3, [pc, #176]	; (8017180 <_reclaim_reent+0xb4>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	4283      	cmp	r3, r0
 80170d2:	b570      	push	{r4, r5, r6, lr}
 80170d4:	4604      	mov	r4, r0
 80170d6:	d051      	beq.n	801717c <_reclaim_reent+0xb0>
 80170d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80170da:	b143      	cbz	r3, 80170ee <_reclaim_reent+0x22>
 80170dc:	68db      	ldr	r3, [r3, #12]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d14a      	bne.n	8017178 <_reclaim_reent+0xac>
 80170e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170e4:	6819      	ldr	r1, [r3, #0]
 80170e6:	b111      	cbz	r1, 80170ee <_reclaim_reent+0x22>
 80170e8:	4620      	mov	r0, r4
 80170ea:	f7ff fedf 	bl	8016eac <_free_r>
 80170ee:	6961      	ldr	r1, [r4, #20]
 80170f0:	b111      	cbz	r1, 80170f8 <_reclaim_reent+0x2c>
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7ff feda 	bl	8016eac <_free_r>
 80170f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80170fa:	b111      	cbz	r1, 8017102 <_reclaim_reent+0x36>
 80170fc:	4620      	mov	r0, r4
 80170fe:	f7ff fed5 	bl	8016eac <_free_r>
 8017102:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017104:	b111      	cbz	r1, 801710c <_reclaim_reent+0x40>
 8017106:	4620      	mov	r0, r4
 8017108:	f7ff fed0 	bl	8016eac <_free_r>
 801710c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801710e:	b111      	cbz	r1, 8017116 <_reclaim_reent+0x4a>
 8017110:	4620      	mov	r0, r4
 8017112:	f7ff fecb 	bl	8016eac <_free_r>
 8017116:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017118:	b111      	cbz	r1, 8017120 <_reclaim_reent+0x54>
 801711a:	4620      	mov	r0, r4
 801711c:	f7ff fec6 	bl	8016eac <_free_r>
 8017120:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017122:	b111      	cbz	r1, 801712a <_reclaim_reent+0x5e>
 8017124:	4620      	mov	r0, r4
 8017126:	f7ff fec1 	bl	8016eac <_free_r>
 801712a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801712c:	b111      	cbz	r1, 8017134 <_reclaim_reent+0x68>
 801712e:	4620      	mov	r0, r4
 8017130:	f7ff febc 	bl	8016eac <_free_r>
 8017134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017136:	b111      	cbz	r1, 801713e <_reclaim_reent+0x72>
 8017138:	4620      	mov	r0, r4
 801713a:	f7ff feb7 	bl	8016eac <_free_r>
 801713e:	69a3      	ldr	r3, [r4, #24]
 8017140:	b1e3      	cbz	r3, 801717c <_reclaim_reent+0xb0>
 8017142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017144:	4620      	mov	r0, r4
 8017146:	4798      	blx	r3
 8017148:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801714a:	b1b9      	cbz	r1, 801717c <_reclaim_reent+0xb0>
 801714c:	4620      	mov	r0, r4
 801714e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017152:	f7ff bfad 	b.w	80170b0 <cleanup_glue>
 8017156:	5949      	ldr	r1, [r1, r5]
 8017158:	b941      	cbnz	r1, 801716c <_reclaim_reent+0xa0>
 801715a:	3504      	adds	r5, #4
 801715c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801715e:	2d80      	cmp	r5, #128	; 0x80
 8017160:	68d9      	ldr	r1, [r3, #12]
 8017162:	d1f8      	bne.n	8017156 <_reclaim_reent+0x8a>
 8017164:	4620      	mov	r0, r4
 8017166:	f7ff fea1 	bl	8016eac <_free_r>
 801716a:	e7ba      	b.n	80170e2 <_reclaim_reent+0x16>
 801716c:	680e      	ldr	r6, [r1, #0]
 801716e:	4620      	mov	r0, r4
 8017170:	f7ff fe9c 	bl	8016eac <_free_r>
 8017174:	4631      	mov	r1, r6
 8017176:	e7ef      	b.n	8017158 <_reclaim_reent+0x8c>
 8017178:	2500      	movs	r5, #0
 801717a:	e7ef      	b.n	801715c <_reclaim_reent+0x90>
 801717c:	bd70      	pop	{r4, r5, r6, pc}
 801717e:	bf00      	nop
 8017180:	2000001c 	.word	0x2000001c

08017184 <_sbrk_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4d06      	ldr	r5, [pc, #24]	; (80171a0 <_sbrk_r+0x1c>)
 8017188:	2300      	movs	r3, #0
 801718a:	4604      	mov	r4, r0
 801718c:	4608      	mov	r0, r1
 801718e:	602b      	str	r3, [r5, #0]
 8017190:	f7e9 fdfe 	bl	8000d90 <_sbrk>
 8017194:	1c43      	adds	r3, r0, #1
 8017196:	d102      	bne.n	801719e <_sbrk_r+0x1a>
 8017198:	682b      	ldr	r3, [r5, #0]
 801719a:	b103      	cbz	r3, 801719e <_sbrk_r+0x1a>
 801719c:	6023      	str	r3, [r4, #0]
 801719e:	bd38      	pop	{r3, r4, r5, pc}
 80171a0:	2002585c 	.word	0x2002585c

080171a4 <siprintf>:
 80171a4:	b40e      	push	{r1, r2, r3}
 80171a6:	b500      	push	{lr}
 80171a8:	b09c      	sub	sp, #112	; 0x70
 80171aa:	ab1d      	add	r3, sp, #116	; 0x74
 80171ac:	9002      	str	r0, [sp, #8]
 80171ae:	9006      	str	r0, [sp, #24]
 80171b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80171b4:	4809      	ldr	r0, [pc, #36]	; (80171dc <siprintf+0x38>)
 80171b6:	9107      	str	r1, [sp, #28]
 80171b8:	9104      	str	r1, [sp, #16]
 80171ba:	4909      	ldr	r1, [pc, #36]	; (80171e0 <siprintf+0x3c>)
 80171bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80171c0:	9105      	str	r1, [sp, #20]
 80171c2:	6800      	ldr	r0, [r0, #0]
 80171c4:	9301      	str	r3, [sp, #4]
 80171c6:	a902      	add	r1, sp, #8
 80171c8:	f000 f9f8 	bl	80175bc <_svfiprintf_r>
 80171cc:	9b02      	ldr	r3, [sp, #8]
 80171ce:	2200      	movs	r2, #0
 80171d0:	701a      	strb	r2, [r3, #0]
 80171d2:	b01c      	add	sp, #112	; 0x70
 80171d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80171d8:	b003      	add	sp, #12
 80171da:	4770      	bx	lr
 80171dc:	2000001c 	.word	0x2000001c
 80171e0:	ffff0208 	.word	0xffff0208

080171e4 <__sread>:
 80171e4:	b510      	push	{r4, lr}
 80171e6:	460c      	mov	r4, r1
 80171e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171ec:	f000 fdd4 	bl	8017d98 <_read_r>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	bfab      	itete	ge
 80171f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80171f6:	89a3      	ldrhlt	r3, [r4, #12]
 80171f8:	181b      	addge	r3, r3, r0
 80171fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80171fe:	bfac      	ite	ge
 8017200:	6563      	strge	r3, [r4, #84]	; 0x54
 8017202:	81a3      	strhlt	r3, [r4, #12]
 8017204:	bd10      	pop	{r4, pc}

08017206 <__swrite>:
 8017206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801720a:	461f      	mov	r7, r3
 801720c:	898b      	ldrh	r3, [r1, #12]
 801720e:	05db      	lsls	r3, r3, #23
 8017210:	4605      	mov	r5, r0
 8017212:	460c      	mov	r4, r1
 8017214:	4616      	mov	r6, r2
 8017216:	d505      	bpl.n	8017224 <__swrite+0x1e>
 8017218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801721c:	2302      	movs	r3, #2
 801721e:	2200      	movs	r2, #0
 8017220:	f000 f952 	bl	80174c8 <_lseek_r>
 8017224:	89a3      	ldrh	r3, [r4, #12]
 8017226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801722a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801722e:	81a3      	strh	r3, [r4, #12]
 8017230:	4632      	mov	r2, r6
 8017232:	463b      	mov	r3, r7
 8017234:	4628      	mov	r0, r5
 8017236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801723a:	f000 b831 	b.w	80172a0 <_write_r>

0801723e <__sseek>:
 801723e:	b510      	push	{r4, lr}
 8017240:	460c      	mov	r4, r1
 8017242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017246:	f000 f93f 	bl	80174c8 <_lseek_r>
 801724a:	1c43      	adds	r3, r0, #1
 801724c:	89a3      	ldrh	r3, [r4, #12]
 801724e:	bf15      	itete	ne
 8017250:	6560      	strne	r0, [r4, #84]	; 0x54
 8017252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801725a:	81a3      	strheq	r3, [r4, #12]
 801725c:	bf18      	it	ne
 801725e:	81a3      	strhne	r3, [r4, #12]
 8017260:	bd10      	pop	{r4, pc}

08017262 <__sclose>:
 8017262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017266:	f000 b84b 	b.w	8017300 <_close_r>

0801726a <strcpy>:
 801726a:	4603      	mov	r3, r0
 801726c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017270:	f803 2b01 	strb.w	r2, [r3], #1
 8017274:	2a00      	cmp	r2, #0
 8017276:	d1f9      	bne.n	801726c <strcpy+0x2>
 8017278:	4770      	bx	lr

0801727a <strncpy>:
 801727a:	b510      	push	{r4, lr}
 801727c:	3901      	subs	r1, #1
 801727e:	4603      	mov	r3, r0
 8017280:	b132      	cbz	r2, 8017290 <strncpy+0x16>
 8017282:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017286:	f803 4b01 	strb.w	r4, [r3], #1
 801728a:	3a01      	subs	r2, #1
 801728c:	2c00      	cmp	r4, #0
 801728e:	d1f7      	bne.n	8017280 <strncpy+0x6>
 8017290:	441a      	add	r2, r3
 8017292:	2100      	movs	r1, #0
 8017294:	4293      	cmp	r3, r2
 8017296:	d100      	bne.n	801729a <strncpy+0x20>
 8017298:	bd10      	pop	{r4, pc}
 801729a:	f803 1b01 	strb.w	r1, [r3], #1
 801729e:	e7f9      	b.n	8017294 <strncpy+0x1a>

080172a0 <_write_r>:
 80172a0:	b538      	push	{r3, r4, r5, lr}
 80172a2:	4d07      	ldr	r5, [pc, #28]	; (80172c0 <_write_r+0x20>)
 80172a4:	4604      	mov	r4, r0
 80172a6:	4608      	mov	r0, r1
 80172a8:	4611      	mov	r1, r2
 80172aa:	2200      	movs	r2, #0
 80172ac:	602a      	str	r2, [r5, #0]
 80172ae:	461a      	mov	r2, r3
 80172b0:	f7e9 fd1d 	bl	8000cee <_write>
 80172b4:	1c43      	adds	r3, r0, #1
 80172b6:	d102      	bne.n	80172be <_write_r+0x1e>
 80172b8:	682b      	ldr	r3, [r5, #0]
 80172ba:	b103      	cbz	r3, 80172be <_write_r+0x1e>
 80172bc:	6023      	str	r3, [r4, #0]
 80172be:	bd38      	pop	{r3, r4, r5, pc}
 80172c0:	2002585c 	.word	0x2002585c

080172c4 <__assert_func>:
 80172c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172c6:	4614      	mov	r4, r2
 80172c8:	461a      	mov	r2, r3
 80172ca:	4b09      	ldr	r3, [pc, #36]	; (80172f0 <__assert_func+0x2c>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	4605      	mov	r5, r0
 80172d0:	68d8      	ldr	r0, [r3, #12]
 80172d2:	b14c      	cbz	r4, 80172e8 <__assert_func+0x24>
 80172d4:	4b07      	ldr	r3, [pc, #28]	; (80172f4 <__assert_func+0x30>)
 80172d6:	9100      	str	r1, [sp, #0]
 80172d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80172dc:	4906      	ldr	r1, [pc, #24]	; (80172f8 <__assert_func+0x34>)
 80172de:	462b      	mov	r3, r5
 80172e0:	f000 f8e0 	bl	80174a4 <fiprintf>
 80172e4:	f000 fe2a 	bl	8017f3c <abort>
 80172e8:	4b04      	ldr	r3, [pc, #16]	; (80172fc <__assert_func+0x38>)
 80172ea:	461c      	mov	r4, r3
 80172ec:	e7f3      	b.n	80172d6 <__assert_func+0x12>
 80172ee:	bf00      	nop
 80172f0:	2000001c 	.word	0x2000001c
 80172f4:	0801bad2 	.word	0x0801bad2
 80172f8:	0801badf 	.word	0x0801badf
 80172fc:	0801bb0d 	.word	0x0801bb0d

08017300 <_close_r>:
 8017300:	b538      	push	{r3, r4, r5, lr}
 8017302:	4d06      	ldr	r5, [pc, #24]	; (801731c <_close_r+0x1c>)
 8017304:	2300      	movs	r3, #0
 8017306:	4604      	mov	r4, r0
 8017308:	4608      	mov	r0, r1
 801730a:	602b      	str	r3, [r5, #0]
 801730c:	f7e9 fd0b 	bl	8000d26 <_close>
 8017310:	1c43      	adds	r3, r0, #1
 8017312:	d102      	bne.n	801731a <_close_r+0x1a>
 8017314:	682b      	ldr	r3, [r5, #0]
 8017316:	b103      	cbz	r3, 801731a <_close_r+0x1a>
 8017318:	6023      	str	r3, [r4, #0]
 801731a:	bd38      	pop	{r3, r4, r5, pc}
 801731c:	2002585c 	.word	0x2002585c

08017320 <__sflush_r>:
 8017320:	898a      	ldrh	r2, [r1, #12]
 8017322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017326:	4605      	mov	r5, r0
 8017328:	0710      	lsls	r0, r2, #28
 801732a:	460c      	mov	r4, r1
 801732c:	d458      	bmi.n	80173e0 <__sflush_r+0xc0>
 801732e:	684b      	ldr	r3, [r1, #4]
 8017330:	2b00      	cmp	r3, #0
 8017332:	dc05      	bgt.n	8017340 <__sflush_r+0x20>
 8017334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017336:	2b00      	cmp	r3, #0
 8017338:	dc02      	bgt.n	8017340 <__sflush_r+0x20>
 801733a:	2000      	movs	r0, #0
 801733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017342:	2e00      	cmp	r6, #0
 8017344:	d0f9      	beq.n	801733a <__sflush_r+0x1a>
 8017346:	2300      	movs	r3, #0
 8017348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801734c:	682f      	ldr	r7, [r5, #0]
 801734e:	602b      	str	r3, [r5, #0]
 8017350:	d032      	beq.n	80173b8 <__sflush_r+0x98>
 8017352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017354:	89a3      	ldrh	r3, [r4, #12]
 8017356:	075a      	lsls	r2, r3, #29
 8017358:	d505      	bpl.n	8017366 <__sflush_r+0x46>
 801735a:	6863      	ldr	r3, [r4, #4]
 801735c:	1ac0      	subs	r0, r0, r3
 801735e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017360:	b10b      	cbz	r3, 8017366 <__sflush_r+0x46>
 8017362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017364:	1ac0      	subs	r0, r0, r3
 8017366:	2300      	movs	r3, #0
 8017368:	4602      	mov	r2, r0
 801736a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801736c:	6a21      	ldr	r1, [r4, #32]
 801736e:	4628      	mov	r0, r5
 8017370:	47b0      	blx	r6
 8017372:	1c43      	adds	r3, r0, #1
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	d106      	bne.n	8017386 <__sflush_r+0x66>
 8017378:	6829      	ldr	r1, [r5, #0]
 801737a:	291d      	cmp	r1, #29
 801737c:	d82c      	bhi.n	80173d8 <__sflush_r+0xb8>
 801737e:	4a2a      	ldr	r2, [pc, #168]	; (8017428 <__sflush_r+0x108>)
 8017380:	40ca      	lsrs	r2, r1
 8017382:	07d6      	lsls	r6, r2, #31
 8017384:	d528      	bpl.n	80173d8 <__sflush_r+0xb8>
 8017386:	2200      	movs	r2, #0
 8017388:	6062      	str	r2, [r4, #4]
 801738a:	04d9      	lsls	r1, r3, #19
 801738c:	6922      	ldr	r2, [r4, #16]
 801738e:	6022      	str	r2, [r4, #0]
 8017390:	d504      	bpl.n	801739c <__sflush_r+0x7c>
 8017392:	1c42      	adds	r2, r0, #1
 8017394:	d101      	bne.n	801739a <__sflush_r+0x7a>
 8017396:	682b      	ldr	r3, [r5, #0]
 8017398:	b903      	cbnz	r3, 801739c <__sflush_r+0x7c>
 801739a:	6560      	str	r0, [r4, #84]	; 0x54
 801739c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801739e:	602f      	str	r7, [r5, #0]
 80173a0:	2900      	cmp	r1, #0
 80173a2:	d0ca      	beq.n	801733a <__sflush_r+0x1a>
 80173a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173a8:	4299      	cmp	r1, r3
 80173aa:	d002      	beq.n	80173b2 <__sflush_r+0x92>
 80173ac:	4628      	mov	r0, r5
 80173ae:	f7ff fd7d 	bl	8016eac <_free_r>
 80173b2:	2000      	movs	r0, #0
 80173b4:	6360      	str	r0, [r4, #52]	; 0x34
 80173b6:	e7c1      	b.n	801733c <__sflush_r+0x1c>
 80173b8:	6a21      	ldr	r1, [r4, #32]
 80173ba:	2301      	movs	r3, #1
 80173bc:	4628      	mov	r0, r5
 80173be:	47b0      	blx	r6
 80173c0:	1c41      	adds	r1, r0, #1
 80173c2:	d1c7      	bne.n	8017354 <__sflush_r+0x34>
 80173c4:	682b      	ldr	r3, [r5, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d0c4      	beq.n	8017354 <__sflush_r+0x34>
 80173ca:	2b1d      	cmp	r3, #29
 80173cc:	d001      	beq.n	80173d2 <__sflush_r+0xb2>
 80173ce:	2b16      	cmp	r3, #22
 80173d0:	d101      	bne.n	80173d6 <__sflush_r+0xb6>
 80173d2:	602f      	str	r7, [r5, #0]
 80173d4:	e7b1      	b.n	801733a <__sflush_r+0x1a>
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173dc:	81a3      	strh	r3, [r4, #12]
 80173de:	e7ad      	b.n	801733c <__sflush_r+0x1c>
 80173e0:	690f      	ldr	r7, [r1, #16]
 80173e2:	2f00      	cmp	r7, #0
 80173e4:	d0a9      	beq.n	801733a <__sflush_r+0x1a>
 80173e6:	0793      	lsls	r3, r2, #30
 80173e8:	680e      	ldr	r6, [r1, #0]
 80173ea:	bf08      	it	eq
 80173ec:	694b      	ldreq	r3, [r1, #20]
 80173ee:	600f      	str	r7, [r1, #0]
 80173f0:	bf18      	it	ne
 80173f2:	2300      	movne	r3, #0
 80173f4:	eba6 0807 	sub.w	r8, r6, r7
 80173f8:	608b      	str	r3, [r1, #8]
 80173fa:	f1b8 0f00 	cmp.w	r8, #0
 80173fe:	dd9c      	ble.n	801733a <__sflush_r+0x1a>
 8017400:	6a21      	ldr	r1, [r4, #32]
 8017402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017404:	4643      	mov	r3, r8
 8017406:	463a      	mov	r2, r7
 8017408:	4628      	mov	r0, r5
 801740a:	47b0      	blx	r6
 801740c:	2800      	cmp	r0, #0
 801740e:	dc06      	bgt.n	801741e <__sflush_r+0xfe>
 8017410:	89a3      	ldrh	r3, [r4, #12]
 8017412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017416:	81a3      	strh	r3, [r4, #12]
 8017418:	f04f 30ff 	mov.w	r0, #4294967295
 801741c:	e78e      	b.n	801733c <__sflush_r+0x1c>
 801741e:	4407      	add	r7, r0
 8017420:	eba8 0800 	sub.w	r8, r8, r0
 8017424:	e7e9      	b.n	80173fa <__sflush_r+0xda>
 8017426:	bf00      	nop
 8017428:	20400001 	.word	0x20400001

0801742c <_fflush_r>:
 801742c:	b538      	push	{r3, r4, r5, lr}
 801742e:	690b      	ldr	r3, [r1, #16]
 8017430:	4605      	mov	r5, r0
 8017432:	460c      	mov	r4, r1
 8017434:	b913      	cbnz	r3, 801743c <_fflush_r+0x10>
 8017436:	2500      	movs	r5, #0
 8017438:	4628      	mov	r0, r5
 801743a:	bd38      	pop	{r3, r4, r5, pc}
 801743c:	b118      	cbz	r0, 8017446 <_fflush_r+0x1a>
 801743e:	6983      	ldr	r3, [r0, #24]
 8017440:	b90b      	cbnz	r3, 8017446 <_fflush_r+0x1a>
 8017442:	f7ff fc27 	bl	8016c94 <__sinit>
 8017446:	4b14      	ldr	r3, [pc, #80]	; (8017498 <_fflush_r+0x6c>)
 8017448:	429c      	cmp	r4, r3
 801744a:	d11b      	bne.n	8017484 <_fflush_r+0x58>
 801744c:	686c      	ldr	r4, [r5, #4]
 801744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d0ef      	beq.n	8017436 <_fflush_r+0xa>
 8017456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017458:	07d0      	lsls	r0, r2, #31
 801745a:	d404      	bmi.n	8017466 <_fflush_r+0x3a>
 801745c:	0599      	lsls	r1, r3, #22
 801745e:	d402      	bmi.n	8017466 <_fflush_r+0x3a>
 8017460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017462:	f7ff fcda 	bl	8016e1a <__retarget_lock_acquire_recursive>
 8017466:	4628      	mov	r0, r5
 8017468:	4621      	mov	r1, r4
 801746a:	f7ff ff59 	bl	8017320 <__sflush_r>
 801746e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017470:	07da      	lsls	r2, r3, #31
 8017472:	4605      	mov	r5, r0
 8017474:	d4e0      	bmi.n	8017438 <_fflush_r+0xc>
 8017476:	89a3      	ldrh	r3, [r4, #12]
 8017478:	059b      	lsls	r3, r3, #22
 801747a:	d4dd      	bmi.n	8017438 <_fflush_r+0xc>
 801747c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801747e:	f7ff fccd 	bl	8016e1c <__retarget_lock_release_recursive>
 8017482:	e7d9      	b.n	8017438 <_fflush_r+0xc>
 8017484:	4b05      	ldr	r3, [pc, #20]	; (801749c <_fflush_r+0x70>)
 8017486:	429c      	cmp	r4, r3
 8017488:	d101      	bne.n	801748e <_fflush_r+0x62>
 801748a:	68ac      	ldr	r4, [r5, #8]
 801748c:	e7df      	b.n	801744e <_fflush_r+0x22>
 801748e:	4b04      	ldr	r3, [pc, #16]	; (80174a0 <_fflush_r+0x74>)
 8017490:	429c      	cmp	r4, r3
 8017492:	bf08      	it	eq
 8017494:	68ec      	ldreq	r4, [r5, #12]
 8017496:	e7da      	b.n	801744e <_fflush_r+0x22>
 8017498:	0801ba18 	.word	0x0801ba18
 801749c:	0801ba38 	.word	0x0801ba38
 80174a0:	0801b9f8 	.word	0x0801b9f8

080174a4 <fiprintf>:
 80174a4:	b40e      	push	{r1, r2, r3}
 80174a6:	b503      	push	{r0, r1, lr}
 80174a8:	4601      	mov	r1, r0
 80174aa:	ab03      	add	r3, sp, #12
 80174ac:	4805      	ldr	r0, [pc, #20]	; (80174c4 <fiprintf+0x20>)
 80174ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80174b2:	6800      	ldr	r0, [r0, #0]
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	f000 f9ab 	bl	8017810 <_vfiprintf_r>
 80174ba:	b002      	add	sp, #8
 80174bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80174c0:	b003      	add	sp, #12
 80174c2:	4770      	bx	lr
 80174c4:	2000001c 	.word	0x2000001c

080174c8 <_lseek_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4d07      	ldr	r5, [pc, #28]	; (80174e8 <_lseek_r+0x20>)
 80174cc:	4604      	mov	r4, r0
 80174ce:	4608      	mov	r0, r1
 80174d0:	4611      	mov	r1, r2
 80174d2:	2200      	movs	r2, #0
 80174d4:	602a      	str	r2, [r5, #0]
 80174d6:	461a      	mov	r2, r3
 80174d8:	f7e9 fc4c 	bl	8000d74 <_lseek>
 80174dc:	1c43      	adds	r3, r0, #1
 80174de:	d102      	bne.n	80174e6 <_lseek_r+0x1e>
 80174e0:	682b      	ldr	r3, [r5, #0]
 80174e2:	b103      	cbz	r3, 80174e6 <_lseek_r+0x1e>
 80174e4:	6023      	str	r3, [r4, #0]
 80174e6:	bd38      	pop	{r3, r4, r5, pc}
 80174e8:	2002585c 	.word	0x2002585c

080174ec <__malloc_lock>:
 80174ec:	4801      	ldr	r0, [pc, #4]	; (80174f4 <__malloc_lock+0x8>)
 80174ee:	f7ff bc94 	b.w	8016e1a <__retarget_lock_acquire_recursive>
 80174f2:	bf00      	nop
 80174f4:	20025868 	.word	0x20025868

080174f8 <__malloc_unlock>:
 80174f8:	4801      	ldr	r0, [pc, #4]	; (8017500 <__malloc_unlock+0x8>)
 80174fa:	f7ff bc8f 	b.w	8016e1c <__retarget_lock_release_recursive>
 80174fe:	bf00      	nop
 8017500:	20025868 	.word	0x20025868

08017504 <__ssputs_r>:
 8017504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017508:	688e      	ldr	r6, [r1, #8]
 801750a:	429e      	cmp	r6, r3
 801750c:	4682      	mov	sl, r0
 801750e:	460c      	mov	r4, r1
 8017510:	4690      	mov	r8, r2
 8017512:	461f      	mov	r7, r3
 8017514:	d838      	bhi.n	8017588 <__ssputs_r+0x84>
 8017516:	898a      	ldrh	r2, [r1, #12]
 8017518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801751c:	d032      	beq.n	8017584 <__ssputs_r+0x80>
 801751e:	6825      	ldr	r5, [r4, #0]
 8017520:	6909      	ldr	r1, [r1, #16]
 8017522:	eba5 0901 	sub.w	r9, r5, r1
 8017526:	6965      	ldr	r5, [r4, #20]
 8017528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801752c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017530:	3301      	adds	r3, #1
 8017532:	444b      	add	r3, r9
 8017534:	106d      	asrs	r5, r5, #1
 8017536:	429d      	cmp	r5, r3
 8017538:	bf38      	it	cc
 801753a:	461d      	movcc	r5, r3
 801753c:	0553      	lsls	r3, r2, #21
 801753e:	d531      	bpl.n	80175a4 <__ssputs_r+0xa0>
 8017540:	4629      	mov	r1, r5
 8017542:	f7ff fd03 	bl	8016f4c <_malloc_r>
 8017546:	4606      	mov	r6, r0
 8017548:	b950      	cbnz	r0, 8017560 <__ssputs_r+0x5c>
 801754a:	230c      	movs	r3, #12
 801754c:	f8ca 3000 	str.w	r3, [sl]
 8017550:	89a3      	ldrh	r3, [r4, #12]
 8017552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017556:	81a3      	strh	r3, [r4, #12]
 8017558:	f04f 30ff 	mov.w	r0, #4294967295
 801755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017560:	6921      	ldr	r1, [r4, #16]
 8017562:	464a      	mov	r2, r9
 8017564:	f7ff fc72 	bl	8016e4c <memcpy>
 8017568:	89a3      	ldrh	r3, [r4, #12]
 801756a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017572:	81a3      	strh	r3, [r4, #12]
 8017574:	6126      	str	r6, [r4, #16]
 8017576:	6165      	str	r5, [r4, #20]
 8017578:	444e      	add	r6, r9
 801757a:	eba5 0509 	sub.w	r5, r5, r9
 801757e:	6026      	str	r6, [r4, #0]
 8017580:	60a5      	str	r5, [r4, #8]
 8017582:	463e      	mov	r6, r7
 8017584:	42be      	cmp	r6, r7
 8017586:	d900      	bls.n	801758a <__ssputs_r+0x86>
 8017588:	463e      	mov	r6, r7
 801758a:	4632      	mov	r2, r6
 801758c:	6820      	ldr	r0, [r4, #0]
 801758e:	4641      	mov	r1, r8
 8017590:	f7ff fc6a 	bl	8016e68 <memmove>
 8017594:	68a3      	ldr	r3, [r4, #8]
 8017596:	6822      	ldr	r2, [r4, #0]
 8017598:	1b9b      	subs	r3, r3, r6
 801759a:	4432      	add	r2, r6
 801759c:	60a3      	str	r3, [r4, #8]
 801759e:	6022      	str	r2, [r4, #0]
 80175a0:	2000      	movs	r0, #0
 80175a2:	e7db      	b.n	801755c <__ssputs_r+0x58>
 80175a4:	462a      	mov	r2, r5
 80175a6:	f000 fd35 	bl	8018014 <_realloc_r>
 80175aa:	4606      	mov	r6, r0
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d1e1      	bne.n	8017574 <__ssputs_r+0x70>
 80175b0:	6921      	ldr	r1, [r4, #16]
 80175b2:	4650      	mov	r0, sl
 80175b4:	f7ff fc7a 	bl	8016eac <_free_r>
 80175b8:	e7c7      	b.n	801754a <__ssputs_r+0x46>
	...

080175bc <_svfiprintf_r>:
 80175bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c0:	4698      	mov	r8, r3
 80175c2:	898b      	ldrh	r3, [r1, #12]
 80175c4:	061b      	lsls	r3, r3, #24
 80175c6:	b09d      	sub	sp, #116	; 0x74
 80175c8:	4607      	mov	r7, r0
 80175ca:	460d      	mov	r5, r1
 80175cc:	4614      	mov	r4, r2
 80175ce:	d50e      	bpl.n	80175ee <_svfiprintf_r+0x32>
 80175d0:	690b      	ldr	r3, [r1, #16]
 80175d2:	b963      	cbnz	r3, 80175ee <_svfiprintf_r+0x32>
 80175d4:	2140      	movs	r1, #64	; 0x40
 80175d6:	f7ff fcb9 	bl	8016f4c <_malloc_r>
 80175da:	6028      	str	r0, [r5, #0]
 80175dc:	6128      	str	r0, [r5, #16]
 80175de:	b920      	cbnz	r0, 80175ea <_svfiprintf_r+0x2e>
 80175e0:	230c      	movs	r3, #12
 80175e2:	603b      	str	r3, [r7, #0]
 80175e4:	f04f 30ff 	mov.w	r0, #4294967295
 80175e8:	e0d1      	b.n	801778e <_svfiprintf_r+0x1d2>
 80175ea:	2340      	movs	r3, #64	; 0x40
 80175ec:	616b      	str	r3, [r5, #20]
 80175ee:	2300      	movs	r3, #0
 80175f0:	9309      	str	r3, [sp, #36]	; 0x24
 80175f2:	2320      	movs	r3, #32
 80175f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80175fc:	2330      	movs	r3, #48	; 0x30
 80175fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80177a8 <_svfiprintf_r+0x1ec>
 8017602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017606:	f04f 0901 	mov.w	r9, #1
 801760a:	4623      	mov	r3, r4
 801760c:	469a      	mov	sl, r3
 801760e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017612:	b10a      	cbz	r2, 8017618 <_svfiprintf_r+0x5c>
 8017614:	2a25      	cmp	r2, #37	; 0x25
 8017616:	d1f9      	bne.n	801760c <_svfiprintf_r+0x50>
 8017618:	ebba 0b04 	subs.w	fp, sl, r4
 801761c:	d00b      	beq.n	8017636 <_svfiprintf_r+0x7a>
 801761e:	465b      	mov	r3, fp
 8017620:	4622      	mov	r2, r4
 8017622:	4629      	mov	r1, r5
 8017624:	4638      	mov	r0, r7
 8017626:	f7ff ff6d 	bl	8017504 <__ssputs_r>
 801762a:	3001      	adds	r0, #1
 801762c:	f000 80aa 	beq.w	8017784 <_svfiprintf_r+0x1c8>
 8017630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017632:	445a      	add	r2, fp
 8017634:	9209      	str	r2, [sp, #36]	; 0x24
 8017636:	f89a 3000 	ldrb.w	r3, [sl]
 801763a:	2b00      	cmp	r3, #0
 801763c:	f000 80a2 	beq.w	8017784 <_svfiprintf_r+0x1c8>
 8017640:	2300      	movs	r3, #0
 8017642:	f04f 32ff 	mov.w	r2, #4294967295
 8017646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801764a:	f10a 0a01 	add.w	sl, sl, #1
 801764e:	9304      	str	r3, [sp, #16]
 8017650:	9307      	str	r3, [sp, #28]
 8017652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017656:	931a      	str	r3, [sp, #104]	; 0x68
 8017658:	4654      	mov	r4, sl
 801765a:	2205      	movs	r2, #5
 801765c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017660:	4851      	ldr	r0, [pc, #324]	; (80177a8 <_svfiprintf_r+0x1ec>)
 8017662:	f7e8 fdcd 	bl	8000200 <memchr>
 8017666:	9a04      	ldr	r2, [sp, #16]
 8017668:	b9d8      	cbnz	r0, 80176a2 <_svfiprintf_r+0xe6>
 801766a:	06d0      	lsls	r0, r2, #27
 801766c:	bf44      	itt	mi
 801766e:	2320      	movmi	r3, #32
 8017670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017674:	0711      	lsls	r1, r2, #28
 8017676:	bf44      	itt	mi
 8017678:	232b      	movmi	r3, #43	; 0x2b
 801767a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801767e:	f89a 3000 	ldrb.w	r3, [sl]
 8017682:	2b2a      	cmp	r3, #42	; 0x2a
 8017684:	d015      	beq.n	80176b2 <_svfiprintf_r+0xf6>
 8017686:	9a07      	ldr	r2, [sp, #28]
 8017688:	4654      	mov	r4, sl
 801768a:	2000      	movs	r0, #0
 801768c:	f04f 0c0a 	mov.w	ip, #10
 8017690:	4621      	mov	r1, r4
 8017692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017696:	3b30      	subs	r3, #48	; 0x30
 8017698:	2b09      	cmp	r3, #9
 801769a:	d94e      	bls.n	801773a <_svfiprintf_r+0x17e>
 801769c:	b1b0      	cbz	r0, 80176cc <_svfiprintf_r+0x110>
 801769e:	9207      	str	r2, [sp, #28]
 80176a0:	e014      	b.n	80176cc <_svfiprintf_r+0x110>
 80176a2:	eba0 0308 	sub.w	r3, r0, r8
 80176a6:	fa09 f303 	lsl.w	r3, r9, r3
 80176aa:	4313      	orrs	r3, r2
 80176ac:	9304      	str	r3, [sp, #16]
 80176ae:	46a2      	mov	sl, r4
 80176b0:	e7d2      	b.n	8017658 <_svfiprintf_r+0x9c>
 80176b2:	9b03      	ldr	r3, [sp, #12]
 80176b4:	1d19      	adds	r1, r3, #4
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	9103      	str	r1, [sp, #12]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	bfbb      	ittet	lt
 80176be:	425b      	neglt	r3, r3
 80176c0:	f042 0202 	orrlt.w	r2, r2, #2
 80176c4:	9307      	strge	r3, [sp, #28]
 80176c6:	9307      	strlt	r3, [sp, #28]
 80176c8:	bfb8      	it	lt
 80176ca:	9204      	strlt	r2, [sp, #16]
 80176cc:	7823      	ldrb	r3, [r4, #0]
 80176ce:	2b2e      	cmp	r3, #46	; 0x2e
 80176d0:	d10c      	bne.n	80176ec <_svfiprintf_r+0x130>
 80176d2:	7863      	ldrb	r3, [r4, #1]
 80176d4:	2b2a      	cmp	r3, #42	; 0x2a
 80176d6:	d135      	bne.n	8017744 <_svfiprintf_r+0x188>
 80176d8:	9b03      	ldr	r3, [sp, #12]
 80176da:	1d1a      	adds	r2, r3, #4
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	9203      	str	r2, [sp, #12]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	bfb8      	it	lt
 80176e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80176e8:	3402      	adds	r4, #2
 80176ea:	9305      	str	r3, [sp, #20]
 80176ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80177b8 <_svfiprintf_r+0x1fc>
 80176f0:	7821      	ldrb	r1, [r4, #0]
 80176f2:	2203      	movs	r2, #3
 80176f4:	4650      	mov	r0, sl
 80176f6:	f7e8 fd83 	bl	8000200 <memchr>
 80176fa:	b140      	cbz	r0, 801770e <_svfiprintf_r+0x152>
 80176fc:	2340      	movs	r3, #64	; 0x40
 80176fe:	eba0 000a 	sub.w	r0, r0, sl
 8017702:	fa03 f000 	lsl.w	r0, r3, r0
 8017706:	9b04      	ldr	r3, [sp, #16]
 8017708:	4303      	orrs	r3, r0
 801770a:	3401      	adds	r4, #1
 801770c:	9304      	str	r3, [sp, #16]
 801770e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017712:	4826      	ldr	r0, [pc, #152]	; (80177ac <_svfiprintf_r+0x1f0>)
 8017714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017718:	2206      	movs	r2, #6
 801771a:	f7e8 fd71 	bl	8000200 <memchr>
 801771e:	2800      	cmp	r0, #0
 8017720:	d038      	beq.n	8017794 <_svfiprintf_r+0x1d8>
 8017722:	4b23      	ldr	r3, [pc, #140]	; (80177b0 <_svfiprintf_r+0x1f4>)
 8017724:	bb1b      	cbnz	r3, 801776e <_svfiprintf_r+0x1b2>
 8017726:	9b03      	ldr	r3, [sp, #12]
 8017728:	3307      	adds	r3, #7
 801772a:	f023 0307 	bic.w	r3, r3, #7
 801772e:	3308      	adds	r3, #8
 8017730:	9303      	str	r3, [sp, #12]
 8017732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017734:	4433      	add	r3, r6
 8017736:	9309      	str	r3, [sp, #36]	; 0x24
 8017738:	e767      	b.n	801760a <_svfiprintf_r+0x4e>
 801773a:	fb0c 3202 	mla	r2, ip, r2, r3
 801773e:	460c      	mov	r4, r1
 8017740:	2001      	movs	r0, #1
 8017742:	e7a5      	b.n	8017690 <_svfiprintf_r+0xd4>
 8017744:	2300      	movs	r3, #0
 8017746:	3401      	adds	r4, #1
 8017748:	9305      	str	r3, [sp, #20]
 801774a:	4619      	mov	r1, r3
 801774c:	f04f 0c0a 	mov.w	ip, #10
 8017750:	4620      	mov	r0, r4
 8017752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017756:	3a30      	subs	r2, #48	; 0x30
 8017758:	2a09      	cmp	r2, #9
 801775a:	d903      	bls.n	8017764 <_svfiprintf_r+0x1a8>
 801775c:	2b00      	cmp	r3, #0
 801775e:	d0c5      	beq.n	80176ec <_svfiprintf_r+0x130>
 8017760:	9105      	str	r1, [sp, #20]
 8017762:	e7c3      	b.n	80176ec <_svfiprintf_r+0x130>
 8017764:	fb0c 2101 	mla	r1, ip, r1, r2
 8017768:	4604      	mov	r4, r0
 801776a:	2301      	movs	r3, #1
 801776c:	e7f0      	b.n	8017750 <_svfiprintf_r+0x194>
 801776e:	ab03      	add	r3, sp, #12
 8017770:	9300      	str	r3, [sp, #0]
 8017772:	462a      	mov	r2, r5
 8017774:	4b0f      	ldr	r3, [pc, #60]	; (80177b4 <_svfiprintf_r+0x1f8>)
 8017776:	a904      	add	r1, sp, #16
 8017778:	4638      	mov	r0, r7
 801777a:	f3af 8000 	nop.w
 801777e:	1c42      	adds	r2, r0, #1
 8017780:	4606      	mov	r6, r0
 8017782:	d1d6      	bne.n	8017732 <_svfiprintf_r+0x176>
 8017784:	89ab      	ldrh	r3, [r5, #12]
 8017786:	065b      	lsls	r3, r3, #25
 8017788:	f53f af2c 	bmi.w	80175e4 <_svfiprintf_r+0x28>
 801778c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801778e:	b01d      	add	sp, #116	; 0x74
 8017790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017794:	ab03      	add	r3, sp, #12
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	462a      	mov	r2, r5
 801779a:	4b06      	ldr	r3, [pc, #24]	; (80177b4 <_svfiprintf_r+0x1f8>)
 801779c:	a904      	add	r1, sp, #16
 801779e:	4638      	mov	r0, r7
 80177a0:	f000 f9d4 	bl	8017b4c <_printf_i>
 80177a4:	e7eb      	b.n	801777e <_svfiprintf_r+0x1c2>
 80177a6:	bf00      	nop
 80177a8:	0801bb0e 	.word	0x0801bb0e
 80177ac:	0801bb18 	.word	0x0801bb18
 80177b0:	00000000 	.word	0x00000000
 80177b4:	08017505 	.word	0x08017505
 80177b8:	0801bb14 	.word	0x0801bb14

080177bc <__sfputc_r>:
 80177bc:	6893      	ldr	r3, [r2, #8]
 80177be:	3b01      	subs	r3, #1
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	b410      	push	{r4}
 80177c4:	6093      	str	r3, [r2, #8]
 80177c6:	da08      	bge.n	80177da <__sfputc_r+0x1e>
 80177c8:	6994      	ldr	r4, [r2, #24]
 80177ca:	42a3      	cmp	r3, r4
 80177cc:	db01      	blt.n	80177d2 <__sfputc_r+0x16>
 80177ce:	290a      	cmp	r1, #10
 80177d0:	d103      	bne.n	80177da <__sfputc_r+0x1e>
 80177d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177d6:	f000 baf1 	b.w	8017dbc <__swbuf_r>
 80177da:	6813      	ldr	r3, [r2, #0]
 80177dc:	1c58      	adds	r0, r3, #1
 80177de:	6010      	str	r0, [r2, #0]
 80177e0:	7019      	strb	r1, [r3, #0]
 80177e2:	4608      	mov	r0, r1
 80177e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177e8:	4770      	bx	lr

080177ea <__sfputs_r>:
 80177ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ec:	4606      	mov	r6, r0
 80177ee:	460f      	mov	r7, r1
 80177f0:	4614      	mov	r4, r2
 80177f2:	18d5      	adds	r5, r2, r3
 80177f4:	42ac      	cmp	r4, r5
 80177f6:	d101      	bne.n	80177fc <__sfputs_r+0x12>
 80177f8:	2000      	movs	r0, #0
 80177fa:	e007      	b.n	801780c <__sfputs_r+0x22>
 80177fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017800:	463a      	mov	r2, r7
 8017802:	4630      	mov	r0, r6
 8017804:	f7ff ffda 	bl	80177bc <__sfputc_r>
 8017808:	1c43      	adds	r3, r0, #1
 801780a:	d1f3      	bne.n	80177f4 <__sfputs_r+0xa>
 801780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017810 <_vfiprintf_r>:
 8017810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017814:	460d      	mov	r5, r1
 8017816:	b09d      	sub	sp, #116	; 0x74
 8017818:	4614      	mov	r4, r2
 801781a:	4698      	mov	r8, r3
 801781c:	4606      	mov	r6, r0
 801781e:	b118      	cbz	r0, 8017828 <_vfiprintf_r+0x18>
 8017820:	6983      	ldr	r3, [r0, #24]
 8017822:	b90b      	cbnz	r3, 8017828 <_vfiprintf_r+0x18>
 8017824:	f7ff fa36 	bl	8016c94 <__sinit>
 8017828:	4b89      	ldr	r3, [pc, #548]	; (8017a50 <_vfiprintf_r+0x240>)
 801782a:	429d      	cmp	r5, r3
 801782c:	d11b      	bne.n	8017866 <_vfiprintf_r+0x56>
 801782e:	6875      	ldr	r5, [r6, #4]
 8017830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017832:	07d9      	lsls	r1, r3, #31
 8017834:	d405      	bmi.n	8017842 <_vfiprintf_r+0x32>
 8017836:	89ab      	ldrh	r3, [r5, #12]
 8017838:	059a      	lsls	r2, r3, #22
 801783a:	d402      	bmi.n	8017842 <_vfiprintf_r+0x32>
 801783c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801783e:	f7ff faec 	bl	8016e1a <__retarget_lock_acquire_recursive>
 8017842:	89ab      	ldrh	r3, [r5, #12]
 8017844:	071b      	lsls	r3, r3, #28
 8017846:	d501      	bpl.n	801784c <_vfiprintf_r+0x3c>
 8017848:	692b      	ldr	r3, [r5, #16]
 801784a:	b9eb      	cbnz	r3, 8017888 <_vfiprintf_r+0x78>
 801784c:	4629      	mov	r1, r5
 801784e:	4630      	mov	r0, r6
 8017850:	f000 fb06 	bl	8017e60 <__swsetup_r>
 8017854:	b1c0      	cbz	r0, 8017888 <_vfiprintf_r+0x78>
 8017856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017858:	07dc      	lsls	r4, r3, #31
 801785a:	d50e      	bpl.n	801787a <_vfiprintf_r+0x6a>
 801785c:	f04f 30ff 	mov.w	r0, #4294967295
 8017860:	b01d      	add	sp, #116	; 0x74
 8017862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017866:	4b7b      	ldr	r3, [pc, #492]	; (8017a54 <_vfiprintf_r+0x244>)
 8017868:	429d      	cmp	r5, r3
 801786a:	d101      	bne.n	8017870 <_vfiprintf_r+0x60>
 801786c:	68b5      	ldr	r5, [r6, #8]
 801786e:	e7df      	b.n	8017830 <_vfiprintf_r+0x20>
 8017870:	4b79      	ldr	r3, [pc, #484]	; (8017a58 <_vfiprintf_r+0x248>)
 8017872:	429d      	cmp	r5, r3
 8017874:	bf08      	it	eq
 8017876:	68f5      	ldreq	r5, [r6, #12]
 8017878:	e7da      	b.n	8017830 <_vfiprintf_r+0x20>
 801787a:	89ab      	ldrh	r3, [r5, #12]
 801787c:	0598      	lsls	r0, r3, #22
 801787e:	d4ed      	bmi.n	801785c <_vfiprintf_r+0x4c>
 8017880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017882:	f7ff facb 	bl	8016e1c <__retarget_lock_release_recursive>
 8017886:	e7e9      	b.n	801785c <_vfiprintf_r+0x4c>
 8017888:	2300      	movs	r3, #0
 801788a:	9309      	str	r3, [sp, #36]	; 0x24
 801788c:	2320      	movs	r3, #32
 801788e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017892:	f8cd 800c 	str.w	r8, [sp, #12]
 8017896:	2330      	movs	r3, #48	; 0x30
 8017898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017a5c <_vfiprintf_r+0x24c>
 801789c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178a0:	f04f 0901 	mov.w	r9, #1
 80178a4:	4623      	mov	r3, r4
 80178a6:	469a      	mov	sl, r3
 80178a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178ac:	b10a      	cbz	r2, 80178b2 <_vfiprintf_r+0xa2>
 80178ae:	2a25      	cmp	r2, #37	; 0x25
 80178b0:	d1f9      	bne.n	80178a6 <_vfiprintf_r+0x96>
 80178b2:	ebba 0b04 	subs.w	fp, sl, r4
 80178b6:	d00b      	beq.n	80178d0 <_vfiprintf_r+0xc0>
 80178b8:	465b      	mov	r3, fp
 80178ba:	4622      	mov	r2, r4
 80178bc:	4629      	mov	r1, r5
 80178be:	4630      	mov	r0, r6
 80178c0:	f7ff ff93 	bl	80177ea <__sfputs_r>
 80178c4:	3001      	adds	r0, #1
 80178c6:	f000 80aa 	beq.w	8017a1e <_vfiprintf_r+0x20e>
 80178ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178cc:	445a      	add	r2, fp
 80178ce:	9209      	str	r2, [sp, #36]	; 0x24
 80178d0:	f89a 3000 	ldrb.w	r3, [sl]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f000 80a2 	beq.w	8017a1e <_vfiprintf_r+0x20e>
 80178da:	2300      	movs	r3, #0
 80178dc:	f04f 32ff 	mov.w	r2, #4294967295
 80178e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178e4:	f10a 0a01 	add.w	sl, sl, #1
 80178e8:	9304      	str	r3, [sp, #16]
 80178ea:	9307      	str	r3, [sp, #28]
 80178ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178f0:	931a      	str	r3, [sp, #104]	; 0x68
 80178f2:	4654      	mov	r4, sl
 80178f4:	2205      	movs	r2, #5
 80178f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178fa:	4858      	ldr	r0, [pc, #352]	; (8017a5c <_vfiprintf_r+0x24c>)
 80178fc:	f7e8 fc80 	bl	8000200 <memchr>
 8017900:	9a04      	ldr	r2, [sp, #16]
 8017902:	b9d8      	cbnz	r0, 801793c <_vfiprintf_r+0x12c>
 8017904:	06d1      	lsls	r1, r2, #27
 8017906:	bf44      	itt	mi
 8017908:	2320      	movmi	r3, #32
 801790a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801790e:	0713      	lsls	r3, r2, #28
 8017910:	bf44      	itt	mi
 8017912:	232b      	movmi	r3, #43	; 0x2b
 8017914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017918:	f89a 3000 	ldrb.w	r3, [sl]
 801791c:	2b2a      	cmp	r3, #42	; 0x2a
 801791e:	d015      	beq.n	801794c <_vfiprintf_r+0x13c>
 8017920:	9a07      	ldr	r2, [sp, #28]
 8017922:	4654      	mov	r4, sl
 8017924:	2000      	movs	r0, #0
 8017926:	f04f 0c0a 	mov.w	ip, #10
 801792a:	4621      	mov	r1, r4
 801792c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017930:	3b30      	subs	r3, #48	; 0x30
 8017932:	2b09      	cmp	r3, #9
 8017934:	d94e      	bls.n	80179d4 <_vfiprintf_r+0x1c4>
 8017936:	b1b0      	cbz	r0, 8017966 <_vfiprintf_r+0x156>
 8017938:	9207      	str	r2, [sp, #28]
 801793a:	e014      	b.n	8017966 <_vfiprintf_r+0x156>
 801793c:	eba0 0308 	sub.w	r3, r0, r8
 8017940:	fa09 f303 	lsl.w	r3, r9, r3
 8017944:	4313      	orrs	r3, r2
 8017946:	9304      	str	r3, [sp, #16]
 8017948:	46a2      	mov	sl, r4
 801794a:	e7d2      	b.n	80178f2 <_vfiprintf_r+0xe2>
 801794c:	9b03      	ldr	r3, [sp, #12]
 801794e:	1d19      	adds	r1, r3, #4
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	9103      	str	r1, [sp, #12]
 8017954:	2b00      	cmp	r3, #0
 8017956:	bfbb      	ittet	lt
 8017958:	425b      	neglt	r3, r3
 801795a:	f042 0202 	orrlt.w	r2, r2, #2
 801795e:	9307      	strge	r3, [sp, #28]
 8017960:	9307      	strlt	r3, [sp, #28]
 8017962:	bfb8      	it	lt
 8017964:	9204      	strlt	r2, [sp, #16]
 8017966:	7823      	ldrb	r3, [r4, #0]
 8017968:	2b2e      	cmp	r3, #46	; 0x2e
 801796a:	d10c      	bne.n	8017986 <_vfiprintf_r+0x176>
 801796c:	7863      	ldrb	r3, [r4, #1]
 801796e:	2b2a      	cmp	r3, #42	; 0x2a
 8017970:	d135      	bne.n	80179de <_vfiprintf_r+0x1ce>
 8017972:	9b03      	ldr	r3, [sp, #12]
 8017974:	1d1a      	adds	r2, r3, #4
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	9203      	str	r2, [sp, #12]
 801797a:	2b00      	cmp	r3, #0
 801797c:	bfb8      	it	lt
 801797e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017982:	3402      	adds	r4, #2
 8017984:	9305      	str	r3, [sp, #20]
 8017986:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a6c <_vfiprintf_r+0x25c>
 801798a:	7821      	ldrb	r1, [r4, #0]
 801798c:	2203      	movs	r2, #3
 801798e:	4650      	mov	r0, sl
 8017990:	f7e8 fc36 	bl	8000200 <memchr>
 8017994:	b140      	cbz	r0, 80179a8 <_vfiprintf_r+0x198>
 8017996:	2340      	movs	r3, #64	; 0x40
 8017998:	eba0 000a 	sub.w	r0, r0, sl
 801799c:	fa03 f000 	lsl.w	r0, r3, r0
 80179a0:	9b04      	ldr	r3, [sp, #16]
 80179a2:	4303      	orrs	r3, r0
 80179a4:	3401      	adds	r4, #1
 80179a6:	9304      	str	r3, [sp, #16]
 80179a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179ac:	482c      	ldr	r0, [pc, #176]	; (8017a60 <_vfiprintf_r+0x250>)
 80179ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179b2:	2206      	movs	r2, #6
 80179b4:	f7e8 fc24 	bl	8000200 <memchr>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	d03f      	beq.n	8017a3c <_vfiprintf_r+0x22c>
 80179bc:	4b29      	ldr	r3, [pc, #164]	; (8017a64 <_vfiprintf_r+0x254>)
 80179be:	bb1b      	cbnz	r3, 8017a08 <_vfiprintf_r+0x1f8>
 80179c0:	9b03      	ldr	r3, [sp, #12]
 80179c2:	3307      	adds	r3, #7
 80179c4:	f023 0307 	bic.w	r3, r3, #7
 80179c8:	3308      	adds	r3, #8
 80179ca:	9303      	str	r3, [sp, #12]
 80179cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179ce:	443b      	add	r3, r7
 80179d0:	9309      	str	r3, [sp, #36]	; 0x24
 80179d2:	e767      	b.n	80178a4 <_vfiprintf_r+0x94>
 80179d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80179d8:	460c      	mov	r4, r1
 80179da:	2001      	movs	r0, #1
 80179dc:	e7a5      	b.n	801792a <_vfiprintf_r+0x11a>
 80179de:	2300      	movs	r3, #0
 80179e0:	3401      	adds	r4, #1
 80179e2:	9305      	str	r3, [sp, #20]
 80179e4:	4619      	mov	r1, r3
 80179e6:	f04f 0c0a 	mov.w	ip, #10
 80179ea:	4620      	mov	r0, r4
 80179ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179f0:	3a30      	subs	r2, #48	; 0x30
 80179f2:	2a09      	cmp	r2, #9
 80179f4:	d903      	bls.n	80179fe <_vfiprintf_r+0x1ee>
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d0c5      	beq.n	8017986 <_vfiprintf_r+0x176>
 80179fa:	9105      	str	r1, [sp, #20]
 80179fc:	e7c3      	b.n	8017986 <_vfiprintf_r+0x176>
 80179fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a02:	4604      	mov	r4, r0
 8017a04:	2301      	movs	r3, #1
 8017a06:	e7f0      	b.n	80179ea <_vfiprintf_r+0x1da>
 8017a08:	ab03      	add	r3, sp, #12
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	462a      	mov	r2, r5
 8017a0e:	4b16      	ldr	r3, [pc, #88]	; (8017a68 <_vfiprintf_r+0x258>)
 8017a10:	a904      	add	r1, sp, #16
 8017a12:	4630      	mov	r0, r6
 8017a14:	f3af 8000 	nop.w
 8017a18:	4607      	mov	r7, r0
 8017a1a:	1c78      	adds	r0, r7, #1
 8017a1c:	d1d6      	bne.n	80179cc <_vfiprintf_r+0x1bc>
 8017a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a20:	07d9      	lsls	r1, r3, #31
 8017a22:	d405      	bmi.n	8017a30 <_vfiprintf_r+0x220>
 8017a24:	89ab      	ldrh	r3, [r5, #12]
 8017a26:	059a      	lsls	r2, r3, #22
 8017a28:	d402      	bmi.n	8017a30 <_vfiprintf_r+0x220>
 8017a2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a2c:	f7ff f9f6 	bl	8016e1c <__retarget_lock_release_recursive>
 8017a30:	89ab      	ldrh	r3, [r5, #12]
 8017a32:	065b      	lsls	r3, r3, #25
 8017a34:	f53f af12 	bmi.w	801785c <_vfiprintf_r+0x4c>
 8017a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a3a:	e711      	b.n	8017860 <_vfiprintf_r+0x50>
 8017a3c:	ab03      	add	r3, sp, #12
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	462a      	mov	r2, r5
 8017a42:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <_vfiprintf_r+0x258>)
 8017a44:	a904      	add	r1, sp, #16
 8017a46:	4630      	mov	r0, r6
 8017a48:	f000 f880 	bl	8017b4c <_printf_i>
 8017a4c:	e7e4      	b.n	8017a18 <_vfiprintf_r+0x208>
 8017a4e:	bf00      	nop
 8017a50:	0801ba18 	.word	0x0801ba18
 8017a54:	0801ba38 	.word	0x0801ba38
 8017a58:	0801b9f8 	.word	0x0801b9f8
 8017a5c:	0801bb0e 	.word	0x0801bb0e
 8017a60:	0801bb18 	.word	0x0801bb18
 8017a64:	00000000 	.word	0x00000000
 8017a68:	080177eb 	.word	0x080177eb
 8017a6c:	0801bb14 	.word	0x0801bb14

08017a70 <_printf_common>:
 8017a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a74:	4616      	mov	r6, r2
 8017a76:	4699      	mov	r9, r3
 8017a78:	688a      	ldr	r2, [r1, #8]
 8017a7a:	690b      	ldr	r3, [r1, #16]
 8017a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a80:	4293      	cmp	r3, r2
 8017a82:	bfb8      	it	lt
 8017a84:	4613      	movlt	r3, r2
 8017a86:	6033      	str	r3, [r6, #0]
 8017a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a8c:	4607      	mov	r7, r0
 8017a8e:	460c      	mov	r4, r1
 8017a90:	b10a      	cbz	r2, 8017a96 <_printf_common+0x26>
 8017a92:	3301      	adds	r3, #1
 8017a94:	6033      	str	r3, [r6, #0]
 8017a96:	6823      	ldr	r3, [r4, #0]
 8017a98:	0699      	lsls	r1, r3, #26
 8017a9a:	bf42      	ittt	mi
 8017a9c:	6833      	ldrmi	r3, [r6, #0]
 8017a9e:	3302      	addmi	r3, #2
 8017aa0:	6033      	strmi	r3, [r6, #0]
 8017aa2:	6825      	ldr	r5, [r4, #0]
 8017aa4:	f015 0506 	ands.w	r5, r5, #6
 8017aa8:	d106      	bne.n	8017ab8 <_printf_common+0x48>
 8017aaa:	f104 0a19 	add.w	sl, r4, #25
 8017aae:	68e3      	ldr	r3, [r4, #12]
 8017ab0:	6832      	ldr	r2, [r6, #0]
 8017ab2:	1a9b      	subs	r3, r3, r2
 8017ab4:	42ab      	cmp	r3, r5
 8017ab6:	dc26      	bgt.n	8017b06 <_printf_common+0x96>
 8017ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017abc:	1e13      	subs	r3, r2, #0
 8017abe:	6822      	ldr	r2, [r4, #0]
 8017ac0:	bf18      	it	ne
 8017ac2:	2301      	movne	r3, #1
 8017ac4:	0692      	lsls	r2, r2, #26
 8017ac6:	d42b      	bmi.n	8017b20 <_printf_common+0xb0>
 8017ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017acc:	4649      	mov	r1, r9
 8017ace:	4638      	mov	r0, r7
 8017ad0:	47c0      	blx	r8
 8017ad2:	3001      	adds	r0, #1
 8017ad4:	d01e      	beq.n	8017b14 <_printf_common+0xa4>
 8017ad6:	6823      	ldr	r3, [r4, #0]
 8017ad8:	68e5      	ldr	r5, [r4, #12]
 8017ada:	6832      	ldr	r2, [r6, #0]
 8017adc:	f003 0306 	and.w	r3, r3, #6
 8017ae0:	2b04      	cmp	r3, #4
 8017ae2:	bf08      	it	eq
 8017ae4:	1aad      	subeq	r5, r5, r2
 8017ae6:	68a3      	ldr	r3, [r4, #8]
 8017ae8:	6922      	ldr	r2, [r4, #16]
 8017aea:	bf0c      	ite	eq
 8017aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017af0:	2500      	movne	r5, #0
 8017af2:	4293      	cmp	r3, r2
 8017af4:	bfc4      	itt	gt
 8017af6:	1a9b      	subgt	r3, r3, r2
 8017af8:	18ed      	addgt	r5, r5, r3
 8017afa:	2600      	movs	r6, #0
 8017afc:	341a      	adds	r4, #26
 8017afe:	42b5      	cmp	r5, r6
 8017b00:	d11a      	bne.n	8017b38 <_printf_common+0xc8>
 8017b02:	2000      	movs	r0, #0
 8017b04:	e008      	b.n	8017b18 <_printf_common+0xa8>
 8017b06:	2301      	movs	r3, #1
 8017b08:	4652      	mov	r2, sl
 8017b0a:	4649      	mov	r1, r9
 8017b0c:	4638      	mov	r0, r7
 8017b0e:	47c0      	blx	r8
 8017b10:	3001      	adds	r0, #1
 8017b12:	d103      	bne.n	8017b1c <_printf_common+0xac>
 8017b14:	f04f 30ff 	mov.w	r0, #4294967295
 8017b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b1c:	3501      	adds	r5, #1
 8017b1e:	e7c6      	b.n	8017aae <_printf_common+0x3e>
 8017b20:	18e1      	adds	r1, r4, r3
 8017b22:	1c5a      	adds	r2, r3, #1
 8017b24:	2030      	movs	r0, #48	; 0x30
 8017b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b2a:	4422      	add	r2, r4
 8017b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b34:	3302      	adds	r3, #2
 8017b36:	e7c7      	b.n	8017ac8 <_printf_common+0x58>
 8017b38:	2301      	movs	r3, #1
 8017b3a:	4622      	mov	r2, r4
 8017b3c:	4649      	mov	r1, r9
 8017b3e:	4638      	mov	r0, r7
 8017b40:	47c0      	blx	r8
 8017b42:	3001      	adds	r0, #1
 8017b44:	d0e6      	beq.n	8017b14 <_printf_common+0xa4>
 8017b46:	3601      	adds	r6, #1
 8017b48:	e7d9      	b.n	8017afe <_printf_common+0x8e>
	...

08017b4c <_printf_i>:
 8017b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b50:	460c      	mov	r4, r1
 8017b52:	4691      	mov	r9, r2
 8017b54:	7e27      	ldrb	r7, [r4, #24]
 8017b56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b58:	2f78      	cmp	r7, #120	; 0x78
 8017b5a:	4680      	mov	r8, r0
 8017b5c:	469a      	mov	sl, r3
 8017b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b62:	d807      	bhi.n	8017b74 <_printf_i+0x28>
 8017b64:	2f62      	cmp	r7, #98	; 0x62
 8017b66:	d80a      	bhi.n	8017b7e <_printf_i+0x32>
 8017b68:	2f00      	cmp	r7, #0
 8017b6a:	f000 80d8 	beq.w	8017d1e <_printf_i+0x1d2>
 8017b6e:	2f58      	cmp	r7, #88	; 0x58
 8017b70:	f000 80a3 	beq.w	8017cba <_printf_i+0x16e>
 8017b74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b7c:	e03a      	b.n	8017bf4 <_printf_i+0xa8>
 8017b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b82:	2b15      	cmp	r3, #21
 8017b84:	d8f6      	bhi.n	8017b74 <_printf_i+0x28>
 8017b86:	a001      	add	r0, pc, #4	; (adr r0, 8017b8c <_printf_i+0x40>)
 8017b88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017b8c:	08017be5 	.word	0x08017be5
 8017b90:	08017bf9 	.word	0x08017bf9
 8017b94:	08017b75 	.word	0x08017b75
 8017b98:	08017b75 	.word	0x08017b75
 8017b9c:	08017b75 	.word	0x08017b75
 8017ba0:	08017b75 	.word	0x08017b75
 8017ba4:	08017bf9 	.word	0x08017bf9
 8017ba8:	08017b75 	.word	0x08017b75
 8017bac:	08017b75 	.word	0x08017b75
 8017bb0:	08017b75 	.word	0x08017b75
 8017bb4:	08017b75 	.word	0x08017b75
 8017bb8:	08017d05 	.word	0x08017d05
 8017bbc:	08017c29 	.word	0x08017c29
 8017bc0:	08017ce7 	.word	0x08017ce7
 8017bc4:	08017b75 	.word	0x08017b75
 8017bc8:	08017b75 	.word	0x08017b75
 8017bcc:	08017d27 	.word	0x08017d27
 8017bd0:	08017b75 	.word	0x08017b75
 8017bd4:	08017c29 	.word	0x08017c29
 8017bd8:	08017b75 	.word	0x08017b75
 8017bdc:	08017b75 	.word	0x08017b75
 8017be0:	08017cef 	.word	0x08017cef
 8017be4:	680b      	ldr	r3, [r1, #0]
 8017be6:	1d1a      	adds	r2, r3, #4
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	600a      	str	r2, [r1, #0]
 8017bec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	e0a3      	b.n	8017d40 <_printf_i+0x1f4>
 8017bf8:	6825      	ldr	r5, [r4, #0]
 8017bfa:	6808      	ldr	r0, [r1, #0]
 8017bfc:	062e      	lsls	r6, r5, #24
 8017bfe:	f100 0304 	add.w	r3, r0, #4
 8017c02:	d50a      	bpl.n	8017c1a <_printf_i+0xce>
 8017c04:	6805      	ldr	r5, [r0, #0]
 8017c06:	600b      	str	r3, [r1, #0]
 8017c08:	2d00      	cmp	r5, #0
 8017c0a:	da03      	bge.n	8017c14 <_printf_i+0xc8>
 8017c0c:	232d      	movs	r3, #45	; 0x2d
 8017c0e:	426d      	negs	r5, r5
 8017c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c14:	485e      	ldr	r0, [pc, #376]	; (8017d90 <_printf_i+0x244>)
 8017c16:	230a      	movs	r3, #10
 8017c18:	e019      	b.n	8017c4e <_printf_i+0x102>
 8017c1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017c1e:	6805      	ldr	r5, [r0, #0]
 8017c20:	600b      	str	r3, [r1, #0]
 8017c22:	bf18      	it	ne
 8017c24:	b22d      	sxthne	r5, r5
 8017c26:	e7ef      	b.n	8017c08 <_printf_i+0xbc>
 8017c28:	680b      	ldr	r3, [r1, #0]
 8017c2a:	6825      	ldr	r5, [r4, #0]
 8017c2c:	1d18      	adds	r0, r3, #4
 8017c2e:	6008      	str	r0, [r1, #0]
 8017c30:	0628      	lsls	r0, r5, #24
 8017c32:	d501      	bpl.n	8017c38 <_printf_i+0xec>
 8017c34:	681d      	ldr	r5, [r3, #0]
 8017c36:	e002      	b.n	8017c3e <_printf_i+0xf2>
 8017c38:	0669      	lsls	r1, r5, #25
 8017c3a:	d5fb      	bpl.n	8017c34 <_printf_i+0xe8>
 8017c3c:	881d      	ldrh	r5, [r3, #0]
 8017c3e:	4854      	ldr	r0, [pc, #336]	; (8017d90 <_printf_i+0x244>)
 8017c40:	2f6f      	cmp	r7, #111	; 0x6f
 8017c42:	bf0c      	ite	eq
 8017c44:	2308      	moveq	r3, #8
 8017c46:	230a      	movne	r3, #10
 8017c48:	2100      	movs	r1, #0
 8017c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c4e:	6866      	ldr	r6, [r4, #4]
 8017c50:	60a6      	str	r6, [r4, #8]
 8017c52:	2e00      	cmp	r6, #0
 8017c54:	bfa2      	ittt	ge
 8017c56:	6821      	ldrge	r1, [r4, #0]
 8017c58:	f021 0104 	bicge.w	r1, r1, #4
 8017c5c:	6021      	strge	r1, [r4, #0]
 8017c5e:	b90d      	cbnz	r5, 8017c64 <_printf_i+0x118>
 8017c60:	2e00      	cmp	r6, #0
 8017c62:	d04d      	beq.n	8017d00 <_printf_i+0x1b4>
 8017c64:	4616      	mov	r6, r2
 8017c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8017c6e:	5dc7      	ldrb	r7, [r0, r7]
 8017c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c74:	462f      	mov	r7, r5
 8017c76:	42bb      	cmp	r3, r7
 8017c78:	460d      	mov	r5, r1
 8017c7a:	d9f4      	bls.n	8017c66 <_printf_i+0x11a>
 8017c7c:	2b08      	cmp	r3, #8
 8017c7e:	d10b      	bne.n	8017c98 <_printf_i+0x14c>
 8017c80:	6823      	ldr	r3, [r4, #0]
 8017c82:	07df      	lsls	r7, r3, #31
 8017c84:	d508      	bpl.n	8017c98 <_printf_i+0x14c>
 8017c86:	6923      	ldr	r3, [r4, #16]
 8017c88:	6861      	ldr	r1, [r4, #4]
 8017c8a:	4299      	cmp	r1, r3
 8017c8c:	bfde      	ittt	le
 8017c8e:	2330      	movle	r3, #48	; 0x30
 8017c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c98:	1b92      	subs	r2, r2, r6
 8017c9a:	6122      	str	r2, [r4, #16]
 8017c9c:	f8cd a000 	str.w	sl, [sp]
 8017ca0:	464b      	mov	r3, r9
 8017ca2:	aa03      	add	r2, sp, #12
 8017ca4:	4621      	mov	r1, r4
 8017ca6:	4640      	mov	r0, r8
 8017ca8:	f7ff fee2 	bl	8017a70 <_printf_common>
 8017cac:	3001      	adds	r0, #1
 8017cae:	d14c      	bne.n	8017d4a <_printf_i+0x1fe>
 8017cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb4:	b004      	add	sp, #16
 8017cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cba:	4835      	ldr	r0, [pc, #212]	; (8017d90 <_printf_i+0x244>)
 8017cbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017cc0:	6823      	ldr	r3, [r4, #0]
 8017cc2:	680e      	ldr	r6, [r1, #0]
 8017cc4:	061f      	lsls	r7, r3, #24
 8017cc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8017cca:	600e      	str	r6, [r1, #0]
 8017ccc:	d514      	bpl.n	8017cf8 <_printf_i+0x1ac>
 8017cce:	07d9      	lsls	r1, r3, #31
 8017cd0:	bf44      	itt	mi
 8017cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8017cd6:	6023      	strmi	r3, [r4, #0]
 8017cd8:	b91d      	cbnz	r5, 8017ce2 <_printf_i+0x196>
 8017cda:	6823      	ldr	r3, [r4, #0]
 8017cdc:	f023 0320 	bic.w	r3, r3, #32
 8017ce0:	6023      	str	r3, [r4, #0]
 8017ce2:	2310      	movs	r3, #16
 8017ce4:	e7b0      	b.n	8017c48 <_printf_i+0xfc>
 8017ce6:	6823      	ldr	r3, [r4, #0]
 8017ce8:	f043 0320 	orr.w	r3, r3, #32
 8017cec:	6023      	str	r3, [r4, #0]
 8017cee:	2378      	movs	r3, #120	; 0x78
 8017cf0:	4828      	ldr	r0, [pc, #160]	; (8017d94 <_printf_i+0x248>)
 8017cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017cf6:	e7e3      	b.n	8017cc0 <_printf_i+0x174>
 8017cf8:	065e      	lsls	r6, r3, #25
 8017cfa:	bf48      	it	mi
 8017cfc:	b2ad      	uxthmi	r5, r5
 8017cfe:	e7e6      	b.n	8017cce <_printf_i+0x182>
 8017d00:	4616      	mov	r6, r2
 8017d02:	e7bb      	b.n	8017c7c <_printf_i+0x130>
 8017d04:	680b      	ldr	r3, [r1, #0]
 8017d06:	6826      	ldr	r6, [r4, #0]
 8017d08:	6960      	ldr	r0, [r4, #20]
 8017d0a:	1d1d      	adds	r5, r3, #4
 8017d0c:	600d      	str	r5, [r1, #0]
 8017d0e:	0635      	lsls	r5, r6, #24
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	d501      	bpl.n	8017d18 <_printf_i+0x1cc>
 8017d14:	6018      	str	r0, [r3, #0]
 8017d16:	e002      	b.n	8017d1e <_printf_i+0x1d2>
 8017d18:	0671      	lsls	r1, r6, #25
 8017d1a:	d5fb      	bpl.n	8017d14 <_printf_i+0x1c8>
 8017d1c:	8018      	strh	r0, [r3, #0]
 8017d1e:	2300      	movs	r3, #0
 8017d20:	6123      	str	r3, [r4, #16]
 8017d22:	4616      	mov	r6, r2
 8017d24:	e7ba      	b.n	8017c9c <_printf_i+0x150>
 8017d26:	680b      	ldr	r3, [r1, #0]
 8017d28:	1d1a      	adds	r2, r3, #4
 8017d2a:	600a      	str	r2, [r1, #0]
 8017d2c:	681e      	ldr	r6, [r3, #0]
 8017d2e:	6862      	ldr	r2, [r4, #4]
 8017d30:	2100      	movs	r1, #0
 8017d32:	4630      	mov	r0, r6
 8017d34:	f7e8 fa64 	bl	8000200 <memchr>
 8017d38:	b108      	cbz	r0, 8017d3e <_printf_i+0x1f2>
 8017d3a:	1b80      	subs	r0, r0, r6
 8017d3c:	6060      	str	r0, [r4, #4]
 8017d3e:	6863      	ldr	r3, [r4, #4]
 8017d40:	6123      	str	r3, [r4, #16]
 8017d42:	2300      	movs	r3, #0
 8017d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d48:	e7a8      	b.n	8017c9c <_printf_i+0x150>
 8017d4a:	6923      	ldr	r3, [r4, #16]
 8017d4c:	4632      	mov	r2, r6
 8017d4e:	4649      	mov	r1, r9
 8017d50:	4640      	mov	r0, r8
 8017d52:	47d0      	blx	sl
 8017d54:	3001      	adds	r0, #1
 8017d56:	d0ab      	beq.n	8017cb0 <_printf_i+0x164>
 8017d58:	6823      	ldr	r3, [r4, #0]
 8017d5a:	079b      	lsls	r3, r3, #30
 8017d5c:	d413      	bmi.n	8017d86 <_printf_i+0x23a>
 8017d5e:	68e0      	ldr	r0, [r4, #12]
 8017d60:	9b03      	ldr	r3, [sp, #12]
 8017d62:	4298      	cmp	r0, r3
 8017d64:	bfb8      	it	lt
 8017d66:	4618      	movlt	r0, r3
 8017d68:	e7a4      	b.n	8017cb4 <_printf_i+0x168>
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	4632      	mov	r2, r6
 8017d6e:	4649      	mov	r1, r9
 8017d70:	4640      	mov	r0, r8
 8017d72:	47d0      	blx	sl
 8017d74:	3001      	adds	r0, #1
 8017d76:	d09b      	beq.n	8017cb0 <_printf_i+0x164>
 8017d78:	3501      	adds	r5, #1
 8017d7a:	68e3      	ldr	r3, [r4, #12]
 8017d7c:	9903      	ldr	r1, [sp, #12]
 8017d7e:	1a5b      	subs	r3, r3, r1
 8017d80:	42ab      	cmp	r3, r5
 8017d82:	dcf2      	bgt.n	8017d6a <_printf_i+0x21e>
 8017d84:	e7eb      	b.n	8017d5e <_printf_i+0x212>
 8017d86:	2500      	movs	r5, #0
 8017d88:	f104 0619 	add.w	r6, r4, #25
 8017d8c:	e7f5      	b.n	8017d7a <_printf_i+0x22e>
 8017d8e:	bf00      	nop
 8017d90:	0801bb1f 	.word	0x0801bb1f
 8017d94:	0801bb30 	.word	0x0801bb30

08017d98 <_read_r>:
 8017d98:	b538      	push	{r3, r4, r5, lr}
 8017d9a:	4d07      	ldr	r5, [pc, #28]	; (8017db8 <_read_r+0x20>)
 8017d9c:	4604      	mov	r4, r0
 8017d9e:	4608      	mov	r0, r1
 8017da0:	4611      	mov	r1, r2
 8017da2:	2200      	movs	r2, #0
 8017da4:	602a      	str	r2, [r5, #0]
 8017da6:	461a      	mov	r2, r3
 8017da8:	f7e8 ff84 	bl	8000cb4 <_read>
 8017dac:	1c43      	adds	r3, r0, #1
 8017dae:	d102      	bne.n	8017db6 <_read_r+0x1e>
 8017db0:	682b      	ldr	r3, [r5, #0]
 8017db2:	b103      	cbz	r3, 8017db6 <_read_r+0x1e>
 8017db4:	6023      	str	r3, [r4, #0]
 8017db6:	bd38      	pop	{r3, r4, r5, pc}
 8017db8:	2002585c 	.word	0x2002585c

08017dbc <__swbuf_r>:
 8017dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dbe:	460e      	mov	r6, r1
 8017dc0:	4614      	mov	r4, r2
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	b118      	cbz	r0, 8017dce <__swbuf_r+0x12>
 8017dc6:	6983      	ldr	r3, [r0, #24]
 8017dc8:	b90b      	cbnz	r3, 8017dce <__swbuf_r+0x12>
 8017dca:	f7fe ff63 	bl	8016c94 <__sinit>
 8017dce:	4b21      	ldr	r3, [pc, #132]	; (8017e54 <__swbuf_r+0x98>)
 8017dd0:	429c      	cmp	r4, r3
 8017dd2:	d12b      	bne.n	8017e2c <__swbuf_r+0x70>
 8017dd4:	686c      	ldr	r4, [r5, #4]
 8017dd6:	69a3      	ldr	r3, [r4, #24]
 8017dd8:	60a3      	str	r3, [r4, #8]
 8017dda:	89a3      	ldrh	r3, [r4, #12]
 8017ddc:	071a      	lsls	r2, r3, #28
 8017dde:	d52f      	bpl.n	8017e40 <__swbuf_r+0x84>
 8017de0:	6923      	ldr	r3, [r4, #16]
 8017de2:	b36b      	cbz	r3, 8017e40 <__swbuf_r+0x84>
 8017de4:	6923      	ldr	r3, [r4, #16]
 8017de6:	6820      	ldr	r0, [r4, #0]
 8017de8:	1ac0      	subs	r0, r0, r3
 8017dea:	6963      	ldr	r3, [r4, #20]
 8017dec:	b2f6      	uxtb	r6, r6
 8017dee:	4283      	cmp	r3, r0
 8017df0:	4637      	mov	r7, r6
 8017df2:	dc04      	bgt.n	8017dfe <__swbuf_r+0x42>
 8017df4:	4621      	mov	r1, r4
 8017df6:	4628      	mov	r0, r5
 8017df8:	f7ff fb18 	bl	801742c <_fflush_r>
 8017dfc:	bb30      	cbnz	r0, 8017e4c <__swbuf_r+0x90>
 8017dfe:	68a3      	ldr	r3, [r4, #8]
 8017e00:	3b01      	subs	r3, #1
 8017e02:	60a3      	str	r3, [r4, #8]
 8017e04:	6823      	ldr	r3, [r4, #0]
 8017e06:	1c5a      	adds	r2, r3, #1
 8017e08:	6022      	str	r2, [r4, #0]
 8017e0a:	701e      	strb	r6, [r3, #0]
 8017e0c:	6963      	ldr	r3, [r4, #20]
 8017e0e:	3001      	adds	r0, #1
 8017e10:	4283      	cmp	r3, r0
 8017e12:	d004      	beq.n	8017e1e <__swbuf_r+0x62>
 8017e14:	89a3      	ldrh	r3, [r4, #12]
 8017e16:	07db      	lsls	r3, r3, #31
 8017e18:	d506      	bpl.n	8017e28 <__swbuf_r+0x6c>
 8017e1a:	2e0a      	cmp	r6, #10
 8017e1c:	d104      	bne.n	8017e28 <__swbuf_r+0x6c>
 8017e1e:	4621      	mov	r1, r4
 8017e20:	4628      	mov	r0, r5
 8017e22:	f7ff fb03 	bl	801742c <_fflush_r>
 8017e26:	b988      	cbnz	r0, 8017e4c <__swbuf_r+0x90>
 8017e28:	4638      	mov	r0, r7
 8017e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e2c:	4b0a      	ldr	r3, [pc, #40]	; (8017e58 <__swbuf_r+0x9c>)
 8017e2e:	429c      	cmp	r4, r3
 8017e30:	d101      	bne.n	8017e36 <__swbuf_r+0x7a>
 8017e32:	68ac      	ldr	r4, [r5, #8]
 8017e34:	e7cf      	b.n	8017dd6 <__swbuf_r+0x1a>
 8017e36:	4b09      	ldr	r3, [pc, #36]	; (8017e5c <__swbuf_r+0xa0>)
 8017e38:	429c      	cmp	r4, r3
 8017e3a:	bf08      	it	eq
 8017e3c:	68ec      	ldreq	r4, [r5, #12]
 8017e3e:	e7ca      	b.n	8017dd6 <__swbuf_r+0x1a>
 8017e40:	4621      	mov	r1, r4
 8017e42:	4628      	mov	r0, r5
 8017e44:	f000 f80c 	bl	8017e60 <__swsetup_r>
 8017e48:	2800      	cmp	r0, #0
 8017e4a:	d0cb      	beq.n	8017de4 <__swbuf_r+0x28>
 8017e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8017e50:	e7ea      	b.n	8017e28 <__swbuf_r+0x6c>
 8017e52:	bf00      	nop
 8017e54:	0801ba18 	.word	0x0801ba18
 8017e58:	0801ba38 	.word	0x0801ba38
 8017e5c:	0801b9f8 	.word	0x0801b9f8

08017e60 <__swsetup_r>:
 8017e60:	4b32      	ldr	r3, [pc, #200]	; (8017f2c <__swsetup_r+0xcc>)
 8017e62:	b570      	push	{r4, r5, r6, lr}
 8017e64:	681d      	ldr	r5, [r3, #0]
 8017e66:	4606      	mov	r6, r0
 8017e68:	460c      	mov	r4, r1
 8017e6a:	b125      	cbz	r5, 8017e76 <__swsetup_r+0x16>
 8017e6c:	69ab      	ldr	r3, [r5, #24]
 8017e6e:	b913      	cbnz	r3, 8017e76 <__swsetup_r+0x16>
 8017e70:	4628      	mov	r0, r5
 8017e72:	f7fe ff0f 	bl	8016c94 <__sinit>
 8017e76:	4b2e      	ldr	r3, [pc, #184]	; (8017f30 <__swsetup_r+0xd0>)
 8017e78:	429c      	cmp	r4, r3
 8017e7a:	d10f      	bne.n	8017e9c <__swsetup_r+0x3c>
 8017e7c:	686c      	ldr	r4, [r5, #4]
 8017e7e:	89a3      	ldrh	r3, [r4, #12]
 8017e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e84:	0719      	lsls	r1, r3, #28
 8017e86:	d42c      	bmi.n	8017ee2 <__swsetup_r+0x82>
 8017e88:	06dd      	lsls	r5, r3, #27
 8017e8a:	d411      	bmi.n	8017eb0 <__swsetup_r+0x50>
 8017e8c:	2309      	movs	r3, #9
 8017e8e:	6033      	str	r3, [r6, #0]
 8017e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017e94:	81a3      	strh	r3, [r4, #12]
 8017e96:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9a:	e03e      	b.n	8017f1a <__swsetup_r+0xba>
 8017e9c:	4b25      	ldr	r3, [pc, #148]	; (8017f34 <__swsetup_r+0xd4>)
 8017e9e:	429c      	cmp	r4, r3
 8017ea0:	d101      	bne.n	8017ea6 <__swsetup_r+0x46>
 8017ea2:	68ac      	ldr	r4, [r5, #8]
 8017ea4:	e7eb      	b.n	8017e7e <__swsetup_r+0x1e>
 8017ea6:	4b24      	ldr	r3, [pc, #144]	; (8017f38 <__swsetup_r+0xd8>)
 8017ea8:	429c      	cmp	r4, r3
 8017eaa:	bf08      	it	eq
 8017eac:	68ec      	ldreq	r4, [r5, #12]
 8017eae:	e7e6      	b.n	8017e7e <__swsetup_r+0x1e>
 8017eb0:	0758      	lsls	r0, r3, #29
 8017eb2:	d512      	bpl.n	8017eda <__swsetup_r+0x7a>
 8017eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017eb6:	b141      	cbz	r1, 8017eca <__swsetup_r+0x6a>
 8017eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ebc:	4299      	cmp	r1, r3
 8017ebe:	d002      	beq.n	8017ec6 <__swsetup_r+0x66>
 8017ec0:	4630      	mov	r0, r6
 8017ec2:	f7fe fff3 	bl	8016eac <_free_r>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8017eca:	89a3      	ldrh	r3, [r4, #12]
 8017ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ed0:	81a3      	strh	r3, [r4, #12]
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	6063      	str	r3, [r4, #4]
 8017ed6:	6923      	ldr	r3, [r4, #16]
 8017ed8:	6023      	str	r3, [r4, #0]
 8017eda:	89a3      	ldrh	r3, [r4, #12]
 8017edc:	f043 0308 	orr.w	r3, r3, #8
 8017ee0:	81a3      	strh	r3, [r4, #12]
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	b94b      	cbnz	r3, 8017efa <__swsetup_r+0x9a>
 8017ee6:	89a3      	ldrh	r3, [r4, #12]
 8017ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ef0:	d003      	beq.n	8017efa <__swsetup_r+0x9a>
 8017ef2:	4621      	mov	r1, r4
 8017ef4:	4630      	mov	r0, r6
 8017ef6:	f000 f84d 	bl	8017f94 <__smakebuf_r>
 8017efa:	89a0      	ldrh	r0, [r4, #12]
 8017efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f00:	f010 0301 	ands.w	r3, r0, #1
 8017f04:	d00a      	beq.n	8017f1c <__swsetup_r+0xbc>
 8017f06:	2300      	movs	r3, #0
 8017f08:	60a3      	str	r3, [r4, #8]
 8017f0a:	6963      	ldr	r3, [r4, #20]
 8017f0c:	425b      	negs	r3, r3
 8017f0e:	61a3      	str	r3, [r4, #24]
 8017f10:	6923      	ldr	r3, [r4, #16]
 8017f12:	b943      	cbnz	r3, 8017f26 <__swsetup_r+0xc6>
 8017f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017f18:	d1ba      	bne.n	8017e90 <__swsetup_r+0x30>
 8017f1a:	bd70      	pop	{r4, r5, r6, pc}
 8017f1c:	0781      	lsls	r1, r0, #30
 8017f1e:	bf58      	it	pl
 8017f20:	6963      	ldrpl	r3, [r4, #20]
 8017f22:	60a3      	str	r3, [r4, #8]
 8017f24:	e7f4      	b.n	8017f10 <__swsetup_r+0xb0>
 8017f26:	2000      	movs	r0, #0
 8017f28:	e7f7      	b.n	8017f1a <__swsetup_r+0xba>
 8017f2a:	bf00      	nop
 8017f2c:	2000001c 	.word	0x2000001c
 8017f30:	0801ba18 	.word	0x0801ba18
 8017f34:	0801ba38 	.word	0x0801ba38
 8017f38:	0801b9f8 	.word	0x0801b9f8

08017f3c <abort>:
 8017f3c:	b508      	push	{r3, lr}
 8017f3e:	2006      	movs	r0, #6
 8017f40:	f000 f8b6 	bl	80180b0 <raise>
 8017f44:	2001      	movs	r0, #1
 8017f46:	f7e8 feab 	bl	8000ca0 <_exit>

08017f4a <__swhatbuf_r>:
 8017f4a:	b570      	push	{r4, r5, r6, lr}
 8017f4c:	460e      	mov	r6, r1
 8017f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f52:	2900      	cmp	r1, #0
 8017f54:	b096      	sub	sp, #88	; 0x58
 8017f56:	4614      	mov	r4, r2
 8017f58:	461d      	mov	r5, r3
 8017f5a:	da07      	bge.n	8017f6c <__swhatbuf_r+0x22>
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	602b      	str	r3, [r5, #0]
 8017f60:	89b3      	ldrh	r3, [r6, #12]
 8017f62:	061a      	lsls	r2, r3, #24
 8017f64:	d410      	bmi.n	8017f88 <__swhatbuf_r+0x3e>
 8017f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f6a:	e00e      	b.n	8017f8a <__swhatbuf_r+0x40>
 8017f6c:	466a      	mov	r2, sp
 8017f6e:	f000 f8bb 	bl	80180e8 <_fstat_r>
 8017f72:	2800      	cmp	r0, #0
 8017f74:	dbf2      	blt.n	8017f5c <__swhatbuf_r+0x12>
 8017f76:	9a01      	ldr	r2, [sp, #4]
 8017f78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f80:	425a      	negs	r2, r3
 8017f82:	415a      	adcs	r2, r3
 8017f84:	602a      	str	r2, [r5, #0]
 8017f86:	e7ee      	b.n	8017f66 <__swhatbuf_r+0x1c>
 8017f88:	2340      	movs	r3, #64	; 0x40
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	6023      	str	r3, [r4, #0]
 8017f8e:	b016      	add	sp, #88	; 0x58
 8017f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f94 <__smakebuf_r>:
 8017f94:	898b      	ldrh	r3, [r1, #12]
 8017f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f98:	079d      	lsls	r5, r3, #30
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	460c      	mov	r4, r1
 8017f9e:	d507      	bpl.n	8017fb0 <__smakebuf_r+0x1c>
 8017fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017fa4:	6023      	str	r3, [r4, #0]
 8017fa6:	6123      	str	r3, [r4, #16]
 8017fa8:	2301      	movs	r3, #1
 8017faa:	6163      	str	r3, [r4, #20]
 8017fac:	b002      	add	sp, #8
 8017fae:	bd70      	pop	{r4, r5, r6, pc}
 8017fb0:	ab01      	add	r3, sp, #4
 8017fb2:	466a      	mov	r2, sp
 8017fb4:	f7ff ffc9 	bl	8017f4a <__swhatbuf_r>
 8017fb8:	9900      	ldr	r1, [sp, #0]
 8017fba:	4605      	mov	r5, r0
 8017fbc:	4630      	mov	r0, r6
 8017fbe:	f7fe ffc5 	bl	8016f4c <_malloc_r>
 8017fc2:	b948      	cbnz	r0, 8017fd8 <__smakebuf_r+0x44>
 8017fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fc8:	059a      	lsls	r2, r3, #22
 8017fca:	d4ef      	bmi.n	8017fac <__smakebuf_r+0x18>
 8017fcc:	f023 0303 	bic.w	r3, r3, #3
 8017fd0:	f043 0302 	orr.w	r3, r3, #2
 8017fd4:	81a3      	strh	r3, [r4, #12]
 8017fd6:	e7e3      	b.n	8017fa0 <__smakebuf_r+0xc>
 8017fd8:	4b0d      	ldr	r3, [pc, #52]	; (8018010 <__smakebuf_r+0x7c>)
 8017fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8017fdc:	89a3      	ldrh	r3, [r4, #12]
 8017fde:	6020      	str	r0, [r4, #0]
 8017fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fe4:	81a3      	strh	r3, [r4, #12]
 8017fe6:	9b00      	ldr	r3, [sp, #0]
 8017fe8:	6163      	str	r3, [r4, #20]
 8017fea:	9b01      	ldr	r3, [sp, #4]
 8017fec:	6120      	str	r0, [r4, #16]
 8017fee:	b15b      	cbz	r3, 8018008 <__smakebuf_r+0x74>
 8017ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	f000 f889 	bl	801810c <_isatty_r>
 8017ffa:	b128      	cbz	r0, 8018008 <__smakebuf_r+0x74>
 8017ffc:	89a3      	ldrh	r3, [r4, #12]
 8017ffe:	f023 0303 	bic.w	r3, r3, #3
 8018002:	f043 0301 	orr.w	r3, r3, #1
 8018006:	81a3      	strh	r3, [r4, #12]
 8018008:	89a0      	ldrh	r0, [r4, #12]
 801800a:	4305      	orrs	r5, r0
 801800c:	81a5      	strh	r5, [r4, #12]
 801800e:	e7cd      	b.n	8017fac <__smakebuf_r+0x18>
 8018010:	08016c2d 	.word	0x08016c2d

08018014 <_realloc_r>:
 8018014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018016:	4607      	mov	r7, r0
 8018018:	4614      	mov	r4, r2
 801801a:	460e      	mov	r6, r1
 801801c:	b921      	cbnz	r1, 8018028 <_realloc_r+0x14>
 801801e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018022:	4611      	mov	r1, r2
 8018024:	f7fe bf92 	b.w	8016f4c <_malloc_r>
 8018028:	b922      	cbnz	r2, 8018034 <_realloc_r+0x20>
 801802a:	f7fe ff3f 	bl	8016eac <_free_r>
 801802e:	4625      	mov	r5, r4
 8018030:	4628      	mov	r0, r5
 8018032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018034:	f000 f87a 	bl	801812c <_malloc_usable_size_r>
 8018038:	42a0      	cmp	r0, r4
 801803a:	d20f      	bcs.n	801805c <_realloc_r+0x48>
 801803c:	4621      	mov	r1, r4
 801803e:	4638      	mov	r0, r7
 8018040:	f7fe ff84 	bl	8016f4c <_malloc_r>
 8018044:	4605      	mov	r5, r0
 8018046:	2800      	cmp	r0, #0
 8018048:	d0f2      	beq.n	8018030 <_realloc_r+0x1c>
 801804a:	4631      	mov	r1, r6
 801804c:	4622      	mov	r2, r4
 801804e:	f7fe fefd 	bl	8016e4c <memcpy>
 8018052:	4631      	mov	r1, r6
 8018054:	4638      	mov	r0, r7
 8018056:	f7fe ff29 	bl	8016eac <_free_r>
 801805a:	e7e9      	b.n	8018030 <_realloc_r+0x1c>
 801805c:	4635      	mov	r5, r6
 801805e:	e7e7      	b.n	8018030 <_realloc_r+0x1c>

08018060 <_raise_r>:
 8018060:	291f      	cmp	r1, #31
 8018062:	b538      	push	{r3, r4, r5, lr}
 8018064:	4604      	mov	r4, r0
 8018066:	460d      	mov	r5, r1
 8018068:	d904      	bls.n	8018074 <_raise_r+0x14>
 801806a:	2316      	movs	r3, #22
 801806c:	6003      	str	r3, [r0, #0]
 801806e:	f04f 30ff 	mov.w	r0, #4294967295
 8018072:	bd38      	pop	{r3, r4, r5, pc}
 8018074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018076:	b112      	cbz	r2, 801807e <_raise_r+0x1e>
 8018078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801807c:	b94b      	cbnz	r3, 8018092 <_raise_r+0x32>
 801807e:	4620      	mov	r0, r4
 8018080:	f000 f830 	bl	80180e4 <_getpid_r>
 8018084:	462a      	mov	r2, r5
 8018086:	4601      	mov	r1, r0
 8018088:	4620      	mov	r0, r4
 801808a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801808e:	f000 b817 	b.w	80180c0 <_kill_r>
 8018092:	2b01      	cmp	r3, #1
 8018094:	d00a      	beq.n	80180ac <_raise_r+0x4c>
 8018096:	1c59      	adds	r1, r3, #1
 8018098:	d103      	bne.n	80180a2 <_raise_r+0x42>
 801809a:	2316      	movs	r3, #22
 801809c:	6003      	str	r3, [r0, #0]
 801809e:	2001      	movs	r0, #1
 80180a0:	e7e7      	b.n	8018072 <_raise_r+0x12>
 80180a2:	2400      	movs	r4, #0
 80180a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80180a8:	4628      	mov	r0, r5
 80180aa:	4798      	blx	r3
 80180ac:	2000      	movs	r0, #0
 80180ae:	e7e0      	b.n	8018072 <_raise_r+0x12>

080180b0 <raise>:
 80180b0:	4b02      	ldr	r3, [pc, #8]	; (80180bc <raise+0xc>)
 80180b2:	4601      	mov	r1, r0
 80180b4:	6818      	ldr	r0, [r3, #0]
 80180b6:	f7ff bfd3 	b.w	8018060 <_raise_r>
 80180ba:	bf00      	nop
 80180bc:	2000001c 	.word	0x2000001c

080180c0 <_kill_r>:
 80180c0:	b538      	push	{r3, r4, r5, lr}
 80180c2:	4d07      	ldr	r5, [pc, #28]	; (80180e0 <_kill_r+0x20>)
 80180c4:	2300      	movs	r3, #0
 80180c6:	4604      	mov	r4, r0
 80180c8:	4608      	mov	r0, r1
 80180ca:	4611      	mov	r1, r2
 80180cc:	602b      	str	r3, [r5, #0]
 80180ce:	f7e8 fdd5 	bl	8000c7c <_kill>
 80180d2:	1c43      	adds	r3, r0, #1
 80180d4:	d102      	bne.n	80180dc <_kill_r+0x1c>
 80180d6:	682b      	ldr	r3, [r5, #0]
 80180d8:	b103      	cbz	r3, 80180dc <_kill_r+0x1c>
 80180da:	6023      	str	r3, [r4, #0]
 80180dc:	bd38      	pop	{r3, r4, r5, pc}
 80180de:	bf00      	nop
 80180e0:	2002585c 	.word	0x2002585c

080180e4 <_getpid_r>:
 80180e4:	f7e8 bdc2 	b.w	8000c6c <_getpid>

080180e8 <_fstat_r>:
 80180e8:	b538      	push	{r3, r4, r5, lr}
 80180ea:	4d07      	ldr	r5, [pc, #28]	; (8018108 <_fstat_r+0x20>)
 80180ec:	2300      	movs	r3, #0
 80180ee:	4604      	mov	r4, r0
 80180f0:	4608      	mov	r0, r1
 80180f2:	4611      	mov	r1, r2
 80180f4:	602b      	str	r3, [r5, #0]
 80180f6:	f7e8 fe22 	bl	8000d3e <_fstat>
 80180fa:	1c43      	adds	r3, r0, #1
 80180fc:	d102      	bne.n	8018104 <_fstat_r+0x1c>
 80180fe:	682b      	ldr	r3, [r5, #0]
 8018100:	b103      	cbz	r3, 8018104 <_fstat_r+0x1c>
 8018102:	6023      	str	r3, [r4, #0]
 8018104:	bd38      	pop	{r3, r4, r5, pc}
 8018106:	bf00      	nop
 8018108:	2002585c 	.word	0x2002585c

0801810c <_isatty_r>:
 801810c:	b538      	push	{r3, r4, r5, lr}
 801810e:	4d06      	ldr	r5, [pc, #24]	; (8018128 <_isatty_r+0x1c>)
 8018110:	2300      	movs	r3, #0
 8018112:	4604      	mov	r4, r0
 8018114:	4608      	mov	r0, r1
 8018116:	602b      	str	r3, [r5, #0]
 8018118:	f7e8 fe21 	bl	8000d5e <_isatty>
 801811c:	1c43      	adds	r3, r0, #1
 801811e:	d102      	bne.n	8018126 <_isatty_r+0x1a>
 8018120:	682b      	ldr	r3, [r5, #0]
 8018122:	b103      	cbz	r3, 8018126 <_isatty_r+0x1a>
 8018124:	6023      	str	r3, [r4, #0]
 8018126:	bd38      	pop	{r3, r4, r5, pc}
 8018128:	2002585c 	.word	0x2002585c

0801812c <_malloc_usable_size_r>:
 801812c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018130:	1f18      	subs	r0, r3, #4
 8018132:	2b00      	cmp	r3, #0
 8018134:	bfbc      	itt	lt
 8018136:	580b      	ldrlt	r3, [r1, r0]
 8018138:	18c0      	addlt	r0, r0, r3
 801813a:	4770      	bx	lr

0801813c <_init>:
 801813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813e:	bf00      	nop
 8018140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018142:	bc08      	pop	{r3}
 8018144:	469e      	mov	lr, r3
 8018146:	4770      	bx	lr

08018148 <_fini>:
 8018148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814a:	bf00      	nop
 801814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801814e:	bc08      	pop	{r3}
 8018150:	469e      	mov	lr, r3
 8018152:	4770      	bx	lr
