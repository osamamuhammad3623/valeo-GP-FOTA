
netconnClient_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039c4  08017100  08017100  00027100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aac4  0801aac4  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801aac4  0801aac4  0002aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aacc  0801aacc  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aacc  0801aacc  0002aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aad0  0801aad0  0002aad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801aad4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000b590  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b614  2000b614  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049fe7  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008835  00000000  00000000  0007a09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002448  00000000  00000000  000828d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022b8  00000000  00000000  00084d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012afe  00000000  00000000  00086fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003871d  00000000  00000000  00099ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102801  00000000  00000000  000d21eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d49ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a008  00000000  00000000  001d4a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080170e8 	.word	0x080170e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080170e8 	.word	0x080170e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fe2a 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f822 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8aa 	bl	80006fc <MX_GPIO_Init>
  MX_HASH_Init();
 80005a8:	f000 f88e 	bl	80006c8 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  init_uds_request_callback(UDS_start_request);
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x3c>)
 80005ae:	f000 fb51 	bl	8000c54 <init_uds_request_callback>
  init_uds_recv_resp_clbk(UDS_receive_response);
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x40>)
 80005b4:	f000 fb5e 	bl	8000c74 <init_uds_recv_resp_clbk>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f004 f886 	bl	80046c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <main+0x44>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x48>)
 80005c2:	f004 f8e0 	bl	8004786 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <main+0x4c>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f004 f8a0 	bl	8004710 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x38>
 80005d2:	bf00      	nop
 80005d4:	0800117d 	.word	0x0800117d
 80005d8:	08000f51 	.word	0x08000f51
 80005dc:	0801a714 	.word	0x0801a714
 80005e0:	080008bd 	.word	0x080008bd
 80005e4:	20004c1c 	.word	0x20004c1c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f015 fc26 	bl	8015e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <SystemClock_Config+0xd8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0xd8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xd8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xdc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <SystemClock_Config+0xdc>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xdc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	; 0xb4
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fb19 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f93e 	bl	80008f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f002 fac2 	bl	8002c04 <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000686:	f000 f937 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fd73 	bl	8003194 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f920 	bl	80008f8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_HASH_Init+0x2c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  hhash.Init.KeySize = 17;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_HASH_Init+0x2c>)
 80006d4:	2211      	movs	r2, #17
 80006d6:	605a      	str	r2, [r3, #4]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_HASH_Init+0x2c>)
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MX_HASH_Init+0x30>)
 80006dc:	609a      	str	r2, [r3, #8]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_HASH_Init+0x2c>)
 80006e0:	f002 fa3c 	bl	8002b5c <HAL_HASH_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80006ea:	f000 f905 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20004c20 	.word	0x20004c20
 80006f8:	0801a700 	.word	0x0801a700

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4b63      	ldr	r3, [pc, #396]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a62      	ldr	r2, [pc, #392]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a5b      	ldr	r2, [pc, #364]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b52      	ldr	r3, [pc, #328]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a3f      	ldr	r2, [pc, #252]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <MX_GPIO_Init+0x1a8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 80007c2:	f002 f9b1 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4838      	ldr	r0, [pc, #224]	; (80008ac <MX_GPIO_Init+0x1b0>)
 80007cc:	f002 f9ac 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4832      	ldr	r0, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x1b4>)
 80007e8:	f001 fff2 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4828      	ldr	r0, [pc, #160]	; (80008a8 <MX_GPIO_Init+0x1ac>)
 8000806:	f001 ffe3 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800080a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800081c:	2307      	movs	r3, #7
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <MX_GPIO_Init+0x1b8>)
 8000828:	f001 ffd2 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_GPIO_Init+0x1b0>)
 8000844:	f001 ffc4 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_GPIO_Init+0x1b0>)
 800085c:	f001 ffb8 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000860:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000872:	230a      	movs	r3, #10
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_GPIO_Init+0x1bc>)
 800087e:	f001 ffa7 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <MX_GPIO_Init+0x1bc>)
 8000898:	f001 ff9a 	bl	80027d0 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020800 	.word	0x40020800
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40020000 	.word	0x40020000

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008c4:	f003 f92e 	bl	8003b24 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpclient_init();
 80008c8:	f000 fae2 	bl	8000e90 <tcpclient_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f003 ffec 	bl	80048aa <osDelay>
 80008d2:	e7fb      	b.n	80008cc <StartDefaultTask+0x10>

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 fca7 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fd6f 	bl	8001430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_HASH_MspInit+0x30>)
 800096e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_HASH_MspInit+0x30>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6353      	str	r3, [r2, #52]	; 0x34
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_HASH_MspInit+0x30>)
 800097a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2019      	movs	r0, #25
 80009aa:	f000 fd41 	bl	8001430 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 fd5a 	bl	8001468 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xa4>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xa4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6453      	str	r3, [r2, #68]	; 0x44
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xa4>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fdc2 	bl	8003564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009e0:	f002 fdac 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa8>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xac>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xb0>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xac>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xac>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xac>)
 8000a1a:	f002 fdd5 	bl	80035c8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xac>)
 8000a26:	f002 fe29 	bl	800367c <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	20004c64 	.word	0x20004c64
 8000a44:	40010000 	.word	0x40010000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a7a:	f002 fe6f 	bl	800375c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20004c64 	.word	0x20004c64

08000a88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <ETH_IRQHandler+0x10>)
 8000a8e:	f001 f8dd 	bl	8001c4c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20006674 	.word	0x20006674

08000a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	return 1;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_kill>:

int _kill(int pid, int sig)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <_kill+0x20>)
 8000ab8:	2216      	movs	r2, #22
 8000aba:	601a      	str	r2, [r3, #0]
	return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000b600 	.word	0x2000b600

08000ad0 <_exit>:

void _exit (int status)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffe5 	bl	8000aac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ae2:	e7fe      	b.n	8000ae2 <_exit+0x12>

08000ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
	}

return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e009      	b.n	8000b44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf1      	blt.n	8000b30 <_write+0x12>
	}
	return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_close>:

int _close(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_isatty>:

int _isatty(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	return 1;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d205      	bcs.n	8000bfc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <_sbrk+0x6c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20030000 	.word	0x20030000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	2000b618 	.word	0x2000b618
 8000c2c:	2000b600 	.word	0x2000b600

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <init_uds_request_callback>:

struct target_confg target_1;
struct target_confg target_2;
//==========================================================

void init_uds_request_callback(void (*p) (TargetECU targetECU)) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uds_req_clbk = p;
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <init_uds_request_callback+0x1c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20004cac 	.word	0x20004cac

08000c74 <init_uds_recv_resp_clbk>:

void init_uds_recv_resp_clbk(void (*p)(TargetECU targetECU, void *arg)) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uds_recv_resp_clbk = p;
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <init_uds_recv_resp_clbk+0x1c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20004d14 	.word	0x20004d14

08000c94 <tcpinit_thread>:

	}
}*/

static void tcpinit_thread(void *arg)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	// Cast the argument to the correct type
	if(arg == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 8084 	beq.w	8000dac <tcpinit_thread+0x118>
		return;
	struct target_confg *config = (struct target_confg*)arg;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	623b      	str	r3, [r7, #32]
	err_t err, connect_error;
	ip_addr_t dest_addr;


	// Extract the IP address, port number and the target ECU
	char* ip_address = malloc(strlen(config->ip_add) + 1); // allocate memory for the string
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa9f 	bl	80001f0 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f015 f888 	bl	8015dcc <malloc>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	61fb      	str	r3, [r7, #28]
	strcpy(ip_address, config->ip_add); // copy the string into the new buffer
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	69f8      	ldr	r0, [r7, #28]
 8000cc8:	f015 faa5 	bl	8016216 <strcpy>
	ip_address[strlen(config->ip_add)] = '\0'; // add null terminat
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fa8d 	bl	80001f0 <strlen>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	unsigned short dest_port = config->portNum;
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	837b      	strh	r3, [r7, #26]

	TargetECU target_ECU = config->targetECU;
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	799b      	ldrb	r3, [r3, #6]
 8000cea:	767b      	strb	r3, [r7, #25]

	/* Create a new connection identifier. */
	if (target_ECU == PS_TARGET) {
 8000cec:	7e7b      	ldrb	r3, [r7, #25]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10b      	bne.n	8000d0a <tcpinit_thread+0x76>
		conn1 = netconn_new(NETCONN_TCP); // conn
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2010      	movs	r0, #16
 8000cf8:	f007 fb8e 	bl	8008418 <netconn_new_with_proto_and_callback>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <tcpinit_thread+0x120>)
 8000d00:	6013      	str	r3, [r2, #0]
		conn = conn1;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <tcpinit_thread+0x120>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
 8000d08:	e00a      	b.n	8000d20 <tcpinit_thread+0x8c>
	} else {
		conn2 = netconn_new(NETCONN_TCP);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f007 fb82 	bl	8008418 <netconn_new_with_proto_and_callback>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <tcpinit_thread+0x124>)
 8000d18:	6013      	str	r3, [r2, #0]
		conn = conn2;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <tcpinit_thread+0x124>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (conn!=NULL) // conn
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d043      	beq.n	8000dae <tcpinit_thread+0x11a>
	{
		/* Bind connection to the port number 10 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, dest_port); // conn
 8000d26:	8b7b      	ldrh	r3, [r7, #26]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4924      	ldr	r1, [pc, #144]	; (8000dbc <tcpinit_thread+0x128>)
 8000d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d2e:	f007 fc2d 	bl	800858c <netconn_bind>
 8000d32:	4603      	mov	r3, r0
 8000d34:	763b      	strb	r3, [r7, #24]

		if (err == ERR_OK)
 8000d36:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d132      	bne.n	8000da4 <tcpinit_thread+0x110>
		{
			/* The designation IP address of the computer */
			err = ipaddr_aton(ip_address, &dest_addr);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	69f8      	ldr	r0, [r7, #28]
 8000d46:	f013 fd35 	bl	80147b4 <ip4addr_aton>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	763b      	strb	r3, [r7, #24]
			//dest_port = 10;  // server port

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port); // conn
 8000d4e:	8b7a      	ldrh	r2, [r7, #26]
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	4619      	mov	r1, r3
 8000d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d58:	f007 fc50 	bl	80085fc <netconn_connect>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	75fb      	strb	r3, [r7, #23]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8000d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d116      	bne.n	8000d96 <tcpinit_thread+0x102>
			{
				//send a "hi" message at first
				int messageLength = sprintf(ToSendMessage , "hi");
 8000d68:	4915      	ldr	r1, [pc, #84]	; (8000dc0 <tcpinit_thread+0x12c>)
 8000d6a:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <tcpinit_thread+0x130>)
 8000d6c:	f015 f9f0 	bl	8016150 <siprintf>
 8000d70:	6138      	str	r0, [r7, #16]
				tcp_SendMessage(target_ECU,(uint8_t *)ToSendMessage, messageLength);
 8000d72:	7e7b      	ldrb	r3, [r7, #25]
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4913      	ldr	r1, [pc, #76]	; (8000dc4 <tcpinit_thread+0x130>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f827 	bl	8000dcc <tcp_SendMessage>

				// UDS_req callback
				uds_req_clbk(target_ECU);
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <tcpinit_thread+0x134>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	7e7a      	ldrb	r2, [r7, #25]
 8000d84:	4610      	mov	r0, r2
 8000d86:	4798      	blx	r3

				//start receiving
				tcp_ReceiveMessage(target_ECU, conn, buf); // conn
 8000d88:	7e7b      	ldrb	r3, [r7, #25]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f846 	bl	8000e20 <tcp_ReceiveMessage>
 8000d94:	e00b      	b.n	8000dae <tcpinit_thread+0x11a>
			}
			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn); // conn
 8000d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d98:	f007 ff60 	bl	8008c5c <netconn_close>
				netconn_delete(conn); // conn
 8000d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d9e:	f007 fbd9 	bl	8008554 <netconn_delete>
 8000da2:	e004      	b.n	8000dae <tcpinit_thread+0x11a>
			}
		}
		else
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn); // conn
 8000da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000da6:	f007 fbd5 	bl	8008554 <netconn_delete>
 8000daa:	e000      	b.n	8000dae <tcpinit_thread+0x11a>
		return;
 8000dac:	bf00      	nop
		}
	}
}
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000a4 	.word	0x200000a4
 8000db8:	200000a8 	.word	0x200000a8
 8000dbc:	0801a864 	.word	0x0801a864
 8000dc0:	0801710c 	.word	0x0801710c
 8000dc4:	20004cb0 	.word	0x20004cb0
 8000dc8:	20004cac 	.word	0x20004cac

08000dcc <tcp_SendMessage>:

void tcp_SendMessage (TargetECU targetECU, uint8_t *Message , int messageLength)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
	switch (targetECU) {
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d002      	beq.n	8000de6 <tcp_SendMessage+0x1a>
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d00a      	beq.n	8000dfa <tcp_SendMessage+0x2e>
		netconn_write(conn1, Message, messageLength, NETCONN_COPY);
		break;
	case WIPERS_TARGET:
		netconn_write(conn2, Message, messageLength, NETCONN_COPY);
		break;
	default: break;
 8000de4:	e013      	b.n	8000e0e <tcp_SendMessage+0x42>
		netconn_write(conn1, Message, messageLength, NETCONN_COPY);
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <tcp_SendMessage+0x4c>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	2300      	movs	r3, #0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	f007 fe30 	bl	8008a58 <netconn_write_partly>
		break;
 8000df8:	e009      	b.n	8000e0e <tcp_SendMessage+0x42>
		netconn_write(conn2, Message, messageLength, NETCONN_COPY);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <tcp_SendMessage+0x50>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	f007 fe26 	bl	8008a58 <netconn_write_partly>
		break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000a4 	.word	0x200000a4
 8000e1c:	200000a8 	.word	0x200000a8

08000e20 <tcp_ReceiveMessage>:


static void tcp_ReceiveMessage (TargetECU targetECU, struct netconn *conn ,struct netbuf *buf )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b09e      	sub	sp, #120	; 0x78
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
		/* wait until the data is sent by the server */
		if (netconn_recv(conn, &buf) == ERR_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	68b8      	ldr	r0, [r7, #8]
 8000e34:	f007 fd96 	bl	8008964 <netconn_recv>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f7      	bne.n	8000e2e <tcp_ReceiveMessage+0xe>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				uint8_t ReceivedMessage[100];
				memset ((char *)ReceivedMessage, '\0', 100);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2264      	movs	r2, #100	; 0x64
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f014 fffe 	bl	8015e48 <memset>
				strncpy((char *)ReceivedMessage,buf->p->payload, buf->p->len);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6859      	ldr	r1, [r3, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	895b      	ldrh	r3, [r3, #10]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f015 f9e1 	bl	8016226 <strncpy>
				//UDS_receive_response(conn,ReceivedMessage);

				// uds receive response callback
				uds_recv_resp_clbk(targetECU, ReceivedMessage);
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <tcp_ReceiveMessage+0x6c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f107 0114 	add.w	r1, r7, #20
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4798      	blx	r3
			}
			while (netbuf_next(buf) >0);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fb05 	bl	800a484 <netbuf_next>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dcde      	bgt.n	8000e3e <tcp_ReceiveMessage+0x1e>

			netbuf_delete(buf);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f009 fade 	bl	800a444 <netbuf_delete>
		if (netconn_recv(conn, &buf) == ERR_OK)
 8000e88:	e7d1      	b.n	8000e2e <tcp_ReceiveMessage+0xe>
 8000e8a:	bf00      	nop
 8000e8c:	20004d14 	.word	0x20004d14

08000e90 <tcpclient_init>:
	}
}


void tcpclient_init (void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af02      	add	r7, sp, #8
	for(int i=0;i<3000;i++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	e008      	b.n	8000eae <tcpclient_init+0x1e>
	{
		ProgramToSend[i] = 'a';
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <tcpclient_init+0x78>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2261      	movs	r2, #97	; 0x61
 8000ea6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<3000;i++)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	ddf1      	ble.n	8000e9c <tcpclient_init+0xc>
	}

	target_1.ip_add = "169.254.84.57";
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <tcpclient_init+0x7c>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <tcpclient_init+0x80>)
 8000ebc:	601a      	str	r2, [r3, #0]
	target_1.portNum = 10;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <tcpclient_init+0x7c>)
 8000ec0:	220a      	movs	r2, #10
 8000ec2:	809a      	strh	r2, [r3, #4]
	target_1.targetECU = PS_TARGET;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <tcpclient_init+0x7c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	719a      	strb	r2, [r3, #6]

	target_2.ip_add = "169.254.84.57";
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <tcpclient_init+0x84>)
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <tcpclient_init+0x80>)
 8000ece:	601a      	str	r2, [r3, #0]
	target_2.portNum = 7;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <tcpclient_init+0x84>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	809a      	strh	r2, [r3, #4]
	target_2.targetECU = WIPERS_TARGET;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <tcpclient_init+0x84>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	719a      	strb	r2, [r3, #6]

	sys_thread_new("tcpinit_thread", tcpinit_thread, (void*)&target_1, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000edc:	2318      	movs	r3, #24
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <tcpclient_init+0x7c>)
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <tcpclient_init+0x88>)
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <tcpclient_init+0x8c>)
 8000eea:	f014 fe13 	bl	8015b14 <sys_thread_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, (void*)&target_2, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000eee:	2318      	movs	r3, #24
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <tcpclient_init+0x84>)
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <tcpclient_init+0x88>)
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <tcpclient_init+0x8c>)
 8000efc:	f014 fe0a 	bl	8015b14 <sys_thread_new>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	20004d18 	.word	0x20004d18
 8000f10:	08017110 	.word	0x08017110
 8000f14:	20004d20 	.word	0x20004d20
 8000f18:	08000c95 	.word	0x08000c95
 8000f1c:	08017120 	.word	0x08017120

08000f20 <UDS_diagnostics_session_control>:

/*******************************************************************************
 *                      Functions Implementations		* 
 *******************************************************************************/ 
void UDS_diagnostics_session_control(TargetECU targetECU, void *arg)
{ 
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t session = *(uint8_t *)arg;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	73fb      	strb	r3, [r7, #15]
	uint8_t requestFrame[] = {DIAGNOSTICS_SESSION_CONTROL, session};
 8000f32:	2310      	movs	r3, #16
 8000f34:	733b      	strb	r3, [r7, #12]
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	737b      	strb	r3, [r7, #13]
	tcp_SendMessage(targetECU, requestFrame, 2);
 8000f3a:	f107 010c 	add.w	r1, r7, #12
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2202      	movs	r2, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff42 	bl	8000dcc <tcp_SendMessage>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <UDS_receive_response>:
	uint8_t requestFrame[] = {ECU_RESET, ER_SOFT_RESET};
	tcp_SendMessage(targetECU, requestFrame, 2);
}

void UDS_receive_response(TargetECU targetECU, void *arg)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
	if(arg == NULL)
	{
		//delete task!
	}
	uint8_t *responseFrame = (uint8_t *)arg;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
	switch(responseFrame[0]){
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3b50      	subs	r3, #80	; 0x50
 8000f66:	2b2f      	cmp	r3, #47	; 0x2f
 8000f68:	f200 8094 	bhi.w	8001094 <UDS_receive_response+0x144>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <UDS_receive_response+0x24>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08001035 	.word	0x08001035
 8000f78:	0800107d 	.word	0x0800107d
 8000f7c:	08001095 	.word	0x08001095
 8000f80:	08001095 	.word	0x08001095
 8000f84:	08001095 	.word	0x08001095
 8000f88:	08001095 	.word	0x08001095
 8000f8c:	08001095 	.word	0x08001095
 8000f90:	08001095 	.word	0x08001095
 8000f94:	08001095 	.word	0x08001095
 8000f98:	08001095 	.word	0x08001095
 8000f9c:	08001095 	.word	0x08001095
 8000fa0:	08001095 	.word	0x08001095
 8000fa4:	08001095 	.word	0x08001095
 8000fa8:	08001095 	.word	0x08001095
 8000fac:	08001095 	.word	0x08001095
 8000fb0:	08001095 	.word	0x08001095
 8000fb4:	08001095 	.word	0x08001095
 8000fb8:	08001095 	.word	0x08001095
 8000fbc:	08001095 	.word	0x08001095
 8000fc0:	08001095 	.word	0x08001095
 8000fc4:	08001095 	.word	0x08001095
 8000fc8:	08001095 	.word	0x08001095
 8000fcc:	08001095 	.word	0x08001095
 8000fd0:	08001041 	.word	0x08001041
 8000fd4:	08001095 	.word	0x08001095
 8000fd8:	08001095 	.word	0x08001095
 8000fdc:	08001095 	.word	0x08001095
 8000fe0:	08001095 	.word	0x08001095
 8000fe4:	08001095 	.word	0x08001095
 8000fe8:	08001095 	.word	0x08001095
 8000fec:	08001095 	.word	0x08001095
 8000ff0:	08001095 	.word	0x08001095
 8000ff4:	08001095 	.word	0x08001095
 8000ff8:	0800104d 	.word	0x0800104d
 8000ffc:	08001095 	.word	0x08001095
 8001000:	08001095 	.word	0x08001095
 8001004:	08001059 	.word	0x08001059
 8001008:	08001095 	.word	0x08001095
 800100c:	08001065 	.word	0x08001065
 8001010:	08001071 	.word	0x08001071
 8001014:	08001095 	.word	0x08001095
 8001018:	08001095 	.word	0x08001095
 800101c:	08001095 	.word	0x08001095
 8001020:	08001095 	.word	0x08001095
 8001024:	08001095 	.word	0x08001095
 8001028:	08001095 	.word	0x08001095
 800102c:	08001095 	.word	0x08001095
 8001030:	08001089 	.word	0x08001089
	case DIAGNOSTICS_SESSION_CONTROL + POSITIVE_RESPONSE_OFFSET:
		UDS_DSC_handle(targetECU, responseFrame);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f831 	bl	80010a0 <UDS_DSC_handle>
		break;
 800103e:	e02a      	b.n	8001096 <UDS_receive_response+0x146>
	case SECURITY_ACCESS + POSITIVE_RESPONSE_OFFSET:
		UDS_SA_handle(targetECU, responseFrame);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	68f9      	ldr	r1, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f845 	bl	80010d4 <UDS_SA_handle>
		break;
 800104a:	e024      	b.n	8001096 <UDS_receive_response+0x146>
	case ROUTINE_CONTROL + POSITIVE_RESPONSE_OFFSET:
		UDS_RC_handle(targetECU, responseFrame);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	68f9      	ldr	r1, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f84b 	bl	80010ec <UDS_RC_handle>
		break;
 8001056:	e01e      	b.n	8001096 <UDS_receive_response+0x146>
	case REQUEST_DOWNLOAD + POSITIVE_RESPONSE_OFFSET:
		UDS_RD_handle(targetECU, responseFrame);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f851 	bl	8001104 <UDS_RD_handle>
		break;
 8001062:	e018      	b.n	8001096 <UDS_receive_response+0x146>
	case TRANSFER_DATA + POSITIVE_RESPONSE_OFFSET:
		UDS_TD_handle(targetECU, responseFrame);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f857 	bl	800111c <UDS_TD_handle>
		break;
 800106e:	e012      	b.n	8001096 <UDS_receive_response+0x146>
	case REQUEST_TRANSFER_EXIT + POSITIVE_RESPONSE_OFFSET:
		UDS_RTE_handle(targetECU, responseFrame);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	68f9      	ldr	r1, [r7, #12]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f85d 	bl	8001134 <UDS_RTE_handle>
		break;
 800107a:	e00c      	b.n	8001096 <UDS_receive_response+0x146>
	case ECU_RESET + POSITIVE_RESPONSE_OFFSET:
		UDS_ER_handle(targetECU, responseFrame);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f863 	bl	800114c <UDS_ER_handle>
		break;
 8001086:	e006      	b.n	8001096 <UDS_receive_response+0x146>
	case NEGATIVE_RESPONSE:
		UDS_negative_response_handle(targetECU, responseFrame);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f869 	bl	8001164 <UDS_negative_response_handle>
		break;
 8001092:	e000      	b.n	8001096 <UDS_receive_response+0x146>
	default:		break;
 8001094:	bf00      	nop
	}
	//delete task!
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop

080010a0 <UDS_DSC_handle>:

void UDS_DSC_handle(TargetECU targetECU, uint8_t *responseFrame)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	int messageLength = sprintf(msg , "session success\n");
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <UDS_DSC_handle+0x30>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f015 f84c 	bl	8016150 <siprintf>
 80010b8:	61f8      	str	r0, [r7, #28]
	tcp_SendMessage(targetECU, msg, messageLength);
 80010ba:	f107 0108 	add.w	r1, r7, #8
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe82 	bl	8000dcc <tcp_SendMessage>
} 
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08017130 	.word	0x08017130

080010d4 <UDS_SA_handle>:


void UDS_SA_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]

}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <UDS_RC_handle>:

void UDS_RC_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]

}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <UDS_RD_handle>:

void UDS_RD_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]

}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <UDS_TD_handle>:

void UDS_TD_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]

}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <UDS_RTE_handle>:

void UDS_RTE_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]

}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <UDS_ER_handle>:

void UDS_ER_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]

}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <UDS_negative_response_handle>:

void UDS_negative_response_handle(TargetECU targetECU, uint8_t *responseFrame)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]

}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <UDS_start_request>:

void UDS_start_request(TargetECU targetECU) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t sessionType = (uint8_t)EXTENDED;
 8001186:	2303      	movs	r3, #3
 8001188:	73fb      	strb	r3, [r7, #15]
	UDS_diagnostics_session_control(targetECU, (void*)&sessionType);
 800118a:	f107 020f 	add.w	r2, r7, #15
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fec4 	bl	8000f20 <UDS_diagnostics_session_control>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ca:	f7ff fd31 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f014 fdd5 	bl	8015d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff f9e1 	bl	8000598 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011e4:	0801aad4 	.word	0x0801aad4
  ldr r2, =_sbss
 80011e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011ec:	2000b614 	.word	0x2000b614

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f8fc 	bl	800141a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f7ff fbb6 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fb6e 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20004d28 	.word	0x20004d28

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20004d28 	.word	0x20004d28

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff4c 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001442:	f7ff ff61 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001446:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	6978      	ldr	r0, [r7, #20]
 800144e:	f7ff ffb1 	bl	80013b4 <NVIC_EncodePriority>
 8001452:	4602      	mov	r2, r0
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff80 	bl	8001360 <__NVIC_SetPriority>
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff54 	bl	8001324 <__NVIC_EnableIRQ>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001494:	4baa      	ldr	r3, [pc, #680]	; (8001740 <HAL_ETH_Init+0x2bc>)
 8001496:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e183      	b.n	80017b2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f002 fc92 	bl	8003de8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <HAL_ETH_Init+0x2c0>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	4a9d      	ldr	r2, [pc, #628]	; (8001744 <HAL_ETH_Init+0x2c0>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d2:	6453      	str	r3, [r2, #68]	; 0x44
 80014d4:	4b9b      	ldr	r3, [pc, #620]	; (8001744 <HAL_ETH_Init+0x2c0>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014e0:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_ETH_Init+0x2c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_ETH_Init+0x2c4>)
 80014e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014ec:	4b96      	ldr	r3, [pc, #600]	; (8001748 <HAL_ETH_Init+0x2c4>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4994      	ldr	r1, [pc, #592]	; (8001748 <HAL_ETH_Init+0x2c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0201 	orr.w	r2, r2, #1
 800150c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001510:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001512:	f7ff fea5 	bl	8001260 <HAL_GetTick>
 8001516:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001518:	e011      	b.n	800153e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800151a:	f7ff fea1 	bl	8001260 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001528:	d909      	bls.n	800153e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e139      	b.n	80017b2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e4      	bne.n	800151a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f023 031c 	bic.w	r3, r3, #28
 800155e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001560:	f001 ffe0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8001564:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4a78      	ldr	r2, [pc, #480]	; (800174c <HAL_ETH_Init+0x2c8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d908      	bls.n	8001580 <HAL_ETH_Init+0xfc>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4a77      	ldr	r2, [pc, #476]	; (8001750 <HAL_ETH_Init+0x2cc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d804      	bhi.n	8001580 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e027      	b.n	80015d0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	4a73      	ldr	r2, [pc, #460]	; (8001750 <HAL_ETH_Init+0x2cc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d908      	bls.n	800159a <HAL_ETH_Init+0x116>
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	4a6d      	ldr	r2, [pc, #436]	; (8001740 <HAL_ETH_Init+0x2bc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d204      	bcs.n	800159a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f043 030c 	orr.w	r3, r3, #12
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e01a      	b.n	80015d0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4a68      	ldr	r2, [pc, #416]	; (8001740 <HAL_ETH_Init+0x2bc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d303      	bcc.n	80015aa <HAL_ETH_Init+0x126>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4a6b      	ldr	r2, [pc, #428]	; (8001754 <HAL_ETH_Init+0x2d0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d911      	bls.n	80015ce <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_ETH_Init+0x2d0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d908      	bls.n	80015c4 <HAL_ETH_Init+0x140>
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_ETH_Init+0x2d4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d804      	bhi.n	80015c4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e005      	b.n	80015d0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e000      	b.n	80015d0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fc17 	bl	8001e12 <HAL_ETH_WritePHYRegister>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015ee:	6939      	ldr	r1, [r7, #16]
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fdcd 	bl	8002190 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0d7      	b.n	80017b2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001602:	20ff      	movs	r0, #255	; 0xff
 8001604:	f7ff fe38 	bl	8001278 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a5 	beq.w	800175c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001612:	f7ff fe25 	bl	8001260 <HAL_GetTick>
 8001616:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	461a      	mov	r2, r3
 800161e:	2101      	movs	r1, #1
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fb8e 	bl	8001d42 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001626:	f7ff fe1b 	bl	8001260 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d90f      	bls.n	8001658 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fda6 	bl	8002190 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0ac      	b.n	80017b2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0da      	beq.n	8001618 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fbd2 	bl	8001e12 <HAL_ETH_WritePHYRegister>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fd88 	bl	8002190 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001688:	2301      	movs	r3, #1
 800168a:	e092      	b.n	80017b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fde8 	bl	8001260 <HAL_GetTick>
 8001690:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	461a      	mov	r2, r3
 8001698:	2101      	movs	r1, #1
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fb51 	bl	8001d42 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016a0:	f7ff fdde 	bl	8001260 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d90f      	bls.n	80016d2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016b6:	6939      	ldr	r1, [r7, #16]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fd69 	bl	8002190 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e06f      	b.n	80017b2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0da      	beq.n	8001692 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	461a      	mov	r2, r3
 80016e2:	2110      	movs	r1, #16
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fb2c 	bl	8001d42 <HAL_ETH_ReadPHYRegister>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fd4a 	bl	8002190 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001704:	2301      	movs	r3, #1
 8001706:	e054      	b.n	80017b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	e002      	b.n	8001722 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	e035      	b.n	80017a0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e030      	b.n	80017a0 <HAL_ETH_Init+0x31c>
 800173e:	bf00      	nop
 8001740:	03938700 	.word	0x03938700
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	01312cff 	.word	0x01312cff
 8001750:	02160ebf 	.word	0x02160ebf
 8001754:	05f5e0ff 	.word	0x05f5e0ff
 8001758:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800176c:	4313      	orrs	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fb4c 	bl	8001e12 <HAL_ETH_WritePHYRegister>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fd02 	bl	8002190 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e00c      	b.n	80017b2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001798:	f640 70ff 	movw	r0, #4095	; 0xfff
 800179c:	f7ff fd6c 	bl	8001278 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fcf4 	bl	8002190 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop

080017bc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ETH_DMATxDescListInit+0x20>
 80017d8:	2302      	movs	r3, #2
 80017da:	e052      	b.n	8001882 <HAL_ETH_DMATxDescListInit+0xc6>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e030      	b.n	800185a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001808:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	461a      	mov	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3b01      	subs	r3, #1
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d208      	bcs.n	800184e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	e002      	b.n	8001854 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3ca      	bcc.n	80017f8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	3310      	adds	r3, #16
 800186e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800188e:	b480      	push	{r7}
 8001890:	b087      	sub	sp, #28
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ETH_DMARxDescListInit+0x20>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e056      	b.n	800195c <HAL_ETH_DMARxDescListInit+0xce>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2202      	movs	r2, #2
 80018ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e034      	b.n	8001934 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	015b      	lsls	r3, r3, #5
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018da:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018e2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	d208      	bcs.n	8001928 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	e002      	b.n	800192e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3c6      	bcc.n	80018ca <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001946:	330c      	adds	r3, #12
 8001948:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ETH_TransmitFrame+0x24>
 8001988:	2302      	movs	r3, #2
 800198a:	e0cd      	b.n	8001b28 <HAL_ETH_TransmitFrame+0x1c0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0b8      	b.n	8001b28 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da09      	bge.n	80019d4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2212      	movs	r2, #18
 80019c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0a9      	b.n	8001b28 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019da:	4293      	cmp	r3, r2
 80019dc:	d915      	bls.n	8001a0a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_ETH_TransmitFrame+0x1cc>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <HAL_ETH_TransmitFrame+0x1cc>)
 80019ee:	fba3 1302 	umull	r1, r3, r3, r2
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e001      	b.n	8001a0e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11c      	bne.n	8001a4e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a22:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a2e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a3e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a4c:	e04b      	b.n	8001ae6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e044      	b.n	8001ade <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a62:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a78:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a82:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d116      	bne.n	8001abc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a9c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_ETH_TransmitFrame+0x1d0>)
 8001aa2:	fb02 f203 	mul.w	r2, r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001aae:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aba:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aca:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	3301      	adds	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3b6      	bcc.n	8001a54 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	3314      	adds	r3, #20
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b02:	3314      	adds	r3, #20
 8001b04:	2204      	movs	r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b10:	3304      	adds	r3, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	ac02b00b 	.word	0xac02b00b
 8001b38:	fffffa0c 	.word	0xfffffa0c

08001b3c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e074      	b.n	8001c40 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b66:	e05a      	b.n	8001c1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7c:	d10d      	bne.n	8001b9a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
 8001b98:	e041      	b.n	8001c1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8001bbe:	e02e      	b.n	8001c1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d103      	bne.n	8001be2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bee:	1f1a      	subs	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e010      	b.n	8001c40 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db02      	blt.n	8001c2e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d99c      	bls.n	8001b68 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5c:	3314      	adds	r3, #20
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d112      	bne.n	8001c8e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f002 f98b 	bl	8003f84 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	3314      	adds	r3, #20
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c8c:	e01b      	b.n	8001cc6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c96:	3314      	adds	r3, #20
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d111      	bne.n	8001cc6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f839 	bl	8001d1a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	3314      	adds	r3, #20
 8001cd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	3314      	adds	r3, #20
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cea:	d112      	bne.n	8001d12 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f81e 	bl	8001d2e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	3314      	adds	r3, #20
 8001cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d00:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b82      	cmp	r3, #130	; 0x82
 8001d62:	d101      	bne.n	8001d68 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
 8001d66:	e050      	b.n	8001e0a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2282      	movs	r2, #130	; 0x82
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 031c 	and.w	r3, r3, #28
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8a1b      	ldrh	r3, [r3, #16]
 8001d84:	02db      	lsls	r3, r3, #11
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0302 	bic.w	r3, r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff fa54 	bl	8001260 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dba:	e015      	b.n	8001de8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dbc:	f7ff fa50 	bl	8001260 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d309      	bcc.n	8001de0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e014      	b.n	8001e0a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e4      	bne.n	8001dbc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b42      	cmp	r3, #66	; 0x42
 8001e32:	d101      	bne.n	8001e38 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e04e      	b.n	8001ed6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2242      	movs	r2, #66	; 0x42
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 031c 	and.w	r3, r3, #28
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8a1b      	ldrh	r3, [r3, #16]
 8001e54:	02db      	lsls	r3, r3, #11
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8e:	f7ff f9e7 	bl	8001260 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e94:	e015      	b.n	8001ec2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e96:	f7ff f9e3 	bl	8001260 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d309      	bcc.n	8001eba <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e00d      	b.n	8001ed6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e4      	bne.n	8001e96 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ETH_Start+0x16>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e01f      	b.n	8001f34 <HAL_ETH_Start+0x56>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb45 	bl	8002594 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fb7c 	bl	8002608 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fc13 	bl	800273c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fbb0 	bl	800267c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fbdd 	bl	80026dc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ETH_Stop+0x16>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e01f      	b.n	8001f92 <HAL_ETH_Stop+0x56>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fba2 	bl	80026ac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fbcf 	bl	800270c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fb67 	bl	8002642 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fbe1 	bl	800273c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fb27 	bl	80025ce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ETH_ConfigMAC+0x1c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0e4      	b.n	8002182 <HAL_ETH_ConfigMAC+0x1e6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80b1 	beq.w	8002132 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_ETH_ConfigMAC+0x1f0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fe8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001fee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ff4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ffa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002000:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002006:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800200c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002012:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002018:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800201e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002024:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800202a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff f918 	bl	8001278 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002058:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800205e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002064:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800206a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002070:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002076:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002082:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002084:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff f8f2 	bl	8001278 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020a4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020cc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80020d2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80020d8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80020de:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020e4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff f8bb 	bl	8001278 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff f8a8 	bl	8001278 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	61da      	str	r2, [r3, #28]
 8002130:	e01e      	b.n	8002170 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002140:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff f888 	bl	8001278 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	ff20810f 	.word	0xff20810f

08002190 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b0      	sub	sp, #192	; 0xc0
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021be:	2300      	movs	r3, #0
 80021c0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
 80021dc:	e001      	b.n	80021e2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021ec:	2300      	movs	r3, #0
 80021ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002264:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002268:	4bac      	ldr	r3, [pc, #688]	; (800251c <ETH_MACDMAConfig+0x38c>)
 800226a:	4013      	ands	r3, r2
 800226c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002270:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002274:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002278:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800227c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002282:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002286:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800228a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002290:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002294:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002298:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800229a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800229c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800229e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022a0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022a4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe ffd7 	bl	8001278 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80022d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022d8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80022da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022dc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022e2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022e8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022ee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002300:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002302:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe ffb2 	bl	8001278 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002326:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002330:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800233c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002340:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002344:	4013      	ands	r3, r2
 8002346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800234a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800234e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002354:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800235a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800235c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002360:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002366:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002368:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800236c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800236e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800238c:	2001      	movs	r0, #1
 800238e:	f7fe ff73 	bl	8001278 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800239a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800239c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe ff5e 	bl	8001278 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023ea:	2304      	movs	r3, #4
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800240a:	2300      	movs	r3, #0
 800240c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800240e:	2300      	movs	r3, #0
 8002410:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	3318      	adds	r3, #24
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <ETH_MACDMAConfig+0x390>)
 8002428:	4013      	ands	r3, r2
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800242e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002430:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002432:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002434:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002436:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002438:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800243a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800243c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800243e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002440:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002442:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002444:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002446:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800244a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800244e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002450:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	3318      	adds	r3, #24
 8002464:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002468:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002472:	3318      	adds	r3, #24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe fefc 	bl	8001278 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	3318      	adds	r3, #24
 800248a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002494:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002498:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800249c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024a0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024a6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024aa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7fe fed5 	bl	8001278 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024da:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10f      	bne.n	8002504 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	331c      	adds	r3, #28
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002500:	331c      	adds	r3, #28
 8002502:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	461a      	mov	r2, r3
 800250a:	2100      	movs	r1, #0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f809 	bl	8002524 <ETH_MACAddressConfig>
}
 8002512:	bf00      	nop
 8002514:	37c0      	adds	r7, #192	; 0xc0
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	ff20810f 	.word	0xff20810f
 8002520:	f8de3f23 	.word	0xf8de3f23

08002524 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3305      	adds	r3, #5
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	3204      	adds	r2, #4
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <ETH_MACAddressConfig+0x68>)
 8002546:	4413      	add	r3, r2
 8002548:	461a      	mov	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3303      	adds	r3, #3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	061a      	lsls	r2, r3, #24
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3302      	adds	r3, #2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3301      	adds	r3, #1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4313      	orrs	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <ETH_MACAddressConfig+0x6c>)
 8002576:	4413      	add	r3, r2
 8002578:	461a      	mov	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6013      	str	r3, [r2, #0]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40028040 	.word	0x40028040
 8002590:	40028044 	.word	0x40028044

08002594 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0208 	orr.w	r2, r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f000 f8e9 	bl	8002790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 f8cc 	bl	8002790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0204 	orr.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800262c:	2001      	movs	r0, #1
 800262e:	f000 f8af 	bl	8002790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0204 	bic.w	r2, r2, #4
 800265c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002666:	2001      	movs	r0, #1
 8002668:	f000 f892 	bl	8002790 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3318      	adds	r3, #24
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269c:	3318      	adds	r3, #24
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	3318      	adds	r3, #24
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026cc:	3318      	adds	r3, #24
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ec:	3318      	adds	r3, #24
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0202 	orr.w	r2, r2, #2
 80026f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fc:	3318      	adds	r3, #24
 80026fe:	601a      	str	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	3318      	adds	r3, #24
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0202 	bic.w	r2, r2, #2
 8002728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272c:	3318      	adds	r3, #24
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	3318      	adds	r3, #24
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800275c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002760:	3318      	adds	r3, #24
 8002762:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276c:	3318      	adds	r3, #24
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002772:	2001      	movs	r0, #1
 8002774:	f000 f80c 	bl	8002790 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	3318      	adds	r3, #24
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <ETH_Delay+0x38>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <ETH_Delay+0x3c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a5b      	lsrs	r3, r3, #9
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80027ac:	bf00      	nop
  } 
  while (Delay --);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <ETH_Delay+0x1c>
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e177      	b.n	8002adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8166 	bne.w	8002ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281e:	2b02      	cmp	r3, #2
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b03      	cmp	r3, #3
 800288e:	d017      	beq.n	80028c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d123      	bne.n	8002914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80c0 	beq.w	8002ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002972:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_GPIO_Init+0x32c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d037      	beq.n	8002a0e <HAL_GPIO_Init+0x23e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_GPIO_Init+0x330>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_GPIO_Init+0x23a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x334>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02b      	beq.n	8002a06 <HAL_GPIO_Init+0x236>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_GPIO_Init+0x338>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x232>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x33c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x22e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a53      	ldr	r2, [pc, #332]	; (8002b10 <HAL_GPIO_Init+0x340>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x22a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x344>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_GPIO_Init+0x348>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_GPIO_Init+0x34c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x350>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x21a>
 80029e6:	2309      	movs	r3, #9
 80029e8:	e012      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ea:	230a      	movs	r3, #10
 80029ec:	e010      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ee:	2308      	movs	r3, #8
 80029f0:	e00e      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a52:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7c:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae84 	bls.w	80027ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022400 	.word	0x40022400
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e043      	b.n	8002bf6 <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd feec 	bl	8000960 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_HASH_Init+0xa4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	490c      	ldr	r1, [pc, #48]	; (8002c00 <HAL_HASH_Init+0xa4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
#if defined(HASH_CR_MDMAT)
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_HASH_Init+0xa4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_HASH_Init+0xa4>)
 8002bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bdc:	6013      	str	r3, [r2, #0]
#endif /* HASH_CR_MDMAT */
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	50060400 	.word	0x50060400

08002c04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c30:	f7fe fb16 	bl	8001260 <HAL_GetTick>
 8002c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c36:	e009      	b.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c38:	f7fe fb12 	bl	8001260 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c46:	d901      	bls.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e01f      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d1ee      	bne.n	8002c38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fafe 	bl	8001260 <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fe fafa 	bl	8001260 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e007      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	420e0040 	.word	0x420e0040
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	420e0044 	.word	0x420e0044

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e264      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4ba3      	ldr	r3, [pc, #652]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4ba0      	ldr	r3, [pc, #640]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e23f      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a90      	ldr	r2, [pc, #576]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a8a      	ldr	r2, [pc, #552]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a87      	ldr	r2, [pc, #540]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a83      	ldr	r2, [pc, #524]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fa80 	bl	8001260 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fa7c 	bl	8001260 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e204      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fa6c 	bl	8001260 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fa68 	bl	8001260 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f0      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c4      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4952      	ldr	r1, [pc, #328]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fa21 	bl	8001260 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fa1d 	bl	8001260 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a5      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4940      	ldr	r1, [pc, #256]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0x2b0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fa00 	bl	8001260 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe f9fc 	bl	8001260 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e184      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d030      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f9e0 	bl	8001260 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe f9dc 	bl	8001260 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e164      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x2b4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe f9c9 	bl	8001260 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f9c5 	bl	8001260 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e14d      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a0 	beq.w	800303e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_RCC_OscConfig+0x2b8>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe f98b 	bl	8001260 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e011      	b.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
 8002f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe f97e 	bl	8001260 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e106      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_RCC_OscConfig+0x4e4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e01c      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x312>
 8002f9c:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a7a      	ldr	r2, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	4b78      	ldr	r3, [pc, #480]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a77      	ldr	r2, [pc, #476]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0x32a>
 8002fb6:	4b75      	ldr	r3, [pc, #468]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a74      	ldr	r2, [pc, #464]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a71      	ldr	r2, [pc, #452]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d015      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fe f943 	bl	8001260 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe f93f 	bl	8001260 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0c5      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ee      	beq.n	8002fde <HAL_RCC_OscConfig+0x33a>
 8003000:	e014      	b.n	800302c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fe f92d 	bl	8001260 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe f929 	bl	8001260 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0af      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ee      	bne.n	800300a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 809b 	beq.w	800317e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d05c      	beq.n	800310e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d141      	bne.n	80030e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fe f8fd 	bl	8001260 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe f8f9 	bl	8001260 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e081      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	019b      	lsls	r3, r3, #6
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe f8d2 	bl	8001260 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe f8ce 	bl	8001260 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e056      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x41c>
 80030de:	e04e      	b.n	800317e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe f8bb 	bl	8001260 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe f8b7 	bl	8001260 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e03f      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x44a>
 800310c:	e037      	b.n	800317e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e032      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <HAL_RCC_OscConfig+0x4e8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d028      	beq.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d121      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d11a      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314a:	4013      	ands	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003150:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d107      	bne.n	800317a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40007000 	.word	0x40007000
 800318c:	40023800 	.word	0x40023800
 8003190:	42470060 	.word	0x42470060

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fd ffec 	bl	8001260 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd ffe8 	bl	8001260 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fb2a 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	0801a738 	.word	0x0801a738
 8003358:	20000000 	.word	0x20000000
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80bd 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0b7      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003396:	60bb      	str	r3, [r7, #8]
       break;
 8003398:	e0b7      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800339c:	60bb      	str	r3, [r7, #8]
      break;
 800339e:	e0b4      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04d      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	ea02 0800 	and.w	r8, r2, r0
 80033ce:	ea03 0901 	and.w	r9, r3, r1
 80033d2:	4640      	mov	r0, r8
 80033d4:	4649      	mov	r1, r9
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	014b      	lsls	r3, r1, #5
 80033e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e4:	0142      	lsls	r2, r0, #5
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	ebb0 0008 	subs.w	r0, r0, r8
 80033ee:	eb61 0109 	sbc.w	r1, r1, r9
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003400:	0182      	lsls	r2, r0, #6
 8003402:	1a12      	subs	r2, r2, r0
 8003404:	eb63 0301 	sbc.w	r3, r3, r1
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	00d9      	lsls	r1, r3, #3
 8003412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003416:	00d0      	lsls	r0, r2, #3
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	eb12 0208 	adds.w	r2, r2, r8
 8003420:	eb43 0309 	adc.w	r3, r3, r9
 8003424:	f04f 0000 	mov.w	r0, #0
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	0259      	lsls	r1, r3, #9
 800342e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003432:	0250      	lsls	r0, r2, #9
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	461a      	mov	r2, r3
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	f7fc ff2c 	bl	80002a0 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e04a      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	461a      	mov	r2, r3
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	ea02 0400 	and.w	r4, r2, r0
 800346a:	ea03 0501 	and.w	r5, r3, r1
 800346e:	4620      	mov	r0, r4
 8003470:	4629      	mov	r1, r5
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	014b      	lsls	r3, r1, #5
 800347c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003480:	0142      	lsls	r2, r0, #5
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	1b00      	subs	r0, r0, r4
 8003488:	eb61 0105 	sbc.w	r1, r1, r5
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	018b      	lsls	r3, r1, #6
 8003496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800349a:	0182      	lsls	r2, r0, #6
 800349c:	1a12      	subs	r2, r2, r0
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	00d9      	lsls	r1, r3, #3
 80034ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b0:	00d0      	lsls	r0, r2, #3
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	1912      	adds	r2, r2, r4
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	0299      	lsls	r1, r3, #10
 80034c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034ca:	0290      	lsls	r0, r2, #10
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f7fc fee0 	bl	80002a0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	60bb      	str	r3, [r7, #8]
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003506:	60bb      	str	r3, [r7, #8]
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	68bb      	ldr	r3, [r7, #8]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0b5b      	lsrs	r3, r3, #13
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	0801a748 	.word	0x0801a748

08003564 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	220f      	movs	r2, #15
 8003572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0203 	and.w	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_GetClockConfig+0x5c>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_GetClockConfig+0x60>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40023c00 	.word	0x40023c00

080035c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e041      	b.n	800365e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f839 	bl	8003666 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 f9d8 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e04e      	b.n	8003732 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_TIM_Base_Start_IT+0xc4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d022      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d01d      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_TIM_Base_Start_IT+0xc8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d018      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_TIM_Base_Start_IT+0xcc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_TIM_Base_Start_IT+0xd0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00e      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <HAL_TIM_Base_Start_IT+0xd4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d009      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d004      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x80>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIM_Base_Start_IT+0xdc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d111      	bne.n	8003720 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b06      	cmp	r3, #6
 800370c:	d010      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371e:	e007      	b.n	8003730 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40010400 	.word	0x40010400
 8003754:	40014000 	.word	0x40014000
 8003758:	40001800 	.word	0x40001800

0800375c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b02      	cmp	r3, #2
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0202 	mvn.w	r2, #2
 8003788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8ee 	bl	8003980 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8e0 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8f1 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0204 	mvn.w	r2, #4
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8c4 	bl	8003980 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8b6 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8c7 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b08      	cmp	r3, #8
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b08      	cmp	r3, #8
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0208 	mvn.w	r2, #8
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2204      	movs	r2, #4
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f89a 	bl	8003980 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f88c 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f89d 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b10      	cmp	r3, #16
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b10      	cmp	r3, #16
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0210 	mvn.w	r2, #16
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2208      	movs	r2, #8
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f870 	bl	8003980 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f862 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f873 	bl	8003994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0201 	mvn.w	r2, #1
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fc fffa 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f902 	bl	8003b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b40      	cmp	r3, #64	; 0x40
 8003926:	d107      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f838 	bl	80039a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d10e      	bne.n	8003964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b20      	cmp	r3, #32
 8003952:	d107      	bne.n	8003964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0220 	mvn.w	r2, #32
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8cc 	bl	8003afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a40      	ldr	r2, [pc, #256]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d00f      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3d      	ldr	r2, [pc, #244]	; (8003ad4 <TIM_Base_SetConfig+0x118>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <TIM_Base_SetConfig+0x11c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <TIM_Base_SetConfig+0x120>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3a      	ldr	r2, [pc, #232]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d027      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <TIM_Base_SetConfig+0x118>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d023      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <TIM_Base_SetConfig+0x11c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <TIM_Base_SetConfig+0x120>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d017      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <TIM_Base_SetConfig+0x128>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <TIM_Base_SetConfig+0x12c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <TIM_Base_SetConfig+0x130>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <TIM_Base_SetConfig+0x134>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <TIM_Base_SetConfig+0x138>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <TIM_Base_SetConfig+0x13c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d108      	bne.n	8003a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0xf8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40010400 	.word	0x40010400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800
 8003af0:	40001800 	.word	0x40001800
 8003af4:	40001c00 	.word	0x40001c00
 8003af8:	40002000 	.word	0x40002000

08003afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8003b2a:	4ba0      	ldr	r3, [pc, #640]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b2c:	22a9      	movs	r2, #169	; 0xa9
 8003b2e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b32:	22fe      	movs	r2, #254	; 0xfe
 8003b34:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 84;
 8003b36:	4b9d      	ldr	r3, [pc, #628]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b38:	2254      	movs	r2, #84	; 0x54
 8003b3a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 58;
 8003b3c:	4b9b      	ldr	r3, [pc, #620]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b3e:	223a      	movs	r2, #58	; 0x3a
 8003b40:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003b42:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003b44:	22ff      	movs	r2, #255	; 0xff
 8003b46:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003b48:	4b99      	ldr	r3, [pc, #612]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003b4a:	22ff      	movs	r2, #255	; 0xff
 8003b4c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8003b4e:	4b98      	ldr	r3, [pc, #608]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003b54:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8003b5a:	4b96      	ldr	r3, [pc, #600]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003b5c:	22a9      	movs	r2, #169	; 0xa9
 8003b5e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8003b60:	4b94      	ldr	r3, [pc, #592]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003b62:	22fe      	movs	r2, #254	; 0xfe
 8003b64:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 84;
 8003b66:	4b93      	ldr	r3, [pc, #588]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003b68:	2254      	movs	r2, #84	; 0x54
 8003b6a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 58;
 8003b6c:	4b91      	ldr	r3, [pc, #580]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003b6e:	223a      	movs	r2, #58	; 0x3a
 8003b70:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003b72:	2100      	movs	r1, #0
 8003b74:	2000      	movs	r0, #0
 8003b76:	f006 fe23 	bl	800a7c0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003b7a:	4b8c      	ldr	r3, [pc, #560]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	061a      	lsls	r2, r3, #24
 8003b80:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b8a:	789b      	ldrb	r3, [r3, #2]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	4a86      	ldr	r2, [pc, #536]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b92:	78d2      	ldrb	r2, [r2, #3]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	061a      	lsls	r2, r3, #24
 8003b98:	4b84      	ldr	r3, [pc, #528]	; (8003dac <MX_LWIP_Init+0x288>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	0619      	lsls	r1, r3, #24
 8003b9e:	4b83      	ldr	r3, [pc, #524]	; (8003dac <MX_LWIP_Init+0x288>)
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	4319      	orrs	r1, r3
 8003ba6:	4b81      	ldr	r3, [pc, #516]	; (8003dac <MX_LWIP_Init+0x288>)
 8003ba8:	789b      	ldrb	r3, [r3, #2]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	430b      	orrs	r3, r1
 8003bae:	497f      	ldr	r1, [pc, #508]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bb0:	78c9      	ldrb	r1, [r1, #3]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	0619      	lsls	r1, r3, #24
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	4319      	orrs	r1, r3
 8003bca:	4b78      	ldr	r3, [pc, #480]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bcc:	789b      	ldrb	r3, [r3, #2]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	4976      	ldr	r1, [pc, #472]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bd4:	78c9      	ldrb	r1, [r1, #3]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bde:	431a      	orrs	r2, r3
 8003be0:	4b72      	ldr	r3, [pc, #456]	; (8003dac <MX_LWIP_Init+0x288>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	0619      	lsls	r1, r3, #24
 8003be6:	4b71      	ldr	r3, [pc, #452]	; (8003dac <MX_LWIP_Init+0x288>)
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	4319      	orrs	r1, r3
 8003bee:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bf0:	789b      	ldrb	r3, [r3, #2]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	496d      	ldr	r1, [pc, #436]	; (8003dac <MX_LWIP_Init+0x288>)
 8003bf8:	78c9      	ldrb	r1, [r1, #3]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	4a6d      	ldr	r2, [pc, #436]	; (8003db8 <MX_LWIP_Init+0x294>)
 8003c02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	061a      	lsls	r2, r3, #24
 8003c0a:	4b69      	ldr	r3, [pc, #420]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c14:	789b      	ldrb	r3, [r3, #2]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c1c:	78d2      	ldrb	r2, [r2, #3]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	0619      	lsls	r1, r3, #24
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	4319      	orrs	r1, r3
 8003c30:	4b5f      	ldr	r3, [pc, #380]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c32:	789b      	ldrb	r3, [r3, #2]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	430b      	orrs	r3, r1
 8003c38:	495d      	ldr	r1, [pc, #372]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c3a:	78c9      	ldrb	r1, [r1, #3]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c44:	431a      	orrs	r2, r3
 8003c46:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	0619      	lsls	r1, r3, #24
 8003c4c:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4319      	orrs	r1, r3
 8003c54:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c56:	789b      	ldrb	r3, [r3, #2]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	4954      	ldr	r1, [pc, #336]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c5e:	78c9      	ldrb	r1, [r1, #3]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0619      	lsls	r1, r3, #24
 8003c70:	4b4f      	ldr	r3, [pc, #316]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	4319      	orrs	r1, r3
 8003c78:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	494b      	ldr	r1, [pc, #300]	; (8003db0 <MX_LWIP_Init+0x28c>)
 8003c82:	78c9      	ldrb	r1, [r1, #3]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	0e1b      	lsrs	r3, r3, #24
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	4a4c      	ldr	r2, [pc, #304]	; (8003dbc <MX_LWIP_Init+0x298>)
 8003c8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003c8e:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	061a      	lsls	r2, r3, #24
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003c9e:	789b      	ldrb	r3, [r3, #2]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003ca6:	78d2      	ldrb	r2, [r2, #3]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	061a      	lsls	r2, r3, #24
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	0619      	lsls	r1, r3, #24
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4319      	orrs	r1, r3
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cbc:	789b      	ldrb	r3, [r3, #2]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	493c      	ldr	r1, [pc, #240]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cc4:	78c9      	ldrb	r1, [r1, #3]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0619      	lsls	r1, r3, #24
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	4319      	orrs	r1, r3
 8003cde:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003ce0:	789b      	ldrb	r3, [r3, #2]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	4933      	ldr	r1, [pc, #204]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003ce8:	78c9      	ldrb	r1, [r1, #3]
 8003cea:	430b      	orrs	r3, r1
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	0619      	lsls	r1, r3, #24
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	4319      	orrs	r1, r3
 8003d02:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	492a      	ldr	r1, [pc, #168]	; (8003db4 <MX_LWIP_Init+0x290>)
 8003d0c:	78c9      	ldrb	r1, [r1, #3]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	4313      	orrs	r3, r2
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <MX_LWIP_Init+0x29c>)
 8003d16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <MX_LWIP_Init+0x2a0>)
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <MX_LWIP_Init+0x2a4>)
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <MX_LWIP_Init+0x29c>)
 8003d26:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <MX_LWIP_Init+0x298>)
 8003d28:	4923      	ldr	r1, [pc, #140]	; (8003db8 <MX_LWIP_Init+0x294>)
 8003d2a:	4828      	ldr	r0, [pc, #160]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d2c:	f007 facc 	bl	800b2c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003d30:	4826      	ldr	r0, [pc, #152]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d32:	f007 fc7b 	bl	800b62c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003d48:	4820      	ldr	r0, [pc, #128]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d4a:	f007 fc7f 	bl	800b64c <netif_set_up>
 8003d4e:	e002      	b.n	8003d56 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003d50:	481e      	ldr	r0, [pc, #120]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d52:	f007 fce7 	bl	800b724 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003d56:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <MX_LWIP_Init+0x2ac>)
 8003d58:	481c      	ldr	r0, [pc, #112]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d5a:	f007 fd79 	bl	800b850 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2101      	movs	r1, #1
 8003d62:	2001      	movs	r0, #1
 8003d64:	f000 feca 	bl	8004afc <osSemaphoreNew>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <MX_LWIP_Init+0x2b0>)
 8003d6c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <MX_LWIP_Init+0x2b4>)
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <MX_LWIP_Init+0x2a8>)
 8003d72:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <MX_LWIP_Init+0x2b0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <MX_LWIP_Init+0x2b4>)
 8003d7a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4816      	ldr	r0, [pc, #88]	; (8003ddc <MX_LWIP_Init+0x2b8>)
 8003d82:	f012 f861 	bl	8015e48 <memset>
  attributes.name = "LinkThr";
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <MX_LWIP_Init+0x2b8>)
 8003d88:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <MX_LWIP_Init+0x2bc>)
 8003d8a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <MX_LWIP_Init+0x2b8>)
 8003d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d92:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <MX_LWIP_Init+0x2b8>)
 8003d96:	2210      	movs	r2, #16
 8003d98:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <MX_LWIP_Init+0x2b8>)
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <MX_LWIP_Init+0x2b4>)
 8003d9e:	4811      	ldr	r0, [pc, #68]	; (8003de4 <MX_LWIP_Init+0x2c0>)
 8003da0:	f000 fcf1 	bl	8004786 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20004d98 	.word	0x20004d98
 8003db0:	20004d94 	.word	0x20004d94
 8003db4:	20004d34 	.word	0x20004d34
 8003db8:	20004d90 	.word	0x20004d90
 8003dbc:	20004d9c 	.word	0x20004d9c
 8003dc0:	20004da0 	.word	0x20004da0
 8003dc4:	0800a6d1 	.word	0x0800a6d1
 8003dc8:	08004451 	.word	0x08004451
 8003dcc:	20004d5c 	.word	0x20004d5c
 8003dd0:	08004535 	.word	0x08004535
 8003dd4:	200000ac 	.word	0x200000ac
 8003dd8:	20004d2c 	.word	0x20004d2c
 8003ddc:	20004d38 	.word	0x20004d38
 8003de0:	08017144 	.word	0x08017144
 8003de4:	080044bd 	.word	0x080044bd

08003de8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_ETH_MspInit+0x184>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f040 80ac 	bne.w	8003f64 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4a56      	ldr	r2, [pc, #344]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1c:	4b54      	ldr	r3, [pc, #336]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	4a4f      	ldr	r2, [pc, #316]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e36:	6313      	str	r3, [r2, #48]	; 0x30
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a48      	ldr	r2, [pc, #288]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a41      	ldr	r2, [pc, #260]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e70:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a3a      	ldr	r2, [pc, #232]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a33      	ldr	r2, [pc, #204]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003ea2:	f043 0302 	orr.w	r3, r3, #2
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_ETH_MspInit+0x188>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003ed0:	2332      	movs	r3, #50	; 0x32
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003edc:	2303      	movs	r3, #3
 8003ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ee0:	230b      	movs	r3, #11
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4822      	ldr	r0, [pc, #136]	; (8003f74 <HAL_ETH_MspInit+0x18c>)
 8003eec:	f7fe fc70 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ef0:	2386      	movs	r3, #134	; 0x86
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f00:	230b      	movs	r3, #11
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	481b      	ldr	r0, [pc, #108]	; (8003f78 <HAL_ETH_MspInit+0x190>)
 8003f0c:	f7fe fc60 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f22:	230b      	movs	r3, #11
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4813      	ldr	r0, [pc, #76]	; (8003f7c <HAL_ETH_MspInit+0x194>)
 8003f2e:	f7fe fc4f 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003f32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f40:	2303      	movs	r3, #3
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f44:	230b      	movs	r3, #11
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	480c      	ldr	r0, [pc, #48]	; (8003f80 <HAL_ETH_MspInit+0x198>)
 8003f50:	f7fe fc3e 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2105      	movs	r1, #5
 8003f58:	203d      	movs	r0, #61	; 0x3d
 8003f5a:	f7fd fa69 	bl	8001430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003f5e:	203d      	movs	r0, #61	; 0x3d
 8003f60:	f7fd fa82 	bl	8001468 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003f64:	bf00      	nop
 8003f66:	3738      	adds	r7, #56	; 0x38
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40028000 	.word	0x40028000
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020000 	.word	0x40020000
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40021800 	.word	0x40021800

08003f84 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_ETH_RxCpltCallback+0x1c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fe8f 	bl	8004cb4 <osSemaphoreRelease>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200000b0 	.word	0x200000b0

08003fa4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b090      	sub	sp, #64	; 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <low_level_init+0x184>)
 8003fb2:	4a5e      	ldr	r2, [pc, #376]	; (800412c <low_level_init+0x188>)
 8003fb4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <low_level_init+0x184>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003fbc:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <low_level_init+0x184>)
 8003fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fc2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fc4:	4b58      	ldr	r3, [pc, #352]	; (8004128 <low_level_init+0x184>)
 8003fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fca:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003fcc:	4b56      	ldr	r3, [pc, #344]	; (8004128 <low_level_init+0x184>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8003fda:	23e1      	movs	r3, #225	; 0xe1
 8003fdc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8003fea:	4a4f      	ldr	r2, [pc, #316]	; (8004128 <low_level_init+0x184>)
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <low_level_init+0x184>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <low_level_init+0x184>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <low_level_init+0x184>)
 8004000:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004004:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004006:	4848      	ldr	r0, [pc, #288]	; (8004128 <low_level_init+0x184>)
 8004008:	f7fd fa3c 	bl	8001484 <HAL_ETH_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004012:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	b2da      	uxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800402c:	2304      	movs	r3, #4
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <low_level_init+0x18c>)
 8004030:	4940      	ldr	r1, [pc, #256]	; (8004134 <low_level_init+0x190>)
 8004032:	483d      	ldr	r0, [pc, #244]	; (8004128 <low_level_init+0x184>)
 8004034:	f7fd fbc2 	bl	80017bc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004038:	2304      	movs	r3, #4
 800403a:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <low_level_init+0x194>)
 800403c:	493f      	ldr	r1, [pc, #252]	; (800413c <low_level_init+0x198>)
 800403e:	483a      	ldr	r0, [pc, #232]	; (8004128 <low_level_init+0x184>)
 8004040:	f7fd fc25 	bl	800188e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2206      	movs	r2, #6
 8004048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <low_level_init+0x184>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <low_level_init+0x184>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	785a      	ldrb	r2, [r3, #1]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <low_level_init+0x184>)
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	789a      	ldrb	r2, [r3, #2]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004070:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <low_level_init+0x184>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	78da      	ldrb	r2, [r3, #3]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <low_level_init+0x184>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	791a      	ldrb	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <low_level_init+0x184>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	795a      	ldrb	r2, [r3, #5]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800409a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80040a2:	f043 030a 	orr.w	r3, r3, #10
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2101      	movs	r1, #1
 80040b2:	2001      	movs	r0, #1
 80040b4:	f000 fd22 	bl	8004afc <osSemaphoreNew>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <low_level_init+0x19c>)
 80040bc:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f011 febe 	bl	8015e48 <memset>
  attributes.name = "EthIf";
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <low_level_init+0x1a0>)
 80040ce:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80040d0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80040d6:	2330      	movs	r3, #48	; 0x30
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	461a      	mov	r2, r3
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4819      	ldr	r0, [pc, #100]	; (8004148 <low_level_init+0x1a4>)
 80040e4:	f000 fb4f 	bl	8004786 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80040e8:	480f      	ldr	r0, [pc, #60]	; (8004128 <low_level_init+0x184>)
 80040ea:	f7fd fef8 	bl	8001ede <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80040ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040f2:	461a      	mov	r2, r3
 80040f4:	211d      	movs	r1, #29
 80040f6:	480c      	ldr	r0, [pc, #48]	; (8004128 <low_level_init+0x184>)
 80040f8:	f7fd fe23 	bl	8001d42 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	f043 030b 	orr.w	r3, r3, #11
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	461a      	mov	r2, r3
 8004108:	211d      	movs	r1, #29
 800410a:	4807      	ldr	r0, [pc, #28]	; (8004128 <low_level_init+0x184>)
 800410c:	f7fd fe81 	bl	8001e12 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004114:	461a      	mov	r2, r3
 8004116:	211d      	movs	r1, #29
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <low_level_init+0x184>)
 800411a:	f7fd fe12 	bl	8001d42 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800411e:	bf00      	nop
 8004120:	3740      	adds	r7, #64	; 0x40
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20006674 	.word	0x20006674
 800412c:	40028000 	.word	0x40028000
 8004130:	200066bc 	.word	0x200066bc
 8004134:	20004da4 	.word	0x20004da4
 8004138:	20004e24 	.word	0x20004e24
 800413c:	200065f4 	.word	0x200065f4
 8004140:	200000b0 	.word	0x200000b0
 8004144:	0801714c 	.word	0x0801714c
 8004148:	080043f1 	.word	0x080043f1

0800414c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004156:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <low_level_output+0x138>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800416e:	4b45      	ldr	r3, [pc, #276]	; (8004284 <low_level_output+0x138>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	e05a      	b.n	8004234 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da03      	bge.n	800418e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004186:	23f8      	movs	r3, #248	; 0xf8
 8004188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800418c:	e05c      	b.n	8004248 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	895b      	ldrh	r3, [r3, #10]
 8004192:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004198:	e02f      	b.n	80041fa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	18d0      	adds	r0, r2, r3
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	18d1      	adds	r1, r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041ae:	3304      	adds	r3, #4
 80041b0:	461a      	mov	r2, r3
 80041b2:	f011 fe21 	bl	8015df8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da03      	bge.n	80041cc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80041c4:	23f8      	movs	r3, #248	; 0xf8
 80041c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80041ca:	e03d      	b.n	8004248 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80041dc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80041e8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80041f4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004204:	4293      	cmp	r3, r2
 8004206:	d8c8      	bhi.n	800419a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	18d0      	adds	r0, r2, r3
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4619      	mov	r1, r3
 800421a:	f011 fded 	bl	8015df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1a1      	bne.n	800417e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	4811      	ldr	r0, [pc, #68]	; (8004284 <low_level_output+0x138>)
 800423e:	f7fd fb93 	bl	8001968 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <low_level_output+0x138>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004250:	3314      	adds	r3, #20
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <low_level_output+0x138>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	3314      	adds	r3, #20
 8004266:	2220      	movs	r2, #32
 8004268:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <low_level_output+0x138>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	3304      	adds	r3, #4
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	; 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20006674 	.word	0x20006674

08004288 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80042ac:	484f      	ldr	r0, [pc, #316]	; (80043ec <low_level_input+0x164>)
 80042ae:	f7fd fc45 	bl	8001b3c <HAL_ETH_GetReceivedFrame_IT>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <low_level_input+0x34>

    return NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e092      	b.n	80043e2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <low_level_input+0x164>)
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80042c2:	4b4a      	ldr	r3, [pc, #296]	; (80043ec <low_level_input+0x164>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80042c8:	89fb      	ldrh	r3, [r7, #14]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80042ce:	89fb      	ldrh	r3, [r7, #14]
 80042d0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80042d4:	4619      	mov	r1, r3
 80042d6:	2000      	movs	r0, #0
 80042d8:	f007 fb84 	bl	800b9e4 <pbuf_alloc>
 80042dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d04b      	beq.n	800437c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <low_level_input+0x164>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	e040      	b.n	8004376 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	895b      	ldrh	r3, [r3, #10]
 80042f8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80042fe:	e021      	b.n	8004344 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	18d0      	adds	r0, r2, r3
 8004308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	18d1      	adds	r1, r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004314:	3304      	adds	r3, #4
 8004316:	461a      	mov	r2, r3
 8004318:	f011 fd6e 	bl	8015df8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004332:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800433e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800434e:	4293      	cmp	r3, r2
 8004350:	d8d6      	bhi.n	8004300 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	18d0      	adds	r0, r2, r3
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4619      	mov	r1, r3
 8004364:	f011 fd48 	bl	8015df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4413      	add	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1bb      	bne.n	80042f4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <low_level_input+0x164>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e00b      	b.n	80043a0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3301      	adds	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <low_level_input+0x164>)
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3ee      	bcc.n	8004388 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <low_level_input+0x164>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <low_level_input+0x164>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	3314      	adds	r3, #20
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <low_level_input+0x164>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	3314      	adds	r3, #20
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <low_level_input+0x164>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043da:	3308      	adds	r3, #8
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
  }
  return p;
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3730      	adds	r7, #48	; 0x30
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20006674 	.word	0x20006674

080043f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <ethernetif_input+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f04f 31ff 	mov.w	r1, #4294967295
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fc03 	bl	8004c10 <osSemaphoreAcquire>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f5      	bne.n	80043fc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <ethernetif_input+0x5c>)
 8004412:	f011 fb63 	bl	8015adc <sys_mutex_lock>
        p = low_level_input( netif );
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff ff36 	bl	8004288 <low_level_input>
 800441c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	68b8      	ldr	r0, [r7, #8]
 800442c:	4798      	blx	r3
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004434:	68b8      	ldr	r0, [r7, #8]
 8004436:	f007 fdb9 	bl	800bfac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800443a:	4804      	ldr	r0, [pc, #16]	; (800444c <ethernetif_input+0x5c>)
 800443c:	f011 fb5d 	bl	8015afa <sys_mutex_unlock>
      } while(p!=NULL);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e4      	bne.n	8004410 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004446:	e7d9      	b.n	80043fc <ethernetif_input+0xc>
 8004448:	200000b0 	.word	0x200000b0
 800444c:	20007ecc 	.word	0x20007ecc

08004450 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <ethernetif_init+0x1c>
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <ethernetif_init+0x48>)
 8004460:	f240 223b 	movw	r2, #571	; 0x23b
 8004464:	490d      	ldr	r1, [pc, #52]	; (800449c <ethernetif_init+0x4c>)
 8004466:	480e      	ldr	r0, [pc, #56]	; (80044a0 <ethernetif_init+0x50>)
 8004468:	f011 fda0 	bl	8015fac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2273      	movs	r2, #115	; 0x73
 8004470:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2274      	movs	r2, #116	; 0x74
 8004478:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <ethernetif_init+0x54>)
 8004480:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <ethernetif_init+0x58>)
 8004486:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fd8b 	bl	8003fa4 <low_level_init>

  return ERR_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	08017154 	.word	0x08017154
 800449c:	08017170 	.word	0x08017170
 80044a0:	08017180 	.word	0x08017180
 80044a4:	080138e9 	.word	0x080138e9
 80044a8:	0800414d 	.word	0x0800414d

080044ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044b0:	f7fc fed6 	bl	8001260 <HAL_GetTick>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	461a      	mov	r2, r3
 80044d2:	2101      	movs	r1, #1
 80044d4:	4816      	ldr	r0, [pc, #88]	; (8004530 <ethernetif_set_link+0x74>)
 80044d6:	f7fd fc34 	bl	8001d42 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d108      	bne.n	8004504 <ethernetif_set_link+0x48>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f007 f943 	bl	800b788 <netif_set_link_up>
 8004502:	e011      	b.n	8004528 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <ethernetif_set_link+0x6c>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f007 f964 	bl	800b7f0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004528:	20c8      	movs	r0, #200	; 0xc8
 800452a:	f000 f9be 	bl	80048aa <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800452e:	e7cd      	b.n	80044cc <ethernetif_set_link+0x10>
 8004530:	20006674 	.word	0x20006674

08004534 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d05d      	beq.n	8004612 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <ethernetif_update_config+0xf4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03f      	beq.n	80045de <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800455e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004562:	2100      	movs	r1, #0
 8004564:	4830      	ldr	r0, [pc, #192]	; (8004628 <ethernetif_update_config+0xf4>)
 8004566:	f7fd fc54 	bl	8001e12 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800456a:	f7fc fe79 	bl	8001260 <HAL_GetTick>
 800456e:	4603      	mov	r3, r0
 8004570:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	461a      	mov	r2, r3
 8004578:	2101      	movs	r1, #1
 800457a:	482b      	ldr	r0, [pc, #172]	; (8004628 <ethernetif_update_config+0xf4>)
 800457c:	f7fd fbe1 	bl	8001d42 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004580:	f7fc fe6e 	bl	8001260 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458e:	d828      	bhi.n	80045e2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0eb      	beq.n	8004572 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	461a      	mov	r2, r3
 80045a0:	2110      	movs	r1, #16
 80045a2:	4821      	ldr	r0, [pc, #132]	; (8004628 <ethernetif_update_config+0xf4>)
 80045a4:	f7fd fbcd 	bl	8001d42 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <ethernetif_update_config+0xf4>)
 80045b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	e002      	b.n	80045c2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <ethernetif_update_config+0xf4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <ethernetif_update_config+0xf4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	e016      	b.n	8004602 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80045d4:	4b14      	ldr	r3, [pc, #80]	; (8004628 <ethernetif_update_config+0xf4>)
 80045d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	e011      	b.n	8004602 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <ethernetif_update_config+0xb0>
          goto error;
 80045e2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <ethernetif_update_config+0xf4>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <ethernetif_update_config+0xf4>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	2100      	movs	r1, #0
 80045fc:	480a      	ldr	r0, [pc, #40]	; (8004628 <ethernetif_update_config+0xf4>)
 80045fe:	f7fd fc08 	bl	8001e12 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004602:	2100      	movs	r1, #0
 8004604:	4808      	ldr	r0, [pc, #32]	; (8004628 <ethernetif_update_config+0xf4>)
 8004606:	f7fd fcc9 	bl	8001f9c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800460a:	4807      	ldr	r0, [pc, #28]	; (8004628 <ethernetif_update_config+0xf4>)
 800460c:	f7fd fc67 	bl	8001ede <HAL_ETH_Start>
 8004610:	e002      	b.n	8004618 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004612:	4805      	ldr	r0, [pc, #20]	; (8004628 <ethernetif_update_config+0xf4>)
 8004614:	f7fd fc92 	bl	8001f3c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f807 	bl	800462c <ethernetif_notify_conn_changed>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20006674 	.word	0x20006674

0800462c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <__NVIC_SetPriority>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SysTick_Handler+0x1c>)
 800469a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800469c:	f002 fd3a 	bl	8007114 <xTaskGetSchedulerState>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046a6:	f003 fc1f 	bl	8007ee8 <xPortSysTickHandler>
  }
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f06f 0004 	mvn.w	r0, #4
 80046be:	f7ff ffbf 	bl	8004640 <__NVIC_SetPriority>
#endif
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ce:	f3ef 8305 	mrs	r3, IPSR
 80046d2:	603b      	str	r3, [r7, #0]
  return(result);
 80046d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046da:	f06f 0305 	mvn.w	r3, #5
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	e00c      	b.n	80046fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <osKernelInitialize+0x44>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <osKernelInitialize+0x44>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e002      	b.n	80046fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200000b4 	.word	0x200000b4

08004710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	603b      	str	r3, [r7, #0]
  return(result);
 800471c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004722:	f06f 0305 	mvn.w	r3, #5
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e010      	b.n	800474c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <osKernelStart+0x48>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d109      	bne.n	8004746 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004732:	f7ff ffbf 	bl	80046b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <osKernelStart+0x48>)
 8004738:	2202      	movs	r2, #2
 800473a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800473c:	f002 f86c 	bl	8006818 <vTaskStartScheduler>
      stat = osOK;
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e002      	b.n	800474c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800474c:	687b      	ldr	r3, [r7, #4]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	200000b4 	.word	0x200000b4

0800475c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004762:	f3ef 8305 	mrs	r3, IPSR
 8004766:	603b      	str	r3, [r7, #0]
  return(result);
 8004768:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800476e:	f002 f97f 	bl	8006a70 <xTaskGetTickCountFromISR>
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	e002      	b.n	800477c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004776:	f002 f96b 	bl	8006a50 <xTaskGetTickCount>
 800477a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800477c:	687b      	ldr	r3, [r7, #4]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004786:	b580      	push	{r7, lr}
 8004788:	b08e      	sub	sp, #56	; 0x38
 800478a:	af04      	add	r7, sp, #16
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004796:	f3ef 8305 	mrs	r3, IPSR
 800479a:	617b      	str	r3, [r7, #20]
  return(result);
 800479c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d17e      	bne.n	80048a0 <osThreadNew+0x11a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d07b      	beq.n	80048a0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047ac:	2318      	movs	r3, #24
 80047ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d045      	beq.n	800484c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <osThreadNew+0x48>
        name = attr->name;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <osThreadNew+0x6e>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b38      	cmp	r3, #56	; 0x38
 80047e6:	d805      	bhi.n	80047f4 <osThreadNew+0x6e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <osThreadNew+0x72>
        return (NULL);
 80047f4:	2300      	movs	r3, #0
 80047f6:	e054      	b.n	80048a2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <osThreadNew+0xa8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2bbb      	cmp	r3, #187	; 0xbb
 8004816:	d90a      	bls.n	800482e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <osThreadNew+0xa8>
        mem = 1;
 8004828:	2301      	movs	r3, #1
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e010      	b.n	8004850 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <osThreadNew+0xca>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <osThreadNew+0xca>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <osThreadNew+0xca>
          mem = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e001      	b.n	8004850 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d110      	bne.n	8004878 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800485e:	9202      	str	r2, [sp, #8]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 fde7 	bl	8006440 <xTaskCreateStatic>
 8004872:	4603      	mov	r3, r0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e013      	b.n	80048a0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d110      	bne.n	80048a0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	b29a      	uxth	r2, r3
 8004882:	f107 0310 	add.w	r3, r7, #16
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f001 fe32 	bl	80064fa <xTaskCreate>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <osThreadNew+0x11a>
            hTask = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048a0:	693b      	ldr	r3, [r7, #16]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3728      	adds	r7, #40	; 0x28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b2:	f3ef 8305 	mrs	r3, IPSR
 80048b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80048b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <osDelay+0x1c>
    stat = osErrorISR;
 80048be:	f06f 0305 	mvn.w	r3, #5
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e007      	b.n	80048d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 ff6d 	bl	80067b0 <vTaskDelay>
    }
  }

  return (stat);
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ec:	f3ef 8305 	mrs	r3, IPSR
 80048f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048f2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d174      	bne.n	80049e2 <osMutexNew+0x102>
    if (attr != NULL) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <osMutexNew+0x26>
      type = attr->attr_bits;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	e001      	b.n	800490a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <osMutexNew+0x3a>
      rmtx = 1U;
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e001      	b.n	800491e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d15c      	bne.n	80049e2 <osMutexNew+0x102>
      mem = -1;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d006      	beq.n	800494a <osMutexNew+0x6a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b4f      	cmp	r3, #79	; 0x4f
 8004942:	d902      	bls.n	800494a <osMutexNew+0x6a>
          mem = 1;
 8004944:	2301      	movs	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e00c      	b.n	8004964 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <osMutexNew+0x84>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <osMutexNew+0x84>
            mem = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e001      	b.n	8004964 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d112      	bne.n	8004990 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4619      	mov	r1, r3
 8004976:	2004      	movs	r0, #4
 8004978:	f000 fdd1 	bl	800551e <xQueueCreateMutexStatic>
 800497c:	61f8      	str	r0, [r7, #28]
 800497e:	e016      	b.n	80049ae <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4619      	mov	r1, r3
 8004986:	2001      	movs	r0, #1
 8004988:	f000 fdc9 	bl	800551e <xQueueCreateMutexStatic>
 800498c:	61f8      	str	r0, [r7, #28]
 800498e:	e00e      	b.n	80049ae <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800499c:	2004      	movs	r0, #4
 800499e:	f000 fda6 	bl	80054ee <xQueueCreateMutex>
 80049a2:	61f8      	str	r0, [r7, #28]
 80049a4:	e003      	b.n	80049ae <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80049a6:	2001      	movs	r0, #1
 80049a8:	f000 fda1 	bl	80054ee <xQueueCreateMutex>
 80049ac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <osMutexNew+0xee>
        if (attr != NULL) {
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <osMutexNew+0xe2>
          name = attr->name;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e001      	b.n	80049c6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	69f8      	ldr	r0, [r7, #28]
 80049ca:	f001 fcb1 	bl	8006330 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d006      	beq.n	80049e2 <osMutexNew+0x102>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80049e2:	69fb      	ldr	r3, [r7, #28]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a0a:	f3ef 8305 	mrs	r3, IPSR
 8004a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a10:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004a16:	f06f 0305 	mvn.w	r3, #5
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e02c      	b.n	8004a78 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d103      	bne.n	8004a2c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004a24:	f06f 0303 	mvn.w	r3, #3
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e025      	b.n	8004a78 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6938      	ldr	r0, [r7, #16]
 8004a36:	f000 fdc1 	bl	80055bc <xQueueTakeMutexRecursive>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d01b      	beq.n	8004a78 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004a46:	f06f 0301 	mvn.w	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e014      	b.n	8004a78 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004a4e:	f06f 0302 	mvn.w	r3, #2
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e010      	b.n	8004a78 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	6938      	ldr	r0, [r7, #16]
 8004a5a:	f001 f955 	bl	8005d08 <xQueueSemaphoreTake>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d009      	beq.n	8004a78 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004a6a:	f06f 0301 	mvn.w	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e002      	b.n	8004a78 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004a72:	f06f 0302 	mvn.w	r3, #2
 8004a76:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004a78:	697b      	ldr	r3, [r7, #20]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aa4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004aaa:	f06f 0305 	mvn.w	r3, #5
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e01f      	b.n	8004af2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004ab8:	f06f 0303 	mvn.w	r3, #3
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e018      	b.n	8004af2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f000 fd44 	bl	8005554 <xQueueGiveMutexRecursive>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d00f      	beq.n	8004af2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004ad2:	f06f 0302 	mvn.w	r3, #2
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e00b      	b.n	8004af2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004ada:	2300      	movs	r3, #0
 8004adc:	2200      	movs	r2, #0
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6938      	ldr	r0, [r7, #16]
 8004ae2:	f000 fe0b 	bl	80056fc <xQueueGenericSend>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d002      	beq.n	8004af2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004aec:	f06f 0302 	mvn.w	r3, #2
 8004af0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0c:	f3ef 8305 	mrs	r3, IPSR
 8004b10:	613b      	str	r3, [r7, #16]
  return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d175      	bne.n	8004c04 <osSemaphoreNew+0x108>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d072      	beq.n	8004c04 <osSemaphoreNew+0x108>
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d86e      	bhi.n	8004c04 <osSemaphoreNew+0x108>
    mem = -1;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d015      	beq.n	8004b5e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d006      	beq.n	8004b48 <osSemaphoreNew+0x4c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b4f      	cmp	r3, #79	; 0x4f
 8004b40:	d902      	bls.n	8004b48 <osSemaphoreNew+0x4c>
        mem = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e00c      	b.n	8004b62 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d108      	bne.n	8004b62 <osSemaphoreNew+0x66>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <osSemaphoreNew+0x66>
          mem = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e001      	b.n	8004b62 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d04c      	beq.n	8004c04 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d128      	bne.n	8004bc2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10a      	bne.n	8004b8c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	9200      	str	r2, [sp, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	2001      	movs	r0, #1
 8004b84:	f000 fbc4 	bl	8005310 <xQueueGenericCreateStatic>
 8004b88:	61f8      	str	r0, [r7, #28]
 8004b8a:	e005      	b.n	8004b98 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	2100      	movs	r1, #0
 8004b90:	2001      	movs	r0, #1
 8004b92:	f000 fc35 	bl	8005400 <xQueueGenericCreate>
 8004b96:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d022      	beq.n	8004be4 <osSemaphoreNew+0xe8>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01f      	beq.n	8004be4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2100      	movs	r1, #0
 8004baa:	69f8      	ldr	r0, [r7, #28]
 8004bac:	f000 fda6 	bl	80056fc <xQueueGenericSend>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d016      	beq.n	8004be4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004bb6:	69f8      	ldr	r0, [r7, #28]
 8004bb8:	f001 fa6e 	bl	8006098 <vQueueDelete>
            hSemaphore = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e010      	b.n	8004be4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d108      	bne.n	8004bda <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fd29 	bl	8005628 <xQueueCreateCountingSemaphoreStatic>
 8004bd6:	61f8      	str	r0, [r7, #28]
 8004bd8:	e004      	b.n	8004be4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fd5a 	bl	8005696 <xQueueCreateCountingSemaphore>
 8004be2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e001      	b.n	8004bfc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004bfc:	6979      	ldr	r1, [r7, #20]
 8004bfe:	69f8      	ldr	r0, [r7, #28]
 8004c00:	f001 fb96 	bl	8006330 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c04:	69fb      	ldr	r3, [r7, #28]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004c28:	f06f 0303 	mvn.w	r3, #3
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e039      	b.n	8004ca4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c30:	f3ef 8305 	mrs	r3, IPSR
 8004c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004c42:	f06f 0303 	mvn.w	r3, #3
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e02c      	b.n	8004ca4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	461a      	mov	r2, r3
 8004c54:	2100      	movs	r1, #0
 8004c56:	6938      	ldr	r0, [r7, #16]
 8004c58:	f001 f962 	bl	8005f20 <xQueueReceiveFromISR>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d003      	beq.n	8004c6a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004c62:	f06f 0302 	mvn.w	r3, #2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e01c      	b.n	8004ca4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d019      	beq.n	8004ca4 <osSemaphoreAcquire+0x94>
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <osSemaphoreAcquire+0xa0>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	e010      	b.n	8004ca4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6938      	ldr	r0, [r7, #16]
 8004c86:	f001 f83f 	bl	8005d08 <xQueueSemaphoreTake>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d009      	beq.n	8004ca4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004c96:	f06f 0301 	mvn.w	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e002      	b.n	8004ca4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004c9e:	f06f 0302 	mvn.w	r3, #2
 8004ca2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ca4:	697b      	ldr	r3, [r7, #20]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004cca:	f06f 0303 	mvn.w	r3, #3
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e02c      	b.n	8004d2c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd2:	f3ef 8305 	mrs	r3, IPSR
 8004cd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01a      	beq.n	8004d14 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f000 fea0 	bl	8005a2e <xQueueGiveFromISR>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d003      	beq.n	8004cfc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004cf4:	f06f 0302 	mvn.w	r3, #2
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e017      	b.n	8004d2c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d014      	beq.n	8004d2c <osSemaphoreRelease+0x78>
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <osSemaphoreRelease+0x84>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	e00b      	b.n	8004d2c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d14:	2300      	movs	r3, #0
 8004d16:	2200      	movs	r2, #0
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f000 fcee 	bl	80056fc <xQueueGenericSend>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d002      	beq.n	8004d2c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004d26:	f06f 0302 	mvn.w	r3, #2
 8004d2a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d48:	f3ef 8305 	mrs	r3, IPSR
 8004d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8004d54:	f06f 0305 	mvn.w	r3, #5
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e00e      	b.n	8004d7a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8004d62:	f06f 0303 	mvn.w	r3, #3
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e007      	b.n	8004d7a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8004d6a:	6938      	ldr	r0, [r7, #16]
 8004d6c:	f001 fb0a 	bl	8006384 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8004d74:	6938      	ldr	r0, [r7, #16]
 8004d76:	f001 f98f 	bl	8006098 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004d7a:	697b      	ldr	r3, [r7, #20]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d94:	f3ef 8305 	mrs	r3, IPSR
 8004d98:	613b      	str	r3, [r7, #16]
  return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d15f      	bne.n	8004e60 <osMessageQueueNew+0xdc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d05c      	beq.n	8004e60 <osMessageQueueNew+0xdc>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d059      	beq.n	8004e60 <osMessageQueueNew+0xdc>
    mem = -1;
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d029      	beq.n	8004e0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <osMessageQueueNew+0x62>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b4f      	cmp	r3, #79	; 0x4f
 8004dc6:	d90e      	bls.n	8004de6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <osMessageQueueNew+0x62>
        mem = 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e014      	b.n	8004e10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d110      	bne.n	8004e10 <osMessageQueueNew+0x8c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <osMessageQueueNew+0x8c>
          mem = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e001      	b.n	8004e10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d10b      	bne.n	8004e2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2100      	movs	r1, #0
 8004e20:	9100      	str	r1, [sp, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fa73 	bl	8005310 <xQueueGenericCreateStatic>
 8004e2a:	61f8      	str	r0, [r7, #28]
 8004e2c:	e008      	b.n	8004e40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004e34:	2200      	movs	r2, #0
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fae1 	bl	8005400 <xQueueGenericCreate>
 8004e3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e001      	b.n	8004e58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	69f8      	ldr	r0, [r7, #28]
 8004e5c:	f001 fa68 	bl	8006330 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004e60:	69fb      	ldr	r3, [r7, #28]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e84:	f3ef 8305 	mrs	r3, IPSR
 8004e88:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d028      	beq.n	8004ee2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <osMessageQueuePut+0x36>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <osMessageQueuePut+0x36>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004ea2:	f06f 0303 	mvn.w	r3, #3
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e038      	b.n	8004f1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004eae:	f107 0210 	add.w	r2, r7, #16
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	69b8      	ldr	r0, [r7, #24]
 8004eb8:	f000 fd1e 	bl	80058f8 <xQueueGenericSendFromISR>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d003      	beq.n	8004eca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004ec2:	f06f 0302 	mvn.w	r3, #2
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e028      	b.n	8004f1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d025      	beq.n	8004f1c <osMessageQueuePut+0xb0>
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <osMessageQueuePut+0xbc>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	e01c      	b.n	8004f1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <osMessageQueuePut+0x82>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004eee:	f06f 0303 	mvn.w	r3, #3
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e012      	b.n	8004f1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	69b8      	ldr	r0, [r7, #24]
 8004efe:	f000 fbfd 	bl	80056fc <xQueueGenericSend>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d009      	beq.n	8004f1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004f0e:	f06f 0301 	mvn.w	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e002      	b.n	8004f1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004f16:	f06f 0302 	mvn.w	r3, #2
 8004f1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f1c:	69fb      	ldr	r3, [r7, #28]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	617b      	str	r3, [r7, #20]
  return(result);
 8004f48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <osMessageQueueGet+0x34>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <osMessageQueueGet+0x34>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004f60:	f06f 0303 	mvn.w	r3, #3
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	e037      	b.n	8004fd8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004f6c:	f107 0310 	add.w	r3, r7, #16
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	69b8      	ldr	r0, [r7, #24]
 8004f76:	f000 ffd3 	bl	8005f20 <xQueueReceiveFromISR>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d003      	beq.n	8004f88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004f80:	f06f 0302 	mvn.w	r3, #2
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e027      	b.n	8004fd8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d024      	beq.n	8004fd8 <osMessageQueueGet+0xac>
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <osMessageQueueGet+0xb8>)
 8004f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	e01b      	b.n	8004fd8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <osMessageQueueGet+0x80>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004fac:	f06f 0303 	mvn.w	r3, #3
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e011      	b.n	8004fd8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	69b8      	ldr	r0, [r7, #24]
 8004fba:	f000 fdc5 	bl	8005b48 <xQueueReceive>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d009      	beq.n	8004fd8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004fca:	f06f 0301 	mvn.w	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e002      	b.n	8004fd8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004fd2:	f06f 0302 	mvn.w	r3, #2
 8004fd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <osMessageQueueGetCount+0x18>
    count = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e00e      	b.n	800501e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005000:	f3ef 8305 	mrs	r3, IPSR
 8005004:	60fb      	str	r3, [r7, #12]
  return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800500c:	6938      	ldr	r0, [r7, #16]
 800500e:	f001 f825 	bl	800605c <uxQueueMessagesWaitingFromISR>
 8005012:	6178      	str	r0, [r7, #20]
 8005014:	e003      	b.n	800501e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f001 f802 	bl	8006020 <uxQueueMessagesWaiting>
 800501c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005034:	f3ef 8305 	mrs	r3, IPSR
 8005038:	60fb      	str	r3, [r7, #12]
  return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005040:	f06f 0305 	mvn.w	r3, #5
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e00e      	b.n	8005066 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800504e:	f06f 0303 	mvn.w	r3, #3
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e007      	b.n	8005066 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f001 f994 	bl	8006384 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005060:	6938      	ldr	r0, [r7, #16]
 8005062:	f001 f819 	bl	8006098 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <vApplicationGetIdleTaskMemory+0x2c>)
 8005080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	200000b8 	.word	0x200000b8
 80050a0:	20000174 	.word	0x20000174

080050a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80050b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a06      	ldr	r2, [pc, #24]	; (80050d4 <vApplicationGetTimerTaskMemory+0x30>)
 80050ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000374 	.word	0x20000374
 80050d4:	20000430 	.word	0x20000430

080050d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f103 0208 	add.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f103 0208 	add.w	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d103      	bne.n	800519a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e00c      	b.n	80051b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3308      	adds	r3, #8
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e002      	b.n	80051a8 <vListInsert+0x2e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d2f6      	bcs.n	80051a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6852      	ldr	r2, [r2, #4]
 800520c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d103      	bne.n	8005220 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1e5a      	subs	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800526a:	f002 fdab 	bl	8007dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	441a      	add	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	3b01      	subs	r3, #1
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d114      	bne.n	80052ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3310      	adds	r3, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fd4f 	bl	8006d70 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <xQueueGenericReset+0xcc>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e009      	b.n	80052fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3310      	adds	r3, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fef2 	bl	80050d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff feed 	bl	80050d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052fe:	f002 fd91 	bl	8007e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005302:	2301      	movs	r3, #1
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	; 0x38
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <xQueueGenericCreateStatic+0x52>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <xQueueGenericCreateStatic+0x56>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <xQueueGenericCreateStatic+0x58>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	623b      	str	r3, [r7, #32]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xQueueGenericCreateStatic+0x7e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <xQueueGenericCreateStatic+0x82>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericCreateStatic+0x84>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61fb      	str	r3, [r7, #28]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053ae:	2350      	movs	r3, #80	; 0x50
 80053b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b50      	cmp	r3, #80	; 0x50
 80053b6:	d00a      	beq.n	80053ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	61bb      	str	r3, [r7, #24]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f83f 	bl	8005474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3730      	adds	r7, #48	; 0x30
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	613b      	str	r3, [r7, #16]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3350      	adds	r3, #80	; 0x50
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fde5 	bl	8008008 <pvPortMalloc>
 800543e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d011      	beq.n	800546a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	3350      	adds	r3, #80	; 0x50
 800544e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005458:	79fa      	ldrb	r2, [r7, #7]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f805 	bl	8005474 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800546a:	69bb      	ldr	r3, [r7, #24]
	}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d103      	bne.n	8005490 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e002      	b.n	8005496 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054a2:	2101      	movs	r1, #1
 80054a4:	69b8      	ldr	r0, [r7, #24]
 80054a6:	f7ff fecb 	bl	8005240 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054da:	2300      	movs	r3, #0
 80054dc:	2200      	movs	r2, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f90b 	bl	80056fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	461a      	mov	r2, r3
 8005504:	6939      	ldr	r1, [r7, #16]
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f7ff ff7a 	bl	8005400 <xQueueGenericCreate>
 800550c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ffd3 	bl	80054ba <prvInitialiseMutex>

		return xNewQueue;
 8005514:	68fb      	ldr	r3, [r7, #12]
	}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800551e:	b580      	push	{r7, lr}
 8005520:	b088      	sub	sp, #32
 8005522:	af02      	add	r7, sp, #8
 8005524:	4603      	mov	r3, r0
 8005526:	6039      	str	r1, [r7, #0]
 8005528:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2200      	movs	r2, #0
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	6978      	ldr	r0, [r7, #20]
 800553e:	f7ff fee7 	bl	8005310 <xQueueGenericCreateStatic>
 8005542:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff ffb8 	bl	80054ba <prvInitialiseMutex>

		return xNewQueue;
 800554a:	68fb      	ldr	r3, [r7, #12]
	}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60fb      	str	r3, [r7, #12]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	689c      	ldr	r4, [r3, #8]
 8005580:	f001 fdb8 	bl	80070f4 <xTaskGetCurrentTaskHandle>
 8005584:	4603      	mov	r3, r0
 8005586:	429c      	cmp	r4, r3
 8005588:	d111      	bne.n	80055ae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	1e5a      	subs	r2, r3, #1
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800559c:	2300      	movs	r3, #0
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f000 f8aa 	bl	80056fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e001      	b.n	80055b2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80055b2:	697b      	ldr	r3, [r7, #20]
	}
 80055b4:	4618      	mov	r0, r3
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd90      	pop	{r4, r7, pc}

080055bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	689c      	ldr	r4, [r3, #8]
 80055ea:	f001 fd83 	bl	80070f4 <xTaskGetCurrentTaskHandle>
 80055ee:	4603      	mov	r3, r0
 80055f0:	429c      	cmp	r4, r3
 80055f2:	d107      	bne.n	8005604 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80055fe:	2301      	movs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e00c      	b.n	800561e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6938      	ldr	r0, [r7, #16]
 8005608:	f000 fb7e 	bl	8005d08 <xQueueSemaphoreTake>
 800560c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800561e:	697b      	ldr	r3, [r7, #20]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd90      	pop	{r4, r7, pc}

08005628 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	61bb      	str	r3, [r7, #24]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	429a      	cmp	r2, r3
 8005656:	d90a      	bls.n	800566e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	617b      	str	r3, [r7, #20]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800566e:	2302      	movs	r3, #2
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	2100      	movs	r1, #0
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fe49 	bl	8005310 <xQueueGenericCreateStatic>
 800567e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800568c:	69fb      	ldr	r3, [r7, #28]
	}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	613b      	str	r3, [r7, #16]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d90a      	bls.n	80056da <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056da:	2202      	movs	r2, #2
 80056dc:	2100      	movs	r1, #0
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fe8e 	bl	8005400 <xQueueGenericCreate>
 80056e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056f2:	697b      	ldr	r3, [r7, #20]
	}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSend+0x32>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <xQueueGenericSend+0x40>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <xQueueGenericSend+0x44>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <xQueueGenericSend+0x46>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xQueueGenericSend+0x60>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x6e>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <xQueueGenericSend+0x72>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueGenericSend+0x74>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueGenericSend+0x8e>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	623b      	str	r3, [r7, #32]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f001 fcc3 	bl	8007114 <xTaskGetSchedulerState>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueGenericSend+0x9e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueGenericSend+0xa2>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericSend+0xa4>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericSend+0xbe>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61fb      	str	r3, [r7, #28]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ba:	f002 fb03 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <xQueueGenericSend+0xd4>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d129      	bne.n	8005824 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fc9a 	bl	800610e <prvCopyDataToQueue>
 80057da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	3324      	adds	r3, #36	; 0x24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fac1 	bl	8006d70 <xTaskRemoveFromEventList>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <xQueueGenericSend+0x1f8>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	e00a      	b.n	800581c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800580c:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <xQueueGenericSend+0x1f8>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800581c:	f002 fb02 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005820:	2301      	movs	r3, #1
 8005822:	e063      	b.n	80058ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800582a:	f002 fafb 	bl	8007e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800582e:	2300      	movs	r3, #0
 8005830:	e05c      	b.n	80058ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fafb 	bl	8006e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005842:	2301      	movs	r3, #1
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005846:	f002 faed 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800584a:	f001 f855 	bl	80068f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800584e:	f002 fab9 	bl	8007dc4 <vPortEnterCritical>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005858:	b25b      	sxtb	r3, r3
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d103      	bne.n	8005868 <xQueueGenericSend+0x16c>
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d103      	bne.n	800587e <xQueueGenericSend+0x182>
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800587e:	f002 fad1 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005882:	1d3a      	adds	r2, r7, #4
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 faea 	bl	8006e64 <xTaskCheckForTimeOut>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d124      	bne.n	80058e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005898:	f000 fd31 	bl	80062fe <prvIsQueueFull>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	3310      	adds	r3, #16
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fa10 	bl	8006cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 fcbc 	bl	800622e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058b6:	f001 f82d 	bl	8006914 <xTaskResumeAll>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f af7c 	bne.w	80057ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058c2:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <xQueueGenericSend+0x1f8>)
 80058c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	e772      	b.n	80057ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d6:	f000 fcaa 	bl	800622e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058da:	f001 f81b 	bl	8006914 <xTaskResumeAll>
 80058de:	e76c      	b.n	80057ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e2:	f000 fca4 	bl	800622e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058e6:	f001 f815 	bl	8006914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3738      	adds	r7, #56	; 0x38
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <xQueueGenericSendFromISR+0x3c>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <xQueueGenericSendFromISR+0x40>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <xQueueGenericSendFromISR+0x42>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d103      	bne.n	8005962 <xQueueGenericSendFromISR+0x6a>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <xQueueGenericSendFromISR+0x6e>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueGenericSendFromISR+0x70>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	623b      	str	r3, [r7, #32]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005982:	f002 fb01 	bl	8007f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005986:	f3ef 8211 	mrs	r2, BASEPRI
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61fa      	str	r2, [r7, #28]
 800599c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800599e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSendFromISR+0xbc>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d12f      	bne.n	8005a14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059ca:	f000 fba0 	bl	800610e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d112      	bne.n	80059fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d016      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f9c3 	bl	8006d70 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a02:	3301      	adds	r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	b25a      	sxtb	r2, r3
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a12:	e001      	b.n	8005a18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3740      	adds	r7, #64	; 0x40
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08e      	sub	sp, #56	; 0x38
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	623b      	str	r3, [r7, #32]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <xQueueGiveFromISR+0x58>
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <xQueueGiveFromISR+0x5c>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueGiveFromISR+0x5e>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61bb      	str	r3, [r7, #24]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aa6:	f002 fa6f 	bl	8007f88 <vPortValidateInterruptPriority>
	__asm volatile
 8005aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	617a      	str	r2, [r7, #20]
 8005ac0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ac2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d22b      	bcs.n	8005b2e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d112      	bne.n	8005b18 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	3324      	adds	r3, #36	; 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f936 	bl	8006d70 <xTaskRemoveFromEventList>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00e      	beq.n	8005b28 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e007      	b.n	8005b28 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	b25a      	sxtb	r2, r3
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2c:	e001      	b.n	8005b32 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f383 8811 	msr	BASEPRI, r3
}
 8005b3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3738      	adds	r7, #56	; 0x38
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xQueueReceive+0x30>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	623b      	str	r3, [r7, #32]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <xQueueReceive+0x3e>
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <xQueueReceive+0x42>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueReceive+0x44>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueReceive+0x5e>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	61fb      	str	r3, [r7, #28]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ba6:	f001 fab5 	bl	8007114 <xTaskGetSchedulerState>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <xQueueReceive+0x6e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xQueueReceive+0x72>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueReceive+0x74>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueReceive+0x8e>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	61bb      	str	r3, [r7, #24]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bd6:	f002 f8f5 	bl	8007dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01f      	beq.n	8005c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bea:	f000 fafa 	bl	80061e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	3310      	adds	r3, #16
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 f8b4 	bl	8006d70 <xTaskRemoveFromEventList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <xQueueReceive+0x1bc>)
 8005c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c1e:	f002 f901 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e069      	b.n	8005cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c2c:	f002 f8fa 	bl	8007e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e062      	b.n	8005cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c3a:	f107 0310 	add.w	r3, r7, #16
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 f8fa 	bl	8006e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c48:	f002 f8ec 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c4c:	f000 fe54 	bl	80068f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c50:	f002 f8b8 	bl	8007dc4 <vPortEnterCritical>
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c5a:	b25b      	sxtb	r3, r3
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d103      	bne.n	8005c6a <xQueueReceive+0x122>
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d103      	bne.n	8005c80 <xQueueReceive+0x138>
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c80:	f002 f8d0 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c84:	1d3a      	adds	r2, r7, #4
 8005c86:	f107 0310 	add.w	r3, r7, #16
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f8e9 	bl	8006e64 <xTaskCheckForTimeOut>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d123      	bne.n	8005ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9a:	f000 fb1a 	bl	80062d2 <prvIsQueueEmpty>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d017      	beq.n	8005cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	3324      	adds	r3, #36	; 0x24
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f80f 	bl	8006cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb4:	f000 fabb 	bl	800622e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb8:	f000 fe2c 	bl	8006914 <xTaskResumeAll>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d189      	bne.n	8005bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <xQueueReceive+0x1bc>)
 8005cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	e780      	b.n	8005bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd6:	f000 faaa 	bl	800622e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cda:	f000 fe1b 	bl	8006914 <xTaskResumeAll>
 8005cde:	e77a      	b.n	8005bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce2:	f000 faa4 	bl	800622e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce6:	f000 fe15 	bl	8006914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 faf1 	bl	80062d2 <prvIsQueueEmpty>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f43f af6f 	beq.w	8005bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	623b      	str	r3, [r7, #32]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	61fb      	str	r3, [r7, #28]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d58:	f001 f9dc 	bl	8007114 <xTaskGetSchedulerState>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <xQueueSemaphoreTake+0x60>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <xQueueSemaphoreTake+0x64>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <xQueueSemaphoreTake+0x66>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	61bb      	str	r3, [r7, #24]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d88:	f002 f81c 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d024      	beq.n	8005de2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005da8:	f001 fb2a 	bl	8007400 <pvTaskIncrementMutexHeldCount>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ffd6 	bl	8006d70 <xTaskRemoveFromEventList>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dca:	4b54      	ldr	r3, [pc, #336]	; (8005f1c <xQueueSemaphoreTake+0x214>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dda:	f002 f823 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e097      	b.n	8005f12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d111      	bne.n	8005e0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	617b      	str	r3, [r7, #20]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e04:	f002 f80e 	bl	8007e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e082      	b.n	8005f12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f80e 	bl	8006e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e20:	f002 f800 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e24:	f000 fd68 	bl	80068f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e28:	f001 ffcc 	bl	8007dc4 <vPortEnterCritical>
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d103      	bne.n	8005e42 <xQueueSemaphoreTake+0x13a>
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d103      	bne.n	8005e58 <xQueueSemaphoreTake+0x150>
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e58:	f001 ffe4 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e5c:	463a      	mov	r2, r7
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fffd 	bl	8006e64 <xTaskCheckForTimeOut>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d132      	bne.n	8005ed6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e72:	f000 fa2e 	bl	80062d2 <prvIsQueueEmpty>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d026      	beq.n	8005eca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e84:	f001 ff9e 	bl	8007dc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 f95f 	bl	8007150 <xTaskPriorityInherit>
 8005e92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e94:	f001 ffc6 	bl	8007e24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	3324      	adds	r3, #36	; 0x24
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 ff15 	bl	8006cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea8:	f000 f9c1 	bl	800622e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005eac:	f000 fd32 	bl	8006914 <xTaskResumeAll>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f47f af68 	bne.w	8005d88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005eb8:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <xQueueSemaphoreTake+0x214>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	e75e      	b.n	8005d88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ecc:	f000 f9af 	bl	800622e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ed0:	f000 fd20 	bl	8006914 <xTaskResumeAll>
 8005ed4:	e758      	b.n	8005d88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ed8:	f000 f9a9 	bl	800622e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005edc:	f000 fd1a 	bl	8006914 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ee2:	f000 f9f6 	bl	80062d2 <prvIsQueueEmpty>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f43f af4d 	beq.w	8005d88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ef4:	f001 ff66 	bl	8007dc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005efa:	f000 f8f0 	bl	80060de <prvGetDisinheritPriorityAfterTimeout>
 8005efe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f9f8 	bl	80072fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f0c:	f001 ff8a 	bl	8007e24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3738      	adds	r7, #56	; 0x38
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	623b      	str	r3, [r7, #32]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <xQueueReceiveFromISR+0x3a>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <xQueueReceiveFromISR+0x3e>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <xQueueReceiveFromISR+0x40>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61fb      	str	r3, [r7, #28]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f7a:	f002 f805 	bl	8007f88 <vPortValidateInterruptPriority>
	__asm volatile
 8005f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	61ba      	str	r2, [r7, #24]
 8005f94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d02f      	beq.n	8006006 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fb4:	f000 f915 	bl	80061e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	1e5a      	subs	r2, r3, #1
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d112      	bne.n	8005ff0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 feca 	bl	8006d70 <xTaskRemoveFromEventList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	b25a      	sxtb	r2, r3
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	e001      	b.n	800600a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f383 8811 	msr	BASEPRI, r3
}
 8006014:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006018:	4618      	mov	r0, r3
 800601a:	3738      	adds	r7, #56	; 0x38
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006044:	f001 febe 	bl	8007dc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800604e:	f001 fee9 	bl	8007e24 <vPortExitCritical>

	return uxReturn;
 8006052:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60fb      	str	r3, [r7, #12]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800608a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <vQueueDelete+0x28>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60bb      	str	r3, [r7, #8]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f95f 	bl	8006384 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f002 f865 	bl	80081a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e001      	b.n	8006100 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006100:	68fb      	ldr	r3, [r7, #12]
	}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d14d      	bne.n	80061d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f871 	bl	8007220 <xTaskPriorityDisinherit>
 800613e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	609a      	str	r2, [r3, #8]
 8006146:	e043      	b.n	80061d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d119      	bne.n	8006182 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6858      	ldr	r0, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	461a      	mov	r2, r3
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	f00f fe4d 	bl	8015df8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	441a      	add	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	429a      	cmp	r2, r3
 8006176:	d32b      	bcc.n	80061d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	e026      	b.n	80061d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68d8      	ldr	r0, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	461a      	mov	r2, r3
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	f00f fe33 	bl	8015df8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	425b      	negs	r3, r3
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d207      	bcs.n	80061be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	425b      	negs	r3, r3
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d105      	bne.n	80061d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061d8:	697b      	ldr	r3, [r7, #20]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d018      	beq.n	8006226 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d303      	bcc.n	8006216 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68d9      	ldr	r1, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	461a      	mov	r2, r3
 8006220:	6838      	ldr	r0, [r7, #0]
 8006222:	f00f fde9 	bl	8015df8 <memcpy>
	}
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006236:	f001 fdc5 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006240:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006242:	e011      	b.n	8006268 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d012      	beq.n	8006272 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3324      	adds	r3, #36	; 0x24
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fd8d 	bl	8006d70 <xTaskRemoveFromEventList>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800625c:	f000 fe64 	bl	8006f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	3b01      	subs	r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626c:	2b00      	cmp	r3, #0
 800626e:	dce9      	bgt.n	8006244 <prvUnlockQueue+0x16>
 8006270:	e000      	b.n	8006274 <prvUnlockQueue+0x46>
					break;
 8006272:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	22ff      	movs	r2, #255	; 0xff
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800627c:	f001 fdd2 	bl	8007e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006280:	f001 fda0 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800628c:	e011      	b.n	80062b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d012      	beq.n	80062bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3310      	adds	r3, #16
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fd68 	bl	8006d70 <xTaskRemoveFromEventList>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062a6:	f000 fe3f 	bl	8006f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dce9      	bgt.n	800628e <prvUnlockQueue+0x60>
 80062ba:	e000      	b.n	80062be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062c6:	f001 fdad 	bl	8007e24 <vPortExitCritical>
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062da:	f001 fd73 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062e6:	2301      	movs	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e001      	b.n	80062f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062f0:	f001 fd98 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006306:	f001 fd5d 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	429a      	cmp	r2, r3
 8006314:	d102      	bne.n	800631c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e001      	b.n	8006320 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006320:	f001 fd80 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e014      	b.n	800636a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006340:	4a0f      	ldr	r2, [pc, #60]	; (8006380 <vQueueAddToRegistry+0x50>)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800634c:	490c      	ldr	r1, [pc, #48]	; (8006380 <vQueueAddToRegistry+0x50>)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <vQueueAddToRegistry+0x50>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006362:	e006      	b.n	8006372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b07      	cmp	r3, #7
 800636e:	d9e7      	bls.n	8006340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20007e8c 	.word	0x20007e8c

08006384 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e016      	b.n	80063c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <vQueueUnregisterQueue+0x50>)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d10b      	bne.n	80063ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80063a2:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <vQueueUnregisterQueue+0x50>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2100      	movs	r1, #0
 80063a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <vQueueUnregisterQueue+0x50>)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	2200      	movs	r2, #0
 80063b6:	605a      	str	r2, [r3, #4]
				break;
 80063b8:	e006      	b.n	80063c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	d9e5      	bls.n	8006392 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20007e8c 	.word	0x20007e8c

080063d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063e8:	f001 fcec 	bl	8007dc4 <vPortEnterCritical>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d103      	bne.n	8006402 <vQueueWaitForMessageRestricted+0x2a>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006408:	b25b      	sxtb	r3, r3
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d103      	bne.n	8006418 <vQueueWaitForMessageRestricted+0x40>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006418:	f001 fd04 	bl	8007e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fc73 	bl	8006d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f7ff fefb 	bl	800622e <prvUnlockQueue>
	}
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <xTaskCreateStatic+0x46>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	61fb      	str	r3, [r7, #28]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006486:	23bc      	movs	r3, #188	; 0xbc
 8006488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2bbc      	cmp	r3, #188	; 0xbc
 800648e:	d00a      	beq.n	80064a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	61bb      	str	r3, [r7, #24]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01e      	beq.n	80064ec <xTaskCreateStatic+0xac>
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064c6:	2300      	movs	r3, #0
 80064c8:	9303      	str	r3, [sp, #12]
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	9302      	str	r3, [sp, #8]
 80064ce:	f107 0314 	add.w	r3, r7, #20
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f850 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e6:	f000 f8f3 	bl	80066d0 <prvAddNewTaskToReadyList>
 80064ea:	e001      	b.n	80064f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064f0:	697b      	ldr	r3, [r7, #20]
	}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08c      	sub	sp, #48	; 0x30
 80064fe:	af04      	add	r7, sp, #16
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fd7a 	bl	8008008 <pvPortMalloc>
 8006514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800651c:	20bc      	movs	r0, #188	; 0xbc
 800651e:	f001 fd73 	bl	8008008 <pvPortMalloc>
 8006522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
 8006530:	e005      	b.n	800653e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006532:	6978      	ldr	r0, [r7, #20]
 8006534:	f001 fe34 	bl	80081a0 <vPortFree>
 8006538:	e001      	b.n	800653e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d017      	beq.n	8006574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	2300      	movs	r3, #0
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f80e 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006568:	69f8      	ldr	r0, [r7, #28]
 800656a:	f000 f8b1 	bl	80066d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800656e:	2301      	movs	r3, #1
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	e002      	b.n	800657a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800657a:	69bb      	ldr	r3, [r7, #24]
	}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	461a      	mov	r2, r3
 800659c:	21a5      	movs	r1, #165	; 0xa5
 800659e:	f00f fc53 	bl	8015e48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065ac:	3b01      	subs	r3, #1
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	617b      	str	r3, [r7, #20]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01f      	beq.n	8006622 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e012      	b.n	800660e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	7819      	ldrb	r1, [r3, #0]
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	3334      	adds	r3, #52	; 0x34
 80065f8:	460a      	mov	r2, r1
 80065fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d006      	beq.n	8006616 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d9e9      	bls.n	80065e8 <prvInitialiseNewTask+0x64>
 8006614:	e000      	b.n	8006618 <prvInitialiseNewTask+0x94>
			{
				break;
 8006616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006620:	e003      	b.n	800662a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2b37      	cmp	r3, #55	; 0x37
 800662e:	d901      	bls.n	8006634 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006630:	2337      	movs	r3, #55	; 0x37
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fd64 	bl	8005118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fd5f 	bl	8005118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2200      	movs	r2, #0
 800667c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3354      	adds	r3, #84	; 0x54
 8006684:	2260      	movs	r2, #96	; 0x60
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f00f fbdd 	bl	8015e48 <memset>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <prvInitialiseNewTask+0x140>)
 8006692:	659a      	str	r2, [r3, #88]	; 0x58
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	4a0c      	ldr	r2, [pc, #48]	; (80066c8 <prvInitialiseNewTask+0x144>)
 8006698:	65da      	str	r2, [r3, #92]	; 0x5c
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <prvInitialiseNewTask+0x148>)
 800669e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	69b8      	ldr	r0, [r7, #24]
 80066a6:	f001 fa61 	bl	8007b6c <pxPortInitialiseStack>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066bc:	bf00      	nop
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	0801a998 	.word	0x0801a998
 80066c8:	0801a9b8 	.word	0x0801a9b8
 80066cc:	0801a978 	.word	0x0801a978

080066d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066d8:	f001 fb74 	bl	8007dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066e6:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ee:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <prvAddNewTaskToReadyList+0xc4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d110      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066fc:	f000 fc38 	bl	8006f70 <prvInitialiseTaskLists>
 8006700:	e00d      	b.n	800671e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <prvAddNewTaskToReadyList+0xcc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800670a:	4b23      	ldr	r3, [pc, #140]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	429a      	cmp	r2, r3
 8006716:	d802      	bhi.n	800671e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800671e:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 8006726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006728:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <prvAddNewTaskToReadyList+0xd0>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006734:	4b1b      	ldr	r3, [pc, #108]	; (80067a4 <prvAddNewTaskToReadyList+0xd4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d903      	bls.n	8006744 <prvAddNewTaskToReadyList+0x74>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <prvAddNewTaskToReadyList+0xd4>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <prvAddNewTaskToReadyList+0xd8>)
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7fe fce9 	bl	8005132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006760:	f001 fb60 	bl	8007e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <prvAddNewTaskToReadyList+0xcc>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvAddNewTaskToReadyList+0xc8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	429a      	cmp	r2, r3
 8006778:	d207      	bcs.n	800678a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <prvAddNewTaskToReadyList+0xdc>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000d04 	.word	0x20000d04
 8006798:	20000830 	.word	0x20000830
 800679c:	20000d10 	.word	0x20000d10
 80067a0:	20000d20 	.word	0x20000d20
 80067a4:	20000d0c 	.word	0x20000d0c
 80067a8:	20000834 	.word	0x20000834
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d017      	beq.n	80067f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <vTaskDelay+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <vTaskDelay+0x30>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067e0:	f000 f88a 	bl	80068f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fe1e 	bl	8007428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ec:	f000 f892 	bl	8006914 <xTaskResumeAll>
 80067f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d107      	bne.n	8006808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <vTaskDelay+0x64>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000d2c 	.word	0x20000d2c
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006826:	463a      	mov	r2, r7
 8006828:	1d39      	adds	r1, r7, #4
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fc1e 	bl	8005070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	460a      	mov	r2, r1
 8006846:	4924      	ldr	r1, [pc, #144]	; (80068d8 <vTaskStartScheduler+0xc0>)
 8006848:	4824      	ldr	r0, [pc, #144]	; (80068dc <vTaskStartScheduler+0xc4>)
 800684a:	f7ff fdf9 	bl	8006440 <xTaskCreateStatic>
 800684e:	4603      	mov	r3, r0
 8006850:	4a23      	ldr	r2, [pc, #140]	; (80068e0 <vTaskStartScheduler+0xc8>)
 8006852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006854:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <vTaskStartScheduler+0xc8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d102      	bne.n	8006872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800686c:	f000 fe30 	bl	80074d0 <xTimerCreateTimerTask>
 8006870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d11b      	bne.n	80068b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	613b      	str	r3, [r7, #16]
}
 800688a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800688c:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <vTaskStartScheduler+0xcc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3354      	adds	r3, #84	; 0x54
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <vTaskStartScheduler+0xd0>)
 8006894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <vTaskStartScheduler+0xd4>)
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <vTaskStartScheduler+0xd8>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068a4:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <vTaskStartScheduler+0xdc>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068aa:	f001 f9e9 	bl	8007c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068ae:	e00e      	b.n	80068ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d10a      	bne.n	80068ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <vTaskStartScheduler+0xb4>
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	080171a8 	.word	0x080171a8
 80068dc:	08006f41 	.word	0x08006f41
 80068e0:	20000d28 	.word	0x20000d28
 80068e4:	20000830 	.word	0x20000830
 80068e8:	20000020 	.word	0x20000020
 80068ec:	20000d24 	.word	0x20000d24
 80068f0:	20000d10 	.word	0x20000d10
 80068f4:	20000d08 	.word	0x20000d08

080068f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <vTaskSuspendAll+0x18>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a03      	ldr	r2, [pc, #12]	; (8006910 <vTaskSuspendAll+0x18>)
 8006904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	20000d2c 	.word	0x20000d2c

08006914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006922:	4b42      	ldr	r3, [pc, #264]	; (8006a2c <xTaskResumeAll+0x118>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <xTaskResumeAll+0x2c>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	603b      	str	r3, [r7, #0]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006940:	f001 fa40 	bl	8007dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006944:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <xTaskResumeAll+0x118>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3b01      	subs	r3, #1
 800694a:	4a38      	ldr	r2, [pc, #224]	; (8006a2c <xTaskResumeAll+0x118>)
 800694c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694e:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <xTaskResumeAll+0x118>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d162      	bne.n	8006a1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006956:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <xTaskResumeAll+0x11c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d05e      	beq.n	8006a1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800695e:	e02f      	b.n	80069c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006960:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <xTaskResumeAll+0x120>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3318      	adds	r3, #24
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fc3d 	bl	80051ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fc38 	bl	80051ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4b2d      	ldr	r3, [pc, #180]	; (8006a38 <xTaskResumeAll+0x124>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d903      	bls.n	8006990 <xTaskResumeAll+0x7c>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <xTaskResumeAll+0x124>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <xTaskResumeAll+0x128>)
 800699e:	441a      	add	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fe fbc3 	bl	8005132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <xTaskResumeAll+0x12c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d302      	bcc.n	80069c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <xTaskResumeAll+0x130>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <xTaskResumeAll+0x120>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1cb      	bne.n	8006960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069ce:	f000 fb71 	bl	80070b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <xTaskResumeAll+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d010      	beq.n	8006a00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069de:	f000 f859 	bl	8006a94 <xTaskIncrementTick>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069e8:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <xTaskResumeAll+0x130>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f1      	bne.n	80069de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <xTaskResumeAll+0x134>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a00:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <xTaskResumeAll+0x130>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <xTaskResumeAll+0x138>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fa02 	bl	8007e24 <vPortExitCritical>

	return xAlreadyYielded;
 8006a20:	68bb      	ldr	r3, [r7, #8]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000d2c 	.word	0x20000d2c
 8006a30:	20000d04 	.word	0x20000d04
 8006a34:	20000cc4 	.word	0x20000cc4
 8006a38:	20000d0c 	.word	0x20000d0c
 8006a3c:	20000834 	.word	0x20000834
 8006a40:	20000830 	.word	0x20000830
 8006a44:	20000d18 	.word	0x20000d18
 8006a48:	20000d14 	.word	0x20000d14
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <xTaskGetTickCount+0x1c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a5c:	687b      	ldr	r3, [r7, #4]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000d08 	.word	0x20000d08

08006a70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a76:	f001 fa87 	bl	8007f88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <xTaskGetTickCountFromISR+0x20>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a84:	683b      	ldr	r3, [r7, #0]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000d08 	.word	0x20000d08

08006a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9e:	4b4f      	ldr	r3, [pc, #316]	; (8006bdc <xTaskIncrementTick+0x148>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 808f 	bne.w	8006bc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006aa8:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <xTaskIncrementTick+0x14c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ab0:	4a4b      	ldr	r2, [pc, #300]	; (8006be0 <xTaskIncrementTick+0x14c>)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d120      	bne.n	8006afe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006abc:	4b49      	ldr	r3, [pc, #292]	; (8006be4 <xTaskIncrementTick+0x150>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	603b      	str	r3, [r7, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xTaskIncrementTick+0x46>
 8006adc:	4b41      	ldr	r3, [pc, #260]	; (8006be4 <xTaskIncrementTick+0x150>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <xTaskIncrementTick+0x154>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a3f      	ldr	r2, [pc, #252]	; (8006be4 <xTaskIncrementTick+0x150>)
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4a3f      	ldr	r2, [pc, #252]	; (8006be8 <xTaskIncrementTick+0x154>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <xTaskIncrementTick+0x158>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <xTaskIncrementTick+0x158>)
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	f000 fadb 	bl	80070b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006afe:	4b3c      	ldr	r3, [pc, #240]	; (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d349      	bcc.n	8006b9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b08:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <xTaskIncrementTick+0x150>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b12:	4b37      	ldr	r3, [pc, #220]	; (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b14:	f04f 32ff 	mov.w	r2, #4294967295
 8006b18:	601a      	str	r2, [r3, #0]
					break;
 8006b1a:	e03f      	b.n	8006b9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1c:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <xTaskIncrementTick+0x150>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d203      	bcs.n	8006b3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b34:	4a2e      	ldr	r2, [pc, #184]	; (8006bf0 <xTaskIncrementTick+0x15c>)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b3a:	e02f      	b.n	8006b9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fb53 	bl	80051ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3318      	adds	r3, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fb4a 	bl	80051ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <xTaskIncrementTick+0x160>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d903      	bls.n	8006b6c <xTaskIncrementTick+0xd8>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <xTaskIncrementTick+0x160>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <xTaskIncrementTick+0x164>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe fad5 	bl	8005132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <xTaskIncrementTick+0x168>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3b8      	bcc.n	8006b08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9a:	e7b5      	b.n	8006b08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b9c:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <xTaskIncrementTick+0x168>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4915      	ldr	r1, [pc, #84]	; (8006bf8 <xTaskIncrementTick+0x164>)
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d901      	bls.n	8006bb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bb8:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <xTaskIncrementTick+0x16c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e004      	b.n	8006bd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <xTaskIncrementTick+0x170>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	4a0d      	ldr	r2, [pc, #52]	; (8006c04 <xTaskIncrementTick+0x170>)
 8006bce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bd0:	697b      	ldr	r3, [r7, #20]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000d2c 	.word	0x20000d2c
 8006be0:	20000d08 	.word	0x20000d08
 8006be4:	20000cbc 	.word	0x20000cbc
 8006be8:	20000cc0 	.word	0x20000cc0
 8006bec:	20000d1c 	.word	0x20000d1c
 8006bf0:	20000d24 	.word	0x20000d24
 8006bf4:	20000d0c 	.word	0x20000d0c
 8006bf8:	20000834 	.word	0x20000834
 8006bfc:	20000830 	.word	0x20000830
 8006c00:	20000d18 	.word	0x20000d18
 8006c04:	20000d14 	.word	0x20000d14

08006c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <vTaskSwitchContext+0xb0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c16:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <vTaskSwitchContext+0xb4>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c1c:	e046      	b.n	8006cac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006c1e:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <vTaskSwitchContext+0xb4>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c24:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <vTaskSwitchContext+0xb8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e010      	b.n	8006c4e <vTaskSwitchContext+0x46>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <vTaskSwitchContext+0x3e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	491d      	ldr	r1, [pc, #116]	; (8006cc4 <vTaskSwitchContext+0xbc>)
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0e4      	beq.n	8006c2c <vTaskSwitchContext+0x24>
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <vTaskSwitchContext+0xbc>)
 8006c6e:	4413      	add	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	605a      	str	r2, [r3, #4]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3308      	adds	r3, #8
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d104      	bne.n	8006c92 <vTaskSwitchContext+0x8a>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <vTaskSwitchContext+0xc0>)
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <vTaskSwitchContext+0xb8>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <vTaskSwitchContext+0xc0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3354      	adds	r3, #84	; 0x54
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <vTaskSwitchContext+0xc4>)
 8006caa:	6013      	str	r3, [r2, #0]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000d2c 	.word	0x20000d2c
 8006cbc:	20000d18 	.word	0x20000d18
 8006cc0:	20000d0c 	.word	0x20000d0c
 8006cc4:	20000834 	.word	0x20000834
 8006cc8:	20000830 	.word	0x20000830
 8006ccc:	20000020 	.word	0x20000020

08006cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60fb      	str	r3, [r7, #12]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf6:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <vTaskPlaceOnEventList+0x44>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fe fa3b 	bl	800517a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d04:	2101      	movs	r1, #1
 8006d06:	6838      	ldr	r0, [r7, #0]
 8006d08:	f000 fb8e 	bl	8007428 <prvAddCurrentTaskToDelayedList>
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000830 	.word	0x20000830

08006d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	617b      	str	r3, [r7, #20]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3318      	adds	r3, #24
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7fe f9f2 	bl	8005132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68b8      	ldr	r0, [r7, #8]
 8006d5e:	f000 fb63 	bl	8007428 <prvAddCurrentTaskToDelayedList>
	}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000830 	.word	0x20000830

08006d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60fb      	str	r3, [r7, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3318      	adds	r3, #24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fa23 	bl	80051ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <xTaskRemoveFromEventList+0xb0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11d      	bne.n	8006dea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fa1a 	bl	80051ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <xTaskRemoveFromEventList+0xb4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d903      	bls.n	8006dcc <xTaskRemoveFromEventList+0x5c>
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <xTaskRemoveFromEventList+0xb4>)
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <xTaskRemoveFromEventList+0xb8>)
 8006dda:	441a      	add	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f7fe f9a5 	bl	8005132 <vListInsertEnd>
 8006de8:	e005      	b.n	8006df6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3318      	adds	r3, #24
 8006dee:	4619      	mov	r1, r3
 8006df0:	480e      	ldr	r0, [pc, #56]	; (8006e2c <xTaskRemoveFromEventList+0xbc>)
 8006df2:	f7fe f99e 	bl	8005132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <xTaskRemoveFromEventList+0xc0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d905      	bls.n	8006e10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <xTaskRemoveFromEventList+0xc4>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e001      	b.n	8006e14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000d2c 	.word	0x20000d2c
 8006e24:	20000d0c 	.word	0x20000d0c
 8006e28:	20000834 	.word	0x20000834
 8006e2c:	20000cc4 	.word	0x20000cc4
 8006e30:	20000830 	.word	0x20000830
 8006e34:	20000d18 	.word	0x20000d18

08006e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e40:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <vTaskInternalSetTimeOutState+0x24>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <vTaskInternalSetTimeOutState+0x28>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	605a      	str	r2, [r3, #4]
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000d1c 	.word	0x20000d1c
 8006e60:	20000d08 	.word	0x20000d08

08006e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	613b      	str	r3, [r7, #16]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ea6:	f000 ff8d 	bl	8007dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <xTaskCheckForTimeOut+0xbc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec2:	d102      	bne.n	8006eca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	e023      	b.n	8006f12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <xTaskCheckForTimeOut+0xc0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d007      	beq.n	8006ee6 <xTaskCheckForTimeOut+0x82>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d302      	bcc.n	8006ee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	e015      	b.n	8006f12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d20b      	bcs.n	8006f08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff ff9b 	bl	8006e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e004      	b.n	8006f12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f12:	f000 ff87 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 8006f16:	69fb      	ldr	r3, [r7, #28]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000d08 	.word	0x20000d08
 8006f24:	20000d1c 	.word	0x20000d1c

08006f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f2c:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <vTaskMissedYield+0x14>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000d18 	.word	0x20000d18

08006f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f48:	f000 f852 	bl	8006ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <prvIdleTask+0x28>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d9f9      	bls.n	8006f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <prvIdleTask+0x2c>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f64:	e7f0      	b.n	8006f48 <prvIdleTask+0x8>
 8006f66:	bf00      	nop
 8006f68:	20000834 	.word	0x20000834
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	e00c      	b.n	8006f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <prvInitialiseTaskLists+0x60>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f8a4 	bl	80050d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3301      	adds	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b37      	cmp	r3, #55	; 0x37
 8006f9a:	d9ef      	bls.n	8006f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f9c:	480d      	ldr	r0, [pc, #52]	; (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006f9e:	f7fe f89b 	bl	80050d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fa2:	480d      	ldr	r0, [pc, #52]	; (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fa4:	f7fe f898 	bl	80050d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fa8:	480c      	ldr	r0, [pc, #48]	; (8006fdc <prvInitialiseTaskLists+0x6c>)
 8006faa:	f7fe f895 	bl	80050d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fae:	480c      	ldr	r0, [pc, #48]	; (8006fe0 <prvInitialiseTaskLists+0x70>)
 8006fb0:	f7fe f892 	bl	80050d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fb4:	480b      	ldr	r0, [pc, #44]	; (8006fe4 <prvInitialiseTaskLists+0x74>)
 8006fb6:	f7fe f88f 	bl	80050d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <prvInitialiseTaskLists+0x78>)
 8006fbc:	4a05      	ldr	r2, [pc, #20]	; (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <prvInitialiseTaskLists+0x7c>)
 8006fc2:	4a05      	ldr	r2, [pc, #20]	; (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fc4:	601a      	str	r2, [r3, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000834 	.word	0x20000834
 8006fd4:	20000c94 	.word	0x20000c94
 8006fd8:	20000ca8 	.word	0x20000ca8
 8006fdc:	20000cc4 	.word	0x20000cc4
 8006fe0:	20000cd8 	.word	0x20000cd8
 8006fe4:	20000cf0 	.word	0x20000cf0
 8006fe8:	20000cbc 	.word	0x20000cbc
 8006fec:	20000cc0 	.word	0x20000cc0

08006ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff6:	e019      	b.n	800702c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ff8:	f000 fee4 	bl	8007dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffc:	4b10      	ldr	r3, [pc, #64]	; (8007040 <prvCheckTasksWaitingTermination+0x50>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe f8ef 	bl	80051ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	4a0b      	ldr	r2, [pc, #44]	; (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3b01      	subs	r3, #1
 800701e:	4a0a      	ldr	r2, [pc, #40]	; (8007048 <prvCheckTasksWaitingTermination+0x58>)
 8007020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007022:	f000 feff 	bl	8007e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f810 	bl	800704c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e1      	bne.n	8006ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000cd8 	.word	0x20000cd8
 8007044:	20000d04 	.word	0x20000d04
 8007048:	20000cec 	.word	0x20000cec

0800704c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3354      	adds	r3, #84	; 0x54
 8007058:	4618      	mov	r0, r3
 800705a:	f00f f80d 	bl	8016078 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007064:	2b00      	cmp	r3, #0
 8007066:	d108      	bne.n	800707a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f897 	bl	80081a0 <vPortFree>
				vPortFree( pxTCB );
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 f894 	bl	80081a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007078:	e018      	b.n	80070ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007080:	2b01      	cmp	r3, #1
 8007082:	d103      	bne.n	800708c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f88b 	bl	80081a0 <vPortFree>
	}
 800708a:	e00f      	b.n	80070ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007092:	2b02      	cmp	r3, #2
 8007094:	d00a      	beq.n	80070ac <prvDeleteTCB+0x60>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	60fb      	str	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <prvDeleteTCB+0x5e>
	}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <prvResetNextTaskUnblockTime+0x38>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvResetNextTaskUnblockTime+0x3c>)
 80070c6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070cc:	e008      	b.n	80070e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <prvResetNextTaskUnblockTime+0x38>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <prvResetNextTaskUnblockTime+0x3c>)
 80070de:	6013      	str	r3, [r2, #0]
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000cbc 	.word	0x20000cbc
 80070f0:	20000d24 	.word	0x20000d24

080070f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <xTaskGetCurrentTaskHandle+0x1c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007100:	687b      	ldr	r3, [r7, #4]
	}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000830 	.word	0x20000830

08007114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <xTaskGetSchedulerState+0x34>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007122:	2301      	movs	r3, #1
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	e008      	b.n	800713a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007128:	4b08      	ldr	r3, [pc, #32]	; (800714c <xTaskGetSchedulerState+0x38>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007130:	2302      	movs	r3, #2
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	e001      	b.n	800713a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007136:	2300      	movs	r3, #0
 8007138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800713a:	687b      	ldr	r3, [r7, #4]
	}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20000d10 	.word	0x20000d10
 800714c:	20000d2c 	.word	0x20000d2c

08007150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d051      	beq.n	800720a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <xTaskPriorityInherit+0xc4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	429a      	cmp	r2, r3
 8007172:	d241      	bcs.n	80071f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	db06      	blt.n	800718a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <xTaskPriorityInherit+0xc4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6959      	ldr	r1, [r3, #20]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <xTaskPriorityInherit+0xc8>)
 800719c:	4413      	add	r3, r2
 800719e:	4299      	cmp	r1, r3
 80071a0:	d122      	bne.n	80071e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe f820 	bl	80051ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <xTaskPriorityInherit+0xc4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <xTaskPriorityInherit+0xcc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <xTaskPriorityInherit+0x7a>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <xTaskPriorityInherit+0xcc>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4a10      	ldr	r2, [pc, #64]	; (8007218 <xTaskPriorityInherit+0xc8>)
 80071d8:	441a      	add	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fd ffa6 	bl	8005132 <vListInsertEnd>
 80071e6:	e004      	b.n	80071f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <xTaskPriorityInherit+0xc4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e008      	b.n	800720a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <xTaskPriorityInherit+0xc4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	429a      	cmp	r2, r3
 8007204:	d201      	bcs.n	800720a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007206:	2301      	movs	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800720a:	68fb      	ldr	r3, [r7, #12]
	}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000830 	.word	0x20000830
 8007218:	20000834 	.word	0x20000834
 800721c:	20000d0c 	.word	0x20000d0c

08007220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d056      	beq.n	80072e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <xTaskPriorityDisinherit+0xd0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d00a      	beq.n	8007256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	60bb      	str	r3, [r7, #8]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	429a      	cmp	r2, r3
 8007288:	d02c      	beq.n	80072e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728e:	2b00      	cmp	r3, #0
 8007290:	d128      	bne.n	80072e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3304      	adds	r3, #4
 8007296:	4618      	mov	r0, r3
 8007298:	f7fd ffa8 	bl	80051ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <xTaskPriorityDisinherit+0xd4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <xTaskPriorityDisinherit+0xa4>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <xTaskPriorityDisinherit+0xd4>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <xTaskPriorityDisinherit+0xd8>)
 80072d2:	441a      	add	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fd ff29 	bl	8005132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072e4:	697b      	ldr	r3, [r7, #20]
	}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000830 	.word	0x20000830
 80072f4:	20000d0c 	.word	0x20000d0c
 80072f8:	20000834 	.word	0x20000834

080072fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800730a:	2301      	movs	r3, #1
 800730c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d06a      	beq.n	80073ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d902      	bls.n	8007342 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	e002      	b.n	8007348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	429a      	cmp	r2, r3
 8007350:	d04b      	beq.n	80073ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	429a      	cmp	r2, r3
 800735a:	d146      	bne.n	80073ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800735c:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d10a      	bne.n	800737c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db04      	blt.n	800739a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	6959      	ldr	r1, [r3, #20]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80073aa:	4413      	add	r3, r2
 80073ac:	4299      	cmp	r1, r3
 80073ae:	d11c      	bne.n	80073ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fd ff19 	bl	80051ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d903      	bls.n	80073ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80073dc:	441a      	add	r2, r3
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f7fd fea4 	bl	8005132 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ea:	bf00      	nop
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20000830 	.word	0x20000830
 80073f8:	20000834 	.word	0x20000834
 80073fc:	20000d0c 	.word	0x20000d0c

08007400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007404:	4b07      	ldr	r3, [pc, #28]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007412:	3201      	adds	r2, #1
 8007414:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007416:	4b03      	ldr	r3, [pc, #12]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 8007418:	681b      	ldr	r3, [r3, #0]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	20000830 	.word	0x20000830

08007428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007432:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007438:	4b20      	ldr	r3, [pc, #128]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fd fed4 	bl	80051ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d10a      	bne.n	8007462 <prvAddCurrentTaskToDelayedList+0x3a>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007452:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4819      	ldr	r0, [pc, #100]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800745c:	f7fd fe69 	bl	8005132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007460:	e026      	b.n	80074b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	429a      	cmp	r2, r3
 8007478:	d209      	bcs.n	800748e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fd fe77 	bl	800517a <vListInsert>
}
 800748c:	e010      	b.n	80074b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800748e:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fd fe6d 	bl	800517a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d202      	bcs.n	80074b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074aa:	4a08      	ldr	r2, [pc, #32]	; (80074cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6013      	str	r3, [r2, #0]
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	20000d08 	.word	0x20000d08
 80074bc:	20000830 	.word	0x20000830
 80074c0:	20000cf0 	.word	0x20000cf0
 80074c4:	20000cc0 	.word	0x20000cc0
 80074c8:	20000cbc 	.word	0x20000cbc
 80074cc:	20000d24 	.word	0x20000d24

080074d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074da:	f000 fb07 	bl	8007aec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <xTimerCreateTimerTask+0x80>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d021      	beq.n	800752a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074ee:	1d3a      	adds	r2, r7, #4
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	f107 030c 	add.w	r3, r7, #12
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fd fdd3 	bl	80050a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	9202      	str	r2, [sp, #8]
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	2302      	movs	r3, #2
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2300      	movs	r3, #0
 800750e:	460a      	mov	r2, r1
 8007510:	4910      	ldr	r1, [pc, #64]	; (8007554 <xTimerCreateTimerTask+0x84>)
 8007512:	4811      	ldr	r0, [pc, #68]	; (8007558 <xTimerCreateTimerTask+0x88>)
 8007514:	f7fe ff94 	bl	8006440 <xTaskCreateStatic>
 8007518:	4603      	mov	r3, r0
 800751a:	4a10      	ldr	r2, [pc, #64]	; (800755c <xTimerCreateTimerTask+0x8c>)
 800751c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <xTimerCreateTimerTask+0x8c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007526:	2301      	movs	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007546:	697b      	ldr	r3, [r7, #20]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000d60 	.word	0x20000d60
 8007554:	080171b0 	.word	0x080171b0
 8007558:	08007695 	.word	0x08007695
 800755c:	20000d64 	.word	0x20000d64

08007560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	623b      	str	r3, [r7, #32]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800758e:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <xTimerGenericCommand+0x98>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d02a      	beq.n	80075ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b05      	cmp	r3, #5
 80075a6:	dc18      	bgt.n	80075da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075a8:	f7ff fdb4 	bl	8007114 <xTaskGetSchedulerState>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d109      	bne.n	80075c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <xTimerGenericCommand+0x98>)
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	f107 0110 	add.w	r1, r7, #16
 80075ba:	2300      	movs	r3, #0
 80075bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075be:	f7fe f89d 	bl	80056fc <xQueueGenericSend>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24
 80075c4:	e012      	b.n	80075ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <xTimerGenericCommand+0x98>)
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f107 0110 	add.w	r1, r7, #16
 80075ce:	2300      	movs	r3, #0
 80075d0:	2200      	movs	r2, #0
 80075d2:	f7fe f893 	bl	80056fc <xQueueGenericSend>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24
 80075d8:	e008      	b.n	80075ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <xTimerGenericCommand+0x98>)
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	f107 0110 	add.w	r1, r7, #16
 80075e2:	2300      	movs	r3, #0
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	f7fe f987 	bl	80058f8 <xQueueGenericSendFromISR>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000d60 	.word	0x20000d60

080075fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007606:	4b22      	ldr	r3, [pc, #136]	; (8007690 <prvProcessExpiredTimer+0x94>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd fde9 	bl	80051ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d022      	beq.n	800766e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	18d1      	adds	r1, r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	6978      	ldr	r0, [r7, #20]
 8007636:	f000 f8d1 	bl	80077dc <prvInsertTimerInActiveList>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01f      	beq.n	8007680 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	2100      	movs	r1, #0
 800764a:	6978      	ldr	r0, [r7, #20]
 800764c:	f7ff ff88 	bl	8007560 <xTimerGenericCommand>
 8007650:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d113      	bne.n	8007680 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	4798      	blx	r3
}
 8007688:	bf00      	nop
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000d58 	.word	0x20000d58

08007694 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800769c:	f107 0308 	add.w	r3, r7, #8
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f857 	bl	8007754 <prvGetNextExpireTime>
 80076a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f803 	bl	80076b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076b2:	f000 f8d5 	bl	8007860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076b6:	e7f1      	b.n	800769c <prvTimerTask+0x8>

080076b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076c2:	f7ff f919 	bl	80068f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076c6:	f107 0308 	add.w	r3, r7, #8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f866 	bl	800779c <prvSampleTimeNow>
 80076d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d130      	bne.n	800773a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <prvProcessTimerOrBlockTask+0x3c>
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d806      	bhi.n	80076f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076e6:	f7ff f915 	bl	8006914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff ff85 	bl	80075fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076f2:	e024      	b.n	800773e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076fa:	4b13      	ldr	r3, [pc, #76]	; (8007748 <prvProcessTimerOrBlockTask+0x90>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <prvProcessTimerOrBlockTask+0x50>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <prvProcessTimerOrBlockTask+0x52>
 8007708:	2300      	movs	r3, #0
 800770a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800770c:	4b0f      	ldr	r3, [pc, #60]	; (800774c <prvProcessTimerOrBlockTask+0x94>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	f7fe fe5d 	bl	80063d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800771e:	f7ff f8f9 	bl	8006914 <xTaskResumeAll>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <prvProcessTimerOrBlockTask+0x98>)
 800772a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
}
 8007738:	e001      	b.n	800773e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800773a:	f7ff f8eb 	bl	8006914 <xTaskResumeAll>
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000d5c 	.word	0x20000d5c
 800774c:	20000d60 	.word	0x20000d60
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800775c:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <prvGetNextExpireTime+0x44>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <prvGetNextExpireTime+0x16>
 8007766:	2201      	movs	r2, #1
 8007768:	e000      	b.n	800776c <prvGetNextExpireTime+0x18>
 800776a:	2200      	movs	r2, #0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <prvGetNextExpireTime+0x44>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e001      	b.n	8007788 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000d58 	.word	0x20000d58

0800779c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077a4:	f7ff f954 	bl	8006a50 <xTaskGetTickCount>
 80077a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077aa:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <prvSampleTimeNow+0x3c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d205      	bcs.n	80077c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077b4:	f000 f936 	bl	8007a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e002      	b.n	80077c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077c6:	4a04      	ldr	r2, [pc, #16]	; (80077d8 <prvSampleTimeNow+0x3c>)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000d68 	.word	0x20000d68

080077dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d812      	bhi.n	8007828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e01b      	b.n	800784e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007816:	4b10      	ldr	r3, [pc, #64]	; (8007858 <prvInsertTimerInActiveList+0x7c>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fd fcaa 	bl	800517a <vListInsert>
 8007826:	e012      	b.n	800784e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d206      	bcs.n	800783e <prvInsertTimerInActiveList+0x62>
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e007      	b.n	800784e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <prvInsertTimerInActiveList+0x80>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f7fd fc96 	bl	800517a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800784e:	697b      	ldr	r3, [r7, #20]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20000d5c 	.word	0x20000d5c
 800785c:	20000d58 	.word	0x20000d58

08007860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08e      	sub	sp, #56	; 0x38
 8007864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007866:	e0ca      	b.n	80079fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	da18      	bge.n	80078a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	3304      	adds	r3, #4
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	61fb      	str	r3, [r7, #28]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007896:	6850      	ldr	r0, [r2, #4]
 8007898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789a:	6892      	ldr	r2, [r2, #8]
 800789c:	4611      	mov	r1, r2
 800789e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f2c0 80aa 	blt.w	80079fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd fc97 	bl	80051ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078be:	463b      	mov	r3, r7
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff ff6b 	bl	800779c <prvSampleTimeNow>
 80078c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b09      	cmp	r3, #9
 80078cc:	f200 8097 	bhi.w	80079fe <prvProcessReceivedCommands+0x19e>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <prvProcessReceivedCommands+0x78>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007975 	.word	0x08007975
 80078e8:	08007989 	.word	0x08007989
 80078ec:	080079d3 	.word	0x080079d3
 80078f0:	08007901 	.word	0x08007901
 80078f4:	08007901 	.word	0x08007901
 80078f8:	08007975 	.word	0x08007975
 80078fc:	08007989 	.word	0x08007989
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	b2da      	uxtb	r2, r3
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	18d1      	adds	r1, r2, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007920:	f7ff ff5c 	bl	80077dc <prvInsertTimerInActiveList>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d069      	beq.n	80079fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d05e      	beq.n	80079fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	441a      	add	r2, r3
 8007948:	2300      	movs	r3, #0
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	2300      	movs	r3, #0
 800794e:	2100      	movs	r1, #0
 8007950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007952:	f7ff fe05 	bl	8007560 <xTimerGenericCommand>
 8007956:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d14f      	bne.n	80079fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	61bb      	str	r3, [r7, #24]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007986:	e03a      	b.n	80079fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	617b      	str	r3, [r7, #20]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	18d1      	adds	r1, r2, r3
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079cc:	f7ff ff06 	bl	80077dc <prvInsertTimerInActiveList>
					break;
 80079d0:	e015      	b.n	80079fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e2:	f000 fbdd 	bl	80081a0 <vPortFree>
 80079e6:	e00a      	b.n	80079fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079fa:	e000      	b.n	80079fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <prvProcessReceivedCommands+0x1c0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	1d39      	adds	r1, r7, #4
 8007a04:	2200      	movs	r2, #0
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe f89e 	bl	8005b48 <xQueueReceive>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f47f af2a 	bne.w	8007868 <prvProcessReceivedCommands+0x8>
	}
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	3730      	adds	r7, #48	; 0x30
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000d60 	.word	0x20000d60

08007a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a2a:	e048      	b.n	8007abe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fd fbd1 	bl	80051ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d02e      	beq.n	8007abe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d90e      	bls.n	8007a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a7e:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fd fb76 	bl	800517a <vListInsert>
 8007a8e:	e016      	b.n	8007abe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a90:	2300      	movs	r3, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7ff fd60 	bl	8007560 <xTimerGenericCommand>
 8007aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	603b      	str	r3, [r7, #0]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1b1      	bne.n	8007a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a04      	ldr	r2, [pc, #16]	; (8007ae4 <prvSwitchTimerLists+0xc0>)
 8007ad4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000d58 	.word	0x20000d58
 8007ae8:	20000d5c 	.word	0x20000d5c

08007aec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007af2:	f000 f967 	bl	8007dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007af6:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <prvCheckForValidListAndQueue+0x60>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d120      	bne.n	8007b40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007afe:	4814      	ldr	r0, [pc, #80]	; (8007b50 <prvCheckForValidListAndQueue+0x64>)
 8007b00:	f7fd faea 	bl	80050d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b04:	4813      	ldr	r0, [pc, #76]	; (8007b54 <prvCheckForValidListAndQueue+0x68>)
 8007b06:	f7fd fae7 	bl	80050d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b0a:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <prvCheckForValidListAndQueue+0x6c>)
 8007b0c:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <prvCheckForValidListAndQueue+0x64>)
 8007b0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <prvCheckForValidListAndQueue+0x70>)
 8007b12:	4a10      	ldr	r2, [pc, #64]	; (8007b54 <prvCheckForValidListAndQueue+0x68>)
 8007b14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b16:	2300      	movs	r3, #0
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <prvCheckForValidListAndQueue+0x74>)
 8007b1c:	4a11      	ldr	r2, [pc, #68]	; (8007b64 <prvCheckForValidListAndQueue+0x78>)
 8007b1e:	2110      	movs	r1, #16
 8007b20:	200a      	movs	r0, #10
 8007b22:	f7fd fbf5 	bl	8005310 <xQueueGenericCreateStatic>
 8007b26:	4603      	mov	r3, r0
 8007b28:	4a08      	ldr	r2, [pc, #32]	; (8007b4c <prvCheckForValidListAndQueue+0x60>)
 8007b2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <prvCheckForValidListAndQueue+0x60>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <prvCheckForValidListAndQueue+0x60>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	490b      	ldr	r1, [pc, #44]	; (8007b68 <prvCheckForValidListAndQueue+0x7c>)
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fbf8 	bl	8006330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b40:	f000 f970 	bl	8007e24 <vPortExitCritical>
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000d60 	.word	0x20000d60
 8007b50:	20000d30 	.word	0x20000d30
 8007b54:	20000d44 	.word	0x20000d44
 8007b58:	20000d58 	.word	0x20000d58
 8007b5c:	20000d5c 	.word	0x20000d5c
 8007b60:	20000e0c 	.word	0x20000e0c
 8007b64:	20000d6c 	.word	0x20000d6c
 8007b68:	080171b8 	.word	0x080171b8

08007b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b04      	subs	r3, #4
 8007b7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f023 0201 	bic.w	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b9c:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <pxPortInitialiseStack+0x64>)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3b14      	subs	r3, #20
 8007ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3b04      	subs	r3, #4
 8007bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f06f 0202 	mvn.w	r2, #2
 8007bba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3b20      	subs	r3, #32
 8007bc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	08007bd5 	.word	0x08007bd5

08007bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <prvTaskExitError+0x54>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be6:	d00a      	beq.n	8007bfe <prvTaskExitError+0x2a>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	60fb      	str	r3, [r7, #12]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <prvTaskExitError+0x28>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	60bb      	str	r3, [r7, #8]
}
 8007c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c12:	bf00      	nop
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0fc      	beq.n	8007c14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	20000010 	.word	0x20000010
 8007c2c:	00000000 	.word	0x00000000

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	4770      	bx	lr
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst2>:
 8007c50:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c58:	4808      	ldr	r0, [pc, #32]	; (8007c7c <prvPortStartFirstTask+0x24>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8814 	msr	CONTROL, r0
 8007c6a:	b662      	cpsie	i
 8007c6c:	b661      	cpsie	f
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	df00      	svc	0
 8007c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed08 	.word	0xe000ed08

08007c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c86:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	; (8007da4 <xPortStartScheduler+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <xPortStartScheduler+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <xPortStartScheduler+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10a      	bne.n	8007cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <xPortStartScheduler+0x12c>)
 8007cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <xPortStartScheduler+0x130>)
 8007cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cee:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cf4:	e009      	b.n	8007d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d0ef      	beq.n	8007cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d16:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1c3 0307 	rsb	r3, r3, #7
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d00a      	beq.n	8007d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d6e:	f000 f8dd 	bl	8007f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <xPortStartScheduler+0x13c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d78:	f000 f8fc 	bl	8007f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d88:	f7ff ff66 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d8c:	f7fe ff3c 	bl	8006c08 <vTaskSwitchContext>
	prvTaskExitError();
 8007d90:	f7ff ff20 	bl	8007bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	e000ed00 	.word	0xe000ed00
 8007da4:	410fc271 	.word	0x410fc271
 8007da8:	410fc270 	.word	0x410fc270
 8007dac:	e000e400 	.word	0xe000e400
 8007db0:	20000e5c 	.word	0x20000e5c
 8007db4:	20000e60 	.word	0x20000e60
 8007db8:	e000ed20 	.word	0xe000ed20
 8007dbc:	20000010 	.word	0x20000010
 8007dc0:	e000ef34 	.word	0xe000ef34

08007dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <vPortEnterCritical+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10f      	bne.n	8007e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortEnterCritical+0x5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vPortEnterCritical+0x4a>
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000010 	.word	0x20000010
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <vPortExitCritical+0x50>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <vPortExitCritical+0x24>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	607b      	str	r3, [r7, #4]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <vPortExitCritical+0x50>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <vPortExitCritical+0x50>)
 8007e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e52:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <vPortExitCritical+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <vPortExitCritical+0x42>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f383 8811 	msr	BASEPRI, r3
}
 8007e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000010 	.word	0x20000010
	...

08007e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <pxCurrentTCBConst>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f01e 0f10 	tst.w	lr, #16
 8007e90:	bf08      	it	eq
 8007e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ea4:	f380 8811 	msr	BASEPRI, r0
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f7fe feaa 	bl	8006c08 <vTaskSwitchContext>
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f380 8811 	msr	BASEPRI, r0
 8007ebc:	bc09      	pop	{r0, r3}
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	6808      	ldr	r0, [r1, #0]
 8007ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	f01e 0f10 	tst.w	lr, #16
 8007eca:	bf08      	it	eq
 8007ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ed0:	f380 8809 	msr	PSP, r0
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst>:
 8007ee0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f7fe fdc7 	bl	8006a94 <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <xPortSysTickHandler+0x40>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
}
 8007f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <vPortSetupTimerInterrupt+0x38>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <vPortSetupTimerInterrupt+0x3c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <vPortSetupTimerInterrupt+0x40>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <vPortSetupTimerInterrupt+0x44>)
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f4e:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e010 	.word	0xe000e010
 8007f64:	e000e018 	.word	0xe000e018
 8007f68:	20000000 	.word	0x20000000
 8007f6c:	10624dd3 	.word	0x10624dd3
 8007f70:	e000e014 	.word	0xe000e014

08007f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f84 <vPortEnableVFP+0x10>
 8007f78:	6801      	ldr	r1, [r0, #0]
 8007f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f7e:	6001      	str	r1, [r0, #0]
 8007f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f82:	bf00      	nop
 8007f84:	e000ed88 	.word	0xe000ed88

08007f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f8e:	f3ef 8305 	mrs	r3, IPSR
 8007f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d914      	bls.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <vPortValidateInterruptPriority+0x70>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fa4:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <vPortValidateInterruptPriority+0x74>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	7afa      	ldrb	r2, [r7, #11]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20a      	bcs.n	8007fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <vPortValidateInterruptPriority+0x78>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <vPortValidateInterruptPriority+0x7c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d90a      	bls.n	8007fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	603b      	str	r3, [r7, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <vPortValidateInterruptPriority+0x60>
	}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	e000e3f0 	.word	0xe000e3f0
 8007ffc:	20000e5c 	.word	0x20000e5c
 8008000:	e000ed0c 	.word	0xe000ed0c
 8008004:	20000e60 	.word	0x20000e60

08008008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008014:	f7fe fc70 	bl	80068f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008018:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <pvPortMalloc+0x180>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008020:	f000 f920 	bl	8008264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <pvPortMalloc+0x184>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8093 	bne.w	8008158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01d      	beq.n	8008074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008038:	2208      	movs	r2, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f023 0307 	bic.w	r3, r3, #7
 8008050:	3308      	adds	r3, #8
 8008052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <pvPortMalloc+0x6c>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	617b      	str	r3, [r7, #20]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d06e      	beq.n	8008158 <pvPortMalloc+0x150>
 800807a:	4b45      	ldr	r3, [pc, #276]	; (8008190 <pvPortMalloc+0x188>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d869      	bhi.n	8008158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008084:	4b43      	ldr	r3, [pc, #268]	; (8008194 <pvPortMalloc+0x18c>)
 8008086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008088:	4b42      	ldr	r3, [pc, #264]	; (8008194 <pvPortMalloc+0x18c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800808e:	e004      	b.n	800809a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <pvPortMalloc+0xa4>
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f1      	bne.n	8008090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <pvPortMalloc+0x180>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d050      	beq.n	8008158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2208      	movs	r2, #8
 80080bc:	4413      	add	r3, r2
 80080be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	2308      	movs	r3, #8
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d91f      	bls.n	8008118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <pvPortMalloc+0xf8>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	613b      	str	r3, [r7, #16]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f000 f908 	bl	8008328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <pvPortMalloc+0x188>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <pvPortMalloc+0x188>)
 8008124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008126:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <pvPortMalloc+0x188>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <pvPortMalloc+0x190>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d203      	bcs.n	800813a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <pvPortMalloc+0x188>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a18      	ldr	r2, [pc, #96]	; (8008198 <pvPortMalloc+0x190>)
 8008138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <pvPortMalloc+0x184>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	431a      	orrs	r2, r3
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <pvPortMalloc+0x194>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a11      	ldr	r2, [pc, #68]	; (800819c <pvPortMalloc+0x194>)
 8008156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008158:	f7fe fbdc 	bl	8006914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <pvPortMalloc+0x174>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <pvPortMalloc+0x172>
	return pvReturn;
 800817c:	69fb      	ldr	r3, [r7, #28]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20004a6c 	.word	0x20004a6c
 800818c:	20004a80 	.word	0x20004a80
 8008190:	20004a70 	.word	0x20004a70
 8008194:	20004a64 	.word	0x20004a64
 8008198:	20004a74 	.word	0x20004a74
 800819c:	20004a78 	.word	0x20004a78

080081a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04d      	beq.n	800824e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081b2:	2308      	movs	r3, #8
 80081b4:	425b      	negs	r3, r3
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	4b24      	ldr	r3, [pc, #144]	; (8008258 <vPortFree+0xb8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <vPortFree+0x44>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60fb      	str	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <vPortFree+0x62>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	60bb      	str	r3, [r7, #8]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <vPortFree+0xb8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11a      	bne.n	800824e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <vPortFree+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008228:	f7fe fb66 	bl	80068f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <vPortFree+0xbc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4413      	add	r3, r2
 8008236:	4a09      	ldr	r2, [pc, #36]	; (800825c <vPortFree+0xbc>)
 8008238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f000 f874 	bl	8008328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <vPortFree+0xc0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	4a06      	ldr	r2, [pc, #24]	; (8008260 <vPortFree+0xc0>)
 8008248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800824a:	f7fe fb63 	bl	8006914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20004a80 	.word	0x20004a80
 800825c:	20004a70 	.word	0x20004a70
 8008260:	20004a7c 	.word	0x20004a7c

08008264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800826a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800826e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008270:	4b27      	ldr	r3, [pc, #156]	; (8008310 <prvHeapInit+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3307      	adds	r3, #7
 8008282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <prvHeapInit+0xac>)
 8008294:	4413      	add	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800829c:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <prvHeapInit+0xb0>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <prvHeapInit+0xb0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082b0:	2208      	movs	r2, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a15      	ldr	r2, [pc, #84]	; (8008318 <prvHeapInit+0xb4>)
 80082c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <prvHeapInit+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <prvHeapInit+0xb4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvHeapInit+0xb4>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <prvHeapInit+0xb8>)
 80082f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <prvHeapInit+0xbc>)
 80082fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <prvHeapInit+0xc0>)
 80082fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000e64 	.word	0x20000e64
 8008314:	20004a64 	.word	0x20004a64
 8008318:	20004a6c 	.word	0x20004a6c
 800831c:	20004a74 	.word	0x20004a74
 8008320:	20004a70 	.word	0x20004a70
 8008324:	20004a80 	.word	0x20004a80

08008328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <prvInsertBlockIntoFreeList+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e002      	b.n	800833c <prvInsertBlockIntoFreeList+0x14>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d8f7      	bhi.n	8008336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d108      	bne.n	800836a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d118      	bne.n	80083b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d00d      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e008      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvInsertBlockIntoFreeList+0xb0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e003      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d002      	beq.n	80083c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20004a64 	.word	0x20004a64
 80083d8:	20004a6c 	.word	0x20004a6c

080083dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	461a      	mov	r2, r3
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f002 f9cf 	bl	800a794 <tcpip_send_msg_wait_sem>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008408:	e001      	b.n	800840e <netconn_apimsg+0x32>
  }
  return err;
 800840a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08c      	sub	sp, #48	; 0x30
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	603a      	str	r2, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
 8008424:	460b      	mov	r3, r1
 8008426:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 ffe7 	bl	8009400 <netconn_alloc>
 8008432:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d054      	beq.n	80084e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800843a:	79bb      	ldrb	r3, [r7, #6]
 800843c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4619      	mov	r1, r3
 8008448:	4829      	ldr	r0, [pc, #164]	; (80084f0 <netconn_new_with_proto_and_callback+0xd8>)
 800844a:	f7ff ffc7 	bl	80083dc <netconn_apimsg>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008454:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008458:	2b00      	cmp	r3, #0
 800845a:	d043      	beq.n	80084e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <netconn_new_with_proto_and_callback+0x58>
 8008464:	4b23      	ldr	r3, [pc, #140]	; (80084f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008466:	22a3      	movs	r2, #163	; 0xa3
 8008468:	4923      	ldr	r1, [pc, #140]	; (80084f8 <netconn_new_with_proto_and_callback+0xe0>)
 800846a:	4824      	ldr	r0, [pc, #144]	; (80084fc <netconn_new_with_proto_and_callback+0xe4>)
 800846c:	f00d fd9e 	bl	8015fac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	3310      	adds	r3, #16
 8008474:	4618      	mov	r0, r3
 8008476:	f00d fa63 	bl	8015940 <sys_mbox_valid>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d105      	bne.n	800848c <netconn_new_with_proto_and_callback+0x74>
 8008480:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008482:	22a4      	movs	r2, #164	; 0xa4
 8008484:	491e      	ldr	r1, [pc, #120]	; (8008500 <netconn_new_with_proto_and_callback+0xe8>)
 8008486:	481d      	ldr	r0, [pc, #116]	; (80084fc <netconn_new_with_proto_and_callback+0xe4>)
 8008488:	f00d fd90 	bl	8015fac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	3314      	adds	r3, #20
 8008490:	4618      	mov	r0, r3
 8008492:	f00d fa55 	bl	8015940 <sys_mbox_valid>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <netconn_new_with_proto_and_callback+0x90>
 800849c:	4b15      	ldr	r3, [pc, #84]	; (80084f4 <netconn_new_with_proto_and_callback+0xdc>)
 800849e:	22a6      	movs	r2, #166	; 0xa6
 80084a0:	4918      	ldr	r1, [pc, #96]	; (8008504 <netconn_new_with_proto_and_callback+0xec>)
 80084a2:	4816      	ldr	r0, [pc, #88]	; (80084fc <netconn_new_with_proto_and_callback+0xe4>)
 80084a4:	f00d fd82 	bl	8015fac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	330c      	adds	r3, #12
 80084ac:	4618      	mov	r0, r3
 80084ae:	f00d fad5 	bl	8015a5c <sys_sem_valid>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <netconn_new_with_proto_and_callback+0xac>
 80084b8:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <netconn_new_with_proto_and_callback+0xdc>)
 80084ba:	22a9      	movs	r2, #169	; 0xa9
 80084bc:	4912      	ldr	r1, [pc, #72]	; (8008508 <netconn_new_with_proto_and_callback+0xf0>)
 80084be:	480f      	ldr	r0, [pc, #60]	; (80084fc <netconn_new_with_proto_and_callback+0xe4>)
 80084c0:	f00d fd74 	bl	8015fac <iprintf>
      sys_sem_free(&conn->op_completed);
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	330c      	adds	r3, #12
 80084c8:	4618      	mov	r0, r3
 80084ca:	f00d faba 	bl	8015a42 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	3310      	adds	r3, #16
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00d f9c0 	bl	8015858 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80084d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084da:	2007      	movs	r0, #7
 80084dc:	f002 fec2 	bl	800b264 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e000      	b.n	80084e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3730      	adds	r7, #48	; 0x30
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	080093d5 	.word	0x080093d5
 80084f4:	080171c0 	.word	0x080171c0
 80084f8:	080171f4 	.word	0x080171f4
 80084fc:	08017218 	.word	0x08017218
 8008500:	08017240 	.word	0x08017240
 8008504:	08017258 	.word	0x08017258
 8008508:	0801727c 	.word	0x0801727c

0800850c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08c      	sub	sp, #48	; 0x30
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e014      	b.n	8008548 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008522:	2329      	movs	r3, #41	; 0x29
 8008524:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	4619      	mov	r1, r3
 800852c:	4808      	ldr	r0, [pc, #32]	; (8008550 <netconn_prepare_delete+0x44>)
 800852e:	f7ff ff55 	bl	80083dc <netconn_apimsg>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <netconn_prepare_delete+0x3a>
    return err;
 8008540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008544:	e000      	b.n	8008548 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3730      	adds	r7, #48	; 0x30
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08009939 	.word	0x08009939

08008554 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <netconn_delete+0x12>
    return ERR_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	e00d      	b.n	8008582 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ffd0 	bl	800850c <netconn_prepare_delete>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <netconn_delete+0x2a>
    netconn_free(conn);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 ffaf 	bl	80094dc <netconn_free>
  }
  return err;
 800857e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <netconn_bind+0x28>
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <netconn_bind+0x5c>)
 80085a2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80085a6:	4911      	ldr	r1, [pc, #68]	; (80085ec <netconn_bind+0x60>)
 80085a8:	4811      	ldr	r0, [pc, #68]	; (80085f0 <netconn_bind+0x64>)
 80085aa:	f00d fcff 	bl	8015fac <iprintf>
 80085ae:	f06f 030f 	mvn.w	r3, #15
 80085b2:	e015      	b.n	80085e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <netconn_bind+0x68>)
 80085bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80085ca:	f107 0314 	add.w	r3, r7, #20
 80085ce:	4619      	mov	r1, r3
 80085d0:	4809      	ldr	r0, [pc, #36]	; (80085f8 <netconn_bind+0x6c>)
 80085d2:	f7ff ff03 	bl	80083dc <netconn_apimsg>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80085dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3738      	adds	r7, #56	; 0x38
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	080171c0 	.word	0x080171c0
 80085ec:	080172f8 	.word	0x080172f8
 80085f0:	08017218 	.word	0x08017218
 80085f4:	0801a864 	.word	0x0801a864
 80085f8:	08009b01 	.word	0x08009b01

080085fc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08e      	sub	sp, #56	; 0x38
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <netconn_connect+0x28>
 8008610:	4b11      	ldr	r3, [pc, #68]	; (8008658 <netconn_connect+0x5c>)
 8008612:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008616:	4911      	ldr	r1, [pc, #68]	; (800865c <netconn_connect+0x60>)
 8008618:	4811      	ldr	r0, [pc, #68]	; (8008660 <netconn_connect+0x64>)
 800861a:	f00d fcc7 	bl	8015fac <iprintf>
 800861e:	f06f 030f 	mvn.w	r3, #15
 8008622:	e015      	b.n	8008650 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800862a:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <netconn_connect+0x68>)
 800862c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	4619      	mov	r1, r3
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <netconn_connect+0x6c>)
 8008642:	f7ff fecb 	bl	80083dc <netconn_apimsg>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800864c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008650:	4618      	mov	r0, r3
 8008652:	3738      	adds	r7, #56	; 0x38
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	080171c0 	.word	0x080171c0
 800865c:	08017334 	.word	0x08017334
 8008660:	08017218 	.word	0x08017218
 8008664:	0801a864 	.word	0x0801a864
 8008668:	08009c95 	.word	0x08009c95

0800866c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <netconn_recv_data+0x2c>
 8008684:	4b58      	ldr	r3, [pc, #352]	; (80087e8 <netconn_recv_data+0x17c>)
 8008686:	f44f 7212 	mov.w	r2, #584	; 0x248
 800868a:	4958      	ldr	r1, [pc, #352]	; (80087ec <netconn_recv_data+0x180>)
 800868c:	4858      	ldr	r0, [pc, #352]	; (80087f0 <netconn_recv_data+0x184>)
 800868e:	f00d fc8d 	bl	8015fac <iprintf>
 8008692:	f06f 030f 	mvn.w	r3, #15
 8008696:	e0a2      	b.n	80087de <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <netconn_recv_data+0x4c>
 80086a4:	4b50      	ldr	r3, [pc, #320]	; (80087e8 <netconn_recv_data+0x17c>)
 80086a6:	f240 224a 	movw	r2, #586	; 0x24a
 80086aa:	4952      	ldr	r1, [pc, #328]	; (80087f4 <netconn_recv_data+0x188>)
 80086ac:	4850      	ldr	r0, [pc, #320]	; (80087f0 <netconn_recv_data+0x184>)
 80086ae:	f00d fc7d 	bl	8015fac <iprintf>
 80086b2:	f06f 030f 	mvn.w	r3, #15
 80086b6:	e092      	b.n	80087de <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3310      	adds	r3, #16
 80086bc:	4618      	mov	r0, r3
 80086be:	f00d f93f 	bl	8015940 <sys_mbox_valid>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10e      	bne.n	80086e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fad4 	bl	8008c76 <netconn_err>
 80086ce:	4603      	mov	r3, r0
 80086d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80086d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80086da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80086de:	e07e      	b.n	80087de <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80086e0:	f06f 030a 	mvn.w	r3, #10
 80086e4:	e07b      	b.n	80087de <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	7f1b      	ldrb	r3, [r3, #28]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10f      	bne.n	8008712 <netconn_recv_data+0xa6>
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	7f1b      	ldrb	r3, [r3, #28]
 8008700:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d023      	beq.n	800875a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	f107 0218 	add.w	r2, r7, #24
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f00d f8f8 	bl	8015912 <sys_arch_mbox_tryfetch>
 8008722:	4603      	mov	r3, r0
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d11f      	bne.n	800876a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 faa3 	bl	8008c76 <netconn_err>
 8008730:	4603      	mov	r3, r0
 8008732:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008734:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800873c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008740:	e04d      	b.n	80087de <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	7f1b      	ldrb	r3, [r3, #28]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800874e:	f06f 030a 	mvn.w	r3, #10
 8008752:	e044      	b.n	80087de <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008754:	f06f 0306 	mvn.w	r3, #6
 8008758:	e041      	b.n	80087de <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3310      	adds	r3, #16
 800875e:	f107 0118 	add.w	r1, r7, #24
 8008762:	2200      	movs	r2, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f00d f8a3 	bl	80158b0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008772:	2b10      	cmp	r3, #16
 8008774:	d117      	bne.n	80087a6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f107 0217 	add.w	r2, r7, #23
 800877c:	4611      	mov	r1, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f000 faca 	bl	8008d18 <lwip_netconn_is_err_msg>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800878a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800878e:	f113 0f0f 	cmn.w	r3, #15
 8008792:	d101      	bne.n	8008798 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	e022      	b.n	80087de <netconn_recv_data+0x172>
      }
      return err;
 8008798:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800879c:	e01f      	b.n	80087de <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	891b      	ldrh	r3, [r3, #8]
 80087a2:	83fb      	strh	r3, [r7, #30]
 80087a4:	e00d      	b.n	80087c2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <netconn_recv_data+0x14e>
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <netconn_recv_data+0x17c>)
 80087ae:	f240 2291 	movw	r2, #657	; 0x291
 80087b2:	4911      	ldr	r1, [pc, #68]	; (80087f8 <netconn_recv_data+0x18c>)
 80087b4:	480e      	ldr	r0, [pc, #56]	; (80087f0 <netconn_recv_data+0x184>)
 80087b6:	f00d fbf9 	bl	8015fac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	891b      	ldrh	r3, [r3, #8]
 80087c0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <netconn_recv_data+0x16a>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	8bfa      	ldrh	r2, [r7, #30]
 80087d0:	2101      	movs	r1, #1
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	080171c0 	.word	0x080171c0
 80087ec:	080173d8 	.word	0x080173d8
 80087f0:	08017218 	.word	0x08017218
 80087f4:	080173f8 	.word	0x080173f8
 80087f8:	08017414 	.word	0x08017414

080087fc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <netconn_tcp_recvd_msg+0x1e>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008816:	2b10      	cmp	r3, #16
 8008818:	d009      	beq.n	800882e <netconn_tcp_recvd_msg+0x32>
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <netconn_tcp_recvd_msg+0x50>)
 800881c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008820:	490b      	ldr	r1, [pc, #44]	; (8008850 <netconn_tcp_recvd_msg+0x54>)
 8008822:	480c      	ldr	r0, [pc, #48]	; (8008854 <netconn_tcp_recvd_msg+0x58>)
 8008824:	f00d fbc2 	bl	8015fac <iprintf>
 8008828:	f06f 030f 	mvn.w	r3, #15
 800882c:	e00a      	b.n	8008844 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4806      	ldr	r0, [pc, #24]	; (8008858 <netconn_tcp_recvd_msg+0x5c>)
 800883e:	f7ff fdcd 	bl	80083dc <netconn_apimsg>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	080171c0 	.word	0x080171c0
 8008850:	08017420 	.word	0x08017420
 8008854:	08017218 	.word	0x08017218
 8008858:	08009e11 	.word	0x08009e11

0800885c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b090      	sub	sp, #64	; 0x40
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3310      	adds	r3, #16
 800886e:	4618      	mov	r0, r3
 8008870:	f00d f866 	bl	8015940 <sys_mbox_valid>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800887a:	f06f 030a 	mvn.w	r3, #10
 800887e:	e06d      	b.n	800895c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	7f1b      	ldrb	r3, [r3, #28]
 8008884:	b25b      	sxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	da07      	bge.n	800889a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	7f1b      	ldrb	r3, [r3, #28]
 800888e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008892:	b2da      	uxtb	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008898:	e039      	b.n	800890e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	461a      	mov	r2, r3
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fee3 	bl	800866c <netconn_recv_data>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80088ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80088b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088b8:	e050      	b.n	800895c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10e      	bne.n	80088e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <netconn_recv_data_tcp+0x7a>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	891b      	ldrh	r3, [r3, #8]
 80088d4:	e000      	b.n	80088d8 <netconn_recv_data_tcp+0x7c>
 80088d6:	2301      	movs	r3, #1
 80088d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80088da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088dc:	f107 0214 	add.w	r2, r7, #20
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff ff8a 	bl	80087fc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d134      	bne.n	8008958 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	7f1b      	ldrb	r3, [r3, #28]
 80088fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008900:	b2da      	uxtb	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008906:	f06f 0306 	mvn.w	r3, #6
 800890a:	e027      	b.n	800895c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800890c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <netconn_recv_data_tcp+0xc6>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	2200      	movs	r2, #0
 800891c:	2101      	movs	r1, #1
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10f      	bne.n	800894a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f9a3 	bl	8008c76 <netconn_err>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008936:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <netconn_recv_data_tcp+0xe8>
          return err;
 800893e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008942:	e00b      	b.n	800895c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008944:	f06f 030d 	mvn.w	r3, #13
 8008948:	e008      	b.n	800895c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800894a:	2101      	movs	r1, #1
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f955 	bl	8008bfc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008952:	f06f 030e 	mvn.w	r3, #14
 8008956:	e001      	b.n	800895c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008958:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800895c:	4618      	mov	r0, r3
 800895e:	3740      	adds	r7, #64	; 0x40
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <netconn_recv+0x28>
 8008978:	4b32      	ldr	r3, [pc, #200]	; (8008a44 <netconn_recv+0xe0>)
 800897a:	f240 3263 	movw	r2, #867	; 0x363
 800897e:	4932      	ldr	r1, [pc, #200]	; (8008a48 <netconn_recv+0xe4>)
 8008980:	4832      	ldr	r0, [pc, #200]	; (8008a4c <netconn_recv+0xe8>)
 8008982:	f00d fb13 	bl	8015fac <iprintf>
 8008986:	f06f 030f 	mvn.w	r3, #15
 800898a:	e056      	b.n	8008a3a <netconn_recv+0xd6>
  *new_buf = NULL;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <netconn_recv+0x48>
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <netconn_recv+0xe0>)
 800899a:	f240 3265 	movw	r2, #869	; 0x365
 800899e:	492c      	ldr	r1, [pc, #176]	; (8008a50 <netconn_recv+0xec>)
 80089a0:	482a      	ldr	r0, [pc, #168]	; (8008a4c <netconn_recv+0xe8>)
 80089a2:	f00d fb03 	bl	8015fac <iprintf>
 80089a6:	f06f 030f 	mvn.w	r3, #15
 80089aa:	e046      	b.n	8008a3a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d13a      	bne.n	8008a2e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089bc:	2006      	movs	r0, #6
 80089be:	f002 fbff 	bl	800b1c0 <memp_malloc>
 80089c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <netconn_recv+0x6c>
      return ERR_MEM;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
 80089ce:	e034      	b.n	8008a3a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80089d0:	f107 030c 	add.w	r3, r7, #12
 80089d4:	2200      	movs	r2, #0
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff3f 	bl	800885c <netconn_recv_data_tcp>
 80089de:	4603      	mov	r3, r0
 80089e0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80089e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d006      	beq.n	80089f8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80089ea:	6979      	ldr	r1, [r7, #20]
 80089ec:	2006      	movs	r0, #6
 80089ee:	f002 fc39 	bl	800b264 <memp_free>
      return err;
 80089f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089f6:	e020      	b.n	8008a3a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <netconn_recv+0xa8>
 80089fe:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <netconn_recv+0xe0>)
 8008a00:	f240 3279 	movw	r2, #889	; 0x379
 8008a04:	4913      	ldr	r1, [pc, #76]	; (8008a54 <netconn_recv+0xf0>)
 8008a06:	4811      	ldr	r0, [pc, #68]	; (8008a4c <netconn_recv+0xe8>)
 8008a08:	f00d fad0 	bl	8015fac <iprintf>

    buf->p = p;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e005      	b.n	8008a3a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fe1a 	bl	800866c <netconn_recv_data>
 8008a38:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	080171c0 	.word	0x080171c0
 8008a48:	080173d8 	.word	0x080173d8
 8008a4c:	08017218 	.word	0x08017218
 8008a50:	080173f8 	.word	0x080173f8
 8008a54:	08017470 	.word	0x08017470

08008a58 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	f107 0110 	add.w	r1, r7, #16
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f805 	bl	8008a8c <netconn_write_vectors_partly>
 8008a82:	4603      	mov	r3, r0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b092      	sub	sp, #72	; 0x48
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4611      	mov	r1, r2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	80fb      	strh	r3, [r7, #6]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <netconn_write_vectors_partly+0x30>
 8008aa8:	4b4e      	ldr	r3, [pc, #312]	; (8008be4 <netconn_write_vectors_partly+0x158>)
 8008aaa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008aae:	494e      	ldr	r1, [pc, #312]	; (8008be8 <netconn_write_vectors_partly+0x15c>)
 8008ab0:	484e      	ldr	r0, [pc, #312]	; (8008bec <netconn_write_vectors_partly+0x160>)
 8008ab2:	f00d fa7b 	bl	8015fac <iprintf>
 8008ab6:	f06f 030f 	mvn.w	r3, #15
 8008aba:	e08e      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d009      	beq.n	8008adc <netconn_write_vectors_partly+0x50>
 8008ac8:	4b46      	ldr	r3, [pc, #280]	; (8008be4 <netconn_write_vectors_partly+0x158>)
 8008aca:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008ace:	4948      	ldr	r1, [pc, #288]	; (8008bf0 <netconn_write_vectors_partly+0x164>)
 8008ad0:	4846      	ldr	r0, [pc, #280]	; (8008bec <netconn_write_vectors_partly+0x160>)
 8008ad2:	f00d fa6b 	bl	8015fac <iprintf>
 8008ad6:	f06f 0305 	mvn.w	r3, #5
 8008ada:	e07e      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	7f1b      	ldrb	r3, [r3, #28]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <netconn_write_vectors_partly+0x66>
 8008ae8:	797b      	ldrb	r3, [r7, #5]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <netconn_write_vectors_partly+0x6a>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <netconn_write_vectors_partly+0x6c>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008afc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <netconn_write_vectors_partly+0x84>
 8008b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008b0a:	f06f 0305 	mvn.w	r3, #5
 8008b0e:	e064      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008b14:	2300      	movs	r3, #0
 8008b16:	643b      	str	r3, [r7, #64]	; 0x40
 8008b18:	e015      	b.n	8008b46 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b26:	4413      	add	r3, r2
 8008b28:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d202      	bcs.n	8008b40 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008b3a:	f06f 0305 	mvn.w	r3, #5
 8008b3e:	e04c      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	3301      	adds	r3, #1
 8008b44:	643b      	str	r3, [r7, #64]	; 0x40
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	dbe5      	blt.n	8008b1a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	e040      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da0a      	bge.n	8008b74 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008b64:	f06f 0305 	mvn.w	r3, #5
 8008b68:	e037      	b.n	8008bda <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008b6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008b6e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008b84:	797b      	ldrb	r3, [r7, #5]
 8008b86:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008b92:	f107 0314 	add.w	r3, r7, #20
 8008b96:	4619      	mov	r1, r3
 8008b98:	4816      	ldr	r0, [pc, #88]	; (8008bf4 <netconn_write_vectors_partly+0x168>)
 8008b9a:	f7ff fc1f 	bl	80083dc <netconn_apimsg>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008ba4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d114      	bne.n	8008bd6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008bb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d006      	beq.n	8008bd6 <netconn_write_vectors_partly+0x14a>
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <netconn_write_vectors_partly+0x158>)
 8008bca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008bce:	490a      	ldr	r1, [pc, #40]	; (8008bf8 <netconn_write_vectors_partly+0x16c>)
 8008bd0:	4806      	ldr	r0, [pc, #24]	; (8008bec <netconn_write_vectors_partly+0x160>)
 8008bd2:	f00d f9eb 	bl	8015fac <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008bd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3748      	adds	r7, #72	; 0x48
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	080171c0 	.word	0x080171c0
 8008be8:	08017498 	.word	0x08017498
 8008bec:	08017218 	.word	0x08017218
 8008bf0:	080174b4 	.word	0x080174b4
 8008bf4:	0800a215 	.word	0x0800a215
 8008bf8:	080174d8 	.word	0x080174d8

08008bfc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08c      	sub	sp, #48	; 0x30
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <netconn_close_shutdown+0x26>
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <netconn_close_shutdown+0x50>)
 8008c10:	f240 4247 	movw	r2, #1095	; 0x447
 8008c14:	490e      	ldr	r1, [pc, #56]	; (8008c50 <netconn_close_shutdown+0x54>)
 8008c16:	480f      	ldr	r0, [pc, #60]	; (8008c54 <netconn_close_shutdown+0x58>)
 8008c18:	f00d f9c8 	bl	8015fac <iprintf>
 8008c1c:	f06f 030f 	mvn.w	r3, #15
 8008c20:	e010      	b.n	8008c44 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008c2a:	2329      	movs	r3, #41	; 0x29
 8008c2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008c2e:	f107 030c 	add.w	r3, r7, #12
 8008c32:	4619      	mov	r1, r3
 8008c34:	4808      	ldr	r0, [pc, #32]	; (8008c58 <netconn_close_shutdown+0x5c>)
 8008c36:	f7ff fbd1 	bl	80083dc <netconn_apimsg>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008c40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3730      	adds	r7, #48	; 0x30
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	080171c0 	.word	0x080171c0
 8008c50:	080174fc 	.word	0x080174fc
 8008c54:	08017218 	.word	0x08017218
 8008c58:	0800a32d 	.word	0x0800a32d

08008c5c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008c64:	2103      	movs	r1, #3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ffc8 	bl	8008bfc <netconn_close_shutdown>
 8008c6c:	4603      	mov	r3, r0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <netconn_err+0x12>
    return ERR_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e00d      	b.n	8008ca4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008c88:	f00c ff64 	bl	8015b54 <sys_arch_protect>
 8008c8c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	7a1b      	ldrb	r3, [r3, #8]
 8008c92:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f00c ff68 	bl	8015b70 <sys_arch_unprotect>
  return err;
 8008ca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cba:	f113 0f0d 	cmn.w	r3, #13
 8008cbe:	d009      	beq.n	8008cd4 <lwip_netconn_err_to_msg+0x28>
 8008cc0:	f113 0f0d 	cmn.w	r3, #13
 8008cc4:	dc0c      	bgt.n	8008ce0 <lwip_netconn_err_to_msg+0x34>
 8008cc6:	f113 0f0f 	cmn.w	r3, #15
 8008cca:	d007      	beq.n	8008cdc <lwip_netconn_err_to_msg+0x30>
 8008ccc:	f113 0f0e 	cmn.w	r3, #14
 8008cd0:	d002      	beq.n	8008cd8 <lwip_netconn_err_to_msg+0x2c>
 8008cd2:	e005      	b.n	8008ce0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <lwip_netconn_err_to_msg+0x54>)
 8008cd6:	e00e      	b.n	8008cf6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <lwip_netconn_err_to_msg+0x58>)
 8008cda:	e00c      	b.n	8008cf6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <lwip_netconn_err_to_msg+0x5c>)
 8008cde:	e00a      	b.n	8008cf6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <lwip_netconn_err_to_msg+0x48>
 8008ce8:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <lwip_netconn_err_to_msg+0x60>)
 8008cea:	227d      	movs	r2, #125	; 0x7d
 8008cec:	4908      	ldr	r1, [pc, #32]	; (8008d10 <lwip_netconn_err_to_msg+0x64>)
 8008cee:	4809      	ldr	r0, [pc, #36]	; (8008d14 <lwip_netconn_err_to_msg+0x68>)
 8008cf0:	f00d f95c 	bl	8015fac <iprintf>
      return NULL;
 8008cf4:	2300      	movs	r3, #0
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	0801a750 	.word	0x0801a750
 8008d04:	0801a751 	.word	0x0801a751
 8008d08:	0801a752 	.word	0x0801a752
 8008d0c:	08017518 	.word	0x08017518
 8008d10:	0801754c 	.word	0x0801754c
 8008d14:	0801755c 	.word	0x0801755c

08008d18 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d105      	bne.n	8008d34 <lwip_netconn_is_err_msg+0x1c>
 8008d28:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <lwip_netconn_is_err_msg+0x5c>)
 8008d2a:	2285      	movs	r2, #133	; 0x85
 8008d2c:	4912      	ldr	r1, [pc, #72]	; (8008d78 <lwip_netconn_is_err_msg+0x60>)
 8008d2e:	4813      	ldr	r0, [pc, #76]	; (8008d7c <lwip_netconn_is_err_msg+0x64>)
 8008d30:	f00d f93c 	bl	8015fac <iprintf>

  if (msg == &netconn_aborted) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a12      	ldr	r2, [pc, #72]	; (8008d80 <lwip_netconn_is_err_msg+0x68>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d104      	bne.n	8008d46 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	22f3      	movs	r2, #243	; 0xf3
 8008d40:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e012      	b.n	8008d6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a0e      	ldr	r2, [pc, #56]	; (8008d84 <lwip_netconn_is_err_msg+0x6c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d104      	bne.n	8008d58 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	22f2      	movs	r2, #242	; 0xf2
 8008d52:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e009      	b.n	8008d6c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a0b      	ldr	r2, [pc, #44]	; (8008d88 <lwip_netconn_is_err_msg+0x70>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d104      	bne.n	8008d6a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	22f1      	movs	r2, #241	; 0xf1
 8008d64:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	08017518 	.word	0x08017518
 8008d78:	08017584 	.word	0x08017584
 8008d7c:	0801755c 	.word	0x0801755c
 8008d80:	0801a750 	.word	0x0801a750
 8008d84:	0801a751 	.word	0x0801a751
 8008d88:	0801a752 	.word	0x0801a752

08008d8c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <recv_udp+0x20>
 8008da0:	4b34      	ldr	r3, [pc, #208]	; (8008e74 <recv_udp+0xe8>)
 8008da2:	22e5      	movs	r2, #229	; 0xe5
 8008da4:	4934      	ldr	r1, [pc, #208]	; (8008e78 <recv_udp+0xec>)
 8008da6:	4835      	ldr	r0, [pc, #212]	; (8008e7c <recv_udp+0xf0>)
 8008da8:	f00d f900 	bl	8015fac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <recv_udp+0x32>
 8008db2:	4b30      	ldr	r3, [pc, #192]	; (8008e74 <recv_udp+0xe8>)
 8008db4:	22e6      	movs	r2, #230	; 0xe6
 8008db6:	4932      	ldr	r1, [pc, #200]	; (8008e80 <recv_udp+0xf4>)
 8008db8:	4830      	ldr	r0, [pc, #192]	; (8008e7c <recv_udp+0xf0>)
 8008dba:	f00d f8f7 	bl	8015fac <iprintf>
  conn = (struct netconn *)arg;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d103      	bne.n	8008dd0 <recv_udp+0x44>
    pbuf_free(p);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f003 f8ef 	bl	800bfac <pbuf_free>
    return;
 8008dce:	e04d      	b.n	8008e6c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d005      	beq.n	8008de6 <recv_udp+0x5a>
 8008dda:	4b26      	ldr	r3, [pc, #152]	; (8008e74 <recv_udp+0xe8>)
 8008ddc:	22ee      	movs	r2, #238	; 0xee
 8008dde:	4929      	ldr	r1, [pc, #164]	; (8008e84 <recv_udp+0xf8>)
 8008de0:	4826      	ldr	r0, [pc, #152]	; (8008e7c <recv_udp+0xf0>)
 8008de2:	f00d f8e3 	bl	8015fac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	3310      	adds	r3, #16
 8008dea:	4618      	mov	r0, r3
 8008dec:	f00c fda8 	bl	8015940 <sys_mbox_valid>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f003 f8d8 	bl	800bfac <pbuf_free>
    return;
 8008dfc:	e036      	b.n	8008e6c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008dfe:	2006      	movs	r0, #6
 8008e00:	f002 f9de 	bl	800b1c0 <memp_malloc>
 8008e04:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d103      	bne.n	8008e14 <recv_udp+0x88>
    pbuf_free(p);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f003 f8cd 	bl	800bfac <pbuf_free>
    return;
 8008e12:	e02b      	b.n	8008e6c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <recv_udp+0xa0>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	e000      	b.n	8008e2e <recv_udp+0xa2>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008e36:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	891b      	ldrh	r3, [r3, #8]
 8008e3c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	3310      	adds	r3, #16
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f00c fd19 	bl	801587c <sys_mbox_trypost>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008e50:	69b8      	ldr	r0, [r7, #24]
 8008e52:	f001 faf7 	bl	800a444 <netbuf_delete>
    return;
 8008e56:	e009      	b.n	8008e6c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <recv_udp+0xe0>
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	8afa      	ldrh	r2, [r7, #22]
 8008e66:	2100      	movs	r1, #0
 8008e68:	69f8      	ldr	r0, [r7, #28]
 8008e6a:	4798      	blx	r3
  }
}
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08017518 	.word	0x08017518
 8008e78:	08017590 	.word	0x08017590
 8008e7c:	0801755c 	.word	0x0801755c
 8008e80:	080175b4 	.word	0x080175b4
 8008e84:	080175d4 	.word	0x080175d4

08008e88 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d106      	bne.n	8008eaa <recv_tcp+0x22>
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <recv_tcp+0xf0>)
 8008e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ea2:	4936      	ldr	r1, [pc, #216]	; (8008f7c <recv_tcp+0xf4>)
 8008ea4:	4836      	ldr	r0, [pc, #216]	; (8008f80 <recv_tcp+0xf8>)
 8008ea6:	f00d f881 	bl	8015fac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <recv_tcp+0x36>
 8008eb0:	4b31      	ldr	r3, [pc, #196]	; (8008f78 <recv_tcp+0xf0>)
 8008eb2:	f240 122d 	movw	r2, #301	; 0x12d
 8008eb6:	4933      	ldr	r1, [pc, #204]	; (8008f84 <recv_tcp+0xfc>)
 8008eb8:	4831      	ldr	r0, [pc, #196]	; (8008f80 <recv_tcp+0xf8>)
 8008eba:	f00d f877 	bl	8015fac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <recv_tcp+0x4c>
 8008ec6:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <recv_tcp+0xf0>)
 8008ec8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008ecc:	492e      	ldr	r1, [pc, #184]	; (8008f88 <recv_tcp+0x100>)
 8008ece:	482c      	ldr	r0, [pc, #176]	; (8008f80 <recv_tcp+0xf8>)
 8008ed0:	f00d f86c 	bl	8015fac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <recv_tcp+0x5c>
    return ERR_VAL;
 8008ede:	f06f 0305 	mvn.w	r3, #5
 8008ee2:	e045      	b.n	8008f70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d006      	beq.n	8008efc <recv_tcp+0x74>
 8008eee:	4b22      	ldr	r3, [pc, #136]	; (8008f78 <recv_tcp+0xf0>)
 8008ef0:	f240 1235 	movw	r2, #309	; 0x135
 8008ef4:	4925      	ldr	r1, [pc, #148]	; (8008f8c <recv_tcp+0x104>)
 8008ef6:	4822      	ldr	r0, [pc, #136]	; (8008f80 <recv_tcp+0xf8>)
 8008ef8:	f00d f858 	bl	8015fac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	3310      	adds	r3, #16
 8008f00:	4618      	mov	r0, r3
 8008f02:	f00c fd1d 	bl	8015940 <sys_mbox_valid>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10d      	bne.n	8008f28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d008      	beq.n	8008f24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	891b      	ldrh	r3, [r3, #8]
 8008f16:	4619      	mov	r1, r3
 8008f18:	68b8      	ldr	r0, [r7, #8]
 8008f1a:	f003 ff35 	bl	800cd88 <tcp_recved>
      pbuf_free(p);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f003 f844 	bl	800bfac <pbuf_free>
    }
    return ERR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e023      	b.n	8008f70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <recv_tcp+0xb2>
    msg = p;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	891b      	ldrh	r3, [r3, #8]
 8008f36:	83fb      	strh	r3, [r7, #30]
 8008f38:	e003      	b.n	8008f42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <recv_tcp+0x108>)
 8008f3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	3310      	adds	r3, #16
 8008f46:	69b9      	ldr	r1, [r7, #24]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f00c fc97 	bl	801587c <sys_mbox_trypost>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295
 8008f58:	e00a      	b.n	8008f70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <recv_tcp+0xe6>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	8bfa      	ldrh	r2, [r7, #30]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	4798      	blx	r3
  }

  return ERR_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	08017518 	.word	0x08017518
 8008f7c:	080175f4 	.word	0x080175f4
 8008f80:	0801755c 	.word	0x0801755c
 8008f84:	08017618 	.word	0x08017618
 8008f88:	08017638 	.word	0x08017638
 8008f8c:	08017650 	.word	0x08017650
 8008f90:	0801a752 	.word	0x0801a752

08008f94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <poll_tcp+0x22>
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <poll_tcp+0xbc>)
 8008faa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008fae:	4929      	ldr	r1, [pc, #164]	; (8009054 <poll_tcp+0xc0>)
 8008fb0:	4829      	ldr	r0, [pc, #164]	; (8009058 <poll_tcp+0xc4>)
 8008fb2:	f00c fffb 	bl	8015fac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d104      	bne.n	8008fc8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 ff5b 	bl	8009e7c <lwip_netconn_do_writemore>
 8008fc6:	e016      	b.n	8008ff6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d112      	bne.n	8008ff6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <poll_tcp+0x5a>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	7a5b      	ldrb	r3, [r3, #9]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	7a5a      	ldrb	r2, [r3, #9]
 8008fe8:	3a01      	subs	r2, #1
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb3b 	bl	800966c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7f1b      	ldrb	r3, [r3, #28]
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d021      	beq.n	8009046 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01d      	beq.n	8009046 <poll_tcp+0xb2>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009012:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009016:	d316      	bcc.n	8009046 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009020:	2b04      	cmp	r3, #4
 8009022:	d810      	bhi.n	8009046 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	7f1b      	ldrb	r3, [r3, #28]
 8009028:	f023 0310 	bic.w	r3, r3, #16
 800902c:	b2da      	uxtb	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <poll_tcp+0xb2>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2200      	movs	r2, #0
 8009040:	2102      	movs	r1, #2
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	08017518 	.word	0x08017518
 8009054:	08017670 	.word	0x08017670
 8009058:	0801755c 	.word	0x0801755c

0800905c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <sent_tcp+0x26>
 8009074:	4b20      	ldr	r3, [pc, #128]	; (80090f8 <sent_tcp+0x9c>)
 8009076:	f240 1293 	movw	r2, #403	; 0x193
 800907a:	4920      	ldr	r1, [pc, #128]	; (80090fc <sent_tcp+0xa0>)
 800907c:	4820      	ldr	r0, [pc, #128]	; (8009100 <sent_tcp+0xa4>)
 800907e:	f00c ff95 	bl	8015fac <iprintf>

  if (conn) {
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d032      	beq.n	80090ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d104      	bne.n	800909a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009090:	2101      	movs	r1, #1
 8009092:	6978      	ldr	r0, [r7, #20]
 8009094:	f000 fef2 	bl	8009e7c <lwip_netconn_do_writemore>
 8009098:	e007      	b.n	80090aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d103      	bne.n	80090aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80090a2:	2101      	movs	r1, #1
 80090a4:	6978      	ldr	r0, [r7, #20]
 80090a6:	f000 fae1 	bl	800966c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01d      	beq.n	80090ee <sent_tcp+0x92>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80090be:	d316      	bcc.n	80090ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d810      	bhi.n	80090ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	7f1b      	ldrb	r3, [r3, #28]
 80090d0:	f023 0310 	bic.w	r3, r3, #16
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <sent_tcp+0x92>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	88fa      	ldrh	r2, [r7, #6]
 80090e8:	2102      	movs	r1, #2
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	08017518 	.word	0x08017518
 80090fc:	08017670 	.word	0x08017670
 8009100:	0801755c 	.word	0x0801755c

08009104 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <err_tcp+0x24>
 800911a:	4b5f      	ldr	r3, [pc, #380]	; (8009298 <err_tcp+0x194>)
 800911c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009120:	495e      	ldr	r1, [pc, #376]	; (800929c <err_tcp+0x198>)
 8009122:	485f      	ldr	r0, [pc, #380]	; (80092a0 <err_tcp+0x19c>)
 8009124:	f00c ff42 	bl	8015fac <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009128:	f00c fd14 	bl	8015b54 <sys_arch_protect>
 800912c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	2200      	movs	r2, #0
 8009132:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	7f1b      	ldrb	r3, [r3, #28]
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	2200      	movs	r2, #0
 8009152:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009154:	69b8      	ldr	r0, [r7, #24]
 8009156:	f00c fd0b 	bl	8015b70 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <err_tcp+0x6a>
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	2200      	movs	r2, #0
 8009168:	2104      	movs	r1, #4
 800916a:	69f8      	ldr	r0, [r7, #28]
 800916c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <err_tcp+0x7e>
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	69f8      	ldr	r0, [r7, #28]
 8009180:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <err_tcp+0x92>
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	2200      	movs	r2, #0
 8009190:	2102      	movs	r1, #2
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fd86 	bl	8008cac <lwip_netconn_err_to_msg>
 80091a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3310      	adds	r3, #16
 80091a6:	4618      	mov	r0, r3
 80091a8:	f00c fbca 	bl	8015940 <sys_mbox_valid>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	3310      	adds	r3, #16
 80091b6:	6939      	ldr	r1, [r7, #16]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f00c fb5f 	bl	801587c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3314      	adds	r3, #20
 80091c2:	4618      	mov	r0, r3
 80091c4:	f00c fbbc 	bl	8015940 <sys_mbox_valid>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	3314      	adds	r3, #20
 80091d2:	6939      	ldr	r1, [r7, #16]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f00c fb51 	bl	801587c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d005      	beq.n	80091ec <err_tcp+0xe8>
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d002      	beq.n	80091ec <err_tcp+0xe8>
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d143      	bne.n	8009274 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	7f1b      	ldrb	r3, [r3, #28]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	7f1b      	ldrb	r3, [r3, #28]
 8009204:	f023 0304 	bic.w	r3, r3, #4
 8009208:	b2da      	uxtb	r2, r3
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d13b      	bne.n	800928c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <err_tcp+0x126>
 800921c:	4b1e      	ldr	r3, [pc, #120]	; (8009298 <err_tcp+0x194>)
 800921e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009222:	4920      	ldr	r1, [pc, #128]	; (80092a4 <err_tcp+0x1a0>)
 8009224:	481e      	ldr	r0, [pc, #120]	; (80092a0 <err_tcp+0x19c>)
 8009226:	f00c fec1 	bl	8015fac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b04      	cmp	r3, #4
 800922e:	d104      	bne.n	800923a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	2200      	movs	r2, #0
 8009236:	711a      	strb	r2, [r3, #4]
 8009238:	e003      	b.n	8009242 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	330c      	adds	r3, #12
 800924a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800924c:	68b8      	ldr	r0, [r7, #8]
 800924e:	f00c fc05 	bl	8015a5c <sys_sem_valid>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <err_tcp+0x162>
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <err_tcp+0x194>)
 800925a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800925e:	4912      	ldr	r1, [pc, #72]	; (80092a8 <err_tcp+0x1a4>)
 8009260:	480f      	ldr	r0, [pc, #60]	; (80092a0 <err_tcp+0x19c>)
 8009262:	f00c fea3 	bl	8015fac <iprintf>
      conn->current_msg = NULL;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2200      	movs	r2, #0
 800926a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800926c:	68b8      	ldr	r0, [r7, #8]
 800926e:	f00c fbdb 	bl	8015a28 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009272:	e00b      	b.n	800928c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <err_tcp+0x18a>
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <err_tcp+0x194>)
 800927e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009282:	490a      	ldr	r1, [pc, #40]	; (80092ac <err_tcp+0x1a8>)
 8009284:	4806      	ldr	r0, [pc, #24]	; (80092a0 <err_tcp+0x19c>)
 8009286:	f00c fe91 	bl	8015fac <iprintf>
  }
}
 800928a:	e000      	b.n	800928e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800928c:	bf00      	nop
}
 800928e:	bf00      	nop
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	08017518 	.word	0x08017518
 800929c:	08017670 	.word	0x08017670
 80092a0:	0801755c 	.word	0x0801755c
 80092a4:	08017680 	.word	0x08017680
 80092a8:	0801769c 	.word	0x0801769c
 80092ac:	080176b8 	.word	0x080176b8

080092b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f004 fd3f 	bl	800dd44 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80092c6:	490a      	ldr	r1, [pc, #40]	; (80092f0 <setup_tcp+0x40>)
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f004 fd4d 	bl	800dd68 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80092ce:	4909      	ldr	r1, [pc, #36]	; (80092f4 <setup_tcp+0x44>)
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f004 fd6b 	bl	800ddac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80092d6:	2202      	movs	r2, #2
 80092d8:	4907      	ldr	r1, [pc, #28]	; (80092f8 <setup_tcp+0x48>)
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f004 fdc2 	bl	800de64 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80092e0:	4906      	ldr	r1, [pc, #24]	; (80092fc <setup_tcp+0x4c>)
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f004 fd84 	bl	800ddf0 <tcp_err>
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	08008e89 	.word	0x08008e89
 80092f4:	0800905d 	.word	0x0800905d
 80092f8:	08008f95 	.word	0x08008f95
 80092fc:	08009105 	.word	0x08009105

08009300 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009300:	b590      	push	{r4, r7, lr}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <pcb_new+0x24>
 8009316:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <pcb_new+0xc4>)
 8009318:	f240 2265 	movw	r2, #613	; 0x265
 800931c:	492a      	ldr	r1, [pc, #168]	; (80093c8 <pcb_new+0xc8>)
 800931e:	482b      	ldr	r0, [pc, #172]	; (80093cc <pcb_new+0xcc>)
 8009320:	f00c fe44 	bl	8015fac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800932e:	2b10      	cmp	r3, #16
 8009330:	d022      	beq.n	8009378 <pcb_new+0x78>
 8009332:	2b20      	cmp	r3, #32
 8009334:	d133      	bne.n	800939e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681c      	ldr	r4, [r3, #0]
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4618      	mov	r0, r3
 800933e:	f009 fe4a 	bl	8012fd6 <udp_new_ip_type>
 8009342:	4603      	mov	r3, r0
 8009344:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d02a      	beq.n	80093a6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b22      	cmp	r3, #34	; 0x22
 8009358:	d104      	bne.n	8009364 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6858      	ldr	r0, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	4917      	ldr	r1, [pc, #92]	; (80093d0 <pcb_new+0xd0>)
 8009372:	f009 fdb7 	bl	8012ee4 <udp_recv>
      }
      break;
 8009376:	e016      	b.n	80093a6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681c      	ldr	r4, [r3, #0]
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	4618      	mov	r0, r3
 8009380:	f004 fcd2 	bl	800dd28 <tcp_new_ip_type>
 8009384:	4603      	mov	r3, r0
 8009386:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff ff8a 	bl	80092b0 <setup_tcp>
      }
      break;
 800939c:	e005      	b.n	80093aa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	22fa      	movs	r2, #250	; 0xfa
 80093a2:	711a      	strb	r2, [r3, #4]
      return;
 80093a4:	e00a      	b.n	80093bc <pcb_new+0xbc>
      break;
 80093a6:	bf00      	nop
 80093a8:	e000      	b.n	80093ac <pcb_new+0xac>
      break;
 80093aa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	22ff      	movs	r2, #255	; 0xff
 80093ba:	711a      	strb	r2, [r3, #4]
  }
}
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd90      	pop	{r4, r7, pc}
 80093c2:	bf00      	nop
 80093c4:	08017518 	.word	0x08017518
 80093c8:	080176fc 	.word	0x080176fc
 80093cc:	0801755c 	.word	0x0801755c
 80093d0:	08008d8d 	.word	0x08008d8d

080093d4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff ff85 	bl	8009300 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009410:	2007      	movs	r0, #7
 8009412:	f001 fed5 	bl	800b1c0 <memp_malloc>
 8009416:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <netconn_alloc+0x22>
    return NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	e052      	b.n	80094c8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	79fa      	ldrb	r2, [r7, #7]
 800942c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800943a:	2b10      	cmp	r3, #16
 800943c:	d004      	beq.n	8009448 <netconn_alloc+0x48>
 800943e:	2b20      	cmp	r3, #32
 8009440:	d105      	bne.n	800944e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009442:	2306      	movs	r3, #6
 8009444:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009446:	e00a      	b.n	800945e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009448:	2306      	movs	r3, #6
 800944a:	617b      	str	r3, [r7, #20]
      break;
 800944c:	e007      	b.n	800945e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800944e:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <netconn_alloc+0xd0>)
 8009450:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009454:	491f      	ldr	r1, [pc, #124]	; (80094d4 <netconn_alloc+0xd4>)
 8009456:	4820      	ldr	r0, [pc, #128]	; (80094d8 <netconn_alloc+0xd8>)
 8009458:	f00c fda8 	bl	8015fac <iprintf>
      goto free_and_return;
 800945c:	e02f      	b.n	80094be <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3310      	adds	r3, #16
 8009462:	6979      	ldr	r1, [r7, #20]
 8009464:	4618      	mov	r0, r3
 8009466:	f00c f9dd 	bl	8015824 <sys_mbox_new>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d125      	bne.n	80094bc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	330c      	adds	r3, #12
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f00c fa80 	bl	801597c <sys_sem_new>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3310      	adds	r3, #16
 8009486:	4618      	mov	r0, r3
 8009488:	f00c f9e6 	bl	8015858 <sys_mbox_free>
    goto free_and_return;
 800948c:	e017      	b.n	80094be <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3314      	adds	r3, #20
 8009492:	4618      	mov	r0, r3
 8009494:	f00c fa65 	bl	8015962 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f04f 32ff 	mov.w	r2, #4294967295
 80094a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	7cfa      	ldrb	r2, [r7, #19]
 80094b6:	771a      	strb	r2, [r3, #28]
  return conn;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	e005      	b.n	80094c8 <netconn_alloc+0xc8>
    goto free_and_return;
 80094bc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	2007      	movs	r0, #7
 80094c2:	f001 fecf 	bl	800b264 <memp_free>
  return NULL;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	08017518 	.word	0x08017518
 80094d4:	0801771c 	.word	0x0801771c
 80094d8:	0801755c 	.word	0x0801755c

080094dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <netconn_free+0x1e>
 80094ec:	4b1b      	ldr	r3, [pc, #108]	; (800955c <netconn_free+0x80>)
 80094ee:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80094f2:	491b      	ldr	r1, [pc, #108]	; (8009560 <netconn_free+0x84>)
 80094f4:	481b      	ldr	r0, [pc, #108]	; (8009564 <netconn_free+0x88>)
 80094f6:	f00c fd59 	bl	8015fac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3310      	adds	r3, #16
 80094fe:	4618      	mov	r0, r3
 8009500:	f00c fa1e 	bl	8015940 <sys_mbox_valid>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d006      	beq.n	8009518 <netconn_free+0x3c>
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <netconn_free+0x80>)
 800950c:	f240 3223 	movw	r2, #803	; 0x323
 8009510:	4915      	ldr	r1, [pc, #84]	; (8009568 <netconn_free+0x8c>)
 8009512:	4814      	ldr	r0, [pc, #80]	; (8009564 <netconn_free+0x88>)
 8009514:	f00c fd4a 	bl	8015fac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3314      	adds	r3, #20
 800951c:	4618      	mov	r0, r3
 800951e:	f00c fa0f 	bl	8015940 <sys_mbox_valid>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d006      	beq.n	8009536 <netconn_free+0x5a>
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <netconn_free+0x80>)
 800952a:	f240 3226 	movw	r2, #806	; 0x326
 800952e:	490f      	ldr	r1, [pc, #60]	; (800956c <netconn_free+0x90>)
 8009530:	480c      	ldr	r0, [pc, #48]	; (8009564 <netconn_free+0x88>)
 8009532:	f00c fd3b 	bl	8015fac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	330c      	adds	r3, #12
 800953a:	4618      	mov	r0, r3
 800953c:	f00c fa81 	bl	8015a42 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	330c      	adds	r3, #12
 8009544:	4618      	mov	r0, r3
 8009546:	f00c fa9a 	bl	8015a7e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	2007      	movs	r0, #7
 800954e:	f001 fe89 	bl	800b264 <memp_free>
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	08017518 	.word	0x08017518
 8009560:	08017744 	.word	0x08017744
 8009564:	0801755c 	.word	0x0801755c
 8009568:	08017774 	.word	0x08017774
 800956c:	080177b0 	.word	0x080177b0

08009570 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3310      	adds	r3, #16
 800957c:	4618      	mov	r0, r3
 800957e:	f00c f9df 	bl	8015940 <sys_mbox_valid>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d02f      	beq.n	80095e8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009588:	e018      	b.n	80095bc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009592:	2b10      	cmp	r3, #16
 8009594:	d10e      	bne.n	80095b4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f107 020f 	add.w	r2, r7, #15
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fbba 	bl	8008d18 <lwip_netconn_is_err_msg>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d108      	bne.n	80095bc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f002 fcfd 	bl	800bfac <pbuf_free>
 80095b2:	e003      	b.n	80095bc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 ff44 	bl	800a444 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3310      	adds	r3, #16
 80095c0:	f107 0210 	add.w	r2, r7, #16
 80095c4:	4611      	mov	r1, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f00c f9a3 	bl	8015912 <sys_arch_mbox_tryfetch>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d1da      	bne.n	800958a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3310      	adds	r3, #16
 80095d8:	4618      	mov	r0, r3
 80095da:	f00c f93d 	bl	8015858 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3310      	adds	r3, #16
 80095e2:	4618      	mov	r0, r3
 80095e4:	f00c f9bd 	bl	8015962 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3314      	adds	r3, #20
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00c f9a7 	bl	8015940 <sys_mbox_valid>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d034      	beq.n	8009662 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80095f8:	e01d      	b.n	8009636 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f107 020e 	add.w	r2, r7, #14
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fb88 	bl	8008d18 <lwip_netconn_is_err_msg>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d113      	bne.n	8009636 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009612:	6978      	ldr	r0, [r7, #20]
 8009614:	f7ff ffac 	bl	8009570 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4618      	mov	r0, r3
 8009626:	f003 fab1 	bl	800cb8c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2200      	movs	r2, #0
 800962e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009630:	6978      	ldr	r0, [r7, #20]
 8009632:	f7ff ff53 	bl	80094dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3314      	adds	r3, #20
 800963a:	f107 0210 	add.w	r2, r7, #16
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f00c f966 	bl	8015912 <sys_arch_mbox_tryfetch>
 8009646:	4603      	mov	r3, r0
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d1d5      	bne.n	80095fa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3314      	adds	r3, #20
 8009652:	4618      	mov	r0, r3
 8009654:	f00c f900 	bl	8015858 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3314      	adds	r3, #20
 800965c:	4618      	mov	r0, r3
 800965e:	f00c f980 	bl	8015962 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009662:	bf00      	nop
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <lwip_netconn_do_close_internal+0x24>
 8009682:	4ba1      	ldr	r3, [pc, #644]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 8009684:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009688:	49a0      	ldr	r1, [pc, #640]	; (800990c <lwip_netconn_do_close_internal+0x2a0>)
 800968a:	48a1      	ldr	r0, [pc, #644]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 800968c:	f00c fc8e 	bl	8015fac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009698:	2b10      	cmp	r3, #16
 800969a:	d006      	beq.n	80096aa <lwip_netconn_do_close_internal+0x3e>
 800969c:	4b9a      	ldr	r3, [pc, #616]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 800969e:	f240 32a3 	movw	r2, #931	; 0x3a3
 80096a2:	499c      	ldr	r1, [pc, #624]	; (8009914 <lwip_netconn_do_close_internal+0x2a8>)
 80096a4:	489a      	ldr	r0, [pc, #616]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80096a6:	f00c fc81 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d006      	beq.n	80096c0 <lwip_netconn_do_close_internal+0x54>
 80096b2:	4b95      	ldr	r3, [pc, #596]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 80096b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80096b8:	4997      	ldr	r1, [pc, #604]	; (8009918 <lwip_netconn_do_close_internal+0x2ac>)
 80096ba:	4895      	ldr	r0, [pc, #596]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80096bc:	f00c fc76 	bl	8015fac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <lwip_netconn_do_close_internal+0x6a>
 80096c8:	4b8f      	ldr	r3, [pc, #572]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 80096ca:	f240 32a5 	movw	r2, #933	; 0x3a5
 80096ce:	4993      	ldr	r1, [pc, #588]	; (800991c <lwip_netconn_do_close_internal+0x2b0>)
 80096d0:	488f      	ldr	r0, [pc, #572]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80096d2:	f00c fc6b 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <lwip_netconn_do_close_internal+0x80>
 80096de:	4b8a      	ldr	r3, [pc, #552]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 80096e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80096e4:	498e      	ldr	r1, [pc, #568]	; (8009920 <lwip_netconn_do_close_internal+0x2b4>)
 80096e6:	488a      	ldr	r0, [pc, #552]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80096e8:	f00c fc60 	bl	8015fac <iprintf>

  tpcb = conn->pcb.tcp;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	7a1b      	ldrb	r3, [r3, #8]
 80096f8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d102      	bne.n	8009716 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009710:	2301      	movs	r3, #1
 8009712:	75bb      	strb	r3, [r7, #22]
 8009714:	e01f      	b.n	8009756 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00e      	beq.n	800973a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009720:	2b05      	cmp	r3, #5
 8009722:	d007      	beq.n	8009734 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009728:	2b06      	cmp	r3, #6
 800972a:	d003      	beq.n	8009734 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009730:	2b08      	cmp	r3, #8
 8009732:	d102      	bne.n	800973a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	75bb      	strb	r3, [r7, #22]
 8009738:	e00d      	b.n	8009756 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800973a:	7b7b      	ldrb	r3, [r7, #13]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <lwip_netconn_do_close_internal+0xe6>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	8b5b      	ldrh	r3, [r3, #26]
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800974c:	2301      	movs	r3, #1
 800974e:	75bb      	strb	r3, [r7, #22]
 8009750:	e001      	b.n	8009756 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009756:	7dbb      	ldrb	r3, [r7, #22]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800975c:	2100      	movs	r1, #0
 800975e:	6938      	ldr	r0, [r7, #16]
 8009760:	f004 faf0 	bl	800dd44 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	7d1b      	ldrb	r3, [r3, #20]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d104      	bne.n	8009776 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800976c:	2100      	movs	r1, #0
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f004 fb60 	bl	800de34 <tcp_accept>
 8009774:	e01d      	b.n	80097b2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800977c:	2100      	movs	r1, #0
 800977e:	6938      	ldr	r0, [r7, #16]
 8009780:	f004 faf2 	bl	800dd68 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009784:	2100      	movs	r1, #0
 8009786:	6938      	ldr	r0, [r7, #16]
 8009788:	f004 fb54 	bl	800de34 <tcp_accept>
    }
    if (shut_tx) {
 800978c:	7b7b      	ldrb	r3, [r7, #13]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009792:	2100      	movs	r1, #0
 8009794:	6938      	ldr	r0, [r7, #16]
 8009796:	f004 fb09 	bl	800ddac <tcp_sent>
    }
    if (shut_close) {
 800979a:	7dbb      	ldrb	r3, [r7, #22]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d008      	beq.n	80097b2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80097a0:	2200      	movs	r2, #0
 80097a2:	2100      	movs	r1, #0
 80097a4:	6938      	ldr	r0, [r7, #16]
 80097a6:	f004 fb5d 	bl	800de64 <tcp_poll>
      tcp_err(tpcb, NULL);
 80097aa:	2100      	movs	r1, #0
 80097ac:	6938      	ldr	r0, [r7, #16]
 80097ae:	f004 fb1f 	bl	800ddf0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80097b2:	7dbb      	ldrb	r3, [r7, #22]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f003 f8a1 	bl	800c900 <tcp_close>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
 80097c2:	e007      	b.n	80097d4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	7b7a      	ldrb	r2, [r7, #13]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6938      	ldr	r0, [r7, #16]
 80097cc:	f003 f8c4 	bl	800c958 <tcp_shutdown>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80097d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	757b      	strb	r3, [r7, #21]
 80097e0:	e016      	b.n	8009810 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80097e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d10f      	bne.n	800980c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	7a5b      	ldrb	r3, [r3, #9]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10c      	bne.n	8009810 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80097f6:	2301      	movs	r3, #1
 80097f8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80097fa:	7dbb      	ldrb	r3, [r7, #22]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009800:	6938      	ldr	r0, [r7, #16]
 8009802:	f003 f9c3 	bl	800cb8c <tcp_abort>
          err = ERR_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]
 800980a:	e001      	b.n	8009810 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800980c:	2301      	movs	r3, #1
 800980e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009810:	7d7b      	ldrb	r3, [r7, #21]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d044      	beq.n	80098a0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	7dfa      	ldrb	r2, [r7, #23]
 8009826:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d129      	bne.n	8009890 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800983c:	7dbb      	ldrb	r3, [r7, #22]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00c      	beq.n	800985c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <lwip_netconn_do_close_internal+0x1f0>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2200      	movs	r2, #0
 8009856:	2104      	movs	r1, #4
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	4798      	blx	r3
      }
      if (shut_rx) {
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d005      	beq.n	8009876 <lwip_netconn_do_close_internal+0x20a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2200      	movs	r2, #0
 8009870:	2100      	movs	r1, #0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
      }
      if (shut_tx) {
 8009876:	7b7b      	ldrb	r3, [r7, #13]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <lwip_netconn_do_close_internal+0x224>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2200      	movs	r2, #0
 800988a:	2102      	movs	r1, #2
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009896:	68b8      	ldr	r0, [r7, #8]
 8009898:	f00c f8c6 	bl	8015a28 <sys_sem_signal>
    }
    return ERR_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	e02e      	b.n	80098fe <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80098a0:	7d7b      	ldrb	r3, [r7, #21]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d11e      	bne.n	80098e4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	7d1b      	ldrb	r3, [r3, #20]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d106      	bne.n	80098bc <lwip_netconn_do_close_internal+0x250>
 80098ae:	4b16      	ldr	r3, [pc, #88]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 80098b0:	f240 4241 	movw	r2, #1089	; 0x441
 80098b4:	491b      	ldr	r1, [pc, #108]	; (8009924 <lwip_netconn_do_close_internal+0x2b8>)
 80098b6:	4816      	ldr	r0, [pc, #88]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80098b8:	f00c fb78 	bl	8015fac <iprintf>
    if (shut_tx) {
 80098bc:	7b7b      	ldrb	r3, [r7, #13]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80098c2:	4919      	ldr	r1, [pc, #100]	; (8009928 <lwip_netconn_do_close_internal+0x2bc>)
 80098c4:	6938      	ldr	r0, [r7, #16]
 80098c6:	f004 fa71 	bl	800ddac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80098ca:	2201      	movs	r2, #1
 80098cc:	4917      	ldr	r1, [pc, #92]	; (800992c <lwip_netconn_do_close_internal+0x2c0>)
 80098ce:	6938      	ldr	r0, [r7, #16]
 80098d0:	f004 fac8 	bl	800de64 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80098d4:	4916      	ldr	r1, [pc, #88]	; (8009930 <lwip_netconn_do_close_internal+0x2c4>)
 80098d6:	6938      	ldr	r0, [r7, #16]
 80098d8:	f004 fa8a 	bl	800ddf0 <tcp_err>
    tcp_arg(tpcb, conn);
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	6938      	ldr	r0, [r7, #16]
 80098e0:	f004 fa30 	bl	800dd44 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80098e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d106      	bne.n	80098fa <lwip_netconn_do_close_internal+0x28e>
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <lwip_netconn_do_close_internal+0x29c>)
 80098ee:	f240 424d 	movw	r2, #1101	; 0x44d
 80098f2:	4910      	ldr	r1, [pc, #64]	; (8009934 <lwip_netconn_do_close_internal+0x2c8>)
 80098f4:	4806      	ldr	r0, [pc, #24]	; (8009910 <lwip_netconn_do_close_internal+0x2a4>)
 80098f6:	f00c fb59 	bl	8015fac <iprintf>
  return err;
 80098fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	08017518 	.word	0x08017518
 800990c:	080177ec 	.word	0x080177ec
 8009910:	0801755c 	.word	0x0801755c
 8009914:	080177fc 	.word	0x080177fc
 8009918:	0801781c 	.word	0x0801781c
 800991c:	08017840 	.word	0x08017840
 8009920:	08017680 	.word	0x08017680
 8009924:	08017854 	.word	0x08017854
 8009928:	0800905d 	.word	0x0800905d
 800992c:	08008f95 	.word	0x08008f95
 8009930:	08009105 	.word	0x08009105
 8009934:	08017878 	.word	0x08017878

08009938 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00d      	beq.n	800996e <lwip_netconn_do_delconn+0x36>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800995c:	2b10      	cmp	r3, #16
 800995e:	d006      	beq.n	800996e <lwip_netconn_do_delconn+0x36>
 8009960:	4b60      	ldr	r3, [pc, #384]	; (8009ae4 <lwip_netconn_do_delconn+0x1ac>)
 8009962:	f240 425e 	movw	r2, #1118	; 0x45e
 8009966:	4960      	ldr	r1, [pc, #384]	; (8009ae8 <lwip_netconn_do_delconn+0x1b0>)
 8009968:	4860      	ldr	r0, [pc, #384]	; (8009aec <lwip_netconn_do_delconn+0x1b4>)
 800996a:	f00c fb1f 	bl	8015fac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d005      	beq.n	8009980 <lwip_netconn_do_delconn+0x48>
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d002      	beq.n	8009980 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800997a:	7afb      	ldrb	r3, [r7, #11]
 800997c:	2b03      	cmp	r3, #3
 800997e:	d109      	bne.n	8009994 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	2b03      	cmp	r3, #3
 8009984:	d10a      	bne.n	800999c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	7f1b      	ldrb	r3, [r3, #28]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	22fb      	movs	r2, #251	; 0xfb
 8009998:	711a      	strb	r2, [r3, #4]
 800999a:	e097      	b.n	8009acc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d10d      	bne.n	80099be <lwip_netconn_do_delconn+0x86>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	7f1b      	ldrb	r3, [r3, #28]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <lwip_netconn_do_delconn+0x86>
 80099b0:	4b4c      	ldr	r3, [pc, #304]	; (8009ae4 <lwip_netconn_do_delconn+0x1ac>)
 80099b2:	f240 427a 	movw	r2, #1146	; 0x47a
 80099b6:	494e      	ldr	r1, [pc, #312]	; (8009af0 <lwip_netconn_do_delconn+0x1b8>)
 80099b8:	484c      	ldr	r0, [pc, #304]	; (8009aec <lwip_netconn_do_delconn+0x1b4>)
 80099ba:	f00c faf7 	bl	8015fac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fdd1 	bl	8009570 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d05f      	beq.n	8009a98 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e2:	2b10      	cmp	r3, #16
 80099e4:	d00d      	beq.n	8009a02 <lwip_netconn_do_delconn+0xca>
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d151      	bne.n	8009a8e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f009 fa92 	bl	8012f24 <udp_remove>
          break;
 8009a00:	e046      	b.n	8009a90 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d006      	beq.n	8009a1a <lwip_netconn_do_delconn+0xe2>
 8009a0c:	4b35      	ldr	r3, [pc, #212]	; (8009ae4 <lwip_netconn_do_delconn+0x1ac>)
 8009a0e:	f240 4294 	movw	r2, #1172	; 0x494
 8009a12:	4938      	ldr	r1, [pc, #224]	; (8009af4 <lwip_netconn_do_delconn+0x1bc>)
 8009a14:	4835      	ldr	r0, [pc, #212]	; (8009aec <lwip_netconn_do_delconn+0x1b4>)
 8009a16:	f00c fac9 	bl	8015fac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2203      	movs	r2, #3
 8009a26:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff fe18 	bl	800966c <lwip_netconn_do_close_internal>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d04b      	beq.n	8009ada <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	d006      	beq.n	8009a5a <lwip_netconn_do_delconn+0x122>
 8009a4c:	4b25      	ldr	r3, [pc, #148]	; (8009ae4 <lwip_netconn_do_delconn+0x1ac>)
 8009a4e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009a52:	4929      	ldr	r1, [pc, #164]	; (8009af8 <lwip_netconn_do_delconn+0x1c0>)
 8009a54:	4825      	ldr	r0, [pc, #148]	; (8009aec <lwip_netconn_do_delconn+0x1b4>)
 8009a56:	f00c faa9 	bl	8015fac <iprintf>
            UNLOCK_TCPIP_CORE();
 8009a5a:	4828      	ldr	r0, [pc, #160]	; (8009afc <lwip_netconn_do_delconn+0x1c4>)
 8009a5c:	f00c f84d 	bl	8015afa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f00b ffac 	bl	80159c6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009a6e:	4823      	ldr	r0, [pc, #140]	; (8009afc <lwip_netconn_do_delconn+0x1c4>)
 8009a70:	f00c f834 	bl	8015adc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d02d      	beq.n	8009ada <lwip_netconn_do_delconn+0x1a2>
 8009a7e:	4b19      	ldr	r3, [pc, #100]	; (8009ae4 <lwip_netconn_do_delconn+0x1ac>)
 8009a80:	f240 429e 	movw	r2, #1182	; 0x49e
 8009a84:	491c      	ldr	r1, [pc, #112]	; (8009af8 <lwip_netconn_do_delconn+0x1c0>)
 8009a86:	4819      	ldr	r0, [pc, #100]	; (8009aec <lwip_netconn_do_delconn+0x1b4>)
 8009a88:	f00c fa90 	bl	8015fac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009a8c:	e025      	b.n	8009ada <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009a8e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2200      	movs	r2, #0
 8009a96:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <lwip_netconn_do_delconn+0x17a>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	6810      	ldr	r0, [r2, #0]
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d007      	beq.n	8009acc <lwip_netconn_do_delconn+0x194>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	6810      	ldr	r0, [r2, #0]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2102      	movs	r1, #2
 8009aca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f00b ffc2 	bl	8015a5c <sys_sem_valid>
 8009ad8:	e000      	b.n	8009adc <lwip_netconn_do_delconn+0x1a4>
          return;
 8009ada:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08017518 	.word	0x08017518
 8009ae8:	08017888 	.word	0x08017888
 8009aec:	0801755c 	.word	0x0801755c
 8009af0:	0801789c 	.word	0x0801789c
 8009af4:	080178bc 	.word	0x080178bc
 8009af8:	080178d8 	.word	0x080178d8
 8009afc:	20007ecc 	.word	0x20007ecc

08009b00 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d025      	beq.n	8009b62 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b20:	2b10      	cmp	r3, #16
 8009b22:	d00e      	beq.n	8009b42 <lwip_netconn_do_bind+0x42>
 8009b24:	2b20      	cmp	r3, #32
 8009b26:	d119      	bne.n	8009b5c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6858      	ldr	r0, [r3, #4]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6899      	ldr	r1, [r3, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	899b      	ldrh	r3, [r3, #12]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f009 f8de 	bl	8012cf8 <udp_bind>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]
        break;
 8009b40:	e011      	b.n	8009b66 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6858      	ldr	r0, [r3, #4]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	6899      	ldr	r1, [r3, #8]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	899b      	ldrh	r3, [r3, #12]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f003 f827 	bl	800cba4 <tcp_bind>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
        break;
 8009b5a:	e004      	b.n	8009b66 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009b5c:	23fa      	movs	r3, #250	; 0xfa
 8009b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8009b60:	e001      	b.n	8009b66 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009b62:	23fa      	movs	r3, #250	; 0xfa
 8009b64:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009b90:	f06f 0305 	mvn.w	r3, #5
 8009b94:	e070      	b.n	8009c78 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d006      	beq.n	8009bac <lwip_netconn_do_connected+0x38>
 8009b9e:	4b38      	ldr	r3, [pc, #224]	; (8009c80 <lwip_netconn_do_connected+0x10c>)
 8009ba0:	f240 5223 	movw	r2, #1315	; 0x523
 8009ba4:	4937      	ldr	r1, [pc, #220]	; (8009c84 <lwip_netconn_do_connected+0x110>)
 8009ba6:	4838      	ldr	r0, [pc, #224]	; (8009c88 <lwip_netconn_do_connected+0x114>)
 8009ba8:	f00c fa00 	bl	8015fac <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10c      	bne.n	8009bce <lwip_netconn_do_connected+0x5a>
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	7f1b      	ldrb	r3, [r3, #28]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d106      	bne.n	8009bce <lwip_netconn_do_connected+0x5a>
 8009bc0:	4b2f      	ldr	r3, [pc, #188]	; (8009c80 <lwip_netconn_do_connected+0x10c>)
 8009bc2:	f240 5224 	movw	r2, #1316	; 0x524
 8009bc6:	4931      	ldr	r1, [pc, #196]	; (8009c8c <lwip_netconn_do_connected+0x118>)
 8009bc8:	482f      	ldr	r0, [pc, #188]	; (8009c88 <lwip_netconn_do_connected+0x114>)
 8009bca:	f00c f9ef 	bl	8015fac <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	79fa      	ldrb	r2, [r7, #7]
 8009bdc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bf0:	2b10      	cmp	r3, #16
 8009bf2:	d106      	bne.n	8009c02 <lwip_netconn_do_connected+0x8e>
 8009bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009bfc:	69b8      	ldr	r0, [r7, #24]
 8009bfe:	f7ff fb57 	bl	80092b0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	7f1b      	ldrb	r3, [r3, #28]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bf0c      	ite	eq
 8009c0e:	2301      	moveq	r3, #1
 8009c10:	2300      	movne	r3, #0
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	7f1b      	ldrb	r3, [r3, #28]
 8009c1a:	f023 0304 	bic.w	r3, r3, #4
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <lwip_netconn_do_connected+0xbc>
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10c      	bne.n	8009c4a <lwip_netconn_do_connected+0xd6>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <lwip_netconn_do_connected+0xc8>
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <lwip_netconn_do_connected+0xd6>
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <lwip_netconn_do_connected+0x10c>)
 8009c3e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009c42:	4913      	ldr	r1, [pc, #76]	; (8009c90 <lwip_netconn_do_connected+0x11c>)
 8009c44:	4810      	ldr	r0, [pc, #64]	; (8009c88 <lwip_netconn_do_connected+0x114>)
 8009c46:	f00c f9b1 	bl	8015fac <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2200      	movs	r2, #0
 8009c54:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <lwip_netconn_do_connected+0xf6>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2200      	movs	r2, #0
 8009c64:	2102      	movs	r1, #2
 8009c66:	69b8      	ldr	r0, [r7, #24]
 8009c68:	4798      	blx	r3

  if (was_blocking) {
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	f00b fed9 	bl	8015a28 <sys_sem_signal>
  }
  return ERR_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	08017518 	.word	0x08017518
 8009c84:	080178e0 	.word	0x080178e0
 8009c88:	0801755c 	.word	0x0801755c
 8009c8c:	08017900 	.word	0x08017900
 8009c90:	08017940 	.word	0x08017940

08009c94 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d102      	bne.n	8009cb0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009caa:	23f1      	movs	r3, #241	; 0xf1
 8009cac:	75fb      	strb	r3, [r7, #23]
 8009cae:	e09b      	b.n	8009de8 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cba:	2b10      	cmp	r3, #16
 8009cbc:	d00f      	beq.n	8009cde <lwip_netconn_do_connect+0x4a>
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	f040 8087 	bne.w	8009dd2 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6858      	ldr	r0, [r3, #4]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6899      	ldr	r1, [r3, #8]
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	899b      	ldrh	r3, [r3, #12]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f009 f898 	bl	8012e08 <udp_connect>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	75fb      	strb	r3, [r7, #23]
        break;
 8009cdc:	e084      	b.n	8009de8 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d102      	bne.n	8009cee <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009ce8:	23f7      	movs	r3, #247	; 0xf7
 8009cea:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009cec:	e07b      	b.n	8009de6 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009cf8:	23f6      	movs	r3, #246	; 0xf6
 8009cfa:	75fb      	strb	r3, [r7, #23]
        break;
 8009cfc:	e073      	b.n	8009de6 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fad4 	bl	80092b0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6858      	ldr	r0, [r3, #4]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6899      	ldr	r1, [r3, #8]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	899a      	ldrh	r2, [r3, #12]
 8009d16:	4b38      	ldr	r3, [pc, #224]	; (8009df8 <lwip_netconn_do_connect+0x164>)
 8009d18:	f003 f8cc 	bl	800ceb4 <tcp_connect>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d15e      	bne.n	8009de6 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	7f1b      	ldrb	r3, [r3, #28]
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf14      	ite	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2203      	movs	r2, #3
 8009d44:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <lwip_netconn_do_connect+0xcc>
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	7f1a      	ldrb	r2, [r3, #28]
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0204 	orr.w	r2, r2, #4
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	771a      	strb	r2, [r3, #28]
 8009d5e:	e008      	b.n	8009d72 <lwip_netconn_do_connect+0xde>
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	7f1a      	ldrb	r2, [r3, #28]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0204 	bic.w	r2, r2, #4
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009d78:	23fb      	movs	r3, #251	; 0xfb
 8009d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d7c:	e033      	b.n	8009de6 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d006      	beq.n	8009d9e <lwip_netconn_do_connect+0x10a>
 8009d90:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <lwip_netconn_do_connect+0x168>)
 8009d92:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009d96:	491a      	ldr	r1, [pc, #104]	; (8009e00 <lwip_netconn_do_connect+0x16c>)
 8009d98:	481a      	ldr	r0, [pc, #104]	; (8009e04 <lwip_netconn_do_connect+0x170>)
 8009d9a:	f00c f907 	bl	8015fac <iprintf>
              UNLOCK_TCPIP_CORE();
 8009d9e:	481a      	ldr	r0, [pc, #104]	; (8009e08 <lwip_netconn_do_connect+0x174>)
 8009da0:	f00b feab 	bl	8015afa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	330c      	adds	r3, #12
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f00b fe0a 	bl	80159c6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009db2:	4815      	ldr	r0, [pc, #84]	; (8009e08 <lwip_netconn_do_connect+0x174>)
 8009db4:	f00b fe92 	bl	8015adc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d116      	bne.n	8009df0 <lwip_netconn_do_connect+0x15c>
 8009dc2:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <lwip_netconn_do_connect+0x168>)
 8009dc4:	f240 5274 	movw	r2, #1396	; 0x574
 8009dc8:	490d      	ldr	r1, [pc, #52]	; (8009e00 <lwip_netconn_do_connect+0x16c>)
 8009dca:	480e      	ldr	r0, [pc, #56]	; (8009e04 <lwip_netconn_do_connect+0x170>)
 8009dcc:	f00c f8ee 	bl	8015fac <iprintf>
              return;
 8009dd0:	e00e      	b.n	8009df0 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <lwip_netconn_do_connect+0x168>)
 8009dd4:	f240 527d 	movw	r2, #1405	; 0x57d
 8009dd8:	490c      	ldr	r1, [pc, #48]	; (8009e0c <lwip_netconn_do_connect+0x178>)
 8009dda:	480a      	ldr	r0, [pc, #40]	; (8009e04 <lwip_netconn_do_connect+0x170>)
 8009ddc:	f00c f8e6 	bl	8015fac <iprintf>
 8009de0:	23fa      	movs	r3, #250	; 0xfa
 8009de2:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009de4:	e000      	b.n	8009de8 <lwip_netconn_do_connect+0x154>
        break;
 8009de6:	bf00      	nop
    }
  }
  msg->err = err;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	7dfa      	ldrb	r2, [r7, #23]
 8009dec:	711a      	strb	r2, [r3, #4]
 8009dee:	e000      	b.n	8009df2 <lwip_netconn_do_connect+0x15e>
              return;
 8009df0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	08009b75 	.word	0x08009b75
 8009dfc:	08017518 	.word	0x08017518
 8009e00:	080178d8 	.word	0x080178d8
 8009e04:	0801755c 	.word	0x0801755c
 8009e08:	20007ecc 	.word	0x20007ecc
 8009e0c:	08017960 	.word	0x08017960

08009e10 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d022      	beq.n	8009e72 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d11b      	bne.n	8009e72 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e46:	d202      	bcs.n	8009e4e <lwip_netconn_do_recv+0x3e>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	e001      	b.n	8009e52 <lwip_netconn_do_recv+0x42>
 8009e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e52:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	89fa      	ldrh	r2, [r7, #14]
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f002 ff92 	bl	800cd88 <tcp_recved>
        remaining -= recved;
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e6      	bne.n	8009e40 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e72:	bf00      	nop
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d106      	bne.n	8009ea0 <lwip_netconn_do_writemore+0x24>
 8009e92:	4b96      	ldr	r3, [pc, #600]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009e94:	f240 6273 	movw	r2, #1651	; 0x673
 8009e98:	4995      	ldr	r1, [pc, #596]	; (800a0f0 <lwip_netconn_do_writemore+0x274>)
 8009e9a:	4896      	ldr	r0, [pc, #600]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009e9c:	f00c f886 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	785b      	ldrb	r3, [r3, #1]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d006      	beq.n	8009eb6 <lwip_netconn_do_writemore+0x3a>
 8009ea8:	4b90      	ldr	r3, [pc, #576]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009eaa:	f240 6274 	movw	r2, #1652	; 0x674
 8009eae:	4992      	ldr	r1, [pc, #584]	; (800a0f8 <lwip_netconn_do_writemore+0x27c>)
 8009eb0:	4890      	ldr	r0, [pc, #576]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009eb2:	f00c f87b 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <lwip_netconn_do_writemore+0x50>
 8009ebe:	4b8b      	ldr	r3, [pc, #556]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009ec0:	f240 6275 	movw	r2, #1653	; 0x675
 8009ec4:	498d      	ldr	r1, [pc, #564]	; (800a0fc <lwip_netconn_do_writemore+0x280>)
 8009ec6:	488b      	ldr	r0, [pc, #556]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009ec8:	f00c f870 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d106      	bne.n	8009ee2 <lwip_netconn_do_writemore+0x66>
 8009ed4:	4b85      	ldr	r3, [pc, #532]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009ed6:	f240 6276 	movw	r2, #1654	; 0x676
 8009eda:	4989      	ldr	r1, [pc, #548]	; (800a100 <lwip_netconn_do_writemore+0x284>)
 8009edc:	4885      	ldr	r0, [pc, #532]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009ede:	f00c f865 	bl	8015fac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	699a      	ldr	r2, [r3, #24]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d306      	bcc.n	8009f00 <lwip_netconn_do_writemore+0x84>
 8009ef2:	4b7e      	ldr	r3, [pc, #504]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009ef4:	f240 6277 	movw	r2, #1655	; 0x677
 8009ef8:	4982      	ldr	r1, [pc, #520]	; (800a104 <lwip_netconn_do_writemore+0x288>)
 8009efa:	487e      	ldr	r0, [pc, #504]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009efc:	f00c f856 	bl	8015fac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <lwip_netconn_do_writemore+0x9c>
 8009f0a:	4b78      	ldr	r3, [pc, #480]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009f0c:	f240 6279 	movw	r2, #1657	; 0x679
 8009f10:	497d      	ldr	r1, [pc, #500]	; (800a108 <lwip_netconn_do_writemore+0x28c>)
 8009f12:	4878      	ldr	r0, [pc, #480]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009f14:	f00c f84a 	bl	8015fac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	7f1b      	ldrb	r3, [r3, #28]
 8009f1e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7f1b      	ldrb	r3, [r3, #28]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <lwip_netconn_do_writemore+0xba>
 8009f2c:	7ebb      	ldrb	r3, [r7, #26]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <lwip_netconn_do_writemore+0xbe>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <lwip_netconn_do_writemore+0xc0>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f68:	d307      	bcc.n	8009f7a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f6e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f70:	7ebb      	ldrb	r3, [r7, #26]
 8009f72:	f043 0302 	orr.w	r3, r3, #2
 8009f76:	76bb      	strb	r3, [r7, #26]
 8009f78:	e001      	b.n	8009f7e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f86:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f88:	89fa      	ldrh	r2, [r7, #14]
 8009f8a:	8bbb      	ldrh	r3, [r7, #28]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d216      	bcs.n	8009fbe <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009f90:	89fb      	ldrh	r3, [r7, #14]
 8009f92:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f94:	7e3b      	ldrb	r3, [r7, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009f9a:	8bbb      	ldrh	r3, [r7, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10e      	bne.n	8009fbe <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <lwip_netconn_do_writemore+0x134>
 8009faa:	f06f 0306 	mvn.w	r3, #6
 8009fae:	e000      	b.n	8009fb2 <lwip_netconn_do_writemore+0x136>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009fb4:	e07d      	b.n	800a0b2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009fb6:	7ebb      	ldrb	r3, [r7, #26]
 8009fb8:	f043 0302 	orr.w	r3, r3, #2
 8009fbc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	8bbb      	ldrh	r3, [r7, #28]
 8009fc6:	441a      	add	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d906      	bls.n	8009fe2 <lwip_netconn_do_writemore+0x166>
 8009fd4:	4b45      	ldr	r3, [pc, #276]	; (800a0ec <lwip_netconn_do_writemore+0x270>)
 8009fd6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009fda:	494c      	ldr	r1, [pc, #304]	; (800a10c <lwip_netconn_do_writemore+0x290>)
 8009fdc:	4845      	ldr	r0, [pc, #276]	; (800a0f4 <lwip_netconn_do_writemore+0x278>)
 8009fde:	f00b ffe5 	bl	8015fac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fe2:	8bbb      	ldrh	r3, [r7, #28]
 8009fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d103      	bne.n	8009ff4 <lwip_netconn_do_writemore+0x178>
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff2:	d209      	bcs.n	800a008 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009ff8:	8bba      	ldrh	r2, [r7, #28]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d10b      	bne.n	800a016 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	899b      	ldrh	r3, [r3, #12]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d906      	bls.n	800a016 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a008:	2301      	movs	r3, #1
 800a00a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a00c:	7ebb      	ldrb	r3, [r7, #26]
 800a00e:	f043 0302 	orr.w	r3, r3, #2
 800a012:	76bb      	strb	r3, [r7, #26]
 800a014:	e001      	b.n	800a01a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6858      	ldr	r0, [r3, #4]
 800a01e:	7ebb      	ldrb	r3, [r7, #26]
 800a020:	8bba      	ldrh	r2, [r7, #28]
 800a022:	6979      	ldr	r1, [r7, #20]
 800a024:	f006 fdcc 	bl	8010bc0 <tcp_write>
 800a028:	4603      	mov	r3, r0
 800a02a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a02c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d12c      	bne.n	800a08e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	6999      	ldr	r1, [r3, #24]
 800a03a:	8bba      	ldrh	r2, [r7, #28]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	440a      	add	r2, r1
 800a042:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	6919      	ldr	r1, [r3, #16]
 800a04a:	8bba      	ldrh	r2, [r7, #28]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	440a      	add	r2, r1
 800a052:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d113      	bne.n	800a08e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	899a      	ldrh	r2, [r3, #12]
 800a06c:	3a01      	subs	r2, #1
 800a06e:	b292      	uxth	r2, r2
 800a070:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	899b      	ldrh	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d008      	beq.n	800a08e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	3208      	adds	r2, #8
 800a084:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	2200      	movs	r2, #0
 800a08c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a08e:	7e7b      	ldrb	r3, [r7, #25]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <lwip_netconn_do_writemore+0x222>
 800a094:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f43f af50 	beq.w	8009f3e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a09e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <lwip_netconn_do_writemore+0x234>
 800a0a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d146      	bne.n	800a13e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a0b0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a0b2:	7e3b      	ldrb	r3, [r7, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d02b      	beq.n	800a110 <lwip_netconn_do_writemore+0x294>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d223      	bcs.n	800a110 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <lwip_netconn_do_writemore+0x260>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2103      	movs	r1, #3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7f1b      	ldrb	r3, [r3, #28]
 800a0e0:	f043 0310 	orr.w	r3, r3, #16
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	771a      	strb	r2, [r3, #28]
 800a0ea:	e028      	b.n	800a13e <lwip_netconn_do_writemore+0x2c2>
 800a0ec:	08017518 	.word	0x08017518
 800a0f0:	08017670 	.word	0x08017670
 800a0f4:	0801755c 	.word	0x0801755c
 800a0f8:	08017978 	.word	0x08017978
 800a0fc:	08017680 	.word	0x08017680
 800a100:	08017998 	.word	0x08017998
 800a104:	080179b0 	.word	0x080179b0
 800a108:	080179f0 	.word	0x080179f0
 800a10c:	08017a18 	.word	0x08017a18
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a118:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a11c:	d305      	bcc.n	800a12a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a126:	2b04      	cmp	r3, #4
 800a128:	d909      	bls.n	800a13e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <lwip_netconn_do_writemore+0x2c2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	2200      	movs	r2, #0
 800a138:	2103      	movs	r1, #3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a13e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d11d      	bne.n	800a182 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	699a      	ldr	r2, [r3, #24]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	429a      	cmp	r2, r3
 800a154:	d002      	beq.n	800a15c <lwip_netconn_do_writemore+0x2e0>
 800a156:	7e3b      	ldrb	r3, [r7, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	f007 fb15 	bl	8011794 <tcp_output>
 800a16a:	4603      	mov	r3, r0
 800a16c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a16e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a172:	f113 0f04 	cmn.w	r3, #4
 800a176:	d12c      	bne.n	800a1d2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a178:	7b3b      	ldrb	r3, [r7, #12]
 800a17a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	76fb      	strb	r3, [r7, #27]
 800a180:	e027      	b.n	800a1d2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a182:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d120      	bne.n	800a1ce <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	4618      	mov	r0, r3
 800a192:	f007 faff 	bl	8011794 <tcp_output>
 800a196:	4603      	mov	r3, r0
 800a198:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a19a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a19e:	f113 0f04 	cmn.w	r3, #4
 800a1a2:	d104      	bne.n	800a1ae <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a1a4:	7b7b      	ldrb	r3, [r7, #13]
 800a1a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	76fb      	strb	r3, [r7, #27]
 800a1ac:	e011      	b.n	800a1d2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a1ae:	7e3b      	ldrb	r3, [r7, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <lwip_netconn_do_writemore+0x348>
 800a1be:	f06f 0306 	mvn.w	r3, #6
 800a1c2:	e000      	b.n	800a1c6 <lwip_netconn_do_writemore+0x34a>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	76fb      	strb	r3, [r7, #27]
 800a1cc:	e001      	b.n	800a1d2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a1d2:	7efb      	ldrb	r3, [r7, #27]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d015      	beq.n	800a204 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	330c      	adds	r3, #12
 800a1e0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	7ffa      	ldrb	r2, [r7, #31]
 800a1e8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d006      	beq.n	800a20a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a1fc:	68b8      	ldr	r0, [r7, #8]
 800a1fe:	f00b fc13 	bl	8015a28 <sys_sem_signal>
 800a202:	e002      	b.n	800a20a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a204:	f04f 33ff 	mov.w	r3, #4294967295
 800a208:	e000      	b.n	800a20c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe fd26 	bl	8008c76 <netconn_err>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d166      	bne.n	800a304 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a240:	2b10      	cmp	r3, #16
 800a242:	d15d      	bne.n	800a300 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a24e:	23fb      	movs	r3, #251	; 0xfb
 800a250:	73fb      	strb	r3, [r7, #15]
 800a252:	e057      	b.n	800a304 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d04d      	beq.n	800a2fa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2201      	movs	r2, #1
 800a264:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <lwip_netconn_do_write+0x6a>
 800a270:	4b28      	ldr	r3, [pc, #160]	; (800a314 <lwip_netconn_do_write+0x100>)
 800a272:	f240 7223 	movw	r2, #1827	; 0x723
 800a276:	4928      	ldr	r1, [pc, #160]	; (800a318 <lwip_netconn_do_write+0x104>)
 800a278:	4828      	ldr	r0, [pc, #160]	; (800a31c <lwip_netconn_do_write+0x108>)
 800a27a:	f00b fe97 	bl	8015fac <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <lwip_netconn_do_write+0x80>
 800a286:	4b23      	ldr	r3, [pc, #140]	; (800a314 <lwip_netconn_do_write+0x100>)
 800a288:	f240 7224 	movw	r2, #1828	; 0x724
 800a28c:	4924      	ldr	r1, [pc, #144]	; (800a320 <lwip_netconn_do_write+0x10c>)
 800a28e:	4823      	ldr	r0, [pc, #140]	; (800a31c <lwip_netconn_do_write+0x108>)
 800a290:	f00b fe8c 	bl	8015fac <iprintf>
        msg->conn->current_msg = msg;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fdea 	bl	8009e7c <lwip_netconn_do_writemore>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d02e      	beq.n	800a30c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	785b      	ldrb	r3, [r3, #1]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d006      	beq.n	800a2c6 <lwip_netconn_do_write+0xb2>
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <lwip_netconn_do_write+0x100>)
 800a2ba:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a2be:	4919      	ldr	r1, [pc, #100]	; (800a324 <lwip_netconn_do_write+0x110>)
 800a2c0:	4816      	ldr	r0, [pc, #88]	; (800a31c <lwip_netconn_do_write+0x108>)
 800a2c2:	f00b fe73 	bl	8015fac <iprintf>
          UNLOCK_TCPIP_CORE();
 800a2c6:	4818      	ldr	r0, [pc, #96]	; (800a328 <lwip_netconn_do_write+0x114>)
 800a2c8:	f00b fc17 	bl	8015afa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00b fb76 	bl	80159c6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a2da:	4813      	ldr	r0, [pc, #76]	; (800a328 <lwip_netconn_do_write+0x114>)
 800a2dc:	f00b fbfe 	bl	8015adc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d110      	bne.n	800a30c <lwip_netconn_do_write+0xf8>
 800a2ea:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <lwip_netconn_do_write+0x100>)
 800a2ec:	f240 722c 	movw	r2, #1836	; 0x72c
 800a2f0:	490c      	ldr	r1, [pc, #48]	; (800a324 <lwip_netconn_do_write+0x110>)
 800a2f2:	480a      	ldr	r0, [pc, #40]	; (800a31c <lwip_netconn_do_write+0x108>)
 800a2f4:	f00b fe5a 	bl	8015fac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a2f8:	e008      	b.n	800a30c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a2fa:	23f5      	movs	r3, #245	; 0xf5
 800a2fc:	73fb      	strb	r3, [r7, #15]
 800a2fe:	e001      	b.n	800a304 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a300:	23fa      	movs	r3, #250	; 0xfa
 800a302:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	7bfa      	ldrb	r2, [r7, #15]
 800a308:	711a      	strb	r2, [r3, #4]
 800a30a:	e000      	b.n	800a30e <lwip_netconn_do_write+0xfa>
        return;
 800a30c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	08017518 	.word	0x08017518
 800a318:	080178bc 	.word	0x080178bc
 800a31c:	0801755c 	.word	0x0801755c
 800a320:	08017a44 	.word	0x08017a44
 800a324:	080178d8 	.word	0x080178d8
 800a328:	20007ecc 	.word	0x20007ecc

0800a32c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d069      	beq.n	800a41e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a354:	2b10      	cmp	r3, #16
 800a356:	d162      	bne.n	800a41e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d002      	beq.n	800a366 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d05b      	beq.n	800a41e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a366:	7afb      	ldrb	r3, [r7, #11]
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d103      	bne.n	800a374 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	22f5      	movs	r2, #245	; 0xf5
 800a370:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a372:	e059      	b.n	800a428 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d103      	bne.n	800a382 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	22fb      	movs	r2, #251	; 0xfb
 800a37e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a380:	e052      	b.n	800a428 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	7a1b      	ldrb	r3, [r3, #8]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d004      	beq.n	800a398 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f8ec 	bl	8009570 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <lwip_netconn_do_close+0x84>
 800a3a2:	4b23      	ldr	r3, [pc, #140]	; (800a430 <lwip_netconn_do_close+0x104>)
 800a3a4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a3a8:	4922      	ldr	r1, [pc, #136]	; (800a434 <lwip_netconn_do_close+0x108>)
 800a3aa:	4823      	ldr	r0, [pc, #140]	; (800a438 <lwip_netconn_do_close+0x10c>)
 800a3ac:	f00b fdfe 	bl	8015fac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff f950 	bl	800966c <lwip_netconn_do_close_internal>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d029      	beq.n	800a426 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d006      	beq.n	800a3ea <lwip_netconn_do_close+0xbe>
 800a3dc:	4b14      	ldr	r3, [pc, #80]	; (800a430 <lwip_netconn_do_close+0x104>)
 800a3de:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a3e2:	4916      	ldr	r1, [pc, #88]	; (800a43c <lwip_netconn_do_close+0x110>)
 800a3e4:	4814      	ldr	r0, [pc, #80]	; (800a438 <lwip_netconn_do_close+0x10c>)
 800a3e6:	f00b fde1 	bl	8015fac <iprintf>
        UNLOCK_TCPIP_CORE();
 800a3ea:	4815      	ldr	r0, [pc, #84]	; (800a440 <lwip_netconn_do_close+0x114>)
 800a3ec:	f00b fb85 	bl	8015afa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f00b fae4 	bl	80159c6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a3fe:	4810      	ldr	r0, [pc, #64]	; (800a440 <lwip_netconn_do_close+0x114>)
 800a400:	f00b fb6c 	bl	8015adc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <lwip_netconn_do_close+0xfa>
 800a40e:	4b08      	ldr	r3, [pc, #32]	; (800a430 <lwip_netconn_do_close+0x104>)
 800a410:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a414:	4909      	ldr	r1, [pc, #36]	; (800a43c <lwip_netconn_do_close+0x110>)
 800a416:	4808      	ldr	r0, [pc, #32]	; (800a438 <lwip_netconn_do_close+0x10c>)
 800a418:	f00b fdc8 	bl	8015fac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a41c:	e003      	b.n	800a426 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	22f5      	movs	r2, #245	; 0xf5
 800a422:	711a      	strb	r2, [r3, #4]
 800a424:	e000      	b.n	800a428 <lwip_netconn_do_close+0xfc>
      return;
 800a426:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	08017518 	.word	0x08017518
 800a434:	080178bc 	.word	0x080178bc
 800a438:	0801755c 	.word	0x0801755c
 800a43c:	080178d8 	.word	0x080178d8
 800a440:	20007ecc 	.word	0x20007ecc

0800a444 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d013      	beq.n	800a47a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00b      	beq.n	800a472 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 fda4 	bl	800bfac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	605a      	str	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	2006      	movs	r0, #6
 800a476:	f000 fef5 	bl	800b264 <memp_free>
  }
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
	...

0800a484 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d108      	bne.n	800a4a4 <netbuf_next+0x20>
 800a492:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <netbuf_next+0x54>)
 800a494:	22e0      	movs	r2, #224	; 0xe0
 800a496:	4911      	ldr	r1, [pc, #68]	; (800a4dc <netbuf_next+0x58>)
 800a498:	4811      	ldr	r0, [pc, #68]	; (800a4e0 <netbuf_next+0x5c>)
 800a49a:	f00b fd87 	bl	8015fac <iprintf>
 800a49e:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a2:	e014      	b.n	800a4ce <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <netbuf_next+0x30>
    return -1;
 800a4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b2:	e00c      	b.n	800a4ce <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <netbuf_next+0x48>
    return 1;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e000      	b.n	800a4ce <netbuf_next+0x4a>
  }
  return 0;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08017a70 	.word	0x08017a70
 800a4dc:	08017bd0 	.word	0x08017bd0
 800a4e0:	08017ac0 	.word	0x08017ac0

0800a4e4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a4ee:	f008 fa09 	bl	8012904 <sys_timeouts_sleeptime>
 800a4f2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fa:	d10b      	bne.n	800a514 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a4fc:	4813      	ldr	r0, [pc, #76]	; (800a54c <tcpip_timeouts_mbox_fetch+0x68>)
 800a4fe:	f00b fafc 	bl	8015afa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a502:	2200      	movs	r2, #0
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f00b f9d2 	bl	80158b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a50c:	480f      	ldr	r0, [pc, #60]	; (800a54c <tcpip_timeouts_mbox_fetch+0x68>)
 800a50e:	f00b fae5 	bl	8015adc <sys_mutex_lock>
    return;
 800a512:	e018      	b.n	800a546 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a51a:	f008 f9b9 	bl	8012890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a51e:	e7e6      	b.n	800a4ee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a520:	480a      	ldr	r0, [pc, #40]	; (800a54c <tcpip_timeouts_mbox_fetch+0x68>)
 800a522:	f00b faea 	bl	8015afa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f00b f9c0 	bl	80158b0 <sys_arch_mbox_fetch>
 800a530:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a532:	4806      	ldr	r0, [pc, #24]	; (800a54c <tcpip_timeouts_mbox_fetch+0x68>)
 800a534:	f00b fad2 	bl	8015adc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d102      	bne.n	800a546 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a540:	f008 f9a6 	bl	8012890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a544:	e7d3      	b.n	800a4ee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20007ecc 	.word	0x20007ecc

0800a550 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a558:	4810      	ldr	r0, [pc, #64]	; (800a59c <tcpip_thread+0x4c>)
 800a55a:	f00b fabf 	bl	8015adc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <tcpip_thread+0x50>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a566:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <tcpip_thread+0x50>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <tcpip_thread+0x54>)
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	4610      	mov	r0, r2
 800a570:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a572:	f107 030c 	add.w	r3, r7, #12
 800a576:	4619      	mov	r1, r3
 800a578:	480b      	ldr	r0, [pc, #44]	; (800a5a8 <tcpip_thread+0x58>)
 800a57a:	f7ff ffb3 	bl	800a4e4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a584:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <tcpip_thread+0x5c>)
 800a586:	2291      	movs	r2, #145	; 0x91
 800a588:	4909      	ldr	r1, [pc, #36]	; (800a5b0 <tcpip_thread+0x60>)
 800a58a:	480a      	ldr	r0, [pc, #40]	; (800a5b4 <tcpip_thread+0x64>)
 800a58c:	f00b fd0e 	bl	8015fac <iprintf>
      continue;
 800a590:	e003      	b.n	800a59a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4618      	mov	r0, r3
 800a596:	f000 f80f 	bl	800a5b8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a59a:	e7ea      	b.n	800a572 <tcpip_thread+0x22>
 800a59c:	20007ecc 	.word	0x20007ecc
 800a5a0:	20004a84 	.word	0x20004a84
 800a5a4:	20004a88 	.word	0x20004a88
 800a5a8:	20004a8c 	.word	0x20004a8c
 800a5ac:	08017c08 	.word	0x08017c08
 800a5b0:	08017c38 	.word	0x08017c38
 800a5b4:	08017c58 	.word	0x08017c58

0800a5b8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d026      	beq.n	800a616 <tcpip_thread_handle_msg+0x5e>
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	dc2b      	bgt.n	800a624 <tcpip_thread_handle_msg+0x6c>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <tcpip_thread_handle_msg+0x1e>
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d015      	beq.n	800a600 <tcpip_thread_handle_msg+0x48>
 800a5d4:	e026      	b.n	800a624 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6850      	ldr	r0, [r2, #4]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	6892      	ldr	r2, [r2, #8]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4798      	blx	r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fcdb 	bl	800bfac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	2009      	movs	r0, #9
 800a5fa:	f000 fe33 	bl	800b264 <memp_free>
      break;
 800a5fe:	e018      	b.n	800a632 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6892      	ldr	r2, [r2, #8]
 800a608:	4610      	mov	r0, r2
 800a60a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	2008      	movs	r0, #8
 800a610:	f000 fe28 	bl	800b264 <memp_free>
      break;
 800a614:	e00d      	b.n	800a632 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6892      	ldr	r2, [r2, #8]
 800a61e:	4610      	mov	r0, r2
 800a620:	4798      	blx	r3
      break;
 800a622:	e006      	b.n	800a632 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a624:	4b05      	ldr	r3, [pc, #20]	; (800a63c <tcpip_thread_handle_msg+0x84>)
 800a626:	22cf      	movs	r2, #207	; 0xcf
 800a628:	4905      	ldr	r1, [pc, #20]	; (800a640 <tcpip_thread_handle_msg+0x88>)
 800a62a:	4806      	ldr	r0, [pc, #24]	; (800a644 <tcpip_thread_handle_msg+0x8c>)
 800a62c:	f00b fcbe 	bl	8015fac <iprintf>
      break;
 800a630:	bf00      	nop
  }
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	08017c08 	.word	0x08017c08
 800a640:	08017c38 	.word	0x08017c38
 800a644:	08017c58 	.word	0x08017c58

0800a648 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a654:	481a      	ldr	r0, [pc, #104]	; (800a6c0 <tcpip_inpkt+0x78>)
 800a656:	f00b f973 	bl	8015940 <sys_mbox_valid>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <tcpip_inpkt+0x24>
 800a660:	4b18      	ldr	r3, [pc, #96]	; (800a6c4 <tcpip_inpkt+0x7c>)
 800a662:	22fc      	movs	r2, #252	; 0xfc
 800a664:	4918      	ldr	r1, [pc, #96]	; (800a6c8 <tcpip_inpkt+0x80>)
 800a666:	4819      	ldr	r0, [pc, #100]	; (800a6cc <tcpip_inpkt+0x84>)
 800a668:	f00b fca0 	bl	8015fac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a66c:	2009      	movs	r0, #9
 800a66e:	f000 fda7 	bl	800b1c0 <memp_malloc>
 800a672:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d102      	bne.n	800a680 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a67a:	f04f 33ff 	mov.w	r3, #4294967295
 800a67e:	e01a      	b.n	800a6b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a698:	6979      	ldr	r1, [r7, #20]
 800a69a:	4809      	ldr	r0, [pc, #36]	; (800a6c0 <tcpip_inpkt+0x78>)
 800a69c:	f00b f8ee 	bl	801587c <sys_mbox_trypost>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d006      	beq.n	800a6b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6a6:	6979      	ldr	r1, [r7, #20]
 800a6a8:	2009      	movs	r0, #9
 800a6aa:	f000 fddb 	bl	800b264 <memp_free>
    return ERR_MEM;
 800a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b2:	e000      	b.n	800a6b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a6b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20004a8c 	.word	0x20004a8c
 800a6c4:	08017c08 	.word	0x08017c08
 800a6c8:	08017c80 	.word	0x08017c80
 800a6cc:	08017c58 	.word	0x08017c58

0800a6d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6e0:	f003 0318 	and.w	r3, r3, #24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d006      	beq.n	800a6f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a6e8:	4a08      	ldr	r2, [pc, #32]	; (800a70c <tcpip_input+0x3c>)
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ffab 	bl	800a648 <tcpip_inpkt>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	e005      	b.n	800a702 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a6f6:	4a06      	ldr	r2, [pc, #24]	; (800a710 <tcpip_input+0x40>)
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff ffa4 	bl	800a648 <tcpip_inpkt>
 800a700:	4603      	mov	r3, r0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	08015679 	.word	0x08015679
 800a710:	08014339 	.word	0x08014339

0800a714 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a71e:	4819      	ldr	r0, [pc, #100]	; (800a784 <tcpip_try_callback+0x70>)
 800a720:	f00b f90e 	bl	8015940 <sys_mbox_valid>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <tcpip_try_callback+0x24>
 800a72a:	4b17      	ldr	r3, [pc, #92]	; (800a788 <tcpip_try_callback+0x74>)
 800a72c:	f240 125d 	movw	r2, #349	; 0x15d
 800a730:	4916      	ldr	r1, [pc, #88]	; (800a78c <tcpip_try_callback+0x78>)
 800a732:	4817      	ldr	r0, [pc, #92]	; (800a790 <tcpip_try_callback+0x7c>)
 800a734:	f00b fc3a 	bl	8015fac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a738:	2008      	movs	r0, #8
 800a73a:	f000 fd41 	bl	800b1c0 <memp_malloc>
 800a73e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295
 800a74a:	e017      	b.n	800a77c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2201      	movs	r2, #1
 800a750:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	4808      	ldr	r0, [pc, #32]	; (800a784 <tcpip_try_callback+0x70>)
 800a762:	f00b f88b 	bl	801587c <sys_mbox_trypost>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d006      	beq.n	800a77a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a76c:	68f9      	ldr	r1, [r7, #12]
 800a76e:	2008      	movs	r0, #8
 800a770:	f000 fd78 	bl	800b264 <memp_free>
    return ERR_MEM;
 800a774:	f04f 33ff 	mov.w	r3, #4294967295
 800a778:	e000      	b.n	800a77c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20004a8c 	.word	0x20004a8c
 800a788:	08017c08 	.word	0x08017c08
 800a78c:	08017c80 	.word	0x08017c80
 800a790:	08017c58 	.word	0x08017c58

0800a794 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a7a0:	4806      	ldr	r0, [pc, #24]	; (800a7bc <tcpip_send_msg_wait_sem+0x28>)
 800a7a2:	f00b f99b 	bl	8015adc <sys_mutex_lock>
  fn(apimsg);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a7ac:	4803      	ldr	r0, [pc, #12]	; (800a7bc <tcpip_send_msg_wait_sem+0x28>)
 800a7ae:	f00b f9a4 	bl	8015afa <sys_mutex_unlock>
  return ERR_OK;
 800a7b2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	20007ecc 	.word	0x20007ecc

0800a7c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a7ca:	f000 f871 	bl	800a8b0 <lwip_init>

  tcpip_init_done = initfunc;
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <tcpip_init+0x6c>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a7d4:	4a16      	ldr	r2, [pc, #88]	; (800a830 <tcpip_init+0x70>)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a7da:	2106      	movs	r1, #6
 800a7dc:	4815      	ldr	r0, [pc, #84]	; (800a834 <tcpip_init+0x74>)
 800a7de:	f00b f821 	bl	8015824 <sys_mbox_new>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d006      	beq.n	800a7f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a7e8:	4b13      	ldr	r3, [pc, #76]	; (800a838 <tcpip_init+0x78>)
 800a7ea:	f240 2261 	movw	r2, #609	; 0x261
 800a7ee:	4913      	ldr	r1, [pc, #76]	; (800a83c <tcpip_init+0x7c>)
 800a7f0:	4813      	ldr	r0, [pc, #76]	; (800a840 <tcpip_init+0x80>)
 800a7f2:	f00b fbdb 	bl	8015fac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a7f6:	4813      	ldr	r0, [pc, #76]	; (800a844 <tcpip_init+0x84>)
 800a7f8:	f00b f95a 	bl	8015ab0 <sys_mutex_new>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d006      	beq.n	800a810 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <tcpip_init+0x78>)
 800a804:	f240 2265 	movw	r2, #613	; 0x265
 800a808:	490f      	ldr	r1, [pc, #60]	; (800a848 <tcpip_init+0x88>)
 800a80a:	480d      	ldr	r0, [pc, #52]	; (800a840 <tcpip_init+0x80>)
 800a80c:	f00b fbce 	bl	8015fac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a810:	2318      	movs	r3, #24
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a818:	2200      	movs	r2, #0
 800a81a:	490c      	ldr	r1, [pc, #48]	; (800a84c <tcpip_init+0x8c>)
 800a81c:	480c      	ldr	r0, [pc, #48]	; (800a850 <tcpip_init+0x90>)
 800a81e:	f00b f979 	bl	8015b14 <sys_thread_new>
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20004a84 	.word	0x20004a84
 800a830:	20004a88 	.word	0x20004a88
 800a834:	20004a8c 	.word	0x20004a8c
 800a838:	08017c08 	.word	0x08017c08
 800a83c:	08017c90 	.word	0x08017c90
 800a840:	08017c58 	.word	0x08017c58
 800a844:	20007ecc 	.word	0x20007ecc
 800a848:	08017cb4 	.word	0x08017cb4
 800a84c:	0800a551 	.word	0x0800a551
 800a850:	08017cd8 	.word	0x08017cd8

0800a854 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	021b      	lsls	r3, r3, #8
 800a862:	b21a      	sxth	r2, r3
 800a864:	88fb      	ldrh	r3, [r7, #6]
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	b29b      	uxth	r3, r3
 800a86a:	b21b      	sxth	r3, r3
 800a86c:	4313      	orrs	r3, r2
 800a86e:	b21b      	sxth	r3, r3
 800a870:	b29b      	uxth	r3, r3
}
 800a872:	4618      	mov	r0, r3
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	061a      	lsls	r2, r3, #24
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a892:	431a      	orrs	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	0e1b      	lsrs	r3, r3, #24
 800a8a2:	4313      	orrs	r3, r2
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a8ba:	f00b f8ed 	bl	8015a98 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a8be:	f000 f8d5 	bl	800aa6c <mem_init>
  memp_init();
 800a8c2:	f000 fc31 	bl	800b128 <memp_init>
  pbuf_init();
  netif_init();
 800a8c6:	f000 fcf7 	bl	800b2b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a8ca:	f008 f853 	bl	8012974 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a8ce:	f001 fe07 	bl	800c4e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a8d2:	f007 ff95 	bl	8012800 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <ptr_to_mem+0x20>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	88fb      	ldrh	r3, [r7, #6]
 800a8f0:	4413      	add	r3, r2
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	20004a90 	.word	0x20004a90

0800a904 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <mem_to_ptr+0x20>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	b29b      	uxth	r3, r3
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	20004a90 	.word	0x20004a90

0800a928 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a928:	b590      	push	{r4, r7, lr}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a930:	4b45      	ldr	r3, [pc, #276]	; (800aa48 <plug_holes+0x120>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d206      	bcs.n	800a948 <plug_holes+0x20>
 800a93a:	4b44      	ldr	r3, [pc, #272]	; (800aa4c <plug_holes+0x124>)
 800a93c:	f240 12df 	movw	r2, #479	; 0x1df
 800a940:	4943      	ldr	r1, [pc, #268]	; (800aa50 <plug_holes+0x128>)
 800a942:	4844      	ldr	r0, [pc, #272]	; (800aa54 <plug_holes+0x12c>)
 800a944:	f00b fb32 	bl	8015fac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a948:	4b43      	ldr	r3, [pc, #268]	; (800aa58 <plug_holes+0x130>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d306      	bcc.n	800a960 <plug_holes+0x38>
 800a952:	4b3e      	ldr	r3, [pc, #248]	; (800aa4c <plug_holes+0x124>)
 800a954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a958:	4940      	ldr	r1, [pc, #256]	; (800aa5c <plug_holes+0x134>)
 800a95a:	483e      	ldr	r0, [pc, #248]	; (800aa54 <plug_holes+0x12c>)
 800a95c:	f00b fb26 	bl	8015fac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	791b      	ldrb	r3, [r3, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <plug_holes+0x4e>
 800a968:	4b38      	ldr	r3, [pc, #224]	; (800aa4c <plug_holes+0x124>)
 800a96a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a96e:	493c      	ldr	r1, [pc, #240]	; (800aa60 <plug_holes+0x138>)
 800a970:	4838      	ldr	r0, [pc, #224]	; (800aa54 <plug_holes+0x12c>)
 800a972:	f00b fb1b 	bl	8015fac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a97e:	d906      	bls.n	800a98e <plug_holes+0x66>
 800a980:	4b32      	ldr	r3, [pc, #200]	; (800aa4c <plug_holes+0x124>)
 800a982:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a986:	4937      	ldr	r1, [pc, #220]	; (800aa64 <plug_holes+0x13c>)
 800a988:	4832      	ldr	r0, [pc, #200]	; (800aa54 <plug_holes+0x12c>)
 800a98a:	f00b fb0f 	bl	8015fac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff ffa4 	bl	800a8e0 <ptr_to_mem>
 800a998:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d024      	beq.n	800a9ec <plug_holes+0xc4>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	791b      	ldrb	r3, [r3, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d120      	bne.n	800a9ec <plug_holes+0xc4>
 800a9aa:	4b2b      	ldr	r3, [pc, #172]	; (800aa58 <plug_holes+0x130>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d01b      	beq.n	800a9ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a9b4:	4b2c      	ldr	r3, [pc, #176]	; (800aa68 <plug_holes+0x140>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d102      	bne.n	800a9c4 <plug_holes+0x9c>
      lfree = mem;
 800a9be:	4a2a      	ldr	r2, [pc, #168]	; (800aa68 <plug_holes+0x140>)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	881a      	ldrh	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9d4:	d00a      	beq.n	800a9ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff ff80 	bl	800a8e0 <ptr_to_mem>
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ff8e 	bl	800a904 <mem_to_ptr>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff ff75 	bl	800a8e0 <ptr_to_mem>
 800a9f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d01f      	beq.n	800aa40 <plug_holes+0x118>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	791b      	ldrb	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d11b      	bne.n	800aa40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aa08:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <plug_holes+0x140>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d102      	bne.n	800aa18 <plug_holes+0xf0>
      lfree = pmem;
 800aa12:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <plug_holes+0x140>)
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	881a      	ldrh	r2, [r3, #0]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa28:	d00a      	beq.n	800aa40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff ff56 	bl	800a8e0 <ptr_to_mem>
 800aa34:	4604      	mov	r4, r0
 800aa36:	68b8      	ldr	r0, [r7, #8]
 800aa38:	f7ff ff64 	bl	800a904 <mem_to_ptr>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd90      	pop	{r4, r7, pc}
 800aa48:	20004a90 	.word	0x20004a90
 800aa4c:	08017ce8 	.word	0x08017ce8
 800aa50:	08017d18 	.word	0x08017d18
 800aa54:	08017d30 	.word	0x08017d30
 800aa58:	20004a94 	.word	0x20004a94
 800aa5c:	08017d58 	.word	0x08017d58
 800aa60:	08017d74 	.word	0x08017d74
 800aa64:	08017d90 	.word	0x08017d90
 800aa68:	20004a9c 	.word	0x20004a9c

0800aa6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aa72:	4b1f      	ldr	r3, [pc, #124]	; (800aaf0 <mem_init+0x84>)
 800aa74:	3303      	adds	r3, #3
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <mem_init+0x88>)
 800aa7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aa80:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <mem_init+0x88>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aa8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aa9a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800aa9e:	f7ff ff1f 	bl	800a8e0 <ptr_to_mem>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <mem_init+0x8c>)
 800aaa6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aaa8:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <mem_init+0x8c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2201      	movs	r2, #1
 800aaae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aab0:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <mem_init+0x8c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aab8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aaba:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <mem_init+0x8c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aac2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aac4:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <mem_init+0x88>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a0c      	ldr	r2, [pc, #48]	; (800aafc <mem_init+0x90>)
 800aaca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800aacc:	480c      	ldr	r0, [pc, #48]	; (800ab00 <mem_init+0x94>)
 800aace:	f00a ffef 	bl	8015ab0 <sys_mutex_new>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d006      	beq.n	800aae6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <mem_init+0x98>)
 800aada:	f240 221f 	movw	r2, #543	; 0x21f
 800aade:	490a      	ldr	r1, [pc, #40]	; (800ab08 <mem_init+0x9c>)
 800aae0:	480a      	ldr	r0, [pc, #40]	; (800ab0c <mem_init+0xa0>)
 800aae2:	f00b fa63 	bl	8015fac <iprintf>
  }
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20007ee8 	.word	0x20007ee8
 800aaf4:	20004a90 	.word	0x20004a90
 800aaf8:	20004a94 	.word	0x20004a94
 800aafc:	20004a9c 	.word	0x20004a9c
 800ab00:	20004a98 	.word	0x20004a98
 800ab04:	08017ce8 	.word	0x08017ce8
 800ab08:	08017dbc 	.word	0x08017dbc
 800ab0c:	08017d30 	.word	0x08017d30

0800ab10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff fef3 	bl	800a904 <mem_to_ptr>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff feda 	bl	800a8e0 <ptr_to_mem>
 800ab2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	885b      	ldrh	r3, [r3, #2]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff fed4 	bl	800a8e0 <ptr_to_mem>
 800ab38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab42:	d818      	bhi.n	800ab76 <mem_link_valid+0x66>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	885b      	ldrh	r3, [r3, #2]
 800ab48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab4c:	d813      	bhi.n	800ab76 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab52:	8afa      	ldrh	r2, [r7, #22]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d004      	beq.n	800ab62 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	8afa      	ldrh	r2, [r7, #22]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d109      	bne.n	800ab76 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ab62:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <mem_link_valid+0x74>)
 800ab64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d006      	beq.n	800ab7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	885b      	ldrh	r3, [r3, #2]
 800ab70:	8afa      	ldrh	r2, [r7, #22]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d001      	beq.n	800ab7a <mem_link_valid+0x6a>
    return 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	e000      	b.n	800ab7c <mem_link_valid+0x6c>
  }
  return 1;
 800ab7a:	2301      	movs	r3, #1
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20004a94 	.word	0x20004a94

0800ab88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d070      	beq.n	800ac78 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f003 0303 	and.w	r3, r3, #3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00d      	beq.n	800abbc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aba0:	4b37      	ldr	r3, [pc, #220]	; (800ac80 <mem_free+0xf8>)
 800aba2:	f240 2273 	movw	r2, #627	; 0x273
 800aba6:	4937      	ldr	r1, [pc, #220]	; (800ac84 <mem_free+0xfc>)
 800aba8:	4837      	ldr	r0, [pc, #220]	; (800ac88 <mem_free+0x100>)
 800abaa:	f00b f9ff 	bl	8015fac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800abae:	f00a ffd1 	bl	8015b54 <sys_arch_protect>
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f00a ffdb 	bl	8015b70 <sys_arch_unprotect>
    return;
 800abba:	e05e      	b.n	800ac7a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3b08      	subs	r3, #8
 800abc0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800abc2:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <mem_free+0x104>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d306      	bcc.n	800abda <mem_free+0x52>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f103 020c 	add.w	r2, r3, #12
 800abd2:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <mem_free+0x108>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d90d      	bls.n	800abf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800abda:	4b29      	ldr	r3, [pc, #164]	; (800ac80 <mem_free+0xf8>)
 800abdc:	f240 227f 	movw	r2, #639	; 0x27f
 800abe0:	492c      	ldr	r1, [pc, #176]	; (800ac94 <mem_free+0x10c>)
 800abe2:	4829      	ldr	r0, [pc, #164]	; (800ac88 <mem_free+0x100>)
 800abe4:	f00b f9e2 	bl	8015fac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800abe8:	f00a ffb4 	bl	8015b54 <sys_arch_protect>
 800abec:	6138      	str	r0, [r7, #16]
 800abee:	6938      	ldr	r0, [r7, #16]
 800abf0:	f00a ffbe 	bl	8015b70 <sys_arch_unprotect>
    return;
 800abf4:	e041      	b.n	800ac7a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800abf6:	4828      	ldr	r0, [pc, #160]	; (800ac98 <mem_free+0x110>)
 800abf8:	f00a ff70 	bl	8015adc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d110      	bne.n	800ac26 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <mem_free+0xf8>)
 800ac06:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ac0a:	4924      	ldr	r1, [pc, #144]	; (800ac9c <mem_free+0x114>)
 800ac0c:	481e      	ldr	r0, [pc, #120]	; (800ac88 <mem_free+0x100>)
 800ac0e:	f00b f9cd 	bl	8015fac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ac12:	4821      	ldr	r0, [pc, #132]	; (800ac98 <mem_free+0x110>)
 800ac14:	f00a ff71 	bl	8015afa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ac18:	f00a ff9c 	bl	8015b54 <sys_arch_protect>
 800ac1c:	6178      	str	r0, [r7, #20]
 800ac1e:	6978      	ldr	r0, [r7, #20]
 800ac20:	f00a ffa6 	bl	8015b70 <sys_arch_unprotect>
    return;
 800ac24:	e029      	b.n	800ac7a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ac26:	69f8      	ldr	r0, [r7, #28]
 800ac28:	f7ff ff72 	bl	800ab10 <mem_link_valid>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d110      	bne.n	800ac54 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ac32:	4b13      	ldr	r3, [pc, #76]	; (800ac80 <mem_free+0xf8>)
 800ac34:	f240 2295 	movw	r2, #661	; 0x295
 800ac38:	4919      	ldr	r1, [pc, #100]	; (800aca0 <mem_free+0x118>)
 800ac3a:	4813      	ldr	r0, [pc, #76]	; (800ac88 <mem_free+0x100>)
 800ac3c:	f00b f9b6 	bl	8015fac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ac40:	4815      	ldr	r0, [pc, #84]	; (800ac98 <mem_free+0x110>)
 800ac42:	f00a ff5a 	bl	8015afa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ac46:	f00a ff85 	bl	8015b54 <sys_arch_protect>
 800ac4a:	61b8      	str	r0, [r7, #24]
 800ac4c:	69b8      	ldr	r0, [r7, #24]
 800ac4e:	f00a ff8f 	bl	8015b70 <sys_arch_unprotect>
    return;
 800ac52:	e012      	b.n	800ac7a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	2200      	movs	r2, #0
 800ac58:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <mem_free+0x11c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d202      	bcs.n	800ac6a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ac64:	4a0f      	ldr	r2, [pc, #60]	; (800aca4 <mem_free+0x11c>)
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ac6a:	69f8      	ldr	r0, [r7, #28]
 800ac6c:	f7ff fe5c 	bl	800a928 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ac70:	4809      	ldr	r0, [pc, #36]	; (800ac98 <mem_free+0x110>)
 800ac72:	f00a ff42 	bl	8015afa <sys_mutex_unlock>
 800ac76:	e000      	b.n	800ac7a <mem_free+0xf2>
    return;
 800ac78:	bf00      	nop
}
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	08017ce8 	.word	0x08017ce8
 800ac84:	08017dd8 	.word	0x08017dd8
 800ac88:	08017d30 	.word	0x08017d30
 800ac8c:	20004a90 	.word	0x20004a90
 800ac90:	20004a94 	.word	0x20004a94
 800ac94:	08017dfc 	.word	0x08017dfc
 800ac98:	20004a98 	.word	0x20004a98
 800ac9c:	08017e18 	.word	0x08017e18
 800aca0:	08017e40 	.word	0x08017e40
 800aca4:	20004a9c 	.word	0x20004a9c

0800aca8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800acb4:	887b      	ldrh	r3, [r7, #2]
 800acb6:	3303      	adds	r3, #3
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800acc0:	8bfb      	ldrh	r3, [r7, #30]
 800acc2:	2b0b      	cmp	r3, #11
 800acc4:	d801      	bhi.n	800acca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800acc6:	230c      	movs	r3, #12
 800acc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800acca:	8bfb      	ldrh	r3, [r7, #30]
 800accc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acd0:	d803      	bhi.n	800acda <mem_trim+0x32>
 800acd2:	8bfa      	ldrh	r2, [r7, #30]
 800acd4:	887b      	ldrh	r3, [r7, #2]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d201      	bcs.n	800acde <mem_trim+0x36>
    return NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	e0d8      	b.n	800ae90 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800acde:	4b6e      	ldr	r3, [pc, #440]	; (800ae98 <mem_trim+0x1f0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d304      	bcc.n	800acf2 <mem_trim+0x4a>
 800ace8:	4b6c      	ldr	r3, [pc, #432]	; (800ae9c <mem_trim+0x1f4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d306      	bcc.n	800ad00 <mem_trim+0x58>
 800acf2:	4b6b      	ldr	r3, [pc, #428]	; (800aea0 <mem_trim+0x1f8>)
 800acf4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800acf8:	496a      	ldr	r1, [pc, #424]	; (800aea4 <mem_trim+0x1fc>)
 800acfa:	486b      	ldr	r0, [pc, #428]	; (800aea8 <mem_trim+0x200>)
 800acfc:	f00b f956 	bl	8015fac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ad00:	4b65      	ldr	r3, [pc, #404]	; (800ae98 <mem_trim+0x1f0>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d304      	bcc.n	800ad14 <mem_trim+0x6c>
 800ad0a:	4b64      	ldr	r3, [pc, #400]	; (800ae9c <mem_trim+0x1f4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d307      	bcc.n	800ad24 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad14:	f00a ff1e 	bl	8015b54 <sys_arch_protect>
 800ad18:	60b8      	str	r0, [r7, #8]
 800ad1a:	68b8      	ldr	r0, [r7, #8]
 800ad1c:	f00a ff28 	bl	8015b70 <sys_arch_unprotect>
    return rmem;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	e0b5      	b.n	800ae90 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3b08      	subs	r3, #8
 800ad28:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ad2a:	69b8      	ldr	r0, [r7, #24]
 800ad2c:	f7ff fdea 	bl	800a904 <mem_to_ptr>
 800ad30:	4603      	mov	r3, r0
 800ad32:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	881a      	ldrh	r2, [r3, #0]
 800ad38:	8afb      	ldrh	r3, [r7, #22]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	3b08      	subs	r3, #8
 800ad40:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ad42:	8bfa      	ldrh	r2, [r7, #30]
 800ad44:	8abb      	ldrh	r3, [r7, #20]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d906      	bls.n	800ad58 <mem_trim+0xb0>
 800ad4a:	4b55      	ldr	r3, [pc, #340]	; (800aea0 <mem_trim+0x1f8>)
 800ad4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ad50:	4956      	ldr	r1, [pc, #344]	; (800aeac <mem_trim+0x204>)
 800ad52:	4855      	ldr	r0, [pc, #340]	; (800aea8 <mem_trim+0x200>)
 800ad54:	f00b f92a 	bl	8015fac <iprintf>
  if (newsize > size) {
 800ad58:	8bfa      	ldrh	r2, [r7, #30]
 800ad5a:	8abb      	ldrh	r3, [r7, #20]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d901      	bls.n	800ad64 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	e095      	b.n	800ae90 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ad64:	8bfa      	ldrh	r2, [r7, #30]
 800ad66:	8abb      	ldrh	r3, [r7, #20]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d101      	bne.n	800ad70 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	e08f      	b.n	800ae90 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad70:	484f      	ldr	r0, [pc, #316]	; (800aeb0 <mem_trim+0x208>)
 800ad72:	f00a feb3 	bl	8015adc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff fdb0 	bl	800a8e0 <ptr_to_mem>
 800ad80:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	791b      	ldrb	r3, [r3, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d13f      	bne.n	800ae0a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad92:	d106      	bne.n	800ada2 <mem_trim+0xfa>
 800ad94:	4b42      	ldr	r3, [pc, #264]	; (800aea0 <mem_trim+0x1f8>)
 800ad96:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ad9a:	4946      	ldr	r1, [pc, #280]	; (800aeb4 <mem_trim+0x20c>)
 800ad9c:	4842      	ldr	r0, [pc, #264]	; (800aea8 <mem_trim+0x200>)
 800ad9e:	f00b f905 	bl	8015fac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ada8:	8afa      	ldrh	r2, [r7, #22]
 800adaa:	8bfb      	ldrh	r3, [r7, #30]
 800adac:	4413      	add	r3, r2
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3308      	adds	r3, #8
 800adb2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800adb4:	4b40      	ldr	r3, [pc, #256]	; (800aeb8 <mem_trim+0x210>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d106      	bne.n	800adcc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800adbe:	89fb      	ldrh	r3, [r7, #14]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fd8d 	bl	800a8e0 <ptr_to_mem>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a3b      	ldr	r2, [pc, #236]	; (800aeb8 <mem_trim+0x210>)
 800adca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff fd86 	bl	800a8e0 <ptr_to_mem>
 800add4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2200      	movs	r2, #0
 800adda:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	89ba      	ldrh	r2, [r7, #12]
 800ade0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	8afa      	ldrh	r2, [r7, #22]
 800ade6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	89fa      	ldrh	r2, [r7, #14]
 800adec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adf6:	d047      	beq.n	800ae88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fd6f 	bl	800a8e0 <ptr_to_mem>
 800ae02:	4602      	mov	r2, r0
 800ae04:	89fb      	ldrh	r3, [r7, #14]
 800ae06:	8053      	strh	r3, [r2, #2]
 800ae08:	e03e      	b.n	800ae88 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ae0a:	8bfb      	ldrh	r3, [r7, #30]
 800ae0c:	f103 0214 	add.w	r2, r3, #20
 800ae10:	8abb      	ldrh	r3, [r7, #20]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d838      	bhi.n	800ae88 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ae16:	8afa      	ldrh	r2, [r7, #22]
 800ae18:	8bfb      	ldrh	r3, [r7, #30]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	3308      	adds	r3, #8
 800ae20:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae2a:	d106      	bne.n	800ae3a <mem_trim+0x192>
 800ae2c:	4b1c      	ldr	r3, [pc, #112]	; (800aea0 <mem_trim+0x1f8>)
 800ae2e:	f240 3216 	movw	r2, #790	; 0x316
 800ae32:	4920      	ldr	r1, [pc, #128]	; (800aeb4 <mem_trim+0x20c>)
 800ae34:	481c      	ldr	r0, [pc, #112]	; (800aea8 <mem_trim+0x200>)
 800ae36:	f00b f8b9 	bl	8015fac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ae3a:	89fb      	ldrh	r3, [r7, #14]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fd4f 	bl	800a8e0 <ptr_to_mem>
 800ae42:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ae44:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <mem_trim+0x210>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d202      	bcs.n	800ae54 <mem_trim+0x1ac>
      lfree = mem2;
 800ae4e:	4a1a      	ldr	r2, [pc, #104]	; (800aeb8 <mem_trim+0x210>)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2200      	movs	r2, #0
 800ae58:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	881a      	ldrh	r2, [r3, #0]
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	8afa      	ldrh	r2, [r7, #22]
 800ae66:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	89fa      	ldrh	r2, [r7, #14]
 800ae6c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae76:	d007      	beq.n	800ae88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff fd2f 	bl	800a8e0 <ptr_to_mem>
 800ae82:	4602      	mov	r2, r0
 800ae84:	89fb      	ldrh	r3, [r7, #14]
 800ae86:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <mem_trim+0x208>)
 800ae8a:	f00a fe36 	bl	8015afa <sys_mutex_unlock>
  return rmem;
 800ae8e:	687b      	ldr	r3, [r7, #4]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20004a90 	.word	0x20004a90
 800ae9c:	20004a94 	.word	0x20004a94
 800aea0:	08017ce8 	.word	0x08017ce8
 800aea4:	08017e74 	.word	0x08017e74
 800aea8:	08017d30 	.word	0x08017d30
 800aeac:	08017e8c 	.word	0x08017e8c
 800aeb0:	20004a98 	.word	0x20004a98
 800aeb4:	08017eac 	.word	0x08017eac
 800aeb8:	20004a9c 	.word	0x20004a9c

0800aebc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <mem_malloc+0x14>
    return NULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	e0e2      	b.n	800b096 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	3303      	adds	r3, #3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aedc:	8bbb      	ldrh	r3, [r7, #28]
 800aede:	2b0b      	cmp	r3, #11
 800aee0:	d801      	bhi.n	800aee6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aee2:	230c      	movs	r3, #12
 800aee4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aee6:	8bbb      	ldrh	r3, [r7, #28]
 800aee8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aeec:	d803      	bhi.n	800aef6 <mem_malloc+0x3a>
 800aeee:	8bba      	ldrh	r2, [r7, #28]
 800aef0:	88fb      	ldrh	r3, [r7, #6]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d201      	bcs.n	800aefa <mem_malloc+0x3e>
    return NULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	e0cd      	b.n	800b096 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800aefa:	4869      	ldr	r0, [pc, #420]	; (800b0a0 <mem_malloc+0x1e4>)
 800aefc:	f00a fdee 	bl	8015adc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800af00:	4b68      	ldr	r3, [pc, #416]	; (800b0a4 <mem_malloc+0x1e8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff fcfd 	bl	800a904 <mem_to_ptr>
 800af0a:	4603      	mov	r3, r0
 800af0c:	83fb      	strh	r3, [r7, #30]
 800af0e:	e0b7      	b.n	800b080 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800af10:	8bfb      	ldrh	r3, [r7, #30]
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fce4 	bl	800a8e0 <ptr_to_mem>
 800af18:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	791b      	ldrb	r3, [r3, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f040 80a7 	bne.w	800b072 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
 800af2a:	8bfb      	ldrh	r3, [r7, #30]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	f1a3 0208 	sub.w	r2, r3, #8
 800af32:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800af34:	429a      	cmp	r2, r3
 800af36:	f0c0 809c 	bcc.w	800b072 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	8bfb      	ldrh	r3, [r7, #30]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	f1a3 0208 	sub.w	r2, r3, #8
 800af48:	8bbb      	ldrh	r3, [r7, #28]
 800af4a:	3314      	adds	r3, #20
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d333      	bcc.n	800afb8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800af50:	8bfa      	ldrh	r2, [r7, #30]
 800af52:	8bbb      	ldrh	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	b29b      	uxth	r3, r3
 800af58:	3308      	adds	r3, #8
 800af5a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800af5c:	8a7b      	ldrh	r3, [r7, #18]
 800af5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af62:	d106      	bne.n	800af72 <mem_malloc+0xb6>
 800af64:	4b50      	ldr	r3, [pc, #320]	; (800b0a8 <mem_malloc+0x1ec>)
 800af66:	f240 3287 	movw	r2, #903	; 0x387
 800af6a:	4950      	ldr	r1, [pc, #320]	; (800b0ac <mem_malloc+0x1f0>)
 800af6c:	4850      	ldr	r0, [pc, #320]	; (800b0b0 <mem_malloc+0x1f4>)
 800af6e:	f00b f81d 	bl	8015fac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800af72:	8a7b      	ldrh	r3, [r7, #18]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fcb3 	bl	800a8e0 <ptr_to_mem>
 800af7a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	881a      	ldrh	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8bfa      	ldrh	r2, [r7, #30]
 800af8e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	8a7a      	ldrh	r2, [r7, #18]
 800af94:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2201      	movs	r2, #1
 800af9a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afa4:	d00b      	beq.n	800afbe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fc98 	bl	800a8e0 <ptr_to_mem>
 800afb0:	4602      	mov	r2, r0
 800afb2:	8a7b      	ldrh	r3, [r7, #18]
 800afb4:	8053      	strh	r3, [r2, #2]
 800afb6:	e002      	b.n	800afbe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2201      	movs	r2, #1
 800afbc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800afbe:	4b39      	ldr	r3, [pc, #228]	; (800b0a4 <mem_malloc+0x1e8>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d127      	bne.n	800b018 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800afc8:	4b36      	ldr	r3, [pc, #216]	; (800b0a4 <mem_malloc+0x1e8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800afce:	e005      	b.n	800afdc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff fc83 	bl	800a8e0 <ptr_to_mem>
 800afda:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	791b      	ldrb	r3, [r3, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d004      	beq.n	800afee <mem_malloc+0x132>
 800afe4:	4b33      	ldr	r3, [pc, #204]	; (800b0b4 <mem_malloc+0x1f8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	429a      	cmp	r2, r3
 800afec:	d1f0      	bne.n	800afd0 <mem_malloc+0x114>
          }
          lfree = cur;
 800afee:	4a2d      	ldr	r2, [pc, #180]	; (800b0a4 <mem_malloc+0x1e8>)
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aff4:	4b2b      	ldr	r3, [pc, #172]	; (800b0a4 <mem_malloc+0x1e8>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <mem_malloc+0x1f8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d00b      	beq.n	800b018 <mem_malloc+0x15c>
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <mem_malloc+0x1e8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	791b      	ldrb	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d006      	beq.n	800b018 <mem_malloc+0x15c>
 800b00a:	4b27      	ldr	r3, [pc, #156]	; (800b0a8 <mem_malloc+0x1ec>)
 800b00c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b010:	4929      	ldr	r1, [pc, #164]	; (800b0b8 <mem_malloc+0x1fc>)
 800b012:	4827      	ldr	r0, [pc, #156]	; (800b0b0 <mem_malloc+0x1f4>)
 800b014:	f00a ffca 	bl	8015fac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b018:	4821      	ldr	r0, [pc, #132]	; (800b0a0 <mem_malloc+0x1e4>)
 800b01a:	f00a fd6e 	bl	8015afa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b01e:	8bba      	ldrh	r2, [r7, #28]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	4413      	add	r3, r2
 800b024:	3308      	adds	r3, #8
 800b026:	4a23      	ldr	r2, [pc, #140]	; (800b0b4 <mem_malloc+0x1f8>)
 800b028:	6812      	ldr	r2, [r2, #0]
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d906      	bls.n	800b03c <mem_malloc+0x180>
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <mem_malloc+0x1ec>)
 800b030:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b034:	4921      	ldr	r1, [pc, #132]	; (800b0bc <mem_malloc+0x200>)
 800b036:	481e      	ldr	r0, [pc, #120]	; (800b0b0 <mem_malloc+0x1f4>)
 800b038:	f00a ffb8 	bl	8015fac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <mem_malloc+0x198>
 800b046:	4b18      	ldr	r3, [pc, #96]	; (800b0a8 <mem_malloc+0x1ec>)
 800b048:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b04c:	491c      	ldr	r1, [pc, #112]	; (800b0c0 <mem_malloc+0x204>)
 800b04e:	4818      	ldr	r0, [pc, #96]	; (800b0b0 <mem_malloc+0x1f4>)
 800b050:	f00a ffac 	bl	8015fac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <mem_malloc+0x1b0>
 800b05e:	4b12      	ldr	r3, [pc, #72]	; (800b0a8 <mem_malloc+0x1ec>)
 800b060:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b064:	4917      	ldr	r1, [pc, #92]	; (800b0c4 <mem_malloc+0x208>)
 800b066:	4812      	ldr	r0, [pc, #72]	; (800b0b0 <mem_malloc+0x1f4>)
 800b068:	f00a ffa0 	bl	8015fac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	3308      	adds	r3, #8
 800b070:	e011      	b.n	800b096 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b072:	8bfb      	ldrh	r3, [r7, #30]
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fc33 	bl	800a8e0 <ptr_to_mem>
 800b07a:	4603      	mov	r3, r0
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b080:	8bfa      	ldrh	r2, [r7, #30]
 800b082:	8bbb      	ldrh	r3, [r7, #28]
 800b084:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b088:	429a      	cmp	r2, r3
 800b08a:	f4ff af41 	bcc.w	800af10 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b08e:	4804      	ldr	r0, [pc, #16]	; (800b0a0 <mem_malloc+0x1e4>)
 800b090:	f00a fd33 	bl	8015afa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20004a98 	.word	0x20004a98
 800b0a4:	20004a9c 	.word	0x20004a9c
 800b0a8:	08017ce8 	.word	0x08017ce8
 800b0ac:	08017eac 	.word	0x08017eac
 800b0b0:	08017d30 	.word	0x08017d30
 800b0b4:	20004a94 	.word	0x20004a94
 800b0b8:	08017ec0 	.word	0x08017ec0
 800b0bc:	08017edc 	.word	0x08017edc
 800b0c0:	08017f0c 	.word	0x08017f0c
 800b0c4:	08017f3c 	.word	0x08017f3c

0800b0c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	3303      	adds	r3, #3
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e011      	b.n	800b10e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4413      	add	r3, r2
 800b106:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	461a      	mov	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4293      	cmp	r3, r2
 800b118:	dbe7      	blt.n	800b0ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b11a:	bf00      	nop
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b12e:	2300      	movs	r3, #0
 800b130:	80fb      	strh	r3, [r7, #6]
 800b132:	e009      	b.n	800b148 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	4a08      	ldr	r2, [pc, #32]	; (800b158 <memp_init+0x30>)
 800b138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff ffc3 	bl	800b0c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b142:	88fb      	ldrh	r3, [r7, #6]
 800b144:	3301      	adds	r3, #1
 800b146:	80fb      	strh	r3, [r7, #6]
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	2b0c      	cmp	r3, #12
 800b14c:	d9f2      	bls.n	800b134 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	0801a7f0 	.word	0x0801a7f0

0800b15c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b164:	f00a fcf6 	bl	8015b54 <sys_arch_protect>
 800b168:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d015      	beq.n	800b1a4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <do_memp_malloc_pool+0x3e>
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <do_memp_malloc_pool+0x58>)
 800b18e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b192:	4909      	ldr	r1, [pc, #36]	; (800b1b8 <do_memp_malloc_pool+0x5c>)
 800b194:	4809      	ldr	r0, [pc, #36]	; (800b1bc <do_memp_malloc_pool+0x60>)
 800b196:	f00a ff09 	bl	8015fac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f00a fce8 	bl	8015b70 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	e003      	b.n	800b1ac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f00a fce3 	bl	8015b70 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	08017f60 	.word	0x08017f60
 800b1b8:	08017f90 	.word	0x08017f90
 800b1bc:	08017fb4 	.word	0x08017fb4

0800b1c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2b0c      	cmp	r3, #12
 800b1ce:	d908      	bls.n	800b1e2 <memp_malloc+0x22>
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <memp_malloc+0x3c>)
 800b1d2:	f240 1257 	movw	r2, #343	; 0x157
 800b1d6:	490a      	ldr	r1, [pc, #40]	; (800b200 <memp_malloc+0x40>)
 800b1d8:	480a      	ldr	r0, [pc, #40]	; (800b204 <memp_malloc+0x44>)
 800b1da:	f00a fee7 	bl	8015fac <iprintf>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e008      	b.n	800b1f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	4a08      	ldr	r2, [pc, #32]	; (800b208 <memp_malloc+0x48>)
 800b1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff ffb6 	bl	800b15c <do_memp_malloc_pool>
 800b1f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	08017f60 	.word	0x08017f60
 800b200:	08017ff0 	.word	0x08017ff0
 800b204:	08017fb4 	.word	0x08017fb4
 800b208:	0801a7f0 	.word	0x0801a7f0

0800b20c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	f003 0303 	and.w	r3, r3, #3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <do_memp_free_pool+0x22>
 800b220:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <do_memp_free_pool+0x4c>)
 800b222:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b226:	490d      	ldr	r1, [pc, #52]	; (800b25c <do_memp_free_pool+0x50>)
 800b228:	480d      	ldr	r0, [pc, #52]	; (800b260 <do_memp_free_pool+0x54>)
 800b22a:	f00a febf 	bl	8015fac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b232:	f00a fc8f 	bl	8015b54 <sys_arch_protect>
 800b236:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b24a:	68b8      	ldr	r0, [r7, #8]
 800b24c:	f00a fc90 	bl	8015b70 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b250:	bf00      	nop
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	08017f60 	.word	0x08017f60
 800b25c:	08018010 	.word	0x08018010
 800b260:	08017fb4 	.word	0x08017fb4

0800b264 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	6039      	str	r1, [r7, #0]
 800b26e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	2b0c      	cmp	r3, #12
 800b274:	d907      	bls.n	800b286 <memp_free+0x22>
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <memp_free+0x44>)
 800b278:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b27c:	490b      	ldr	r1, [pc, #44]	; (800b2ac <memp_free+0x48>)
 800b27e:	480c      	ldr	r0, [pc, #48]	; (800b2b0 <memp_free+0x4c>)
 800b280:	f00a fe94 	bl	8015fac <iprintf>
 800b284:	e00c      	b.n	800b2a0 <memp_free+0x3c>

  if (mem == NULL) {
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	4a09      	ldr	r2, [pc, #36]	; (800b2b4 <memp_free+0x50>)
 800b290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff ffb8 	bl	800b20c <do_memp_free_pool>
 800b29c:	e000      	b.n	800b2a0 <memp_free+0x3c>
    return;
 800b29e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	08017f60 	.word	0x08017f60
 800b2ac:	08018030 	.word	0x08018030
 800b2b0:	08017fb4 	.word	0x08017fb4
 800b2b4:	0801a7f0 	.word	0x0801a7f0

0800b2b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b2bc:	bf00      	nop
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d108      	bne.n	800b2ee <netif_add+0x26>
 800b2dc:	4b57      	ldr	r3, [pc, #348]	; (800b43c <netif_add+0x174>)
 800b2de:	f240 1227 	movw	r2, #295	; 0x127
 800b2e2:	4957      	ldr	r1, [pc, #348]	; (800b440 <netif_add+0x178>)
 800b2e4:	4857      	ldr	r0, [pc, #348]	; (800b444 <netif_add+0x17c>)
 800b2e6:	f00a fe61 	bl	8015fac <iprintf>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e0a2      	b.n	800b434 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d108      	bne.n	800b306 <netif_add+0x3e>
 800b2f4:	4b51      	ldr	r3, [pc, #324]	; (800b43c <netif_add+0x174>)
 800b2f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b2fa:	4953      	ldr	r1, [pc, #332]	; (800b448 <netif_add+0x180>)
 800b2fc:	4851      	ldr	r0, [pc, #324]	; (800b444 <netif_add+0x17c>)
 800b2fe:	f00a fe55 	bl	8015fac <iprintf>
 800b302:	2300      	movs	r3, #0
 800b304:	e096      	b.n	800b434 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b30c:	4b4f      	ldr	r3, [pc, #316]	; (800b44c <netif_add+0x184>)
 800b30e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b316:	4b4d      	ldr	r3, [pc, #308]	; (800b44c <netif_add+0x184>)
 800b318:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b320:	4b4a      	ldr	r3, [pc, #296]	; (800b44c <netif_add+0x184>)
 800b322:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4a45      	ldr	r2, [pc, #276]	; (800b450 <netif_add+0x188>)
 800b33a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a3a      	ldr	r2, [r7, #32]
 800b354:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b356:	4b3f      	ldr	r3, [pc, #252]	; (800b454 <netif_add+0x18c>)
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b364:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 f913 	bl	800b598 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	4798      	blx	r3
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <netif_add+0xba>
    return NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	e058      	b.n	800b434 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b388:	2bff      	cmp	r3, #255	; 0xff
 800b38a:	d103      	bne.n	800b394 <netif_add+0xcc>
        netif->num = 0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b398:	4b2f      	ldr	r3, [pc, #188]	; (800b458 <netif_add+0x190>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	617b      	str	r3, [r7, #20]
 800b39e:	e02b      	b.n	800b3f8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d106      	bne.n	800b3b6 <netif_add+0xee>
 800b3a8:	4b24      	ldr	r3, [pc, #144]	; (800b43c <netif_add+0x174>)
 800b3aa:	f240 128b 	movw	r2, #395	; 0x18b
 800b3ae:	492b      	ldr	r1, [pc, #172]	; (800b45c <netif_add+0x194>)
 800b3b0:	4824      	ldr	r0, [pc, #144]	; (800b444 <netif_add+0x17c>)
 800b3b2:	f00a fdfb 	bl	8015fac <iprintf>
        num_netifs++;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2bff      	cmp	r3, #255	; 0xff
 800b3c0:	dd06      	ble.n	800b3d0 <netif_add+0x108>
 800b3c2:	4b1e      	ldr	r3, [pc, #120]	; (800b43c <netif_add+0x174>)
 800b3c4:	f240 128d 	movw	r2, #397	; 0x18d
 800b3c8:	4925      	ldr	r1, [pc, #148]	; (800b460 <netif_add+0x198>)
 800b3ca:	481e      	ldr	r0, [pc, #120]	; (800b444 <netif_add+0x17c>)
 800b3cc:	f00a fdee 	bl	8015fac <iprintf>
        if (netif2->num == netif->num) {
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d108      	bne.n	800b3f2 <netif_add+0x12a>
          netif->num++;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b3f0:	e005      	b.n	800b3fe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1d0      	bne.n	800b3a0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1be      	bne.n	800b382 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b40a:	2bfe      	cmp	r3, #254	; 0xfe
 800b40c:	d103      	bne.n	800b416 <netif_add+0x14e>
    netif_num = 0;
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <netif_add+0x18c>)
 800b410:	2200      	movs	r2, #0
 800b412:	701a      	strb	r2, [r3, #0]
 800b414:	e006      	b.n	800b424 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b41c:	3301      	adds	r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	4b0c      	ldr	r3, [pc, #48]	; (800b454 <netif_add+0x18c>)
 800b422:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b424:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <netif_add+0x190>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b42c:	4a0a      	ldr	r2, [pc, #40]	; (800b458 <netif_add+0x190>)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	0801804c 	.word	0x0801804c
 800b440:	080180e0 	.word	0x080180e0
 800b444:	0801809c 	.word	0x0801809c
 800b448:	080180fc 	.word	0x080180fc
 800b44c:	0801a864 	.word	0x0801a864
 800b450:	0800b873 	.word	0x0800b873
 800b454:	20004ad4 	.word	0x20004ad4
 800b458:	2000b5d4 	.word	0x2000b5d4
 800b45c:	08018120 	.word	0x08018120
 800b460:	08018134 	.word	0x08018134

0800b464 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f002 fe9d 	bl	800e1b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f007 fdb9 	bl	8012ff0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d106      	bne.n	800b4a8 <netif_do_set_ipaddr+0x20>
 800b49a:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <netif_do_set_ipaddr+0x88>)
 800b49c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b4a0:	491c      	ldr	r1, [pc, #112]	; (800b514 <netif_do_set_ipaddr+0x8c>)
 800b4a2:	481d      	ldr	r0, [pc, #116]	; (800b518 <netif_do_set_ipaddr+0x90>)
 800b4a4:	f00a fd82 	bl	8015fac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <netif_do_set_ipaddr+0x34>
 800b4ae:	4b18      	ldr	r3, [pc, #96]	; (800b510 <netif_do_set_ipaddr+0x88>)
 800b4b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b4b4:	4917      	ldr	r1, [pc, #92]	; (800b514 <netif_do_set_ipaddr+0x8c>)
 800b4b6:	4818      	ldr	r0, [pc, #96]	; (800b518 <netif_do_set_ipaddr+0x90>)
 800b4b8:	f00a fd78 	bl	8015fac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d01c      	beq.n	800b504 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff ffbf 	bl	800b464 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <netif_do_set_ipaddr+0x6a>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	e000      	b.n	800b4f4 <netif_do_set_ipaddr+0x6c>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f8d2 	bl	800b6a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b500:	2301      	movs	r3, #1
 800b502:	e000      	b.n	800b506 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	0801804c 	.word	0x0801804c
 800b514:	08018164 	.word	0x08018164
 800b518:	0801809c 	.word	0x0801809c

0800b51c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3308      	adds	r3, #8
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d00a      	beq.n	800b54c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <netif_do_set_netmask+0x26>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	e000      	b.n	800b544 <netif_do_set_netmask+0x28>
 800b542:	2300      	movs	r3, #0
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b548:	2301      	movs	r3, #1
 800b54a:	e000      	b.n	800b54e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b085      	sub	sp, #20
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	330c      	adds	r3, #12
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d00a      	beq.n	800b58a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <netif_do_set_gw+0x26>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	e000      	b.n	800b582 <netif_do_set_gw+0x28>
 800b580:	2300      	movs	r3, #0
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <netif_set_addr+0x90>)
 800b5b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b5be:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <netif_set_addr+0x90>)
 800b5c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b5c8:	4b17      	ldr	r3, [pc, #92]	; (800b628 <netif_set_addr+0x90>)
 800b5ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <netif_set_addr+0x42>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <netif_set_addr+0x46>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <netif_set_addr+0x48>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d006      	beq.n	800b5f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b5e8:	f107 0310 	add.w	r3, r7, #16
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff ff49 	bl	800b488 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff ff8e 	bl	800b51c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7ff ffa8 	bl	800b55a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d106      	bne.n	800b61e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b610:	f107 0310 	add.w	r3, r7, #16
 800b614:	461a      	mov	r2, r3
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff ff35 	bl	800b488 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b61e:	bf00      	nop
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	0801a864 	.word	0x0801a864

0800b62c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b634:	4a04      	ldr	r2, [pc, #16]	; (800b648 <netif_set_default+0x1c>)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	2000b5d8 	.word	0x2000b5d8

0800b64c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d107      	bne.n	800b66a <netif_set_up+0x1e>
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <netif_set_up+0x4c>)
 800b65c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b660:	490e      	ldr	r1, [pc, #56]	; (800b69c <netif_set_up+0x50>)
 800b662:	480f      	ldr	r0, [pc, #60]	; (800b6a0 <netif_set_up+0x54>)
 800b664:	f00a fca2 	bl	8015fac <iprintf>
 800b668:	e013      	b.n	800b692 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10c      	bne.n	800b692 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	b2da      	uxtb	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b68a:	2103      	movs	r1, #3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f809 	bl	800b6a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	0801804c 	.word	0x0801804c
 800b69c:	080181d4 	.word	0x080181d4
 800b6a0:	0801809c 	.word	0x0801809c

0800b6a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d106      	bne.n	800b6c4 <netif_issue_reports+0x20>
 800b6b6:	4b18      	ldr	r3, [pc, #96]	; (800b718 <netif_issue_reports+0x74>)
 800b6b8:	f240 326d 	movw	r2, #877	; 0x36d
 800b6bc:	4917      	ldr	r1, [pc, #92]	; (800b71c <netif_issue_reports+0x78>)
 800b6be:	4818      	ldr	r0, [pc, #96]	; (800b720 <netif_issue_reports+0x7c>)
 800b6c0:	f00a fc74 	bl	8015fac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01e      	beq.n	800b710 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d017      	beq.n	800b710 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d013      	beq.n	800b712 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00e      	beq.n	800b712 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6fa:	f003 0308 	and.w	r3, r3, #8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f008 fbdb 	bl	8013ec4 <etharp_request>
 800b70e:	e000      	b.n	800b712 <netif_issue_reports+0x6e>
    return;
 800b710:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	0801804c 	.word	0x0801804c
 800b71c:	080181f0 	.word	0x080181f0
 800b720:	0801809c 	.word	0x0801809c

0800b724 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d107      	bne.n	800b742 <netif_set_down+0x1e>
 800b732:	4b12      	ldr	r3, [pc, #72]	; (800b77c <netif_set_down+0x58>)
 800b734:	f240 329b 	movw	r2, #923	; 0x39b
 800b738:	4911      	ldr	r1, [pc, #68]	; (800b780 <netif_set_down+0x5c>)
 800b73a:	4812      	ldr	r0, [pc, #72]	; (800b784 <netif_set_down+0x60>)
 800b73c:	f00a fc36 	bl	8015fac <iprintf>
 800b740:	e019      	b.n	800b776 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d012      	beq.n	800b776 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f007 ff65 	bl	8013640 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	0801804c 	.word	0x0801804c
 800b780:	08018214 	.word	0x08018214
 800b784:	0801809c 	.word	0x0801809c

0800b788 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d107      	bne.n	800b7a6 <netif_set_link_up+0x1e>
 800b796:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <netif_set_link_up+0x5c>)
 800b798:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b79c:	4912      	ldr	r1, [pc, #72]	; (800b7e8 <netif_set_link_up+0x60>)
 800b79e:	4813      	ldr	r0, [pc, #76]	; (800b7ec <netif_set_link_up+0x64>)
 800b7a0:	f00a fc04 	bl	8015fac <iprintf>
 800b7a4:	e01b      	b.n	800b7de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7ac:	f003 0304 	and.w	r3, r3, #4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d114      	bne.n	800b7de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7ba:	f043 0304 	orr.w	r3, r3, #4
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff ff6b 	bl	800b6a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d003      	beq.n	800b7de <netif_set_link_up+0x56>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	0801804c 	.word	0x0801804c
 800b7e8:	08018234 	.word	0x08018234
 800b7ec:	0801809c 	.word	0x0801809c

0800b7f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d107      	bne.n	800b80e <netif_set_link_down+0x1e>
 800b7fe:	4b11      	ldr	r3, [pc, #68]	; (800b844 <netif_set_link_down+0x54>)
 800b800:	f240 4206 	movw	r2, #1030	; 0x406
 800b804:	4910      	ldr	r1, [pc, #64]	; (800b848 <netif_set_link_down+0x58>)
 800b806:	4811      	ldr	r0, [pc, #68]	; (800b84c <netif_set_link_down+0x5c>)
 800b808:	f00a fbd0 	bl	8015fac <iprintf>
 800b80c:	e017      	b.n	800b83e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d010      	beq.n	800b83e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b822:	f023 0304 	bic.w	r3, r3, #4
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <netif_set_link_down+0x4e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	0801804c 	.word	0x0801804c
 800b848:	08018258 	.word	0x08018258
 800b84c:	0801809c 	.word	0x0801809c

0800b850 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	61da      	str	r2, [r3, #28]
  }
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b87e:	f06f 030b 	mvn.w	r3, #11
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
	...

0800b890 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d013      	beq.n	800b8c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b8a0:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <netif_get_by_index+0x48>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	e00c      	b.n	800b8c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	79fa      	ldrb	r2, [r7, #7]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d101      	bne.n	800b8bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	e006      	b.n	800b8ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1ef      	bne.n	800b8a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	2000b5d4 	.word	0x2000b5d4

0800b8dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b8e2:	f00a f937 	bl	8015b54 <sys_arch_protect>
 800b8e6:	6038      	str	r0, [r7, #0]
 800b8e8:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <pbuf_free_ooseq+0x44>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	6838      	ldr	r0, [r7, #0]
 800b8f0:	f00a f93e 	bl	8015b70 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <pbuf_free_ooseq+0x48>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	607b      	str	r3, [r7, #4]
 800b8fa:	e00a      	b.n	800b912 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f002 fc91 	bl	800e22c <tcp_free_ooseq>
      return;
 800b90a:	e005      	b.n	800b918 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1f1      	bne.n	800b8fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2000b5dc 	.word	0x2000b5dc
 800b924:	2000b5e4 	.word	0x2000b5e4

0800b928 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b930:	f7ff ffd4 	bl	800b8dc <pbuf_free_ooseq>
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b942:	f00a f907 	bl	8015b54 <sys_arch_protect>
 800b946:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b948:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <pbuf_pool_is_empty+0x4c>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b94e:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <pbuf_pool_is_empty+0x4c>)
 800b950:	2201      	movs	r2, #1
 800b952:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f00a f90b 	bl	8015b70 <sys_arch_unprotect>

  if (!queued) {
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10f      	bne.n	800b980 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b960:	2100      	movs	r1, #0
 800b962:	480a      	ldr	r0, [pc, #40]	; (800b98c <pbuf_pool_is_empty+0x50>)
 800b964:	f7fe fed6 	bl	800a714 <tcpip_try_callback>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <pbuf_pool_is_empty+0x44>
 800b96e:	f00a f8f1 	bl	8015b54 <sys_arch_protect>
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <pbuf_pool_is_empty+0x4c>)
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f00a f8f8 	bl	8015b70 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	2000b5dc 	.word	0x2000b5dc
 800b98c:	0800b929 	.word	0x0800b929

0800b990 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4611      	mov	r1, r2
 800b99c:	461a      	mov	r2, r3
 800b99e:	460b      	mov	r3, r1
 800b9a0:	80fb      	strh	r3, [r7, #6]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	88fa      	ldrh	r2, [r7, #6]
 800b9b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	88ba      	ldrh	r2, [r7, #4]
 800b9bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b9be:	8b3b      	ldrh	r3, [r7, #24]
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7f3a      	ldrb	r2, [r7, #28]
 800b9ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	73da      	strb	r2, [r3, #15]
}
 800b9d8:	bf00      	nop
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08c      	sub	sp, #48	; 0x30
 800b9e8:	af02      	add	r7, sp, #8
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	71fb      	strb	r3, [r7, #7]
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	80bb      	strh	r3, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b9fa:	887b      	ldrh	r3, [r7, #2]
 800b9fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ba00:	d07f      	beq.n	800bb02 <pbuf_alloc+0x11e>
 800ba02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ba06:	f300 80c8 	bgt.w	800bb9a <pbuf_alloc+0x1b6>
 800ba0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ba0e:	d010      	beq.n	800ba32 <pbuf_alloc+0x4e>
 800ba10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ba14:	f300 80c1 	bgt.w	800bb9a <pbuf_alloc+0x1b6>
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d002      	beq.n	800ba22 <pbuf_alloc+0x3e>
 800ba1c:	2b41      	cmp	r3, #65	; 0x41
 800ba1e:	f040 80bc 	bne.w	800bb9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ba22:	887a      	ldrh	r2, [r7, #2]
 800ba24:	88bb      	ldrh	r3, [r7, #4]
 800ba26:	4619      	mov	r1, r3
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f000 f8d1 	bl	800bbd0 <pbuf_alloc_reference>
 800ba2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ba30:	e0bd      	b.n	800bbae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ba3a:	88bb      	ldrh	r3, [r7, #4]
 800ba3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ba3e:	200c      	movs	r0, #12
 800ba40:	f7ff fbbe 	bl	800b1c0 <memp_malloc>
 800ba44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d109      	bne.n	800ba60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ba4c:	f7ff ff76 	bl	800b93c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ba56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba58:	f000 faa8 	bl	800bfac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e0a7      	b.n	800bbb0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ba60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba62:	3303      	adds	r3, #3
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	8b7a      	ldrh	r2, [r7, #26]
 800ba74:	4293      	cmp	r3, r2
 800ba76:	bf28      	it	cs
 800ba78:	4613      	movcs	r3, r2
 800ba7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ba7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba7e:	3310      	adds	r3, #16
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	4413      	add	r3, r2
 800ba84:	3303      	adds	r3, #3
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	89f9      	ldrh	r1, [r7, #14]
 800ba8e:	8b7a      	ldrh	r2, [r7, #26]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	887b      	ldrh	r3, [r7, #2]
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6938      	ldr	r0, [r7, #16]
 800ba9e:	f7ff ff77 	bl	800b990 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <pbuf_alloc+0xd8>
 800baae:	4b42      	ldr	r3, [pc, #264]	; (800bbb8 <pbuf_alloc+0x1d4>)
 800bab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bab4:	4941      	ldr	r1, [pc, #260]	; (800bbbc <pbuf_alloc+0x1d8>)
 800bab6:	4842      	ldr	r0, [pc, #264]	; (800bbc0 <pbuf_alloc+0x1dc>)
 800bab8:	f00a fa78 	bl	8015fac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800babc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800babe:	3303      	adds	r3, #3
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bac8:	d106      	bne.n	800bad8 <pbuf_alloc+0xf4>
 800baca:	4b3b      	ldr	r3, [pc, #236]	; (800bbb8 <pbuf_alloc+0x1d4>)
 800bacc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bad0:	493c      	ldr	r1, [pc, #240]	; (800bbc4 <pbuf_alloc+0x1e0>)
 800bad2:	483b      	ldr	r0, [pc, #236]	; (800bbc0 <pbuf_alloc+0x1dc>)
 800bad4:	f00a fa6a 	bl	8015fac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
 800bae2:	e002      	b.n	800baea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800baee:	8b7a      	ldrh	r2, [r7, #26]
 800baf0:	89fb      	ldrh	r3, [r7, #14]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bafa:	8b7b      	ldrh	r3, [r7, #26]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d19e      	bne.n	800ba3e <pbuf_alloc+0x5a>
      break;
 800bb00:	e055      	b.n	800bbae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bb02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb04:	3303      	adds	r3, #3
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	f023 0303 	bic.w	r3, r3, #3
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	88bb      	ldrh	r3, [r7, #4]
 800bb10:	3303      	adds	r3, #3
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bb1e:	8b3b      	ldrh	r3, [r7, #24]
 800bb20:	3310      	adds	r3, #16
 800bb22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb24:	8b3a      	ldrh	r2, [r7, #24]
 800bb26:	88bb      	ldrh	r3, [r7, #4]
 800bb28:	3303      	adds	r3, #3
 800bb2a:	f023 0303 	bic.w	r3, r3, #3
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d306      	bcc.n	800bb40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bb32:	8afa      	ldrh	r2, [r7, #22]
 800bb34:	88bb      	ldrh	r3, [r7, #4]
 800bb36:	3303      	adds	r3, #3
 800bb38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d201      	bcs.n	800bb44 <pbuf_alloc+0x160>
        return NULL;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e035      	b.n	800bbb0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bb44:	8afb      	ldrh	r3, [r7, #22]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff f9b8 	bl	800aebc <mem_malloc>
 800bb4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <pbuf_alloc+0x174>
        return NULL;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e02b      	b.n	800bbb0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb5a:	3310      	adds	r3, #16
 800bb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5e:	4413      	add	r3, r2
 800bb60:	3303      	adds	r3, #3
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	4618      	mov	r0, r3
 800bb68:	88b9      	ldrh	r1, [r7, #4]
 800bb6a:	88ba      	ldrh	r2, [r7, #4]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	887b      	ldrh	r3, [r7, #2]
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	460b      	mov	r3, r1
 800bb76:	4601      	mov	r1, r0
 800bb78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb7a:	f7ff ff09 	bl	800b990 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d010      	beq.n	800bbac <pbuf_alloc+0x1c8>
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <pbuf_alloc+0x1d4>)
 800bb8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bb90:	490d      	ldr	r1, [pc, #52]	; (800bbc8 <pbuf_alloc+0x1e4>)
 800bb92:	480b      	ldr	r0, [pc, #44]	; (800bbc0 <pbuf_alloc+0x1dc>)
 800bb94:	f00a fa0a 	bl	8015fac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bb98:	e008      	b.n	800bbac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <pbuf_alloc+0x1d4>)
 800bb9c:	f240 1227 	movw	r2, #295	; 0x127
 800bba0:	490a      	ldr	r1, [pc, #40]	; (800bbcc <pbuf_alloc+0x1e8>)
 800bba2:	4807      	ldr	r0, [pc, #28]	; (800bbc0 <pbuf_alloc+0x1dc>)
 800bba4:	f00a fa02 	bl	8015fac <iprintf>
      return NULL;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	e001      	b.n	800bbb0 <pbuf_alloc+0x1cc>
      break;
 800bbac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3728      	adds	r7, #40	; 0x28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	0801827c 	.word	0x0801827c
 800bbbc:	080182ac 	.word	0x080182ac
 800bbc0:	080182dc 	.word	0x080182dc
 800bbc4:	08018304 	.word	0x08018304
 800bbc8:	08018338 	.word	0x08018338
 800bbcc:	08018364 	.word	0x08018364

0800bbd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	807b      	strh	r3, [r7, #2]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bbe0:	883b      	ldrh	r3, [r7, #0]
 800bbe2:	2b41      	cmp	r3, #65	; 0x41
 800bbe4:	d009      	beq.n	800bbfa <pbuf_alloc_reference+0x2a>
 800bbe6:	883b      	ldrh	r3, [r7, #0]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d006      	beq.n	800bbfa <pbuf_alloc_reference+0x2a>
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <pbuf_alloc_reference+0x5c>)
 800bbee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bbf2:	490f      	ldr	r1, [pc, #60]	; (800bc30 <pbuf_alloc_reference+0x60>)
 800bbf4:	480f      	ldr	r0, [pc, #60]	; (800bc34 <pbuf_alloc_reference+0x64>)
 800bbf6:	f00a f9d9 	bl	8015fac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bbfa:	200b      	movs	r0, #11
 800bbfc:	f7ff fae0 	bl	800b1c0 <memp_malloc>
 800bc00:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e00b      	b.n	800bc24 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bc0c:	8879      	ldrh	r1, [r7, #2]
 800bc0e:	887a      	ldrh	r2, [r7, #2]
 800bc10:	2300      	movs	r3, #0
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	883b      	ldrh	r3, [r7, #0]
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f7ff feb7 	bl	800b990 <pbuf_init_alloced_pbuf>
  return p;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	0801827c 	.word	0x0801827c
 800bc30:	08018380 	.word	0x08018380
 800bc34:	080182dc 	.word	0x080182dc

0800bc38 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	607b      	str	r3, [r7, #4]
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
 800bc44:	460b      	mov	r3, r1
 800bc46:	81bb      	strh	r3, [r7, #12]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bc50:	8a7b      	ldrh	r3, [r7, #18]
 800bc52:	3303      	adds	r3, #3
 800bc54:	f023 0203 	bic.w	r2, r3, #3
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	441a      	add	r2, r3
 800bc5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d901      	bls.n	800bc66 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e018      	b.n	800bc98 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d007      	beq.n	800bc7c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bc6c:	8a7b      	ldrh	r3, [r7, #18]
 800bc6e:	3303      	adds	r3, #3
 800bc70:	f023 0303 	bic.w	r3, r3, #3
 800bc74:	6a3a      	ldr	r2, [r7, #32]
 800bc76:	4413      	add	r3, r2
 800bc78:	617b      	str	r3, [r7, #20]
 800bc7a:	e001      	b.n	800bc80 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	89b9      	ldrh	r1, [r7, #12]
 800bc84:	89ba      	ldrh	r2, [r7, #12]
 800bc86:	2302      	movs	r3, #2
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	897b      	ldrh	r3, [r7, #10]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	6979      	ldr	r1, [r7, #20]
 800bc92:	f7ff fe7d 	bl	800b990 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bc96:	687b      	ldr	r3, [r7, #4]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d106      	bne.n	800bcc0 <pbuf_realloc+0x20>
 800bcb2:	4b3a      	ldr	r3, [pc, #232]	; (800bd9c <pbuf_realloc+0xfc>)
 800bcb4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bcb8:	4939      	ldr	r1, [pc, #228]	; (800bda0 <pbuf_realloc+0x100>)
 800bcba:	483a      	ldr	r0, [pc, #232]	; (800bda4 <pbuf_realloc+0x104>)
 800bcbc:	f00a f976 	bl	8015fac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	887a      	ldrh	r2, [r7, #2]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d263      	bcs.n	800bd92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	891a      	ldrh	r2, [r3, #8]
 800bcce:	887b      	ldrh	r3, [r7, #2]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bcd4:	887b      	ldrh	r3, [r7, #2]
 800bcd6:	817b      	strh	r3, [r7, #10]
  q = p;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bcdc:	e018      	b.n	800bd10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	895b      	ldrh	r3, [r3, #10]
 800bce2:	897a      	ldrh	r2, [r7, #10]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	891a      	ldrh	r2, [r3, #8]
 800bcec:	893b      	ldrh	r3, [r7, #8]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <pbuf_realloc+0x70>
 800bd02:	4b26      	ldr	r3, [pc, #152]	; (800bd9c <pbuf_realloc+0xfc>)
 800bd04:	f240 12af 	movw	r2, #431	; 0x1af
 800bd08:	4927      	ldr	r1, [pc, #156]	; (800bda8 <pbuf_realloc+0x108>)
 800bd0a:	4826      	ldr	r0, [pc, #152]	; (800bda4 <pbuf_realloc+0x104>)
 800bd0c:	f00a f94e 	bl	8015fac <iprintf>
  while (rem_len > q->len) {
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	895b      	ldrh	r3, [r3, #10]
 800bd14:	897a      	ldrh	r2, [r7, #10]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d8e1      	bhi.n	800bcde <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	7b1b      	ldrb	r3, [r3, #12]
 800bd1e:	f003 030f 	and.w	r3, r3, #15
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d121      	bne.n	800bd6a <pbuf_realloc+0xca>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	895b      	ldrh	r3, [r3, #10]
 800bd2a:	897a      	ldrh	r2, [r7, #10]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d01c      	beq.n	800bd6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	7b5b      	ldrb	r3, [r3, #13]
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d116      	bne.n	800bd6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	897b      	ldrh	r3, [r7, #10]
 800bd48:	4413      	add	r3, r2
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7fe ffaa 	bl	800aca8 <mem_trim>
 800bd54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <pbuf_realloc+0xca>
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <pbuf_realloc+0xfc>)
 800bd5e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bd62:	4912      	ldr	r1, [pc, #72]	; (800bdac <pbuf_realloc+0x10c>)
 800bd64:	480f      	ldr	r0, [pc, #60]	; (800bda4 <pbuf_realloc+0x104>)
 800bd66:	f00a f921 	bl	8015fac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	897a      	ldrh	r2, [r7, #10]
 800bd6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	895a      	ldrh	r2, [r3, #10]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d004      	beq.n	800bd8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 f911 	bl	800bfac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	e000      	b.n	800bd94 <pbuf_realloc+0xf4>
    return;
 800bd92:	bf00      	nop

}
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	0801827c 	.word	0x0801827c
 800bda0:	08018394 	.word	0x08018394
 800bda4:	080182dc 	.word	0x080182dc
 800bda8:	080183ac 	.word	0x080183ac
 800bdac:	080183c4 	.word	0x080183c4

0800bdb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <pbuf_add_header_impl+0x22>
 800bdc4:	4b2b      	ldr	r3, [pc, #172]	; (800be74 <pbuf_add_header_impl+0xc4>)
 800bdc6:	f240 12df 	movw	r2, #479	; 0x1df
 800bdca:	492b      	ldr	r1, [pc, #172]	; (800be78 <pbuf_add_header_impl+0xc8>)
 800bdcc:	482b      	ldr	r0, [pc, #172]	; (800be7c <pbuf_add_header_impl+0xcc>)
 800bdce:	f00a f8ed 	bl	8015fac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <pbuf_add_header_impl+0x30>
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdde:	d301      	bcc.n	800bde4 <pbuf_add_header_impl+0x34>
    return 1;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e043      	b.n	800be6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <pbuf_add_header_impl+0x3e>
    return 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	e03e      	b.n	800be6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	891a      	ldrh	r2, [r3, #8]
 800bdf6:	8a7b      	ldrh	r3, [r7, #18]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	8a7a      	ldrh	r2, [r7, #18]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d901      	bls.n	800be06 <pbuf_add_header_impl+0x56>
    return 1;
 800be02:	2301      	movs	r3, #1
 800be04:	e032      	b.n	800be6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	7b1b      	ldrb	r3, [r3, #12]
 800be0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800be0c:	8a3b      	ldrh	r3, [r7, #16]
 800be0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00c      	beq.n	800be30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	425b      	negs	r3, r3
 800be1e:	4413      	add	r3, r2
 800be20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3310      	adds	r3, #16
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d20d      	bcs.n	800be48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e01d      	b.n	800be6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d006      	beq.n	800be44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	425b      	negs	r3, r3
 800be3e:	4413      	add	r3, r2
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	e001      	b.n	800be48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800be44:	2301      	movs	r3, #1
 800be46:	e011      	b.n	800be6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	895a      	ldrh	r2, [r3, #10]
 800be52:	8a7b      	ldrh	r3, [r7, #18]
 800be54:	4413      	add	r3, r2
 800be56:	b29a      	uxth	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	891a      	ldrh	r2, [r3, #8]
 800be60:	8a7b      	ldrh	r3, [r7, #18]
 800be62:	4413      	add	r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	811a      	strh	r2, [r3, #8]


  return 0;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	0801827c 	.word	0x0801827c
 800be78:	080183e0 	.word	0x080183e0
 800be7c:	080182dc 	.word	0x080182dc

0800be80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800be8a:	2200      	movs	r2, #0
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ff8e 	bl	800bdb0 <pbuf_add_header_impl>
 800be94:	4603      	mov	r3, r0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <pbuf_remove_header+0x1e>
 800beb0:	4b20      	ldr	r3, [pc, #128]	; (800bf34 <pbuf_remove_header+0x94>)
 800beb2:	f240 224b 	movw	r2, #587	; 0x24b
 800beb6:	4920      	ldr	r1, [pc, #128]	; (800bf38 <pbuf_remove_header+0x98>)
 800beb8:	4820      	ldr	r0, [pc, #128]	; (800bf3c <pbuf_remove_header+0x9c>)
 800beba:	f00a f877 	bl	8015fac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <pbuf_remove_header+0x2c>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beca:	d301      	bcc.n	800bed0 <pbuf_remove_header+0x30>
    return 1;
 800becc:	2301      	movs	r3, #1
 800bece:	e02c      	b.n	800bf2a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <pbuf_remove_header+0x3a>
    return 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	e027      	b.n	800bf2a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	895b      	ldrh	r3, [r3, #10]
 800bee2:	89fa      	ldrh	r2, [r7, #14]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d908      	bls.n	800befa <pbuf_remove_header+0x5a>
 800bee8:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <pbuf_remove_header+0x94>)
 800beea:	f240 2255 	movw	r2, #597	; 0x255
 800beee:	4914      	ldr	r1, [pc, #80]	; (800bf40 <pbuf_remove_header+0xa0>)
 800bef0:	4812      	ldr	r0, [pc, #72]	; (800bf3c <pbuf_remove_header+0x9c>)
 800bef2:	f00a f85b 	bl	8015fac <iprintf>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e017      	b.n	800bf2a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	441a      	add	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	895a      	ldrh	r2, [r3, #10]
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	891a      	ldrh	r2, [r3, #8]
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	0801827c 	.word	0x0801827c
 800bf38:	080183e0 	.word	0x080183e0
 800bf3c:	080182dc 	.word	0x080182dc
 800bf40:	080183ec 	.word	0x080183ec

0800bf44 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	807b      	strh	r3, [r7, #2]
 800bf50:	4613      	mov	r3, r2
 800bf52:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bf54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da08      	bge.n	800bf6e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bf5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf60:	425b      	negs	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ff9b 	bl	800bea0 <pbuf_remove_header>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	e007      	b.n	800bf7e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bf6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf72:	787a      	ldrb	r2, [r7, #1]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff ff1a 	bl	800bdb0 <pbuf_add_header_impl>
 800bf7c:	4603      	mov	r3, r0
  }
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bf92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf96:	2201      	movs	r2, #1
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ffd2 	bl	800bf44 <pbuf_header_impl>
 800bfa0:	4603      	mov	r3, r0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10b      	bne.n	800bfd2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d106      	bne.n	800bfce <pbuf_free+0x22>
 800bfc0:	4b3b      	ldr	r3, [pc, #236]	; (800c0b0 <pbuf_free+0x104>)
 800bfc2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bfc6:	493b      	ldr	r1, [pc, #236]	; (800c0b4 <pbuf_free+0x108>)
 800bfc8:	483b      	ldr	r0, [pc, #236]	; (800c0b8 <pbuf_free+0x10c>)
 800bfca:	f009 ffef 	bl	8015fac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e069      	b.n	800c0a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bfd6:	e062      	b.n	800c09e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bfd8:	f009 fdbc 	bl	8015b54 <sys_arch_protect>
 800bfdc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	7b9b      	ldrb	r3, [r3, #14]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d106      	bne.n	800bff4 <pbuf_free+0x48>
 800bfe6:	4b32      	ldr	r3, [pc, #200]	; (800c0b0 <pbuf_free+0x104>)
 800bfe8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bfec:	4933      	ldr	r1, [pc, #204]	; (800c0bc <pbuf_free+0x110>)
 800bfee:	4832      	ldr	r0, [pc, #200]	; (800c0b8 <pbuf_free+0x10c>)
 800bff0:	f009 ffdc 	bl	8015fac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7b9b      	ldrb	r3, [r3, #14]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	739a      	strb	r2, [r3, #14]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7b9b      	ldrb	r3, [r3, #14]
 800c004:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c006:	69b8      	ldr	r0, [r7, #24]
 800c008:	f009 fdb2 	bl	8015b70 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d143      	bne.n	800c09a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7b1b      	ldrb	r3, [r3, #12]
 800c01c:	f003 030f 	and.w	r3, r3, #15
 800c020:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7b5b      	ldrb	r3, [r3, #13]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d011      	beq.n	800c052 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <pbuf_free+0x9c>
 800c03a:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <pbuf_free+0x104>)
 800c03c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c040:	491f      	ldr	r1, [pc, #124]	; (800c0c0 <pbuf_free+0x114>)
 800c042:	481d      	ldr	r0, [pc, #116]	; (800c0b8 <pbuf_free+0x10c>)
 800c044:	f009 ffb2 	bl	8015fac <iprintf>
        pc->custom_free_function(p);
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
 800c050:	e01d      	b.n	800c08e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b02      	cmp	r3, #2
 800c056:	d104      	bne.n	800c062 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	200c      	movs	r0, #12
 800c05c:	f7ff f902 	bl	800b264 <memp_free>
 800c060:	e015      	b.n	800c08e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d104      	bne.n	800c072 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	200b      	movs	r0, #11
 800c06c:	f7ff f8fa 	bl	800b264 <memp_free>
 800c070:	e00d      	b.n	800c08e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <pbuf_free+0xd4>
          mem_free(p);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7fe fd85 	bl	800ab88 <mem_free>
 800c07e:	e006      	b.n	800c08e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c080:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <pbuf_free+0x104>)
 800c082:	f240 320f 	movw	r2, #783	; 0x30f
 800c086:	490f      	ldr	r1, [pc, #60]	; (800c0c4 <pbuf_free+0x118>)
 800c088:	480b      	ldr	r0, [pc, #44]	; (800c0b8 <pbuf_free+0x10c>)
 800c08a:	f009 ff8f 	bl	8015fac <iprintf>
        }
      }
      count++;
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
 800c090:	3301      	adds	r3, #1
 800c092:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	607b      	str	r3, [r7, #4]
 800c098:	e001      	b.n	800c09e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d199      	bne.n	800bfd8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c0a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0801827c 	.word	0x0801827c
 800c0b4:	080183e0 	.word	0x080183e0
 800c0b8:	080182dc 	.word	0x080182dc
 800c0bc:	0801840c 	.word	0x0801840c
 800c0c0:	08018424 	.word	0x08018424
 800c0c4:	08018448 	.word	0x08018448

0800c0c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c0d4:	e005      	b.n	800c0e2 <pbuf_clen+0x1a>
    ++len;
 800c0d6:	89fb      	ldrh	r3, [r7, #14]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f6      	bne.n	800c0d6 <pbuf_clen+0xe>
  }
  return len;
 800c0e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d016      	beq.n	800c134 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c106:	f009 fd25 	bl	8015b54 <sys_arch_protect>
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7b9b      	ldrb	r3, [r3, #14]
 800c110:	3301      	adds	r3, #1
 800c112:	b2da      	uxtb	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	739a      	strb	r2, [r3, #14]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f009 fd29 	bl	8015b70 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	7b9b      	ldrb	r3, [r3, #14]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <pbuf_ref+0x3c>
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <pbuf_ref+0x44>)
 800c128:	f240 3242 	movw	r2, #834	; 0x342
 800c12c:	4904      	ldr	r1, [pc, #16]	; (800c140 <pbuf_ref+0x48>)
 800c12e:	4805      	ldr	r0, [pc, #20]	; (800c144 <pbuf_ref+0x4c>)
 800c130:	f009 ff3c 	bl	8015fac <iprintf>
  }
}
 800c134:	bf00      	nop
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	0801827c 	.word	0x0801827c
 800c140:	0801845c 	.word	0x0801845c
 800c144:	080182dc 	.word	0x080182dc

0800c148 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <pbuf_cat+0x16>
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d107      	bne.n	800c16e <pbuf_cat+0x26>
 800c15e:	4b20      	ldr	r3, [pc, #128]	; (800c1e0 <pbuf_cat+0x98>)
 800c160:	f240 3259 	movw	r2, #857	; 0x359
 800c164:	491f      	ldr	r1, [pc, #124]	; (800c1e4 <pbuf_cat+0x9c>)
 800c166:	4820      	ldr	r0, [pc, #128]	; (800c1e8 <pbuf_cat+0xa0>)
 800c168:	f009 ff20 	bl	8015fac <iprintf>
 800c16c:	e034      	b.n	800c1d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e00a      	b.n	800c18a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	891a      	ldrh	r2, [r3, #8]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	891b      	ldrh	r3, [r3, #8]
 800c17c:	4413      	add	r3, r2
 800c17e:	b29a      	uxth	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1f0      	bne.n	800c174 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	891a      	ldrh	r2, [r3, #8]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d006      	beq.n	800c1ac <pbuf_cat+0x64>
 800c19e:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <pbuf_cat+0x98>)
 800c1a0:	f240 3262 	movw	r2, #866	; 0x362
 800c1a4:	4911      	ldr	r1, [pc, #68]	; (800c1ec <pbuf_cat+0xa4>)
 800c1a6:	4810      	ldr	r0, [pc, #64]	; (800c1e8 <pbuf_cat+0xa0>)
 800c1a8:	f009 ff00 	bl	8015fac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d006      	beq.n	800c1c2 <pbuf_cat+0x7a>
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <pbuf_cat+0x98>)
 800c1b6:	f240 3263 	movw	r2, #867	; 0x363
 800c1ba:	490d      	ldr	r1, [pc, #52]	; (800c1f0 <pbuf_cat+0xa8>)
 800c1bc:	480a      	ldr	r0, [pc, #40]	; (800c1e8 <pbuf_cat+0xa0>)
 800c1be:	f009 fef5 	bl	8015fac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	891a      	ldrh	r2, [r3, #8]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	891b      	ldrh	r3, [r3, #8]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	0801827c 	.word	0x0801827c
 800c1e4:	08018470 	.word	0x08018470
 800c1e8:	080182dc 	.word	0x080182dc
 800c1ec:	080184a8 	.word	0x080184a8
 800c1f0:	080184d8 	.word	0x080184d8

0800c1f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	2300      	movs	r3, #0
 800c204:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d008      	beq.n	800c21e <pbuf_copy+0x2a>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <pbuf_copy+0x2a>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	891a      	ldrh	r2, [r3, #8]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	891b      	ldrh	r3, [r3, #8]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d209      	bcs.n	800c232 <pbuf_copy+0x3e>
 800c21e:	4b57      	ldr	r3, [pc, #348]	; (800c37c <pbuf_copy+0x188>)
 800c220:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c224:	4956      	ldr	r1, [pc, #344]	; (800c380 <pbuf_copy+0x18c>)
 800c226:	4857      	ldr	r0, [pc, #348]	; (800c384 <pbuf_copy+0x190>)
 800c228:	f009 fec0 	bl	8015fac <iprintf>
 800c22c:	f06f 030f 	mvn.w	r3, #15
 800c230:	e09f      	b.n	800c372 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	895b      	ldrh	r3, [r3, #10]
 800c236:	461a      	mov	r2, r3
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	1ad2      	subs	r2, r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	895b      	ldrh	r3, [r3, #10]
 800c240:	4619      	mov	r1, r3
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	429a      	cmp	r2, r3
 800c248:	d306      	bcc.n	800c258 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	895b      	ldrh	r3, [r3, #10]
 800c24e:	461a      	mov	r2, r3
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e005      	b.n	800c264 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	895b      	ldrh	r3, [r3, #10]
 800c25c:	461a      	mov	r2, r3
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685a      	ldr	r2, [r3, #4]
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	18d0      	adds	r0, r2, r3
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	4413      	add	r3, r2
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	4619      	mov	r1, r3
 800c278:	f009 fdbe 	bl	8015df8 <memcpy>
    offset_to += len;
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	4413      	add	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	895b      	ldrh	r3, [r3, #10]
 800c290:	461a      	mov	r2, r3
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	4293      	cmp	r3, r2
 800c296:	d906      	bls.n	800c2a6 <pbuf_copy+0xb2>
 800c298:	4b38      	ldr	r3, [pc, #224]	; (800c37c <pbuf_copy+0x188>)
 800c29a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c29e:	493a      	ldr	r1, [pc, #232]	; (800c388 <pbuf_copy+0x194>)
 800c2a0:	4838      	ldr	r0, [pc, #224]	; (800c384 <pbuf_copy+0x190>)
 800c2a2:	f009 fe83 	bl	8015fac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	895b      	ldrh	r3, [r3, #10]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d906      	bls.n	800c2c0 <pbuf_copy+0xcc>
 800c2b2:	4b32      	ldr	r3, [pc, #200]	; (800c37c <pbuf_copy+0x188>)
 800c2b4:	f240 32da 	movw	r2, #986	; 0x3da
 800c2b8:	4934      	ldr	r1, [pc, #208]	; (800c38c <pbuf_copy+0x198>)
 800c2ba:	4832      	ldr	r0, [pc, #200]	; (800c384 <pbuf_copy+0x190>)
 800c2bc:	f009 fe76 	bl	8015fac <iprintf>
    if (offset_from >= p_from->len) {
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	895b      	ldrh	r3, [r3, #10]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d304      	bcc.n	800c2d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	895b      	ldrh	r3, [r3, #10]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d114      	bne.n	800c30c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10c      	bne.n	800c30c <pbuf_copy+0x118>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <pbuf_copy+0x118>
 800c2f8:	4b20      	ldr	r3, [pc, #128]	; (800c37c <pbuf_copy+0x188>)
 800c2fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c2fe:	4924      	ldr	r1, [pc, #144]	; (800c390 <pbuf_copy+0x19c>)
 800c300:	4820      	ldr	r0, [pc, #128]	; (800c384 <pbuf_copy+0x190>)
 800c302:	f009 fe53 	bl	8015fac <iprintf>
 800c306:	f06f 030f 	mvn.w	r3, #15
 800c30a:	e032      	b.n	800c372 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d013      	beq.n	800c33a <pbuf_copy+0x146>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	895a      	ldrh	r2, [r3, #10]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	891b      	ldrh	r3, [r3, #8]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d10d      	bne.n	800c33a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d009      	beq.n	800c33a <pbuf_copy+0x146>
 800c326:	4b15      	ldr	r3, [pc, #84]	; (800c37c <pbuf_copy+0x188>)
 800c328:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c32c:	4919      	ldr	r1, [pc, #100]	; (800c394 <pbuf_copy+0x1a0>)
 800c32e:	4815      	ldr	r0, [pc, #84]	; (800c384 <pbuf_copy+0x190>)
 800c330:	f009 fe3c 	bl	8015fac <iprintf>
 800c334:	f06f 0305 	mvn.w	r3, #5
 800c338:	e01b      	b.n	800c372 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d013      	beq.n	800c368 <pbuf_copy+0x174>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	895a      	ldrh	r2, [r3, #10]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	891b      	ldrh	r3, [r3, #8]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d10d      	bne.n	800c368 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <pbuf_copy+0x174>
 800c354:	4b09      	ldr	r3, [pc, #36]	; (800c37c <pbuf_copy+0x188>)
 800c356:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c35a:	490e      	ldr	r1, [pc, #56]	; (800c394 <pbuf_copy+0x1a0>)
 800c35c:	4809      	ldr	r0, [pc, #36]	; (800c384 <pbuf_copy+0x190>)
 800c35e:	f009 fe25 	bl	8015fac <iprintf>
 800c362:	f06f 0305 	mvn.w	r3, #5
 800c366:	e004      	b.n	800c372 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f47f af61 	bne.w	800c232 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	0801827c 	.word	0x0801827c
 800c380:	08018524 	.word	0x08018524
 800c384:	080182dc 	.word	0x080182dc
 800c388:	08018554 	.word	0x08018554
 800c38c:	0801856c 	.word	0x0801856c
 800c390:	08018588 	.word	0x08018588
 800c394:	08018598 	.word	0x08018598

0800c398 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	80fb      	strh	r3, [r7, #6]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d108      	bne.n	800c3ce <pbuf_copy_partial+0x36>
 800c3bc:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <pbuf_copy_partial+0xd4>)
 800c3be:	f240 420a 	movw	r2, #1034	; 0x40a
 800c3c2:	492b      	ldr	r1, [pc, #172]	; (800c470 <pbuf_copy_partial+0xd8>)
 800c3c4:	482b      	ldr	r0, [pc, #172]	; (800c474 <pbuf_copy_partial+0xdc>)
 800c3c6:	f009 fdf1 	bl	8015fac <iprintf>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e04a      	b.n	800c464 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d108      	bne.n	800c3e6 <pbuf_copy_partial+0x4e>
 800c3d4:	4b25      	ldr	r3, [pc, #148]	; (800c46c <pbuf_copy_partial+0xd4>)
 800c3d6:	f240 420b 	movw	r2, #1035	; 0x40b
 800c3da:	4927      	ldr	r1, [pc, #156]	; (800c478 <pbuf_copy_partial+0xe0>)
 800c3dc:	4825      	ldr	r0, [pc, #148]	; (800c474 <pbuf_copy_partial+0xdc>)
 800c3de:	f009 fde5 	bl	8015fac <iprintf>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e03e      	b.n	800c464 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	e034      	b.n	800c456 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c3ec:	88bb      	ldrh	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <pbuf_copy_partial+0x70>
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	895b      	ldrh	r3, [r3, #10]
 800c3f6:	88ba      	ldrh	r2, [r7, #4]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d305      	bcc.n	800c408 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	895b      	ldrh	r3, [r3, #10]
 800c400:	88ba      	ldrh	r2, [r7, #4]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	80bb      	strh	r3, [r7, #4]
 800c406:	e023      	b.n	800c450 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	895a      	ldrh	r2, [r3, #10]
 800c40c:	88bb      	ldrh	r3, [r7, #4]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c412:	8b3a      	ldrh	r2, [r7, #24]
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	429a      	cmp	r2, r3
 800c418:	d901      	bls.n	800c41e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c41e:	8b7b      	ldrh	r3, [r7, #26]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	18d0      	adds	r0, r2, r3
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	88bb      	ldrh	r3, [r7, #4]
 800c42a:	4413      	add	r3, r2
 800c42c:	8b3a      	ldrh	r2, [r7, #24]
 800c42e:	4619      	mov	r1, r3
 800c430:	f009 fce2 	bl	8015df8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c434:	8afa      	ldrh	r2, [r7, #22]
 800c436:	8b3b      	ldrh	r3, [r7, #24]
 800c438:	4413      	add	r3, r2
 800c43a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c43c:	8b7a      	ldrh	r2, [r7, #26]
 800c43e:	8b3b      	ldrh	r3, [r7, #24]
 800c440:	4413      	add	r3, r2
 800c442:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c444:	88fa      	ldrh	r2, [r7, #6]
 800c446:	8b3b      	ldrh	r3, [r7, #24]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <pbuf_copy_partial+0xca>
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1c4      	bne.n	800c3ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c462:	8afb      	ldrh	r3, [r7, #22]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3720      	adds	r7, #32
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	0801827c 	.word	0x0801827c
 800c470:	080185c4 	.word	0x080185c4
 800c474:	080182dc 	.word	0x080182dc
 800c478:	080185e4 	.word	0x080185e4

0800c47c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	603a      	str	r2, [r7, #0]
 800c486:	71fb      	strb	r3, [r7, #7]
 800c488:	460b      	mov	r3, r1
 800c48a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	8919      	ldrh	r1, [r3, #8]
 800c490:	88ba      	ldrh	r2, [r7, #4]
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff faa5 	bl	800b9e4 <pbuf_alloc>
 800c49a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <pbuf_clone+0x2a>
    return NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e011      	b.n	800c4ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff fea3 	bl	800c1f4 <pbuf_copy>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c4b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d006      	beq.n	800c4c8 <pbuf_clone+0x4c>
 800c4ba:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <pbuf_clone+0x58>)
 800c4bc:	f240 5224 	movw	r2, #1316	; 0x524
 800c4c0:	4905      	ldr	r1, [pc, #20]	; (800c4d8 <pbuf_clone+0x5c>)
 800c4c2:	4806      	ldr	r0, [pc, #24]	; (800c4dc <pbuf_clone+0x60>)
 800c4c4:	f009 fd72 	bl	8015fac <iprintf>
  return q;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0801827c 	.word	0x0801827c
 800c4d8:	080186f0 	.word	0x080186f0
 800c4dc:	080182dc 	.word	0x080182dc

0800c4e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c4e4:	f009 fd7a 	bl	8015fdc <rand>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	4b01      	ldr	r3, [pc, #4]	; (800c500 <tcp_init+0x20>)
 800c4fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c4fc:	bf00      	nop
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000014 	.word	0x20000014

0800c504 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7d1b      	ldrb	r3, [r3, #20]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d105      	bne.n	800c520 <tcp_free+0x1c>
 800c514:	4b06      	ldr	r3, [pc, #24]	; (800c530 <tcp_free+0x2c>)
 800c516:	22d4      	movs	r2, #212	; 0xd4
 800c518:	4906      	ldr	r1, [pc, #24]	; (800c534 <tcp_free+0x30>)
 800c51a:	4807      	ldr	r0, [pc, #28]	; (800c538 <tcp_free+0x34>)
 800c51c:	f009 fd46 	bl	8015fac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c520:	6879      	ldr	r1, [r7, #4]
 800c522:	2001      	movs	r0, #1
 800c524:	f7fe fe9e 	bl	800b264 <memp_free>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	0801877c 	.word	0x0801877c
 800c534:	080187ac 	.word	0x080187ac
 800c538:	080187c0 	.word	0x080187c0

0800c53c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7d1b      	ldrb	r3, [r3, #20]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d105      	bne.n	800c558 <tcp_free_listen+0x1c>
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <tcp_free_listen+0x2c>)
 800c54e:	22df      	movs	r2, #223	; 0xdf
 800c550:	4906      	ldr	r1, [pc, #24]	; (800c56c <tcp_free_listen+0x30>)
 800c552:	4807      	ldr	r0, [pc, #28]	; (800c570 <tcp_free_listen+0x34>)
 800c554:	f009 fd2a 	bl	8015fac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c558:	6879      	ldr	r1, [r7, #4]
 800c55a:	2002      	movs	r0, #2
 800c55c:	f7fe fe82 	bl	800b264 <memp_free>
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801877c 	.word	0x0801877c
 800c56c:	080187e8 	.word	0x080187e8
 800c570:	080187c0 	.word	0x080187c0

0800c574 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c578:	f001 f8f4 	bl	800d764 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c57c:	4b07      	ldr	r3, [pc, #28]	; (800c59c <tcp_tmr+0x28>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	3301      	adds	r3, #1
 800c582:	b2da      	uxtb	r2, r3
 800c584:	4b05      	ldr	r3, [pc, #20]	; (800c59c <tcp_tmr+0x28>)
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	4b04      	ldr	r3, [pc, #16]	; (800c59c <tcp_tmr+0x28>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c594:	f000 fda6 	bl	800d0e4 <tcp_slowtmr>
  }
}
 800c598:	bf00      	nop
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	20004ad5 	.word	0x20004ad5

0800c5a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <tcp_remove_listener+0x1c>
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <tcp_remove_listener+0x48>)
 800c5b2:	22ff      	movs	r2, #255	; 0xff
 800c5b4:	490d      	ldr	r1, [pc, #52]	; (800c5ec <tcp_remove_listener+0x4c>)
 800c5b6:	480e      	ldr	r0, [pc, #56]	; (800c5f0 <tcp_remove_listener+0x50>)
 800c5b8:	f009 fcf8 	bl	8015fac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	e00a      	b.n	800c5d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d102      	bne.n	800c5d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1f1      	bne.n	800c5c2 <tcp_remove_listener+0x22>
    }
  }
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	0801877c 	.word	0x0801877c
 800c5ec:	08018804 	.word	0x08018804
 800c5f0:	080187c0 	.word	0x080187c0

0800c5f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <tcp_listen_closed+0x1c>
 800c602:	4b14      	ldr	r3, [pc, #80]	; (800c654 <tcp_listen_closed+0x60>)
 800c604:	f240 1211 	movw	r2, #273	; 0x111
 800c608:	4913      	ldr	r1, [pc, #76]	; (800c658 <tcp_listen_closed+0x64>)
 800c60a:	4814      	ldr	r0, [pc, #80]	; (800c65c <tcp_listen_closed+0x68>)
 800c60c:	f009 fcce 	bl	8015fac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7d1b      	ldrb	r3, [r3, #20]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d006      	beq.n	800c626 <tcp_listen_closed+0x32>
 800c618:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <tcp_listen_closed+0x60>)
 800c61a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c61e:	4910      	ldr	r1, [pc, #64]	; (800c660 <tcp_listen_closed+0x6c>)
 800c620:	480e      	ldr	r0, [pc, #56]	; (800c65c <tcp_listen_closed+0x68>)
 800c622:	f009 fcc3 	bl	8015fac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c626:	2301      	movs	r3, #1
 800c628:	60fb      	str	r3, [r7, #12]
 800c62a:	e00b      	b.n	800c644 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c62c:	4a0d      	ldr	r2, [pc, #52]	; (800c664 <tcp_listen_closed+0x70>)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff ffb1 	bl	800c5a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3301      	adds	r3, #1
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b03      	cmp	r3, #3
 800c648:	d9f0      	bls.n	800c62c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c64a:	bf00      	nop
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	0801877c 	.word	0x0801877c
 800c658:	0801882c 	.word	0x0801882c
 800c65c:	080187c0 	.word	0x080187c0
 800c660:	08018838 	.word	0x08018838
 800c664:	0801a83c 	.word	0x0801a83c

0800c668 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c668:	b5b0      	push	{r4, r5, r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af04      	add	r7, sp, #16
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d106      	bne.n	800c688 <tcp_close_shutdown+0x20>
 800c67a:	4b63      	ldr	r3, [pc, #396]	; (800c808 <tcp_close_shutdown+0x1a0>)
 800c67c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c680:	4962      	ldr	r1, [pc, #392]	; (800c80c <tcp_close_shutdown+0x1a4>)
 800c682:	4863      	ldr	r0, [pc, #396]	; (800c810 <tcp_close_shutdown+0x1a8>)
 800c684:	f009 fc92 	bl	8015fac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c688:	78fb      	ldrb	r3, [r7, #3]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d066      	beq.n	800c75c <tcp_close_shutdown+0xf4>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	2b04      	cmp	r3, #4
 800c694:	d003      	beq.n	800c69e <tcp_close_shutdown+0x36>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7d1b      	ldrb	r3, [r3, #20]
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	d15e      	bne.n	800c75c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <tcp_close_shutdown+0x48>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c6ae:	d055      	beq.n	800c75c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	8b5b      	ldrh	r3, [r3, #26]
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <tcp_close_shutdown+0x62>
 800c6bc:	4b52      	ldr	r3, [pc, #328]	; (800c808 <tcp_close_shutdown+0x1a0>)
 800c6be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c6c2:	4954      	ldr	r1, [pc, #336]	; (800c814 <tcp_close_shutdown+0x1ac>)
 800c6c4:	4852      	ldr	r0, [pc, #328]	; (800c810 <tcp_close_shutdown+0x1a8>)
 800c6c6:	f009 fc71 	bl	8015fac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c6d2:	687d      	ldr	r5, [r7, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	8ad2      	ldrh	r2, [r2, #22]
 800c6dc:	6879      	ldr	r1, [r7, #4]
 800c6de:	8b09      	ldrh	r1, [r1, #24]
 800c6e0:	9102      	str	r1, [sp, #8]
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	462b      	mov	r3, r5
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f005 fe05 	bl	80122fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 fbe6 	bl	800dec4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c6f8:	4b47      	ldr	r3, [pc, #284]	; (800c818 <tcp_close_shutdown+0x1b0>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d105      	bne.n	800c70e <tcp_close_shutdown+0xa6>
 800c702:	4b45      	ldr	r3, [pc, #276]	; (800c818 <tcp_close_shutdown+0x1b0>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	4a43      	ldr	r2, [pc, #268]	; (800c818 <tcp_close_shutdown+0x1b0>)
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	e013      	b.n	800c736 <tcp_close_shutdown+0xce>
 800c70e:	4b42      	ldr	r3, [pc, #264]	; (800c818 <tcp_close_shutdown+0x1b0>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e00c      	b.n	800c730 <tcp_close_shutdown+0xc8>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d104      	bne.n	800c72a <tcp_close_shutdown+0xc2>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	60da      	str	r2, [r3, #12]
 800c728:	e005      	b.n	800c736 <tcp_close_shutdown+0xce>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1ef      	bne.n	800c716 <tcp_close_shutdown+0xae>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	60da      	str	r2, [r3, #12]
 800c73c:	4b37      	ldr	r3, [pc, #220]	; (800c81c <tcp_close_shutdown+0x1b4>)
 800c73e:	2201      	movs	r2, #1
 800c740:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c742:	4b37      	ldr	r3, [pc, #220]	; (800c820 <tcp_close_shutdown+0x1b8>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d102      	bne.n	800c752 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c74c:	f004 f87a 	bl	8010844 <tcp_trigger_input_pcb_close>
 800c750:	e002      	b.n	800c758 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff fed6 	bl	800c504 <tcp_free>
      }
      return ERR_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	e050      	b.n	800c7fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7d1b      	ldrb	r3, [r3, #20]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d03b      	beq.n	800c7dc <tcp_close_shutdown+0x174>
 800c764:	2b02      	cmp	r3, #2
 800c766:	dc44      	bgt.n	800c7f2 <tcp_close_shutdown+0x18a>
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <tcp_close_shutdown+0x10a>
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d02a      	beq.n	800c7c6 <tcp_close_shutdown+0x15e>
 800c770:	e03f      	b.n	800c7f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8adb      	ldrh	r3, [r3, #22]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d021      	beq.n	800c7be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c77a:	4b2a      	ldr	r3, [pc, #168]	; (800c824 <tcp_close_shutdown+0x1bc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	429a      	cmp	r2, r3
 800c782:	d105      	bne.n	800c790 <tcp_close_shutdown+0x128>
 800c784:	4b27      	ldr	r3, [pc, #156]	; (800c824 <tcp_close_shutdown+0x1bc>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	4a26      	ldr	r2, [pc, #152]	; (800c824 <tcp_close_shutdown+0x1bc>)
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	e013      	b.n	800c7b8 <tcp_close_shutdown+0x150>
 800c790:	4b24      	ldr	r3, [pc, #144]	; (800c824 <tcp_close_shutdown+0x1bc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	60bb      	str	r3, [r7, #8]
 800c796:	e00c      	b.n	800c7b2 <tcp_close_shutdown+0x14a>
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d104      	bne.n	800c7ac <tcp_close_shutdown+0x144>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68da      	ldr	r2, [r3, #12]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	60da      	str	r2, [r3, #12]
 800c7aa:	e005      	b.n	800c7b8 <tcp_close_shutdown+0x150>
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	60bb      	str	r3, [r7, #8]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1ef      	bne.n	800c798 <tcp_close_shutdown+0x130>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7ff fea0 	bl	800c504 <tcp_free>
      break;
 800c7c4:	e01a      	b.n	800c7fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff ff14 	bl	800c5f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	4816      	ldr	r0, [pc, #88]	; (800c828 <tcp_close_shutdown+0x1c0>)
 800c7d0:	f001 fbc8 	bl	800df64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff feb1 	bl	800c53c <tcp_free_listen>
      break;
 800c7da:	e00f      	b.n	800c7fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	480e      	ldr	r0, [pc, #56]	; (800c818 <tcp_close_shutdown+0x1b0>)
 800c7e0:	f001 fbc0 	bl	800df64 <tcp_pcb_remove>
 800c7e4:	4b0d      	ldr	r3, [pc, #52]	; (800c81c <tcp_close_shutdown+0x1b4>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff fe8a 	bl	800c504 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c7f0:	e004      	b.n	800c7fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f81a 	bl	800c82c <tcp_close_shutdown_fin>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	e000      	b.n	800c7fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bdb0      	pop	{r4, r5, r7, pc}
 800c806:	bf00      	nop
 800c808:	0801877c 	.word	0x0801877c
 800c80c:	08018850 	.word	0x08018850
 800c810:	080187c0 	.word	0x080187c0
 800c814:	08018870 	.word	0x08018870
 800c818:	2000b5e4 	.word	0x2000b5e4
 800c81c:	2000b5e0 	.word	0x2000b5e0
 800c820:	2000b5f8 	.word	0x2000b5f8
 800c824:	2000b5f0 	.word	0x2000b5f0
 800c828:	2000b5ec 	.word	0x2000b5ec

0800c82c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <tcp_close_shutdown_fin+0x1c>
 800c83a:	4b2e      	ldr	r3, [pc, #184]	; (800c8f4 <tcp_close_shutdown_fin+0xc8>)
 800c83c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c840:	492d      	ldr	r1, [pc, #180]	; (800c8f8 <tcp_close_shutdown_fin+0xcc>)
 800c842:	482e      	ldr	r0, [pc, #184]	; (800c8fc <tcp_close_shutdown_fin+0xd0>)
 800c844:	f009 fbb2 	bl	8015fac <iprintf>

  switch (pcb->state) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	2b07      	cmp	r3, #7
 800c84e:	d020      	beq.n	800c892 <tcp_close_shutdown_fin+0x66>
 800c850:	2b07      	cmp	r3, #7
 800c852:	dc2b      	bgt.n	800c8ac <tcp_close_shutdown_fin+0x80>
 800c854:	2b03      	cmp	r3, #3
 800c856:	d002      	beq.n	800c85e <tcp_close_shutdown_fin+0x32>
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d00d      	beq.n	800c878 <tcp_close_shutdown_fin+0x4c>
 800c85c:	e026      	b.n	800c8ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f004 fe5a 	bl	8011518 <tcp_send_fin>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d11f      	bne.n	800c8b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2205      	movs	r2, #5
 800c874:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c876:	e01b      	b.n	800c8b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f004 fe4d 	bl	8011518 <tcp_send_fin>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d114      	bne.n	800c8b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2205      	movs	r2, #5
 800c88e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c890:	e010      	b.n	800c8b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f004 fe40 	bl	8011518 <tcp_send_fin>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c89c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d109      	bne.n	800c8b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2209      	movs	r2, #9
 800c8a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c8aa:	e005      	b.n	800c8b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e01c      	b.n	800c8ea <tcp_close_shutdown_fin+0xbe>
      break;
 800c8b0:	bf00      	nop
 800c8b2:	e002      	b.n	800c8ba <tcp_close_shutdown_fin+0x8e>
      break;
 800c8b4:	bf00      	nop
 800c8b6:	e000      	b.n	800c8ba <tcp_close_shutdown_fin+0x8e>
      break;
 800c8b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d103      	bne.n	800c8ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f004 ff66 	bl	8011794 <tcp_output>
 800c8c8:	e00d      	b.n	800c8e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d108      	bne.n	800c8e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8b5b      	ldrh	r3, [r3, #26]
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e001      	b.n	800c8ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	0801877c 	.word	0x0801877c
 800c8f8:	0801882c 	.word	0x0801882c
 800c8fc:	080187c0 	.word	0x080187c0

0800c900 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d109      	bne.n	800c922 <tcp_close+0x22>
 800c90e:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <tcp_close+0x4c>)
 800c910:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c914:	490e      	ldr	r1, [pc, #56]	; (800c950 <tcp_close+0x50>)
 800c916:	480f      	ldr	r0, [pc, #60]	; (800c954 <tcp_close+0x54>)
 800c918:	f009 fb48 	bl	8015fac <iprintf>
 800c91c:	f06f 030f 	mvn.w	r3, #15
 800c920:	e00f      	b.n	800c942 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7d1b      	ldrb	r3, [r3, #20]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d006      	beq.n	800c938 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	8b5b      	ldrh	r3, [r3, #26]
 800c92e:	f043 0310 	orr.w	r3, r3, #16
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c938:	2101      	movs	r1, #1
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff fe94 	bl	800c668 <tcp_close_shutdown>
 800c940:	4603      	mov	r3, r0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	0801877c 	.word	0x0801877c
 800c950:	0801888c 	.word	0x0801888c
 800c954:	080187c0 	.word	0x080187c0

0800c958 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d109      	bne.n	800c97e <tcp_shutdown+0x26>
 800c96a:	4b26      	ldr	r3, [pc, #152]	; (800ca04 <tcp_shutdown+0xac>)
 800c96c:	f240 2207 	movw	r2, #519	; 0x207
 800c970:	4925      	ldr	r1, [pc, #148]	; (800ca08 <tcp_shutdown+0xb0>)
 800c972:	4826      	ldr	r0, [pc, #152]	; (800ca0c <tcp_shutdown+0xb4>)
 800c974:	f009 fb1a 	bl	8015fac <iprintf>
 800c978:	f06f 030f 	mvn.w	r3, #15
 800c97c:	e03d      	b.n	800c9fa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	7d1b      	ldrb	r3, [r3, #20]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d102      	bne.n	800c98c <tcp_shutdown+0x34>
    return ERR_CONN;
 800c986:	f06f 030a 	mvn.w	r3, #10
 800c98a:	e036      	b.n	800c9fa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01b      	beq.n	800c9ca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	8b5b      	ldrh	r3, [r3, #26]
 800c996:	f043 0310 	orr.w	r3, r3, #16
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d005      	beq.n	800c9b2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7ff fe5d 	bl	800c668 <tcp_close_shutdown>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	e023      	b.n	800c9fa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff faf4 	bl	800bfac <pbuf_free>
      pcb->refused_data = NULL;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d013      	beq.n	800c9f8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	7d1b      	ldrb	r3, [r3, #20]
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	dc02      	bgt.n	800c9de <tcp_shutdown+0x86>
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	da02      	bge.n	800c9e2 <tcp_shutdown+0x8a>
 800c9dc:	e009      	b.n	800c9f2 <tcp_shutdown+0x9a>
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	d107      	bne.n	800c9f2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f7ff fe3d 	bl	800c668 <tcp_close_shutdown>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	e003      	b.n	800c9fa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c9f2:	f06f 030a 	mvn.w	r3, #10
 800c9f6:	e000      	b.n	800c9fa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	0801877c 	.word	0x0801877c
 800ca08:	080188a4 	.word	0x080188a4
 800ca0c:	080187c0 	.word	0x080187c0

0800ca10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08e      	sub	sp, #56	; 0x38
 800ca14:	af04      	add	r7, sp, #16
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d107      	bne.n	800ca30 <tcp_abandon+0x20>
 800ca20:	4b52      	ldr	r3, [pc, #328]	; (800cb6c <tcp_abandon+0x15c>)
 800ca22:	f240 223d 	movw	r2, #573	; 0x23d
 800ca26:	4952      	ldr	r1, [pc, #328]	; (800cb70 <tcp_abandon+0x160>)
 800ca28:	4852      	ldr	r0, [pc, #328]	; (800cb74 <tcp_abandon+0x164>)
 800ca2a:	f009 fabf 	bl	8015fac <iprintf>
 800ca2e:	e099      	b.n	800cb64 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7d1b      	ldrb	r3, [r3, #20]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d106      	bne.n	800ca46 <tcp_abandon+0x36>
 800ca38:	4b4c      	ldr	r3, [pc, #304]	; (800cb6c <tcp_abandon+0x15c>)
 800ca3a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ca3e:	494e      	ldr	r1, [pc, #312]	; (800cb78 <tcp_abandon+0x168>)
 800ca40:	484c      	ldr	r0, [pc, #304]	; (800cb74 <tcp_abandon+0x164>)
 800ca42:	f009 fab3 	bl	8015fac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	7d1b      	ldrb	r3, [r3, #20]
 800ca4a:	2b0a      	cmp	r3, #10
 800ca4c:	d107      	bne.n	800ca5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	484a      	ldr	r0, [pc, #296]	; (800cb7c <tcp_abandon+0x16c>)
 800ca52:	f001 fa87 	bl	800df64 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff fd54 	bl	800c504 <tcp_free>
 800ca5c:	e082      	b.n	800cb64 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7d1b      	ldrb	r3, [r3, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d126      	bne.n	800cad6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	8adb      	ldrh	r3, [r3, #22]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d02e      	beq.n	800caee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca90:	4b3b      	ldr	r3, [pc, #236]	; (800cb80 <tcp_abandon+0x170>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d105      	bne.n	800caa6 <tcp_abandon+0x96>
 800ca9a:	4b39      	ldr	r3, [pc, #228]	; (800cb80 <tcp_abandon+0x170>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a37      	ldr	r2, [pc, #220]	; (800cb80 <tcp_abandon+0x170>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	e013      	b.n	800cace <tcp_abandon+0xbe>
 800caa6:	4b36      	ldr	r3, [pc, #216]	; (800cb80 <tcp_abandon+0x170>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	e00c      	b.n	800cac8 <tcp_abandon+0xb8>
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d104      	bne.n	800cac2 <tcp_abandon+0xb2>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	60da      	str	r2, [r3, #12]
 800cac0:	e005      	b.n	800cace <tcp_abandon+0xbe>
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1ef      	bne.n	800caae <tcp_abandon+0x9e>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	60da      	str	r2, [r3, #12]
 800cad4:	e00b      	b.n	800caee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8adb      	ldrh	r3, [r3, #22]
 800cade:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cae0:	6879      	ldr	r1, [r7, #4]
 800cae2:	4828      	ldr	r0, [pc, #160]	; (800cb84 <tcp_abandon+0x174>)
 800cae4:	f001 fa3e 	bl	800df64 <tcp_pcb_remove>
 800cae8:	4b27      	ldr	r3, [pc, #156]	; (800cb88 <tcp_abandon+0x178>)
 800caea:	2201      	movs	r2, #1
 800caec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d004      	beq.n	800cb00 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 ff12 	bl	800d924 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d004      	beq.n	800cb12 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 ff09 	bl	800d924 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d004      	beq.n	800cb24 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 ff00 	bl	800d924 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00e      	beq.n	800cb48 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	8b12      	ldrh	r2, [r2, #24]
 800cb34:	9202      	str	r2, [sp, #8]
 800cb36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb38:	9201      	str	r2, [sp, #4]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	69b9      	ldr	r1, [r7, #24]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f005 fbda 	bl	80122fc <tcp_rst>
    }
    last_state = pcb->state;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	7d1b      	ldrb	r3, [r3, #20]
 800cb4c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fcd8 	bl	800c504 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d004      	beq.n	800cb64 <tcp_abandon+0x154>
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	f06f 010c 	mvn.w	r1, #12
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	4798      	blx	r3
  }
}
 800cb64:	3728      	adds	r7, #40	; 0x28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0801877c 	.word	0x0801877c
 800cb70:	080188c0 	.word	0x080188c0
 800cb74:	080187c0 	.word	0x080187c0
 800cb78:	080188dc 	.word	0x080188dc
 800cb7c:	2000b5f4 	.word	0x2000b5f4
 800cb80:	2000b5f0 	.word	0x2000b5f0
 800cb84:	2000b5e4 	.word	0x2000b5e4
 800cb88:	2000b5e0 	.word	0x2000b5e0

0800cb8c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cb94:	2101      	movs	r1, #1
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff ff3a 	bl	800ca10 <tcp_abandon>
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cbb2:	2304      	movs	r3, #4
 800cbb4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cbbc:	4b3e      	ldr	r3, [pc, #248]	; (800ccb8 <tcp_bind+0x114>)
 800cbbe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d109      	bne.n	800cbda <tcp_bind+0x36>
 800cbc6:	4b3d      	ldr	r3, [pc, #244]	; (800ccbc <tcp_bind+0x118>)
 800cbc8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cbcc:	493c      	ldr	r1, [pc, #240]	; (800ccc0 <tcp_bind+0x11c>)
 800cbce:	483d      	ldr	r0, [pc, #244]	; (800ccc4 <tcp_bind+0x120>)
 800cbd0:	f009 f9ec 	bl	8015fac <iprintf>
 800cbd4:	f06f 030f 	mvn.w	r3, #15
 800cbd8:	e06a      	b.n	800ccb0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	7d1b      	ldrb	r3, [r3, #20]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d009      	beq.n	800cbf6 <tcp_bind+0x52>
 800cbe2:	4b36      	ldr	r3, [pc, #216]	; (800ccbc <tcp_bind+0x118>)
 800cbe4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cbe8:	4937      	ldr	r1, [pc, #220]	; (800ccc8 <tcp_bind+0x124>)
 800cbea:	4836      	ldr	r0, [pc, #216]	; (800ccc4 <tcp_bind+0x120>)
 800cbec:	f009 f9de 	bl	8015fac <iprintf>
 800cbf0:	f06f 0305 	mvn.w	r3, #5
 800cbf4:	e05c      	b.n	800ccb0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d109      	bne.n	800cc10 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cbfc:	f000 f914 	bl	800ce28 <tcp_new_port>
 800cc00:	4603      	mov	r3, r0
 800cc02:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cc04:	88fb      	ldrh	r3, [r7, #6]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d135      	bne.n	800cc76 <tcp_bind+0xd2>
      return ERR_BUF;
 800cc0a:	f06f 0301 	mvn.w	r3, #1
 800cc0e:	e04f      	b.n	800ccb0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cc10:	2300      	movs	r3, #0
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	e02b      	b.n	800cc6e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc16:	4a2d      	ldr	r2, [pc, #180]	; (800cccc <tcp_bind+0x128>)
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	e01e      	b.n	800cc62 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	8adb      	ldrh	r3, [r3, #22]
 800cc28:	88fa      	ldrh	r2, [r7, #6]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d116      	bne.n	800cc5c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cc2e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d010      	beq.n	800cc56 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00c      	beq.n	800cc56 <tcp_bind+0xb2>
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d009      	beq.n	800cc56 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d005      	beq.n	800cc56 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d102      	bne.n	800cc5c <tcp_bind+0xb8>
              return ERR_USE;
 800cc56:	f06f 0307 	mvn.w	r3, #7
 800cc5a:	e029      	b.n	800ccb0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1dd      	bne.n	800cc24 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	69fa      	ldr	r2, [r7, #28]
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	dbcf      	blt.n	800cc16 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00c      	beq.n	800cc96 <tcp_bind+0xf2>
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d008      	beq.n	800cc96 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d002      	beq.n	800cc90 <tcp_bind+0xec>
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	e000      	b.n	800cc92 <tcp_bind+0xee>
 800cc90:	2300      	movs	r3, #0
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	88fa      	ldrh	r2, [r7, #6]
 800cc9a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc9c:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <tcp_bind+0x12c>)
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	60da      	str	r2, [r3, #12]
 800cca4:	4a0a      	ldr	r2, [pc, #40]	; (800ccd0 <tcp_bind+0x12c>)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	f005 fce9 	bl	8012680 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3720      	adds	r7, #32
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	0801a864 	.word	0x0801a864
 800ccbc:	0801877c 	.word	0x0801877c
 800ccc0:	08018910 	.word	0x08018910
 800ccc4:	080187c0 	.word	0x080187c0
 800ccc8:	08018928 	.word	0x08018928
 800cccc:	0801a83c 	.word	0x0801a83c
 800ccd0:	2000b5f0 	.word	0x2000b5f0

0800ccd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_update_rcv_ann_wnd+0x1c>
 800cce2:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <tcp_update_rcv_ann_wnd+0xa4>)
 800cce4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cce8:	4924      	ldr	r1, [pc, #144]	; (800cd7c <tcp_update_rcv_ann_wnd+0xa8>)
 800ccea:	4825      	ldr	r0, [pc, #148]	; (800cd80 <tcp_update_rcv_ann_wnd+0xac>)
 800ccec:	f009 f95e 	bl	8015fac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ccf8:	4413      	add	r3, r2
 800ccfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd08:	bf28      	it	cs
 800cd0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd0e:	b292      	uxth	r2, r2
 800cd10:	4413      	add	r3, r2
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	db08      	blt.n	800cd2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	e020      	b.n	800cd6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	dd03      	ble.n	800cd42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd40:	e014      	b.n	800cd6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd54:	d306      	bcc.n	800cd64 <tcp_update_rcv_ann_wnd+0x90>
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd58:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cd5c:	4909      	ldr	r1, [pc, #36]	; (800cd84 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd5e:	4808      	ldr	r0, [pc, #32]	; (800cd80 <tcp_update_rcv_ann_wnd+0xac>)
 800cd60:	f009 f924 	bl	8015fac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cd6c:	2300      	movs	r3, #0
  }
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	0801877c 	.word	0x0801877c
 800cd7c:	080189d8 	.word	0x080189d8
 800cd80:	080187c0 	.word	0x080187c0
 800cd84:	080189fc 	.word	0x080189fc

0800cd88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d107      	bne.n	800cdaa <tcp_recved+0x22>
 800cd9a:	4b1f      	ldr	r3, [pc, #124]	; (800ce18 <tcp_recved+0x90>)
 800cd9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cda0:	491e      	ldr	r1, [pc, #120]	; (800ce1c <tcp_recved+0x94>)
 800cda2:	481f      	ldr	r0, [pc, #124]	; (800ce20 <tcp_recved+0x98>)
 800cda4:	f009 f902 	bl	8015fac <iprintf>
 800cda8:	e032      	b.n	800ce10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7d1b      	ldrb	r3, [r3, #20]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d106      	bne.n	800cdc0 <tcp_recved+0x38>
 800cdb2:	4b19      	ldr	r3, [pc, #100]	; (800ce18 <tcp_recved+0x90>)
 800cdb4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cdb8:	491a      	ldr	r1, [pc, #104]	; (800ce24 <tcp_recved+0x9c>)
 800cdba:	4819      	ldr	r0, [pc, #100]	; (800ce20 <tcp_recved+0x98>)
 800cdbc:	f009 f8f6 	bl	8015fac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdc4:	887b      	ldrh	r3, [r7, #2]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdca:	89fb      	ldrh	r3, [r7, #14]
 800cdcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdd0:	d804      	bhi.n	800cddc <tcp_recved+0x54>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdd6:	89fa      	ldrh	r2, [r7, #14]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d204      	bcs.n	800cde6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cde2:	851a      	strh	r2, [r3, #40]	; 0x28
 800cde4:	e002      	b.n	800cdec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	89fa      	ldrh	r2, [r7, #14]
 800cdea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff ff71 	bl	800ccd4 <tcp_update_rcv_ann_wnd>
 800cdf2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cdfa:	d309      	bcc.n	800ce10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8b5b      	ldrh	r3, [r3, #26]
 800ce00:	f043 0302 	orr.w	r3, r3, #2
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f004 fcc2 	bl	8011794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	0801877c 	.word	0x0801877c
 800ce1c:	08018a18 	.word	0x08018a18
 800ce20:	080187c0 	.word	0x080187c0
 800ce24:	08018a30 	.word	0x08018a30

0800ce28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ce32:	4b1e      	ldr	r3, [pc, #120]	; (800ceac <tcp_new_port+0x84>)
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	3301      	adds	r3, #1
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	4b1c      	ldr	r3, [pc, #112]	; (800ceac <tcp_new_port+0x84>)
 800ce3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ce3e:	4b1b      	ldr	r3, [pc, #108]	; (800ceac <tcp_new_port+0x84>)
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d103      	bne.n	800ce52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ce4a:	4b18      	ldr	r3, [pc, #96]	; (800ceac <tcp_new_port+0x84>)
 800ce4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ce50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ce52:	2300      	movs	r3, #0
 800ce54:	71fb      	strb	r3, [r7, #7]
 800ce56:	e01e      	b.n	800ce96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	4a15      	ldr	r2, [pc, #84]	; (800ceb0 <tcp_new_port+0x88>)
 800ce5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	603b      	str	r3, [r7, #0]
 800ce64:	e011      	b.n	800ce8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	8ada      	ldrh	r2, [r3, #22]
 800ce6a:	4b10      	ldr	r3, [pc, #64]	; (800ceac <tcp_new_port+0x84>)
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d108      	bne.n	800ce84 <tcp_new_port+0x5c>
        n++;
 800ce72:	88bb      	ldrh	r3, [r7, #4]
 800ce74:	3301      	adds	r3, #1
 800ce76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ce78:	88bb      	ldrh	r3, [r7, #4]
 800ce7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce7e:	d3d8      	bcc.n	800ce32 <tcp_new_port+0xa>
          return 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e00d      	b.n	800cea0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	603b      	str	r3, [r7, #0]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1ea      	bne.n	800ce66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	3301      	adds	r3, #1
 800ce94:	71fb      	strb	r3, [r7, #7]
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	2b03      	cmp	r3, #3
 800ce9a:	d9dd      	bls.n	800ce58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ce9c:	4b03      	ldr	r3, [pc, #12]	; (800ceac <tcp_new_port+0x84>)
 800ce9e:	881b      	ldrh	r3, [r3, #0]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	20000014 	.word	0x20000014
 800ceb0:	0801a83c 	.word	0x0801a83c

0800ceb4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08a      	sub	sp, #40	; 0x28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4613      	mov	r3, r2
 800cec2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800cec4:	2300      	movs	r3, #0
 800cec6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d109      	bne.n	800cee2 <tcp_connect+0x2e>
 800cece:	4b7d      	ldr	r3, [pc, #500]	; (800d0c4 <tcp_connect+0x210>)
 800ced0:	f240 4235 	movw	r2, #1077	; 0x435
 800ced4:	497c      	ldr	r1, [pc, #496]	; (800d0c8 <tcp_connect+0x214>)
 800ced6:	487d      	ldr	r0, [pc, #500]	; (800d0cc <tcp_connect+0x218>)
 800ced8:	f009 f868 	bl	8015fac <iprintf>
 800cedc:	f06f 030f 	mvn.w	r3, #15
 800cee0:	e0ec      	b.n	800d0bc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d109      	bne.n	800cefc <tcp_connect+0x48>
 800cee8:	4b76      	ldr	r3, [pc, #472]	; (800d0c4 <tcp_connect+0x210>)
 800ceea:	f240 4236 	movw	r2, #1078	; 0x436
 800ceee:	4978      	ldr	r1, [pc, #480]	; (800d0d0 <tcp_connect+0x21c>)
 800cef0:	4876      	ldr	r0, [pc, #472]	; (800d0cc <tcp_connect+0x218>)
 800cef2:	f009 f85b 	bl	8015fac <iprintf>
 800cef6:	f06f 030f 	mvn.w	r3, #15
 800cefa:	e0df      	b.n	800d0bc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	7d1b      	ldrb	r3, [r3, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d009      	beq.n	800cf18 <tcp_connect+0x64>
 800cf04:	4b6f      	ldr	r3, [pc, #444]	; (800d0c4 <tcp_connect+0x210>)
 800cf06:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800cf0a:	4972      	ldr	r1, [pc, #456]	; (800d0d4 <tcp_connect+0x220>)
 800cf0c:	486f      	ldr	r0, [pc, #444]	; (800d0cc <tcp_connect+0x218>)
 800cf0e:	f009 f84d 	bl	8015fac <iprintf>
 800cf12:	f06f 0309 	mvn.w	r3, #9
 800cf16:	e0d1      	b.n	800d0bc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <tcp_connect+0x70>
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	e000      	b.n	800cf26 <tcp_connect+0x72>
 800cf24:	2300      	movs	r3, #0
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	88fa      	ldrh	r2, [r7, #6]
 800cf2e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	7a1b      	ldrb	r3, [r3, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d006      	beq.n	800cf46 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	7a1b      	ldrb	r3, [r3, #8]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fca7 	bl	800b890 <netif_get_by_index>
 800cf42:	6278      	str	r0, [r7, #36]	; 0x24
 800cf44:	e005      	b.n	800cf52 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f007 f95a 	bl	8014204 <ip4_route>
 800cf50:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d102      	bne.n	800cf5e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800cf58:	f06f 0303 	mvn.w	r3, #3
 800cf5c:	e0ae      	b.n	800d0bc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d003      	beq.n	800cf6c <tcp_connect+0xb8>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d111      	bne.n	800cf90 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <tcp_connect+0xc4>
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	3304      	adds	r3, #4
 800cf76:	e000      	b.n	800cf7a <tcp_connect+0xc6>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d102      	bne.n	800cf88 <tcp_connect+0xd4>
      return ERR_RTE;
 800cf82:	f06f 0303 	mvn.w	r3, #3
 800cf86:	e099      	b.n	800d0bc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8adb      	ldrh	r3, [r3, #22]
 800cf94:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	8adb      	ldrh	r3, [r3, #22]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10c      	bne.n	800cfb8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800cf9e:	f7ff ff43 	bl	800ce28 <tcp_new_port>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	8adb      	ldrh	r3, [r3, #22]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <tcp_connect+0x104>
      return ERR_BUF;
 800cfb2:	f06f 0301 	mvn.w	r3, #1
 800cfb6:	e081      	b.n	800d0bc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f001 f867 	bl	800e08c <tcp_next_iss>
 800cfbe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	1e5a      	subs	r2, r3, #1
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	1e5a      	subs	r2, r3, #1
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	1e5a      	subs	r2, r3, #1
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cfea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d00c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3304      	adds	r3, #4
 800d016:	461a      	mov	r2, r3
 800d018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d01a:	f001 f85d 	bl	800e0d8 <tcp_eff_send_mss_netif>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2201      	movs	r2, #1
 800d02a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	683a      	ldr	r2, [r7, #0]
 800d032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d036:	2102      	movs	r1, #2
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f004 fabd 	bl	80115b8 <tcp_enqueue_flags>
 800d03e:	4603      	mov	r3, r0
 800d040:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d042:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d136      	bne.n	800d0b8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2202      	movs	r2, #2
 800d04e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d050:	8b7b      	ldrh	r3, [r7, #26]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d021      	beq.n	800d09a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d056:	4b20      	ldr	r3, [pc, #128]	; (800d0d8 <tcp_connect+0x224>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d105      	bne.n	800d06c <tcp_connect+0x1b8>
 800d060:	4b1d      	ldr	r3, [pc, #116]	; (800d0d8 <tcp_connect+0x224>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	4a1c      	ldr	r2, [pc, #112]	; (800d0d8 <tcp_connect+0x224>)
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	e013      	b.n	800d094 <tcp_connect+0x1e0>
 800d06c:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <tcp_connect+0x224>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	623b      	str	r3, [r7, #32]
 800d072:	e00c      	b.n	800d08e <tcp_connect+0x1da>
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d104      	bne.n	800d088 <tcp_connect+0x1d4>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	e005      	b.n	800d094 <tcp_connect+0x1e0>
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	623b      	str	r3, [r7, #32]
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1ef      	bne.n	800d074 <tcp_connect+0x1c0>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d09a:	4b10      	ldr	r3, [pc, #64]	; (800d0dc <tcp_connect+0x228>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	60da      	str	r2, [r3, #12]
 800d0a2:	4a0e      	ldr	r2, [pc, #56]	; (800d0dc <tcp_connect+0x228>)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	f005 faea 	bl	8012680 <tcp_timer_needed>
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <tcp_connect+0x22c>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f004 fb6e 	bl	8011794 <tcp_output>
  }
  return ret;
 800d0b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3728      	adds	r7, #40	; 0x28
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	0801877c 	.word	0x0801877c
 800d0c8:	08018a58 	.word	0x08018a58
 800d0cc:	080187c0 	.word	0x080187c0
 800d0d0:	08018a74 	.word	0x08018a74
 800d0d4:	08018a90 	.word	0x08018a90
 800d0d8:	2000b5f0 	.word	0x2000b5f0
 800d0dc:	2000b5e4 	.word	0x2000b5e4
 800d0e0:	2000b5e0 	.word	0x2000b5e0

0800d0e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d0e4:	b5b0      	push	{r4, r5, r7, lr}
 800d0e6:	b090      	sub	sp, #64	; 0x40
 800d0e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d0f0:	4b94      	ldr	r3, [pc, #592]	; (800d344 <tcp_slowtmr+0x260>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	4a93      	ldr	r2, [pc, #588]	; (800d344 <tcp_slowtmr+0x260>)
 800d0f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d0fa:	4b93      	ldr	r3, [pc, #588]	; (800d348 <tcp_slowtmr+0x264>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	3301      	adds	r3, #1
 800d100:	b2da      	uxtb	r2, r3
 800d102:	4b91      	ldr	r3, [pc, #580]	; (800d348 <tcp_slowtmr+0x264>)
 800d104:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d106:	2300      	movs	r3, #0
 800d108:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d10a:	4b90      	ldr	r3, [pc, #576]	; (800d34c <tcp_slowtmr+0x268>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d110:	e29f      	b.n	800d652 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	7d1b      	ldrb	r3, [r3, #20]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d106      	bne.n	800d128 <tcp_slowtmr+0x44>
 800d11a:	4b8d      	ldr	r3, [pc, #564]	; (800d350 <tcp_slowtmr+0x26c>)
 800d11c:	f240 42be 	movw	r2, #1214	; 0x4be
 800d120:	498c      	ldr	r1, [pc, #560]	; (800d354 <tcp_slowtmr+0x270>)
 800d122:	488d      	ldr	r0, [pc, #564]	; (800d358 <tcp_slowtmr+0x274>)
 800d124:	f008 ff42 	bl	8015fac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d106      	bne.n	800d13e <tcp_slowtmr+0x5a>
 800d130:	4b87      	ldr	r3, [pc, #540]	; (800d350 <tcp_slowtmr+0x26c>)
 800d132:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d136:	4989      	ldr	r1, [pc, #548]	; (800d35c <tcp_slowtmr+0x278>)
 800d138:	4887      	ldr	r0, [pc, #540]	; (800d358 <tcp_slowtmr+0x274>)
 800d13a:	f008 ff37 	bl	8015fac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	7d1b      	ldrb	r3, [r3, #20]
 800d142:	2b0a      	cmp	r3, #10
 800d144:	d106      	bne.n	800d154 <tcp_slowtmr+0x70>
 800d146:	4b82      	ldr	r3, [pc, #520]	; (800d350 <tcp_slowtmr+0x26c>)
 800d148:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d14c:	4984      	ldr	r1, [pc, #528]	; (800d360 <tcp_slowtmr+0x27c>)
 800d14e:	4882      	ldr	r0, [pc, #520]	; (800d358 <tcp_slowtmr+0x274>)
 800d150:	f008 ff2c 	bl	8015fac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	7f9a      	ldrb	r2, [r3, #30]
 800d158:	4b7b      	ldr	r3, [pc, #492]	; (800d348 <tcp_slowtmr+0x264>)
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d105      	bne.n	800d16c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d16a:	e272      	b.n	800d652 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d16c:	4b76      	ldr	r3, [pc, #472]	; (800d348 <tcp_slowtmr+0x264>)
 800d16e:	781a      	ldrb	r2, [r3, #0]
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	7d1b      	ldrb	r3, [r3, #20]
 800d184:	2b02      	cmp	r3, #2
 800d186:	d10a      	bne.n	800d19e <tcp_slowtmr+0xba>
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d18e:	2b05      	cmp	r3, #5
 800d190:	d905      	bls.n	800d19e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d196:	3301      	adds	r3, #1
 800d198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d19c:	e11e      	b.n	800d3dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1a4:	2b0b      	cmp	r3, #11
 800d1a6:	d905      	bls.n	800d1b4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1b2:	e113      	b.n	800d3dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d075      	beq.n	800d2aa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d006      	beq.n	800d1d4 <tcp_slowtmr+0xf0>
 800d1c6:	4b62      	ldr	r3, [pc, #392]	; (800d350 <tcp_slowtmr+0x26c>)
 800d1c8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d1cc:	4965      	ldr	r1, [pc, #404]	; (800d364 <tcp_slowtmr+0x280>)
 800d1ce:	4862      	ldr	r0, [pc, #392]	; (800d358 <tcp_slowtmr+0x274>)
 800d1d0:	f008 feec 	bl	8015fac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <tcp_slowtmr+0x106>
 800d1dc:	4b5c      	ldr	r3, [pc, #368]	; (800d350 <tcp_slowtmr+0x26c>)
 800d1de:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d1e2:	4961      	ldr	r1, [pc, #388]	; (800d368 <tcp_slowtmr+0x284>)
 800d1e4:	485c      	ldr	r0, [pc, #368]	; (800d358 <tcp_slowtmr+0x274>)
 800d1e6:	f008 fee1 	bl	8015fac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d1f0:	2b0b      	cmp	r3, #11
 800d1f2:	d905      	bls.n	800d200 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1fe:	e0ed      	b.n	800d3dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d202:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d206:	3b01      	subs	r3, #1
 800d208:	4a58      	ldr	r2, [pc, #352]	; (800d36c <tcp_slowtmr+0x288>)
 800d20a:	5cd3      	ldrb	r3, [r2, r3]
 800d20c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d214:	7c7a      	ldrb	r2, [r7, #17]
 800d216:	429a      	cmp	r2, r3
 800d218:	d907      	bls.n	800d22a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d220:	3301      	adds	r3, #1
 800d222:	b2da      	uxtb	r2, r3
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d230:	7c7a      	ldrb	r2, [r7, #17]
 800d232:	429a      	cmp	r2, r3
 800d234:	f200 80d2 	bhi.w	800d3dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d238:	2301      	movs	r3, #1
 800d23a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d242:	2b00      	cmp	r3, #0
 800d244:	d108      	bne.n	800d258 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d248:	f005 f94c 	bl	80124e4 <tcp_zero_window_probe>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d014      	beq.n	800d27c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d252:	2300      	movs	r3, #0
 800d254:	623b      	str	r3, [r7, #32]
 800d256:	e011      	b.n	800d27c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d25e:	4619      	mov	r1, r3
 800d260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d262:	f004 f811 	bl	8011288 <tcp_split_unsent_seg>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d107      	bne.n	800d27c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d26e:	f004 fa91 	bl	8011794 <tcp_output>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 80ac 	beq.w	800d3dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d292:	2b06      	cmp	r3, #6
 800d294:	f200 80a2 	bhi.w	800d3dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d29e:	3301      	adds	r3, #1
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d2a8:	e098      	b.n	800d3dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	db0f      	blt.n	800d2d4 <tcp_slowtmr+0x1f0>
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d008      	beq.n	800d2d4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	b21a      	sxth	r2, r3
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	db7b      	blt.n	800d3dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d2e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2e6:	f004 fd47 	bl	8011d78 <tcp_rexmit_rto_prepare>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d007      	beq.n	800d300 <tcp_slowtmr+0x21c>
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d171      	bne.n	800d3dc <tcp_slowtmr+0x2f8>
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d06d      	beq.n	800d3dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d03a      	beq.n	800d37e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d30e:	2b0c      	cmp	r3, #12
 800d310:	bf28      	it	cs
 800d312:	230c      	movcs	r3, #12
 800d314:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d31c:	10db      	asrs	r3, r3, #3
 800d31e:	b21b      	sxth	r3, r3
 800d320:	461a      	mov	r2, r3
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d328:	4413      	add	r3, r2
 800d32a:	7efa      	ldrb	r2, [r7, #27]
 800d32c:	4910      	ldr	r1, [pc, #64]	; (800d370 <tcp_slowtmr+0x28c>)
 800d32e:	5c8a      	ldrb	r2, [r1, r2]
 800d330:	4093      	lsls	r3, r2
 800d332:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d33a:	4293      	cmp	r3, r2
 800d33c:	dc1a      	bgt.n	800d374 <tcp_slowtmr+0x290>
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	b21a      	sxth	r2, r3
 800d342:	e019      	b.n	800d378 <tcp_slowtmr+0x294>
 800d344:	2000b5e8 	.word	0x2000b5e8
 800d348:	20004ad6 	.word	0x20004ad6
 800d34c:	2000b5e4 	.word	0x2000b5e4
 800d350:	0801877c 	.word	0x0801877c
 800d354:	08018ac0 	.word	0x08018ac0
 800d358:	080187c0 	.word	0x080187c0
 800d35c:	08018aec 	.word	0x08018aec
 800d360:	08018b18 	.word	0x08018b18
 800d364:	08018b48 	.word	0x08018b48
 800d368:	08018b7c 	.word	0x08018b7c
 800d36c:	0801a834 	.word	0x0801a834
 800d370:	0801a824 	.word	0x0801a824
 800d374:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	2200      	movs	r2, #0
 800d382:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d390:	4293      	cmp	r3, r2
 800d392:	bf28      	it	cs
 800d394:	4613      	movcs	r3, r2
 800d396:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d398:	8a7b      	ldrh	r3, [r7, #18]
 800d39a:	085b      	lsrs	r3, r3, #1
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d206      	bcs.n	800d3c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d8:	f004 fd3e 	bl	8011e58 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	2b06      	cmp	r3, #6
 800d3e2:	d111      	bne.n	800d408 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	8b5b      	ldrh	r3, [r3, #26]
 800d3e8:	f003 0310 	and.w	r3, r3, #16
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00b      	beq.n	800d408 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3f0:	4b9d      	ldr	r3, [pc, #628]	; (800d668 <tcp_slowtmr+0x584>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	2b28      	cmp	r3, #40	; 0x28
 800d3fc:	d904      	bls.n	800d408 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d402:	3301      	adds	r3, #1
 800d404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	7a5b      	ldrb	r3, [r3, #9]
 800d40c:	f003 0308 	and.w	r3, r3, #8
 800d410:	2b00      	cmp	r3, #0
 800d412:	d04c      	beq.n	800d4ae <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d418:	2b04      	cmp	r3, #4
 800d41a:	d003      	beq.n	800d424 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d420:	2b07      	cmp	r3, #7
 800d422:	d144      	bne.n	800d4ae <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d424:	4b90      	ldr	r3, [pc, #576]	; (800d668 <tcp_slowtmr+0x584>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d434:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d438:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d43c:	498b      	ldr	r1, [pc, #556]	; (800d66c <tcp_slowtmr+0x588>)
 800d43e:	fba1 1303 	umull	r1, r3, r1, r3
 800d442:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d444:	429a      	cmp	r2, r3
 800d446:	d90a      	bls.n	800d45e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d44c:	3301      	adds	r3, #1
 800d44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d456:	3301      	adds	r3, #1
 800d458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d45c:	e027      	b.n	800d4ae <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d45e:	4b82      	ldr	r3, [pc, #520]	; (800d668 <tcp_slowtmr+0x584>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d470:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d474:	4618      	mov	r0, r3
 800d476:	4b7e      	ldr	r3, [pc, #504]	; (800d670 <tcp_slowtmr+0x58c>)
 800d478:	fb03 f300 	mul.w	r3, r3, r0
 800d47c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d47e:	497b      	ldr	r1, [pc, #492]	; (800d66c <tcp_slowtmr+0x588>)
 800d480:	fba1 1303 	umull	r1, r3, r1, r3
 800d484:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d486:	429a      	cmp	r2, r3
 800d488:	d911      	bls.n	800d4ae <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d48c:	f004 ffea 	bl	8012464 <tcp_keepalive>
 800d490:	4603      	mov	r3, r0
 800d492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d496:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d107      	bne.n	800d4ae <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4aa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d011      	beq.n	800d4da <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4b6:	4b6c      	ldr	r3, [pc, #432]	; (800d668 <tcp_slowtmr+0x584>)
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	1ad2      	subs	r2, r2, r3
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	440b      	add	r3, r1
 800d4ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d302      	bcc.n	800d4da <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d4d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4d6:	f000 fea9 	bl	800e22c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d10b      	bne.n	800d4fa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4e2:	4b61      	ldr	r3, [pc, #388]	; (800d668 <tcp_slowtmr+0x584>)
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	2b28      	cmp	r3, #40	; 0x28
 800d4ee:	d904      	bls.n	800d4fa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	7d1b      	ldrb	r3, [r3, #20]
 800d4fe:	2b09      	cmp	r3, #9
 800d500:	d10b      	bne.n	800d51a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d502:	4b59      	ldr	r3, [pc, #356]	; (800d668 <tcp_slowtmr+0x584>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2bf0      	cmp	r3, #240	; 0xf0
 800d50e:	d904      	bls.n	800d51a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d514:	3301      	adds	r3, #1
 800d516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d060      	beq.n	800d5e4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d528:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d52c:	f000 fcca 	bl	800dec4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	d010      	beq.n	800d558 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d536:	4b4f      	ldr	r3, [pc, #316]	; (800d674 <tcp_slowtmr+0x590>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d106      	bne.n	800d54e <tcp_slowtmr+0x46a>
 800d540:	4b4d      	ldr	r3, [pc, #308]	; (800d678 <tcp_slowtmr+0x594>)
 800d542:	f240 526d 	movw	r2, #1389	; 0x56d
 800d546:	494d      	ldr	r1, [pc, #308]	; (800d67c <tcp_slowtmr+0x598>)
 800d548:	484d      	ldr	r0, [pc, #308]	; (800d680 <tcp_slowtmr+0x59c>)
 800d54a:	f008 fd2f 	bl	8015fac <iprintf>
        prev->next = pcb->next;
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d554:	60da      	str	r2, [r3, #12]
 800d556:	e00f      	b.n	800d578 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d558:	4b46      	ldr	r3, [pc, #280]	; (800d674 <tcp_slowtmr+0x590>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d55e:	429a      	cmp	r2, r3
 800d560:	d006      	beq.n	800d570 <tcp_slowtmr+0x48c>
 800d562:	4b45      	ldr	r3, [pc, #276]	; (800d678 <tcp_slowtmr+0x594>)
 800d564:	f240 5271 	movw	r2, #1393	; 0x571
 800d568:	4946      	ldr	r1, [pc, #280]	; (800d684 <tcp_slowtmr+0x5a0>)
 800d56a:	4845      	ldr	r0, [pc, #276]	; (800d680 <tcp_slowtmr+0x59c>)
 800d56c:	f008 fd1e 	bl	8015fac <iprintf>
        tcp_active_pcbs = pcb->next;
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	4a3f      	ldr	r2, [pc, #252]	; (800d674 <tcp_slowtmr+0x590>)
 800d576:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d013      	beq.n	800d5a8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d582:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d588:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	3304      	adds	r3, #4
 800d58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d590:	8ad2      	ldrh	r2, [r2, #22]
 800d592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d594:	8b09      	ldrh	r1, [r1, #24]
 800d596:	9102      	str	r1, [sp, #8]
 800d598:	9201      	str	r2, [sp, #4]
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	462b      	mov	r3, r5
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4601      	mov	r1, r0
 800d5a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5a4:	f004 feaa 	bl	80122fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b0:	7d1b      	ldrb	r3, [r3, #20]
 800d5b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d5be:	6838      	ldr	r0, [r7, #0]
 800d5c0:	f7fe ffa0 	bl	800c504 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d5c4:	4b30      	ldr	r3, [pc, #192]	; (800d688 <tcp_slowtmr+0x5a4>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <tcp_slowtmr+0x4f6>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f06f 010c 	mvn.w	r1, #12
 800d5d6:	68b8      	ldr	r0, [r7, #8]
 800d5d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d5da:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <tcp_slowtmr+0x5a4>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d037      	beq.n	800d652 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d5e2:	e590      	b.n	800d106 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	7f1b      	ldrb	r3, [r3, #28]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	7f1a      	ldrb	r2, [r3, #28]
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	7f5b      	ldrb	r3, [r3, #29]
 800d602:	429a      	cmp	r2, r3
 800d604:	d325      	bcc.n	800d652 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	2200      	movs	r2, #0
 800d60a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d60c:	4b1e      	ldr	r3, [pc, #120]	; (800d688 <tcp_slowtmr+0x5a4>)
 800d60e:	2200      	movs	r2, #0
 800d610:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <tcp_slowtmr+0x550>
 800d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d624:	6912      	ldr	r2, [r2, #16]
 800d626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
 800d62c:	4603      	mov	r3, r0
 800d62e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d632:	e002      	b.n	800d63a <tcp_slowtmr+0x556>
 800d634:	2300      	movs	r3, #0
 800d636:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d63a:	4b13      	ldr	r3, [pc, #76]	; (800d688 <tcp_slowtmr+0x5a4>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d000      	beq.n	800d644 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d642:	e560      	b.n	800d106 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d644:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d64e:	f004 f8a1 	bl	8011794 <tcp_output>
  while (pcb != NULL) {
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	2b00      	cmp	r3, #0
 800d656:	f47f ad5c 	bne.w	800d112 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d65e:	4b0b      	ldr	r3, [pc, #44]	; (800d68c <tcp_slowtmr+0x5a8>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d664:	e067      	b.n	800d736 <tcp_slowtmr+0x652>
 800d666:	bf00      	nop
 800d668:	2000b5e8 	.word	0x2000b5e8
 800d66c:	10624dd3 	.word	0x10624dd3
 800d670:	000124f8 	.word	0x000124f8
 800d674:	2000b5e4 	.word	0x2000b5e4
 800d678:	0801877c 	.word	0x0801877c
 800d67c:	08018bb4 	.word	0x08018bb4
 800d680:	080187c0 	.word	0x080187c0
 800d684:	08018be0 	.word	0x08018be0
 800d688:	2000b5e0 	.word	0x2000b5e0
 800d68c:	2000b5f4 	.word	0x2000b5f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	2b0a      	cmp	r3, #10
 800d696:	d006      	beq.n	800d6a6 <tcp_slowtmr+0x5c2>
 800d698:	4b2b      	ldr	r3, [pc, #172]	; (800d748 <tcp_slowtmr+0x664>)
 800d69a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d69e:	492b      	ldr	r1, [pc, #172]	; (800d74c <tcp_slowtmr+0x668>)
 800d6a0:	482b      	ldr	r0, [pc, #172]	; (800d750 <tcp_slowtmr+0x66c>)
 800d6a2:	f008 fc83 	bl	8015fac <iprintf>
    pcb_remove = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6ac:	4b29      	ldr	r3, [pc, #164]	; (800d754 <tcp_slowtmr+0x670>)
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	2bf0      	cmp	r3, #240	; 0xf0
 800d6b8:	d904      	bls.n	800d6c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6be:	3301      	adds	r3, #1
 800d6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d02f      	beq.n	800d72c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d6cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6ce:	f000 fbf9 	bl	800dec4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d010      	beq.n	800d6fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d6d8:	4b1f      	ldr	r3, [pc, #124]	; (800d758 <tcp_slowtmr+0x674>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d106      	bne.n	800d6f0 <tcp_slowtmr+0x60c>
 800d6e2:	4b19      	ldr	r3, [pc, #100]	; (800d748 <tcp_slowtmr+0x664>)
 800d6e4:	f240 52af 	movw	r2, #1455	; 0x5af
 800d6e8:	491c      	ldr	r1, [pc, #112]	; (800d75c <tcp_slowtmr+0x678>)
 800d6ea:	4819      	ldr	r0, [pc, #100]	; (800d750 <tcp_slowtmr+0x66c>)
 800d6ec:	f008 fc5e 	bl	8015fac <iprintf>
        prev->next = pcb->next;
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	68da      	ldr	r2, [r3, #12]
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	60da      	str	r2, [r3, #12]
 800d6f8:	e00f      	b.n	800d71a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d6fa:	4b17      	ldr	r3, [pc, #92]	; (800d758 <tcp_slowtmr+0x674>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d700:	429a      	cmp	r2, r3
 800d702:	d006      	beq.n	800d712 <tcp_slowtmr+0x62e>
 800d704:	4b10      	ldr	r3, [pc, #64]	; (800d748 <tcp_slowtmr+0x664>)
 800d706:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d70a:	4915      	ldr	r1, [pc, #84]	; (800d760 <tcp_slowtmr+0x67c>)
 800d70c:	4810      	ldr	r0, [pc, #64]	; (800d750 <tcp_slowtmr+0x66c>)
 800d70e:	f008 fc4d 	bl	8015fac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	4a10      	ldr	r2, [pc, #64]	; (800d758 <tcp_slowtmr+0x674>)
 800d718:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d724:	69f8      	ldr	r0, [r7, #28]
 800d726:	f7fe feed 	bl	800c504 <tcp_free>
 800d72a:	e004      	b.n	800d736 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1a9      	bne.n	800d690 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	3730      	adds	r7, #48	; 0x30
 800d742:	46bd      	mov	sp, r7
 800d744:	bdb0      	pop	{r4, r5, r7, pc}
 800d746:	bf00      	nop
 800d748:	0801877c 	.word	0x0801877c
 800d74c:	08018c0c 	.word	0x08018c0c
 800d750:	080187c0 	.word	0x080187c0
 800d754:	2000b5e8 	.word	0x2000b5e8
 800d758:	2000b5f4 	.word	0x2000b5f4
 800d75c:	08018c3c 	.word	0x08018c3c
 800d760:	08018c64 	.word	0x08018c64

0800d764 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d76a:	4b2d      	ldr	r3, [pc, #180]	; (800d820 <tcp_fasttmr+0xbc>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	3301      	adds	r3, #1
 800d770:	b2da      	uxtb	r2, r3
 800d772:	4b2b      	ldr	r3, [pc, #172]	; (800d820 <tcp_fasttmr+0xbc>)
 800d774:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d776:	4b2b      	ldr	r3, [pc, #172]	; (800d824 <tcp_fasttmr+0xc0>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d77c:	e048      	b.n	800d810 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	7f9a      	ldrb	r2, [r3, #30]
 800d782:	4b27      	ldr	r3, [pc, #156]	; (800d820 <tcp_fasttmr+0xbc>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	429a      	cmp	r2, r3
 800d788:	d03f      	beq.n	800d80a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d78a:	4b25      	ldr	r3, [pc, #148]	; (800d820 <tcp_fasttmr+0xbc>)
 800d78c:	781a      	ldrb	r2, [r3, #0]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	8b5b      	ldrh	r3, [r3, #26]
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d010      	beq.n	800d7c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	8b5b      	ldrh	r3, [r3, #26]
 800d7a2:	f043 0302 	orr.w	r3, r3, #2
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f003 fff1 	bl	8011794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8b5b      	ldrh	r3, [r3, #26]
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	8b5b      	ldrh	r3, [r3, #26]
 800d7c4:	f003 0308 	and.w	r3, r3, #8
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	8b5b      	ldrh	r3, [r3, #26]
 800d7d0:	f023 0308 	bic.w	r3, r3, #8
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff f826 	bl	800c82c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d7ee:	4b0e      	ldr	r3, [pc, #56]	; (800d828 <tcp_fasttmr+0xc4>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f819 	bl	800d82c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <tcp_fasttmr+0xc4>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d000      	beq.n	800d804 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d802:	e7b8      	b.n	800d776 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	607b      	str	r3, [r7, #4]
 800d808:	e002      	b.n	800d810 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1b3      	bne.n	800d77e <tcp_fasttmr+0x1a>
    }
  }
}
 800d816:	bf00      	nop
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20004ad6 	.word	0x20004ad6
 800d824:	2000b5e4 	.word	0x2000b5e4
 800d828:	2000b5e0 	.word	0x2000b5e0

0800d82c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d82c:	b590      	push	{r4, r7, lr}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <tcp_process_refused_data+0x22>
 800d83a:	4b37      	ldr	r3, [pc, #220]	; (800d918 <tcp_process_refused_data+0xec>)
 800d83c:	f240 6209 	movw	r2, #1545	; 0x609
 800d840:	4936      	ldr	r1, [pc, #216]	; (800d91c <tcp_process_refused_data+0xf0>)
 800d842:	4837      	ldr	r0, [pc, #220]	; (800d920 <tcp_process_refused_data+0xf4>)
 800d844:	f008 fbb2 	bl	8015fac <iprintf>
 800d848:	f06f 030f 	mvn.w	r3, #15
 800d84c:	e060      	b.n	800d910 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d852:	7b5b      	ldrb	r3, [r3, #13]
 800d854:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d85a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00b      	beq.n	800d884 <tcp_process_refused_data+0x58>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6918      	ldr	r0, [r3, #16]
 800d876:	2300      	movs	r3, #0
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	6879      	ldr	r1, [r7, #4]
 800d87c:	47a0      	blx	r4
 800d87e:	4603      	mov	r3, r0
 800d880:	73fb      	strb	r3, [r7, #15]
 800d882:	e007      	b.n	800d894 <tcp_process_refused_data+0x68>
 800d884:	2300      	movs	r3, #0
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	2000      	movs	r0, #0
 800d88c:	f000 f8a4 	bl	800d9d8 <tcp_recv_null>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d12a      	bne.n	800d8f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	f003 0320 	and.w	r3, r3, #32
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d033      	beq.n	800d90e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8ae:	d005      	beq.n	800d8bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00b      	beq.n	800d8de <tcp_process_refused_data+0xb2>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6918      	ldr	r0, [r3, #16]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	47a0      	blx	r4
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]
 800d8dc:	e001      	b.n	800d8e2 <tcp_process_refused_data+0xb6>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e6:	f113 0f0d 	cmn.w	r3, #13
 800d8ea:	d110      	bne.n	800d90e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d8ec:	f06f 030c 	mvn.w	r3, #12
 800d8f0:	e00e      	b.n	800d910 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f6:	f113 0f0d 	cmn.w	r3, #13
 800d8fa:	d102      	bne.n	800d902 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d8fc:	f06f 030c 	mvn.w	r3, #12
 800d900:	e006      	b.n	800d910 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d908:	f06f 0304 	mvn.w	r3, #4
 800d90c:	e000      	b.n	800d910 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	bd90      	pop	{r4, r7, pc}
 800d918:	0801877c 	.word	0x0801877c
 800d91c:	08018c8c 	.word	0x08018c8c
 800d920:	080187c0 	.word	0x080187c0

0800d924 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d92c:	e007      	b.n	800d93e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f80a 	bl	800d94e <tcp_seg_free>
    seg = next;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1f4      	bne.n	800d92e <tcp_segs_free+0xa>
  }
}
 800d944:	bf00      	nop
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00c      	beq.n	800d976 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe fb1f 	bl	800bfac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d96e:	6879      	ldr	r1, [r7, #4]
 800d970:	2003      	movs	r0, #3
 800d972:	f7fd fc77 	bl	800b264 <memp_free>
  }
}
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
	...

0800d980 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <tcp_seg_copy+0x1c>
 800d98e:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <tcp_seg_copy+0x4c>)
 800d990:	f240 6282 	movw	r2, #1666	; 0x682
 800d994:	490e      	ldr	r1, [pc, #56]	; (800d9d0 <tcp_seg_copy+0x50>)
 800d996:	480f      	ldr	r0, [pc, #60]	; (800d9d4 <tcp_seg_copy+0x54>)
 800d998:	f008 fb08 	bl	8015fac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d99c:	2003      	movs	r0, #3
 800d99e:	f7fd fc0f 	bl	800b1c0 <memp_malloc>
 800d9a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <tcp_seg_copy+0x2e>
    return NULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	e00a      	b.n	800d9c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9ae:	2210      	movs	r2, #16
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f008 fa20 	bl	8015df8 <memcpy>
  pbuf_ref(cseg->p);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe fb9b 	bl	800c0f8 <pbuf_ref>
  return cseg;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	0801877c 	.word	0x0801877c
 800d9d0:	08018cd0 	.word	0x08018cd0
 800d9d4:	080187c0 	.word	0x080187c0

0800d9d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d109      	bne.n	800da00 <tcp_recv_null+0x28>
 800d9ec:	4b12      	ldr	r3, [pc, #72]	; (800da38 <tcp_recv_null+0x60>)
 800d9ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d9f2:	4912      	ldr	r1, [pc, #72]	; (800da3c <tcp_recv_null+0x64>)
 800d9f4:	4812      	ldr	r0, [pc, #72]	; (800da40 <tcp_recv_null+0x68>)
 800d9f6:	f008 fad9 	bl	8015fac <iprintf>
 800d9fa:	f06f 030f 	mvn.w	r3, #15
 800d9fe:	e016      	b.n	800da2e <tcp_recv_null+0x56>

  if (p != NULL) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d009      	beq.n	800da1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	891b      	ldrh	r3, [r3, #8]
 800da0a:	4619      	mov	r1, r3
 800da0c:	68b8      	ldr	r0, [r7, #8]
 800da0e:	f7ff f9bb 	bl	800cd88 <tcp_recved>
    pbuf_free(p);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7fe faca 	bl	800bfac <pbuf_free>
 800da18:	e008      	b.n	800da2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d104      	bne.n	800da2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7fe ff6c 	bl	800c900 <tcp_close>
 800da28:	4603      	mov	r3, r0
 800da2a:	e000      	b.n	800da2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	0801877c 	.word	0x0801877c
 800da3c:	08018cec 	.word	0x08018cec
 800da40:	080187c0 	.word	0x080187c0

0800da44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da52:	2b00      	cmp	r3, #0
 800da54:	db01      	blt.n	800da5a <tcp_kill_prio+0x16>
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	e000      	b.n	800da5c <tcp_kill_prio+0x18>
 800da5a:	237f      	movs	r3, #127	; 0x7f
 800da5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da5e:	7afb      	ldrb	r3, [r7, #11]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d034      	beq.n	800dace <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800da64:	7afb      	ldrb	r3, [r7, #11]
 800da66:	3b01      	subs	r3, #1
 800da68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da6e:	2300      	movs	r3, #0
 800da70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da72:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <tcp_kill_prio+0x94>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	617b      	str	r3, [r7, #20]
 800da78:	e01f      	b.n	800daba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	7d5b      	ldrb	r3, [r3, #21]
 800da7e:	7afa      	ldrb	r2, [r7, #11]
 800da80:	429a      	cmp	r2, r3
 800da82:	d80c      	bhi.n	800da9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800da88:	7afa      	ldrb	r2, [r7, #11]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d112      	bne.n	800dab4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <tcp_kill_prio+0x98>)
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d80a      	bhi.n	800dab4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <tcp_kill_prio+0x98>)
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	7d5b      	ldrb	r3, [r3, #21]
 800dab2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	617b      	str	r3, [r7, #20]
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1dc      	bne.n	800da7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dac6:	6938      	ldr	r0, [r7, #16]
 800dac8:	f7ff f860 	bl	800cb8c <tcp_abort>
 800dacc:	e000      	b.n	800dad0 <tcp_kill_prio+0x8c>
    return;
 800dace:	bf00      	nop
  }
}
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	2000b5e4 	.word	0x2000b5e4
 800dadc:	2000b5e8 	.word	0x2000b5e8

0800dae0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	4603      	mov	r3, r0
 800dae8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800daea:	79fb      	ldrb	r3, [r7, #7]
 800daec:	2b08      	cmp	r3, #8
 800daee:	d009      	beq.n	800db04 <tcp_kill_state+0x24>
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	2b09      	cmp	r3, #9
 800daf4:	d006      	beq.n	800db04 <tcp_kill_state+0x24>
 800daf6:	4b1a      	ldr	r3, [pc, #104]	; (800db60 <tcp_kill_state+0x80>)
 800daf8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dafc:	4919      	ldr	r1, [pc, #100]	; (800db64 <tcp_kill_state+0x84>)
 800dafe:	481a      	ldr	r0, [pc, #104]	; (800db68 <tcp_kill_state+0x88>)
 800db00:	f008 fa54 	bl	8015fac <iprintf>

  inactivity = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db08:	2300      	movs	r3, #0
 800db0a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db0c:	4b17      	ldr	r3, [pc, #92]	; (800db6c <tcp_kill_state+0x8c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	617b      	str	r3, [r7, #20]
 800db12:	e017      	b.n	800db44 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	7d1b      	ldrb	r3, [r3, #20]
 800db18:	79fa      	ldrb	r2, [r7, #7]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d10f      	bne.n	800db3e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db1e:	4b14      	ldr	r3, [pc, #80]	; (800db70 <tcp_kill_state+0x90>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d807      	bhi.n	800db3e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db2e:	4b10      	ldr	r3, [pc, #64]	; (800db70 <tcp_kill_state+0x90>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	617b      	str	r3, [r7, #20]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1e4      	bne.n	800db14 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d003      	beq.n	800db58 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db50:	2100      	movs	r1, #0
 800db52:	6938      	ldr	r0, [r7, #16]
 800db54:	f7fe ff5c 	bl	800ca10 <tcp_abandon>
  }
}
 800db58:	bf00      	nop
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	0801877c 	.word	0x0801877c
 800db64:	08018d08 	.word	0x08018d08
 800db68:	080187c0 	.word	0x080187c0
 800db6c:	2000b5e4 	.word	0x2000b5e4
 800db70:	2000b5e8 	.word	0x2000b5e8

0800db74 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800db7e:	2300      	movs	r3, #0
 800db80:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db82:	4b12      	ldr	r3, [pc, #72]	; (800dbcc <tcp_kill_timewait+0x58>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	60fb      	str	r3, [r7, #12]
 800db88:	e012      	b.n	800dbb0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db8a:	4b11      	ldr	r3, [pc, #68]	; (800dbd0 <tcp_kill_timewait+0x5c>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	429a      	cmp	r2, r3
 800db98:	d807      	bhi.n	800dbaa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800db9a:	4b0d      	ldr	r3, [pc, #52]	; (800dbd0 <tcp_kill_timewait+0x5c>)
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6a1b      	ldr	r3, [r3, #32]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1e9      	bne.n	800db8a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbbc:	68b8      	ldr	r0, [r7, #8]
 800dbbe:	f7fe ffe5 	bl	800cb8c <tcp_abort>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	2000b5f4 	.word	0x2000b5f4
 800dbd0:	2000b5e8 	.word	0x2000b5e8

0800dbd4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dbda:	4b10      	ldr	r3, [pc, #64]	; (800dc1c <tcp_handle_closepend+0x48>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dbe0:	e014      	b.n	800dc0c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f003 0308 	and.w	r3, r3, #8
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	8b5b      	ldrh	r3, [r3, #26]
 800dbf8:	f023 0308 	bic.w	r3, r3, #8
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7fe fe12 	bl	800c82c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e7      	bne.n	800dbe2 <tcp_handle_closepend+0xe>
  }
}
 800dc12:	bf00      	nop
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	2000b5e4 	.word	0x2000b5e4

0800dc20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc2a:	2001      	movs	r0, #1
 800dc2c:	f7fd fac8 	bl	800b1c0 <memp_malloc>
 800dc30:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d126      	bne.n	800dc86 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc38:	f7ff ffcc 	bl	800dbd4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc3c:	f7ff ff9a 	bl	800db74 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc40:	2001      	movs	r0, #1
 800dc42:	f7fd fabd 	bl	800b1c0 <memp_malloc>
 800dc46:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d11b      	bne.n	800dc86 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc4e:	2009      	movs	r0, #9
 800dc50:	f7ff ff46 	bl	800dae0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc54:	2001      	movs	r0, #1
 800dc56:	f7fd fab3 	bl	800b1c0 <memp_malloc>
 800dc5a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d111      	bne.n	800dc86 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dc62:	2008      	movs	r0, #8
 800dc64:	f7ff ff3c 	bl	800dae0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc68:	2001      	movs	r0, #1
 800dc6a:	f7fd faa9 	bl	800b1c0 <memp_malloc>
 800dc6e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d107      	bne.n	800dc86 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff fee3 	bl	800da44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc7e:	2001      	movs	r0, #1
 800dc80:	f7fd fa9e 	bl	800b1c0 <memp_malloc>
 800dc84:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d03f      	beq.n	800dd0c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dc8c:	229c      	movs	r2, #156	; 0x9c
 800dc8e:	2100      	movs	r1, #0
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f008 f8d9 	bl	8015e48 <memset>
    pcb->prio = prio;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	79fa      	ldrb	r2, [r7, #7]
 800dc9a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dca2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dcac:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	22ff      	movs	r2, #255	; 0xff
 800dcba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dcc2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2206      	movs	r2, #6
 800dcc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2206      	movs	r2, #6
 800dcd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dce2:	4b0d      	ldr	r3, [pc, #52]	; (800dd18 <tcp_alloc+0xf8>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dcea:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <tcp_alloc+0xfc>)
 800dcec:	781a      	ldrb	r2, [r3, #0]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dcf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4a08      	ldr	r2, [pc, #32]	; (800dd20 <tcp_alloc+0x100>)
 800dd00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	4a07      	ldr	r2, [pc, #28]	; (800dd24 <tcp_alloc+0x104>)
 800dd08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	2000b5e8 	.word	0x2000b5e8
 800dd1c:	20004ad6 	.word	0x20004ad6
 800dd20:	0800d9d9 	.word	0x0800d9d9
 800dd24:	006ddd00 	.word	0x006ddd00

0800dd28 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dd32:	2040      	movs	r0, #64	; 0x40
 800dd34:	f7ff ff74 	bl	800dc20 <tcp_alloc>
 800dd38:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	611a      	str	r2, [r3, #16]
  }
}
 800dd5a:	bf00      	nop
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
	...

0800dd68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00e      	beq.n	800dd96 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	7d1b      	ldrb	r3, [r3, #20]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d106      	bne.n	800dd8e <tcp_recv+0x26>
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <tcp_recv+0x38>)
 800dd82:	f240 72df 	movw	r2, #2015	; 0x7df
 800dd86:	4907      	ldr	r1, [pc, #28]	; (800dda4 <tcp_recv+0x3c>)
 800dd88:	4807      	ldr	r0, [pc, #28]	; (800dda8 <tcp_recv+0x40>)
 800dd8a:	f008 f90f 	bl	8015fac <iprintf>
    pcb->recv = recv;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	0801877c 	.word	0x0801877c
 800dda4:	08018d18 	.word	0x08018d18
 800dda8:	080187c0 	.word	0x080187c0

0800ddac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00e      	beq.n	800ddda <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7d1b      	ldrb	r3, [r3, #20]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d106      	bne.n	800ddd2 <tcp_sent+0x26>
 800ddc4:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <tcp_sent+0x38>)
 800ddc6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ddca:	4907      	ldr	r1, [pc, #28]	; (800dde8 <tcp_sent+0x3c>)
 800ddcc:	4807      	ldr	r0, [pc, #28]	; (800ddec <tcp_sent+0x40>)
 800ddce:	f008 f8ed 	bl	8015fac <iprintf>
    pcb->sent = sent;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ddda:	bf00      	nop
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	0801877c 	.word	0x0801877c
 800dde8:	08018d40 	.word	0x08018d40
 800ddec:	080187c0 	.word	0x080187c0

0800ddf0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00e      	beq.n	800de1e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7d1b      	ldrb	r3, [r3, #20]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d106      	bne.n	800de16 <tcp_err+0x26>
 800de08:	4b07      	ldr	r3, [pc, #28]	; (800de28 <tcp_err+0x38>)
 800de0a:	f640 020d 	movw	r2, #2061	; 0x80d
 800de0e:	4907      	ldr	r1, [pc, #28]	; (800de2c <tcp_err+0x3c>)
 800de10:	4807      	ldr	r0, [pc, #28]	; (800de30 <tcp_err+0x40>)
 800de12:	f008 f8cb 	bl	8015fac <iprintf>
    pcb->errf = err;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800de1e:	bf00      	nop
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	0801877c 	.word	0x0801877c
 800de2c:	08018d68 	.word	0x08018d68
 800de30:	080187c0 	.word	0x080187c0

0800de34 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d008      	beq.n	800de56 <tcp_accept+0x22>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7d1b      	ldrb	r3, [r3, #20]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d104      	bne.n	800de56 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	619a      	str	r2, [r3, #24]
  }
}
 800de56:	bf00      	nop
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
	...

0800de64 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4613      	mov	r3, r2
 800de70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d107      	bne.n	800de88 <tcp_poll+0x24>
 800de78:	4b0e      	ldr	r3, [pc, #56]	; (800deb4 <tcp_poll+0x50>)
 800de7a:	f640 023d 	movw	r2, #2109	; 0x83d
 800de7e:	490e      	ldr	r1, [pc, #56]	; (800deb8 <tcp_poll+0x54>)
 800de80:	480e      	ldr	r0, [pc, #56]	; (800debc <tcp_poll+0x58>)
 800de82:	f008 f893 	bl	8015fac <iprintf>
 800de86:	e011      	b.n	800deac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	7d1b      	ldrb	r3, [r3, #20]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d106      	bne.n	800de9e <tcp_poll+0x3a>
 800de90:	4b08      	ldr	r3, [pc, #32]	; (800deb4 <tcp_poll+0x50>)
 800de92:	f640 023e 	movw	r2, #2110	; 0x83e
 800de96:	490a      	ldr	r1, [pc, #40]	; (800dec0 <tcp_poll+0x5c>)
 800de98:	4808      	ldr	r0, [pc, #32]	; (800debc <tcp_poll+0x58>)
 800de9a:	f008 f887 	bl	8015fac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	79fa      	ldrb	r2, [r7, #7]
 800deaa:	775a      	strb	r2, [r3, #29]
}
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	0801877c 	.word	0x0801877c
 800deb8:	08018d90 	.word	0x08018d90
 800debc:	080187c0 	.word	0x080187c0
 800dec0:	08018da8 	.word	0x08018da8

0800dec4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d107      	bne.n	800dee2 <tcp_pcb_purge+0x1e>
 800ded2:	4b21      	ldr	r3, [pc, #132]	; (800df58 <tcp_pcb_purge+0x94>)
 800ded4:	f640 0251 	movw	r2, #2129	; 0x851
 800ded8:	4920      	ldr	r1, [pc, #128]	; (800df5c <tcp_pcb_purge+0x98>)
 800deda:	4821      	ldr	r0, [pc, #132]	; (800df60 <tcp_pcb_purge+0x9c>)
 800dedc:	f008 f866 	bl	8015fac <iprintf>
 800dee0:	e037      	b.n	800df52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	7d1b      	ldrb	r3, [r3, #20]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d033      	beq.n	800df52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800deee:	2b0a      	cmp	r3, #10
 800def0:	d02f      	beq.n	800df52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800def6:	2b01      	cmp	r3, #1
 800def8:	d02b      	beq.n	800df52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800defe:	2b00      	cmp	r3, #0
 800df00:	d007      	beq.n	800df12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df06:	4618      	mov	r0, r3
 800df08:	f7fe f850 	bl	800bfac <pbuf_free>
      pcb->refused_data = NULL;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f986 	bl	800e22c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fcf9 	bl	800d924 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff fcf4 	bl	800d924 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	66da      	str	r2, [r3, #108]	; 0x6c
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	0801877c 	.word	0x0801877c
 800df5c:	08018dc8 	.word	0x08018dc8
 800df60:	080187c0 	.word	0x080187c0

0800df64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <tcp_pcb_remove+0x1e>
 800df74:	4b3e      	ldr	r3, [pc, #248]	; (800e070 <tcp_pcb_remove+0x10c>)
 800df76:	f640 0283 	movw	r2, #2179	; 0x883
 800df7a:	493e      	ldr	r1, [pc, #248]	; (800e074 <tcp_pcb_remove+0x110>)
 800df7c:	483e      	ldr	r0, [pc, #248]	; (800e078 <tcp_pcb_remove+0x114>)
 800df7e:	f008 f815 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d106      	bne.n	800df96 <tcp_pcb_remove+0x32>
 800df88:	4b39      	ldr	r3, [pc, #228]	; (800e070 <tcp_pcb_remove+0x10c>)
 800df8a:	f640 0284 	movw	r2, #2180	; 0x884
 800df8e:	493b      	ldr	r1, [pc, #236]	; (800e07c <tcp_pcb_remove+0x118>)
 800df90:	4839      	ldr	r0, [pc, #228]	; (800e078 <tcp_pcb_remove+0x114>)
 800df92:	f008 f80b 	bl	8015fac <iprintf>

  TCP_RMV(pcblist, pcb);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d105      	bne.n	800dfac <tcp_pcb_remove+0x48>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68da      	ldr	r2, [r3, #12]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e013      	b.n	800dfd4 <tcp_pcb_remove+0x70>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	60fb      	str	r3, [r7, #12]
 800dfb2:	e00c      	b.n	800dfce <tcp_pcb_remove+0x6a>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d104      	bne.n	800dfc8 <tcp_pcb_remove+0x64>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	68da      	ldr	r2, [r3, #12]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	60da      	str	r2, [r3, #12]
 800dfc6:	e005      	b.n	800dfd4 <tcp_pcb_remove+0x70>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1ef      	bne.n	800dfb4 <tcp_pcb_remove+0x50>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dfda:	6838      	ldr	r0, [r7, #0]
 800dfdc:	f7ff ff72 	bl	800dec4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	7d1b      	ldrb	r3, [r3, #20]
 800dfe4:	2b0a      	cmp	r3, #10
 800dfe6:	d013      	beq.n	800e010 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d00f      	beq.n	800e010 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	8b5b      	ldrh	r3, [r3, #26]
 800dff4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d009      	beq.n	800e010 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	8b5b      	ldrh	r3, [r3, #26]
 800e000:	f043 0302 	orr.w	r3, r3, #2
 800e004:	b29a      	uxth	r2, r3
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e00a:	6838      	ldr	r0, [r7, #0]
 800e00c:	f003 fbc2 	bl	8011794 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	7d1b      	ldrb	r3, [r3, #20]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d020      	beq.n	800e05a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d006      	beq.n	800e02e <tcp_pcb_remove+0xca>
 800e020:	4b13      	ldr	r3, [pc, #76]	; (800e070 <tcp_pcb_remove+0x10c>)
 800e022:	f640 0293 	movw	r2, #2195	; 0x893
 800e026:	4916      	ldr	r1, [pc, #88]	; (800e080 <tcp_pcb_remove+0x11c>)
 800e028:	4813      	ldr	r0, [pc, #76]	; (800e078 <tcp_pcb_remove+0x114>)
 800e02a:	f007 ffbf 	bl	8015fac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e032:	2b00      	cmp	r3, #0
 800e034:	d006      	beq.n	800e044 <tcp_pcb_remove+0xe0>
 800e036:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <tcp_pcb_remove+0x10c>)
 800e038:	f640 0294 	movw	r2, #2196	; 0x894
 800e03c:	4911      	ldr	r1, [pc, #68]	; (800e084 <tcp_pcb_remove+0x120>)
 800e03e:	480e      	ldr	r0, [pc, #56]	; (800e078 <tcp_pcb_remove+0x114>)
 800e040:	f007 ffb4 	bl	8015fac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d006      	beq.n	800e05a <tcp_pcb_remove+0xf6>
 800e04c:	4b08      	ldr	r3, [pc, #32]	; (800e070 <tcp_pcb_remove+0x10c>)
 800e04e:	f640 0296 	movw	r2, #2198	; 0x896
 800e052:	490d      	ldr	r1, [pc, #52]	; (800e088 <tcp_pcb_remove+0x124>)
 800e054:	4808      	ldr	r0, [pc, #32]	; (800e078 <tcp_pcb_remove+0x114>)
 800e056:	f007 ffa9 	bl	8015fac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2200      	movs	r2, #0
 800e05e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2200      	movs	r2, #0
 800e064:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e066:	bf00      	nop
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	0801877c 	.word	0x0801877c
 800e074:	08018de4 	.word	0x08018de4
 800e078:	080187c0 	.word	0x080187c0
 800e07c:	08018e00 	.word	0x08018e00
 800e080:	08018e20 	.word	0x08018e20
 800e084:	08018e38 	.word	0x08018e38
 800e088:	08018e54 	.word	0x08018e54

0800e08c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d106      	bne.n	800e0a8 <tcp_next_iss+0x1c>
 800e09a:	4b0a      	ldr	r3, [pc, #40]	; (800e0c4 <tcp_next_iss+0x38>)
 800e09c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e0a0:	4909      	ldr	r1, [pc, #36]	; (800e0c8 <tcp_next_iss+0x3c>)
 800e0a2:	480a      	ldr	r0, [pc, #40]	; (800e0cc <tcp_next_iss+0x40>)
 800e0a4:	f007 ff82 	bl	8015fac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e0a8:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <tcp_next_iss+0x44>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <tcp_next_iss+0x48>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	4a07      	ldr	r2, [pc, #28]	; (800e0d0 <tcp_next_iss+0x44>)
 800e0b4:	6013      	str	r3, [r2, #0]
  return iss;
 800e0b6:	4b06      	ldr	r3, [pc, #24]	; (800e0d0 <tcp_next_iss+0x44>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0801877c 	.word	0x0801877c
 800e0c8:	08018e6c 	.word	0x08018e6c
 800e0cc:	080187c0 	.word	0x080187c0
 800e0d0:	20000018 	.word	0x20000018
 800e0d4:	2000b5e8 	.word	0x2000b5e8

0800e0d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	4603      	mov	r3, r0
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d106      	bne.n	800e0fa <tcp_eff_send_mss_netif+0x22>
 800e0ec:	4b14      	ldr	r3, [pc, #80]	; (800e140 <tcp_eff_send_mss_netif+0x68>)
 800e0ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e0f2:	4914      	ldr	r1, [pc, #80]	; (800e144 <tcp_eff_send_mss_netif+0x6c>)
 800e0f4:	4814      	ldr	r0, [pc, #80]	; (800e148 <tcp_eff_send_mss_netif+0x70>)
 800e0f6:	f007 ff59 	bl	8015fac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e100:	89fb      	ldrh	r3, [r7, #14]
 800e102:	e019      	b.n	800e138 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e108:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e10a:	8afb      	ldrh	r3, [r7, #22]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d012      	beq.n	800e136 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e110:	2328      	movs	r3, #40	; 0x28
 800e112:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e114:	8afa      	ldrh	r2, [r7, #22]
 800e116:	8abb      	ldrh	r3, [r7, #20]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d904      	bls.n	800e126 <tcp_eff_send_mss_netif+0x4e>
 800e11c:	8afa      	ldrh	r2, [r7, #22]
 800e11e:	8abb      	ldrh	r3, [r7, #20]
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	b29b      	uxth	r3, r3
 800e124:	e000      	b.n	800e128 <tcp_eff_send_mss_netif+0x50>
 800e126:	2300      	movs	r3, #0
 800e128:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e12a:	8a7a      	ldrh	r2, [r7, #18]
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	4293      	cmp	r3, r2
 800e130:	bf28      	it	cs
 800e132:	4613      	movcs	r3, r2
 800e134:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e136:	89fb      	ldrh	r3, [r7, #14]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	0801877c 	.word	0x0801877c
 800e144:	08018e88 	.word	0x08018e88
 800e148:	080187c0 	.word	0x080187c0

0800e14c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d119      	bne.n	800e194 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e160:	4b10      	ldr	r3, [pc, #64]	; (800e1a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e162:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e166:	4910      	ldr	r1, [pc, #64]	; (800e1a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e168:	4810      	ldr	r0, [pc, #64]	; (800e1ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e16a:	f007 ff1f 	bl	8015fac <iprintf>

  while (pcb != NULL) {
 800e16e:	e011      	b.n	800e194 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d108      	bne.n	800e18e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7fe fd02 	bl	800cb8c <tcp_abort>
      pcb = next;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	e002      	b.n	800e194 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1ea      	bne.n	800e170 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e19a:	bf00      	nop
 800e19c:	bf00      	nop
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	0801877c 	.word	0x0801877c
 800e1a8:	08018eb0 	.word	0x08018eb0
 800e1ac:	080187c0 	.word	0x080187c0

0800e1b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d02a      	beq.n	800e216 <tcp_netif_ip_addr_changed+0x66>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d026      	beq.n	800e216 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e1c8:	4b15      	ldr	r3, [pc, #84]	; (800e220 <tcp_netif_ip_addr_changed+0x70>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff ffbc 	bl	800e14c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e1d4:	4b13      	ldr	r3, [pc, #76]	; (800e224 <tcp_netif_ip_addr_changed+0x74>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7ff ffb6 	bl	800e14c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d017      	beq.n	800e216 <tcp_netif_ip_addr_changed+0x66>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <tcp_netif_ip_addr_changed+0x78>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e00c      	b.n	800e210 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d103      	bne.n	800e20a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	60fb      	str	r3, [r7, #12]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1ef      	bne.n	800e1f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	2000b5e4 	.word	0x2000b5e4
 800e224:	2000b5f0 	.word	0x2000b5f0
 800e228:	2000b5ec 	.word	0x2000b5ec

0800e22c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d007      	beq.n	800e24c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e240:	4618      	mov	r0, r3
 800e242:	f7ff fb6f 	bl	800d924 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e254:	b590      	push	{r4, r7, lr}
 800e256:	b08d      	sub	sp, #52	; 0x34
 800e258:	af04      	add	r7, sp, #16
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d105      	bne.n	800e270 <tcp_input+0x1c>
 800e264:	4b9b      	ldr	r3, [pc, #620]	; (800e4d4 <tcp_input+0x280>)
 800e266:	2283      	movs	r2, #131	; 0x83
 800e268:	499b      	ldr	r1, [pc, #620]	; (800e4d8 <tcp_input+0x284>)
 800e26a:	489c      	ldr	r0, [pc, #624]	; (800e4dc <tcp_input+0x288>)
 800e26c:	f007 fe9e 	bl	8015fac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	4a9a      	ldr	r2, [pc, #616]	; (800e4e0 <tcp_input+0x28c>)
 800e276:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	895b      	ldrh	r3, [r3, #10]
 800e27c:	2b13      	cmp	r3, #19
 800e27e:	f240 83c4 	bls.w	800ea0a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e282:	4b98      	ldr	r3, [pc, #608]	; (800e4e4 <tcp_input+0x290>)
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	4a97      	ldr	r2, [pc, #604]	; (800e4e4 <tcp_input+0x290>)
 800e288:	6812      	ldr	r2, [r2, #0]
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f006 fa4f 	bl	8014730 <ip4_addr_isbroadcast_u32>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	f040 83ba 	bne.w	800ea0e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e29a:	4b92      	ldr	r3, [pc, #584]	; (800e4e4 <tcp_input+0x290>)
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2a2:	2be0      	cmp	r3, #224	; 0xe0
 800e2a4:	f000 83b3 	beq.w	800ea0e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e2a8:	4b8d      	ldr	r3, [pc, #564]	; (800e4e0 <tcp_input+0x28c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	899b      	ldrh	r3, [r3, #12]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fc facf 	bl	800a854 <lwip_htons>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	0b1b      	lsrs	r3, r3, #12
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e2c2:	7cbb      	ldrb	r3, [r7, #18]
 800e2c4:	2b13      	cmp	r3, #19
 800e2c6:	f240 83a4 	bls.w	800ea12 <tcp_input+0x7be>
 800e2ca:	7cbb      	ldrb	r3, [r7, #18]
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	891b      	ldrh	r3, [r3, #8]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	f200 839d 	bhi.w	800ea12 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e2d8:	7cbb      	ldrb	r3, [r7, #18]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	3b14      	subs	r3, #20
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	4b81      	ldr	r3, [pc, #516]	; (800e4e8 <tcp_input+0x294>)
 800e2e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e2e4:	4b81      	ldr	r3, [pc, #516]	; (800e4ec <tcp_input+0x298>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	895a      	ldrh	r2, [r3, #10]
 800e2ee:	7cbb      	ldrb	r3, [r7, #18]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d309      	bcc.n	800e30a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e2f6:	4b7c      	ldr	r3, [pc, #496]	; (800e4e8 <tcp_input+0x294>)
 800e2f8:	881a      	ldrh	r2, [r3, #0]
 800e2fa:	4b7d      	ldr	r3, [pc, #500]	; (800e4f0 <tcp_input+0x29c>)
 800e2fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e2fe:	7cbb      	ldrb	r3, [r7, #18]
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7fd fdcc 	bl	800bea0 <pbuf_remove_header>
 800e308:	e04e      	b.n	800e3a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d105      	bne.n	800e31e <tcp_input+0xca>
 800e312:	4b70      	ldr	r3, [pc, #448]	; (800e4d4 <tcp_input+0x280>)
 800e314:	22c2      	movs	r2, #194	; 0xc2
 800e316:	4977      	ldr	r1, [pc, #476]	; (800e4f4 <tcp_input+0x2a0>)
 800e318:	4870      	ldr	r0, [pc, #448]	; (800e4dc <tcp_input+0x288>)
 800e31a:	f007 fe47 	bl	8015fac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e31e:	2114      	movs	r1, #20
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7fd fdbd 	bl	800bea0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	895a      	ldrh	r2, [r3, #10]
 800e32a:	4b71      	ldr	r3, [pc, #452]	; (800e4f0 <tcp_input+0x29c>)
 800e32c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e32e:	4b6e      	ldr	r3, [pc, #440]	; (800e4e8 <tcp_input+0x294>)
 800e330:	881a      	ldrh	r2, [r3, #0]
 800e332:	4b6f      	ldr	r3, [pc, #444]	; (800e4f0 <tcp_input+0x29c>)
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e33a:	4b6d      	ldr	r3, [pc, #436]	; (800e4f0 <tcp_input+0x29c>)
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7fd fdad 	bl	800bea0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	895b      	ldrh	r3, [r3, #10]
 800e34c:	8a3a      	ldrh	r2, [r7, #16]
 800e34e:	429a      	cmp	r2, r3
 800e350:	f200 8361 	bhi.w	800ea16 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	4a64      	ldr	r2, [pc, #400]	; (800e4ec <tcp_input+0x298>)
 800e35c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	8a3a      	ldrh	r2, [r7, #16]
 800e364:	4611      	mov	r1, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f7fd fd9a 	bl	800bea0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	891a      	ldrh	r2, [r3, #8]
 800e370:	8a3b      	ldrh	r3, [r7, #16]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	b29a      	uxth	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	895b      	ldrh	r3, [r3, #10]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d005      	beq.n	800e38e <tcp_input+0x13a>
 800e382:	4b54      	ldr	r3, [pc, #336]	; (800e4d4 <tcp_input+0x280>)
 800e384:	22df      	movs	r2, #223	; 0xdf
 800e386:	495c      	ldr	r1, [pc, #368]	; (800e4f8 <tcp_input+0x2a4>)
 800e388:	4854      	ldr	r0, [pc, #336]	; (800e4dc <tcp_input+0x288>)
 800e38a:	f007 fe0f 	bl	8015fac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	891a      	ldrh	r2, [r3, #8]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	891b      	ldrh	r3, [r3, #8]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d005      	beq.n	800e3a8 <tcp_input+0x154>
 800e39c:	4b4d      	ldr	r3, [pc, #308]	; (800e4d4 <tcp_input+0x280>)
 800e39e:	22e0      	movs	r2, #224	; 0xe0
 800e3a0:	4956      	ldr	r1, [pc, #344]	; (800e4fc <tcp_input+0x2a8>)
 800e3a2:	484e      	ldr	r0, [pc, #312]	; (800e4dc <tcp_input+0x288>)
 800e3a4:	f007 fe02 	bl	8015fac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e3a8:	4b4d      	ldr	r3, [pc, #308]	; (800e4e0 <tcp_input+0x28c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	881b      	ldrh	r3, [r3, #0]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4a4b      	ldr	r2, [pc, #300]	; (800e4e0 <tcp_input+0x28c>)
 800e3b2:	6814      	ldr	r4, [r2, #0]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fc fa4d 	bl	800a854 <lwip_htons>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e3be:	4b48      	ldr	r3, [pc, #288]	; (800e4e0 <tcp_input+0x28c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	885b      	ldrh	r3, [r3, #2]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	4a46      	ldr	r2, [pc, #280]	; (800e4e0 <tcp_input+0x28c>)
 800e3c8:	6814      	ldr	r4, [r2, #0]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fc fa42 	bl	800a854 <lwip_htons>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e3d4:	4b42      	ldr	r3, [pc, #264]	; (800e4e0 <tcp_input+0x28c>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	4a41      	ldr	r2, [pc, #260]	; (800e4e0 <tcp_input+0x28c>)
 800e3dc:	6814      	ldr	r4, [r2, #0]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fc fa4d 	bl	800a87e <lwip_htonl>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	6063      	str	r3, [r4, #4]
 800e3e8:	6863      	ldr	r3, [r4, #4]
 800e3ea:	4a45      	ldr	r2, [pc, #276]	; (800e500 <tcp_input+0x2ac>)
 800e3ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e3ee:	4b3c      	ldr	r3, [pc, #240]	; (800e4e0 <tcp_input+0x28c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	4a3a      	ldr	r2, [pc, #232]	; (800e4e0 <tcp_input+0x28c>)
 800e3f6:	6814      	ldr	r4, [r2, #0]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fc fa40 	bl	800a87e <lwip_htonl>
 800e3fe:	4603      	mov	r3, r0
 800e400:	60a3      	str	r3, [r4, #8]
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	4a3f      	ldr	r2, [pc, #252]	; (800e504 <tcp_input+0x2b0>)
 800e406:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e408:	4b35      	ldr	r3, [pc, #212]	; (800e4e0 <tcp_input+0x28c>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	89db      	ldrh	r3, [r3, #14]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	4a33      	ldr	r2, [pc, #204]	; (800e4e0 <tcp_input+0x28c>)
 800e412:	6814      	ldr	r4, [r2, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f7fc fa1d 	bl	800a854 <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e41e:	4b30      	ldr	r3, [pc, #192]	; (800e4e0 <tcp_input+0x28c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	899b      	ldrh	r3, [r3, #12]
 800e424:	b29b      	uxth	r3, r3
 800e426:	4618      	mov	r0, r3
 800e428:	f7fc fa14 	bl	800a854 <lwip_htons>
 800e42c:	4603      	mov	r3, r0
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e434:	b2da      	uxtb	r2, r3
 800e436:	4b34      	ldr	r3, [pc, #208]	; (800e508 <tcp_input+0x2b4>)
 800e438:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	891a      	ldrh	r2, [r3, #8]
 800e43e:	4b33      	ldr	r3, [pc, #204]	; (800e50c <tcp_input+0x2b8>)
 800e440:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e442:	4b31      	ldr	r3, [pc, #196]	; (800e508 <tcp_input+0x2b4>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	f003 0303 	and.w	r3, r3, #3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00c      	beq.n	800e468 <tcp_input+0x214>
    tcplen++;
 800e44e:	4b2f      	ldr	r3, [pc, #188]	; (800e50c <tcp_input+0x2b8>)
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	3301      	adds	r3, #1
 800e454:	b29a      	uxth	r2, r3
 800e456:	4b2d      	ldr	r3, [pc, #180]	; (800e50c <tcp_input+0x2b8>)
 800e458:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	891a      	ldrh	r2, [r3, #8]
 800e45e:	4b2b      	ldr	r3, [pc, #172]	; (800e50c <tcp_input+0x2b8>)
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	f200 82d9 	bhi.w	800ea1a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e468:	2300      	movs	r3, #0
 800e46a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e46c:	4b28      	ldr	r3, [pc, #160]	; (800e510 <tcp_input+0x2bc>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	61fb      	str	r3, [r7, #28]
 800e472:	e09d      	b.n	800e5b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	7d1b      	ldrb	r3, [r3, #20]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d105      	bne.n	800e488 <tcp_input+0x234>
 800e47c:	4b15      	ldr	r3, [pc, #84]	; (800e4d4 <tcp_input+0x280>)
 800e47e:	22fb      	movs	r2, #251	; 0xfb
 800e480:	4924      	ldr	r1, [pc, #144]	; (800e514 <tcp_input+0x2c0>)
 800e482:	4816      	ldr	r0, [pc, #88]	; (800e4dc <tcp_input+0x288>)
 800e484:	f007 fd92 	bl	8015fac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	7d1b      	ldrb	r3, [r3, #20]
 800e48c:	2b0a      	cmp	r3, #10
 800e48e:	d105      	bne.n	800e49c <tcp_input+0x248>
 800e490:	4b10      	ldr	r3, [pc, #64]	; (800e4d4 <tcp_input+0x280>)
 800e492:	22fc      	movs	r2, #252	; 0xfc
 800e494:	4920      	ldr	r1, [pc, #128]	; (800e518 <tcp_input+0x2c4>)
 800e496:	4811      	ldr	r0, [pc, #68]	; (800e4dc <tcp_input+0x288>)
 800e498:	f007 fd88 	bl	8015fac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	7d1b      	ldrb	r3, [r3, #20]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d105      	bne.n	800e4b0 <tcp_input+0x25c>
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <tcp_input+0x280>)
 800e4a6:	22fd      	movs	r2, #253	; 0xfd
 800e4a8:	491c      	ldr	r1, [pc, #112]	; (800e51c <tcp_input+0x2c8>)
 800e4aa:	480c      	ldr	r0, [pc, #48]	; (800e4dc <tcp_input+0x288>)
 800e4ac:	f007 fd7e 	bl	8015fac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	7a1b      	ldrb	r3, [r3, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d033      	beq.n	800e520 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	7a1a      	ldrb	r2, [r3, #8]
 800e4bc:	4b09      	ldr	r3, [pc, #36]	; (800e4e4 <tcp_input+0x290>)
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d029      	beq.n	800e520 <tcp_input+0x2cc>
      prev = pcb;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	61bb      	str	r3, [r7, #24]
      continue;
 800e4d0:	e06b      	b.n	800e5aa <tcp_input+0x356>
 800e4d2:	bf00      	nop
 800e4d4:	08018ee4 	.word	0x08018ee4
 800e4d8:	08018f18 	.word	0x08018f18
 800e4dc:	08018f30 	.word	0x08018f30
 800e4e0:	20004ae8 	.word	0x20004ae8
 800e4e4:	20007ed0 	.word	0x20007ed0
 800e4e8:	20004aec 	.word	0x20004aec
 800e4ec:	20004af0 	.word	0x20004af0
 800e4f0:	20004aee 	.word	0x20004aee
 800e4f4:	08018f58 	.word	0x08018f58
 800e4f8:	08018f68 	.word	0x08018f68
 800e4fc:	08018f74 	.word	0x08018f74
 800e500:	20004af8 	.word	0x20004af8
 800e504:	20004afc 	.word	0x20004afc
 800e508:	20004b04 	.word	0x20004b04
 800e50c:	20004b02 	.word	0x20004b02
 800e510:	2000b5e4 	.word	0x2000b5e4
 800e514:	08018f94 	.word	0x08018f94
 800e518:	08018fbc 	.word	0x08018fbc
 800e51c:	08018fe8 	.word	0x08018fe8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	8b1a      	ldrh	r2, [r3, #24]
 800e524:	4b94      	ldr	r3, [pc, #592]	; (800e778 <tcp_input+0x524>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d13a      	bne.n	800e5a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	8ada      	ldrh	r2, [r3, #22]
 800e534:	4b90      	ldr	r3, [pc, #576]	; (800e778 <tcp_input+0x524>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	885b      	ldrh	r3, [r3, #2]
 800e53a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d132      	bne.n	800e5a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	4b8d      	ldr	r3, [pc, #564]	; (800e77c <tcp_input+0x528>)
 800e546:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e548:	429a      	cmp	r2, r3
 800e54a:	d12c      	bne.n	800e5a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b8a      	ldr	r3, [pc, #552]	; (800e77c <tcp_input+0x528>)
 800e552:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e554:	429a      	cmp	r2, r3
 800e556:	d126      	bne.n	800e5a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	69fa      	ldr	r2, [r7, #28]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d106      	bne.n	800e570 <tcp_input+0x31c>
 800e562:	4b87      	ldr	r3, [pc, #540]	; (800e780 <tcp_input+0x52c>)
 800e564:	f240 120d 	movw	r2, #269	; 0x10d
 800e568:	4986      	ldr	r1, [pc, #536]	; (800e784 <tcp_input+0x530>)
 800e56a:	4887      	ldr	r0, [pc, #540]	; (800e788 <tcp_input+0x534>)
 800e56c:	f007 fd1e 	bl	8015fac <iprintf>
      if (prev != NULL) {
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <tcp_input+0x338>
        prev->next = pcb->next;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e57e:	4b83      	ldr	r3, [pc, #524]	; (800e78c <tcp_input+0x538>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e586:	4a81      	ldr	r2, [pc, #516]	; (800e78c <tcp_input+0x538>)
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	69fa      	ldr	r2, [r7, #28]
 800e592:	429a      	cmp	r2, r3
 800e594:	d111      	bne.n	800e5ba <tcp_input+0x366>
 800e596:	4b7a      	ldr	r3, [pc, #488]	; (800e780 <tcp_input+0x52c>)
 800e598:	f240 1215 	movw	r2, #277	; 0x115
 800e59c:	497c      	ldr	r1, [pc, #496]	; (800e790 <tcp_input+0x53c>)
 800e59e:	487a      	ldr	r0, [pc, #488]	; (800e788 <tcp_input+0x534>)
 800e5a0:	f007 fd04 	bl	8015fac <iprintf>
      break;
 800e5a4:	e009      	b.n	800e5ba <tcp_input+0x366>
    }
    prev = pcb;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5aa:	69fb      	ldr	r3, [r7, #28]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f47f af5e 	bne.w	800e474 <tcp_input+0x220>
 800e5b8:	e000      	b.n	800e5bc <tcp_input+0x368>
      break;
 800e5ba:	bf00      	nop
  }

  if (pcb == NULL) {
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f040 8095 	bne.w	800e6ee <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5c4:	4b73      	ldr	r3, [pc, #460]	; (800e794 <tcp_input+0x540>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	61fb      	str	r3, [r7, #28]
 800e5ca:	e03f      	b.n	800e64c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	7d1b      	ldrb	r3, [r3, #20]
 800e5d0:	2b0a      	cmp	r3, #10
 800e5d2:	d006      	beq.n	800e5e2 <tcp_input+0x38e>
 800e5d4:	4b6a      	ldr	r3, [pc, #424]	; (800e780 <tcp_input+0x52c>)
 800e5d6:	f240 121f 	movw	r2, #287	; 0x11f
 800e5da:	496f      	ldr	r1, [pc, #444]	; (800e798 <tcp_input+0x544>)
 800e5dc:	486a      	ldr	r0, [pc, #424]	; (800e788 <tcp_input+0x534>)
 800e5de:	f007 fce5 	bl	8015fac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	7a1b      	ldrb	r3, [r3, #8]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d009      	beq.n	800e5fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	7a1a      	ldrb	r2, [r3, #8]
 800e5ee:	4b63      	ldr	r3, [pc, #396]	; (800e77c <tcp_input+0x528>)
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d122      	bne.n	800e644 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	8b1a      	ldrh	r2, [r3, #24]
 800e602:	4b5d      	ldr	r3, [pc, #372]	; (800e778 <tcp_input+0x524>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d11b      	bne.n	800e646 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	8ada      	ldrh	r2, [r3, #22]
 800e612:	4b59      	ldr	r3, [pc, #356]	; (800e778 <tcp_input+0x524>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	885b      	ldrh	r3, [r3, #2]
 800e618:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d113      	bne.n	800e646 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	685a      	ldr	r2, [r3, #4]
 800e622:	4b56      	ldr	r3, [pc, #344]	; (800e77c <tcp_input+0x528>)
 800e624:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e626:	429a      	cmp	r2, r3
 800e628:	d10d      	bne.n	800e646 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	4b53      	ldr	r3, [pc, #332]	; (800e77c <tcp_input+0x528>)
 800e630:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e632:	429a      	cmp	r2, r3
 800e634:	d107      	bne.n	800e646 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e636:	69f8      	ldr	r0, [r7, #28]
 800e638:	f000 fb54 	bl	800ece4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7fd fcb5 	bl	800bfac <pbuf_free>
        return;
 800e642:	e1f0      	b.n	800ea26 <tcp_input+0x7d2>
        continue;
 800e644:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	61fb      	str	r3, [r7, #28]
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1bc      	bne.n	800e5cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e656:	4b51      	ldr	r3, [pc, #324]	; (800e79c <tcp_input+0x548>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	617b      	str	r3, [r7, #20]
 800e65c:	e02a      	b.n	800e6b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	7a1b      	ldrb	r3, [r3, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00c      	beq.n	800e680 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	7a1a      	ldrb	r2, [r3, #8]
 800e66a:	4b44      	ldr	r3, [pc, #272]	; (800e77c <tcp_input+0x528>)
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e672:	3301      	adds	r3, #1
 800e674:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e676:	429a      	cmp	r2, r3
 800e678:	d002      	beq.n	800e680 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	61bb      	str	r3, [r7, #24]
        continue;
 800e67e:	e016      	b.n	800e6ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	8ada      	ldrh	r2, [r3, #22]
 800e684:	4b3c      	ldr	r3, [pc, #240]	; (800e778 <tcp_input+0x524>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	885b      	ldrh	r3, [r3, #2]
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d10c      	bne.n	800e6aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	4b39      	ldr	r3, [pc, #228]	; (800e77c <tcp_input+0x528>)
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d00f      	beq.n	800e6bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00d      	beq.n	800e6be <tcp_input+0x46a>
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d009      	beq.n	800e6be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1d1      	bne.n	800e65e <tcp_input+0x40a>
 800e6ba:	e000      	b.n	800e6be <tcp_input+0x46a>
            break;
 800e6bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d014      	beq.n	800e6ee <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00a      	beq.n	800e6e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e6d2:	4b32      	ldr	r3, [pc, #200]	; (800e79c <tcp_input+0x548>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e6da:	4a30      	ldr	r2, [pc, #192]	; (800e79c <tcp_input+0x548>)
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e6e0:	6978      	ldr	r0, [r7, #20]
 800e6e2:	f000 fa01 	bl	800eae8 <tcp_listen_input>
      }
      pbuf_free(p);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7fd fc60 	bl	800bfac <pbuf_free>
      return;
 800e6ec:	e19b      	b.n	800ea26 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f000 8160 	beq.w	800e9b6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e6f6:	4b2a      	ldr	r3, [pc, #168]	; (800e7a0 <tcp_input+0x54c>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	891a      	ldrh	r2, [r3, #8]
 800e700:	4b27      	ldr	r3, [pc, #156]	; (800e7a0 <tcp_input+0x54c>)
 800e702:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e704:	4a26      	ldr	r2, [pc, #152]	; (800e7a0 <tcp_input+0x54c>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e70a:	4b1b      	ldr	r3, [pc, #108]	; (800e778 <tcp_input+0x524>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a24      	ldr	r2, [pc, #144]	; (800e7a0 <tcp_input+0x54c>)
 800e710:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e712:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <tcp_input+0x550>)
 800e714:	2200      	movs	r2, #0
 800e716:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e718:	4b23      	ldr	r3, [pc, #140]	; (800e7a8 <tcp_input+0x554>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e71e:	4b23      	ldr	r3, [pc, #140]	; (800e7ac <tcp_input+0x558>)
 800e720:	2200      	movs	r2, #0
 800e722:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e724:	4b22      	ldr	r3, [pc, #136]	; (800e7b0 <tcp_input+0x55c>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 0308 	and.w	r3, r3, #8
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d006      	beq.n	800e73e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	7b5b      	ldrb	r3, [r3, #13]
 800e734:	f043 0301 	orr.w	r3, r3, #1
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e742:	2b00      	cmp	r3, #0
 800e744:	d038      	beq.n	800e7b8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e746:	69f8      	ldr	r0, [r7, #28]
 800e748:	f7ff f870 	bl	800d82c <tcp_process_refused_data>
 800e74c:	4603      	mov	r3, r0
 800e74e:	f113 0f0d 	cmn.w	r3, #13
 800e752:	d007      	beq.n	800e764 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d02d      	beq.n	800e7b8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e75c:	4b15      	ldr	r3, [pc, #84]	; (800e7b4 <tcp_input+0x560>)
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d029      	beq.n	800e7b8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f040 8104 	bne.w	800e976 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e76e:	69f8      	ldr	r0, [r7, #28]
 800e770:	f003 fe16 	bl	80123a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e774:	e0ff      	b.n	800e976 <tcp_input+0x722>
 800e776:	bf00      	nop
 800e778:	20004ae8 	.word	0x20004ae8
 800e77c:	20007ed0 	.word	0x20007ed0
 800e780:	08018ee4 	.word	0x08018ee4
 800e784:	08019010 	.word	0x08019010
 800e788:	08018f30 	.word	0x08018f30
 800e78c:	2000b5e4 	.word	0x2000b5e4
 800e790:	0801903c 	.word	0x0801903c
 800e794:	2000b5f4 	.word	0x2000b5f4
 800e798:	08019068 	.word	0x08019068
 800e79c:	2000b5ec 	.word	0x2000b5ec
 800e7a0:	20004ad8 	.word	0x20004ad8
 800e7a4:	20004b08 	.word	0x20004b08
 800e7a8:	20004b05 	.word	0x20004b05
 800e7ac:	20004b00 	.word	0x20004b00
 800e7b0:	20004b04 	.word	0x20004b04
 800e7b4:	20004b02 	.word	0x20004b02
      }
    }
    tcp_input_pcb = pcb;
 800e7b8:	4a9c      	ldr	r2, [pc, #624]	; (800ea2c <tcp_input+0x7d8>)
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7be:	69f8      	ldr	r0, [r7, #28]
 800e7c0:	f000 fb0a 	bl	800edd8 <tcp_process>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e7c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7cc:	f113 0f0d 	cmn.w	r3, #13
 800e7d0:	f000 80d3 	beq.w	800e97a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e7d4:	4b96      	ldr	r3, [pc, #600]	; (800ea30 <tcp_input+0x7dc>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d015      	beq.n	800e80c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d008      	beq.n	800e7fc <tcp_input+0x5a8>
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	6912      	ldr	r2, [r2, #16]
 800e7f4:	f06f 010d 	mvn.w	r1, #13
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e7fc:	69f9      	ldr	r1, [r7, #28]
 800e7fe:	488d      	ldr	r0, [pc, #564]	; (800ea34 <tcp_input+0x7e0>)
 800e800:	f7ff fbb0 	bl	800df64 <tcp_pcb_remove>
        tcp_free(pcb);
 800e804:	69f8      	ldr	r0, [r7, #28]
 800e806:	f7fd fe7d 	bl	800c504 <tcp_free>
 800e80a:	e0c1      	b.n	800e990 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e810:	4b89      	ldr	r3, [pc, #548]	; (800ea38 <tcp_input+0x7e4>)
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d01d      	beq.n	800e854 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e818:	4b87      	ldr	r3, [pc, #540]	; (800ea38 <tcp_input+0x7e4>)
 800e81a:	881b      	ldrh	r3, [r3, #0]
 800e81c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00a      	beq.n	800e83e <tcp_input+0x5ea>
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e82e:	69fa      	ldr	r2, [r7, #28]
 800e830:	6910      	ldr	r0, [r2, #16]
 800e832:	89fa      	ldrh	r2, [r7, #14]
 800e834:	69f9      	ldr	r1, [r7, #28]
 800e836:	4798      	blx	r3
 800e838:	4603      	mov	r3, r0
 800e83a:	74fb      	strb	r3, [r7, #19]
 800e83c:	e001      	b.n	800e842 <tcp_input+0x5ee>
 800e83e:	2300      	movs	r3, #0
 800e840:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e846:	f113 0f0d 	cmn.w	r3, #13
 800e84a:	f000 8098 	beq.w	800e97e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e84e:	4b7a      	ldr	r3, [pc, #488]	; (800ea38 <tcp_input+0x7e4>)
 800e850:	2200      	movs	r2, #0
 800e852:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e854:	69f8      	ldr	r0, [r7, #28]
 800e856:	f000 f907 	bl	800ea68 <tcp_input_delayed_close>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f040 8090 	bne.w	800e982 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e862:	4b76      	ldr	r3, [pc, #472]	; (800ea3c <tcp_input+0x7e8>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d041      	beq.n	800e8ee <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d006      	beq.n	800e880 <tcp_input+0x62c>
 800e872:	4b73      	ldr	r3, [pc, #460]	; (800ea40 <tcp_input+0x7ec>)
 800e874:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e878:	4972      	ldr	r1, [pc, #456]	; (800ea44 <tcp_input+0x7f0>)
 800e87a:	4873      	ldr	r0, [pc, #460]	; (800ea48 <tcp_input+0x7f4>)
 800e87c:	f007 fb96 	bl	8015fac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	8b5b      	ldrh	r3, [r3, #26]
 800e884:	f003 0310 	and.w	r3, r3, #16
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d008      	beq.n	800e89e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e88c:	4b6b      	ldr	r3, [pc, #428]	; (800ea3c <tcp_input+0x7e8>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd fb8b 	bl	800bfac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e896:	69f8      	ldr	r0, [r7, #28]
 800e898:	f7fe f978 	bl	800cb8c <tcp_abort>
            goto aborted;
 800e89c:	e078      	b.n	800e990 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00c      	beq.n	800e8c2 <tcp_input+0x66e>
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	6918      	ldr	r0, [r3, #16]
 800e8b2:	4b62      	ldr	r3, [pc, #392]	; (800ea3c <tcp_input+0x7e8>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	69f9      	ldr	r1, [r7, #28]
 800e8ba:	47a0      	blx	r4
 800e8bc:	4603      	mov	r3, r0
 800e8be:	74fb      	strb	r3, [r7, #19]
 800e8c0:	e008      	b.n	800e8d4 <tcp_input+0x680>
 800e8c2:	4b5e      	ldr	r3, [pc, #376]	; (800ea3c <tcp_input+0x7e8>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	69f9      	ldr	r1, [r7, #28]
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	f7ff f884 	bl	800d9d8 <tcp_recv_null>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e8d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8d8:	f113 0f0d 	cmn.w	r3, #13
 800e8dc:	d053      	beq.n	800e986 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e8de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e8e6:	4b55      	ldr	r3, [pc, #340]	; (800ea3c <tcp_input+0x7e8>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e8ee:	4b50      	ldr	r3, [pc, #320]	; (800ea30 <tcp_input+0x7dc>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d030      	beq.n	800e95c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d009      	beq.n	800e916 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e906:	7b5a      	ldrb	r2, [r3, #13]
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e90c:	f042 0220 	orr.w	r2, r2, #32
 800e910:	b2d2      	uxtb	r2, r2
 800e912:	735a      	strb	r2, [r3, #13]
 800e914:	e022      	b.n	800e95c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e91a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e91e:	d005      	beq.n	800e92c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e924:	3301      	adds	r3, #1
 800e926:	b29a      	uxth	r2, r3
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00b      	beq.n	800e94e <tcp_input+0x6fa>
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	6918      	ldr	r0, [r3, #16]
 800e940:	2300      	movs	r3, #0
 800e942:	2200      	movs	r2, #0
 800e944:	69f9      	ldr	r1, [r7, #28]
 800e946:	47a0      	blx	r4
 800e948:	4603      	mov	r3, r0
 800e94a:	74fb      	strb	r3, [r7, #19]
 800e94c:	e001      	b.n	800e952 <tcp_input+0x6fe>
 800e94e:	2300      	movs	r3, #0
 800e950:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e952:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e956:	f113 0f0d 	cmn.w	r3, #13
 800e95a:	d016      	beq.n	800e98a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e95c:	4b33      	ldr	r3, [pc, #204]	; (800ea2c <tcp_input+0x7d8>)
 800e95e:	2200      	movs	r2, #0
 800e960:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e962:	69f8      	ldr	r0, [r7, #28]
 800e964:	f000 f880 	bl	800ea68 <tcp_input_delayed_close>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10f      	bne.n	800e98e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e96e:	69f8      	ldr	r0, [r7, #28]
 800e970:	f002 ff10 	bl	8011794 <tcp_output>
 800e974:	e00c      	b.n	800e990 <tcp_input+0x73c>
        goto aborted;
 800e976:	bf00      	nop
 800e978:	e00a      	b.n	800e990 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e97a:	bf00      	nop
 800e97c:	e008      	b.n	800e990 <tcp_input+0x73c>
              goto aborted;
 800e97e:	bf00      	nop
 800e980:	e006      	b.n	800e990 <tcp_input+0x73c>
          goto aborted;
 800e982:	bf00      	nop
 800e984:	e004      	b.n	800e990 <tcp_input+0x73c>
            goto aborted;
 800e986:	bf00      	nop
 800e988:	e002      	b.n	800e990 <tcp_input+0x73c>
              goto aborted;
 800e98a:	bf00      	nop
 800e98c:	e000      	b.n	800e990 <tcp_input+0x73c>
          goto aborted;
 800e98e:	bf00      	nop
    tcp_input_pcb = NULL;
 800e990:	4b26      	ldr	r3, [pc, #152]	; (800ea2c <tcp_input+0x7d8>)
 800e992:	2200      	movs	r2, #0
 800e994:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e996:	4b29      	ldr	r3, [pc, #164]	; (800ea3c <tcp_input+0x7e8>)
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e99c:	4b2b      	ldr	r3, [pc, #172]	; (800ea4c <tcp_input+0x7f8>)
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d03f      	beq.n	800ea24 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e9a4:	4b29      	ldr	r3, [pc, #164]	; (800ea4c <tcp_input+0x7f8>)
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fd faff 	bl	800bfac <pbuf_free>
      inseg.p = NULL;
 800e9ae:	4b27      	ldr	r3, [pc, #156]	; (800ea4c <tcp_input+0x7f8>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e9b4:	e036      	b.n	800ea24 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e9b6:	4b26      	ldr	r3, [pc, #152]	; (800ea50 <tcp_input+0x7fc>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	899b      	ldrh	r3, [r3, #12]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fb ff48 	bl	800a854 <lwip_htons>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	f003 0304 	and.w	r3, r3, #4
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d118      	bne.n	800ea02 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9d0:	4b20      	ldr	r3, [pc, #128]	; (800ea54 <tcp_input+0x800>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	4b20      	ldr	r3, [pc, #128]	; (800ea58 <tcp_input+0x804>)
 800e9d6:	881b      	ldrh	r3, [r3, #0]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4b20      	ldr	r3, [pc, #128]	; (800ea5c <tcp_input+0x808>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ea50 <tcp_input+0x7fc>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e4:	885b      	ldrh	r3, [r3, #2]
 800e9e6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e8:	4a19      	ldr	r2, [pc, #100]	; (800ea50 <tcp_input+0x7fc>)
 800e9ea:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ec:	8812      	ldrh	r2, [r2, #0]
 800e9ee:	b292      	uxth	r2, r2
 800e9f0:	9202      	str	r2, [sp, #8]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ea60 <tcp_input+0x80c>)
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ea64 <tcp_input+0x810>)
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	f003 fc7d 	bl	80122fc <tcp_rst>
    pbuf_free(p);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fd fad2 	bl	800bfac <pbuf_free>
  return;
 800ea08:	e00c      	b.n	800ea24 <tcp_input+0x7d0>
    goto dropped;
 800ea0a:	bf00      	nop
 800ea0c:	e006      	b.n	800ea1c <tcp_input+0x7c8>
    goto dropped;
 800ea0e:	bf00      	nop
 800ea10:	e004      	b.n	800ea1c <tcp_input+0x7c8>
    goto dropped;
 800ea12:	bf00      	nop
 800ea14:	e002      	b.n	800ea1c <tcp_input+0x7c8>
      goto dropped;
 800ea16:	bf00      	nop
 800ea18:	e000      	b.n	800ea1c <tcp_input+0x7c8>
      goto dropped;
 800ea1a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7fd fac5 	bl	800bfac <pbuf_free>
 800ea22:	e000      	b.n	800ea26 <tcp_input+0x7d2>
  return;
 800ea24:	bf00      	nop
}
 800ea26:	3724      	adds	r7, #36	; 0x24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd90      	pop	{r4, r7, pc}
 800ea2c:	2000b5f8 	.word	0x2000b5f8
 800ea30:	20004b05 	.word	0x20004b05
 800ea34:	2000b5e4 	.word	0x2000b5e4
 800ea38:	20004b00 	.word	0x20004b00
 800ea3c:	20004b08 	.word	0x20004b08
 800ea40:	08018ee4 	.word	0x08018ee4
 800ea44:	08019098 	.word	0x08019098
 800ea48:	08018f30 	.word	0x08018f30
 800ea4c:	20004ad8 	.word	0x20004ad8
 800ea50:	20004ae8 	.word	0x20004ae8
 800ea54:	20004afc 	.word	0x20004afc
 800ea58:	20004b02 	.word	0x20004b02
 800ea5c:	20004af8 	.word	0x20004af8
 800ea60:	20007ee0 	.word	0x20007ee0
 800ea64:	20007ee4 	.word	0x20007ee4

0800ea68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d106      	bne.n	800ea84 <tcp_input_delayed_close+0x1c>
 800ea76:	4b17      	ldr	r3, [pc, #92]	; (800ead4 <tcp_input_delayed_close+0x6c>)
 800ea78:	f240 225a 	movw	r2, #602	; 0x25a
 800ea7c:	4916      	ldr	r1, [pc, #88]	; (800ead8 <tcp_input_delayed_close+0x70>)
 800ea7e:	4817      	ldr	r0, [pc, #92]	; (800eadc <tcp_input_delayed_close+0x74>)
 800ea80:	f007 fa94 	bl	8015fac <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ea84:	4b16      	ldr	r3, [pc, #88]	; (800eae0 <tcp_input_delayed_close+0x78>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01c      	beq.n	800eaca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f003 0310 	and.w	r3, r3, #16
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10d      	bne.n	800eab8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d008      	beq.n	800eab8 <tcp_input_delayed_close+0x50>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6912      	ldr	r2, [r2, #16]
 800eab0:	f06f 010e 	mvn.w	r1, #14
 800eab4:	4610      	mov	r0, r2
 800eab6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	480a      	ldr	r0, [pc, #40]	; (800eae4 <tcp_input_delayed_close+0x7c>)
 800eabc:	f7ff fa52 	bl	800df64 <tcp_pcb_remove>
    tcp_free(pcb);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7fd fd1f 	bl	800c504 <tcp_free>
    return 1;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e000      	b.n	800eacc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	08018ee4 	.word	0x08018ee4
 800ead8:	080190b4 	.word	0x080190b4
 800eadc:	08018f30 	.word	0x08018f30
 800eae0:	20004b05 	.word	0x20004b05
 800eae4:	2000b5e4 	.word	0x2000b5e4

0800eae8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eae8:	b590      	push	{r4, r7, lr}
 800eaea:	b08b      	sub	sp, #44	; 0x2c
 800eaec:	af04      	add	r7, sp, #16
 800eaee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eaf0:	4b6f      	ldr	r3, [pc, #444]	; (800ecb0 <tcp_listen_input+0x1c8>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	f003 0304 	and.w	r3, r3, #4
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f040 80d2 	bne.w	800eca2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d106      	bne.n	800eb12 <tcp_listen_input+0x2a>
 800eb04:	4b6b      	ldr	r3, [pc, #428]	; (800ecb4 <tcp_listen_input+0x1cc>)
 800eb06:	f240 2281 	movw	r2, #641	; 0x281
 800eb0a:	496b      	ldr	r1, [pc, #428]	; (800ecb8 <tcp_listen_input+0x1d0>)
 800eb0c:	486b      	ldr	r0, [pc, #428]	; (800ecbc <tcp_listen_input+0x1d4>)
 800eb0e:	f007 fa4d 	bl	8015fac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb12:	4b67      	ldr	r3, [pc, #412]	; (800ecb0 <tcp_listen_input+0x1c8>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 0310 	and.w	r3, r3, #16
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d019      	beq.n	800eb52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb1e:	4b68      	ldr	r3, [pc, #416]	; (800ecc0 <tcp_listen_input+0x1d8>)
 800eb20:	6819      	ldr	r1, [r3, #0]
 800eb22:	4b68      	ldr	r3, [pc, #416]	; (800ecc4 <tcp_listen_input+0x1dc>)
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	4b67      	ldr	r3, [pc, #412]	; (800ecc8 <tcp_listen_input+0x1e0>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb2e:	4b67      	ldr	r3, [pc, #412]	; (800eccc <tcp_listen_input+0x1e4>)
 800eb30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb32:	885b      	ldrh	r3, [r3, #2]
 800eb34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb36:	4a65      	ldr	r2, [pc, #404]	; (800eccc <tcp_listen_input+0x1e4>)
 800eb38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb3a:	8812      	ldrh	r2, [r2, #0]
 800eb3c:	b292      	uxth	r2, r2
 800eb3e:	9202      	str	r2, [sp, #8]
 800eb40:	9301      	str	r3, [sp, #4]
 800eb42:	4b63      	ldr	r3, [pc, #396]	; (800ecd0 <tcp_listen_input+0x1e8>)
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	4b63      	ldr	r3, [pc, #396]	; (800ecd4 <tcp_listen_input+0x1ec>)
 800eb48:	4602      	mov	r2, r0
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f003 fbd6 	bl	80122fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eb50:	e0a9      	b.n	800eca6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eb52:	4b57      	ldr	r3, [pc, #348]	; (800ecb0 <tcp_listen_input+0x1c8>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	f003 0302 	and.w	r3, r3, #2
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 80a3 	beq.w	800eca6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	7d5b      	ldrb	r3, [r3, #21]
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff f85b 	bl	800dc20 <tcp_alloc>
 800eb6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d111      	bne.n	800eb96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00a      	beq.n	800eb90 <tcp_listen_input+0xa8>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	6910      	ldr	r0, [r2, #16]
 800eb82:	f04f 32ff 	mov.w	r2, #4294967295
 800eb86:	2100      	movs	r1, #0
 800eb88:	4798      	blx	r3
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	73bb      	strb	r3, [r7, #14]
      return;
 800eb8e:	e08b      	b.n	800eca8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb90:	23f0      	movs	r3, #240	; 0xf0
 800eb92:	73bb      	strb	r3, [r7, #14]
      return;
 800eb94:	e088      	b.n	800eca8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eb96:	4b50      	ldr	r3, [pc, #320]	; (800ecd8 <tcp_listen_input+0x1f0>)
 800eb98:	695a      	ldr	r2, [r3, #20]
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eb9e:	4b4e      	ldr	r3, [pc, #312]	; (800ecd8 <tcp_listen_input+0x1f0>)
 800eba0:	691a      	ldr	r2, [r3, #16]
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	8ada      	ldrh	r2, [r3, #22]
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ebae:	4b47      	ldr	r3, [pc, #284]	; (800eccc <tcp_listen_input+0x1e4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2203      	movs	r2, #3
 800ebbe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ebc0:	4b41      	ldr	r3, [pc, #260]	; (800ecc8 <tcp_listen_input+0x1e0>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ebd2:	6978      	ldr	r0, [r7, #20]
 800ebd4:	f7ff fa5a 	bl	800e08c <tcp_next_iss>
 800ebd8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ebf2:	4b35      	ldr	r3, [pc, #212]	; (800ecc8 <tcp_listen_input+0x1e0>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	1e5a      	subs	r2, r3, #1
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691a      	ldr	r2, [r3, #16]
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	7a5b      	ldrb	r3, [r3, #9]
 800ec0e:	f003 030c 	and.w	r3, r3, #12
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	7a1a      	ldrb	r2, [r3, #8]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec20:	4b2e      	ldr	r3, [pc, #184]	; (800ecdc <tcp_listen_input+0x1f4>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	60da      	str	r2, [r3, #12]
 800ec28:	4a2c      	ldr	r2, [pc, #176]	; (800ecdc <tcp_listen_input+0x1f4>)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	6013      	str	r3, [r2, #0]
 800ec2e:	f003 fd27 	bl	8012680 <tcp_timer_needed>
 800ec32:	4b2b      	ldr	r3, [pc, #172]	; (800ece0 <tcp_listen_input+0x1f8>)
 800ec34:	2201      	movs	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	f001 fd8d 	bl	8010758 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec3e:	4b23      	ldr	r3, [pc, #140]	; (800eccc <tcp_listen_input+0x1e4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	89db      	ldrh	r3, [r3, #14]
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	4618      	mov	r0, r3
 800ec62:	f005 facf 	bl	8014204 <ip4_route>
 800ec66:	4601      	mov	r1, r0
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7ff fa32 	bl	800e0d8 <tcp_eff_send_mss_netif>
 800ec74:	4603      	mov	r3, r0
 800ec76:	461a      	mov	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ec7c:	2112      	movs	r1, #18
 800ec7e:	6978      	ldr	r0, [r7, #20]
 800ec80:	f002 fc9a 	bl	80115b8 <tcp_enqueue_flags>
 800ec84:	4603      	mov	r3, r0
 800ec86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ec88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ec90:	2100      	movs	r1, #0
 800ec92:	6978      	ldr	r0, [r7, #20]
 800ec94:	f7fd febc 	bl	800ca10 <tcp_abandon>
      return;
 800ec98:	e006      	b.n	800eca8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ec9a:	6978      	ldr	r0, [r7, #20]
 800ec9c:	f002 fd7a 	bl	8011794 <tcp_output>
  return;
 800eca0:	e001      	b.n	800eca6 <tcp_listen_input+0x1be>
    return;
 800eca2:	bf00      	nop
 800eca4:	e000      	b.n	800eca8 <tcp_listen_input+0x1c0>
  return;
 800eca6:	bf00      	nop
}
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd90      	pop	{r4, r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20004b04 	.word	0x20004b04
 800ecb4:	08018ee4 	.word	0x08018ee4
 800ecb8:	080190dc 	.word	0x080190dc
 800ecbc:	08018f30 	.word	0x08018f30
 800ecc0:	20004afc 	.word	0x20004afc
 800ecc4:	20004b02 	.word	0x20004b02
 800ecc8:	20004af8 	.word	0x20004af8
 800eccc:	20004ae8 	.word	0x20004ae8
 800ecd0:	20007ee0 	.word	0x20007ee0
 800ecd4:	20007ee4 	.word	0x20007ee4
 800ecd8:	20007ed0 	.word	0x20007ed0
 800ecdc:	2000b5e4 	.word	0x2000b5e4
 800ece0:	2000b5e0 	.word	0x2000b5e0

0800ece4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af04      	add	r7, sp, #16
 800ecea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ecec:	4b2f      	ldr	r3, [pc, #188]	; (800edac <tcp_timewait_input+0xc8>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	f003 0304 	and.w	r3, r3, #4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d153      	bne.n	800eda0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <tcp_timewait_input+0x28>
 800ecfe:	4b2c      	ldr	r3, [pc, #176]	; (800edb0 <tcp_timewait_input+0xcc>)
 800ed00:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ed04:	492b      	ldr	r1, [pc, #172]	; (800edb4 <tcp_timewait_input+0xd0>)
 800ed06:	482c      	ldr	r0, [pc, #176]	; (800edb8 <tcp_timewait_input+0xd4>)
 800ed08:	f007 f950 	bl	8015fac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed0c:	4b27      	ldr	r3, [pc, #156]	; (800edac <tcp_timewait_input+0xc8>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d02a      	beq.n	800ed6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed18:	4b28      	ldr	r3, [pc, #160]	; (800edbc <tcp_timewait_input+0xd8>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	db2d      	blt.n	800ed82 <tcp_timewait_input+0x9e>
 800ed26:	4b25      	ldr	r3, [pc, #148]	; (800edbc <tcp_timewait_input+0xd8>)
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2e:	6879      	ldr	r1, [r7, #4]
 800ed30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed32:	440b      	add	r3, r1
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	dc23      	bgt.n	800ed82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed3a:	4b21      	ldr	r3, [pc, #132]	; (800edc0 <tcp_timewait_input+0xdc>)
 800ed3c:	6819      	ldr	r1, [r3, #0]
 800ed3e:	4b21      	ldr	r3, [pc, #132]	; (800edc4 <tcp_timewait_input+0xe0>)
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	4b1d      	ldr	r3, [pc, #116]	; (800edbc <tcp_timewait_input+0xd8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed4a:	4b1f      	ldr	r3, [pc, #124]	; (800edc8 <tcp_timewait_input+0xe4>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed4e:	885b      	ldrh	r3, [r3, #2]
 800ed50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed52:	4a1d      	ldr	r2, [pc, #116]	; (800edc8 <tcp_timewait_input+0xe4>)
 800ed54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed56:	8812      	ldrh	r2, [r2, #0]
 800ed58:	b292      	uxth	r2, r2
 800ed5a:	9202      	str	r2, [sp, #8]
 800ed5c:	9301      	str	r3, [sp, #4]
 800ed5e:	4b1b      	ldr	r3, [pc, #108]	; (800edcc <tcp_timewait_input+0xe8>)
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	4b1b      	ldr	r3, [pc, #108]	; (800edd0 <tcp_timewait_input+0xec>)
 800ed64:	4602      	mov	r2, r0
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f003 fac8 	bl	80122fc <tcp_rst>
      return;
 800ed6c:	e01b      	b.n	800eda6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <tcp_timewait_input+0xc8>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ed7a:	4b16      	ldr	r3, [pc, #88]	; (800edd4 <tcp_timewait_input+0xf0>)
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ed82:	4b10      	ldr	r3, [pc, #64]	; (800edc4 <tcp_timewait_input+0xe0>)
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00c      	beq.n	800eda4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	8b5b      	ldrh	r3, [r3, #26]
 800ed8e:	f043 0302 	orr.w	r3, r3, #2
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f002 fcfb 	bl	8011794 <tcp_output>
  }
  return;
 800ed9e:	e001      	b.n	800eda4 <tcp_timewait_input+0xc0>
    return;
 800eda0:	bf00      	nop
 800eda2:	e000      	b.n	800eda6 <tcp_timewait_input+0xc2>
  return;
 800eda4:	bf00      	nop
}
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	20004b04 	.word	0x20004b04
 800edb0:	08018ee4 	.word	0x08018ee4
 800edb4:	080190fc 	.word	0x080190fc
 800edb8:	08018f30 	.word	0x08018f30
 800edbc:	20004af8 	.word	0x20004af8
 800edc0:	20004afc 	.word	0x20004afc
 800edc4:	20004b02 	.word	0x20004b02
 800edc8:	20004ae8 	.word	0x20004ae8
 800edcc:	20007ee0 	.word	0x20007ee0
 800edd0:	20007ee4 	.word	0x20007ee4
 800edd4:	2000b5e8 	.word	0x2000b5e8

0800edd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800edd8:	b590      	push	{r4, r7, lr}
 800edda:	b08d      	sub	sp, #52	; 0x34
 800eddc:	af04      	add	r7, sp, #16
 800edde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <tcp_process+0x24>
 800edee:	4ba5      	ldr	r3, [pc, #660]	; (800f084 <tcp_process+0x2ac>)
 800edf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800edf4:	49a4      	ldr	r1, [pc, #656]	; (800f088 <tcp_process+0x2b0>)
 800edf6:	48a5      	ldr	r0, [pc, #660]	; (800f08c <tcp_process+0x2b4>)
 800edf8:	f007 f8d8 	bl	8015fac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800edfc:	4ba4      	ldr	r3, [pc, #656]	; (800f090 <tcp_process+0x2b8>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	f003 0304 	and.w	r3, r3, #4
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d04e      	beq.n	800eea6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7d1b      	ldrb	r3, [r3, #20]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d108      	bne.n	800ee22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee14:	4b9f      	ldr	r3, [pc, #636]	; (800f094 <tcp_process+0x2bc>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d123      	bne.n	800ee64 <tcp_process+0x8c>
        acceptable = 1;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	76fb      	strb	r3, [r7, #27]
 800ee20:	e020      	b.n	800ee64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee26:	4b9c      	ldr	r3, [pc, #624]	; (800f098 <tcp_process+0x2c0>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d102      	bne.n	800ee34 <tcp_process+0x5c>
        acceptable = 1;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	76fb      	strb	r3, [r7, #27]
 800ee32:	e017      	b.n	800ee64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee34:	4b98      	ldr	r3, [pc, #608]	; (800f098 <tcp_process+0x2c0>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	db10      	blt.n	800ee64 <tcp_process+0x8c>
 800ee42:	4b95      	ldr	r3, [pc, #596]	; (800f098 <tcp_process+0x2c0>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4a:	6879      	ldr	r1, [r7, #4]
 800ee4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee4e:	440b      	add	r3, r1
 800ee50:	1ad3      	subs	r3, r2, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	dc06      	bgt.n	800ee64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8b5b      	ldrh	r3, [r3, #26]
 800ee5a:	f043 0302 	orr.w	r3, r3, #2
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ee64:	7efb      	ldrb	r3, [r7, #27]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d01b      	beq.n	800eea2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	7d1b      	ldrb	r3, [r3, #20]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <tcp_process+0xa8>
 800ee72:	4b84      	ldr	r3, [pc, #528]	; (800f084 <tcp_process+0x2ac>)
 800ee74:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ee78:	4988      	ldr	r1, [pc, #544]	; (800f09c <tcp_process+0x2c4>)
 800ee7a:	4884      	ldr	r0, [pc, #528]	; (800f08c <tcp_process+0x2b4>)
 800ee7c:	f007 f896 	bl	8015fac <iprintf>
      recv_flags |= TF_RESET;
 800ee80:	4b87      	ldr	r3, [pc, #540]	; (800f0a0 <tcp_process+0x2c8>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f043 0308 	orr.w	r3, r3, #8
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	4b85      	ldr	r3, [pc, #532]	; (800f0a0 <tcp_process+0x2c8>)
 800ee8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	8b5b      	ldrh	r3, [r3, #26]
 800ee92:	f023 0301 	bic.w	r3, r3, #1
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ee9c:	f06f 030d 	mvn.w	r3, #13
 800eea0:	e37a      	b.n	800f598 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	e378      	b.n	800f598 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eea6:	4b7a      	ldr	r3, [pc, #488]	; (800f090 <tcp_process+0x2b8>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	f003 0302 	and.w	r3, r3, #2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d010      	beq.n	800eed4 <tcp_process+0xfc>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	7d1b      	ldrb	r3, [r3, #20]
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d00c      	beq.n	800eed4 <tcp_process+0xfc>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	7d1b      	ldrb	r3, [r3, #20]
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	d008      	beq.n	800eed4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	8b5b      	ldrh	r3, [r3, #26]
 800eec6:	f043 0302 	orr.w	r3, r3, #2
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	e361      	b.n	800f598 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f003 0310 	and.w	r3, r3, #16
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d103      	bne.n	800eee8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eee0:	4b70      	ldr	r3, [pc, #448]	; (800f0a4 <tcp_process+0x2cc>)
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 fc2d 	bl	8010758 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	7d1b      	ldrb	r3, [r3, #20]
 800ef02:	3b02      	subs	r3, #2
 800ef04:	2b07      	cmp	r3, #7
 800ef06:	f200 8337 	bhi.w	800f578 <tcp_process+0x7a0>
 800ef0a:	a201      	add	r2, pc, #4	; (adr r2, 800ef10 <tcp_process+0x138>)
 800ef0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef10:	0800ef31 	.word	0x0800ef31
 800ef14:	0800f161 	.word	0x0800f161
 800ef18:	0800f2d9 	.word	0x0800f2d9
 800ef1c:	0800f303 	.word	0x0800f303
 800ef20:	0800f427 	.word	0x0800f427
 800ef24:	0800f2d9 	.word	0x0800f2d9
 800ef28:	0800f4b3 	.word	0x0800f4b3
 800ef2c:	0800f543 	.word	0x0800f543
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef30:	4b57      	ldr	r3, [pc, #348]	; (800f090 <tcp_process+0x2b8>)
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	f003 0310 	and.w	r3, r3, #16
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80e4 	beq.w	800f106 <tcp_process+0x32e>
 800ef3e:	4b54      	ldr	r3, [pc, #336]	; (800f090 <tcp_process+0x2b8>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	f003 0302 	and.w	r3, r3, #2
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f000 80dd 	beq.w	800f106 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	4b50      	ldr	r3, [pc, #320]	; (800f094 <tcp_process+0x2bc>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	f040 80d5 	bne.w	800f106 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ef5c:	4b4e      	ldr	r3, [pc, #312]	; (800f098 <tcp_process+0x2c0>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ef6e:	4b49      	ldr	r3, [pc, #292]	; (800f094 <tcp_process+0x2bc>)
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ef76:	4b4c      	ldr	r3, [pc, #304]	; (800f0a8 <tcp_process+0x2d0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	89db      	ldrh	r3, [r3, #14]
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ef90:	4b41      	ldr	r3, [pc, #260]	; (800f098 <tcp_process+0x2c0>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	1e5a      	subs	r2, r3, #1
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2204      	movs	r2, #4
 800ef9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	3304      	adds	r3, #4
 800efa8:	4618      	mov	r0, r3
 800efaa:	f005 f92b 	bl	8014204 <ip4_route>
 800efae:	4601      	mov	r1, r0
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3304      	adds	r3, #4
 800efb4:	461a      	mov	r2, r3
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7ff f88e 	bl	800e0d8 <tcp_eff_send_mss_netif>
 800efbc:	4603      	mov	r3, r0
 800efbe:	461a      	mov	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc8:	009a      	lsls	r2, r3, #2
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	f241 111c 	movw	r1, #4380	; 0x111c
 800efd4:	428b      	cmp	r3, r1
 800efd6:	bf38      	it	cc
 800efd8:	460b      	movcc	r3, r1
 800efda:	429a      	cmp	r2, r3
 800efdc:	d204      	bcs.n	800efe8 <tcp_process+0x210>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	e00d      	b.n	800f004 <tcp_process+0x22c>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efec:	005b      	lsls	r3, r3, #1
 800efee:	f241 121c 	movw	r2, #4380	; 0x111c
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d904      	bls.n	800f000 <tcp_process+0x228>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	b29b      	uxth	r3, r3
 800effe:	e001      	b.n	800f004 <tcp_process+0x22c>
 800f000:	f241 131c 	movw	r3, #4380	; 0x111c
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f010:	2b00      	cmp	r3, #0
 800f012:	d106      	bne.n	800f022 <tcp_process+0x24a>
 800f014:	4b1b      	ldr	r3, [pc, #108]	; (800f084 <tcp_process+0x2ac>)
 800f016:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f01a:	4924      	ldr	r1, [pc, #144]	; (800f0ac <tcp_process+0x2d4>)
 800f01c:	481b      	ldr	r0, [pc, #108]	; (800f08c <tcp_process+0x2b4>)
 800f01e:	f006 ffc5 	bl	8015fac <iprintf>
        --pcb->snd_queuelen;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f028:	3b01      	subs	r3, #1
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f036:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d111      	bne.n	800f062 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f042:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d106      	bne.n	800f058 <tcp_process+0x280>
 800f04a:	4b0e      	ldr	r3, [pc, #56]	; (800f084 <tcp_process+0x2ac>)
 800f04c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f050:	4917      	ldr	r1, [pc, #92]	; (800f0b0 <tcp_process+0x2d8>)
 800f052:	480e      	ldr	r0, [pc, #56]	; (800f08c <tcp_process+0x2b4>)
 800f054:	f006 ffaa 	bl	8015fac <iprintf>
          pcb->unsent = rseg->next;
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f060:	e003      	b.n	800f06a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f06a:	69f8      	ldr	r0, [r7, #28]
 800f06c:	f7fe fc6f 	bl	800d94e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f074:	2b00      	cmp	r3, #0
 800f076:	d11d      	bne.n	800f0b4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f07e:	861a      	strh	r2, [r3, #48]	; 0x30
 800f080:	e01f      	b.n	800f0c2 <tcp_process+0x2ea>
 800f082:	bf00      	nop
 800f084:	08018ee4 	.word	0x08018ee4
 800f088:	0801911c 	.word	0x0801911c
 800f08c:	08018f30 	.word	0x08018f30
 800f090:	20004b04 	.word	0x20004b04
 800f094:	20004afc 	.word	0x20004afc
 800f098:	20004af8 	.word	0x20004af8
 800f09c:	08019138 	.word	0x08019138
 800f0a0:	20004b05 	.word	0x20004b05
 800f0a4:	2000b5e8 	.word	0x2000b5e8
 800f0a8:	20004ae8 	.word	0x20004ae8
 800f0ac:	08019158 	.word	0x08019158
 800f0b0:	08019170 	.word	0x08019170
        } else {
          pcb->rtime = 0;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <tcp_process+0x30a>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	6910      	ldr	r0, [r2, #16]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	4798      	blx	r3
 800f0dc:	4603      	mov	r3, r0
 800f0de:	76bb      	strb	r3, [r7, #26]
 800f0e0:	e001      	b.n	800f0e6 <tcp_process+0x30e>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f0e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f0ea:	f113 0f0d 	cmn.w	r3, #13
 800f0ee:	d102      	bne.n	800f0f6 <tcp_process+0x31e>
          return ERR_ABRT;
 800f0f0:	f06f 030c 	mvn.w	r3, #12
 800f0f4:	e250      	b.n	800f598 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	8b5b      	ldrh	r3, [r3, #26]
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f104:	e23a      	b.n	800f57c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f106:	4b9d      	ldr	r3, [pc, #628]	; (800f37c <tcp_process+0x5a4>)
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	f003 0310 	and.w	r3, r3, #16
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f000 8234 	beq.w	800f57c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f114:	4b9a      	ldr	r3, [pc, #616]	; (800f380 <tcp_process+0x5a8>)
 800f116:	6819      	ldr	r1, [r3, #0]
 800f118:	4b9a      	ldr	r3, [pc, #616]	; (800f384 <tcp_process+0x5ac>)
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	461a      	mov	r2, r3
 800f11e:	4b9a      	ldr	r3, [pc, #616]	; (800f388 <tcp_process+0x5b0>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f124:	4b99      	ldr	r3, [pc, #612]	; (800f38c <tcp_process+0x5b4>)
 800f126:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f128:	885b      	ldrh	r3, [r3, #2]
 800f12a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f12c:	4a97      	ldr	r2, [pc, #604]	; (800f38c <tcp_process+0x5b4>)
 800f12e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f130:	8812      	ldrh	r2, [r2, #0]
 800f132:	b292      	uxth	r2, r2
 800f134:	9202      	str	r2, [sp, #8]
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	4b95      	ldr	r3, [pc, #596]	; (800f390 <tcp_process+0x5b8>)
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	4b95      	ldr	r3, [pc, #596]	; (800f394 <tcp_process+0x5bc>)
 800f13e:	4602      	mov	r2, r0
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f003 f8db 	bl	80122fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f14c:	2b05      	cmp	r3, #5
 800f14e:	f200 8215 	bhi.w	800f57c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f002 fea5 	bl	8011ea8 <tcp_rexmit_rto>
      break;
 800f15e:	e20d      	b.n	800f57c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f160:	4b86      	ldr	r3, [pc, #536]	; (800f37c <tcp_process+0x5a4>)
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	f003 0310 	and.w	r3, r3, #16
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 80a1 	beq.w	800f2b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f16e:	4b84      	ldr	r3, [pc, #528]	; (800f380 <tcp_process+0x5a8>)
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	3b01      	subs	r3, #1
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	db7e      	blt.n	800f27c <tcp_process+0x4a4>
 800f17e:	4b80      	ldr	r3, [pc, #512]	; (800f380 <tcp_process+0x5a8>)
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f186:	1ad3      	subs	r3, r2, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc77      	bgt.n	800f27c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2204      	movs	r2, #4
 800f190:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f196:	2b00      	cmp	r3, #0
 800f198:	d102      	bne.n	800f1a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f19a:	23fa      	movs	r3, #250	; 0xfa
 800f19c:	76bb      	strb	r3, [r7, #26]
 800f19e:	e01d      	b.n	800f1dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <tcp_process+0x3e0>
 800f1aa:	4b7b      	ldr	r3, [pc, #492]	; (800f398 <tcp_process+0x5c0>)
 800f1ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f1b0:	497a      	ldr	r1, [pc, #488]	; (800f39c <tcp_process+0x5c4>)
 800f1b2:	487b      	ldr	r0, [pc, #492]	; (800f3a0 <tcp_process+0x5c8>)
 800f1b4:	f006 fefa 	bl	8015fac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00a      	beq.n	800f1d8 <tcp_process+0x400>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	6910      	ldr	r0, [r2, #16]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	6879      	ldr	r1, [r7, #4]
 800f1d0:	4798      	blx	r3
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	76bb      	strb	r3, [r7, #26]
 800f1d6:	e001      	b.n	800f1dc <tcp_process+0x404>
 800f1d8:	23f0      	movs	r3, #240	; 0xf0
 800f1da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f1dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00a      	beq.n	800f1fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f1e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1e8:	f113 0f0d 	cmn.w	r3, #13
 800f1ec:	d002      	beq.n	800f1f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7fd fccc 	bl	800cb8c <tcp_abort>
            }
            return ERR_ABRT;
 800f1f4:	f06f 030c 	mvn.w	r3, #12
 800f1f8:	e1ce      	b.n	800f598 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 fae0 	bl	800f7c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f200:	4b68      	ldr	r3, [pc, #416]	; (800f3a4 <tcp_process+0x5cc>)
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d005      	beq.n	800f214 <tcp_process+0x43c>
            recv_acked--;
 800f208:	4b66      	ldr	r3, [pc, #408]	; (800f3a4 <tcp_process+0x5cc>)
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b64      	ldr	r3, [pc, #400]	; (800f3a4 <tcp_process+0x5cc>)
 800f212:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f218:	009a      	lsls	r2, r3, #2
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f21e:	005b      	lsls	r3, r3, #1
 800f220:	f241 111c 	movw	r1, #4380	; 0x111c
 800f224:	428b      	cmp	r3, r1
 800f226:	bf38      	it	cc
 800f228:	460b      	movcc	r3, r1
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d204      	bcs.n	800f238 <tcp_process+0x460>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	b29b      	uxth	r3, r3
 800f236:	e00d      	b.n	800f254 <tcp_process+0x47c>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f242:	4293      	cmp	r3, r2
 800f244:	d904      	bls.n	800f250 <tcp_process+0x478>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	e001      	b.n	800f254 <tcp_process+0x47c>
 800f250:	f241 131c 	movw	r3, #4380	; 0x111c
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f25a:	4b53      	ldr	r3, [pc, #332]	; (800f3a8 <tcp_process+0x5d0>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	f003 0320 	and.w	r3, r3, #32
 800f262:	2b00      	cmp	r3, #0
 800f264:	d037      	beq.n	800f2d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8b5b      	ldrh	r3, [r3, #26]
 800f26a:	f043 0302 	orr.w	r3, r3, #2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2207      	movs	r2, #7
 800f278:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f27a:	e02c      	b.n	800f2d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f27c:	4b40      	ldr	r3, [pc, #256]	; (800f380 <tcp_process+0x5a8>)
 800f27e:	6819      	ldr	r1, [r3, #0]
 800f280:	4b40      	ldr	r3, [pc, #256]	; (800f384 <tcp_process+0x5ac>)
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	461a      	mov	r2, r3
 800f286:	4b40      	ldr	r3, [pc, #256]	; (800f388 <tcp_process+0x5b0>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f28c:	4b3f      	ldr	r3, [pc, #252]	; (800f38c <tcp_process+0x5b4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f290:	885b      	ldrh	r3, [r3, #2]
 800f292:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f294:	4a3d      	ldr	r2, [pc, #244]	; (800f38c <tcp_process+0x5b4>)
 800f296:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f298:	8812      	ldrh	r2, [r2, #0]
 800f29a:	b292      	uxth	r2, r2
 800f29c:	9202      	str	r2, [sp, #8]
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	4b3b      	ldr	r3, [pc, #236]	; (800f390 <tcp_process+0x5b8>)
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4b3b      	ldr	r3, [pc, #236]	; (800f394 <tcp_process+0x5bc>)
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f003 f827 	bl	80122fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f2ae:	e167      	b.n	800f580 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f2b0:	4b32      	ldr	r3, [pc, #200]	; (800f37c <tcp_process+0x5a4>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	f003 0302 	and.w	r3, r3, #2
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f000 8161 	beq.w	800f580 <tcp_process+0x7a8>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	1e5a      	subs	r2, r3, #1
 800f2c4:	4b30      	ldr	r3, [pc, #192]	; (800f388 <tcp_process+0x5b0>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	f040 8159 	bne.w	800f580 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f002 fe0c 	bl	8011eec <tcp_rexmit>
      break;
 800f2d4:	e154      	b.n	800f580 <tcp_process+0x7a8>
 800f2d6:	e153      	b.n	800f580 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fa71 	bl	800f7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f2de:	4b32      	ldr	r3, [pc, #200]	; (800f3a8 <tcp_process+0x5d0>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	f003 0320 	and.w	r3, r3, #32
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 814c 	beq.w	800f584 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	8b5b      	ldrh	r3, [r3, #26]
 800f2f0:	f043 0302 	orr.w	r3, r3, #2
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2207      	movs	r2, #7
 800f2fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f300:	e140      	b.n	800f584 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fa5c 	bl	800f7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f308:	4b27      	ldr	r3, [pc, #156]	; (800f3a8 <tcp_process+0x5d0>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	f003 0320 	and.w	r3, r3, #32
 800f310:	2b00      	cmp	r3, #0
 800f312:	d071      	beq.n	800f3f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f314:	4b19      	ldr	r3, [pc, #100]	; (800f37c <tcp_process+0x5a4>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 0310 	and.w	r3, r3, #16
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d060      	beq.n	800f3e2 <tcp_process+0x60a>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f324:	4b16      	ldr	r3, [pc, #88]	; (800f380 <tcp_process+0x5a8>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d15a      	bne.n	800f3e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f330:	2b00      	cmp	r3, #0
 800f332:	d156      	bne.n	800f3e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	8b5b      	ldrh	r3, [r3, #26]
 800f338:	f043 0302 	orr.w	r3, r3, #2
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7fe fdbe 	bl	800dec4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f348:	4b18      	ldr	r3, [pc, #96]	; (800f3ac <tcp_process+0x5d4>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d105      	bne.n	800f35e <tcp_process+0x586>
 800f352:	4b16      	ldr	r3, [pc, #88]	; (800f3ac <tcp_process+0x5d4>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	4a14      	ldr	r2, [pc, #80]	; (800f3ac <tcp_process+0x5d4>)
 800f35a:	6013      	str	r3, [r2, #0]
 800f35c:	e02e      	b.n	800f3bc <tcp_process+0x5e4>
 800f35e:	4b13      	ldr	r3, [pc, #76]	; (800f3ac <tcp_process+0x5d4>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	617b      	str	r3, [r7, #20]
 800f364:	e027      	b.n	800f3b6 <tcp_process+0x5de>
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d11f      	bne.n	800f3b0 <tcp_process+0x5d8>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	60da      	str	r2, [r3, #12]
 800f378:	e020      	b.n	800f3bc <tcp_process+0x5e4>
 800f37a:	bf00      	nop
 800f37c:	20004b04 	.word	0x20004b04
 800f380:	20004afc 	.word	0x20004afc
 800f384:	20004b02 	.word	0x20004b02
 800f388:	20004af8 	.word	0x20004af8
 800f38c:	20004ae8 	.word	0x20004ae8
 800f390:	20007ee0 	.word	0x20007ee0
 800f394:	20007ee4 	.word	0x20007ee4
 800f398:	08018ee4 	.word	0x08018ee4
 800f39c:	08019184 	.word	0x08019184
 800f3a0:	08018f30 	.word	0x08018f30
 800f3a4:	20004b00 	.word	0x20004b00
 800f3a8:	20004b05 	.word	0x20004b05
 800f3ac:	2000b5e4 	.word	0x2000b5e4
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1d4      	bne.n	800f366 <tcp_process+0x58e>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	60da      	str	r2, [r3, #12]
 800f3c2:	4b77      	ldr	r3, [pc, #476]	; (800f5a0 <tcp_process+0x7c8>)
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	220a      	movs	r2, #10
 800f3cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f3ce:	4b75      	ldr	r3, [pc, #468]	; (800f5a4 <tcp_process+0x7cc>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	60da      	str	r2, [r3, #12]
 800f3d6:	4a73      	ldr	r2, [pc, #460]	; (800f5a4 <tcp_process+0x7cc>)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6013      	str	r3, [r2, #0]
 800f3dc:	f003 f950 	bl	8012680 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f3e0:	e0d2      	b.n	800f588 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8b5b      	ldrh	r3, [r3, #26]
 800f3e6:	f043 0302 	orr.w	r3, r3, #2
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2208      	movs	r2, #8
 800f3f4:	751a      	strb	r2, [r3, #20]
      break;
 800f3f6:	e0c7      	b.n	800f588 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f3f8:	4b6b      	ldr	r3, [pc, #428]	; (800f5a8 <tcp_process+0x7d0>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	f003 0310 	and.w	r3, r3, #16
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 80c1 	beq.w	800f588 <tcp_process+0x7b0>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f40a:	4b68      	ldr	r3, [pc, #416]	; (800f5ac <tcp_process+0x7d4>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	429a      	cmp	r2, r3
 800f410:	f040 80ba 	bne.w	800f588 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f040 80b5 	bne.w	800f588 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2206      	movs	r2, #6
 800f422:	751a      	strb	r2, [r3, #20]
      break;
 800f424:	e0b0      	b.n	800f588 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f9ca 	bl	800f7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f42c:	4b60      	ldr	r3, [pc, #384]	; (800f5b0 <tcp_process+0x7d8>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 0320 	and.w	r3, r3, #32
 800f434:	2b00      	cmp	r3, #0
 800f436:	f000 80a9 	beq.w	800f58c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	8b5b      	ldrh	r3, [r3, #26]
 800f43e:	f043 0302 	orr.w	r3, r3, #2
 800f442:	b29a      	uxth	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7fe fd3b 	bl	800dec4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f44e:	4b59      	ldr	r3, [pc, #356]	; (800f5b4 <tcp_process+0x7dc>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	429a      	cmp	r2, r3
 800f456:	d105      	bne.n	800f464 <tcp_process+0x68c>
 800f458:	4b56      	ldr	r3, [pc, #344]	; (800f5b4 <tcp_process+0x7dc>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	4a55      	ldr	r2, [pc, #340]	; (800f5b4 <tcp_process+0x7dc>)
 800f460:	6013      	str	r3, [r2, #0]
 800f462:	e013      	b.n	800f48c <tcp_process+0x6b4>
 800f464:	4b53      	ldr	r3, [pc, #332]	; (800f5b4 <tcp_process+0x7dc>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	613b      	str	r3, [r7, #16]
 800f46a:	e00c      	b.n	800f486 <tcp_process+0x6ae>
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	429a      	cmp	r2, r3
 800f474:	d104      	bne.n	800f480 <tcp_process+0x6a8>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	68da      	ldr	r2, [r3, #12]
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	60da      	str	r2, [r3, #12]
 800f47e:	e005      	b.n	800f48c <tcp_process+0x6b4>
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	613b      	str	r3, [r7, #16]
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d1ef      	bne.n	800f46c <tcp_process+0x694>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	60da      	str	r2, [r3, #12]
 800f492:	4b43      	ldr	r3, [pc, #268]	; (800f5a0 <tcp_process+0x7c8>)
 800f494:	2201      	movs	r2, #1
 800f496:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	220a      	movs	r2, #10
 800f49c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f49e:	4b41      	ldr	r3, [pc, #260]	; (800f5a4 <tcp_process+0x7cc>)
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	60da      	str	r2, [r3, #12]
 800f4a6:	4a3f      	ldr	r2, [pc, #252]	; (800f5a4 <tcp_process+0x7cc>)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6013      	str	r3, [r2, #0]
 800f4ac:	f003 f8e8 	bl	8012680 <tcp_timer_needed>
      }
      break;
 800f4b0:	e06c      	b.n	800f58c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f984 	bl	800f7c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f4b8:	4b3b      	ldr	r3, [pc, #236]	; (800f5a8 <tcp_process+0x7d0>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 0310 	and.w	r3, r3, #16
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d065      	beq.n	800f590 <tcp_process+0x7b8>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4c8:	4b38      	ldr	r3, [pc, #224]	; (800f5ac <tcp_process+0x7d4>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d15f      	bne.n	800f590 <tcp_process+0x7b8>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d15b      	bne.n	800f590 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7fe fcf3 	bl	800dec4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f4de:	4b35      	ldr	r3, [pc, #212]	; (800f5b4 <tcp_process+0x7dc>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d105      	bne.n	800f4f4 <tcp_process+0x71c>
 800f4e8:	4b32      	ldr	r3, [pc, #200]	; (800f5b4 <tcp_process+0x7dc>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	4a31      	ldr	r2, [pc, #196]	; (800f5b4 <tcp_process+0x7dc>)
 800f4f0:	6013      	str	r3, [r2, #0]
 800f4f2:	e013      	b.n	800f51c <tcp_process+0x744>
 800f4f4:	4b2f      	ldr	r3, [pc, #188]	; (800f5b4 <tcp_process+0x7dc>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	60fb      	str	r3, [r7, #12]
 800f4fa:	e00c      	b.n	800f516 <tcp_process+0x73e>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	429a      	cmp	r2, r3
 800f504:	d104      	bne.n	800f510 <tcp_process+0x738>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68da      	ldr	r2, [r3, #12]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	60da      	str	r2, [r3, #12]
 800f50e:	e005      	b.n	800f51c <tcp_process+0x744>
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	60fb      	str	r3, [r7, #12]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d1ef      	bne.n	800f4fc <tcp_process+0x724>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	60da      	str	r2, [r3, #12]
 800f522:	4b1f      	ldr	r3, [pc, #124]	; (800f5a0 <tcp_process+0x7c8>)
 800f524:	2201      	movs	r2, #1
 800f526:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	220a      	movs	r2, #10
 800f52c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f52e:	4b1d      	ldr	r3, [pc, #116]	; (800f5a4 <tcp_process+0x7cc>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	60da      	str	r2, [r3, #12]
 800f536:	4a1b      	ldr	r2, [pc, #108]	; (800f5a4 <tcp_process+0x7cc>)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6013      	str	r3, [r2, #0]
 800f53c:	f003 f8a0 	bl	8012680 <tcp_timer_needed>
      }
      break;
 800f540:	e026      	b.n	800f590 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f93c 	bl	800f7c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f548:	4b17      	ldr	r3, [pc, #92]	; (800f5a8 <tcp_process+0x7d0>)
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	f003 0310 	and.w	r3, r3, #16
 800f550:	2b00      	cmp	r3, #0
 800f552:	d01f      	beq.n	800f594 <tcp_process+0x7bc>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f558:	4b14      	ldr	r3, [pc, #80]	; (800f5ac <tcp_process+0x7d4>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d119      	bne.n	800f594 <tcp_process+0x7bc>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f564:	2b00      	cmp	r3, #0
 800f566:	d115      	bne.n	800f594 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f568:	4b11      	ldr	r3, [pc, #68]	; (800f5b0 <tcp_process+0x7d8>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	f043 0310 	orr.w	r3, r3, #16
 800f570:	b2da      	uxtb	r2, r3
 800f572:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <tcp_process+0x7d8>)
 800f574:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f576:	e00d      	b.n	800f594 <tcp_process+0x7bc>
    default:
      break;
 800f578:	bf00      	nop
 800f57a:	e00c      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f57c:	bf00      	nop
 800f57e:	e00a      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f580:	bf00      	nop
 800f582:	e008      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f584:	bf00      	nop
 800f586:	e006      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f588:	bf00      	nop
 800f58a:	e004      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f58c:	bf00      	nop
 800f58e:	e002      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f590:	bf00      	nop
 800f592:	e000      	b.n	800f596 <tcp_process+0x7be>
      break;
 800f594:	bf00      	nop
  }
  return ERR_OK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3724      	adds	r7, #36	; 0x24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd90      	pop	{r4, r7, pc}
 800f5a0:	2000b5e0 	.word	0x2000b5e0
 800f5a4:	2000b5f4 	.word	0x2000b5f4
 800f5a8:	20004b04 	.word	0x20004b04
 800f5ac:	20004afc 	.word	0x20004afc
 800f5b0:	20004b05 	.word	0x20004b05
 800f5b4:	2000b5e4 	.word	0x2000b5e4

0800f5b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f5b8:	b590      	push	{r4, r7, lr}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d106      	bne.n	800f5d6 <tcp_oos_insert_segment+0x1e>
 800f5c8:	4b3b      	ldr	r3, [pc, #236]	; (800f6b8 <tcp_oos_insert_segment+0x100>)
 800f5ca:	f240 421f 	movw	r2, #1055	; 0x41f
 800f5ce:	493b      	ldr	r1, [pc, #236]	; (800f6bc <tcp_oos_insert_segment+0x104>)
 800f5d0:	483b      	ldr	r0, [pc, #236]	; (800f6c0 <tcp_oos_insert_segment+0x108>)
 800f5d2:	f006 fceb 	bl	8015fac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	899b      	ldrh	r3, [r3, #12]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fb f938 	bl	800a854 <lwip_htons>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	f003 0301 	and.w	r3, r3, #1
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d028      	beq.n	800f642 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f5f0:	6838      	ldr	r0, [r7, #0]
 800f5f2:	f7fe f997 	bl	800d924 <tcp_segs_free>
    next = NULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	603b      	str	r3, [r7, #0]
 800f5fa:	e056      	b.n	800f6aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	899b      	ldrh	r3, [r3, #12]
 800f602:	b29b      	uxth	r3, r3
 800f604:	4618      	mov	r0, r3
 800f606:	f7fb f925 	bl	800a854 <lwip_htons>
 800f60a:	4603      	mov	r3, r0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00d      	beq.n	800f632 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	899b      	ldrh	r3, [r3, #12]
 800f61c:	b29c      	uxth	r4, r3
 800f61e:	2001      	movs	r0, #1
 800f620:	f7fb f918 	bl	800a854 <lwip_htons>
 800f624:	4603      	mov	r3, r0
 800f626:	461a      	mov	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	4322      	orrs	r2, r4
 800f62e:	b292      	uxth	r2, r2
 800f630:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7fe f986 	bl	800d94e <tcp_seg_free>
    while (next &&
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00e      	beq.n	800f666 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	891b      	ldrh	r3, [r3, #8]
 800f64c:	461a      	mov	r2, r3
 800f64e:	4b1d      	ldr	r3, [pc, #116]	; (800f6c4 <tcp_oos_insert_segment+0x10c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	441a      	add	r2, r3
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	8909      	ldrh	r1, [r1, #8]
 800f65e:	440b      	add	r3, r1
 800f660:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f662:	2b00      	cmp	r3, #0
 800f664:	daca      	bge.n	800f5fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d01e      	beq.n	800f6aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	891b      	ldrh	r3, [r3, #8]
 800f670:	461a      	mov	r2, r3
 800f672:	4b14      	ldr	r3, [pc, #80]	; (800f6c4 <tcp_oos_insert_segment+0x10c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	441a      	add	r2, r3
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f680:	2b00      	cmp	r3, #0
 800f682:	dd12      	ble.n	800f6aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	4b0d      	ldr	r3, [pc, #52]	; (800f6c4 <tcp_oos_insert_segment+0x10c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	b29b      	uxth	r3, r3
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	b29a      	uxth	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	891b      	ldrh	r3, [r3, #8]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	f7fc fafb 	bl	800bca0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	601a      	str	r2, [r3, #0]
}
 800f6b0:	bf00      	nop
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd90      	pop	{r4, r7, pc}
 800f6b8:	08018ee4 	.word	0x08018ee4
 800f6bc:	080191a4 	.word	0x080191a4
 800f6c0:	08018f30 	.word	0x08018f30
 800f6c4:	20004af8 	.word	0x20004af8

0800f6c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f6c8:	b5b0      	push	{r4, r5, r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f6d6:	e03e      	b.n	800f756 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fc fcee 	bl	800c0c8 <pbuf_clen>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6f6:	8a7a      	ldrh	r2, [r7, #18]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d906      	bls.n	800f70a <tcp_free_acked_segments+0x42>
 800f6fc:	4b2a      	ldr	r3, [pc, #168]	; (800f7a8 <tcp_free_acked_segments+0xe0>)
 800f6fe:	f240 4257 	movw	r2, #1111	; 0x457
 800f702:	492a      	ldr	r1, [pc, #168]	; (800f7ac <tcp_free_acked_segments+0xe4>)
 800f704:	482a      	ldr	r0, [pc, #168]	; (800f7b0 <tcp_free_acked_segments+0xe8>)
 800f706:	f006 fc51 	bl	8015fac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f710:	8a7b      	ldrh	r3, [r7, #18]
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	b29a      	uxth	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	891a      	ldrh	r2, [r3, #8]
 800f720:	4b24      	ldr	r3, [pc, #144]	; (800f7b4 <tcp_free_acked_segments+0xec>)
 800f722:	881b      	ldrh	r3, [r3, #0]
 800f724:	4413      	add	r3, r2
 800f726:	b29a      	uxth	r2, r3
 800f728:	4b22      	ldr	r3, [pc, #136]	; (800f7b4 <tcp_free_acked_segments+0xec>)
 800f72a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f72c:	6978      	ldr	r0, [r7, #20]
 800f72e:	f7fe f90e 	bl	800d94e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00c      	beq.n	800f756 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d109      	bne.n	800f756 <tcp_free_acked_segments+0x8e>
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d106      	bne.n	800f756 <tcp_free_acked_segments+0x8e>
 800f748:	4b17      	ldr	r3, [pc, #92]	; (800f7a8 <tcp_free_acked_segments+0xe0>)
 800f74a:	f240 4261 	movw	r2, #1121	; 0x461
 800f74e:	491a      	ldr	r1, [pc, #104]	; (800f7b8 <tcp_free_acked_segments+0xf0>)
 800f750:	4817      	ldr	r0, [pc, #92]	; (800f7b0 <tcp_free_acked_segments+0xe8>)
 800f752:	f006 fc2b 	bl	8015fac <iprintf>
  while (seg_list != NULL &&
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d020      	beq.n	800f79e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	f7fb f88b 	bl	800a87e <lwip_htonl>
 800f768:	4604      	mov	r4, r0
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	891b      	ldrh	r3, [r3, #8]
 800f76e:	461d      	mov	r5, r3
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	899b      	ldrh	r3, [r3, #12]
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fb f86b 	bl	800a854 <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	f003 0303 	and.w	r3, r3, #3
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <tcp_free_acked_segments+0xc6>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e000      	b.n	800f790 <tcp_free_acked_segments+0xc8>
 800f78e:	2300      	movs	r3, #0
 800f790:	442b      	add	r3, r5
 800f792:	18e2      	adds	r2, r4, r3
 800f794:	4b09      	ldr	r3, [pc, #36]	; (800f7bc <tcp_free_acked_segments+0xf4>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	dd9c      	ble.n	800f6d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f79e:	68bb      	ldr	r3, [r7, #8]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3718      	adds	r7, #24
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7a8:	08018ee4 	.word	0x08018ee4
 800f7ac:	080191cc 	.word	0x080191cc
 800f7b0:	08018f30 	.word	0x08018f30
 800f7b4:	20004b00 	.word	0x20004b00
 800f7b8:	080191f4 	.word	0x080191f4
 800f7bc:	20004afc 	.word	0x20004afc

0800f7c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f7c0:	b5b0      	push	{r4, r5, r7, lr}
 800f7c2:	b094      	sub	sp, #80	; 0x50
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d106      	bne.n	800f7e0 <tcp_receive+0x20>
 800f7d2:	4ba6      	ldr	r3, [pc, #664]	; (800fa6c <tcp_receive+0x2ac>)
 800f7d4:	f240 427b 	movw	r2, #1147	; 0x47b
 800f7d8:	49a5      	ldr	r1, [pc, #660]	; (800fa70 <tcp_receive+0x2b0>)
 800f7da:	48a6      	ldr	r0, [pc, #664]	; (800fa74 <tcp_receive+0x2b4>)
 800f7dc:	f006 fbe6 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	7d1b      	ldrb	r3, [r3, #20]
 800f7e4:	2b03      	cmp	r3, #3
 800f7e6:	d806      	bhi.n	800f7f6 <tcp_receive+0x36>
 800f7e8:	4ba0      	ldr	r3, [pc, #640]	; (800fa6c <tcp_receive+0x2ac>)
 800f7ea:	f240 427c 	movw	r2, #1148	; 0x47c
 800f7ee:	49a2      	ldr	r1, [pc, #648]	; (800fa78 <tcp_receive+0x2b8>)
 800f7f0:	48a0      	ldr	r0, [pc, #640]	; (800fa74 <tcp_receive+0x2b4>)
 800f7f2:	f006 fbdb 	bl	8015fac <iprintf>

  if (flags & TCP_ACK) {
 800f7f6:	4ba1      	ldr	r3, [pc, #644]	; (800fa7c <tcp_receive+0x2bc>)
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	f003 0310 	and.w	r3, r3, #16
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 8263 	beq.w	800fcca <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f810:	4413      	add	r3, r2
 800f812:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f818:	4b99      	ldr	r3, [pc, #612]	; (800fa80 <tcp_receive+0x2c0>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	db1b      	blt.n	800f85a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f826:	4b96      	ldr	r3, [pc, #600]	; (800fa80 <tcp_receive+0x2c0>)
 800f828:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d106      	bne.n	800f83c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f832:	4b94      	ldr	r3, [pc, #592]	; (800fa84 <tcp_receive+0x2c4>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	db0e      	blt.n	800f85a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f840:	4b90      	ldr	r3, [pc, #576]	; (800fa84 <tcp_receive+0x2c4>)
 800f842:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f844:	429a      	cmp	r2, r3
 800f846:	d125      	bne.n	800f894 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f848:	4b8f      	ldr	r3, [pc, #572]	; (800fa88 <tcp_receive+0x2c8>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	89db      	ldrh	r3, [r3, #14]
 800f84e:	b29a      	uxth	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f856:	429a      	cmp	r2, r3
 800f858:	d91c      	bls.n	800f894 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f85a:	4b8b      	ldr	r3, [pc, #556]	; (800fa88 <tcp_receive+0x2c8>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	89db      	ldrh	r3, [r3, #14]
 800f860:	b29a      	uxth	r2, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f874:	429a      	cmp	r2, r3
 800f876:	d205      	bcs.n	800f884 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f884:	4b7e      	ldr	r3, [pc, #504]	; (800fa80 <tcp_receive+0x2c0>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f88c:	4b7d      	ldr	r3, [pc, #500]	; (800fa84 <tcp_receive+0x2c4>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f894:	4b7b      	ldr	r3, [pc, #492]	; (800fa84 <tcp_receive+0x2c4>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	dc58      	bgt.n	800f954 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f8a2:	4b7a      	ldr	r3, [pc, #488]	; (800fa8c <tcp_receive+0x2cc>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d14b      	bne.n	800f942 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f8b4:	4413      	add	r3, r2
 800f8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d142      	bne.n	800f942 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	db3d      	blt.n	800f942 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8ca:	4b6e      	ldr	r3, [pc, #440]	; (800fa84 <tcp_receive+0x2c4>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d137      	bne.n	800f942 <tcp_receive+0x182>
              found_dupack = 1;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8dc:	2bff      	cmp	r3, #255	; 0xff
 800f8de:	d007      	beq.n	800f8f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8f6:	2b03      	cmp	r3, #3
 800f8f8:	d91b      	bls.n	800f932 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f904:	4413      	add	r3, r2
 800f906:	b29a      	uxth	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f90e:	429a      	cmp	r2, r3
 800f910:	d30a      	bcc.n	800f928 <tcp_receive+0x168>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f91c:	4413      	add	r3, r2
 800f91e:	b29a      	uxth	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f926:	e004      	b.n	800f932 <tcp_receive+0x172>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f92e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d902      	bls.n	800f942 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f002 fb41 	bl	8011fc4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f944:	2b00      	cmp	r3, #0
 800f946:	f040 8160 	bne.w	800fc0a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f952:	e15a      	b.n	800fc0a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f954:	4b4b      	ldr	r3, [pc, #300]	; (800fa84 <tcp_receive+0x2c4>)
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	2b00      	cmp	r3, #0
 800f962:	f2c0 814d 	blt.w	800fc00 <tcp_receive+0x440>
 800f966:	4b47      	ldr	r3, [pc, #284]	; (800fa84 <tcp_receive+0x2c4>)
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	f300 8145 	bgt.w	800fc00 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8b5b      	ldrh	r3, [r3, #26]
 800f97a:	f003 0304 	and.w	r3, r3, #4
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d010      	beq.n	800f9a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	8b5b      	ldrh	r3, [r3, #26]
 800f986:	f023 0304 	bic.w	r3, r3, #4
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9b2:	10db      	asrs	r3, r3, #3
 800f9b4:	b21b      	sxth	r3, r3
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	4413      	add	r3, r2
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	b21a      	sxth	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f9cc:	4b2d      	ldr	r3, [pc, #180]	; (800fa84 <tcp_receive+0x2c4>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f9e4:	4b27      	ldr	r3, [pc, #156]	; (800fa84 <tcp_receive+0x2c4>)
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7d1b      	ldrb	r3, [r3, #20]
 800f9f0:	2b03      	cmp	r3, #3
 800f9f2:	f240 8096 	bls.w	800fb22 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d244      	bcs.n	800fa90 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	8b5b      	ldrh	r3, [r3, #26]
 800fa0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <tcp_receive+0x256>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <tcp_receive+0x258>
 800fa16:	2302      	movs	r3, #2
 800fa18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fa1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa26:	fb12 f303 	smulbb	r3, r2, r3
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	bf28      	it	cs
 800fa32:	4613      	movcs	r3, r2
 800fa34:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa3e:	4413      	add	r3, r2
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d309      	bcc.n	800fa60 <tcp_receive+0x2a0>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa54:	4413      	add	r3, r2
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa5e:	e060      	b.n	800fb22 <tcp_receive+0x362>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa6a:	e05a      	b.n	800fb22 <tcp_receive+0x362>
 800fa6c:	08018ee4 	.word	0x08018ee4
 800fa70:	08019214 	.word	0x08019214
 800fa74:	08018f30 	.word	0x08018f30
 800fa78:	08019230 	.word	0x08019230
 800fa7c:	20004b04 	.word	0x20004b04
 800fa80:	20004af8 	.word	0x20004af8
 800fa84:	20004afc 	.word	0x20004afc
 800fa88:	20004ae8 	.word	0x20004ae8
 800fa8c:	20004b02 	.word	0x20004b02
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fa96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa98:	4413      	add	r3, r2
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d309      	bcc.n	800faba <tcp_receive+0x2fa>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800faac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800faae:	4413      	add	r3, r2
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fab8:	e004      	b.n	800fac4 <tcp_receive+0x304>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d326      	bcc.n	800fb22 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faf4:	4413      	add	r3, r2
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d30a      	bcc.n	800fb18 <tcp_receive+0x358>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb0c:	4413      	add	r3, r2
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb16:	e004      	b.n	800fb22 <tcp_receive+0x362>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb2a:	4a98      	ldr	r2, [pc, #608]	; (800fd8c <tcp_receive+0x5cc>)
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fdcb 	bl	800f6c8 <tcp_free_acked_segments>
 800fb32:	4602      	mov	r2, r0
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb40:	4a93      	ldr	r2, [pc, #588]	; (800fd90 <tcp_receive+0x5d0>)
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff fdc0 	bl	800f6c8 <tcp_free_acked_segments>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d104      	bne.n	800fb60 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb5c:	861a      	strh	r2, [r3, #48]	; 0x30
 800fb5e:	e002      	b.n	800fb66 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fb82:	4b84      	ldr	r3, [pc, #528]	; (800fd94 <tcp_receive+0x5d4>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	4413      	add	r3, r2
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	8b5b      	ldrh	r3, [r3, #26]
 800fb94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d035      	beq.n	800fc08 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d118      	bne.n	800fbd6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00c      	beq.n	800fbc6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fa fe60 	bl	800a87e <lwip_htonl>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dc20      	bgt.n	800fc08 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8b5b      	ldrh	r3, [r3, #26]
 800fbca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbd4:	e018      	b.n	800fc08 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fa fe4b 	bl	800a87e <lwip_htonl>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	1ae3      	subs	r3, r4, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	dc0b      	bgt.n	800fc08 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	8b5b      	ldrh	r3, [r3, #26]
 800fbf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbfe:	e003      	b.n	800fc08 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f002 fbcd 	bl	80123a0 <tcp_send_empty_ack>
 800fc06:	e000      	b.n	800fc0a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc08:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d05b      	beq.n	800fcca <tcp_receive+0x50a>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc16:	4b60      	ldr	r3, [pc, #384]	; (800fd98 <tcp_receive+0x5d8>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	da54      	bge.n	800fcca <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fc20:	4b5e      	ldr	r3, [pc, #376]	; (800fd9c <tcp_receive+0x5dc>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fc34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc3e:	10db      	asrs	r3, r3, #3
 800fc40:	b21b      	sxth	r3, r3
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc58:	4413      	add	r3, r2
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	b21a      	sxth	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fc62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	da05      	bge.n	800fc76 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fc6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc6e:	425b      	negs	r3, r3
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fc76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc80:	109b      	asrs	r3, r3, #2
 800fc82:	b21b      	sxth	r3, r3
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc9a:	4413      	add	r3, r2
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	b21a      	sxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fcaa:	10db      	asrs	r3, r3, #3
 800fcac:	b21b      	sxth	r3, r3
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	4413      	add	r3, r2
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	b21a      	sxth	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fcca:	4b35      	ldr	r3, [pc, #212]	; (800fda0 <tcp_receive+0x5e0>)
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 84e1 	beq.w	8010696 <tcp_receive+0xed6>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	7d1b      	ldrb	r3, [r3, #20]
 800fcd8:	2b06      	cmp	r3, #6
 800fcda:	f200 84dc 	bhi.w	8010696 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fce2:	4b30      	ldr	r3, [pc, #192]	; (800fda4 <tcp_receive+0x5e4>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	3b01      	subs	r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f2c0 808e 	blt.w	800fe0c <tcp_receive+0x64c>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcf4:	4b2a      	ldr	r3, [pc, #168]	; (800fda0 <tcp_receive+0x5e0>)
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	4b2a      	ldr	r3, [pc, #168]	; (800fda4 <tcp_receive+0x5e4>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	440b      	add	r3, r1
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	3301      	adds	r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f300 8081 	bgt.w	800fe0c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fd0a:	4b27      	ldr	r3, [pc, #156]	; (800fda8 <tcp_receive+0x5e8>)
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd14:	4b23      	ldr	r3, [pc, #140]	; (800fda4 <tcp_receive+0x5e4>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fd1c:	4b22      	ldr	r3, [pc, #136]	; (800fda8 <tcp_receive+0x5e8>)
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d106      	bne.n	800fd32 <tcp_receive+0x572>
 800fd24:	4b21      	ldr	r3, [pc, #132]	; (800fdac <tcp_receive+0x5ec>)
 800fd26:	f240 5294 	movw	r2, #1428	; 0x594
 800fd2a:	4921      	ldr	r1, [pc, #132]	; (800fdb0 <tcp_receive+0x5f0>)
 800fd2c:	4821      	ldr	r0, [pc, #132]	; (800fdb4 <tcp_receive+0x5f4>)
 800fd2e:	f006 f93d 	bl	8015fac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d906      	bls.n	800fd4a <tcp_receive+0x58a>
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	; (800fdac <tcp_receive+0x5ec>)
 800fd3e:	f240 5295 	movw	r2, #1429	; 0x595
 800fd42:	491d      	ldr	r1, [pc, #116]	; (800fdb8 <tcp_receive+0x5f8>)
 800fd44:	481b      	ldr	r0, [pc, #108]	; (800fdb4 <tcp_receive+0x5f4>)
 800fd46:	f006 f931 	bl	8015fac <iprintf>
      off = (u16_t)off32;
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fd50:	4b15      	ldr	r3, [pc, #84]	; (800fda8 <tcp_receive+0x5e8>)
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	891b      	ldrh	r3, [r3, #8]
 800fd56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d906      	bls.n	800fd6c <tcp_receive+0x5ac>
 800fd5e:	4b13      	ldr	r3, [pc, #76]	; (800fdac <tcp_receive+0x5ec>)
 800fd60:	f240 5297 	movw	r2, #1431	; 0x597
 800fd64:	4915      	ldr	r1, [pc, #84]	; (800fdbc <tcp_receive+0x5fc>)
 800fd66:	4813      	ldr	r0, [pc, #76]	; (800fdb4 <tcp_receive+0x5f4>)
 800fd68:	f006 f920 	bl	8015fac <iprintf>
      inseg.len -= off;
 800fd6c:	4b0e      	ldr	r3, [pc, #56]	; (800fda8 <tcp_receive+0x5e8>)
 800fd6e:	891a      	ldrh	r2, [r3, #8]
 800fd70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	4b0b      	ldr	r3, [pc, #44]	; (800fda8 <tcp_receive+0x5e8>)
 800fd7a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <tcp_receive+0x5e8>)
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	891a      	ldrh	r2, [r3, #8]
 800fd82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd86:	1ad3      	subs	r3, r2, r3
 800fd88:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fd8a:	e029      	b.n	800fde0 <tcp_receive+0x620>
 800fd8c:	0801924c 	.word	0x0801924c
 800fd90:	08019254 	.word	0x08019254
 800fd94:	20004b00 	.word	0x20004b00
 800fd98:	20004afc 	.word	0x20004afc
 800fd9c:	2000b5e8 	.word	0x2000b5e8
 800fda0:	20004b02 	.word	0x20004b02
 800fda4:	20004af8 	.word	0x20004af8
 800fda8:	20004ad8 	.word	0x20004ad8
 800fdac:	08018ee4 	.word	0x08018ee4
 800fdb0:	0801925c 	.word	0x0801925c
 800fdb4:	08018f30 	.word	0x08018f30
 800fdb8:	0801926c 	.word	0x0801926c
 800fdbc:	0801927c 	.word	0x0801927c
        off -= p->len;
 800fdc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdc2:	895b      	ldrh	r3, [r3, #10]
 800fdc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fdc8:	1ad3      	subs	r3, r2, r3
 800fdca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fdce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fdd2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fdd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fdda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fde2:	895b      	ldrh	r3, [r3, #10]
 800fde4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d8e9      	bhi.n	800fdc0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fdec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fdf4:	f7fc f854 	bl	800bea0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	4a91      	ldr	r2, [pc, #580]	; (8010044 <tcp_receive+0x884>)
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	4b91      	ldr	r3, [pc, #580]	; (8010048 <tcp_receive+0x888>)
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	4a8f      	ldr	r2, [pc, #572]	; (8010044 <tcp_receive+0x884>)
 800fe06:	6812      	ldr	r2, [r2, #0]
 800fe08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe0a:	e00d      	b.n	800fe28 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fe0c:	4b8d      	ldr	r3, [pc, #564]	; (8010044 <tcp_receive+0x884>)
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	da06      	bge.n	800fe28 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	8b5b      	ldrh	r3, [r3, #26]
 800fe1e:	f043 0302 	orr.w	r3, r3, #2
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe28:	4b86      	ldr	r3, [pc, #536]	; (8010044 <tcp_receive+0x884>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f2c0 842a 	blt.w	801068c <tcp_receive+0xecc>
 800fe38:	4b82      	ldr	r3, [pc, #520]	; (8010044 <tcp_receive+0x884>)
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe40:	6879      	ldr	r1, [r7, #4]
 800fe42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe44:	440b      	add	r3, r1
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	3301      	adds	r3, #1
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f300 841e 	bgt.w	801068c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe54:	4b7b      	ldr	r3, [pc, #492]	; (8010044 <tcp_receive+0x884>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	f040 829a 	bne.w	8010392 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fe5e:	4b7a      	ldr	r3, [pc, #488]	; (8010048 <tcp_receive+0x888>)
 800fe60:	891c      	ldrh	r4, [r3, #8]
 800fe62:	4b79      	ldr	r3, [pc, #484]	; (8010048 <tcp_receive+0x888>)
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	899b      	ldrh	r3, [r3, #12]
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fa fcf2 	bl	800a854 <lwip_htons>
 800fe70:	4603      	mov	r3, r0
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	f003 0303 	and.w	r3, r3, #3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <tcp_receive+0x6c0>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e000      	b.n	800fe82 <tcp_receive+0x6c2>
 800fe80:	2300      	movs	r3, #0
 800fe82:	4423      	add	r3, r4
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	4b71      	ldr	r3, [pc, #452]	; (801004c <tcp_receive+0x88c>)
 800fe88:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe8e:	4b6f      	ldr	r3, [pc, #444]	; (801004c <tcp_receive+0x88c>)
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d275      	bcs.n	800ff82 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe96:	4b6c      	ldr	r3, [pc, #432]	; (8010048 <tcp_receive+0x888>)
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	899b      	ldrh	r3, [r3, #12]
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fa fcd8 	bl	800a854 <lwip_htons>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	2b00      	cmp	r3, #0
 800feae:	d01f      	beq.n	800fef0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800feb0:	4b65      	ldr	r3, [pc, #404]	; (8010048 <tcp_receive+0x888>)
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	899b      	ldrh	r3, [r3, #12]
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	b21b      	sxth	r3, r3
 800feba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800febe:	b21c      	sxth	r4, r3
 800fec0:	4b61      	ldr	r3, [pc, #388]	; (8010048 <tcp_receive+0x888>)
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	899b      	ldrh	r3, [r3, #12]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fa fcc3 	bl	800a854 <lwip_htons>
 800fece:	4603      	mov	r3, r0
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fed8:	b29b      	uxth	r3, r3
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fa fcba 	bl	800a854 <lwip_htons>
 800fee0:	4603      	mov	r3, r0
 800fee2:	b21b      	sxth	r3, r3
 800fee4:	4323      	orrs	r3, r4
 800fee6:	b21a      	sxth	r2, r3
 800fee8:	4b57      	ldr	r3, [pc, #348]	; (8010048 <tcp_receive+0x888>)
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	b292      	uxth	r2, r2
 800feee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fef4:	4b54      	ldr	r3, [pc, #336]	; (8010048 <tcp_receive+0x888>)
 800fef6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fef8:	4b53      	ldr	r3, [pc, #332]	; (8010048 <tcp_receive+0x888>)
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	899b      	ldrh	r3, [r3, #12]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fa fca7 	bl	800a854 <lwip_htons>
 800ff06:	4603      	mov	r3, r0
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	f003 0302 	and.w	r3, r3, #2
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d005      	beq.n	800ff1e <tcp_receive+0x75e>
            inseg.len -= 1;
 800ff12:	4b4d      	ldr	r3, [pc, #308]	; (8010048 <tcp_receive+0x888>)
 800ff14:	891b      	ldrh	r3, [r3, #8]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	4b4b      	ldr	r3, [pc, #300]	; (8010048 <tcp_receive+0x888>)
 800ff1c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ff1e:	4b4a      	ldr	r3, [pc, #296]	; (8010048 <tcp_receive+0x888>)
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	4a49      	ldr	r2, [pc, #292]	; (8010048 <tcp_receive+0x888>)
 800ff24:	8912      	ldrh	r2, [r2, #8]
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fb feb9 	bl	800bca0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ff2e:	4b46      	ldr	r3, [pc, #280]	; (8010048 <tcp_receive+0x888>)
 800ff30:	891c      	ldrh	r4, [r3, #8]
 800ff32:	4b45      	ldr	r3, [pc, #276]	; (8010048 <tcp_receive+0x888>)
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	899b      	ldrh	r3, [r3, #12]
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fa fc8a 	bl	800a854 <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	f003 0303 	and.w	r3, r3, #3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <tcp_receive+0x790>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e000      	b.n	800ff52 <tcp_receive+0x792>
 800ff50:	2300      	movs	r3, #0
 800ff52:	4423      	add	r3, r4
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	4b3d      	ldr	r3, [pc, #244]	; (801004c <tcp_receive+0x88c>)
 800ff58:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff5a:	4b3c      	ldr	r3, [pc, #240]	; (801004c <tcp_receive+0x88c>)
 800ff5c:	881b      	ldrh	r3, [r3, #0]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4b38      	ldr	r3, [pc, #224]	; (8010044 <tcp_receive+0x884>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	441a      	add	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6a:	6879      	ldr	r1, [r7, #4]
 800ff6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff6e:	440b      	add	r3, r1
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d006      	beq.n	800ff82 <tcp_receive+0x7c2>
 800ff74:	4b36      	ldr	r3, [pc, #216]	; (8010050 <tcp_receive+0x890>)
 800ff76:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ff7a:	4936      	ldr	r1, [pc, #216]	; (8010054 <tcp_receive+0x894>)
 800ff7c:	4836      	ldr	r0, [pc, #216]	; (8010058 <tcp_receive+0x898>)
 800ff7e:	f006 f815 	bl	8015fac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 80e7 	beq.w	801015a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ff8c:	4b2e      	ldr	r3, [pc, #184]	; (8010048 <tcp_receive+0x888>)
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	899b      	ldrh	r3, [r3, #12]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fa fc5d 	bl	800a854 <lwip_htons>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d010      	beq.n	800ffc8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ffa6:	e00a      	b.n	800ffbe <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7fd fcc8 	bl	800d94e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1f0      	bne.n	800ffa8 <tcp_receive+0x7e8>
 800ffc6:	e0c8      	b.n	801015a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffcc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ffce:	e052      	b.n	8010076 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ffd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	899b      	ldrh	r3, [r3, #12]
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fa fc3b 	bl	800a854 <lwip_htons>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d03d      	beq.n	8010066 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ffea:	4b17      	ldr	r3, [pc, #92]	; (8010048 <tcp_receive+0x888>)
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	899b      	ldrh	r3, [r3, #12]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fa fc2e 	bl	800a854 <lwip_htons>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010000:	2b00      	cmp	r3, #0
 8010002:	d130      	bne.n	8010066 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010004:	4b10      	ldr	r3, [pc, #64]	; (8010048 <tcp_receive+0x888>)
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	899b      	ldrh	r3, [r3, #12]
 801000a:	b29c      	uxth	r4, r3
 801000c:	2001      	movs	r0, #1
 801000e:	f7fa fc21 	bl	800a854 <lwip_htons>
 8010012:	4603      	mov	r3, r0
 8010014:	461a      	mov	r2, r3
 8010016:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <tcp_receive+0x888>)
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	4322      	orrs	r2, r4
 801001c:	b292      	uxth	r2, r2
 801001e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010020:	4b09      	ldr	r3, [pc, #36]	; (8010048 <tcp_receive+0x888>)
 8010022:	891c      	ldrh	r4, [r3, #8]
 8010024:	4b08      	ldr	r3, [pc, #32]	; (8010048 <tcp_receive+0x888>)
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	899b      	ldrh	r3, [r3, #12]
 801002a:	b29b      	uxth	r3, r3
 801002c:	4618      	mov	r0, r3
 801002e:	f7fa fc11 	bl	800a854 <lwip_htons>
 8010032:	4603      	mov	r3, r0
 8010034:	b2db      	uxtb	r3, r3
 8010036:	f003 0303 	and.w	r3, r3, #3
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00e      	beq.n	801005c <tcp_receive+0x89c>
 801003e:	2301      	movs	r3, #1
 8010040:	e00d      	b.n	801005e <tcp_receive+0x89e>
 8010042:	bf00      	nop
 8010044:	20004af8 	.word	0x20004af8
 8010048:	20004ad8 	.word	0x20004ad8
 801004c:	20004b02 	.word	0x20004b02
 8010050:	08018ee4 	.word	0x08018ee4
 8010054:	0801928c 	.word	0x0801928c
 8010058:	08018f30 	.word	0x08018f30
 801005c:	2300      	movs	r3, #0
 801005e:	4423      	add	r3, r4
 8010060:	b29a      	uxth	r2, r3
 8010062:	4b98      	ldr	r3, [pc, #608]	; (80102c4 <tcp_receive+0xb04>)
 8010064:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010068:	613b      	str	r3, [r7, #16]
              next = next->next;
 801006a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010070:	6938      	ldr	r0, [r7, #16]
 8010072:	f7fd fc6c 	bl	800d94e <tcp_seg_free>
            while (next &&
 8010076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00e      	beq.n	801009a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801007c:	4b91      	ldr	r3, [pc, #580]	; (80102c4 <tcp_receive+0xb04>)
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	461a      	mov	r2, r3
 8010082:	4b91      	ldr	r3, [pc, #580]	; (80102c8 <tcp_receive+0xb08>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	441a      	add	r2, r3
 8010088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010090:	8909      	ldrh	r1, [r1, #8]
 8010092:	440b      	add	r3, r1
 8010094:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010096:	2b00      	cmp	r3, #0
 8010098:	da9a      	bge.n	800ffd0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801009a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009c:	2b00      	cmp	r3, #0
 801009e:	d059      	beq.n	8010154 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80100a0:	4b88      	ldr	r3, [pc, #544]	; (80102c4 <tcp_receive+0xb04>)
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	461a      	mov	r2, r3
 80100a6:	4b88      	ldr	r3, [pc, #544]	; (80102c8 <tcp_receive+0xb08>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	441a      	add	r2, r3
 80100ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	dd4d      	ble.n	8010154 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80100b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	b29a      	uxth	r2, r3
 80100c0:	4b81      	ldr	r3, [pc, #516]	; (80102c8 <tcp_receive+0xb08>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	4b80      	ldr	r3, [pc, #512]	; (80102cc <tcp_receive+0xb0c>)
 80100cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80100ce:	4b7f      	ldr	r3, [pc, #508]	; (80102cc <tcp_receive+0xb0c>)
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	899b      	ldrh	r3, [r3, #12]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fa fbbc 	bl	800a854 <lwip_htons>
 80100dc:	4603      	mov	r3, r0
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	f003 0302 	and.w	r3, r3, #2
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d005      	beq.n	80100f4 <tcp_receive+0x934>
                inseg.len -= 1;
 80100e8:	4b78      	ldr	r3, [pc, #480]	; (80102cc <tcp_receive+0xb0c>)
 80100ea:	891b      	ldrh	r3, [r3, #8]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	b29a      	uxth	r2, r3
 80100f0:	4b76      	ldr	r3, [pc, #472]	; (80102cc <tcp_receive+0xb0c>)
 80100f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80100f4:	4b75      	ldr	r3, [pc, #468]	; (80102cc <tcp_receive+0xb0c>)
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4a74      	ldr	r2, [pc, #464]	; (80102cc <tcp_receive+0xb0c>)
 80100fa:	8912      	ldrh	r2, [r2, #8]
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fb fdce 	bl	800bca0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010104:	4b71      	ldr	r3, [pc, #452]	; (80102cc <tcp_receive+0xb0c>)
 8010106:	891c      	ldrh	r4, [r3, #8]
 8010108:	4b70      	ldr	r3, [pc, #448]	; (80102cc <tcp_receive+0xb0c>)
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4618      	mov	r0, r3
 8010112:	f7fa fb9f 	bl	800a854 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	b2db      	uxtb	r3, r3
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	2b00      	cmp	r3, #0
 8010120:	d001      	beq.n	8010126 <tcp_receive+0x966>
 8010122:	2301      	movs	r3, #1
 8010124:	e000      	b.n	8010128 <tcp_receive+0x968>
 8010126:	2300      	movs	r3, #0
 8010128:	4423      	add	r3, r4
 801012a:	b29a      	uxth	r2, r3
 801012c:	4b65      	ldr	r3, [pc, #404]	; (80102c4 <tcp_receive+0xb04>)
 801012e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010130:	4b64      	ldr	r3, [pc, #400]	; (80102c4 <tcp_receive+0xb04>)
 8010132:	881b      	ldrh	r3, [r3, #0]
 8010134:	461a      	mov	r2, r3
 8010136:	4b64      	ldr	r3, [pc, #400]	; (80102c8 <tcp_receive+0xb08>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	441a      	add	r2, r3
 801013c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d006      	beq.n	8010154 <tcp_receive+0x994>
 8010146:	4b62      	ldr	r3, [pc, #392]	; (80102d0 <tcp_receive+0xb10>)
 8010148:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801014c:	4961      	ldr	r1, [pc, #388]	; (80102d4 <tcp_receive+0xb14>)
 801014e:	4862      	ldr	r0, [pc, #392]	; (80102d8 <tcp_receive+0xb18>)
 8010150:	f005 ff2c 	bl	8015fac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010158:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801015a:	4b5a      	ldr	r3, [pc, #360]	; (80102c4 <tcp_receive+0xb04>)
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	4b59      	ldr	r3, [pc, #356]	; (80102c8 <tcp_receive+0xb08>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	441a      	add	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801016e:	4b55      	ldr	r3, [pc, #340]	; (80102c4 <tcp_receive+0xb04>)
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	429a      	cmp	r2, r3
 8010174:	d206      	bcs.n	8010184 <tcp_receive+0x9c4>
 8010176:	4b56      	ldr	r3, [pc, #344]	; (80102d0 <tcp_receive+0xb10>)
 8010178:	f240 6207 	movw	r2, #1543	; 0x607
 801017c:	4957      	ldr	r1, [pc, #348]	; (80102dc <tcp_receive+0xb1c>)
 801017e:	4856      	ldr	r0, [pc, #344]	; (80102d8 <tcp_receive+0xb18>)
 8010180:	f005 ff14 	bl	8015fac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010188:	4b4e      	ldr	r3, [pc, #312]	; (80102c4 <tcp_receive+0xb04>)
 801018a:	881b      	ldrh	r3, [r3, #0]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	b29a      	uxth	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7fc fd9d 	bl	800ccd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801019a:	4b4c      	ldr	r3, [pc, #304]	; (80102cc <tcp_receive+0xb0c>)
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	891b      	ldrh	r3, [r3, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d006      	beq.n	80101b2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80101a4:	4b49      	ldr	r3, [pc, #292]	; (80102cc <tcp_receive+0xb0c>)
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	4a4d      	ldr	r2, [pc, #308]	; (80102e0 <tcp_receive+0xb20>)
 80101aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80101ac:	4b47      	ldr	r3, [pc, #284]	; (80102cc <tcp_receive+0xb0c>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101b2:	4b46      	ldr	r3, [pc, #280]	; (80102cc <tcp_receive+0xb0c>)
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	899b      	ldrh	r3, [r3, #12]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fa fb4a 	bl	800a854 <lwip_htons>
 80101c0:	4603      	mov	r3, r0
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	f003 0301 	and.w	r3, r3, #1
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 80b8 	beq.w	801033e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80101ce:	4b45      	ldr	r3, [pc, #276]	; (80102e4 <tcp_receive+0xb24>)
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f043 0320 	orr.w	r3, r3, #32
 80101d6:	b2da      	uxtb	r2, r3
 80101d8:	4b42      	ldr	r3, [pc, #264]	; (80102e4 <tcp_receive+0xb24>)
 80101da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80101dc:	e0af      	b.n	801033e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	4a36      	ldr	r2, [pc, #216]	; (80102c8 <tcp_receive+0xb08>)
 80101ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	891b      	ldrh	r3, [r3, #8]
 80101f4:	461c      	mov	r4, r3
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	899b      	ldrh	r3, [r3, #12]
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fa fb28 	bl	800a854 <lwip_htons>
 8010204:	4603      	mov	r3, r0
 8010206:	b2db      	uxtb	r3, r3
 8010208:	f003 0303 	and.w	r3, r3, #3
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <tcp_receive+0xa54>
 8010210:	2301      	movs	r3, #1
 8010212:	e000      	b.n	8010216 <tcp_receive+0xa56>
 8010214:	2300      	movs	r3, #0
 8010216:	191a      	adds	r2, r3, r4
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021c:	441a      	add	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010226:	461c      	mov	r4, r3
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	891b      	ldrh	r3, [r3, #8]
 801022c:	461d      	mov	r5, r3
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	899b      	ldrh	r3, [r3, #12]
 8010234:	b29b      	uxth	r3, r3
 8010236:	4618      	mov	r0, r3
 8010238:	f7fa fb0c 	bl	800a854 <lwip_htons>
 801023c:	4603      	mov	r3, r0
 801023e:	b2db      	uxtb	r3, r3
 8010240:	f003 0303 	and.w	r3, r3, #3
 8010244:	2b00      	cmp	r3, #0
 8010246:	d001      	beq.n	801024c <tcp_receive+0xa8c>
 8010248:	2301      	movs	r3, #1
 801024a:	e000      	b.n	801024e <tcp_receive+0xa8e>
 801024c:	2300      	movs	r3, #0
 801024e:	442b      	add	r3, r5
 8010250:	429c      	cmp	r4, r3
 8010252:	d206      	bcs.n	8010262 <tcp_receive+0xaa2>
 8010254:	4b1e      	ldr	r3, [pc, #120]	; (80102d0 <tcp_receive+0xb10>)
 8010256:	f240 622b 	movw	r2, #1579	; 0x62b
 801025a:	4923      	ldr	r1, [pc, #140]	; (80102e8 <tcp_receive+0xb28>)
 801025c:	481e      	ldr	r0, [pc, #120]	; (80102d8 <tcp_receive+0xb18>)
 801025e:	f005 fea5 	bl	8015fac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	891b      	ldrh	r3, [r3, #8]
 8010266:	461c      	mov	r4, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	899b      	ldrh	r3, [r3, #12]
 801026e:	b29b      	uxth	r3, r3
 8010270:	4618      	mov	r0, r3
 8010272:	f7fa faef 	bl	800a854 <lwip_htons>
 8010276:	4603      	mov	r3, r0
 8010278:	b2db      	uxtb	r3, r3
 801027a:	f003 0303 	and.w	r3, r3, #3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <tcp_receive+0xac6>
 8010282:	2301      	movs	r3, #1
 8010284:	e000      	b.n	8010288 <tcp_receive+0xac8>
 8010286:	2300      	movs	r3, #0
 8010288:	1919      	adds	r1, r3, r4
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801028e:	b28b      	uxth	r3, r1
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	b29a      	uxth	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7fc fd1b 	bl	800ccd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	891b      	ldrh	r3, [r3, #8]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d028      	beq.n	80102fa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80102a8:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <tcp_receive+0xb20>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d01d      	beq.n	80102ec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <tcp_receive+0xb20>)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	4619      	mov	r1, r3
 80102ba:	4610      	mov	r0, r2
 80102bc:	f7fb ff44 	bl	800c148 <pbuf_cat>
 80102c0:	e018      	b.n	80102f4 <tcp_receive+0xb34>
 80102c2:	bf00      	nop
 80102c4:	20004b02 	.word	0x20004b02
 80102c8:	20004af8 	.word	0x20004af8
 80102cc:	20004ad8 	.word	0x20004ad8
 80102d0:	08018ee4 	.word	0x08018ee4
 80102d4:	080192c4 	.word	0x080192c4
 80102d8:	08018f30 	.word	0x08018f30
 80102dc:	08019300 	.word	0x08019300
 80102e0:	20004b08 	.word	0x20004b08
 80102e4:	20004b05 	.word	0x20004b05
 80102e8:	08019320 	.word	0x08019320
            } else {
              recv_data = cseg->p;
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	4a70      	ldr	r2, [pc, #448]	; (80104b4 <tcp_receive+0xcf4>)
 80102f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2200      	movs	r2, #0
 80102f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	899b      	ldrh	r3, [r3, #12]
 8010300:	b29b      	uxth	r3, r3
 8010302:	4618      	mov	r0, r3
 8010304:	f7fa faa6 	bl	800a854 <lwip_htons>
 8010308:	4603      	mov	r3, r0
 801030a:	b2db      	uxtb	r3, r3
 801030c:	f003 0301 	and.w	r3, r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00d      	beq.n	8010330 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010314:	4b68      	ldr	r3, [pc, #416]	; (80104b8 <tcp_receive+0xcf8>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f043 0320 	orr.w	r3, r3, #32
 801031c:	b2da      	uxtb	r2, r3
 801031e:	4b66      	ldr	r3, [pc, #408]	; (80104b8 <tcp_receive+0xcf8>)
 8010320:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	7d1b      	ldrb	r3, [r3, #20]
 8010326:	2b04      	cmp	r3, #4
 8010328:	d102      	bne.n	8010330 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2207      	movs	r2, #7
 801032e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010338:	68b8      	ldr	r0, [r7, #8]
 801033a:	f7fd fb08 	bl	800d94e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010342:	2b00      	cmp	r3, #0
 8010344:	d008      	beq.n	8010358 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010352:	429a      	cmp	r2, r3
 8010354:	f43f af43 	beq.w	80101de <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	8b5b      	ldrh	r3, [r3, #26]
 801035c:	f003 0301 	and.w	r3, r3, #1
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00e      	beq.n	8010382 <tcp_receive+0xbc2>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	8b5b      	ldrh	r3, [r3, #26]
 8010368:	f023 0301 	bic.w	r3, r3, #1
 801036c:	b29a      	uxth	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	835a      	strh	r2, [r3, #26]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	8b5b      	ldrh	r3, [r3, #26]
 8010376:	f043 0302 	orr.w	r3, r3, #2
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010380:	e188      	b.n	8010694 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8b5b      	ldrh	r3, [r3, #26]
 8010386:	f043 0301 	orr.w	r3, r3, #1
 801038a:	b29a      	uxth	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010390:	e180      	b.n	8010694 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010396:	2b00      	cmp	r3, #0
 8010398:	d106      	bne.n	80103a8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801039a:	4848      	ldr	r0, [pc, #288]	; (80104bc <tcp_receive+0xcfc>)
 801039c:	f7fd faf0 	bl	800d980 <tcp_seg_copy>
 80103a0:	4602      	mov	r2, r0
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	675a      	str	r2, [r3, #116]	; 0x74
 80103a6:	e16d      	b.n	8010684 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80103b2:	e157      	b.n	8010664 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	685a      	ldr	r2, [r3, #4]
 80103ba:	4b41      	ldr	r3, [pc, #260]	; (80104c0 <tcp_receive+0xd00>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d11d      	bne.n	80103fe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80103c2:	4b3e      	ldr	r3, [pc, #248]	; (80104bc <tcp_receive+0xcfc>)
 80103c4:	891a      	ldrh	r2, [r3, #8]
 80103c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c8:	891b      	ldrh	r3, [r3, #8]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	f240 814f 	bls.w	801066e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80103d0:	483a      	ldr	r0, [pc, #232]	; (80104bc <tcp_receive+0xcfc>)
 80103d2:	f7fd fad5 	bl	800d980 <tcp_seg_copy>
 80103d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 8149 	beq.w	8010672 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80103e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d003      	beq.n	80103ee <tcp_receive+0xc2e>
                    prev->next = cseg;
 80103e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e8:	697a      	ldr	r2, [r7, #20]
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	e002      	b.n	80103f4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	697a      	ldr	r2, [r7, #20]
 80103f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80103f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103f6:	6978      	ldr	r0, [r7, #20]
 80103f8:	f7ff f8de 	bl	800f5b8 <tcp_oos_insert_segment>
                }
                break;
 80103fc:	e139      	b.n	8010672 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80103fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010400:	2b00      	cmp	r3, #0
 8010402:	d117      	bne.n	8010434 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010404:	4b2e      	ldr	r3, [pc, #184]	; (80104c0 <tcp_receive+0xd00>)
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	da57      	bge.n	80104c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010414:	4829      	ldr	r0, [pc, #164]	; (80104bc <tcp_receive+0xcfc>)
 8010416:	f7fd fab3 	bl	800d980 <tcp_seg_copy>
 801041a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 8129 	beq.w	8010676 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	69ba      	ldr	r2, [r7, #24]
 8010428:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801042a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801042c:	69b8      	ldr	r0, [r7, #24]
 801042e:	f7ff f8c3 	bl	800f5b8 <tcp_oos_insert_segment>
                  }
                  break;
 8010432:	e120      	b.n	8010676 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010434:	4b22      	ldr	r3, [pc, #136]	; (80104c0 <tcp_receive+0xd00>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	3b01      	subs	r3, #1
 8010442:	2b00      	cmp	r3, #0
 8010444:	db3e      	blt.n	80104c4 <tcp_receive+0xd04>
 8010446:	4b1e      	ldr	r3, [pc, #120]	; (80104c0 <tcp_receive+0xd00>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	1ad3      	subs	r3, r2, r3
 8010452:	3301      	adds	r3, #1
 8010454:	2b00      	cmp	r3, #0
 8010456:	dc35      	bgt.n	80104c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010458:	4818      	ldr	r0, [pc, #96]	; (80104bc <tcp_receive+0xcfc>)
 801045a:	f7fd fa91 	bl	800d980 <tcp_seg_copy>
 801045e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 8109 	beq.w	801067a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010470:	8912      	ldrh	r2, [r2, #8]
 8010472:	441a      	add	r2, r3
 8010474:	4b12      	ldr	r3, [pc, #72]	; (80104c0 <tcp_receive+0xd00>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	dd12      	ble.n	80104a4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801047e:	4b10      	ldr	r3, [pc, #64]	; (80104c0 <tcp_receive+0xd00>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	b29a      	uxth	r2, r3
 8010484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	b29b      	uxth	r3, r3
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	b29a      	uxth	r2, r3
 8010490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010492:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010496:	685a      	ldr	r2, [r3, #4]
 8010498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049a:	891b      	ldrh	r3, [r3, #8]
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7fb fbfe 	bl	800bca0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80104a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a6:	69fa      	ldr	r2, [r7, #28]
 80104a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80104aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104ac:	69f8      	ldr	r0, [r7, #28]
 80104ae:	f7ff f883 	bl	800f5b8 <tcp_oos_insert_segment>
                  }
                  break;
 80104b2:	e0e2      	b.n	801067a <tcp_receive+0xeba>
 80104b4:	20004b08 	.word	0x20004b08
 80104b8:	20004b05 	.word	0x20004b05
 80104bc:	20004ad8 	.word	0x20004ad8
 80104c0:	20004af8 	.word	0x20004af8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80104c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f040 80c6 	bne.w	801065e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80104d2:	4b80      	ldr	r3, [pc, #512]	; (80106d4 <tcp_receive+0xf14>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f340 80bd 	ble.w	801065e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80104e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	899b      	ldrh	r3, [r3, #12]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fa f9b1 	bl	800a854 <lwip_htons>
 80104f2:	4603      	mov	r3, r0
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	f003 0301 	and.w	r3, r3, #1
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f040 80bf 	bne.w	801067e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010500:	4875      	ldr	r0, [pc, #468]	; (80106d8 <tcp_receive+0xf18>)
 8010502:	f7fd fa3d 	bl	800d980 <tcp_seg_copy>
 8010506:	4602      	mov	r2, r0
 8010508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80b6 	beq.w	8010682 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801051e:	8912      	ldrh	r2, [r2, #8]
 8010520:	441a      	add	r2, r3
 8010522:	4b6c      	ldr	r3, [pc, #432]	; (80106d4 <tcp_receive+0xf14>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	dd12      	ble.n	8010552 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801052c:	4b69      	ldr	r3, [pc, #420]	; (80106d4 <tcp_receive+0xf14>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	b29a      	uxth	r2, r3
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	b29b      	uxth	r3, r3
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	b29a      	uxth	r2, r3
 801053e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010540:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010544:	685a      	ldr	r2, [r3, #4]
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	891b      	ldrh	r3, [r3, #8]
 801054a:	4619      	mov	r1, r3
 801054c:	4610      	mov	r0, r2
 801054e:	f7fb fba7 	bl	800bca0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010552:	4b62      	ldr	r3, [pc, #392]	; (80106dc <tcp_receive+0xf1c>)
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	4b5e      	ldr	r3, [pc, #376]	; (80106d4 <tcp_receive+0xf14>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	441a      	add	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010562:	6879      	ldr	r1, [r7, #4]
 8010564:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010566:	440b      	add	r3, r1
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	2b00      	cmp	r3, #0
 801056c:	f340 8089 	ble.w	8010682 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	899b      	ldrh	r3, [r3, #12]
 8010578:	b29b      	uxth	r3, r3
 801057a:	4618      	mov	r0, r3
 801057c:	f7fa f96a 	bl	800a854 <lwip_htons>
 8010580:	4603      	mov	r3, r0
 8010582:	b2db      	uxtb	r3, r3
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d022      	beq.n	80105d2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	899b      	ldrh	r3, [r3, #12]
 8010594:	b29b      	uxth	r3, r3
 8010596:	b21b      	sxth	r3, r3
 8010598:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801059c:	b21c      	sxth	r4, r3
 801059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	899b      	ldrh	r3, [r3, #12]
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fa f953 	bl	800a854 <lwip_htons>
 80105ae:	4603      	mov	r3, r0
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fa f94a 	bl	800a854 <lwip_htons>
 80105c0:	4603      	mov	r3, r0
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	4323      	orrs	r3, r4
 80105c6:	b21a      	sxth	r2, r3
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	b292      	uxth	r2, r2
 80105d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105dc:	4413      	add	r3, r2
 80105de:	b299      	uxth	r1, r3
 80105e0:	4b3c      	ldr	r3, [pc, #240]	; (80106d4 <tcp_receive+0xf14>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	b29a      	uxth	r2, r3
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	1a8a      	subs	r2, r1, r2
 80105ec:	b292      	uxth	r2, r2
 80105ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	685a      	ldr	r2, [r3, #4]
 80105f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	891b      	ldrh	r3, [r3, #8]
 80105fc:	4619      	mov	r1, r3
 80105fe:	4610      	mov	r0, r2
 8010600:	f7fb fb4e 	bl	800bca0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	891c      	ldrh	r4, [r3, #8]
 801060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	b29b      	uxth	r3, r3
 8010614:	4618      	mov	r0, r3
 8010616:	f7fa f91d 	bl	800a854 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	b2db      	uxtb	r3, r3
 801061e:	f003 0303 	and.w	r3, r3, #3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <tcp_receive+0xe6a>
 8010626:	2301      	movs	r3, #1
 8010628:	e000      	b.n	801062c <tcp_receive+0xe6c>
 801062a:	2300      	movs	r3, #0
 801062c:	4423      	add	r3, r4
 801062e:	b29a      	uxth	r2, r3
 8010630:	4b2a      	ldr	r3, [pc, #168]	; (80106dc <tcp_receive+0xf1c>)
 8010632:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010634:	4b29      	ldr	r3, [pc, #164]	; (80106dc <tcp_receive+0xf1c>)
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	4b26      	ldr	r3, [pc, #152]	; (80106d4 <tcp_receive+0xf14>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	441a      	add	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010644:	6879      	ldr	r1, [r7, #4]
 8010646:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010648:	440b      	add	r3, r1
 801064a:	429a      	cmp	r2, r3
 801064c:	d019      	beq.n	8010682 <tcp_receive+0xec2>
 801064e:	4b24      	ldr	r3, [pc, #144]	; (80106e0 <tcp_receive+0xf20>)
 8010650:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010654:	4923      	ldr	r1, [pc, #140]	; (80106e4 <tcp_receive+0xf24>)
 8010656:	4824      	ldr	r0, [pc, #144]	; (80106e8 <tcp_receive+0xf28>)
 8010658:	f005 fca8 	bl	8015fac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801065c:	e011      	b.n	8010682 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801065e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	63bb      	str	r3, [r7, #56]	; 0x38
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	2b00      	cmp	r3, #0
 8010668:	f47f aea4 	bne.w	80103b4 <tcp_receive+0xbf4>
 801066c:	e00a      	b.n	8010684 <tcp_receive+0xec4>
                break;
 801066e:	bf00      	nop
 8010670:	e008      	b.n	8010684 <tcp_receive+0xec4>
                break;
 8010672:	bf00      	nop
 8010674:	e006      	b.n	8010684 <tcp_receive+0xec4>
                  break;
 8010676:	bf00      	nop
 8010678:	e004      	b.n	8010684 <tcp_receive+0xec4>
                  break;
 801067a:	bf00      	nop
 801067c:	e002      	b.n	8010684 <tcp_receive+0xec4>
                  break;
 801067e:	bf00      	nop
 8010680:	e000      	b.n	8010684 <tcp_receive+0xec4>
                break;
 8010682:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f001 fe8b 	bl	80123a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801068a:	e003      	b.n	8010694 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f001 fe87 	bl	80123a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010692:	e01a      	b.n	80106ca <tcp_receive+0xf0a>
 8010694:	e019      	b.n	80106ca <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010696:	4b0f      	ldr	r3, [pc, #60]	; (80106d4 <tcp_receive+0xf14>)
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	db0a      	blt.n	80106ba <tcp_receive+0xefa>
 80106a4:	4b0b      	ldr	r3, [pc, #44]	; (80106d4 <tcp_receive+0xf14>)
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ac:	6879      	ldr	r1, [r7, #4]
 80106ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106b0:	440b      	add	r3, r1
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	3301      	adds	r3, #1
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	dd07      	ble.n	80106ca <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8b5b      	ldrh	r3, [r3, #26]
 80106be:	f043 0302 	orr.w	r3, r3, #2
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80106c8:	e7ff      	b.n	80106ca <tcp_receive+0xf0a>
 80106ca:	bf00      	nop
 80106cc:	3750      	adds	r7, #80	; 0x50
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bdb0      	pop	{r4, r5, r7, pc}
 80106d2:	bf00      	nop
 80106d4:	20004af8 	.word	0x20004af8
 80106d8:	20004ad8 	.word	0x20004ad8
 80106dc:	20004b02 	.word	0x20004b02
 80106e0:	08018ee4 	.word	0x08018ee4
 80106e4:	0801928c 	.word	0x0801928c
 80106e8:	08018f30 	.word	0x08018f30

080106ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80106f2:	4b15      	ldr	r3, [pc, #84]	; (8010748 <tcp_get_next_optbyte+0x5c>)
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	1c5a      	adds	r2, r3, #1
 80106f8:	b291      	uxth	r1, r2
 80106fa:	4a13      	ldr	r2, [pc, #76]	; (8010748 <tcp_get_next_optbyte+0x5c>)
 80106fc:	8011      	strh	r1, [r2, #0]
 80106fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010700:	4b12      	ldr	r3, [pc, #72]	; (801074c <tcp_get_next_optbyte+0x60>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d004      	beq.n	8010712 <tcp_get_next_optbyte+0x26>
 8010708:	4b11      	ldr	r3, [pc, #68]	; (8010750 <tcp_get_next_optbyte+0x64>)
 801070a:	881b      	ldrh	r3, [r3, #0]
 801070c:	88fa      	ldrh	r2, [r7, #6]
 801070e:	429a      	cmp	r2, r3
 8010710:	d208      	bcs.n	8010724 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010712:	4b10      	ldr	r3, [pc, #64]	; (8010754 <tcp_get_next_optbyte+0x68>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3314      	adds	r3, #20
 8010718:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801071a:	88fb      	ldrh	r3, [r7, #6]
 801071c:	683a      	ldr	r2, [r7, #0]
 801071e:	4413      	add	r3, r2
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	e00b      	b.n	801073c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010724:	88fb      	ldrh	r3, [r7, #6]
 8010726:	b2da      	uxtb	r2, r3
 8010728:	4b09      	ldr	r3, [pc, #36]	; (8010750 <tcp_get_next_optbyte+0x64>)
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	1ad3      	subs	r3, r2, r3
 8010730:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010732:	4b06      	ldr	r3, [pc, #24]	; (801074c <tcp_get_next_optbyte+0x60>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	797b      	ldrb	r3, [r7, #5]
 8010738:	4413      	add	r3, r2
 801073a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801073c:	4618      	mov	r0, r3
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	20004af4 	.word	0x20004af4
 801074c:	20004af0 	.word	0x20004af0
 8010750:	20004aee 	.word	0x20004aee
 8010754:	20004ae8 	.word	0x20004ae8

08010758 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <tcp_parseopt+0x1c>
 8010766:	4b32      	ldr	r3, [pc, #200]	; (8010830 <tcp_parseopt+0xd8>)
 8010768:	f240 727d 	movw	r2, #1917	; 0x77d
 801076c:	4931      	ldr	r1, [pc, #196]	; (8010834 <tcp_parseopt+0xdc>)
 801076e:	4832      	ldr	r0, [pc, #200]	; (8010838 <tcp_parseopt+0xe0>)
 8010770:	f005 fc1c 	bl	8015fac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010774:	4b31      	ldr	r3, [pc, #196]	; (801083c <tcp_parseopt+0xe4>)
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d055      	beq.n	8010828 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801077c:	4b30      	ldr	r3, [pc, #192]	; (8010840 <tcp_parseopt+0xe8>)
 801077e:	2200      	movs	r2, #0
 8010780:	801a      	strh	r2, [r3, #0]
 8010782:	e045      	b.n	8010810 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010784:	f7ff ffb2 	bl	80106ec <tcp_get_next_optbyte>
 8010788:	4603      	mov	r3, r0
 801078a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801078c:	7bfb      	ldrb	r3, [r7, #15]
 801078e:	2b02      	cmp	r3, #2
 8010790:	d006      	beq.n	80107a0 <tcp_parseopt+0x48>
 8010792:	2b02      	cmp	r3, #2
 8010794:	dc2b      	bgt.n	80107ee <tcp_parseopt+0x96>
 8010796:	2b00      	cmp	r3, #0
 8010798:	d041      	beq.n	801081e <tcp_parseopt+0xc6>
 801079a:	2b01      	cmp	r3, #1
 801079c:	d127      	bne.n	80107ee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801079e:	e037      	b.n	8010810 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80107a0:	f7ff ffa4 	bl	80106ec <tcp_get_next_optbyte>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b04      	cmp	r3, #4
 80107a8:	d13b      	bne.n	8010822 <tcp_parseopt+0xca>
 80107aa:	4b25      	ldr	r3, [pc, #148]	; (8010840 <tcp_parseopt+0xe8>)
 80107ac:	881b      	ldrh	r3, [r3, #0]
 80107ae:	3301      	adds	r3, #1
 80107b0:	4a22      	ldr	r2, [pc, #136]	; (801083c <tcp_parseopt+0xe4>)
 80107b2:	8812      	ldrh	r2, [r2, #0]
 80107b4:	4293      	cmp	r3, r2
 80107b6:	da34      	bge.n	8010822 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80107b8:	f7ff ff98 	bl	80106ec <tcp_get_next_optbyte>
 80107bc:	4603      	mov	r3, r0
 80107be:	b29b      	uxth	r3, r3
 80107c0:	021b      	lsls	r3, r3, #8
 80107c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80107c4:	f7ff ff92 	bl	80106ec <tcp_get_next_optbyte>
 80107c8:	4603      	mov	r3, r0
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	89bb      	ldrh	r3, [r7, #12]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80107d2:	89bb      	ldrh	r3, [r7, #12]
 80107d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80107d8:	d804      	bhi.n	80107e4 <tcp_parseopt+0x8c>
 80107da:	89bb      	ldrh	r3, [r7, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <tcp_parseopt+0x8c>
 80107e0:	89ba      	ldrh	r2, [r7, #12]
 80107e2:	e001      	b.n	80107e8 <tcp_parseopt+0x90>
 80107e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80107ec:	e010      	b.n	8010810 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80107ee:	f7ff ff7d 	bl	80106ec <tcp_get_next_optbyte>
 80107f2:	4603      	mov	r3, r0
 80107f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80107f6:	7afb      	ldrb	r3, [r7, #11]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d914      	bls.n	8010826 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80107fc:	7afb      	ldrb	r3, [r7, #11]
 80107fe:	b29a      	uxth	r2, r3
 8010800:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <tcp_parseopt+0xe8>)
 8010802:	881b      	ldrh	r3, [r3, #0]
 8010804:	4413      	add	r3, r2
 8010806:	b29b      	uxth	r3, r3
 8010808:	3b02      	subs	r3, #2
 801080a:	b29a      	uxth	r2, r3
 801080c:	4b0c      	ldr	r3, [pc, #48]	; (8010840 <tcp_parseopt+0xe8>)
 801080e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010810:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <tcp_parseopt+0xe8>)
 8010812:	881a      	ldrh	r2, [r3, #0]
 8010814:	4b09      	ldr	r3, [pc, #36]	; (801083c <tcp_parseopt+0xe4>)
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	429a      	cmp	r2, r3
 801081a:	d3b3      	bcc.n	8010784 <tcp_parseopt+0x2c>
 801081c:	e004      	b.n	8010828 <tcp_parseopt+0xd0>
          return;
 801081e:	bf00      	nop
 8010820:	e002      	b.n	8010828 <tcp_parseopt+0xd0>
            return;
 8010822:	bf00      	nop
 8010824:	e000      	b.n	8010828 <tcp_parseopt+0xd0>
            return;
 8010826:	bf00      	nop
      }
    }
  }
}
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	08018ee4 	.word	0x08018ee4
 8010834:	08019348 	.word	0x08019348
 8010838:	08018f30 	.word	0x08018f30
 801083c:	20004aec 	.word	0x20004aec
 8010840:	20004af4 	.word	0x20004af4

08010844 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010844:	b480      	push	{r7}
 8010846:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010848:	4b05      	ldr	r3, [pc, #20]	; (8010860 <tcp_trigger_input_pcb_close+0x1c>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f043 0310 	orr.w	r3, r3, #16
 8010850:	b2da      	uxtb	r2, r3
 8010852:	4b03      	ldr	r3, [pc, #12]	; (8010860 <tcp_trigger_input_pcb_close+0x1c>)
 8010854:	701a      	strb	r2, [r3, #0]
}
 8010856:	bf00      	nop
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr
 8010860:	20004b05 	.word	0x20004b05

08010864 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00a      	beq.n	801088c <tcp_route+0x28>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	7a1b      	ldrb	r3, [r3, #8]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d006      	beq.n	801088c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	7a1b      	ldrb	r3, [r3, #8]
 8010882:	4618      	mov	r0, r3
 8010884:	f7fb f804 	bl	800b890 <netif_get_by_index>
 8010888:	4603      	mov	r3, r0
 801088a:	e003      	b.n	8010894 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f003 fcb9 	bl	8014204 <ip4_route>
 8010892:	4603      	mov	r3, r0
  }
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801089c:	b590      	push	{r4, r7, lr}
 801089e:	b087      	sub	sp, #28
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	603b      	str	r3, [r7, #0]
 80108a8:	4613      	mov	r3, r2
 80108aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d105      	bne.n	80108be <tcp_create_segment+0x22>
 80108b2:	4b44      	ldr	r3, [pc, #272]	; (80109c4 <tcp_create_segment+0x128>)
 80108b4:	22a3      	movs	r2, #163	; 0xa3
 80108b6:	4944      	ldr	r1, [pc, #272]	; (80109c8 <tcp_create_segment+0x12c>)
 80108b8:	4844      	ldr	r0, [pc, #272]	; (80109cc <tcp_create_segment+0x130>)
 80108ba:	f005 fb77 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d105      	bne.n	80108d0 <tcp_create_segment+0x34>
 80108c4:	4b3f      	ldr	r3, [pc, #252]	; (80109c4 <tcp_create_segment+0x128>)
 80108c6:	22a4      	movs	r2, #164	; 0xa4
 80108c8:	4941      	ldr	r1, [pc, #260]	; (80109d0 <tcp_create_segment+0x134>)
 80108ca:	4840      	ldr	r0, [pc, #256]	; (80109cc <tcp_create_segment+0x130>)
 80108cc:	f005 fb6e 	bl	8015fac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	f003 0304 	and.w	r3, r3, #4
 80108dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80108de:	2003      	movs	r0, #3
 80108e0:	f7fa fc6e 	bl	800b1c0 <memp_malloc>
 80108e4:	6138      	str	r0, [r7, #16]
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d104      	bne.n	80108f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80108ec:	68b8      	ldr	r0, [r7, #8]
 80108ee:	f7fb fb5d 	bl	800bfac <pbuf_free>
    return NULL;
 80108f2:	2300      	movs	r3, #0
 80108f4:	e061      	b.n	80109ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80108fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	2200      	movs	r2, #0
 8010902:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	891a      	ldrh	r2, [r3, #8]
 801090e:	7dfb      	ldrb	r3, [r7, #23]
 8010910:	b29b      	uxth	r3, r3
 8010912:	429a      	cmp	r2, r3
 8010914:	d205      	bcs.n	8010922 <tcp_create_segment+0x86>
 8010916:	4b2b      	ldr	r3, [pc, #172]	; (80109c4 <tcp_create_segment+0x128>)
 8010918:	22b0      	movs	r2, #176	; 0xb0
 801091a:	492e      	ldr	r1, [pc, #184]	; (80109d4 <tcp_create_segment+0x138>)
 801091c:	482b      	ldr	r0, [pc, #172]	; (80109cc <tcp_create_segment+0x130>)
 801091e:	f005 fb45 	bl	8015fac <iprintf>
  seg->len = p->tot_len - optlen;
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	891a      	ldrh	r2, [r3, #8]
 8010926:	7dfb      	ldrb	r3, [r7, #23]
 8010928:	b29b      	uxth	r3, r3
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	b29a      	uxth	r2, r3
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010932:	2114      	movs	r1, #20
 8010934:	68b8      	ldr	r0, [r7, #8]
 8010936:	f7fb faa3 	bl	800be80 <pbuf_add_header>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d004      	beq.n	801094a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010940:	6938      	ldr	r0, [r7, #16]
 8010942:	f7fd f804 	bl	800d94e <tcp_seg_free>
    return NULL;
 8010946:	2300      	movs	r3, #0
 8010948:	e037      	b.n	80109ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	685a      	ldr	r2, [r3, #4]
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	8ada      	ldrh	r2, [r3, #22]
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	68dc      	ldr	r4, [r3, #12]
 801095c:	4610      	mov	r0, r2
 801095e:	f7f9 ff79 	bl	800a854 <lwip_htons>
 8010962:	4603      	mov	r3, r0
 8010964:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	8b1a      	ldrh	r2, [r3, #24]
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	68dc      	ldr	r4, [r3, #12]
 801096e:	4610      	mov	r0, r2
 8010970:	f7f9 ff70 	bl	800a854 <lwip_htons>
 8010974:	4603      	mov	r3, r0
 8010976:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	68dc      	ldr	r4, [r3, #12]
 801097c:	6838      	ldr	r0, [r7, #0]
 801097e:	f7f9 ff7e 	bl	800a87e <lwip_htonl>
 8010982:	4603      	mov	r3, r0
 8010984:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	089b      	lsrs	r3, r3, #2
 801098a:	b2db      	uxtb	r3, r3
 801098c:	b29b      	uxth	r3, r3
 801098e:	3305      	adds	r3, #5
 8010990:	b29b      	uxth	r3, r3
 8010992:	031b      	lsls	r3, r3, #12
 8010994:	b29a      	uxth	r2, r3
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	b29b      	uxth	r3, r3
 801099a:	4313      	orrs	r3, r2
 801099c:	b29a      	uxth	r2, r3
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	68dc      	ldr	r4, [r3, #12]
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7f9 ff56 	bl	800a854 <lwip_htons>
 80109a8:	4603      	mov	r3, r0
 80109aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	749a      	strb	r2, [r3, #18]
 80109b4:	2200      	movs	r2, #0
 80109b6:	74da      	strb	r2, [r3, #19]
  return seg;
 80109b8:	693b      	ldr	r3, [r7, #16]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd90      	pop	{r4, r7, pc}
 80109c2:	bf00      	nop
 80109c4:	08019364 	.word	0x08019364
 80109c8:	08019398 	.word	0x08019398
 80109cc:	080193b8 	.word	0x080193b8
 80109d0:	080193e0 	.word	0x080193e0
 80109d4:	08019404 	.word	0x08019404

080109d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	607b      	str	r3, [r7, #4]
 80109e0:	4603      	mov	r3, r0
 80109e2:	73fb      	strb	r3, [r7, #15]
 80109e4:	460b      	mov	r3, r1
 80109e6:	81bb      	strh	r3, [r7, #12]
 80109e8:	4613      	mov	r3, r2
 80109ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80109ec:	89bb      	ldrh	r3, [r7, #12]
 80109ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d105      	bne.n	8010a02 <tcp_pbuf_prealloc+0x2a>
 80109f6:	4b30      	ldr	r3, [pc, #192]	; (8010ab8 <tcp_pbuf_prealloc+0xe0>)
 80109f8:	22e8      	movs	r2, #232	; 0xe8
 80109fa:	4930      	ldr	r1, [pc, #192]	; (8010abc <tcp_pbuf_prealloc+0xe4>)
 80109fc:	4830      	ldr	r0, [pc, #192]	; (8010ac0 <tcp_pbuf_prealloc+0xe8>)
 80109fe:	f005 fad5 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010a02:	6a3b      	ldr	r3, [r7, #32]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d105      	bne.n	8010a14 <tcp_pbuf_prealloc+0x3c>
 8010a08:	4b2b      	ldr	r3, [pc, #172]	; (8010ab8 <tcp_pbuf_prealloc+0xe0>)
 8010a0a:	22e9      	movs	r2, #233	; 0xe9
 8010a0c:	492d      	ldr	r1, [pc, #180]	; (8010ac4 <tcp_pbuf_prealloc+0xec>)
 8010a0e:	482c      	ldr	r0, [pc, #176]	; (8010ac0 <tcp_pbuf_prealloc+0xe8>)
 8010a10:	f005 facc 	bl	8015fac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010a14:	89ba      	ldrh	r2, [r7, #12]
 8010a16:	897b      	ldrh	r3, [r7, #10]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d221      	bcs.n	8010a60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a20:	f003 0302 	and.w	r3, r3, #2
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d111      	bne.n	8010a4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010a28:	6a3b      	ldr	r3, [r7, #32]
 8010a2a:	8b5b      	ldrh	r3, [r3, #26]
 8010a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d115      	bne.n	8010a60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010a34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d007      	beq.n	8010a4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010a3c:	6a3b      	ldr	r3, [r7, #32]
 8010a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d103      	bne.n	8010a4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010a44:	6a3b      	ldr	r3, [r7, #32]
 8010a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d009      	beq.n	8010a60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010a4c:	89bb      	ldrh	r3, [r7, #12]
 8010a4e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010a52:	f023 0203 	bic.w	r2, r3, #3
 8010a56:	897b      	ldrh	r3, [r7, #10]
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	bf28      	it	cs
 8010a5c:	4613      	movcs	r3, r2
 8010a5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010a60:	8af9      	ldrh	r1, [r7, #22]
 8010a62:	7bfb      	ldrb	r3, [r7, #15]
 8010a64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fa ffbb 	bl	800b9e4 <pbuf_alloc>
 8010a6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e019      	b.n	8010aae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d006      	beq.n	8010a90 <tcp_pbuf_prealloc+0xb8>
 8010a82:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <tcp_pbuf_prealloc+0xe0>)
 8010a84:	f240 120b 	movw	r2, #267	; 0x10b
 8010a88:	490f      	ldr	r1, [pc, #60]	; (8010ac8 <tcp_pbuf_prealloc+0xf0>)
 8010a8a:	480d      	ldr	r0, [pc, #52]	; (8010ac0 <tcp_pbuf_prealloc+0xe8>)
 8010a8c:	f005 fa8e 	bl	8015fac <iprintf>
  *oversize = p->len - length;
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	895a      	ldrh	r2, [r3, #10]
 8010a94:	89bb      	ldrh	r3, [r7, #12]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	89ba      	ldrh	r2, [r7, #12]
 8010aa2:	811a      	strh	r2, [r3, #8]
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	891a      	ldrh	r2, [r3, #8]
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	815a      	strh	r2, [r3, #10]
  return p;
 8010aac:	693b      	ldr	r3, [r7, #16]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3718      	adds	r7, #24
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	08019364 	.word	0x08019364
 8010abc:	0801941c 	.word	0x0801941c
 8010ac0:	080193b8 	.word	0x080193b8
 8010ac4:	08019440 	.word	0x08019440
 8010ac8:	08019460 	.word	0x08019460

08010acc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d106      	bne.n	8010aec <tcp_write_checks+0x20>
 8010ade:	4b33      	ldr	r3, [pc, #204]	; (8010bac <tcp_write_checks+0xe0>)
 8010ae0:	f240 1233 	movw	r2, #307	; 0x133
 8010ae4:	4932      	ldr	r1, [pc, #200]	; (8010bb0 <tcp_write_checks+0xe4>)
 8010ae6:	4833      	ldr	r0, [pc, #204]	; (8010bb4 <tcp_write_checks+0xe8>)
 8010ae8:	f005 fa60 	bl	8015fac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	7d1b      	ldrb	r3, [r3, #20]
 8010af0:	2b04      	cmp	r3, #4
 8010af2:	d00e      	beq.n	8010b12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010af8:	2b07      	cmp	r3, #7
 8010afa:	d00a      	beq.n	8010b12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d006      	beq.n	8010b12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010b08:	2b03      	cmp	r3, #3
 8010b0a:	d002      	beq.n	8010b12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010b0c:	f06f 030a 	mvn.w	r3, #10
 8010b10:	e048      	b.n	8010ba4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010b12:	887b      	ldrh	r3, [r7, #2]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <tcp_write_checks+0x50>
    return ERR_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e043      	b.n	8010ba4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010b22:	887a      	ldrh	r2, [r7, #2]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d909      	bls.n	8010b3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	8b5b      	ldrh	r3, [r3, #26]
 8010b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b36:	f04f 33ff 	mov.w	r3, #4294967295
 8010b3a:	e033      	b.n	8010ba4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b42:	2b08      	cmp	r3, #8
 8010b44:	d909      	bls.n	8010b5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8b5b      	ldrh	r3, [r3, #26]
 8010b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b4e:	b29a      	uxth	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295
 8010b58:	e024      	b.n	8010ba4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00f      	beq.n	8010b84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d11a      	bne.n	8010ba2 <tcp_write_checks+0xd6>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d116      	bne.n	8010ba2 <tcp_write_checks+0xd6>
 8010b74:	4b0d      	ldr	r3, [pc, #52]	; (8010bac <tcp_write_checks+0xe0>)
 8010b76:	f240 1255 	movw	r2, #341	; 0x155
 8010b7a:	490f      	ldr	r1, [pc, #60]	; (8010bb8 <tcp_write_checks+0xec>)
 8010b7c:	480d      	ldr	r0, [pc, #52]	; (8010bb4 <tcp_write_checks+0xe8>)
 8010b7e:	f005 fa15 	bl	8015fac <iprintf>
 8010b82:	e00e      	b.n	8010ba2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d103      	bne.n	8010b94 <tcp_write_checks+0xc8>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d006      	beq.n	8010ba2 <tcp_write_checks+0xd6>
 8010b94:	4b05      	ldr	r3, [pc, #20]	; (8010bac <tcp_write_checks+0xe0>)
 8010b96:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010b9a:	4908      	ldr	r1, [pc, #32]	; (8010bbc <tcp_write_checks+0xf0>)
 8010b9c:	4805      	ldr	r0, [pc, #20]	; (8010bb4 <tcp_write_checks+0xe8>)
 8010b9e:	f005 fa05 	bl	8015fac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010ba2:	2300      	movs	r3, #0
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	08019364 	.word	0x08019364
 8010bb0:	08019474 	.word	0x08019474
 8010bb4:	080193b8 	.word	0x080193b8
 8010bb8:	08019494 	.word	0x08019494
 8010bbc:	080194d0 	.word	0x080194d0

08010bc0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010bc0:	b590      	push	{r4, r7, lr}
 8010bc2:	b09b      	sub	sp, #108	; 0x6c
 8010bc4:	af04      	add	r7, sp, #16
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	4611      	mov	r1, r2
 8010bcc:	461a      	mov	r2, r3
 8010bce:	460b      	mov	r3, r1
 8010bd0:	80fb      	strh	r3, [r7, #6]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8010bde:	2300      	movs	r3, #0
 8010be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010be2:	2300      	movs	r3, #0
 8010be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010be6:	2300      	movs	r3, #0
 8010be8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010bea:	2300      	movs	r3, #0
 8010bec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d109      	bne.n	8010c1c <tcp_write+0x5c>
 8010c08:	4ba4      	ldr	r3, [pc, #656]	; (8010e9c <tcp_write+0x2dc>)
 8010c0a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010c0e:	49a4      	ldr	r1, [pc, #656]	; (8010ea0 <tcp_write+0x2e0>)
 8010c10:	48a4      	ldr	r0, [pc, #656]	; (8010ea4 <tcp_write+0x2e4>)
 8010c12:	f005 f9cb 	bl	8015fac <iprintf>
 8010c16:	f06f 030f 	mvn.w	r3, #15
 8010c1a:	e32a      	b.n	8011272 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c22:	085b      	lsrs	r3, r3, #1
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	bf28      	it	cs
 8010c2e:	4613      	movcs	r3, r2
 8010c30:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d102      	bne.n	8010c3e <tcp_write+0x7e>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c3c:	e000      	b.n	8010c40 <tcp_write+0x80>
 8010c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c40:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d109      	bne.n	8010c5c <tcp_write+0x9c>
 8010c48:	4b94      	ldr	r3, [pc, #592]	; (8010e9c <tcp_write+0x2dc>)
 8010c4a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010c4e:	4996      	ldr	r1, [pc, #600]	; (8010ea8 <tcp_write+0x2e8>)
 8010c50:	4894      	ldr	r0, [pc, #592]	; (8010ea4 <tcp_write+0x2e4>)
 8010c52:	f005 f9ab 	bl	8015fac <iprintf>
 8010c56:	f06f 030f 	mvn.w	r3, #15
 8010c5a:	e30a      	b.n	8011272 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010c5c:	88fb      	ldrh	r3, [r7, #6]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f7ff ff33 	bl	8010acc <tcp_write_checks>
 8010c66:	4603      	mov	r3, r0
 8010c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010c6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <tcp_write+0xba>
    return err;
 8010c74:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010c78:	e2fb      	b.n	8011272 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c84:	2300      	movs	r3, #0
 8010c86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 80f6 	beq.w	8010e80 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c98:	653b      	str	r3, [r7, #80]	; 0x50
 8010c9a:	e002      	b.n	8010ca2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1f8      	bne.n	8010c9c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cac:	7a9b      	ldrb	r3, [r3, #10]
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	f003 0304 	and.w	r3, r3, #4
 8010cb6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010cb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cbc:	891b      	ldrh	r3, [r3, #8]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	8c3b      	ldrh	r3, [r7, #32]
 8010cc2:	440b      	add	r3, r1
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	da06      	bge.n	8010cd6 <tcp_write+0x116>
 8010cc8:	4b74      	ldr	r3, [pc, #464]	; (8010e9c <tcp_write+0x2dc>)
 8010cca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010cce:	4977      	ldr	r1, [pc, #476]	; (8010eac <tcp_write+0x2ec>)
 8010cd0:	4874      	ldr	r0, [pc, #464]	; (8010ea4 <tcp_write+0x2e4>)
 8010cd2:	f005 f96b 	bl	8015fac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd8:	891a      	ldrh	r2, [r3, #8]
 8010cda:	8c3b      	ldrh	r3, [r7, #32]
 8010cdc:	4413      	add	r3, r2
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010cec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010cee:	8a7b      	ldrh	r3, [r7, #18]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d026      	beq.n	8010d42 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010cf4:	8a7b      	ldrh	r3, [r7, #18]
 8010cf6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d206      	bcs.n	8010d0a <tcp_write+0x14a>
 8010cfc:	4b67      	ldr	r3, [pc, #412]	; (8010e9c <tcp_write+0x2dc>)
 8010cfe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010d02:	496b      	ldr	r1, [pc, #428]	; (8010eb0 <tcp_write+0x2f0>)
 8010d04:	4867      	ldr	r0, [pc, #412]	; (8010ea4 <tcp_write+0x2e4>)
 8010d06:	f005 f951 	bl	8015fac <iprintf>
      seg = last_unsent;
 8010d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010d0e:	8a7b      	ldrh	r3, [r7, #18]
 8010d10:	88fa      	ldrh	r2, [r7, #6]
 8010d12:	4293      	cmp	r3, r2
 8010d14:	bf28      	it	cs
 8010d16:	4613      	movcs	r3, r2
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	bf28      	it	cs
 8010d20:	4613      	movcs	r3, r2
 8010d22:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010d30:	8a7a      	ldrh	r2, [r7, #18]
 8010d32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d34:	1ad3      	subs	r3, r2, r3
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010d3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010d42:	8a7b      	ldrh	r3, [r7, #18]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00b      	beq.n	8010d60 <tcp_write+0x1a0>
 8010d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d4c:	88fb      	ldrh	r3, [r7, #6]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d006      	beq.n	8010d60 <tcp_write+0x1a0>
 8010d52:	4b52      	ldr	r3, [pc, #328]	; (8010e9c <tcp_write+0x2dc>)
 8010d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d58:	4956      	ldr	r1, [pc, #344]	; (8010eb4 <tcp_write+0x2f4>)
 8010d5a:	4852      	ldr	r0, [pc, #328]	; (8010ea4 <tcp_write+0x2e4>)
 8010d5c:	f005 f926 	bl	8015fac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010d60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d64:	88fb      	ldrh	r3, [r7, #6]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	f080 8167 	bcs.w	801103a <tcp_write+0x47a>
 8010d6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f000 8163 	beq.w	801103a <tcp_write+0x47a>
 8010d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d76:	891b      	ldrh	r3, [r3, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f000 815e 	beq.w	801103a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010d7e:	88fa      	ldrh	r2, [r7, #6]
 8010d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d84:	1ad2      	subs	r2, r2, r3
 8010d86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	bfa8      	it	ge
 8010d8c:	4613      	movge	r3, r2
 8010d8e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d92:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010d94:	797b      	ldrb	r3, [r7, #5]
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d027      	beq.n	8010dee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010d9e:	f107 0012 	add.w	r0, r7, #18
 8010da2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010da4:	8bf9      	ldrh	r1, [r7, #30]
 8010da6:	2301      	movs	r3, #1
 8010da8:	9302      	str	r3, [sp, #8]
 8010daa:	797b      	ldrb	r3, [r7, #5]
 8010dac:	9301      	str	r3, [sp, #4]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4603      	mov	r3, r0
 8010db4:	2000      	movs	r0, #0
 8010db6:	f7ff fe0f 	bl	80109d8 <tcp_pbuf_prealloc>
 8010dba:	6578      	str	r0, [r7, #84]	; 0x54
 8010dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f000 8225 	beq.w	801120e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dc6:	6858      	ldr	r0, [r3, #4]
 8010dc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	4413      	add	r3, r2
 8010dd0:	8bfa      	ldrh	r2, [r7, #30]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f005 f810 	bl	8015df8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010dd8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010dda:	f7fb f975 	bl	800c0c8 <pbuf_clen>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010de6:	4413      	add	r3, r2
 8010de8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010dec:	e041      	b.n	8010e72 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	637b      	str	r3, [r7, #52]	; 0x34
 8010df4:	e002      	b.n	8010dfc <tcp_write+0x23c>
 8010df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8010dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1f8      	bne.n	8010df6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e06:	7b1b      	ldrb	r3, [r3, #12]
 8010e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d115      	bne.n	8010e3c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e16:	8952      	ldrh	r2, [r2, #10]
 8010e18:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e1a:	68ba      	ldr	r2, [r7, #8]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d10d      	bne.n	8010e3c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d006      	beq.n	8010e36 <tcp_write+0x276>
 8010e28:	4b1c      	ldr	r3, [pc, #112]	; (8010e9c <tcp_write+0x2dc>)
 8010e2a:	f240 2231 	movw	r2, #561	; 0x231
 8010e2e:	4922      	ldr	r1, [pc, #136]	; (8010eb8 <tcp_write+0x2f8>)
 8010e30:	481c      	ldr	r0, [pc, #112]	; (8010ea4 <tcp_write+0x2e4>)
 8010e32:	f005 f8bb 	bl	8015fac <iprintf>
          extendlen = seglen;
 8010e36:	8bfb      	ldrh	r3, [r7, #30]
 8010e38:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010e3a:	e01a      	b.n	8010e72 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010e3c:	8bfb      	ldrh	r3, [r7, #30]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	4619      	mov	r1, r3
 8010e42:	2000      	movs	r0, #0
 8010e44:	f7fa fdce 	bl	800b9e4 <pbuf_alloc>
 8010e48:	6578      	str	r0, [r7, #84]	; 0x54
 8010e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 81e0 	beq.w	8011212 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	441a      	add	r2, r3
 8010e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e5c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010e5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e60:	f7fb f932 	bl	800c0c8 <pbuf_clen>
 8010e64:	4603      	mov	r3, r0
 8010e66:	461a      	mov	r2, r3
 8010e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e6c:	4413      	add	r3, r2
 8010e6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010e72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e76:	8bfb      	ldrh	r3, [r7, #30]
 8010e78:	4413      	add	r3, r2
 8010e7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010e7e:	e0dc      	b.n	801103a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f000 80d7 	beq.w	801103a <tcp_write+0x47a>
 8010e8c:	4b03      	ldr	r3, [pc, #12]	; (8010e9c <tcp_write+0x2dc>)
 8010e8e:	f240 224a 	movw	r2, #586	; 0x24a
 8010e92:	490a      	ldr	r1, [pc, #40]	; (8010ebc <tcp_write+0x2fc>)
 8010e94:	4803      	ldr	r0, [pc, #12]	; (8010ea4 <tcp_write+0x2e4>)
 8010e96:	f005 f889 	bl	8015fac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010e9a:	e0ce      	b.n	801103a <tcp_write+0x47a>
 8010e9c:	08019364 	.word	0x08019364
 8010ea0:	08019504 	.word	0x08019504
 8010ea4:	080193b8 	.word	0x080193b8
 8010ea8:	0801951c 	.word	0x0801951c
 8010eac:	08019550 	.word	0x08019550
 8010eb0:	08019568 	.word	0x08019568
 8010eb4:	08019588 	.word	0x08019588
 8010eb8:	080195a8 	.word	0x080195a8
 8010ebc:	080195d4 	.word	0x080195d4
    struct pbuf *p;
    u16_t left = len - pos;
 8010ec0:	88fa      	ldrh	r2, [r7, #6]
 8010ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010eca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010ed6:	8b7a      	ldrh	r2, [r7, #26]
 8010ed8:	8bbb      	ldrh	r3, [r7, #28]
 8010eda:	4293      	cmp	r3, r2
 8010edc:	bf28      	it	cs
 8010ede:	4613      	movcs	r3, r2
 8010ee0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ee2:	797b      	ldrb	r3, [r7, #5]
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d036      	beq.n	8010f5a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010eec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	8b3b      	ldrh	r3, [r7, #24]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	b299      	uxth	r1, r3
 8010ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	bf0c      	ite	eq
 8010efe:	2301      	moveq	r3, #1
 8010f00:	2300      	movne	r3, #0
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	f107 0012 	add.w	r0, r7, #18
 8010f08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f0a:	9302      	str	r3, [sp, #8]
 8010f0c:	797b      	ldrb	r3, [r7, #5]
 8010f0e:	9301      	str	r3, [sp, #4]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	4603      	mov	r3, r0
 8010f16:	2036      	movs	r0, #54	; 0x36
 8010f18:	f7ff fd5e 	bl	80109d8 <tcp_pbuf_prealloc>
 8010f1c:	6338      	str	r0, [r7, #48]	; 0x30
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 8178 	beq.w	8011216 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f28:	895b      	ldrh	r3, [r3, #10]
 8010f2a:	8b3a      	ldrh	r2, [r7, #24]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d906      	bls.n	8010f3e <tcp_write+0x37e>
 8010f30:	4b8c      	ldr	r3, [pc, #560]	; (8011164 <tcp_write+0x5a4>)
 8010f32:	f240 2266 	movw	r2, #614	; 0x266
 8010f36:	498c      	ldr	r1, [pc, #560]	; (8011168 <tcp_write+0x5a8>)
 8010f38:	488c      	ldr	r0, [pc, #560]	; (801116c <tcp_write+0x5ac>)
 8010f3a:	f005 f837 	bl	8015fac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	685a      	ldr	r2, [r3, #4]
 8010f42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f46:	18d0      	adds	r0, r2, r3
 8010f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	4413      	add	r3, r2
 8010f50:	8b3a      	ldrh	r2, [r7, #24]
 8010f52:	4619      	mov	r1, r3
 8010f54:	f004 ff50 	bl	8015df8 <memcpy>
 8010f58:	e02f      	b.n	8010fba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010f5a:	8a7b      	ldrh	r3, [r7, #18]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d006      	beq.n	8010f6e <tcp_write+0x3ae>
 8010f60:	4b80      	ldr	r3, [pc, #512]	; (8011164 <tcp_write+0x5a4>)
 8010f62:	f240 2271 	movw	r2, #625	; 0x271
 8010f66:	4982      	ldr	r1, [pc, #520]	; (8011170 <tcp_write+0x5b0>)
 8010f68:	4880      	ldr	r0, [pc, #512]	; (801116c <tcp_write+0x5ac>)
 8010f6a:	f005 f81f 	bl	8015fac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010f6e:	8b3b      	ldrh	r3, [r7, #24]
 8010f70:	2201      	movs	r2, #1
 8010f72:	4619      	mov	r1, r3
 8010f74:	2036      	movs	r0, #54	; 0x36
 8010f76:	f7fa fd35 	bl	800b9e4 <pbuf_alloc>
 8010f7a:	6178      	str	r0, [r7, #20]
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 814b 	beq.w	801121a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	441a      	add	r2, r3
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010f90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	2036      	movs	r0, #54	; 0x36
 8010f9e:	f7fa fd21 	bl	800b9e4 <pbuf_alloc>
 8010fa2:	6338      	str	r0, [r7, #48]	; 0x30
 8010fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d103      	bne.n	8010fb2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010faa:	6978      	ldr	r0, [r7, #20]
 8010fac:	f7fa fffe 	bl	800bfac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010fb0:	e136      	b.n	8011220 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010fb2:	6979      	ldr	r1, [r7, #20]
 8010fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fb6:	f7fb f8c7 	bl	800c148 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fbc:	f7fb f884 	bl	800c0c8 <pbuf_clen>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010fc8:	4413      	add	r3, r2
 8010fca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010fd2:	2b09      	cmp	r3, #9
 8010fd4:	d903      	bls.n	8010fde <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fd8:	f7fa ffe8 	bl	800bfac <pbuf_free>
      goto memerr;
 8010fdc:	e120      	b.n	8011220 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fe6:	441a      	add	r2, r3
 8010fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7ff fc51 	bl	801089c <tcp_create_segment>
 8010ffa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 810d 	beq.w	801121e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011006:	2b00      	cmp	r3, #0
 8011008:	d102      	bne.n	8011010 <tcp_write+0x450>
      queue = seg;
 801100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100c:	647b      	str	r3, [r7, #68]	; 0x44
 801100e:	e00c      	b.n	801102a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_write+0x464>
 8011016:	4b53      	ldr	r3, [pc, #332]	; (8011164 <tcp_write+0x5a4>)
 8011018:	f240 22ab 	movw	r2, #683	; 0x2ab
 801101c:	4955      	ldr	r1, [pc, #340]	; (8011174 <tcp_write+0x5b4>)
 801101e:	4853      	ldr	r0, [pc, #332]	; (801116c <tcp_write+0x5ac>)
 8011020:	f004 ffc4 	bl	8015fac <iprintf>
      prev_seg->next = seg;
 8011024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011028:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801102e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011032:	8b3b      	ldrh	r3, [r7, #24]
 8011034:	4413      	add	r3, r2
 8011036:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801103a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801103e:	88fb      	ldrh	r3, [r7, #6]
 8011040:	429a      	cmp	r2, r3
 8011042:	f4ff af3d 	bcc.w	8010ec0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011046:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011048:	2b00      	cmp	r3, #0
 801104a:	d02c      	beq.n	80110a6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801104c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011052:	e01e      	b.n	8011092 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	891a      	ldrh	r2, [r3, #8]
 8011058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801105a:	4413      	add	r3, r2
 801105c:	b29a      	uxth	r2, r3
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d110      	bne.n	801108c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011070:	8952      	ldrh	r2, [r2, #10]
 8011072:	4413      	add	r3, r2
 8011074:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011076:	68b9      	ldr	r1, [r7, #8]
 8011078:	4618      	mov	r0, r3
 801107a:	f004 febd 	bl	8015df8 <memcpy>
        p->len += oversize_used;
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	895a      	ldrh	r2, [r3, #10]
 8011082:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011084:	4413      	add	r3, r2
 8011086:	b29a      	uxth	r2, r3
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1dd      	bne.n	8011054 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109a:	891a      	ldrh	r2, [r3, #8]
 801109c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801109e:	4413      	add	r3, r2
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110a4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80110a6:	8a7a      	ldrh	r2, [r7, #18]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80110ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d018      	beq.n	80110e6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80110b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d106      	bne.n	80110c8 <tcp_write+0x508>
 80110ba:	4b2a      	ldr	r3, [pc, #168]	; (8011164 <tcp_write+0x5a4>)
 80110bc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80110c0:	492d      	ldr	r1, [pc, #180]	; (8011178 <tcp_write+0x5b8>)
 80110c2:	482a      	ldr	r0, [pc, #168]	; (801116c <tcp_write+0x5ac>)
 80110c4:	f004 ff72 	bl	8015fac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80110c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fb f83a 	bl	800c148 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80110d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110d6:	891a      	ldrh	r2, [r3, #8]
 80110d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110da:	891b      	ldrh	r3, [r3, #8]
 80110dc:	4413      	add	r3, r2
 80110de:	b29a      	uxth	r2, r3
 80110e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e2:	811a      	strh	r2, [r3, #8]
 80110e4:	e037      	b.n	8011156 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80110e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d034      	beq.n	8011156 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80110ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d003      	beq.n	80110fa <tcp_write+0x53a>
 80110f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <tcp_write+0x548>
 80110fa:	4b1a      	ldr	r3, [pc, #104]	; (8011164 <tcp_write+0x5a4>)
 80110fc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011100:	491e      	ldr	r1, [pc, #120]	; (801117c <tcp_write+0x5bc>)
 8011102:	481a      	ldr	r0, [pc, #104]	; (801116c <tcp_write+0x5ac>)
 8011104:	f004 ff52 	bl	8015fac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	62bb      	str	r3, [r7, #40]	; 0x28
 801110e:	e009      	b.n	8011124 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	891a      	ldrh	r2, [r3, #8]
 8011114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011116:	4413      	add	r3, r2
 8011118:	b29a      	uxth	r2, r3
 801111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	62bb      	str	r3, [r7, #40]	; 0x28
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1f1      	bne.n	8011110 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112e:	891a      	ldrh	r2, [r3, #8]
 8011130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011132:	4413      	add	r3, r2
 8011134:	b29a      	uxth	r2, r3
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113c:	895a      	ldrh	r2, [r3, #10]
 801113e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011140:	4413      	add	r3, r2
 8011142:	b29a      	uxth	r2, r3
 8011144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011146:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114a:	891a      	ldrh	r2, [r3, #8]
 801114c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801114e:	4413      	add	r3, r2
 8011150:	b29a      	uxth	r2, r3
 8011152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011154:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011158:	2b00      	cmp	r3, #0
 801115a:	d111      	bne.n	8011180 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011160:	66da      	str	r2, [r3, #108]	; 0x6c
 8011162:	e010      	b.n	8011186 <tcp_write+0x5c6>
 8011164:	08019364 	.word	0x08019364
 8011168:	08019604 	.word	0x08019604
 801116c:	080193b8 	.word	0x080193b8
 8011170:	08019644 	.word	0x08019644
 8011174:	08019654 	.word	0x08019654
 8011178:	08019668 	.word	0x08019668
 801117c:	080196a0 	.word	0x080196a0
  } else {
    last_unsent->next = queue;
 8011180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011184:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801118a:	88fb      	ldrh	r3, [r7, #6]
 801118c:	441a      	add	r2, r3
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011198:	88fb      	ldrh	r3, [r7, #6]
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	b29a      	uxth	r2, r3
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80111aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00e      	beq.n	80111d6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d10a      	bne.n	80111d6 <tcp_write+0x616>
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d106      	bne.n	80111d6 <tcp_write+0x616>
 80111c8:	4b2c      	ldr	r3, [pc, #176]	; (801127c <tcp_write+0x6bc>)
 80111ca:	f240 3212 	movw	r2, #786	; 0x312
 80111ce:	492c      	ldr	r1, [pc, #176]	; (8011280 <tcp_write+0x6c0>)
 80111d0:	482c      	ldr	r0, [pc, #176]	; (8011284 <tcp_write+0x6c4>)
 80111d2:	f004 feeb 	bl	8015fac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80111d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d016      	beq.n	801120a <tcp_write+0x64a>
 80111dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d012      	beq.n	801120a <tcp_write+0x64a>
 80111e4:	797b      	ldrb	r3, [r7, #5]
 80111e6:	f003 0302 	and.w	r3, r3, #2
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d10d      	bne.n	801120a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80111ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	899b      	ldrh	r3, [r3, #12]
 80111f4:	b29c      	uxth	r4, r3
 80111f6:	2008      	movs	r0, #8
 80111f8:	f7f9 fb2c 	bl	800a854 <lwip_htons>
 80111fc:	4603      	mov	r3, r0
 80111fe:	461a      	mov	r2, r3
 8011200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	4322      	orrs	r2, r4
 8011206:	b292      	uxth	r2, r2
 8011208:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	e031      	b.n	8011272 <tcp_write+0x6b2>
          goto memerr;
 801120e:	bf00      	nop
 8011210:	e006      	b.n	8011220 <tcp_write+0x660>
            goto memerr;
 8011212:	bf00      	nop
 8011214:	e004      	b.n	8011220 <tcp_write+0x660>
        goto memerr;
 8011216:	bf00      	nop
 8011218:	e002      	b.n	8011220 <tcp_write+0x660>
        goto memerr;
 801121a:	bf00      	nop
 801121c:	e000      	b.n	8011220 <tcp_write+0x660>
      goto memerr;
 801121e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	8b5b      	ldrh	r3, [r3, #26]
 8011224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011228:	b29a      	uxth	r2, r3
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801122e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011234:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011236:	f7fa feb9 	bl	800bfac <pbuf_free>
  }
  if (queue != NULL) {
 801123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011240:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011242:	f7fc fb6f 	bl	800d924 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00e      	beq.n	801126e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011254:	2b00      	cmp	r3, #0
 8011256:	d10a      	bne.n	801126e <tcp_write+0x6ae>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801125c:	2b00      	cmp	r3, #0
 801125e:	d106      	bne.n	801126e <tcp_write+0x6ae>
 8011260:	4b06      	ldr	r3, [pc, #24]	; (801127c <tcp_write+0x6bc>)
 8011262:	f240 3227 	movw	r2, #807	; 0x327
 8011266:	4906      	ldr	r1, [pc, #24]	; (8011280 <tcp_write+0x6c0>)
 8011268:	4806      	ldr	r0, [pc, #24]	; (8011284 <tcp_write+0x6c4>)
 801126a:	f004 fe9f 	bl	8015fac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011272:	4618      	mov	r0, r3
 8011274:	375c      	adds	r7, #92	; 0x5c
 8011276:	46bd      	mov	sp, r7
 8011278:	bd90      	pop	{r4, r7, pc}
 801127a:	bf00      	nop
 801127c:	08019364 	.word	0x08019364
 8011280:	080196d8 	.word	0x080196d8
 8011284:	080193b8 	.word	0x080193b8

08011288 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011288:	b590      	push	{r4, r7, lr}
 801128a:	b08b      	sub	sp, #44	; 0x2c
 801128c:	af02      	add	r7, sp, #8
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011294:	2300      	movs	r3, #0
 8011296:	61fb      	str	r3, [r7, #28]
 8011298:	2300      	movs	r3, #0
 801129a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801129c:	2300      	movs	r3, #0
 801129e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <tcp_split_unsent_seg+0x2c>
 80112a6:	4b95      	ldr	r3, [pc, #596]	; (80114fc <tcp_split_unsent_seg+0x274>)
 80112a8:	f240 324b 	movw	r2, #843	; 0x34b
 80112ac:	4994      	ldr	r1, [pc, #592]	; (8011500 <tcp_split_unsent_seg+0x278>)
 80112ae:	4895      	ldr	r0, [pc, #596]	; (8011504 <tcp_split_unsent_seg+0x27c>)
 80112b0:	f004 fe7c 	bl	8015fac <iprintf>

  useg = pcb->unsent;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d102      	bne.n	80112c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80112c0:	f04f 33ff 	mov.w	r3, #4294967295
 80112c4:	e116      	b.n	80114f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80112c6:	887b      	ldrh	r3, [r7, #2]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d109      	bne.n	80112e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80112cc:	4b8b      	ldr	r3, [pc, #556]	; (80114fc <tcp_split_unsent_seg+0x274>)
 80112ce:	f240 3253 	movw	r2, #851	; 0x353
 80112d2:	498d      	ldr	r1, [pc, #564]	; (8011508 <tcp_split_unsent_seg+0x280>)
 80112d4:	488b      	ldr	r0, [pc, #556]	; (8011504 <tcp_split_unsent_seg+0x27c>)
 80112d6:	f004 fe69 	bl	8015fac <iprintf>
    return ERR_VAL;
 80112da:	f06f 0305 	mvn.w	r3, #5
 80112de:	e109      	b.n	80114f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	891b      	ldrh	r3, [r3, #8]
 80112e4:	887a      	ldrh	r2, [r7, #2]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d301      	bcc.n	80112ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80112ea:	2300      	movs	r3, #0
 80112ec:	e102      	b.n	80114f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112f2:	887a      	ldrh	r2, [r7, #2]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d906      	bls.n	8011306 <tcp_split_unsent_seg+0x7e>
 80112f8:	4b80      	ldr	r3, [pc, #512]	; (80114fc <tcp_split_unsent_seg+0x274>)
 80112fa:	f240 325b 	movw	r2, #859	; 0x35b
 80112fe:	4983      	ldr	r1, [pc, #524]	; (801150c <tcp_split_unsent_seg+0x284>)
 8011300:	4880      	ldr	r0, [pc, #512]	; (8011504 <tcp_split_unsent_seg+0x27c>)
 8011302:	f004 fe53 	bl	8015fac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	891b      	ldrh	r3, [r3, #8]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d106      	bne.n	801131c <tcp_split_unsent_seg+0x94>
 801130e:	4b7b      	ldr	r3, [pc, #492]	; (80114fc <tcp_split_unsent_seg+0x274>)
 8011310:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011314:	497e      	ldr	r1, [pc, #504]	; (8011510 <tcp_split_unsent_seg+0x288>)
 8011316:	487b      	ldr	r0, [pc, #492]	; (8011504 <tcp_split_unsent_seg+0x27c>)
 8011318:	f004 fe48 	bl	8015fac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	7a9b      	ldrb	r3, [r3, #10]
 8011320:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011322:	7bfb      	ldrb	r3, [r7, #15]
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	b2db      	uxtb	r3, r3
 8011328:	f003 0304 	and.w	r3, r3, #4
 801132c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	891a      	ldrh	r2, [r3, #8]
 8011332:	887b      	ldrh	r3, [r7, #2]
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011338:	7bbb      	ldrb	r3, [r7, #14]
 801133a:	b29a      	uxth	r2, r3
 801133c:	89bb      	ldrh	r3, [r7, #12]
 801133e:	4413      	add	r3, r2
 8011340:	b29b      	uxth	r3, r3
 8011342:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011346:	4619      	mov	r1, r3
 8011348:	2036      	movs	r0, #54	; 0x36
 801134a:	f7fa fb4b 	bl	800b9e4 <pbuf_alloc>
 801134e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	2b00      	cmp	r3, #0
 8011354:	f000 80b7 	beq.w	80114c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	891a      	ldrh	r2, [r3, #8]
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	891b      	ldrh	r3, [r3, #8]
 8011362:	1ad3      	subs	r3, r2, r3
 8011364:	b29a      	uxth	r2, r3
 8011366:	887b      	ldrh	r3, [r7, #2]
 8011368:	4413      	add	r3, r2
 801136a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	6858      	ldr	r0, [r3, #4]
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	685a      	ldr	r2, [r3, #4]
 8011374:	7bbb      	ldrb	r3, [r7, #14]
 8011376:	18d1      	adds	r1, r2, r3
 8011378:	897b      	ldrh	r3, [r7, #10]
 801137a:	89ba      	ldrh	r2, [r7, #12]
 801137c:	f7fb f80c 	bl	800c398 <pbuf_copy_partial>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	89bb      	ldrh	r3, [r7, #12]
 8011386:	4293      	cmp	r3, r2
 8011388:	f040 809f 	bne.w	80114ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	899b      	ldrh	r3, [r3, #12]
 8011392:	b29b      	uxth	r3, r3
 8011394:	4618      	mov	r0, r3
 8011396:	f7f9 fa5d 	bl	800a854 <lwip_htons>
 801139a:	4603      	mov	r3, r0
 801139c:	b2db      	uxtb	r3, r3
 801139e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80113a4:	2300      	movs	r3, #0
 80113a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80113a8:	7efb      	ldrb	r3, [r7, #27]
 80113aa:	f003 0308 	and.w	r3, r3, #8
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80113b2:	7efb      	ldrb	r3, [r7, #27]
 80113b4:	f023 0308 	bic.w	r3, r3, #8
 80113b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80113ba:	7ebb      	ldrb	r3, [r7, #26]
 80113bc:	f043 0308 	orr.w	r3, r3, #8
 80113c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80113c2:	7efb      	ldrb	r3, [r7, #27]
 80113c4:	f003 0301 	and.w	r3, r3, #1
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d007      	beq.n	80113dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80113cc:	7efb      	ldrb	r3, [r7, #27]
 80113ce:	f023 0301 	bic.w	r3, r3, #1
 80113d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80113d4:	7ebb      	ldrb	r3, [r7, #26]
 80113d6:	f043 0301 	orr.w	r3, r3, #1
 80113da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7f9 fa4b 	bl	800a87e <lwip_htonl>
 80113e8:	4602      	mov	r2, r0
 80113ea:	887b      	ldrh	r3, [r7, #2]
 80113ec:	18d1      	adds	r1, r2, r3
 80113ee:	7eba      	ldrb	r2, [r7, #26]
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	9300      	str	r3, [sp, #0]
 80113f4:	460b      	mov	r3, r1
 80113f6:	6939      	ldr	r1, [r7, #16]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff fa4f 	bl	801089c <tcp_create_segment>
 80113fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d063      	beq.n	80114ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	4618      	mov	r0, r3
 801140c:	f7fa fe5c 	bl	800c0c8 <pbuf_clen>
 8011410:	4603      	mov	r3, r0
 8011412:	461a      	mov	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801141a:	1a9b      	subs	r3, r3, r2
 801141c:	b29a      	uxth	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	6858      	ldr	r0, [r3, #4]
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	891a      	ldrh	r2, [r3, #8]
 801142e:	89bb      	ldrh	r3, [r7, #12]
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	b29b      	uxth	r3, r3
 8011434:	4619      	mov	r1, r3
 8011436:	f7fa fc33 	bl	800bca0 <pbuf_realloc>
  useg->len -= remainder;
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	891a      	ldrh	r2, [r3, #8]
 801143e:	89bb      	ldrh	r3, [r7, #12]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	b29a      	uxth	r2, r3
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	899b      	ldrh	r3, [r3, #12]
 801144e:	b29c      	uxth	r4, r3
 8011450:	7efb      	ldrb	r3, [r7, #27]
 8011452:	b29b      	uxth	r3, r3
 8011454:	4618      	mov	r0, r3
 8011456:	f7f9 f9fd 	bl	800a854 <lwip_htons>
 801145a:	4603      	mov	r3, r0
 801145c:	461a      	mov	r2, r3
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	4322      	orrs	r2, r4
 8011464:	b292      	uxth	r2, r2
 8011466:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	4618      	mov	r0, r3
 801146e:	f7fa fe2b 	bl	800c0c8 <pbuf_clen>
 8011472:	4603      	mov	r3, r0
 8011474:	461a      	mov	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801147c:	4413      	add	r3, r2
 801147e:	b29a      	uxth	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	4618      	mov	r0, r3
 801148c:	f7fa fe1c 	bl	800c0c8 <pbuf_clen>
 8011490:	4603      	mov	r3, r0
 8011492:	461a      	mov	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801149a:	4413      	add	r3, r2
 801149c:	b29a      	uxth	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	69fa      	ldr	r2, [r7, #28]
 80114b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d103      	bne.n	80114c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80114c2:	2300      	movs	r3, #0
 80114c4:	e016      	b.n	80114f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80114c6:	bf00      	nop
 80114c8:	e002      	b.n	80114d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80114ca:	bf00      	nop
 80114cc:	e000      	b.n	80114d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80114ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d006      	beq.n	80114e4 <tcp_split_unsent_seg+0x25c>
 80114d6:	4b09      	ldr	r3, [pc, #36]	; (80114fc <tcp_split_unsent_seg+0x274>)
 80114d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80114dc:	490d      	ldr	r1, [pc, #52]	; (8011514 <tcp_split_unsent_seg+0x28c>)
 80114de:	4809      	ldr	r0, [pc, #36]	; (8011504 <tcp_split_unsent_seg+0x27c>)
 80114e0:	f004 fd64 	bl	8015fac <iprintf>
  if (p != NULL) {
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80114ea:	6938      	ldr	r0, [r7, #16]
 80114ec:	f7fa fd5e 	bl	800bfac <pbuf_free>
  }

  return ERR_MEM;
 80114f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3724      	adds	r7, #36	; 0x24
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd90      	pop	{r4, r7, pc}
 80114fc:	08019364 	.word	0x08019364
 8011500:	080196f8 	.word	0x080196f8
 8011504:	080193b8 	.word	0x080193b8
 8011508:	0801971c 	.word	0x0801971c
 801150c:	08019740 	.word	0x08019740
 8011510:	08019750 	.word	0x08019750
 8011514:	08019760 	.word	0x08019760

08011518 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d106      	bne.n	8011534 <tcp_send_fin+0x1c>
 8011526:	4b21      	ldr	r3, [pc, #132]	; (80115ac <tcp_send_fin+0x94>)
 8011528:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801152c:	4920      	ldr	r1, [pc, #128]	; (80115b0 <tcp_send_fin+0x98>)
 801152e:	4821      	ldr	r0, [pc, #132]	; (80115b4 <tcp_send_fin+0x9c>)
 8011530:	f004 fd3c 	bl	8015fac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011538:	2b00      	cmp	r3, #0
 801153a:	d02e      	beq.n	801159a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	e002      	b.n	801154a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1f8      	bne.n	8011544 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	899b      	ldrh	r3, [r3, #12]
 8011558:	b29b      	uxth	r3, r3
 801155a:	4618      	mov	r0, r3
 801155c:	f7f9 f97a 	bl	800a854 <lwip_htons>
 8011560:	4603      	mov	r3, r0
 8011562:	b2db      	uxtb	r3, r3
 8011564:	f003 0307 	and.w	r3, r3, #7
 8011568:	2b00      	cmp	r3, #0
 801156a:	d116      	bne.n	801159a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	899b      	ldrh	r3, [r3, #12]
 8011572:	b29c      	uxth	r4, r3
 8011574:	2001      	movs	r0, #1
 8011576:	f7f9 f96d 	bl	800a854 <lwip_htons>
 801157a:	4603      	mov	r3, r0
 801157c:	461a      	mov	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	4322      	orrs	r2, r4
 8011584:	b292      	uxth	r2, r2
 8011586:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8b5b      	ldrh	r3, [r3, #26]
 801158c:	f043 0320 	orr.w	r3, r3, #32
 8011590:	b29a      	uxth	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011596:	2300      	movs	r3, #0
 8011598:	e004      	b.n	80115a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801159a:	2101      	movs	r1, #1
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 f80b 	bl	80115b8 <tcp_enqueue_flags>
 80115a2:	4603      	mov	r3, r0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd90      	pop	{r4, r7, pc}
 80115ac:	08019364 	.word	0x08019364
 80115b0:	0801976c 	.word	0x0801976c
 80115b4:	080193b8 	.word	0x080193b8

080115b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af02      	add	r7, sp, #8
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	460b      	mov	r3, r1
 80115c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80115c4:	2300      	movs	r3, #0
 80115c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80115cc:	78fb      	ldrb	r3, [r7, #3]
 80115ce:	f003 0303 	and.w	r3, r3, #3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <tcp_enqueue_flags+0x2c>
 80115d6:	4b67      	ldr	r3, [pc, #412]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 80115d8:	f240 4211 	movw	r2, #1041	; 0x411
 80115dc:	4966      	ldr	r1, [pc, #408]	; (8011778 <tcp_enqueue_flags+0x1c0>)
 80115de:	4867      	ldr	r0, [pc, #412]	; (801177c <tcp_enqueue_flags+0x1c4>)
 80115e0:	f004 fce4 	bl	8015fac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d106      	bne.n	80115f8 <tcp_enqueue_flags+0x40>
 80115ea:	4b62      	ldr	r3, [pc, #392]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 80115ec:	f240 4213 	movw	r2, #1043	; 0x413
 80115f0:	4963      	ldr	r1, [pc, #396]	; (8011780 <tcp_enqueue_flags+0x1c8>)
 80115f2:	4862      	ldr	r0, [pc, #392]	; (801177c <tcp_enqueue_flags+0x1c4>)
 80115f4:	f004 fcda 	bl	8015fac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80115f8:	78fb      	ldrb	r3, [r7, #3]
 80115fa:	f003 0302 	and.w	r3, r3, #2
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011602:	2301      	movs	r3, #1
 8011604:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011606:	7ffb      	ldrb	r3, [r7, #31]
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	b2db      	uxtb	r3, r3
 801160c:	f003 0304 	and.w	r3, r3, #4
 8011610:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011612:	7dfb      	ldrb	r3, [r7, #23]
 8011614:	b29b      	uxth	r3, r3
 8011616:	f44f 7220 	mov.w	r2, #640	; 0x280
 801161a:	4619      	mov	r1, r3
 801161c:	2036      	movs	r0, #54	; 0x36
 801161e:	f7fa f9e1 	bl	800b9e4 <pbuf_alloc>
 8011622:	6138      	str	r0, [r7, #16]
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8b5b      	ldrh	r3, [r3, #26]
 801162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011632:	b29a      	uxth	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011638:	f04f 33ff 	mov.w	r3, #4294967295
 801163c:	e095      	b.n	801176a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	895a      	ldrh	r2, [r3, #10]
 8011642:	7dfb      	ldrb	r3, [r7, #23]
 8011644:	b29b      	uxth	r3, r3
 8011646:	429a      	cmp	r2, r3
 8011648:	d206      	bcs.n	8011658 <tcp_enqueue_flags+0xa0>
 801164a:	4b4a      	ldr	r3, [pc, #296]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 801164c:	f240 4239 	movw	r2, #1081	; 0x439
 8011650:	494c      	ldr	r1, [pc, #304]	; (8011784 <tcp_enqueue_flags+0x1cc>)
 8011652:	484a      	ldr	r0, [pc, #296]	; (801177c <tcp_enqueue_flags+0x1c4>)
 8011654:	f004 fcaa 	bl	8015fac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801165c:	78fa      	ldrb	r2, [r7, #3]
 801165e:	7ffb      	ldrb	r3, [r7, #31]
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	460b      	mov	r3, r1
 8011664:	6939      	ldr	r1, [r7, #16]
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff f918 	bl	801089c <tcp_create_segment>
 801166c:	60f8      	str	r0, [r7, #12]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d109      	bne.n	8011688 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8b5b      	ldrh	r3, [r3, #26]
 8011678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167c:	b29a      	uxth	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295
 8011686:	e070      	b.n	801176a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	f003 0303 	and.w	r3, r3, #3
 8011690:	2b00      	cmp	r3, #0
 8011692:	d006      	beq.n	80116a2 <tcp_enqueue_flags+0xea>
 8011694:	4b37      	ldr	r3, [pc, #220]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 8011696:	f240 4242 	movw	r2, #1090	; 0x442
 801169a:	493b      	ldr	r1, [pc, #236]	; (8011788 <tcp_enqueue_flags+0x1d0>)
 801169c:	4837      	ldr	r0, [pc, #220]	; (801177c <tcp_enqueue_flags+0x1c4>)
 801169e:	f004 fc85 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	891b      	ldrh	r3, [r3, #8]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d006      	beq.n	80116b8 <tcp_enqueue_flags+0x100>
 80116aa:	4b32      	ldr	r3, [pc, #200]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 80116ac:	f240 4243 	movw	r2, #1091	; 0x443
 80116b0:	4936      	ldr	r1, [pc, #216]	; (801178c <tcp_enqueue_flags+0x1d4>)
 80116b2:	4832      	ldr	r0, [pc, #200]	; (801177c <tcp_enqueue_flags+0x1c4>)
 80116b4:	f004 fc7a 	bl	8015fac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d103      	bne.n	80116c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80116c6:	e00d      	b.n	80116e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116cc:	61bb      	str	r3, [r7, #24]
 80116ce:	e002      	b.n	80116d6 <tcp_enqueue_flags+0x11e>
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	61bb      	str	r3, [r7, #24]
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d1f8      	bne.n	80116d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80116ec:	78fb      	ldrb	r3, [r7, #3]
 80116ee:	f003 0302 	and.w	r3, r3, #2
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d104      	bne.n	8011700 <tcp_enqueue_flags+0x148>
 80116f6:	78fb      	ldrb	r3, [r7, #3]
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d004      	beq.n	801170a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011704:	1c5a      	adds	r2, r3, #1
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801170a:	78fb      	ldrb	r3, [r7, #3]
 801170c:	f003 0301 	and.w	r3, r3, #1
 8011710:	2b00      	cmp	r3, #0
 8011712:	d006      	beq.n	8011722 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8b5b      	ldrh	r3, [r3, #26]
 8011718:	f043 0320 	orr.w	r3, r3, #32
 801171c:	b29a      	uxth	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	4618      	mov	r0, r3
 8011728:	f7fa fcce 	bl	800c0c8 <pbuf_clen>
 801172c:	4603      	mov	r3, r0
 801172e:	461a      	mov	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011736:	4413      	add	r3, r2
 8011738:	b29a      	uxth	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00e      	beq.n	8011768 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <tcp_enqueue_flags+0x1b0>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <tcp_enqueue_flags+0x1b0>
 801175a:	4b06      	ldr	r3, [pc, #24]	; (8011774 <tcp_enqueue_flags+0x1bc>)
 801175c:	f240 4265 	movw	r2, #1125	; 0x465
 8011760:	490b      	ldr	r1, [pc, #44]	; (8011790 <tcp_enqueue_flags+0x1d8>)
 8011762:	4806      	ldr	r0, [pc, #24]	; (801177c <tcp_enqueue_flags+0x1c4>)
 8011764:	f004 fc22 	bl	8015fac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	3720      	adds	r7, #32
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	08019364 	.word	0x08019364
 8011778:	08019788 	.word	0x08019788
 801177c:	080193b8 	.word	0x080193b8
 8011780:	080197e0 	.word	0x080197e0
 8011784:	08019800 	.word	0x08019800
 8011788:	0801983c 	.word	0x0801983c
 801178c:	08019854 	.word	0x08019854
 8011790:	08019880 	.word	0x08019880

08011794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011794:	b5b0      	push	{r4, r5, r7, lr}
 8011796:	b08a      	sub	sp, #40	; 0x28
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <tcp_output+0x1c>
 80117a2:	4b9e      	ldr	r3, [pc, #632]	; (8011a1c <tcp_output+0x288>)
 80117a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80117a8:	499d      	ldr	r1, [pc, #628]	; (8011a20 <tcp_output+0x28c>)
 80117aa:	489e      	ldr	r0, [pc, #632]	; (8011a24 <tcp_output+0x290>)
 80117ac:	f004 fbfe 	bl	8015fac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7d1b      	ldrb	r3, [r3, #20]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d106      	bne.n	80117c6 <tcp_output+0x32>
 80117b8:	4b98      	ldr	r3, [pc, #608]	; (8011a1c <tcp_output+0x288>)
 80117ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80117be:	499a      	ldr	r1, [pc, #616]	; (8011a28 <tcp_output+0x294>)
 80117c0:	4898      	ldr	r0, [pc, #608]	; (8011a24 <tcp_output+0x290>)
 80117c2:	f004 fbf3 	bl	8015fac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80117c6:	4b99      	ldr	r3, [pc, #612]	; (8011a2c <tcp_output+0x298>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d101      	bne.n	80117d4 <tcp_output+0x40>
    return ERR_OK;
 80117d0:	2300      	movs	r3, #0
 80117d2:	e1ce      	b.n	8011b72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117e0:	4293      	cmp	r3, r2
 80117e2:	bf28      	it	cs
 80117e4:	4613      	movcs	r3, r2
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10b      	bne.n	801180e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	8b5b      	ldrh	r3, [r3, #26]
 80117fa:	f003 0302 	and.w	r3, r3, #2
 80117fe:	2b00      	cmp	r3, #0
 8011800:	f000 81aa 	beq.w	8011b58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 fdcb 	bl	80123a0 <tcp_send_empty_ack>
 801180a:	4603      	mov	r3, r0
 801180c:	e1b1      	b.n	8011b72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801180e:	6879      	ldr	r1, [r7, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	461a      	mov	r2, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7ff f824 	bl	8010864 <tcp_route>
 801181c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d102      	bne.n	801182a <tcp_output+0x96>
    return ERR_RTE;
 8011824:	f06f 0303 	mvn.w	r3, #3
 8011828:	e1a3      	b.n	8011b72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d003      	beq.n	8011838 <tcp_output+0xa4>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d111      	bne.n	801185c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d002      	beq.n	8011844 <tcp_output+0xb0>
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	3304      	adds	r3, #4
 8011842:	e000      	b.n	8011846 <tcp_output+0xb2>
 8011844:	2300      	movs	r3, #0
 8011846:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d102      	bne.n	8011854 <tcp_output+0xc0>
      return ERR_RTE;
 801184e:	f06f 0303 	mvn.w	r3, #3
 8011852:	e18e      	b.n	8011b72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	4618      	mov	r0, r3
 8011864:	f7f9 f80b 	bl	800a87e <lwip_htonl>
 8011868:	4602      	mov	r2, r0
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011872:	8912      	ldrh	r2, [r2, #8]
 8011874:	4413      	add	r3, r2
 8011876:	69ba      	ldr	r2, [r7, #24]
 8011878:	429a      	cmp	r2, r3
 801187a:	d227      	bcs.n	80118cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011882:	461a      	mov	r2, r3
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	4293      	cmp	r3, r2
 8011888:	d114      	bne.n	80118b4 <tcp_output+0x120>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801188e:	2b00      	cmp	r3, #0
 8011890:	d110      	bne.n	80118b4 <tcp_output+0x120>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10b      	bne.n	80118b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2200      	movs	r2, #0
 80118a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2201      	movs	r2, #1
 80118a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	8b5b      	ldrh	r3, [r3, #26]
 80118b8:	f003 0302 	and.w	r3, r3, #2
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f000 814d 	beq.w	8011b5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fd6c 	bl	80123a0 <tcp_send_empty_ack>
 80118c8:	4603      	mov	r3, r0
 80118ca:	e152      	b.n	8011b72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 811c 	beq.w	8011b1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80118e2:	e002      	b.n	80118ea <tcp_output+0x156>
 80118e4:	6a3b      	ldr	r3, [r7, #32]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	623b      	str	r3, [r7, #32]
 80118ea:	6a3b      	ldr	r3, [r7, #32]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1f8      	bne.n	80118e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80118f2:	e112      	b.n	8011b1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80118f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	899b      	ldrh	r3, [r3, #12]
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7f8 ffa9 	bl	800a854 <lwip_htons>
 8011902:	4603      	mov	r3, r0
 8011904:	b2db      	uxtb	r3, r3
 8011906:	f003 0304 	and.w	r3, r3, #4
 801190a:	2b00      	cmp	r3, #0
 801190c:	d006      	beq.n	801191c <tcp_output+0x188>
 801190e:	4b43      	ldr	r3, [pc, #268]	; (8011a1c <tcp_output+0x288>)
 8011910:	f240 5236 	movw	r2, #1334	; 0x536
 8011914:	4946      	ldr	r1, [pc, #280]	; (8011a30 <tcp_output+0x29c>)
 8011916:	4843      	ldr	r0, [pc, #268]	; (8011a24 <tcp_output+0x290>)
 8011918:	f004 fb48 	bl	8015fac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01f      	beq.n	8011964 <tcp_output+0x1d0>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	8b5b      	ldrh	r3, [r3, #26]
 8011928:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801192c:	2b00      	cmp	r3, #0
 801192e:	d119      	bne.n	8011964 <tcp_output+0x1d0>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00b      	beq.n	8011950 <tcp_output+0x1bc>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d110      	bne.n	8011964 <tcp_output+0x1d0>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011946:	891a      	ldrh	r2, [r3, #8]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801194c:	429a      	cmp	r2, r3
 801194e:	d209      	bcs.n	8011964 <tcp_output+0x1d0>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011956:	2b00      	cmp	r3, #0
 8011958:	d004      	beq.n	8011964 <tcp_output+0x1d0>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011960:	2b08      	cmp	r3, #8
 8011962:	d901      	bls.n	8011968 <tcp_output+0x1d4>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <tcp_output+0x1d6>
 8011968:	2300      	movs	r3, #0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d106      	bne.n	801197c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8b5b      	ldrh	r3, [r3, #26]
 8011972:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 80e4 	beq.w	8011b44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	7d1b      	ldrb	r3, [r3, #20]
 8011980:	2b02      	cmp	r3, #2
 8011982:	d00d      	beq.n	80119a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	899b      	ldrh	r3, [r3, #12]
 801198a:	b29c      	uxth	r4, r3
 801198c:	2010      	movs	r0, #16
 801198e:	f7f8 ff61 	bl	800a854 <lwip_htons>
 8011992:	4603      	mov	r3, r0
 8011994:	461a      	mov	r2, r3
 8011996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	4322      	orrs	r2, r4
 801199c:	b292      	uxth	r2, r2
 801199e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80119a0:	697a      	ldr	r2, [r7, #20]
 80119a2:	6879      	ldr	r1, [r7, #4]
 80119a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119a6:	f000 f909 	bl	8011bbc <tcp_output_segment>
 80119aa:	4603      	mov	r3, r0
 80119ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80119ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d009      	beq.n	80119ca <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	8b5b      	ldrh	r3, [r3, #26]
 80119ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119be:	b29a      	uxth	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	835a      	strh	r2, [r3, #26]
      return err;
 80119c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119c8:	e0d3      	b.n	8011b72 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80119ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	7d1b      	ldrb	r3, [r3, #20]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	d006      	beq.n	80119e8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	8b5b      	ldrh	r3, [r3, #26]
 80119de:	f023 0303 	bic.w	r3, r3, #3
 80119e2:	b29a      	uxth	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80119e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7f8 ff45 	bl	800a87e <lwip_htonl>
 80119f4:	4604      	mov	r4, r0
 80119f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f8:	891b      	ldrh	r3, [r3, #8]
 80119fa:	461d      	mov	r5, r3
 80119fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	899b      	ldrh	r3, [r3, #12]
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f8 ff25 	bl	800a854 <lwip_htons>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	f003 0303 	and.w	r3, r3, #3
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00e      	beq.n	8011a34 <tcp_output+0x2a0>
 8011a16:	2301      	movs	r3, #1
 8011a18:	e00d      	b.n	8011a36 <tcp_output+0x2a2>
 8011a1a:	bf00      	nop
 8011a1c:	08019364 	.word	0x08019364
 8011a20:	080198a8 	.word	0x080198a8
 8011a24:	080193b8 	.word	0x080193b8
 8011a28:	080198c0 	.word	0x080198c0
 8011a2c:	2000b5f8 	.word	0x2000b5f8
 8011a30:	080198e8 	.word	0x080198e8
 8011a34:	2300      	movs	r3, #0
 8011a36:	442b      	add	r3, r5
 8011a38:	4423      	add	r3, r4
 8011a3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	da02      	bge.n	8011a4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	891b      	ldrh	r3, [r3, #8]
 8011a52:	461c      	mov	r4, r3
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	899b      	ldrh	r3, [r3, #12]
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f8 fef9 	bl	800a854 <lwip_htons>
 8011a62:	4603      	mov	r3, r0
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	f003 0303 	and.w	r3, r3, #3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d001      	beq.n	8011a72 <tcp_output+0x2de>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e000      	b.n	8011a74 <tcp_output+0x2e0>
 8011a72:	2300      	movs	r3, #0
 8011a74:	4423      	add	r3, r4
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d049      	beq.n	8011b0e <tcp_output+0x37a>
      seg->next = NULL;
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d105      	bne.n	8011a94 <tcp_output+0x300>
        pcb->unacked = seg;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	623b      	str	r3, [r7, #32]
 8011a92:	e03f      	b.n	8011b14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7f8 feef 	bl	800a87e <lwip_htonl>
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	6a3b      	ldr	r3, [r7, #32]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7f8 fee8 	bl	800a87e <lwip_htonl>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	1ae3      	subs	r3, r4, r3
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	da24      	bge.n	8011b00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	3370      	adds	r3, #112	; 0x70
 8011aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011abc:	e002      	b.n	8011ac4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d011      	beq.n	8011af0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7f8 fed2 	bl	800a87e <lwip_htonl>
 8011ada:	4604      	mov	r4, r0
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7f8 fecb 	bl	800a87e <lwip_htonl>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	dbe6      	blt.n	8011abe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	e009      	b.n	8011b14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b00:	6a3b      	ldr	r3, [r7, #32]
 8011b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	623b      	str	r3, [r7, #32]
 8011b0c:	e002      	b.n	8011b14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b10:	f7fb ff1d 	bl	800d94e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b18:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d012      	beq.n	8011b46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7f8 fea9 	bl	800a87e <lwip_htonl>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b36:	8912      	ldrh	r2, [r2, #8]
 8011b38:	4413      	add	r3, r2
  while (seg != NULL &&
 8011b3a:	69ba      	ldr	r2, [r7, #24]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	f4bf aed9 	bcs.w	80118f4 <tcp_output+0x160>
 8011b42:	e000      	b.n	8011b46 <tcp_output+0x3b2>
      break;
 8011b44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d108      	bne.n	8011b60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011b56:	e004      	b.n	8011b62 <tcp_output+0x3ce>
    goto output_done;
 8011b58:	bf00      	nop
 8011b5a:	e002      	b.n	8011b62 <tcp_output+0x3ce>
    goto output_done;
 8011b5c:	bf00      	nop
 8011b5e:	e000      	b.n	8011b62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011b60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	8b5b      	ldrh	r3, [r3, #26]
 8011b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3728      	adds	r7, #40	; 0x28
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bdb0      	pop	{r4, r5, r7, pc}
 8011b7a:	bf00      	nop

08011b7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_output_segment_busy+0x1c>
 8011b8a:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <tcp_output_segment_busy+0x34>)
 8011b8c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011b90:	4908      	ldr	r1, [pc, #32]	; (8011bb4 <tcp_output_segment_busy+0x38>)
 8011b92:	4809      	ldr	r0, [pc, #36]	; (8011bb8 <tcp_output_segment_busy+0x3c>)
 8011b94:	f004 fa0a 	bl	8015fac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	7b9b      	ldrb	r3, [r3, #14]
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d001      	beq.n	8011ba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e000      	b.n	8011ba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	08019364 	.word	0x08019364
 8011bb4:	08019900 	.word	0x08019900
 8011bb8:	080193b8 	.word	0x080193b8

08011bbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011bbc:	b5b0      	push	{r4, r5, r7, lr}
 8011bbe:	b08c      	sub	sp, #48	; 0x30
 8011bc0:	af04      	add	r7, sp, #16
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d106      	bne.n	8011bdc <tcp_output_segment+0x20>
 8011bce:	4b63      	ldr	r3, [pc, #396]	; (8011d5c <tcp_output_segment+0x1a0>)
 8011bd0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011bd4:	4962      	ldr	r1, [pc, #392]	; (8011d60 <tcp_output_segment+0x1a4>)
 8011bd6:	4863      	ldr	r0, [pc, #396]	; (8011d64 <tcp_output_segment+0x1a8>)
 8011bd8:	f004 f9e8 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d106      	bne.n	8011bf0 <tcp_output_segment+0x34>
 8011be2:	4b5e      	ldr	r3, [pc, #376]	; (8011d5c <tcp_output_segment+0x1a0>)
 8011be4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011be8:	495f      	ldr	r1, [pc, #380]	; (8011d68 <tcp_output_segment+0x1ac>)
 8011bea:	485e      	ldr	r0, [pc, #376]	; (8011d64 <tcp_output_segment+0x1a8>)
 8011bec:	f004 f9de 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d106      	bne.n	8011c04 <tcp_output_segment+0x48>
 8011bf6:	4b59      	ldr	r3, [pc, #356]	; (8011d5c <tcp_output_segment+0x1a0>)
 8011bf8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011bfc:	495b      	ldr	r1, [pc, #364]	; (8011d6c <tcp_output_segment+0x1b0>)
 8011bfe:	4859      	ldr	r0, [pc, #356]	; (8011d64 <tcp_output_segment+0x1a8>)
 8011c00:	f004 f9d4 	bl	8015fac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f7ff ffb9 	bl	8011b7c <tcp_output_segment_busy>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d001      	beq.n	8011c14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c10:	2300      	movs	r3, #0
 8011c12:	e09f      	b.n	8011d54 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	68dc      	ldr	r4, [r3, #12]
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7f8 fe2e 	bl	800a87e <lwip_htonl>
 8011c22:	4603      	mov	r3, r0
 8011c24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	68dc      	ldr	r4, [r3, #12]
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7f8 fe10 	bl	800a854 <lwip_htons>
 8011c34:	4603      	mov	r3, r0
 8011c36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c40:	441a      	add	r2, r3
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	3314      	adds	r3, #20
 8011c4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	7a9b      	ldrb	r3, [r3, #10]
 8011c52:	f003 0301 	and.w	r3, r3, #1
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d015      	beq.n	8011c86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	461a      	mov	r2, r3
 8011c60:	6879      	ldr	r1, [r7, #4]
 8011c62:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011c66:	f7fc fa37 	bl	800e0d8 <tcp_eff_send_mss_netif>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011c6e:	8b7b      	ldrh	r3, [r7, #26]
 8011c70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f8 fe02 	bl	800a87e <lwip_htonl>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	3304      	adds	r3, #4
 8011c84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	da02      	bge.n	8011c96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	2200      	movs	r2, #0
 8011c94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d10c      	bne.n	8011cb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011c9e:	4b34      	ldr	r3, [pc, #208]	; (8011d70 <tcp_output_segment+0x1b4>)
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7f8 fde6 	bl	800a87e <lwip_htonl>
 8011cb2:	4602      	mov	r2, r0
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68da      	ldr	r2, [r3, #12]
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	8959      	ldrh	r1, [r3, #10]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	8b3a      	ldrh	r2, [r7, #24]
 8011cd2:	1a8a      	subs	r2, r1, r2
 8011cd4:	b292      	uxth	r2, r2
 8011cd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	8919      	ldrh	r1, [r3, #8]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	8b3a      	ldrh	r2, [r7, #24]
 8011ce4:	1a8a      	subs	r2, r1, r2
 8011ce6:	b292      	uxth	r2, r2
 8011ce8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	68d2      	ldr	r2, [r2, #12]
 8011cf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	741a      	strb	r2, [r3, #16]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	f103 0214 	add.w	r2, r3, #20
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	7a9b      	ldrb	r3, [r3, #10]
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	f003 0304 	and.w	r3, r3, #4
 8011d12:	4413      	add	r3, r2
 8011d14:	69fa      	ldr	r2, [r7, #28]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d006      	beq.n	8011d28 <tcp_output_segment+0x16c>
 8011d1a:	4b10      	ldr	r3, [pc, #64]	; (8011d5c <tcp_output_segment+0x1a0>)
 8011d1c:	f240 621c 	movw	r2, #1564	; 0x61c
 8011d20:	4914      	ldr	r1, [pc, #80]	; (8011d74 <tcp_output_segment+0x1b8>)
 8011d22:	4810      	ldr	r0, [pc, #64]	; (8011d64 <tcp_output_segment+0x1a8>)
 8011d24:	f004 f942 	bl	8015fac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6858      	ldr	r0, [r3, #4]
 8011d2c:	68b9      	ldr	r1, [r7, #8]
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	1d1c      	adds	r4, r3, #4
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	7add      	ldrb	r5, [r3, #11]
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	7a9b      	ldrb	r3, [r3, #10]
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	9202      	str	r2, [sp, #8]
 8011d3e:	2206      	movs	r2, #6
 8011d40:	9201      	str	r2, [sp, #4]
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	462b      	mov	r3, r5
 8011d46:	4622      	mov	r2, r4
 8011d48:	f002 fc1a 	bl	8014580 <ip4_output_if>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3720      	adds	r7, #32
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d5c:	08019364 	.word	0x08019364
 8011d60:	08019928 	.word	0x08019928
 8011d64:	080193b8 	.word	0x080193b8
 8011d68:	08019948 	.word	0x08019948
 8011d6c:	08019968 	.word	0x08019968
 8011d70:	2000b5e8 	.word	0x2000b5e8
 8011d74:	0801998c 	.word	0x0801998c

08011d78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011d78:	b5b0      	push	{r4, r5, r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <tcp_rexmit_rto_prepare+0x1c>
 8011d86:	4b31      	ldr	r3, [pc, #196]	; (8011e4c <tcp_rexmit_rto_prepare+0xd4>)
 8011d88:	f240 6263 	movw	r2, #1635	; 0x663
 8011d8c:	4930      	ldr	r1, [pc, #192]	; (8011e50 <tcp_rexmit_rto_prepare+0xd8>)
 8011d8e:	4831      	ldr	r0, [pc, #196]	; (8011e54 <tcp_rexmit_rto_prepare+0xdc>)
 8011d90:	f004 f90c 	bl	8015fac <iprintf>

  if (pcb->unacked == NULL) {
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011d9c:	f06f 0305 	mvn.w	r3, #5
 8011da0:	e050      	b.n	8011e44 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	e00b      	b.n	8011dc2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f7ff fee6 	bl	8011b7c <tcp_output_segment_busy>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d002      	beq.n	8011dbc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011db6:	f06f 0305 	mvn.w	r3, #5
 8011dba:	e043      	b.n	8011e44 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	60fb      	str	r3, [r7, #12]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d1ef      	bne.n	8011daa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f7ff fed6 	bl	8011b7c <tcp_output_segment_busy>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011dd6:	f06f 0305 	mvn.w	r3, #5
 8011dda:	e033      	b.n	8011e44 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2200      	movs	r2, #0
 8011df0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	8b5b      	ldrh	r3, [r3, #26]
 8011df6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7f8 fd39 	bl	800a87e <lwip_htonl>
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	891b      	ldrh	r3, [r3, #8]
 8011e12:	461d      	mov	r5, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7f8 fd19 	bl	800a854 <lwip_htons>
 8011e22:	4603      	mov	r3, r0
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	f003 0303 	and.w	r3, r3, #3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <tcp_rexmit_rto_prepare+0xba>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e000      	b.n	8011e34 <tcp_rexmit_rto_prepare+0xbc>
 8011e32:	2300      	movs	r3, #0
 8011e34:	442b      	add	r3, r5
 8011e36:	18e2      	adds	r2, r4, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8011e4c:	08019364 	.word	0x08019364
 8011e50:	080199a0 	.word	0x080199a0
 8011e54:	080193b8 	.word	0x080193b8

08011e58 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d106      	bne.n	8011e74 <tcp_rexmit_rto_commit+0x1c>
 8011e66:	4b0d      	ldr	r3, [pc, #52]	; (8011e9c <tcp_rexmit_rto_commit+0x44>)
 8011e68:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011e6c:	490c      	ldr	r1, [pc, #48]	; (8011ea0 <tcp_rexmit_rto_commit+0x48>)
 8011e6e:	480d      	ldr	r0, [pc, #52]	; (8011ea4 <tcp_rexmit_rto_commit+0x4c>)
 8011e70:	f004 f89c 	bl	8015fac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e7a:	2bff      	cmp	r3, #255	; 0xff
 8011e7c:	d007      	beq.n	8011e8e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e84:	3301      	adds	r3, #1
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff fc80 	bl	8011794 <tcp_output>
}
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	08019364 	.word	0x08019364
 8011ea0:	080199c4 	.word	0x080199c4
 8011ea4:	080193b8 	.word	0x080193b8

08011ea8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_rexmit_rto+0x1c>
 8011eb6:	4b0a      	ldr	r3, [pc, #40]	; (8011ee0 <tcp_rexmit_rto+0x38>)
 8011eb8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011ebc:	4909      	ldr	r1, [pc, #36]	; (8011ee4 <tcp_rexmit_rto+0x3c>)
 8011ebe:	480a      	ldr	r0, [pc, #40]	; (8011ee8 <tcp_rexmit_rto+0x40>)
 8011ec0:	f004 f874 	bl	8015fac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7ff ff57 	bl	8011d78 <tcp_rexmit_rto_prepare>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff ffc1 	bl	8011e58 <tcp_rexmit_rto_commit>
  }
}
 8011ed6:	bf00      	nop
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	08019364 	.word	0x08019364
 8011ee4:	080199e8 	.word	0x080199e8
 8011ee8:	080193b8 	.word	0x080193b8

08011eec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011eec:	b590      	push	{r4, r7, lr}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d106      	bne.n	8011f08 <tcp_rexmit+0x1c>
 8011efa:	4b2f      	ldr	r3, [pc, #188]	; (8011fb8 <tcp_rexmit+0xcc>)
 8011efc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011f00:	492e      	ldr	r1, [pc, #184]	; (8011fbc <tcp_rexmit+0xd0>)
 8011f02:	482f      	ldr	r0, [pc, #188]	; (8011fc0 <tcp_rexmit+0xd4>)
 8011f04:	f004 f852 	bl	8015fac <iprintf>

  if (pcb->unacked == NULL) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d102      	bne.n	8011f16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f10:	f06f 0305 	mvn.w	r3, #5
 8011f14:	e04c      	b.n	8011fb0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011f1c:	68b8      	ldr	r0, [r7, #8]
 8011f1e:	f7ff fe2d 	bl	8011b7c <tcp_output_segment_busy>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d002      	beq.n	8011f2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011f28:	f06f 0305 	mvn.w	r3, #5
 8011f2c:	e040      	b.n	8011fb0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	336c      	adds	r3, #108	; 0x6c
 8011f3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f3c:	e002      	b.n	8011f44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d011      	beq.n	8011f70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7f8 fc92 	bl	800a87e <lwip_htonl>
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7f8 fc8b 	bl	800a87e <lwip_htonl>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	dbe6      	blt.n	8011f3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d103      	bne.n	8011f8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f94:	2bff      	cmp	r3, #255	; 0xff
 8011f96:	d007      	beq.n	8011fa8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3714      	adds	r7, #20
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd90      	pop	{r4, r7, pc}
 8011fb8:	08019364 	.word	0x08019364
 8011fbc:	08019a04 	.word	0x08019a04
 8011fc0:	080193b8 	.word	0x080193b8

08011fc4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d106      	bne.n	8011fe0 <tcp_rexmit_fast+0x1c>
 8011fd2:	4b2a      	ldr	r3, [pc, #168]	; (801207c <tcp_rexmit_fast+0xb8>)
 8011fd4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011fd8:	4929      	ldr	r1, [pc, #164]	; (8012080 <tcp_rexmit_fast+0xbc>)
 8011fda:	482a      	ldr	r0, [pc, #168]	; (8012084 <tcp_rexmit_fast+0xc0>)
 8011fdc:	f003 ffe6 	bl	8015fac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d044      	beq.n	8012072 <tcp_rexmit_fast+0xae>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	8b5b      	ldrh	r3, [r3, #26]
 8011fec:	f003 0304 	and.w	r3, r3, #4
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d13e      	bne.n	8012072 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7ff ff79 	bl	8011eec <tcp_rexmit>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d138      	bne.n	8012072 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801200c:	4293      	cmp	r3, r2
 801200e:	bf28      	it	cs
 8012010:	4613      	movcs	r3, r2
 8012012:	b29b      	uxth	r3, r3
 8012014:	0fda      	lsrs	r2, r3, #31
 8012016:	4413      	add	r3, r2
 8012018:	105b      	asrs	r3, r3, #1
 801201a:	b29a      	uxth	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012028:	461a      	mov	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	429a      	cmp	r2, r3
 8012032:	d206      	bcs.n	8012042 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	b29a      	uxth	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801204c:	4619      	mov	r1, r3
 801204e:	0049      	lsls	r1, r1, #1
 8012050:	440b      	add	r3, r1
 8012052:	b29b      	uxth	r3, r3
 8012054:	4413      	add	r3, r2
 8012056:	b29a      	uxth	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	8b5b      	ldrh	r3, [r3, #26]
 8012062:	f043 0304 	orr.w	r3, r3, #4
 8012066:	b29a      	uxth	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012072:	bf00      	nop
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	08019364 	.word	0x08019364
 8012080:	08019a1c 	.word	0x08019a1c
 8012084:	080193b8 	.word	0x080193b8

08012088 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	607b      	str	r3, [r7, #4]
 8012092:	460b      	mov	r3, r1
 8012094:	817b      	strh	r3, [r7, #10]
 8012096:	4613      	mov	r3, r2
 8012098:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801209a:	897a      	ldrh	r2, [r7, #10]
 801209c:	893b      	ldrh	r3, [r7, #8]
 801209e:	4413      	add	r3, r2
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	3314      	adds	r3, #20
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120aa:	4619      	mov	r1, r3
 80120ac:	2022      	movs	r0, #34	; 0x22
 80120ae:	f7f9 fc99 	bl	800b9e4 <pbuf_alloc>
 80120b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d04d      	beq.n	8012156 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80120ba:	897b      	ldrh	r3, [r7, #10]
 80120bc:	3313      	adds	r3, #19
 80120be:	697a      	ldr	r2, [r7, #20]
 80120c0:	8952      	ldrh	r2, [r2, #10]
 80120c2:	4293      	cmp	r3, r2
 80120c4:	db06      	blt.n	80120d4 <tcp_output_alloc_header_common+0x4c>
 80120c6:	4b26      	ldr	r3, [pc, #152]	; (8012160 <tcp_output_alloc_header_common+0xd8>)
 80120c8:	f240 7223 	movw	r2, #1827	; 0x723
 80120cc:	4925      	ldr	r1, [pc, #148]	; (8012164 <tcp_output_alloc_header_common+0xdc>)
 80120ce:	4826      	ldr	r0, [pc, #152]	; (8012168 <tcp_output_alloc_header_common+0xe0>)
 80120d0:	f003 ff6c 	bl	8015fac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80120da:	8c3b      	ldrh	r3, [r7, #32]
 80120dc:	4618      	mov	r0, r3
 80120de:	f7f8 fbb9 	bl	800a854 <lwip_htons>
 80120e2:	4603      	mov	r3, r0
 80120e4:	461a      	mov	r2, r3
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80120ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f8 fbb1 	bl	800a854 <lwip_htons>
 80120f2:	4603      	mov	r3, r0
 80120f4:	461a      	mov	r2, r3
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	f7f8 fbbc 	bl	800a87e <lwip_htonl>
 8012106:	4602      	mov	r2, r0
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801210c:	897b      	ldrh	r3, [r7, #10]
 801210e:	089b      	lsrs	r3, r3, #2
 8012110:	b29b      	uxth	r3, r3
 8012112:	3305      	adds	r3, #5
 8012114:	b29b      	uxth	r3, r3
 8012116:	031b      	lsls	r3, r3, #12
 8012118:	b29a      	uxth	r2, r3
 801211a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801211e:	b29b      	uxth	r3, r3
 8012120:	4313      	orrs	r3, r2
 8012122:	b29b      	uxth	r3, r3
 8012124:	4618      	mov	r0, r3
 8012126:	f7f8 fb95 	bl	800a854 <lwip_htons>
 801212a:	4603      	mov	r3, r0
 801212c:	461a      	mov	r2, r3
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012132:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012134:	4618      	mov	r0, r3
 8012136:	f7f8 fb8d 	bl	800a854 <lwip_htons>
 801213a:	4603      	mov	r3, r0
 801213c:	461a      	mov	r2, r3
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	2200      	movs	r2, #0
 8012146:	741a      	strb	r2, [r3, #16]
 8012148:	2200      	movs	r2, #0
 801214a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	2200      	movs	r2, #0
 8012150:	749a      	strb	r2, [r3, #18]
 8012152:	2200      	movs	r2, #0
 8012154:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012156:	697b      	ldr	r3, [r7, #20]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3718      	adds	r7, #24
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	08019364 	.word	0x08019364
 8012164:	08019a3c 	.word	0x08019a3c
 8012168:	080193b8 	.word	0x080193b8

0801216c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801216c:	b5b0      	push	{r4, r5, r7, lr}
 801216e:	b08a      	sub	sp, #40	; 0x28
 8012170:	af04      	add	r7, sp, #16
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	607b      	str	r3, [r7, #4]
 8012176:	460b      	mov	r3, r1
 8012178:	817b      	strh	r3, [r7, #10]
 801217a:	4613      	mov	r3, r2
 801217c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d106      	bne.n	8012192 <tcp_output_alloc_header+0x26>
 8012184:	4b15      	ldr	r3, [pc, #84]	; (80121dc <tcp_output_alloc_header+0x70>)
 8012186:	f240 7242 	movw	r2, #1858	; 0x742
 801218a:	4915      	ldr	r1, [pc, #84]	; (80121e0 <tcp_output_alloc_header+0x74>)
 801218c:	4815      	ldr	r0, [pc, #84]	; (80121e4 <tcp_output_alloc_header+0x78>)
 801218e:	f003 ff0d 	bl	8015fac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	8adb      	ldrh	r3, [r3, #22]
 801219a:	68fa      	ldr	r2, [r7, #12]
 801219c:	8b12      	ldrh	r2, [r2, #24]
 801219e:	68f9      	ldr	r1, [r7, #12]
 80121a0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80121a2:	893d      	ldrh	r5, [r7, #8]
 80121a4:	897c      	ldrh	r4, [r7, #10]
 80121a6:	9103      	str	r1, [sp, #12]
 80121a8:	2110      	movs	r1, #16
 80121aa:	9102      	str	r1, [sp, #8]
 80121ac:	9201      	str	r2, [sp, #4]
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	462a      	mov	r2, r5
 80121b4:	4621      	mov	r1, r4
 80121b6:	f7ff ff67 	bl	8012088 <tcp_output_alloc_header_common>
 80121ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d006      	beq.n	80121d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80121ca:	441a      	add	r2, r3
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80121d0:	697b      	ldr	r3, [r7, #20]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3718      	adds	r7, #24
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bdb0      	pop	{r4, r5, r7, pc}
 80121da:	bf00      	nop
 80121dc:	08019364 	.word	0x08019364
 80121e0:	08019a6c 	.word	0x08019a6c
 80121e4:	080193b8 	.word	0x080193b8

080121e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	4611      	mov	r1, r2
 80121f4:	461a      	mov	r2, r3
 80121f6:	460b      	mov	r3, r1
 80121f8:	71fb      	strb	r3, [r7, #7]
 80121fa:	4613      	mov	r3, r2
 80121fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d106      	bne.n	8012216 <tcp_output_fill_options+0x2e>
 8012208:	4b13      	ldr	r3, [pc, #76]	; (8012258 <tcp_output_fill_options+0x70>)
 801220a:	f240 7256 	movw	r2, #1878	; 0x756
 801220e:	4913      	ldr	r1, [pc, #76]	; (801225c <tcp_output_fill_options+0x74>)
 8012210:	4813      	ldr	r0, [pc, #76]	; (8012260 <tcp_output_fill_options+0x78>)
 8012212:	f003 fecb 	bl	8015fac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	3314      	adds	r3, #20
 8012220:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	f103 0214 	add.w	r2, r3, #20
 8012228:	8bfb      	ldrh	r3, [r7, #30]
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4619      	mov	r1, r3
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	f003 0304 	and.w	r3, r3, #4
 8012236:	440b      	add	r3, r1
 8012238:	4413      	add	r3, r2
 801223a:	697a      	ldr	r2, [r7, #20]
 801223c:	429a      	cmp	r2, r3
 801223e:	d006      	beq.n	801224e <tcp_output_fill_options+0x66>
 8012240:	4b05      	ldr	r3, [pc, #20]	; (8012258 <tcp_output_fill_options+0x70>)
 8012242:	f240 7275 	movw	r2, #1909	; 0x775
 8012246:	4907      	ldr	r1, [pc, #28]	; (8012264 <tcp_output_fill_options+0x7c>)
 8012248:	4805      	ldr	r0, [pc, #20]	; (8012260 <tcp_output_fill_options+0x78>)
 801224a:	f003 feaf 	bl	8015fac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801224e:	bf00      	nop
 8012250:	3720      	adds	r7, #32
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	08019364 	.word	0x08019364
 801225c:	08019a94 	.word	0x08019a94
 8012260:	080193b8 	.word	0x080193b8
 8012264:	0801998c 	.word	0x0801998c

08012268 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b08a      	sub	sp, #40	; 0x28
 801226c:	af04      	add	r7, sp, #16
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
 8012274:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d106      	bne.n	801228a <tcp_output_control_segment+0x22>
 801227c:	4b1c      	ldr	r3, [pc, #112]	; (80122f0 <tcp_output_control_segment+0x88>)
 801227e:	f240 7287 	movw	r2, #1927	; 0x787
 8012282:	491c      	ldr	r1, [pc, #112]	; (80122f4 <tcp_output_control_segment+0x8c>)
 8012284:	481c      	ldr	r0, [pc, #112]	; (80122f8 <tcp_output_control_segment+0x90>)
 8012286:	f003 fe91 	bl	8015fac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801228a:	683a      	ldr	r2, [r7, #0]
 801228c:	6879      	ldr	r1, [r7, #4]
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7fe fae8 	bl	8010864 <tcp_route>
 8012294:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d102      	bne.n	80122a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801229c:	23fc      	movs	r3, #252	; 0xfc
 801229e:	75fb      	strb	r3, [r7, #23]
 80122a0:	e01c      	b.n	80122dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d006      	beq.n	80122b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	7adb      	ldrb	r3, [r3, #11]
 80122ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	7a9b      	ldrb	r3, [r3, #10]
 80122b2:	757b      	strb	r3, [r7, #21]
 80122b4:	e003      	b.n	80122be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80122b6:	23ff      	movs	r3, #255	; 0xff
 80122b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80122be:	7dba      	ldrb	r2, [r7, #22]
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	9302      	str	r3, [sp, #8]
 80122c4:	2306      	movs	r3, #6
 80122c6:	9301      	str	r3, [sp, #4]
 80122c8:	7d7b      	ldrb	r3, [r7, #21]
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	4613      	mov	r3, r2
 80122ce:	683a      	ldr	r2, [r7, #0]
 80122d0:	6879      	ldr	r1, [r7, #4]
 80122d2:	68b8      	ldr	r0, [r7, #8]
 80122d4:	f002 f954 	bl	8014580 <ip4_output_if>
 80122d8:	4603      	mov	r3, r0
 80122da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80122dc:	68b8      	ldr	r0, [r7, #8]
 80122de:	f7f9 fe65 	bl	800bfac <pbuf_free>
  return err;
 80122e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3718      	adds	r7, #24
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	08019364 	.word	0x08019364
 80122f4:	08019abc 	.word	0x08019abc
 80122f8:	080193b8 	.word	0x080193b8

080122fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80122fc:	b590      	push	{r4, r7, lr}
 80122fe:	b08b      	sub	sp, #44	; 0x2c
 8012300:	af04      	add	r7, sp, #16
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
 8012308:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d106      	bne.n	801231e <tcp_rst+0x22>
 8012310:	4b1f      	ldr	r3, [pc, #124]	; (8012390 <tcp_rst+0x94>)
 8012312:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012316:	491f      	ldr	r1, [pc, #124]	; (8012394 <tcp_rst+0x98>)
 8012318:	481f      	ldr	r0, [pc, #124]	; (8012398 <tcp_rst+0x9c>)
 801231a:	f003 fe47 	bl	8015fac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012320:	2b00      	cmp	r3, #0
 8012322:	d106      	bne.n	8012332 <tcp_rst+0x36>
 8012324:	4b1a      	ldr	r3, [pc, #104]	; (8012390 <tcp_rst+0x94>)
 8012326:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801232a:	491c      	ldr	r1, [pc, #112]	; (801239c <tcp_rst+0xa0>)
 801232c:	481a      	ldr	r0, [pc, #104]	; (8012398 <tcp_rst+0x9c>)
 801232e:	f003 fe3d 	bl	8015fac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012332:	2300      	movs	r3, #0
 8012334:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012336:	f246 0308 	movw	r3, #24584	; 0x6008
 801233a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801233c:	7dfb      	ldrb	r3, [r7, #23]
 801233e:	b29c      	uxth	r4, r3
 8012340:	68b8      	ldr	r0, [r7, #8]
 8012342:	f7f8 fa9c 	bl	800a87e <lwip_htonl>
 8012346:	4602      	mov	r2, r0
 8012348:	8abb      	ldrh	r3, [r7, #20]
 801234a:	9303      	str	r3, [sp, #12]
 801234c:	2314      	movs	r3, #20
 801234e:	9302      	str	r3, [sp, #8]
 8012350:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	4613      	mov	r3, r2
 801235a:	2200      	movs	r2, #0
 801235c:	4621      	mov	r1, r4
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f7ff fe92 	bl	8012088 <tcp_output_alloc_header_common>
 8012364:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00c      	beq.n	8012386 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801236c:	7dfb      	ldrb	r3, [r7, #23]
 801236e:	2200      	movs	r2, #0
 8012370:	6939      	ldr	r1, [r7, #16]
 8012372:	68f8      	ldr	r0, [r7, #12]
 8012374:	f7ff ff38 	bl	80121e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237a:	683a      	ldr	r2, [r7, #0]
 801237c:	6939      	ldr	r1, [r7, #16]
 801237e:	68f8      	ldr	r0, [r7, #12]
 8012380:	f7ff ff72 	bl	8012268 <tcp_output_control_segment>
 8012384:	e000      	b.n	8012388 <tcp_rst+0x8c>
    return;
 8012386:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012388:	371c      	adds	r7, #28
 801238a:	46bd      	mov	sp, r7
 801238c:	bd90      	pop	{r4, r7, pc}
 801238e:	bf00      	nop
 8012390:	08019364 	.word	0x08019364
 8012394:	08019ae8 	.word	0x08019ae8
 8012398:	080193b8 	.word	0x080193b8
 801239c:	08019b04 	.word	0x08019b04

080123a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80123a0:	b590      	push	{r4, r7, lr}
 80123a2:	b087      	sub	sp, #28
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80123ac:	2300      	movs	r3, #0
 80123ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d106      	bne.n	80123c4 <tcp_send_empty_ack+0x24>
 80123b6:	4b28      	ldr	r3, [pc, #160]	; (8012458 <tcp_send_empty_ack+0xb8>)
 80123b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80123bc:	4927      	ldr	r1, [pc, #156]	; (801245c <tcp_send_empty_ack+0xbc>)
 80123be:	4828      	ldr	r0, [pc, #160]	; (8012460 <tcp_send_empty_ack+0xc0>)
 80123c0:	f003 fdf4 	bl	8015fac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123c4:	7dfb      	ldrb	r3, [r7, #23]
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	f003 0304 	and.w	r3, r3, #4
 80123ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80123d0:	7d7b      	ldrb	r3, [r7, #21]
 80123d2:	b29c      	uxth	r4, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f8 fa50 	bl	800a87e <lwip_htonl>
 80123de:	4603      	mov	r3, r0
 80123e0:	2200      	movs	r2, #0
 80123e2:	4621      	mov	r1, r4
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7ff fec1 	bl	801216c <tcp_output_alloc_header>
 80123ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d109      	bne.n	8012406 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	8b5b      	ldrh	r3, [r3, #26]
 80123f6:	f043 0303 	orr.w	r3, r3, #3
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012400:	f06f 0301 	mvn.w	r3, #1
 8012404:	e023      	b.n	801244e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012406:	7dbb      	ldrb	r3, [r7, #22]
 8012408:	7dfa      	ldrb	r2, [r7, #23]
 801240a:	6939      	ldr	r1, [r7, #16]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7ff feeb 	bl	80121e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3304      	adds	r3, #4
 8012418:	6939      	ldr	r1, [r7, #16]
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f7ff ff24 	bl	8012268 <tcp_output_control_segment>
 8012420:	4603      	mov	r3, r0
 8012422:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d007      	beq.n	801243c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	8b5b      	ldrh	r3, [r3, #26]
 8012430:	f043 0303 	orr.w	r3, r3, #3
 8012434:	b29a      	uxth	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	835a      	strh	r2, [r3, #26]
 801243a:	e006      	b.n	801244a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	8b5b      	ldrh	r3, [r3, #26]
 8012440:	f023 0303 	bic.w	r3, r3, #3
 8012444:	b29a      	uxth	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801244e:	4618      	mov	r0, r3
 8012450:	371c      	adds	r7, #28
 8012452:	46bd      	mov	sp, r7
 8012454:	bd90      	pop	{r4, r7, pc}
 8012456:	bf00      	nop
 8012458:	08019364 	.word	0x08019364
 801245c:	08019b20 	.word	0x08019b20
 8012460:	080193b8 	.word	0x080193b8

08012464 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012464:	b590      	push	{r4, r7, lr}
 8012466:	b087      	sub	sp, #28
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801246c:	2300      	movs	r3, #0
 801246e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d106      	bne.n	8012484 <tcp_keepalive+0x20>
 8012476:	4b18      	ldr	r3, [pc, #96]	; (80124d8 <tcp_keepalive+0x74>)
 8012478:	f640 0224 	movw	r2, #2084	; 0x824
 801247c:	4917      	ldr	r1, [pc, #92]	; (80124dc <tcp_keepalive+0x78>)
 801247e:	4818      	ldr	r0, [pc, #96]	; (80124e0 <tcp_keepalive+0x7c>)
 8012480:	f003 fd94 	bl	8015fac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012484:	7dfb      	ldrb	r3, [r7, #23]
 8012486:	b29c      	uxth	r4, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801248c:	3b01      	subs	r3, #1
 801248e:	4618      	mov	r0, r3
 8012490:	f7f8 f9f5 	bl	800a87e <lwip_htonl>
 8012494:	4603      	mov	r3, r0
 8012496:	2200      	movs	r2, #0
 8012498:	4621      	mov	r1, r4
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff fe66 	bl	801216c <tcp_output_alloc_header>
 80124a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d102      	bne.n	80124ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80124a8:	f04f 33ff 	mov.w	r3, #4294967295
 80124ac:	e010      	b.n	80124d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80124ae:	7dfb      	ldrb	r3, [r7, #23]
 80124b0:	2200      	movs	r2, #0
 80124b2:	6939      	ldr	r1, [r7, #16]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7ff fe97 	bl	80121e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	3304      	adds	r3, #4
 80124c0:	6939      	ldr	r1, [r7, #16]
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff fed0 	bl	8012268 <tcp_output_control_segment>
 80124c8:	4603      	mov	r3, r0
 80124ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80124cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	371c      	adds	r7, #28
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd90      	pop	{r4, r7, pc}
 80124d8:	08019364 	.word	0x08019364
 80124dc:	08019b40 	.word	0x08019b40
 80124e0:	080193b8 	.word	0x080193b8

080124e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80124e4:	b590      	push	{r4, r7, lr}
 80124e6:	b08b      	sub	sp, #44	; 0x2c
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124ec:	2300      	movs	r3, #0
 80124ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d106      	bne.n	8012506 <tcp_zero_window_probe+0x22>
 80124f8:	4b4c      	ldr	r3, [pc, #304]	; (801262c <tcp_zero_window_probe+0x148>)
 80124fa:	f640 024f 	movw	r2, #2127	; 0x84f
 80124fe:	494c      	ldr	r1, [pc, #304]	; (8012630 <tcp_zero_window_probe+0x14c>)
 8012500:	484c      	ldr	r0, [pc, #304]	; (8012634 <tcp_zero_window_probe+0x150>)
 8012502:	f003 fd53 	bl	8015fac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801250a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801250c:	6a3b      	ldr	r3, [r7, #32]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012512:	2300      	movs	r3, #0
 8012514:	e086      	b.n	8012624 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801251c:	2bff      	cmp	r3, #255	; 0xff
 801251e:	d007      	beq.n	8012530 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012526:	3301      	adds	r3, #1
 8012528:	b2da      	uxtb	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012530:	6a3b      	ldr	r3, [r7, #32]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	899b      	ldrh	r3, [r3, #12]
 8012536:	b29b      	uxth	r3, r3
 8012538:	4618      	mov	r0, r3
 801253a:	f7f8 f98b 	bl	800a854 <lwip_htons>
 801253e:	4603      	mov	r3, r0
 8012540:	b2db      	uxtb	r3, r3
 8012542:	f003 0301 	and.w	r3, r3, #1
 8012546:	2b00      	cmp	r3, #0
 8012548:	d005      	beq.n	8012556 <tcp_zero_window_probe+0x72>
 801254a:	6a3b      	ldr	r3, [r7, #32]
 801254c:	891b      	ldrh	r3, [r3, #8]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d101      	bne.n	8012556 <tcp_zero_window_probe+0x72>
 8012552:	2301      	movs	r3, #1
 8012554:	e000      	b.n	8012558 <tcp_zero_window_probe+0x74>
 8012556:	2300      	movs	r3, #0
 8012558:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801255a:	7ffb      	ldrb	r3, [r7, #31]
 801255c:	2b00      	cmp	r3, #0
 801255e:	bf0c      	ite	eq
 8012560:	2301      	moveq	r3, #1
 8012562:	2300      	movne	r3, #0
 8012564:	b2db      	uxtb	r3, r3
 8012566:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801256c:	b299      	uxth	r1, r3
 801256e:	6a3b      	ldr	r3, [r7, #32]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	8bba      	ldrh	r2, [r7, #28]
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7ff fdf8 	bl	801216c <tcp_output_alloc_header>
 801257c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d102      	bne.n	801258a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012584:	f04f 33ff 	mov.w	r3, #4294967295
 8012588:	e04c      	b.n	8012624 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012590:	7ffb      	ldrb	r3, [r7, #31]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d011      	beq.n	80125ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	899b      	ldrh	r3, [r3, #12]
 801259a:	b29b      	uxth	r3, r3
 801259c:	b21b      	sxth	r3, r3
 801259e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80125a2:	b21c      	sxth	r4, r3
 80125a4:	2011      	movs	r0, #17
 80125a6:	f7f8 f955 	bl	800a854 <lwip_htons>
 80125aa:	4603      	mov	r3, r0
 80125ac:	b21b      	sxth	r3, r3
 80125ae:	4323      	orrs	r3, r4
 80125b0:	b21b      	sxth	r3, r3
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	819a      	strh	r2, [r3, #12]
 80125b8:	e010      	b.n	80125dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	3314      	adds	r3, #20
 80125c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	6858      	ldr	r0, [r3, #4]
 80125c6:	6a3b      	ldr	r3, [r7, #32]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	891a      	ldrh	r2, [r3, #8]
 80125cc:	6a3b      	ldr	r3, [r7, #32]
 80125ce:	891b      	ldrh	r3, [r3, #8]
 80125d0:	1ad3      	subs	r3, r2, r3
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	2201      	movs	r2, #1
 80125d6:	6939      	ldr	r1, [r7, #16]
 80125d8:	f7f9 fede 	bl	800c398 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7f8 f94b 	bl	800a87e <lwip_htonl>
 80125e8:	4603      	mov	r3, r0
 80125ea:	3301      	adds	r3, #1
 80125ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	da02      	bge.n	8012600 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012604:	2200      	movs	r2, #0
 8012606:	69b9      	ldr	r1, [r7, #24]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7ff fded 	bl	80121e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	3304      	adds	r3, #4
 8012614:	69b9      	ldr	r1, [r7, #24]
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f7ff fe26 	bl	8012268 <tcp_output_control_segment>
 801261c:	4603      	mov	r3, r0
 801261e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012620:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012624:	4618      	mov	r0, r3
 8012626:	372c      	adds	r7, #44	; 0x2c
 8012628:	46bd      	mov	sp, r7
 801262a:	bd90      	pop	{r4, r7, pc}
 801262c:	08019364 	.word	0x08019364
 8012630:	08019b5c 	.word	0x08019b5c
 8012634:	080193b8 	.word	0x080193b8

08012638 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012640:	f7f9 ff98 	bl	800c574 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012644:	4b0a      	ldr	r3, [pc, #40]	; (8012670 <tcpip_tcp_timer+0x38>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d103      	bne.n	8012654 <tcpip_tcp_timer+0x1c>
 801264c:	4b09      	ldr	r3, [pc, #36]	; (8012674 <tcpip_tcp_timer+0x3c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d005      	beq.n	8012660 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012654:	2200      	movs	r2, #0
 8012656:	4908      	ldr	r1, [pc, #32]	; (8012678 <tcpip_tcp_timer+0x40>)
 8012658:	20fa      	movs	r0, #250	; 0xfa
 801265a:	f000 f8f3 	bl	8012844 <sys_timeout>
 801265e:	e003      	b.n	8012668 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012660:	4b06      	ldr	r3, [pc, #24]	; (801267c <tcpip_tcp_timer+0x44>)
 8012662:	2200      	movs	r2, #0
 8012664:	601a      	str	r2, [r3, #0]
  }
}
 8012666:	bf00      	nop
 8012668:	bf00      	nop
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	2000b5e4 	.word	0x2000b5e4
 8012674:	2000b5f4 	.word	0x2000b5f4
 8012678:	08012639 	.word	0x08012639
 801267c:	20004b14 	.word	0x20004b14

08012680 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012684:	4b0a      	ldr	r3, [pc, #40]	; (80126b0 <tcp_timer_needed+0x30>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10f      	bne.n	80126ac <tcp_timer_needed+0x2c>
 801268c:	4b09      	ldr	r3, [pc, #36]	; (80126b4 <tcp_timer_needed+0x34>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d103      	bne.n	801269c <tcp_timer_needed+0x1c>
 8012694:	4b08      	ldr	r3, [pc, #32]	; (80126b8 <tcp_timer_needed+0x38>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d007      	beq.n	80126ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801269c:	4b04      	ldr	r3, [pc, #16]	; (80126b0 <tcp_timer_needed+0x30>)
 801269e:	2201      	movs	r2, #1
 80126a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126a2:	2200      	movs	r2, #0
 80126a4:	4905      	ldr	r1, [pc, #20]	; (80126bc <tcp_timer_needed+0x3c>)
 80126a6:	20fa      	movs	r0, #250	; 0xfa
 80126a8:	f000 f8cc 	bl	8012844 <sys_timeout>
  }
}
 80126ac:	bf00      	nop
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	20004b14 	.word	0x20004b14
 80126b4:	2000b5e4 	.word	0x2000b5e4
 80126b8:	2000b5f4 	.word	0x2000b5f4
 80126bc:	08012639 	.word	0x08012639

080126c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80126cc:	200a      	movs	r0, #10
 80126ce:	f7f8 fd77 	bl	800b1c0 <memp_malloc>
 80126d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d109      	bne.n	80126ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d151      	bne.n	8012784 <sys_timeout_abs+0xc4>
 80126e0:	4b2a      	ldr	r3, [pc, #168]	; (801278c <sys_timeout_abs+0xcc>)
 80126e2:	22be      	movs	r2, #190	; 0xbe
 80126e4:	492a      	ldr	r1, [pc, #168]	; (8012790 <sys_timeout_abs+0xd0>)
 80126e6:	482b      	ldr	r0, [pc, #172]	; (8012794 <sys_timeout_abs+0xd4>)
 80126e8:	f003 fc60 	bl	8015fac <iprintf>
    return;
 80126ec:	e04a      	b.n	8012784 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	2200      	movs	r2, #0
 80126f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	68fa      	ldr	r2, [r7, #12]
 8012704:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012706:	4b24      	ldr	r3, [pc, #144]	; (8012798 <sys_timeout_abs+0xd8>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d103      	bne.n	8012716 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801270e:	4a22      	ldr	r2, [pc, #136]	; (8012798 <sys_timeout_abs+0xd8>)
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	6013      	str	r3, [r2, #0]
    return;
 8012714:	e037      	b.n	8012786 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	4b1f      	ldr	r3, [pc, #124]	; (8012798 <sys_timeout_abs+0xd8>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	1ad3      	subs	r3, r2, r3
 8012722:	0fdb      	lsrs	r3, r3, #31
 8012724:	f003 0301 	and.w	r3, r3, #1
 8012728:	b2db      	uxtb	r3, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	d007      	beq.n	801273e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801272e:	4b1a      	ldr	r3, [pc, #104]	; (8012798 <sys_timeout_abs+0xd8>)
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012736:	4a18      	ldr	r2, [pc, #96]	; (8012798 <sys_timeout_abs+0xd8>)
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	6013      	str	r3, [r2, #0]
 801273c:	e023      	b.n	8012786 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801273e:	4b16      	ldr	r3, [pc, #88]	; (8012798 <sys_timeout_abs+0xd8>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	617b      	str	r3, [r7, #20]
 8012744:	e01a      	b.n	801277c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00b      	beq.n	8012766 <sys_timeout_abs+0xa6>
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	0fdb      	lsrs	r3, r3, #31
 801275c:	f003 0301 	and.w	r3, r3, #1
 8012760:	b2db      	uxtb	r3, r3
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	693a      	ldr	r2, [r7, #16]
 8012772:	601a      	str	r2, [r3, #0]
        break;
 8012774:	e007      	b.n	8012786 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	617b      	str	r3, [r7, #20]
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1e1      	bne.n	8012746 <sys_timeout_abs+0x86>
 8012782:	e000      	b.n	8012786 <sys_timeout_abs+0xc6>
    return;
 8012784:	bf00      	nop
      }
    }
  }
}
 8012786:	3718      	adds	r7, #24
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}
 801278c:	08019b80 	.word	0x08019b80
 8012790:	08019bb4 	.word	0x08019bb4
 8012794:	08019bf4 	.word	0x08019bf4
 8012798:	20004b0c 	.word	0x20004b0c

0801279c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	4798      	blx	r3

  now = sys_now();
 80127ae:	f7f1 fe7d 	bl	80044ac <sys_now>
 80127b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	4b0f      	ldr	r3, [pc, #60]	; (80127f8 <lwip_cyclic_timer+0x5c>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	4413      	add	r3, r2
 80127be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	0fdb      	lsrs	r3, r3, #31
 80127c8:	f003 0301 	and.w	r3, r3, #1
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d009      	beq.n	80127e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	4413      	add	r3, r2
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	4907      	ldr	r1, [pc, #28]	; (80127fc <lwip_cyclic_timer+0x60>)
 80127de:	4618      	mov	r0, r3
 80127e0:	f7ff ff6e 	bl	80126c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80127e4:	e004      	b.n	80127f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	4904      	ldr	r1, [pc, #16]	; (80127fc <lwip_cyclic_timer+0x60>)
 80127ea:	68f8      	ldr	r0, [r7, #12]
 80127ec:	f7ff ff68 	bl	80126c0 <sys_timeout_abs>
}
 80127f0:	bf00      	nop
 80127f2:	3718      	adds	r7, #24
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	20004b10 	.word	0x20004b10
 80127fc:	0801279d 	.word	0x0801279d

08012800 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012806:	2301      	movs	r3, #1
 8012808:	607b      	str	r3, [r7, #4]
 801280a:	e00e      	b.n	801282a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801280c:	4a0b      	ldr	r2, [pc, #44]	; (801283c <sys_timeouts_init+0x3c>)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	00db      	lsls	r3, r3, #3
 8012818:	4a08      	ldr	r2, [pc, #32]	; (801283c <sys_timeouts_init+0x3c>)
 801281a:	4413      	add	r3, r2
 801281c:	461a      	mov	r2, r3
 801281e:	4908      	ldr	r1, [pc, #32]	; (8012840 <sys_timeouts_init+0x40>)
 8012820:	f000 f810 	bl	8012844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	3301      	adds	r3, #1
 8012828:	607b      	str	r3, [r7, #4]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b02      	cmp	r3, #2
 801282e:	d9ed      	bls.n	801280c <sys_timeouts_init+0xc>
  }
}
 8012830:	bf00      	nop
 8012832:	bf00      	nop
 8012834:	3708      	adds	r7, #8
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	0801a84c 	.word	0x0801a84c
 8012840:	0801279d 	.word	0x0801279d

08012844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b086      	sub	sp, #24
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012856:	d306      	bcc.n	8012866 <sys_timeout+0x22>
 8012858:	4b0a      	ldr	r3, [pc, #40]	; (8012884 <sys_timeout+0x40>)
 801285a:	f240 1229 	movw	r2, #297	; 0x129
 801285e:	490a      	ldr	r1, [pc, #40]	; (8012888 <sys_timeout+0x44>)
 8012860:	480a      	ldr	r0, [pc, #40]	; (801288c <sys_timeout+0x48>)
 8012862:	f003 fba3 	bl	8015fac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012866:	f7f1 fe21 	bl	80044ac <sys_now>
 801286a:	4602      	mov	r2, r0
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	4413      	add	r3, r2
 8012870:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	68b9      	ldr	r1, [r7, #8]
 8012876:	6978      	ldr	r0, [r7, #20]
 8012878:	f7ff ff22 	bl	80126c0 <sys_timeout_abs>
#endif
}
 801287c:	bf00      	nop
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	08019b80 	.word	0x08019b80
 8012888:	08019c1c 	.word	0x08019c1c
 801288c:	08019bf4 	.word	0x08019bf4

08012890 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012896:	f7f1 fe09 	bl	80044ac <sys_now>
 801289a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801289c:	4b17      	ldr	r3, [pc, #92]	; (80128fc <sys_check_timeouts+0x6c>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d022      	beq.n	80128ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	0fdb      	lsrs	r3, r3, #31
 80128b2:	f003 0301 	and.w	r3, r3, #1
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d11a      	bne.n	80128f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4a0e      	ldr	r2, [pc, #56]	; (80128fc <sys_check_timeouts+0x6c>)
 80128c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	689b      	ldr	r3, [r3, #8]
 80128c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	4a0a      	ldr	r2, [pc, #40]	; (8012900 <sys_check_timeouts+0x70>)
 80128d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80128d8:	68b9      	ldr	r1, [r7, #8]
 80128da:	200a      	movs	r0, #10
 80128dc:	f7f8 fcc2 	bl	800b264 <memp_free>
    if (handler != NULL) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d0da      	beq.n	801289c <sys_check_timeouts+0xc>
      handler(arg);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6838      	ldr	r0, [r7, #0]
 80128ea:	4798      	blx	r3
  do {
 80128ec:	e7d6      	b.n	801289c <sys_check_timeouts+0xc>
      return;
 80128ee:	bf00      	nop
 80128f0:	e000      	b.n	80128f4 <sys_check_timeouts+0x64>
      return;
 80128f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	20004b0c 	.word	0x20004b0c
 8012900:	20004b10 	.word	0x20004b10

08012904 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801290a:	4b16      	ldr	r3, [pc, #88]	; (8012964 <sys_timeouts_sleeptime+0x60>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d102      	bne.n	8012918 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012912:	f04f 33ff 	mov.w	r3, #4294967295
 8012916:	e020      	b.n	801295a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012918:	f7f1 fdc8 	bl	80044ac <sys_now>
 801291c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801291e:	4b11      	ldr	r3, [pc, #68]	; (8012964 <sys_timeouts_sleeptime+0x60>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	0fdb      	lsrs	r3, r3, #31
 801292a:	f003 0301 	and.w	r3, r3, #1
 801292e:	b2db      	uxtb	r3, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012934:	2300      	movs	r3, #0
 8012936:	e010      	b.n	801295a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012938:	4b0a      	ldr	r3, [pc, #40]	; (8012964 <sys_timeouts_sleeptime+0x60>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	da06      	bge.n	8012958 <sys_timeouts_sleeptime+0x54>
 801294a:	4b07      	ldr	r3, [pc, #28]	; (8012968 <sys_timeouts_sleeptime+0x64>)
 801294c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012950:	4906      	ldr	r1, [pc, #24]	; (801296c <sys_timeouts_sleeptime+0x68>)
 8012952:	4807      	ldr	r0, [pc, #28]	; (8012970 <sys_timeouts_sleeptime+0x6c>)
 8012954:	f003 fb2a 	bl	8015fac <iprintf>
    return ret;
 8012958:	683b      	ldr	r3, [r7, #0]
  }
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	20004b0c 	.word	0x20004b0c
 8012968:	08019b80 	.word	0x08019b80
 801296c:	08019c54 	.word	0x08019c54
 8012970:	08019bf4 	.word	0x08019bf4

08012974 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012978:	f003 fb30 	bl	8015fdc <rand>
 801297c:	4603      	mov	r3, r0
 801297e:	b29b      	uxth	r3, r3
 8012980:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012984:	b29b      	uxth	r3, r3
 8012986:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801298a:	b29a      	uxth	r2, r3
 801298c:	4b01      	ldr	r3, [pc, #4]	; (8012994 <udp_init+0x20>)
 801298e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012990:	bf00      	nop
 8012992:	bd80      	pop	{r7, pc}
 8012994:	2000001c 	.word	0x2000001c

08012998 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801299e:	2300      	movs	r3, #0
 80129a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80129a2:	4b17      	ldr	r3, [pc, #92]	; (8012a00 <udp_new_port+0x68>)
 80129a4:	881b      	ldrh	r3, [r3, #0]
 80129a6:	1c5a      	adds	r2, r3, #1
 80129a8:	b291      	uxth	r1, r2
 80129aa:	4a15      	ldr	r2, [pc, #84]	; (8012a00 <udp_new_port+0x68>)
 80129ac:	8011      	strh	r1, [r2, #0]
 80129ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d103      	bne.n	80129be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80129b6:	4b12      	ldr	r3, [pc, #72]	; (8012a00 <udp_new_port+0x68>)
 80129b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80129bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129be:	4b11      	ldr	r3, [pc, #68]	; (8012a04 <udp_new_port+0x6c>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	603b      	str	r3, [r7, #0]
 80129c4:	e011      	b.n	80129ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	8a5a      	ldrh	r2, [r3, #18]
 80129ca:	4b0d      	ldr	r3, [pc, #52]	; (8012a00 <udp_new_port+0x68>)
 80129cc:	881b      	ldrh	r3, [r3, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d108      	bne.n	80129e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80129d2:	88fb      	ldrh	r3, [r7, #6]
 80129d4:	3301      	adds	r3, #1
 80129d6:	80fb      	strh	r3, [r7, #6]
 80129d8:	88fb      	ldrh	r3, [r7, #6]
 80129da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129de:	d3e0      	bcc.n	80129a2 <udp_new_port+0xa>
        return 0;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e007      	b.n	80129f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	603b      	str	r3, [r7, #0]
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d1ea      	bne.n	80129c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80129f0:	4b03      	ldr	r3, [pc, #12]	; (8012a00 <udp_new_port+0x68>)
 80129f2:	881b      	ldrh	r3, [r3, #0]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	2000001c 	.word	0x2000001c
 8012a04:	2000b5fc 	.word	0x2000b5fc

08012a08 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	4613      	mov	r3, r2
 8012a14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d105      	bne.n	8012a28 <udp_input_local_match+0x20>
 8012a1c:	4b27      	ldr	r3, [pc, #156]	; (8012abc <udp_input_local_match+0xb4>)
 8012a1e:	2287      	movs	r2, #135	; 0x87
 8012a20:	4927      	ldr	r1, [pc, #156]	; (8012ac0 <udp_input_local_match+0xb8>)
 8012a22:	4828      	ldr	r0, [pc, #160]	; (8012ac4 <udp_input_local_match+0xbc>)
 8012a24:	f003 fac2 	bl	8015fac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d105      	bne.n	8012a3a <udp_input_local_match+0x32>
 8012a2e:	4b23      	ldr	r3, [pc, #140]	; (8012abc <udp_input_local_match+0xb4>)
 8012a30:	2288      	movs	r2, #136	; 0x88
 8012a32:	4925      	ldr	r1, [pc, #148]	; (8012ac8 <udp_input_local_match+0xc0>)
 8012a34:	4823      	ldr	r0, [pc, #140]	; (8012ac4 <udp_input_local_match+0xbc>)
 8012a36:	f003 fab9 	bl	8015fac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	7a1b      	ldrb	r3, [r3, #8]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00b      	beq.n	8012a5a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	7a1a      	ldrb	r2, [r3, #8]
 8012a46:	4b21      	ldr	r3, [pc, #132]	; (8012acc <udp_input_local_match+0xc4>)
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d001      	beq.n	8012a5a <udp_input_local_match+0x52>
    return 0;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e02b      	b.n	8012ab2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012a5a:	79fb      	ldrb	r3, [r7, #7]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d018      	beq.n	8012a92 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d013      	beq.n	8012a8e <udp_input_local_match+0x86>
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00f      	beq.n	8012a8e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a6e:	4b17      	ldr	r3, [pc, #92]	; (8012acc <udp_input_local_match+0xc4>)
 8012a70:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a76:	d00a      	beq.n	8012a8e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	4b13      	ldr	r3, [pc, #76]	; (8012acc <udp_input_local_match+0xc4>)
 8012a7e:	695b      	ldr	r3, [r3, #20]
 8012a80:	405a      	eors	r2, r3
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	3308      	adds	r3, #8
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d110      	bne.n	8012ab0 <udp_input_local_match+0xa8>
          return 1;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	e00f      	b.n	8012ab2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d009      	beq.n	8012aac <udp_input_local_match+0xa4>
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d005      	beq.n	8012aac <udp_input_local_match+0xa4>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	4b09      	ldr	r3, [pc, #36]	; (8012acc <udp_input_local_match+0xc4>)
 8012aa6:	695b      	ldr	r3, [r3, #20]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d101      	bne.n	8012ab0 <udp_input_local_match+0xa8>
        return 1;
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3710      	adds	r7, #16
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	08019c68 	.word	0x08019c68
 8012ac0:	08019c98 	.word	0x08019c98
 8012ac4:	08019cbc 	.word	0x08019cbc
 8012ac8:	08019ce4 	.word	0x08019ce4
 8012acc:	20007ed0 	.word	0x20007ed0

08012ad0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012ad0:	b590      	push	{r4, r7, lr}
 8012ad2:	b08d      	sub	sp, #52	; 0x34
 8012ad4:	af02      	add	r7, sp, #8
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d105      	bne.n	8012af0 <udp_input+0x20>
 8012ae4:	4b7c      	ldr	r3, [pc, #496]	; (8012cd8 <udp_input+0x208>)
 8012ae6:	22cf      	movs	r2, #207	; 0xcf
 8012ae8:	497c      	ldr	r1, [pc, #496]	; (8012cdc <udp_input+0x20c>)
 8012aea:	487d      	ldr	r0, [pc, #500]	; (8012ce0 <udp_input+0x210>)
 8012aec:	f003 fa5e 	bl	8015fac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d105      	bne.n	8012b02 <udp_input+0x32>
 8012af6:	4b78      	ldr	r3, [pc, #480]	; (8012cd8 <udp_input+0x208>)
 8012af8:	22d0      	movs	r2, #208	; 0xd0
 8012afa:	497a      	ldr	r1, [pc, #488]	; (8012ce4 <udp_input+0x214>)
 8012afc:	4878      	ldr	r0, [pc, #480]	; (8012ce0 <udp_input+0x210>)
 8012afe:	f003 fa55 	bl	8015fac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	895b      	ldrh	r3, [r3, #10]
 8012b06:	2b07      	cmp	r3, #7
 8012b08:	d803      	bhi.n	8012b12 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7f9 fa4e 	bl	800bfac <pbuf_free>
    goto end;
 8012b10:	e0de      	b.n	8012cd0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012b18:	4b73      	ldr	r3, [pc, #460]	; (8012ce8 <udp_input+0x218>)
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	4a72      	ldr	r2, [pc, #456]	; (8012ce8 <udp_input+0x218>)
 8012b1e:	6812      	ldr	r2, [r2, #0]
 8012b20:	4611      	mov	r1, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	f001 fe04 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	881b      	ldrh	r3, [r3, #0]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7f7 fe8e 	bl	800a854 <lwip_htons>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	885b      	ldrh	r3, [r3, #2]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7f7 fe86 	bl	800a854 <lwip_htons>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012b50:	2300      	movs	r3, #0
 8012b52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012b54:	2300      	movs	r3, #0
 8012b56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b58:	4b64      	ldr	r3, [pc, #400]	; (8012cec <udp_input+0x21c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8012b5e:	e054      	b.n	8012c0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b62:	8a5b      	ldrh	r3, [r3, #18]
 8012b64:	89fa      	ldrh	r2, [r7, #14]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d14a      	bne.n	8012c00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012b6a:	7cfb      	ldrb	r3, [r7, #19]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	6839      	ldr	r1, [r7, #0]
 8012b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b72:	f7ff ff49 	bl	8012a08 <udp_input_local_match>
 8012b76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d041      	beq.n	8012c00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7e:	7c1b      	ldrb	r3, [r3, #16]
 8012b80:	f003 0304 	and.w	r3, r3, #4
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d11d      	bne.n	8012bc4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d102      	bne.n	8012b94 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b90:	61fb      	str	r3, [r7, #28]
 8012b92:	e017      	b.n	8012bc4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012b94:	7cfb      	ldrb	r3, [r7, #19]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d014      	beq.n	8012bc4 <udp_input+0xf4>
 8012b9a:	4b53      	ldr	r3, [pc, #332]	; (8012ce8 <udp_input+0x218>)
 8012b9c:	695b      	ldr	r3, [r3, #20]
 8012b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba2:	d10f      	bne.n	8012bc4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	3304      	adds	r3, #4
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d008      	beq.n	8012bc4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d101      	bne.n	8012bc4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc6:	8a9b      	ldrh	r3, [r3, #20]
 8012bc8:	8a3a      	ldrh	r2, [r7, #16]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d118      	bne.n	8012c00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d005      	beq.n	8012be2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd8:	685a      	ldr	r2, [r3, #4]
 8012bda:	4b43      	ldr	r3, [pc, #268]	; (8012ce8 <udp_input+0x218>)
 8012bdc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d10e      	bne.n	8012c00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d014      	beq.n	8012c12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	68da      	ldr	r2, [r3, #12]
 8012bec:	6a3b      	ldr	r3, [r7, #32]
 8012bee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012bf0:	4b3e      	ldr	r3, [pc, #248]	; (8012cec <udp_input+0x21c>)
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012bf8:	4a3c      	ldr	r2, [pc, #240]	; (8012cec <udp_input+0x21c>)
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012bfe:	e008      	b.n	8012c12 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	627b      	str	r3, [r7, #36]	; 0x24
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1a7      	bne.n	8012b60 <udp_input+0x90>
 8012c10:	e000      	b.n	8012c14 <udp_input+0x144>
        break;
 8012c12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <udp_input+0x14e>
    pcb = uncon_pcb;
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d002      	beq.n	8012c2a <udp_input+0x15a>
    for_us = 1;
 8012c24:	2301      	movs	r3, #1
 8012c26:	76fb      	strb	r3, [r7, #27]
 8012c28:	e00a      	b.n	8012c40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	4b2d      	ldr	r3, [pc, #180]	; (8012ce8 <udp_input+0x218>)
 8012c32:	695b      	ldr	r3, [r3, #20]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	bf0c      	ite	eq
 8012c38:	2301      	moveq	r3, #1
 8012c3a:	2300      	movne	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012c40:	7efb      	ldrb	r3, [r7, #27]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d041      	beq.n	8012cca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012c46:	2108      	movs	r1, #8
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7f9 f929 	bl	800bea0 <pbuf_remove_header>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00a      	beq.n	8012c6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012c54:	4b20      	ldr	r3, [pc, #128]	; (8012cd8 <udp_input+0x208>)
 8012c56:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012c5a:	4925      	ldr	r1, [pc, #148]	; (8012cf0 <udp_input+0x220>)
 8012c5c:	4820      	ldr	r0, [pc, #128]	; (8012ce0 <udp_input+0x210>)
 8012c5e:	f003 f9a5 	bl	8015fac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7f9 f9a2 	bl	800bfac <pbuf_free>
      goto end;
 8012c68:	e032      	b.n	8012cd0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d012      	beq.n	8012c96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	699b      	ldr	r3, [r3, #24]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	699c      	ldr	r4, [r3, #24]
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	69d8      	ldr	r0, [r3, #28]
 8012c80:	8a3b      	ldrh	r3, [r7, #16]
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	4b1b      	ldr	r3, [pc, #108]	; (8012cf4 <udp_input+0x224>)
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012c8c:	e021      	b.n	8012cd2 <udp_input+0x202>
        pbuf_free(p);
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7f9 f98c 	bl	800bfac <pbuf_free>
        goto end;
 8012c94:	e01c      	b.n	8012cd0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c96:	7cfb      	ldrb	r3, [r7, #19]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d112      	bne.n	8012cc2 <udp_input+0x1f2>
 8012c9c:	4b12      	ldr	r3, [pc, #72]	; (8012ce8 <udp_input+0x218>)
 8012c9e:	695b      	ldr	r3, [r3, #20]
 8012ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ca4:	2be0      	cmp	r3, #224	; 0xe0
 8012ca6:	d00c      	beq.n	8012cc2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012ca8:	4b0f      	ldr	r3, [pc, #60]	; (8012ce8 <udp_input+0x218>)
 8012caa:	899b      	ldrh	r3, [r3, #12]
 8012cac:	3308      	adds	r3, #8
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21b      	sxth	r3, r3
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7f9 f966 	bl	800bf86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012cba:	2103      	movs	r1, #3
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f001 fa17 	bl	80140f0 <icmp_dest_unreach>
      pbuf_free(p);
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7f9 f972 	bl	800bfac <pbuf_free>
  return;
 8012cc8:	e003      	b.n	8012cd2 <udp_input+0x202>
    pbuf_free(p);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7f9 f96e 	bl	800bfac <pbuf_free>
  return;
 8012cd0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012cd2:	372c      	adds	r7, #44	; 0x2c
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd90      	pop	{r4, r7, pc}
 8012cd8:	08019c68 	.word	0x08019c68
 8012cdc:	08019d0c 	.word	0x08019d0c
 8012ce0:	08019cbc 	.word	0x08019cbc
 8012ce4:	08019d24 	.word	0x08019d24
 8012ce8:	20007ed0 	.word	0x20007ed0
 8012cec:	2000b5fc 	.word	0x2000b5fc
 8012cf0:	08019d40 	.word	0x08019d40
 8012cf4:	20007ee0 	.word	0x20007ee0

08012cf8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b086      	sub	sp, #24
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	4613      	mov	r3, r2
 8012d04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d101      	bne.n	8012d10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012d0c:	4b39      	ldr	r3, [pc, #228]	; (8012df4 <udp_bind+0xfc>)
 8012d0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d109      	bne.n	8012d2a <udp_bind+0x32>
 8012d16:	4b38      	ldr	r3, [pc, #224]	; (8012df8 <udp_bind+0x100>)
 8012d18:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012d1c:	4937      	ldr	r1, [pc, #220]	; (8012dfc <udp_bind+0x104>)
 8012d1e:	4838      	ldr	r0, [pc, #224]	; (8012e00 <udp_bind+0x108>)
 8012d20:	f003 f944 	bl	8015fac <iprintf>
 8012d24:	f06f 030f 	mvn.w	r3, #15
 8012d28:	e060      	b.n	8012dec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d2e:	4b35      	ldr	r3, [pc, #212]	; (8012e04 <udp_bind+0x10c>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	617b      	str	r3, [r7, #20]
 8012d34:	e009      	b.n	8012d4a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d102      	bne.n	8012d44 <udp_bind+0x4c>
      rebind = 1;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	74fb      	strb	r3, [r7, #19]
      break;
 8012d42:	e005      	b.n	8012d50 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	617b      	str	r3, [r7, #20]
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d1f2      	bne.n	8012d36 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012d50:	88fb      	ldrh	r3, [r7, #6]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d109      	bne.n	8012d6a <udp_bind+0x72>
    port = udp_new_port();
 8012d56:	f7ff fe1f 	bl	8012998 <udp_new_port>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012d5e:	88fb      	ldrh	r3, [r7, #6]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d12c      	bne.n	8012dbe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012d64:	f06f 0307 	mvn.w	r3, #7
 8012d68:	e040      	b.n	8012dec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d6a:	4b26      	ldr	r3, [pc, #152]	; (8012e04 <udp_bind+0x10c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	617b      	str	r3, [r7, #20]
 8012d70:	e022      	b.n	8012db8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d01b      	beq.n	8012db2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	8a5b      	ldrh	r3, [r3, #18]
 8012d7e:	88fa      	ldrh	r2, [r7, #6]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d116      	bne.n	8012db2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d00d      	beq.n	8012dac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00a      	beq.n	8012dac <udp_bind+0xb4>
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d006      	beq.n	8012dac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012d9e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d003      	beq.n	8012dac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d102      	bne.n	8012db2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012dac:	f06f 0307 	mvn.w	r3, #7
 8012db0:	e01c      	b.n	8012dec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	617b      	str	r3, [r7, #20]
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d1d9      	bne.n	8012d72 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d002      	beq.n	8012dca <udp_bind+0xd2>
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	e000      	b.n	8012dcc <udp_bind+0xd4>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	88fa      	ldrh	r2, [r7, #6]
 8012dd4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012dd6:	7cfb      	ldrb	r3, [r7, #19]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d106      	bne.n	8012dea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <udp_bind+0x10c>)
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012de4:	4a07      	ldr	r2, [pc, #28]	; (8012e04 <udp_bind+0x10c>)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012dea:	2300      	movs	r3, #0
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3718      	adds	r7, #24
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	0801a864 	.word	0x0801a864
 8012df8:	08019c68 	.word	0x08019c68
 8012dfc:	08019f30 	.word	0x08019f30
 8012e00:	08019cbc 	.word	0x08019cbc
 8012e04:	2000b5fc 	.word	0x2000b5fc

08012e08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	4613      	mov	r3, r2
 8012e14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d109      	bne.n	8012e30 <udp_connect+0x28>
 8012e1c:	4b2c      	ldr	r3, [pc, #176]	; (8012ed0 <udp_connect+0xc8>)
 8012e1e:	f240 4235 	movw	r2, #1077	; 0x435
 8012e22:	492c      	ldr	r1, [pc, #176]	; (8012ed4 <udp_connect+0xcc>)
 8012e24:	482c      	ldr	r0, [pc, #176]	; (8012ed8 <udp_connect+0xd0>)
 8012e26:	f003 f8c1 	bl	8015fac <iprintf>
 8012e2a:	f06f 030f 	mvn.w	r3, #15
 8012e2e:	e04b      	b.n	8012ec8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d109      	bne.n	8012e4a <udp_connect+0x42>
 8012e36:	4b26      	ldr	r3, [pc, #152]	; (8012ed0 <udp_connect+0xc8>)
 8012e38:	f240 4236 	movw	r2, #1078	; 0x436
 8012e3c:	4927      	ldr	r1, [pc, #156]	; (8012edc <udp_connect+0xd4>)
 8012e3e:	4826      	ldr	r0, [pc, #152]	; (8012ed8 <udp_connect+0xd0>)
 8012e40:	f003 f8b4 	bl	8015fac <iprintf>
 8012e44:	f06f 030f 	mvn.w	r3, #15
 8012e48:	e03e      	b.n	8012ec8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	8a5b      	ldrh	r3, [r3, #18]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d10f      	bne.n	8012e72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012e52:	68f9      	ldr	r1, [r7, #12]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	8a5b      	ldrh	r3, [r3, #18]
 8012e58:	461a      	mov	r2, r3
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f7ff ff4c 	bl	8012cf8 <udp_bind>
 8012e60:	4603      	mov	r3, r0
 8012e62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012e64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d002      	beq.n	8012e72 <udp_connect+0x6a>
      return err;
 8012e6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e70:	e02a      	b.n	8012ec8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d002      	beq.n	8012e7e <udp_connect+0x76>
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	e000      	b.n	8012e80 <udp_connect+0x78>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	68fa      	ldr	r2, [r7, #12]
 8012e82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	88fa      	ldrh	r2, [r7, #6]
 8012e88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	7c1b      	ldrb	r3, [r3, #16]
 8012e8e:	f043 0304 	orr.w	r3, r3, #4
 8012e92:	b2da      	uxtb	r2, r3
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e98:	4b11      	ldr	r3, [pc, #68]	; (8012ee0 <udp_connect+0xd8>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	e008      	b.n	8012eb2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d101      	bne.n	8012eac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	e00d      	b.n	8012ec8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	617b      	str	r3, [r7, #20]
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d1f3      	bne.n	8012ea0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012eb8:	4b09      	ldr	r3, [pc, #36]	; (8012ee0 <udp_connect+0xd8>)
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012ec0:	4a07      	ldr	r2, [pc, #28]	; (8012ee0 <udp_connect+0xd8>)
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3718      	adds	r7, #24
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	08019c68 	.word	0x08019c68
 8012ed4:	08019f48 	.word	0x08019f48
 8012ed8:	08019cbc 	.word	0x08019cbc
 8012edc:	08019f64 	.word	0x08019f64
 8012ee0:	2000b5fc 	.word	0x2000b5fc

08012ee4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d107      	bne.n	8012f06 <udp_recv+0x22>
 8012ef6:	4b08      	ldr	r3, [pc, #32]	; (8012f18 <udp_recv+0x34>)
 8012ef8:	f240 428a 	movw	r2, #1162	; 0x48a
 8012efc:	4907      	ldr	r1, [pc, #28]	; (8012f1c <udp_recv+0x38>)
 8012efe:	4808      	ldr	r0, [pc, #32]	; (8012f20 <udp_recv+0x3c>)
 8012f00:	f003 f854 	bl	8015fac <iprintf>
 8012f04:	e005      	b.n	8012f12 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	61da      	str	r2, [r3, #28]
}
 8012f12:	3710      	adds	r7, #16
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	08019c68 	.word	0x08019c68
 8012f1c:	08019f9c 	.word	0x08019f9c
 8012f20:	08019cbc 	.word	0x08019cbc

08012f24 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b084      	sub	sp, #16
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d107      	bne.n	8012f42 <udp_remove+0x1e>
 8012f32:	4b19      	ldr	r3, [pc, #100]	; (8012f98 <udp_remove+0x74>)
 8012f34:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012f38:	4918      	ldr	r1, [pc, #96]	; (8012f9c <udp_remove+0x78>)
 8012f3a:	4819      	ldr	r0, [pc, #100]	; (8012fa0 <udp_remove+0x7c>)
 8012f3c:	f003 f836 	bl	8015fac <iprintf>
 8012f40:	e026      	b.n	8012f90 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012f42:	4b18      	ldr	r3, [pc, #96]	; (8012fa4 <udp_remove+0x80>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d105      	bne.n	8012f58 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012f4c:	4b15      	ldr	r3, [pc, #84]	; (8012fa4 <udp_remove+0x80>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	68db      	ldr	r3, [r3, #12]
 8012f52:	4a14      	ldr	r2, [pc, #80]	; (8012fa4 <udp_remove+0x80>)
 8012f54:	6013      	str	r3, [r2, #0]
 8012f56:	e017      	b.n	8012f88 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012f58:	4b12      	ldr	r3, [pc, #72]	; (8012fa4 <udp_remove+0x80>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	60fb      	str	r3, [r7, #12]
 8012f5e:	e010      	b.n	8012f82 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d009      	beq.n	8012f7c <udp_remove+0x58>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d104      	bne.n	8012f7c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68da      	ldr	r2, [r3, #12]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	60da      	str	r2, [r3, #12]
        break;
 8012f7a:	e005      	b.n	8012f88 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1eb      	bne.n	8012f60 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012f88:	6879      	ldr	r1, [r7, #4]
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f7f8 f96a 	bl	800b264 <memp_free>
}
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	08019c68 	.word	0x08019c68
 8012f9c:	08019fb4 	.word	0x08019fb4
 8012fa0:	08019cbc 	.word	0x08019cbc
 8012fa4:	2000b5fc 	.word	0x2000b5fc

08012fa8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012fae:	2000      	movs	r0, #0
 8012fb0:	f7f8 f906 	bl	800b1c0 <memp_malloc>
 8012fb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d007      	beq.n	8012fcc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012fbc:	2220      	movs	r2, #32
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f002 ff41 	bl	8015e48 <memset>
    pcb->ttl = UDP_TTL;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	22ff      	movs	r2, #255	; 0xff
 8012fca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012fcc:	687b      	ldr	r3, [r7, #4]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b084      	sub	sp, #16
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	4603      	mov	r3, r0
 8012fde:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012fe0:	f7ff ffe2 	bl	8012fa8 <udp_new>
 8012fe4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d01e      	beq.n	801303e <udp_netif_ip_addr_changed+0x4e>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d01a      	beq.n	801303e <udp_netif_ip_addr_changed+0x4e>
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d017      	beq.n	801303e <udp_netif_ip_addr_changed+0x4e>
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d013      	beq.n	801303e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013016:	4b0d      	ldr	r3, [pc, #52]	; (801304c <udp_netif_ip_addr_changed+0x5c>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	60fb      	str	r3, [r7, #12]
 801301c:	e00c      	b.n	8013038 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	429a      	cmp	r2, r3
 8013028:	d103      	bne.n	8013032 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	60fb      	str	r3, [r7, #12]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1ef      	bne.n	801301e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801303e:	bf00      	nop
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	2000b5fc 	.word	0x2000b5fc

08013050 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013058:	4915      	ldr	r1, [pc, #84]	; (80130b0 <etharp_free_entry+0x60>)
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	4613      	mov	r3, r2
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	4413      	add	r3, r2
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	440b      	add	r3, r1
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d013      	beq.n	8013094 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801306c:	4910      	ldr	r1, [pc, #64]	; (80130b0 <etharp_free_entry+0x60>)
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	4613      	mov	r3, r2
 8013072:	005b      	lsls	r3, r3, #1
 8013074:	4413      	add	r3, r2
 8013076:	00db      	lsls	r3, r3, #3
 8013078:	440b      	add	r3, r1
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4618      	mov	r0, r3
 801307e:	f7f8 ff95 	bl	800bfac <pbuf_free>
    arp_table[i].q = NULL;
 8013082:	490b      	ldr	r1, [pc, #44]	; (80130b0 <etharp_free_entry+0x60>)
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	4613      	mov	r3, r2
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	4413      	add	r3, r2
 801308c:	00db      	lsls	r3, r3, #3
 801308e:	440b      	add	r3, r1
 8013090:	2200      	movs	r2, #0
 8013092:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013094:	4906      	ldr	r1, [pc, #24]	; (80130b0 <etharp_free_entry+0x60>)
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	4613      	mov	r3, r2
 801309a:	005b      	lsls	r3, r3, #1
 801309c:	4413      	add	r3, r2
 801309e:	00db      	lsls	r3, r3, #3
 80130a0:	440b      	add	r3, r1
 80130a2:	3314      	adds	r3, #20
 80130a4:	2200      	movs	r2, #0
 80130a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80130a8:	bf00      	nop
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	20004b18 	.word	0x20004b18

080130b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130ba:	2300      	movs	r3, #0
 80130bc:	607b      	str	r3, [r7, #4]
 80130be:	e096      	b.n	80131ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80130c0:	494f      	ldr	r1, [pc, #316]	; (8013200 <etharp_tmr+0x14c>)
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	4613      	mov	r3, r2
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	4413      	add	r3, r2
 80130ca:	00db      	lsls	r3, r3, #3
 80130cc:	440b      	add	r3, r1
 80130ce:	3314      	adds	r3, #20
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80130d4:	78fb      	ldrb	r3, [r7, #3]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f000 8086 	beq.w	80131e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80130dc:	4948      	ldr	r1, [pc, #288]	; (8013200 <etharp_tmr+0x14c>)
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	4613      	mov	r3, r2
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	4413      	add	r3, r2
 80130e6:	00db      	lsls	r3, r3, #3
 80130e8:	440b      	add	r3, r1
 80130ea:	3312      	adds	r3, #18
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	3301      	adds	r3, #1
 80130f0:	b298      	uxth	r0, r3
 80130f2:	4943      	ldr	r1, [pc, #268]	; (8013200 <etharp_tmr+0x14c>)
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	4613      	mov	r3, r2
 80130f8:	005b      	lsls	r3, r3, #1
 80130fa:	4413      	add	r3, r2
 80130fc:	00db      	lsls	r3, r3, #3
 80130fe:	440b      	add	r3, r1
 8013100:	3312      	adds	r3, #18
 8013102:	4602      	mov	r2, r0
 8013104:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013106:	493e      	ldr	r1, [pc, #248]	; (8013200 <etharp_tmr+0x14c>)
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	4613      	mov	r3, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	4413      	add	r3, r2
 8013110:	00db      	lsls	r3, r3, #3
 8013112:	440b      	add	r3, r1
 8013114:	3312      	adds	r3, #18
 8013116:	881b      	ldrh	r3, [r3, #0]
 8013118:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801311c:	d215      	bcs.n	801314a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801311e:	4938      	ldr	r1, [pc, #224]	; (8013200 <etharp_tmr+0x14c>)
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	4613      	mov	r3, r2
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	4413      	add	r3, r2
 8013128:	00db      	lsls	r3, r3, #3
 801312a:	440b      	add	r3, r1
 801312c:	3314      	adds	r3, #20
 801312e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013130:	2b01      	cmp	r3, #1
 8013132:	d10e      	bne.n	8013152 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013134:	4932      	ldr	r1, [pc, #200]	; (8013200 <etharp_tmr+0x14c>)
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	4613      	mov	r3, r2
 801313a:	005b      	lsls	r3, r3, #1
 801313c:	4413      	add	r3, r2
 801313e:	00db      	lsls	r3, r3, #3
 8013140:	440b      	add	r3, r1
 8013142:	3312      	adds	r3, #18
 8013144:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013146:	2b04      	cmp	r3, #4
 8013148:	d903      	bls.n	8013152 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f7ff ff80 	bl	8013050 <etharp_free_entry>
 8013150:	e04a      	b.n	80131e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013152:	492b      	ldr	r1, [pc, #172]	; (8013200 <etharp_tmr+0x14c>)
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	4613      	mov	r3, r2
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	4413      	add	r3, r2
 801315c:	00db      	lsls	r3, r3, #3
 801315e:	440b      	add	r3, r1
 8013160:	3314      	adds	r3, #20
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b03      	cmp	r3, #3
 8013166:	d10a      	bne.n	801317e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013168:	4925      	ldr	r1, [pc, #148]	; (8013200 <etharp_tmr+0x14c>)
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	4613      	mov	r3, r2
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	4413      	add	r3, r2
 8013172:	00db      	lsls	r3, r3, #3
 8013174:	440b      	add	r3, r1
 8013176:	3314      	adds	r3, #20
 8013178:	2204      	movs	r2, #4
 801317a:	701a      	strb	r2, [r3, #0]
 801317c:	e034      	b.n	80131e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801317e:	4920      	ldr	r1, [pc, #128]	; (8013200 <etharp_tmr+0x14c>)
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	4613      	mov	r3, r2
 8013184:	005b      	lsls	r3, r3, #1
 8013186:	4413      	add	r3, r2
 8013188:	00db      	lsls	r3, r3, #3
 801318a:	440b      	add	r3, r1
 801318c:	3314      	adds	r3, #20
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b04      	cmp	r3, #4
 8013192:	d10a      	bne.n	80131aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013194:	491a      	ldr	r1, [pc, #104]	; (8013200 <etharp_tmr+0x14c>)
 8013196:	687a      	ldr	r2, [r7, #4]
 8013198:	4613      	mov	r3, r2
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	4413      	add	r3, r2
 801319e:	00db      	lsls	r3, r3, #3
 80131a0:	440b      	add	r3, r1
 80131a2:	3314      	adds	r3, #20
 80131a4:	2202      	movs	r2, #2
 80131a6:	701a      	strb	r2, [r3, #0]
 80131a8:	e01e      	b.n	80131e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80131aa:	4915      	ldr	r1, [pc, #84]	; (8013200 <etharp_tmr+0x14c>)
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	4613      	mov	r3, r2
 80131b0:	005b      	lsls	r3, r3, #1
 80131b2:	4413      	add	r3, r2
 80131b4:	00db      	lsls	r3, r3, #3
 80131b6:	440b      	add	r3, r1
 80131b8:	3314      	adds	r3, #20
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d113      	bne.n	80131e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80131c0:	490f      	ldr	r1, [pc, #60]	; (8013200 <etharp_tmr+0x14c>)
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	4613      	mov	r3, r2
 80131c6:	005b      	lsls	r3, r3, #1
 80131c8:	4413      	add	r3, r2
 80131ca:	00db      	lsls	r3, r3, #3
 80131cc:	440b      	add	r3, r1
 80131ce:	3308      	adds	r3, #8
 80131d0:	6818      	ldr	r0, [r3, #0]
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	4613      	mov	r3, r2
 80131d6:	005b      	lsls	r3, r3, #1
 80131d8:	4413      	add	r3, r2
 80131da:	00db      	lsls	r3, r3, #3
 80131dc:	4a08      	ldr	r2, [pc, #32]	; (8013200 <etharp_tmr+0x14c>)
 80131de:	4413      	add	r3, r2
 80131e0:	3304      	adds	r3, #4
 80131e2:	4619      	mov	r1, r3
 80131e4:	f000 fe6e 	bl	8013ec4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	3301      	adds	r3, #1
 80131ec:	607b      	str	r3, [r7, #4]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2b09      	cmp	r3, #9
 80131f2:	f77f af65 	ble.w	80130c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80131f6:	bf00      	nop
 80131f8:	bf00      	nop
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	20004b18 	.word	0x20004b18

08013204 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b08a      	sub	sp, #40	; 0x28
 8013208:	af00      	add	r7, sp, #0
 801320a:	60f8      	str	r0, [r7, #12]
 801320c:	460b      	mov	r3, r1
 801320e:	607a      	str	r2, [r7, #4]
 8013210:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013212:	230a      	movs	r3, #10
 8013214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013216:	230a      	movs	r3, #10
 8013218:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801321a:	230a      	movs	r3, #10
 801321c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013222:	230a      	movs	r3, #10
 8013224:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013226:	2300      	movs	r3, #0
 8013228:	83bb      	strh	r3, [r7, #28]
 801322a:	2300      	movs	r3, #0
 801322c:	837b      	strh	r3, [r7, #26]
 801322e:	2300      	movs	r3, #0
 8013230:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013232:	2300      	movs	r3, #0
 8013234:	843b      	strh	r3, [r7, #32]
 8013236:	e0ae      	b.n	8013396 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801323c:	49a6      	ldr	r1, [pc, #664]	; (80134d8 <etharp_find_entry+0x2d4>)
 801323e:	4613      	mov	r3, r2
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	4413      	add	r3, r2
 8013244:	00db      	lsls	r3, r3, #3
 8013246:	440b      	add	r3, r1
 8013248:	3314      	adds	r3, #20
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801324e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013252:	2b0a      	cmp	r3, #10
 8013254:	d105      	bne.n	8013262 <etharp_find_entry+0x5e>
 8013256:	7dfb      	ldrb	r3, [r7, #23]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d102      	bne.n	8013262 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801325c:	8c3b      	ldrh	r3, [r7, #32]
 801325e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013260:	e095      	b.n	801338e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013262:	7dfb      	ldrb	r3, [r7, #23]
 8013264:	2b00      	cmp	r3, #0
 8013266:	f000 8092 	beq.w	801338e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801326a:	7dfb      	ldrb	r3, [r7, #23]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d009      	beq.n	8013284 <etharp_find_entry+0x80>
 8013270:	7dfb      	ldrb	r3, [r7, #23]
 8013272:	2b01      	cmp	r3, #1
 8013274:	d806      	bhi.n	8013284 <etharp_find_entry+0x80>
 8013276:	4b99      	ldr	r3, [pc, #612]	; (80134dc <etharp_find_entry+0x2d8>)
 8013278:	f240 1223 	movw	r2, #291	; 0x123
 801327c:	4998      	ldr	r1, [pc, #608]	; (80134e0 <etharp_find_entry+0x2dc>)
 801327e:	4899      	ldr	r0, [pc, #612]	; (80134e4 <etharp_find_entry+0x2e0>)
 8013280:	f002 fe94 	bl	8015fac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d020      	beq.n	80132cc <etharp_find_entry+0xc8>
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6819      	ldr	r1, [r3, #0]
 801328e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013292:	4891      	ldr	r0, [pc, #580]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013294:	4613      	mov	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	4413      	add	r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	4403      	add	r3, r0
 801329e:	3304      	adds	r3, #4
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4299      	cmp	r1, r3
 80132a4:	d112      	bne.n	80132cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d00c      	beq.n	80132c6 <etharp_find_entry+0xc2>
 80132ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132b0:	4989      	ldr	r1, [pc, #548]	; (80134d8 <etharp_find_entry+0x2d4>)
 80132b2:	4613      	mov	r3, r2
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	4413      	add	r3, r2
 80132b8:	00db      	lsls	r3, r3, #3
 80132ba:	440b      	add	r3, r1
 80132bc:	3308      	adds	r3, #8
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d102      	bne.n	80132cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80132c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132ca:	e100      	b.n	80134ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d140      	bne.n	8013354 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80132d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132d6:	4980      	ldr	r1, [pc, #512]	; (80134d8 <etharp_find_entry+0x2d4>)
 80132d8:	4613      	mov	r3, r2
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	4413      	add	r3, r2
 80132de:	00db      	lsls	r3, r3, #3
 80132e0:	440b      	add	r3, r1
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d01a      	beq.n	801331e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80132e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132ec:	497a      	ldr	r1, [pc, #488]	; (80134d8 <etharp_find_entry+0x2d4>)
 80132ee:	4613      	mov	r3, r2
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	4413      	add	r3, r2
 80132f4:	00db      	lsls	r3, r3, #3
 80132f6:	440b      	add	r3, r1
 80132f8:	3312      	adds	r3, #18
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	8bba      	ldrh	r2, [r7, #28]
 80132fe:	429a      	cmp	r2, r3
 8013300:	d845      	bhi.n	801338e <etharp_find_entry+0x18a>
            old_queue = i;
 8013302:	8c3b      	ldrh	r3, [r7, #32]
 8013304:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801330a:	4973      	ldr	r1, [pc, #460]	; (80134d8 <etharp_find_entry+0x2d4>)
 801330c:	4613      	mov	r3, r2
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	4413      	add	r3, r2
 8013312:	00db      	lsls	r3, r3, #3
 8013314:	440b      	add	r3, r1
 8013316:	3312      	adds	r3, #18
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	83bb      	strh	r3, [r7, #28]
 801331c:	e037      	b.n	801338e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801331e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013322:	496d      	ldr	r1, [pc, #436]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013324:	4613      	mov	r3, r2
 8013326:	005b      	lsls	r3, r3, #1
 8013328:	4413      	add	r3, r2
 801332a:	00db      	lsls	r3, r3, #3
 801332c:	440b      	add	r3, r1
 801332e:	3312      	adds	r3, #18
 8013330:	881b      	ldrh	r3, [r3, #0]
 8013332:	8b7a      	ldrh	r2, [r7, #26]
 8013334:	429a      	cmp	r2, r3
 8013336:	d82a      	bhi.n	801338e <etharp_find_entry+0x18a>
            old_pending = i;
 8013338:	8c3b      	ldrh	r3, [r7, #32]
 801333a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801333c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013340:	4965      	ldr	r1, [pc, #404]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013342:	4613      	mov	r3, r2
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4413      	add	r3, r2
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	440b      	add	r3, r1
 801334c:	3312      	adds	r3, #18
 801334e:	881b      	ldrh	r3, [r3, #0]
 8013350:	837b      	strh	r3, [r7, #26]
 8013352:	e01c      	b.n	801338e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013354:	7dfb      	ldrb	r3, [r7, #23]
 8013356:	2b01      	cmp	r3, #1
 8013358:	d919      	bls.n	801338e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801335a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801335e:	495e      	ldr	r1, [pc, #376]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013360:	4613      	mov	r3, r2
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	4413      	add	r3, r2
 8013366:	00db      	lsls	r3, r3, #3
 8013368:	440b      	add	r3, r1
 801336a:	3312      	adds	r3, #18
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	8b3a      	ldrh	r2, [r7, #24]
 8013370:	429a      	cmp	r2, r3
 8013372:	d80c      	bhi.n	801338e <etharp_find_entry+0x18a>
            old_stable = i;
 8013374:	8c3b      	ldrh	r3, [r7, #32]
 8013376:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801337c:	4956      	ldr	r1, [pc, #344]	; (80134d8 <etharp_find_entry+0x2d4>)
 801337e:	4613      	mov	r3, r2
 8013380:	005b      	lsls	r3, r3, #1
 8013382:	4413      	add	r3, r2
 8013384:	00db      	lsls	r3, r3, #3
 8013386:	440b      	add	r3, r1
 8013388:	3312      	adds	r3, #18
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801338e:	8c3b      	ldrh	r3, [r7, #32]
 8013390:	3301      	adds	r3, #1
 8013392:	b29b      	uxth	r3, r3
 8013394:	843b      	strh	r3, [r7, #32]
 8013396:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801339a:	2b09      	cmp	r3, #9
 801339c:	f77f af4c 	ble.w	8013238 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80133a0:	7afb      	ldrb	r3, [r7, #11]
 80133a2:	f003 0302 	and.w	r3, r3, #2
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d108      	bne.n	80133bc <etharp_find_entry+0x1b8>
 80133aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80133ae:	2b0a      	cmp	r3, #10
 80133b0:	d107      	bne.n	80133c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80133b2:	7afb      	ldrb	r3, [r7, #11]
 80133b4:	f003 0301 	and.w	r3, r3, #1
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d102      	bne.n	80133c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80133bc:	f04f 33ff 	mov.w	r3, #4294967295
 80133c0:	e085      	b.n	80134ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80133c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80133c6:	2b09      	cmp	r3, #9
 80133c8:	dc02      	bgt.n	80133d0 <etharp_find_entry+0x1cc>
    i = empty;
 80133ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133cc:	843b      	strh	r3, [r7, #32]
 80133ce:	e039      	b.n	8013444 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80133d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80133d4:	2b09      	cmp	r3, #9
 80133d6:	dc14      	bgt.n	8013402 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80133d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80133dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133e0:	493d      	ldr	r1, [pc, #244]	; (80134d8 <etharp_find_entry+0x2d4>)
 80133e2:	4613      	mov	r3, r2
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	4413      	add	r3, r2
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	440b      	add	r3, r1
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d018      	beq.n	8013424 <etharp_find_entry+0x220>
 80133f2:	4b3a      	ldr	r3, [pc, #232]	; (80134dc <etharp_find_entry+0x2d8>)
 80133f4:	f240 126d 	movw	r2, #365	; 0x16d
 80133f8:	493b      	ldr	r1, [pc, #236]	; (80134e8 <etharp_find_entry+0x2e4>)
 80133fa:	483a      	ldr	r0, [pc, #232]	; (80134e4 <etharp_find_entry+0x2e0>)
 80133fc:	f002 fdd6 	bl	8015fac <iprintf>
 8013400:	e010      	b.n	8013424 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013402:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013406:	2b09      	cmp	r3, #9
 8013408:	dc02      	bgt.n	8013410 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801340a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801340c:	843b      	strh	r3, [r7, #32]
 801340e:	e009      	b.n	8013424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013410:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013414:	2b09      	cmp	r3, #9
 8013416:	dc02      	bgt.n	801341e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013418:	8bfb      	ldrh	r3, [r7, #30]
 801341a:	843b      	strh	r3, [r7, #32]
 801341c:	e002      	b.n	8013424 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801341e:	f04f 33ff 	mov.w	r3, #4294967295
 8013422:	e054      	b.n	80134ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013428:	2b09      	cmp	r3, #9
 801342a:	dd06      	ble.n	801343a <etharp_find_entry+0x236>
 801342c:	4b2b      	ldr	r3, [pc, #172]	; (80134dc <etharp_find_entry+0x2d8>)
 801342e:	f240 127f 	movw	r2, #383	; 0x17f
 8013432:	492e      	ldr	r1, [pc, #184]	; (80134ec <etharp_find_entry+0x2e8>)
 8013434:	482b      	ldr	r0, [pc, #172]	; (80134e4 <etharp_find_entry+0x2e0>)
 8013436:	f002 fdb9 	bl	8015fac <iprintf>
    etharp_free_entry(i);
 801343a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801343e:	4618      	mov	r0, r3
 8013440:	f7ff fe06 	bl	8013050 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013444:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013448:	2b09      	cmp	r3, #9
 801344a:	dd06      	ble.n	801345a <etharp_find_entry+0x256>
 801344c:	4b23      	ldr	r3, [pc, #140]	; (80134dc <etharp_find_entry+0x2d8>)
 801344e:	f240 1283 	movw	r2, #387	; 0x183
 8013452:	4926      	ldr	r1, [pc, #152]	; (80134ec <etharp_find_entry+0x2e8>)
 8013454:	4823      	ldr	r0, [pc, #140]	; (80134e4 <etharp_find_entry+0x2e0>)
 8013456:	f002 fda9 	bl	8015fac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801345a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801345e:	491e      	ldr	r1, [pc, #120]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013460:	4613      	mov	r3, r2
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4413      	add	r3, r2
 8013466:	00db      	lsls	r3, r3, #3
 8013468:	440b      	add	r3, r1
 801346a:	3314      	adds	r3, #20
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d006      	beq.n	8013480 <etharp_find_entry+0x27c>
 8013472:	4b1a      	ldr	r3, [pc, #104]	; (80134dc <etharp_find_entry+0x2d8>)
 8013474:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013478:	491d      	ldr	r1, [pc, #116]	; (80134f0 <etharp_find_entry+0x2ec>)
 801347a:	481a      	ldr	r0, [pc, #104]	; (80134e4 <etharp_find_entry+0x2e0>)
 801347c:	f002 fd96 	bl	8015fac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00b      	beq.n	801349e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6819      	ldr	r1, [r3, #0]
 801348e:	4812      	ldr	r0, [pc, #72]	; (80134d8 <etharp_find_entry+0x2d4>)
 8013490:	4613      	mov	r3, r2
 8013492:	005b      	lsls	r3, r3, #1
 8013494:	4413      	add	r3, r2
 8013496:	00db      	lsls	r3, r3, #3
 8013498:	4403      	add	r3, r0
 801349a:	3304      	adds	r3, #4
 801349c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801349e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134a2:	490d      	ldr	r1, [pc, #52]	; (80134d8 <etharp_find_entry+0x2d4>)
 80134a4:	4613      	mov	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	440b      	add	r3, r1
 80134ae:	3312      	adds	r3, #18
 80134b0:	2200      	movs	r2, #0
 80134b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80134b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134b8:	4907      	ldr	r1, [pc, #28]	; (80134d8 <etharp_find_entry+0x2d4>)
 80134ba:	4613      	mov	r3, r2
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	4413      	add	r3, r2
 80134c0:	00db      	lsls	r3, r3, #3
 80134c2:	440b      	add	r3, r1
 80134c4:	3308      	adds	r3, #8
 80134c6:	687a      	ldr	r2, [r7, #4]
 80134c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80134ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3728      	adds	r7, #40	; 0x28
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	20004b18 	.word	0x20004b18
 80134dc:	08019fcc 	.word	0x08019fcc
 80134e0:	0801a004 	.word	0x0801a004
 80134e4:	0801a044 	.word	0x0801a044
 80134e8:	0801a06c 	.word	0x0801a06c
 80134ec:	0801a084 	.word	0x0801a084
 80134f0:	0801a098 	.word	0x0801a098

080134f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b088      	sub	sp, #32
 80134f8:	af02      	add	r7, sp, #8
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013508:	2b06      	cmp	r3, #6
 801350a:	d006      	beq.n	801351a <etharp_update_arp_entry+0x26>
 801350c:	4b48      	ldr	r3, [pc, #288]	; (8013630 <etharp_update_arp_entry+0x13c>)
 801350e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013512:	4948      	ldr	r1, [pc, #288]	; (8013634 <etharp_update_arp_entry+0x140>)
 8013514:	4848      	ldr	r0, [pc, #288]	; (8013638 <etharp_update_arp_entry+0x144>)
 8013516:	f002 fd49 	bl	8015fac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d012      	beq.n	8013546 <etharp_update_arp_entry+0x52>
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00e      	beq.n	8013546 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	68f9      	ldr	r1, [r7, #12]
 801352e:	4618      	mov	r0, r3
 8013530:	f001 f8fe 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8013534:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013536:	2b00      	cmp	r3, #0
 8013538:	d105      	bne.n	8013546 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013542:	2be0      	cmp	r3, #224	; 0xe0
 8013544:	d102      	bne.n	801354c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013546:	f06f 030f 	mvn.w	r3, #15
 801354a:	e06c      	b.n	8013626 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801354c:	78fb      	ldrb	r3, [r7, #3]
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	4619      	mov	r1, r3
 8013552:	68b8      	ldr	r0, [r7, #8]
 8013554:	f7ff fe56 	bl	8013204 <etharp_find_entry>
 8013558:	4603      	mov	r3, r0
 801355a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801355c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013560:	2b00      	cmp	r3, #0
 8013562:	da02      	bge.n	801356a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013564:	8afb      	ldrh	r3, [r7, #22]
 8013566:	b25b      	sxtb	r3, r3
 8013568:	e05d      	b.n	8013626 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801356a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801356e:	4933      	ldr	r1, [pc, #204]	; (801363c <etharp_update_arp_entry+0x148>)
 8013570:	4613      	mov	r3, r2
 8013572:	005b      	lsls	r3, r3, #1
 8013574:	4413      	add	r3, r2
 8013576:	00db      	lsls	r3, r3, #3
 8013578:	440b      	add	r3, r1
 801357a:	3314      	adds	r3, #20
 801357c:	2202      	movs	r2, #2
 801357e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013580:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013584:	492d      	ldr	r1, [pc, #180]	; (801363c <etharp_update_arp_entry+0x148>)
 8013586:	4613      	mov	r3, r2
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	440b      	add	r3, r1
 8013590:	3308      	adds	r3, #8
 8013592:	68fa      	ldr	r2, [r7, #12]
 8013594:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801359a:	4613      	mov	r3, r2
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	4413      	add	r3, r2
 80135a0:	00db      	lsls	r3, r3, #3
 80135a2:	3308      	adds	r3, #8
 80135a4:	4a25      	ldr	r2, [pc, #148]	; (801363c <etharp_update_arp_entry+0x148>)
 80135a6:	4413      	add	r3, r2
 80135a8:	3304      	adds	r3, #4
 80135aa:	2206      	movs	r2, #6
 80135ac:	6879      	ldr	r1, [r7, #4]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f002 fc22 	bl	8015df8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80135b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135b8:	4920      	ldr	r1, [pc, #128]	; (801363c <etharp_update_arp_entry+0x148>)
 80135ba:	4613      	mov	r3, r2
 80135bc:	005b      	lsls	r3, r3, #1
 80135be:	4413      	add	r3, r2
 80135c0:	00db      	lsls	r3, r3, #3
 80135c2:	440b      	add	r3, r1
 80135c4:	3312      	adds	r3, #18
 80135c6:	2200      	movs	r2, #0
 80135c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80135ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135ce:	491b      	ldr	r1, [pc, #108]	; (801363c <etharp_update_arp_entry+0x148>)
 80135d0:	4613      	mov	r3, r2
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	440b      	add	r3, r1
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d021      	beq.n	8013624 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80135e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135e4:	4915      	ldr	r1, [pc, #84]	; (801363c <etharp_update_arp_entry+0x148>)
 80135e6:	4613      	mov	r3, r2
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	4413      	add	r3, r2
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	440b      	add	r3, r1
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80135f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135f8:	4910      	ldr	r1, [pc, #64]	; (801363c <etharp_update_arp_entry+0x148>)
 80135fa:	4613      	mov	r3, r2
 80135fc:	005b      	lsls	r3, r3, #1
 80135fe:	4413      	add	r3, r2
 8013600:	00db      	lsls	r3, r3, #3
 8013602:	440b      	add	r3, r1
 8013604:	2200      	movs	r2, #0
 8013606:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801360e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6939      	ldr	r1, [r7, #16]
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f002 f8bb 	bl	8015794 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801361e:	6938      	ldr	r0, [r7, #16]
 8013620:	f7f8 fcc4 	bl	800bfac <pbuf_free>
  }
  return ERR_OK;
 8013624:	2300      	movs	r3, #0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3718      	adds	r7, #24
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	08019fcc 	.word	0x08019fcc
 8013634:	0801a0c4 	.word	0x0801a0c4
 8013638:	0801a044 	.word	0x0801a044
 801363c:	20004b18 	.word	0x20004b18

08013640 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013648:	2300      	movs	r3, #0
 801364a:	60fb      	str	r3, [r7, #12]
 801364c:	e01e      	b.n	801368c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801364e:	4913      	ldr	r1, [pc, #76]	; (801369c <etharp_cleanup_netif+0x5c>)
 8013650:	68fa      	ldr	r2, [r7, #12]
 8013652:	4613      	mov	r3, r2
 8013654:	005b      	lsls	r3, r3, #1
 8013656:	4413      	add	r3, r2
 8013658:	00db      	lsls	r3, r3, #3
 801365a:	440b      	add	r3, r1
 801365c:	3314      	adds	r3, #20
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013662:	7afb      	ldrb	r3, [r7, #11]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d00e      	beq.n	8013686 <etharp_cleanup_netif+0x46>
 8013668:	490c      	ldr	r1, [pc, #48]	; (801369c <etharp_cleanup_netif+0x5c>)
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	4613      	mov	r3, r2
 801366e:	005b      	lsls	r3, r3, #1
 8013670:	4413      	add	r3, r2
 8013672:	00db      	lsls	r3, r3, #3
 8013674:	440b      	add	r3, r1
 8013676:	3308      	adds	r3, #8
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	429a      	cmp	r2, r3
 801367e:	d102      	bne.n	8013686 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f7ff fce5 	bl	8013050 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	3301      	adds	r3, #1
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2b09      	cmp	r3, #9
 8013690:	dddd      	ble.n	801364e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013692:	bf00      	nop
 8013694:	bf00      	nop
 8013696:	3710      	adds	r7, #16
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	20004b18 	.word	0x20004b18

080136a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80136a0:	b5b0      	push	{r4, r5, r7, lr}
 80136a2:	b08a      	sub	sp, #40	; 0x28
 80136a4:	af04      	add	r7, sp, #16
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d107      	bne.n	80136c0 <etharp_input+0x20>
 80136b0:	4b3d      	ldr	r3, [pc, #244]	; (80137a8 <etharp_input+0x108>)
 80136b2:	f240 228a 	movw	r2, #650	; 0x28a
 80136b6:	493d      	ldr	r1, [pc, #244]	; (80137ac <etharp_input+0x10c>)
 80136b8:	483d      	ldr	r0, [pc, #244]	; (80137b0 <etharp_input+0x110>)
 80136ba:	f002 fc77 	bl	8015fac <iprintf>
 80136be:	e06f      	b.n	80137a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	881b      	ldrh	r3, [r3, #0]
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136d0:	d10c      	bne.n	80136ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136d6:	2b06      	cmp	r3, #6
 80136d8:	d108      	bne.n	80136ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136de:	2b04      	cmp	r3, #4
 80136e0:	d104      	bne.n	80136ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	885b      	ldrh	r3, [r3, #2]
 80136e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136e8:	2b08      	cmp	r3, #8
 80136ea:	d003      	beq.n	80136f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7f8 fc5d 	bl	800bfac <pbuf_free>
    return;
 80136f2:	e055      	b.n	80137a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	330e      	adds	r3, #14
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	3318      	adds	r3, #24
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	3304      	adds	r3, #4
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d102      	bne.n	8013714 <etharp_input+0x74>
    for_us = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	75fb      	strb	r3, [r7, #23]
 8013712:	e009      	b.n	8013728 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	3304      	adds	r3, #4
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	bf0c      	ite	eq
 8013720:	2301      	moveq	r3, #1
 8013722:	2300      	movne	r3, #0
 8013724:	b2db      	uxtb	r3, r3
 8013726:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	f103 0208 	add.w	r2, r3, #8
 801372e:	7dfb      	ldrb	r3, [r7, #23]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d001      	beq.n	8013738 <etharp_input+0x98>
 8013734:	2301      	movs	r3, #1
 8013736:	e000      	b.n	801373a <etharp_input+0x9a>
 8013738:	2302      	movs	r3, #2
 801373a:	f107 010c 	add.w	r1, r7, #12
 801373e:	6838      	ldr	r0, [r7, #0]
 8013740:	f7ff fed8 	bl	80134f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	88db      	ldrh	r3, [r3, #6]
 8013748:	b29b      	uxth	r3, r3
 801374a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801374e:	d003      	beq.n	8013758 <etharp_input+0xb8>
 8013750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013754:	d01e      	beq.n	8013794 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013756:	e020      	b.n	801379a <etharp_input+0xfa>
      if (for_us) {
 8013758:	7dfb      	ldrb	r3, [r7, #23]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d01c      	beq.n	8013798 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013774:	693a      	ldr	r2, [r7, #16]
 8013776:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013778:	2102      	movs	r1, #2
 801377a:	9103      	str	r1, [sp, #12]
 801377c:	f107 010c 	add.w	r1, r7, #12
 8013780:	9102      	str	r1, [sp, #8]
 8013782:	9201      	str	r2, [sp, #4]
 8013784:	9300      	str	r3, [sp, #0]
 8013786:	462b      	mov	r3, r5
 8013788:	4622      	mov	r2, r4
 801378a:	4601      	mov	r1, r0
 801378c:	6838      	ldr	r0, [r7, #0]
 801378e:	f000 faeb 	bl	8013d68 <etharp_raw>
      break;
 8013792:	e001      	b.n	8013798 <etharp_input+0xf8>
      break;
 8013794:	bf00      	nop
 8013796:	e000      	b.n	801379a <etharp_input+0xfa>
      break;
 8013798:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f7f8 fc06 	bl	800bfac <pbuf_free>
}
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bdb0      	pop	{r4, r5, r7, pc}
 80137a6:	bf00      	nop
 80137a8:	08019fcc 	.word	0x08019fcc
 80137ac:	0801a11c 	.word	0x0801a11c
 80137b0:	0801a044 	.word	0x0801a044

080137b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af02      	add	r7, sp, #8
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	4613      	mov	r3, r2
 80137c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80137c2:	79fa      	ldrb	r2, [r7, #7]
 80137c4:	4944      	ldr	r1, [pc, #272]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 80137c6:	4613      	mov	r3, r2
 80137c8:	005b      	lsls	r3, r3, #1
 80137ca:	4413      	add	r3, r2
 80137cc:	00db      	lsls	r3, r3, #3
 80137ce:	440b      	add	r3, r1
 80137d0:	3314      	adds	r3, #20
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d806      	bhi.n	80137e6 <etharp_output_to_arp_index+0x32>
 80137d8:	4b40      	ldr	r3, [pc, #256]	; (80138dc <etharp_output_to_arp_index+0x128>)
 80137da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80137de:	4940      	ldr	r1, [pc, #256]	; (80138e0 <etharp_output_to_arp_index+0x12c>)
 80137e0:	4840      	ldr	r0, [pc, #256]	; (80138e4 <etharp_output_to_arp_index+0x130>)
 80137e2:	f002 fbe3 	bl	8015fac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80137e6:	79fa      	ldrb	r2, [r7, #7]
 80137e8:	493b      	ldr	r1, [pc, #236]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 80137ea:	4613      	mov	r3, r2
 80137ec:	005b      	lsls	r3, r3, #1
 80137ee:	4413      	add	r3, r2
 80137f0:	00db      	lsls	r3, r3, #3
 80137f2:	440b      	add	r3, r1
 80137f4:	3314      	adds	r3, #20
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	2b02      	cmp	r3, #2
 80137fa:	d153      	bne.n	80138a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80137fc:	79fa      	ldrb	r2, [r7, #7]
 80137fe:	4936      	ldr	r1, [pc, #216]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 8013800:	4613      	mov	r3, r2
 8013802:	005b      	lsls	r3, r3, #1
 8013804:	4413      	add	r3, r2
 8013806:	00db      	lsls	r3, r3, #3
 8013808:	440b      	add	r3, r1
 801380a:	3312      	adds	r3, #18
 801380c:	881b      	ldrh	r3, [r3, #0]
 801380e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013812:	d919      	bls.n	8013848 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013814:	79fa      	ldrb	r2, [r7, #7]
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	4a2e      	ldr	r2, [pc, #184]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 8013820:	4413      	add	r3, r2
 8013822:	3304      	adds	r3, #4
 8013824:	4619      	mov	r1, r3
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f000 fb4c 	bl	8013ec4 <etharp_request>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d138      	bne.n	80138a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013832:	79fa      	ldrb	r2, [r7, #7]
 8013834:	4928      	ldr	r1, [pc, #160]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 8013836:	4613      	mov	r3, r2
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	4413      	add	r3, r2
 801383c:	00db      	lsls	r3, r3, #3
 801383e:	440b      	add	r3, r1
 8013840:	3314      	adds	r3, #20
 8013842:	2203      	movs	r2, #3
 8013844:	701a      	strb	r2, [r3, #0]
 8013846:	e02d      	b.n	80138a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013848:	79fa      	ldrb	r2, [r7, #7]
 801384a:	4923      	ldr	r1, [pc, #140]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 801384c:	4613      	mov	r3, r2
 801384e:	005b      	lsls	r3, r3, #1
 8013850:	4413      	add	r3, r2
 8013852:	00db      	lsls	r3, r3, #3
 8013854:	440b      	add	r3, r1
 8013856:	3312      	adds	r3, #18
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801385e:	d321      	bcc.n	80138a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013860:	79fa      	ldrb	r2, [r7, #7]
 8013862:	4613      	mov	r3, r2
 8013864:	005b      	lsls	r3, r3, #1
 8013866:	4413      	add	r3, r2
 8013868:	00db      	lsls	r3, r3, #3
 801386a:	4a1b      	ldr	r2, [pc, #108]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 801386c:	4413      	add	r3, r2
 801386e:	1d19      	adds	r1, r3, #4
 8013870:	79fa      	ldrb	r2, [r7, #7]
 8013872:	4613      	mov	r3, r2
 8013874:	005b      	lsls	r3, r3, #1
 8013876:	4413      	add	r3, r2
 8013878:	00db      	lsls	r3, r3, #3
 801387a:	3308      	adds	r3, #8
 801387c:	4a16      	ldr	r2, [pc, #88]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 801387e:	4413      	add	r3, r2
 8013880:	3304      	adds	r3, #4
 8013882:	461a      	mov	r2, r3
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f000 fafb 	bl	8013e80 <etharp_request_dst>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d109      	bne.n	80138a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013890:	79fa      	ldrb	r2, [r7, #7]
 8013892:	4911      	ldr	r1, [pc, #68]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 8013894:	4613      	mov	r3, r2
 8013896:	005b      	lsls	r3, r3, #1
 8013898:	4413      	add	r3, r2
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	440b      	add	r3, r1
 801389e:	3314      	adds	r3, #20
 80138a0:	2203      	movs	r2, #3
 80138a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80138aa:	79fa      	ldrb	r2, [r7, #7]
 80138ac:	4613      	mov	r3, r2
 80138ae:	005b      	lsls	r3, r3, #1
 80138b0:	4413      	add	r3, r2
 80138b2:	00db      	lsls	r3, r3, #3
 80138b4:	3308      	adds	r3, #8
 80138b6:	4a08      	ldr	r2, [pc, #32]	; (80138d8 <etharp_output_to_arp_index+0x124>)
 80138b8:	4413      	add	r3, r2
 80138ba:	3304      	adds	r3, #4
 80138bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138c0:	9200      	str	r2, [sp, #0]
 80138c2:	460a      	mov	r2, r1
 80138c4:	68b9      	ldr	r1, [r7, #8]
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f001 ff64 	bl	8015794 <ethernet_output>
 80138cc:	4603      	mov	r3, r0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	20004b18 	.word	0x20004b18
 80138dc:	08019fcc 	.word	0x08019fcc
 80138e0:	0801a13c 	.word	0x0801a13c
 80138e4:	0801a044 	.word	0x0801a044

080138e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b08a      	sub	sp, #40	; 0x28
 80138ec:	af02      	add	r7, sp, #8
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d106      	bne.n	801390c <etharp_output+0x24>
 80138fe:	4b73      	ldr	r3, [pc, #460]	; (8013acc <etharp_output+0x1e4>)
 8013900:	f240 321e 	movw	r2, #798	; 0x31e
 8013904:	4972      	ldr	r1, [pc, #456]	; (8013ad0 <etharp_output+0x1e8>)
 8013906:	4873      	ldr	r0, [pc, #460]	; (8013ad4 <etharp_output+0x1ec>)
 8013908:	f002 fb50 	bl	8015fac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d106      	bne.n	8013920 <etharp_output+0x38>
 8013912:	4b6e      	ldr	r3, [pc, #440]	; (8013acc <etharp_output+0x1e4>)
 8013914:	f240 321f 	movw	r2, #799	; 0x31f
 8013918:	496f      	ldr	r1, [pc, #444]	; (8013ad8 <etharp_output+0x1f0>)
 801391a:	486e      	ldr	r0, [pc, #440]	; (8013ad4 <etharp_output+0x1ec>)
 801391c:	f002 fb46 	bl	8015fac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d106      	bne.n	8013934 <etharp_output+0x4c>
 8013926:	4b69      	ldr	r3, [pc, #420]	; (8013acc <etharp_output+0x1e4>)
 8013928:	f44f 7248 	mov.w	r2, #800	; 0x320
 801392c:	496b      	ldr	r1, [pc, #428]	; (8013adc <etharp_output+0x1f4>)
 801392e:	4869      	ldr	r0, [pc, #420]	; (8013ad4 <etharp_output+0x1ec>)
 8013930:	f002 fb3c 	bl	8015fac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68f9      	ldr	r1, [r7, #12]
 801393a:	4618      	mov	r0, r3
 801393c:	f000 fef8 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d002      	beq.n	801394c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013946:	4b66      	ldr	r3, [pc, #408]	; (8013ae0 <etharp_output+0x1f8>)
 8013948:	61fb      	str	r3, [r7, #28]
 801394a:	e0af      	b.n	8013aac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013954:	2be0      	cmp	r3, #224	; 0xe0
 8013956:	d118      	bne.n	801398a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013958:	2301      	movs	r3, #1
 801395a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801395c:	2300      	movs	r3, #0
 801395e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013960:	235e      	movs	r3, #94	; 0x5e
 8013962:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	3301      	adds	r3, #1
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801396e:	b2db      	uxtb	r3, r3
 8013970:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	3302      	adds	r3, #2
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	3303      	adds	r3, #3
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013982:	f107 0310 	add.w	r3, r7, #16
 8013986:	61fb      	str	r3, [r7, #28]
 8013988:	e090      	b.n	8013aac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	3304      	adds	r3, #4
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	405a      	eors	r2, r3
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	3308      	adds	r3, #8
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4013      	ands	r3, r2
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d012      	beq.n	80139c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80139a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d00b      	beq.n	80139c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	330c      	adds	r3, #12
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d003      	beq.n	80139c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	330c      	adds	r3, #12
 80139be:	61bb      	str	r3, [r7, #24]
 80139c0:	e002      	b.n	80139c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80139c2:	f06f 0303 	mvn.w	r3, #3
 80139c6:	e07d      	b.n	8013ac4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139c8:	4b46      	ldr	r3, [pc, #280]	; (8013ae4 <etharp_output+0x1fc>)
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	4619      	mov	r1, r3
 80139ce:	4a46      	ldr	r2, [pc, #280]	; (8013ae8 <etharp_output+0x200>)
 80139d0:	460b      	mov	r3, r1
 80139d2:	005b      	lsls	r3, r3, #1
 80139d4:	440b      	add	r3, r1
 80139d6:	00db      	lsls	r3, r3, #3
 80139d8:	4413      	add	r3, r2
 80139da:	3314      	adds	r3, #20
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d925      	bls.n	8013a2e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80139e2:	4b40      	ldr	r3, [pc, #256]	; (8013ae4 <etharp_output+0x1fc>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	4619      	mov	r1, r3
 80139e8:	4a3f      	ldr	r2, [pc, #252]	; (8013ae8 <etharp_output+0x200>)
 80139ea:	460b      	mov	r3, r1
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	440b      	add	r3, r1
 80139f0:	00db      	lsls	r3, r3, #3
 80139f2:	4413      	add	r3, r2
 80139f4:	3308      	adds	r3, #8
 80139f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139f8:	68fa      	ldr	r2, [r7, #12]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d117      	bne.n	8013a2e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	4b38      	ldr	r3, [pc, #224]	; (8013ae4 <etharp_output+0x1fc>)
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	4618      	mov	r0, r3
 8013a08:	4937      	ldr	r1, [pc, #220]	; (8013ae8 <etharp_output+0x200>)
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	005b      	lsls	r3, r3, #1
 8013a0e:	4403      	add	r3, r0
 8013a10:	00db      	lsls	r3, r3, #3
 8013a12:	440b      	add	r3, r1
 8013a14:	3304      	adds	r3, #4
 8013a16:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d108      	bne.n	8013a2e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013a1c:	4b31      	ldr	r3, [pc, #196]	; (8013ae4 <etharp_output+0x1fc>)
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	461a      	mov	r2, r3
 8013a22:	68b9      	ldr	r1, [r7, #8]
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7ff fec5 	bl	80137b4 <etharp_output_to_arp_index>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	e04a      	b.n	8013ac4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a2e:	2300      	movs	r3, #0
 8013a30:	75fb      	strb	r3, [r7, #23]
 8013a32:	e031      	b.n	8013a98 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a34:	7dfa      	ldrb	r2, [r7, #23]
 8013a36:	492c      	ldr	r1, [pc, #176]	; (8013ae8 <etharp_output+0x200>)
 8013a38:	4613      	mov	r3, r2
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	440b      	add	r3, r1
 8013a42:	3314      	adds	r3, #20
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	d923      	bls.n	8013a92 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013a4a:	7dfa      	ldrb	r2, [r7, #23]
 8013a4c:	4926      	ldr	r1, [pc, #152]	; (8013ae8 <etharp_output+0x200>)
 8013a4e:	4613      	mov	r3, r2
 8013a50:	005b      	lsls	r3, r3, #1
 8013a52:	4413      	add	r3, r2
 8013a54:	00db      	lsls	r3, r3, #3
 8013a56:	440b      	add	r3, r1
 8013a58:	3308      	adds	r3, #8
 8013a5a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d117      	bne.n	8013a92 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	6819      	ldr	r1, [r3, #0]
 8013a66:	7dfa      	ldrb	r2, [r7, #23]
 8013a68:	481f      	ldr	r0, [pc, #124]	; (8013ae8 <etharp_output+0x200>)
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	005b      	lsls	r3, r3, #1
 8013a6e:	4413      	add	r3, r2
 8013a70:	00db      	lsls	r3, r3, #3
 8013a72:	4403      	add	r3, r0
 8013a74:	3304      	adds	r3, #4
 8013a76:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013a78:	4299      	cmp	r1, r3
 8013a7a:	d10a      	bne.n	8013a92 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013a7c:	4a19      	ldr	r2, [pc, #100]	; (8013ae4 <etharp_output+0x1fc>)
 8013a7e:	7dfb      	ldrb	r3, [r7, #23]
 8013a80:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013a82:	7dfb      	ldrb	r3, [r7, #23]
 8013a84:	461a      	mov	r2, r3
 8013a86:	68b9      	ldr	r1, [r7, #8]
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f7ff fe93 	bl	80137b4 <etharp_output_to_arp_index>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	e018      	b.n	8013ac4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a92:	7dfb      	ldrb	r3, [r7, #23]
 8013a94:	3301      	adds	r3, #1
 8013a96:	75fb      	strb	r3, [r7, #23]
 8013a98:	7dfb      	ldrb	r3, [r7, #23]
 8013a9a:	2b09      	cmp	r3, #9
 8013a9c:	d9ca      	bls.n	8013a34 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	69b9      	ldr	r1, [r7, #24]
 8013aa2:	68f8      	ldr	r0, [r7, #12]
 8013aa4:	f000 f822 	bl	8013aec <etharp_query>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	e00b      	b.n	8013ac4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	68b9      	ldr	r1, [r7, #8]
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f001 fe69 	bl	8015794 <ethernet_output>
 8013ac2:	4603      	mov	r3, r0
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3720      	adds	r7, #32
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	08019fcc 	.word	0x08019fcc
 8013ad0:	0801a11c 	.word	0x0801a11c
 8013ad4:	0801a044 	.word	0x0801a044
 8013ad8:	0801a16c 	.word	0x0801a16c
 8013adc:	0801a10c 	.word	0x0801a10c
 8013ae0:	0801a868 	.word	0x0801a868
 8013ae4:	20004c08 	.word	0x20004c08
 8013ae8:	20004b18 	.word	0x20004b18

08013aec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b08c      	sub	sp, #48	; 0x30
 8013af0:	af02      	add	r7, sp, #8
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3326      	adds	r3, #38	; 0x26
 8013afc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013afe:	23ff      	movs	r3, #255	; 0xff
 8013b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	68f9      	ldr	r1, [r7, #12]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f000 fe0e 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10c      	bne.n	8013b34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b22:	2be0      	cmp	r3, #224	; 0xe0
 8013b24:	d006      	beq.n	8013b34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d003      	beq.n	8013b34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d102      	bne.n	8013b3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013b34:	f06f 030f 	mvn.w	r3, #15
 8013b38:	e101      	b.n	8013d3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	2101      	movs	r1, #1
 8013b3e:	68b8      	ldr	r0, [r7, #8]
 8013b40:	f7ff fb60 	bl	8013204 <etharp_find_entry>
 8013b44:	4603      	mov	r3, r0
 8013b46:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	da02      	bge.n	8013b56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013b50:	8a7b      	ldrh	r3, [r7, #18]
 8013b52:	b25b      	sxtb	r3, r3
 8013b54:	e0f3      	b.n	8013d3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013b56:	8a7b      	ldrh	r3, [r7, #18]
 8013b58:	2b7e      	cmp	r3, #126	; 0x7e
 8013b5a:	d906      	bls.n	8013b6a <etharp_query+0x7e>
 8013b5c:	4b7a      	ldr	r3, [pc, #488]	; (8013d48 <etharp_query+0x25c>)
 8013b5e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013b62:	497a      	ldr	r1, [pc, #488]	; (8013d4c <etharp_query+0x260>)
 8013b64:	487a      	ldr	r0, [pc, #488]	; (8013d50 <etharp_query+0x264>)
 8013b66:	f002 fa21 	bl	8015fac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013b6a:	8a7b      	ldrh	r3, [r7, #18]
 8013b6c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013b6e:	7c7a      	ldrb	r2, [r7, #17]
 8013b70:	4978      	ldr	r1, [pc, #480]	; (8013d54 <etharp_query+0x268>)
 8013b72:	4613      	mov	r3, r2
 8013b74:	005b      	lsls	r3, r3, #1
 8013b76:	4413      	add	r3, r2
 8013b78:	00db      	lsls	r3, r3, #3
 8013b7a:	440b      	add	r3, r1
 8013b7c:	3314      	adds	r3, #20
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d115      	bne.n	8013bb0 <etharp_query+0xc4>
    is_new_entry = 1;
 8013b84:	2301      	movs	r3, #1
 8013b86:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013b88:	7c7a      	ldrb	r2, [r7, #17]
 8013b8a:	4972      	ldr	r1, [pc, #456]	; (8013d54 <etharp_query+0x268>)
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	4413      	add	r3, r2
 8013b92:	00db      	lsls	r3, r3, #3
 8013b94:	440b      	add	r3, r1
 8013b96:	3314      	adds	r3, #20
 8013b98:	2201      	movs	r2, #1
 8013b9a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013b9c:	7c7a      	ldrb	r2, [r7, #17]
 8013b9e:	496d      	ldr	r1, [pc, #436]	; (8013d54 <etharp_query+0x268>)
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3308      	adds	r3, #8
 8013bac:	68fa      	ldr	r2, [r7, #12]
 8013bae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013bb0:	7c7a      	ldrb	r2, [r7, #17]
 8013bb2:	4968      	ldr	r1, [pc, #416]	; (8013d54 <etharp_query+0x268>)
 8013bb4:	4613      	mov	r3, r2
 8013bb6:	005b      	lsls	r3, r3, #1
 8013bb8:	4413      	add	r3, r2
 8013bba:	00db      	lsls	r3, r3, #3
 8013bbc:	440b      	add	r3, r1
 8013bbe:	3314      	adds	r3, #20
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	2b01      	cmp	r3, #1
 8013bc4:	d011      	beq.n	8013bea <etharp_query+0xfe>
 8013bc6:	7c7a      	ldrb	r2, [r7, #17]
 8013bc8:	4962      	ldr	r1, [pc, #392]	; (8013d54 <etharp_query+0x268>)
 8013bca:	4613      	mov	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4413      	add	r3, r2
 8013bd0:	00db      	lsls	r3, r3, #3
 8013bd2:	440b      	add	r3, r1
 8013bd4:	3314      	adds	r3, #20
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d806      	bhi.n	8013bea <etharp_query+0xfe>
 8013bdc:	4b5a      	ldr	r3, [pc, #360]	; (8013d48 <etharp_query+0x25c>)
 8013bde:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013be2:	495d      	ldr	r1, [pc, #372]	; (8013d58 <etharp_query+0x26c>)
 8013be4:	485a      	ldr	r0, [pc, #360]	; (8013d50 <etharp_query+0x264>)
 8013be6:	f002 f9e1 	bl	8015fac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013bea:	6a3b      	ldr	r3, [r7, #32]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d102      	bne.n	8013bf6 <etharp_query+0x10a>
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d10c      	bne.n	8013c10 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013bf6:	68b9      	ldr	r1, [r7, #8]
 8013bf8:	68f8      	ldr	r0, [r7, #12]
 8013bfa:	f000 f963 	bl	8013ec4 <etharp_request>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d102      	bne.n	8013c10 <etharp_query+0x124>
      return result;
 8013c0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c0e:	e096      	b.n	8013d3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <etharp_query+0x138>
 8013c16:	4b4c      	ldr	r3, [pc, #304]	; (8013d48 <etharp_query+0x25c>)
 8013c18:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013c1c:	494f      	ldr	r1, [pc, #316]	; (8013d5c <etharp_query+0x270>)
 8013c1e:	484c      	ldr	r0, [pc, #304]	; (8013d50 <etharp_query+0x264>)
 8013c20:	f002 f9c4 	bl	8015fac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013c24:	7c7a      	ldrb	r2, [r7, #17]
 8013c26:	494b      	ldr	r1, [pc, #300]	; (8013d54 <etharp_query+0x268>)
 8013c28:	4613      	mov	r3, r2
 8013c2a:	005b      	lsls	r3, r3, #1
 8013c2c:	4413      	add	r3, r2
 8013c2e:	00db      	lsls	r3, r3, #3
 8013c30:	440b      	add	r3, r1
 8013c32:	3314      	adds	r3, #20
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	d917      	bls.n	8013c6a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013c3a:	4a49      	ldr	r2, [pc, #292]	; (8013d60 <etharp_query+0x274>)
 8013c3c:	7c7b      	ldrb	r3, [r7, #17]
 8013c3e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013c40:	7c7a      	ldrb	r2, [r7, #17]
 8013c42:	4613      	mov	r3, r2
 8013c44:	005b      	lsls	r3, r3, #1
 8013c46:	4413      	add	r3, r2
 8013c48:	00db      	lsls	r3, r3, #3
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	4a41      	ldr	r2, [pc, #260]	; (8013d54 <etharp_query+0x268>)
 8013c4e:	4413      	add	r3, r2
 8013c50:	3304      	adds	r3, #4
 8013c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c56:	9200      	str	r2, [sp, #0]
 8013c58:	697a      	ldr	r2, [r7, #20]
 8013c5a:	6879      	ldr	r1, [r7, #4]
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	f001 fd99 	bl	8015794 <ethernet_output>
 8013c62:	4603      	mov	r3, r0
 8013c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c68:	e067      	b.n	8013d3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c6a:	7c7a      	ldrb	r2, [r7, #17]
 8013c6c:	4939      	ldr	r1, [pc, #228]	; (8013d54 <etharp_query+0x268>)
 8013c6e:	4613      	mov	r3, r2
 8013c70:	005b      	lsls	r3, r3, #1
 8013c72:	4413      	add	r3, r2
 8013c74:	00db      	lsls	r3, r3, #3
 8013c76:	440b      	add	r3, r1
 8013c78:	3314      	adds	r3, #20
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d15c      	bne.n	8013d3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013c88:	e01c      	b.n	8013cc4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	895a      	ldrh	r2, [r3, #10]
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	891b      	ldrh	r3, [r3, #8]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d10a      	bne.n	8013cac <etharp_query+0x1c0>
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d006      	beq.n	8013cac <etharp_query+0x1c0>
 8013c9e:	4b2a      	ldr	r3, [pc, #168]	; (8013d48 <etharp_query+0x25c>)
 8013ca0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013ca4:	492f      	ldr	r1, [pc, #188]	; (8013d64 <etharp_query+0x278>)
 8013ca6:	482a      	ldr	r0, [pc, #168]	; (8013d50 <etharp_query+0x264>)
 8013ca8:	f002 f980 	bl	8015fac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	7b1b      	ldrb	r3, [r3, #12]
 8013cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d002      	beq.n	8013cbe <etharp_query+0x1d2>
        copy_needed = 1;
 8013cb8:	2301      	movs	r3, #1
 8013cba:	61bb      	str	r3, [r7, #24]
        break;
 8013cbc:	e005      	b.n	8013cca <etharp_query+0x1de>
      }
      p = p->next;
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d1df      	bne.n	8013c8a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d007      	beq.n	8013ce0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013cd6:	200e      	movs	r0, #14
 8013cd8:	f7f8 fbd0 	bl	800c47c <pbuf_clone>
 8013cdc:	61f8      	str	r0, [r7, #28]
 8013cde:	e004      	b.n	8013cea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ce4:	69f8      	ldr	r0, [r7, #28]
 8013ce6:	f7f8 fa07 	bl	800c0f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d021      	beq.n	8013d34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013cf0:	7c7a      	ldrb	r2, [r7, #17]
 8013cf2:	4918      	ldr	r1, [pc, #96]	; (8013d54 <etharp_query+0x268>)
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	005b      	lsls	r3, r3, #1
 8013cf8:	4413      	add	r3, r2
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	440b      	add	r3, r1
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d00a      	beq.n	8013d1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013d04:	7c7a      	ldrb	r2, [r7, #17]
 8013d06:	4913      	ldr	r1, [pc, #76]	; (8013d54 <etharp_query+0x268>)
 8013d08:	4613      	mov	r3, r2
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	4413      	add	r3, r2
 8013d0e:	00db      	lsls	r3, r3, #3
 8013d10:	440b      	add	r3, r1
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7f8 f949 	bl	800bfac <pbuf_free>
      }
      arp_table[i].q = p;
 8013d1a:	7c7a      	ldrb	r2, [r7, #17]
 8013d1c:	490d      	ldr	r1, [pc, #52]	; (8013d54 <etharp_query+0x268>)
 8013d1e:	4613      	mov	r3, r2
 8013d20:	005b      	lsls	r3, r3, #1
 8013d22:	4413      	add	r3, r2
 8013d24:	00db      	lsls	r3, r3, #3
 8013d26:	440b      	add	r3, r1
 8013d28:	69fa      	ldr	r2, [r7, #28]
 8013d2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d32:	e002      	b.n	8013d3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013d34:	23ff      	movs	r3, #255	; 0xff
 8013d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3728      	adds	r7, #40	; 0x28
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	08019fcc 	.word	0x08019fcc
 8013d4c:	0801a178 	.word	0x0801a178
 8013d50:	0801a044 	.word	0x0801a044
 8013d54:	20004b18 	.word	0x20004b18
 8013d58:	0801a188 	.word	0x0801a188
 8013d5c:	0801a16c 	.word	0x0801a16c
 8013d60:	20004c08 	.word	0x20004c08
 8013d64:	0801a1b0 	.word	0x0801a1b0

08013d68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08a      	sub	sp, #40	; 0x28
 8013d6c:	af02      	add	r7, sp, #8
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
 8013d74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013d76:	2300      	movs	r3, #0
 8013d78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d106      	bne.n	8013d8e <etharp_raw+0x26>
 8013d80:	4b3a      	ldr	r3, [pc, #232]	; (8013e6c <etharp_raw+0x104>)
 8013d82:	f240 4257 	movw	r2, #1111	; 0x457
 8013d86:	493a      	ldr	r1, [pc, #232]	; (8013e70 <etharp_raw+0x108>)
 8013d88:	483a      	ldr	r0, [pc, #232]	; (8013e74 <etharp_raw+0x10c>)
 8013d8a:	f002 f90f 	bl	8015fac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d92:	211c      	movs	r1, #28
 8013d94:	200e      	movs	r0, #14
 8013d96:	f7f7 fe25 	bl	800b9e4 <pbuf_alloc>
 8013d9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d102      	bne.n	8013da8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013da2:	f04f 33ff 	mov.w	r3, #4294967295
 8013da6:	e05d      	b.n	8013e64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013da8:	69bb      	ldr	r3, [r7, #24]
 8013daa:	895b      	ldrh	r3, [r3, #10]
 8013dac:	2b1b      	cmp	r3, #27
 8013dae:	d806      	bhi.n	8013dbe <etharp_raw+0x56>
 8013db0:	4b2e      	ldr	r3, [pc, #184]	; (8013e6c <etharp_raw+0x104>)
 8013db2:	f240 4262 	movw	r2, #1122	; 0x462
 8013db6:	4930      	ldr	r1, [pc, #192]	; (8013e78 <etharp_raw+0x110>)
 8013db8:	482e      	ldr	r0, [pc, #184]	; (8013e74 <etharp_raw+0x10c>)
 8013dba:	f002 f8f7 	bl	8015fac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7f6 fd44 	bl	800a854 <lwip_htons>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	461a      	mov	r2, r3
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013dda:	2b06      	cmp	r3, #6
 8013ddc:	d006      	beq.n	8013dec <etharp_raw+0x84>
 8013dde:	4b23      	ldr	r3, [pc, #140]	; (8013e6c <etharp_raw+0x104>)
 8013de0:	f240 4269 	movw	r2, #1129	; 0x469
 8013de4:	4925      	ldr	r1, [pc, #148]	; (8013e7c <etharp_raw+0x114>)
 8013de6:	4823      	ldr	r0, [pc, #140]	; (8013e74 <etharp_raw+0x10c>)
 8013de8:	f002 f8e0 	bl	8015fac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	3308      	adds	r3, #8
 8013df0:	2206      	movs	r2, #6
 8013df2:	6839      	ldr	r1, [r7, #0]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f001 ffff 	bl	8015df8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	3312      	adds	r3, #18
 8013dfe:	2206      	movs	r2, #6
 8013e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e02:	4618      	mov	r0, r3
 8013e04:	f001 fff8 	bl	8015df8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	330e      	adds	r3, #14
 8013e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e0e:	6812      	ldr	r2, [r2, #0]
 8013e10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	3318      	adds	r3, #24
 8013e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e18:	6812      	ldr	r2, [r2, #0]
 8013e1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	701a      	strb	r2, [r3, #0]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f042 0201 	orr.w	r2, r2, #1
 8013e28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f042 0208 	orr.w	r2, r2, #8
 8013e32:	709a      	strb	r2, [r3, #2]
 8013e34:	2200      	movs	r2, #0
 8013e36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	2206      	movs	r2, #6
 8013e3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	2204      	movs	r2, #4
 8013e42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013e44:	f640 0306 	movw	r3, #2054	; 0x806
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	69b9      	ldr	r1, [r7, #24]
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f001 fc9f 	bl	8015794 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013e56:	69b8      	ldr	r0, [r7, #24]
 8013e58:	f7f8 f8a8 	bl	800bfac <pbuf_free>
  p = NULL;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013e60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3720      	adds	r7, #32
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	08019fcc 	.word	0x08019fcc
 8013e70:	0801a11c 	.word	0x0801a11c
 8013e74:	0801a044 	.word	0x0801a044
 8013e78:	0801a1cc 	.word	0x0801a1cc
 8013e7c:	0801a200 	.word	0x0801a200

08013e80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af04      	add	r7, sp, #16
 8013e86:	60f8      	str	r0, [r7, #12]
 8013e88:	60b9      	str	r1, [r7, #8]
 8013e8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e9c:	2201      	movs	r2, #1
 8013e9e:	9203      	str	r2, [sp, #12]
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	9202      	str	r2, [sp, #8]
 8013ea4:	4a06      	ldr	r2, [pc, #24]	; (8013ec0 <etharp_request_dst+0x40>)
 8013ea6:	9201      	str	r2, [sp, #4]
 8013ea8:	9300      	str	r3, [sp, #0]
 8013eaa:	4603      	mov	r3, r0
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f7ff ff5a 	bl	8013d68 <etharp_raw>
 8013eb4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	0801a870 	.word	0x0801a870

08013ec4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013ece:	4a05      	ldr	r2, [pc, #20]	; (8013ee4 <etharp_request+0x20>)
 8013ed0:	6839      	ldr	r1, [r7, #0]
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f7ff ffd4 	bl	8013e80 <etharp_request_dst>
 8013ed8:	4603      	mov	r3, r0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	0801a868 	.word	0x0801a868

08013ee8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08e      	sub	sp, #56	; 0x38
 8013eec:	af04      	add	r7, sp, #16
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013ef2:	4b79      	ldr	r3, [pc, #484]	; (80140d8 <icmp_input+0x1f0>)
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	f003 030f 	and.w	r3, r3, #15
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f0a:	2b13      	cmp	r3, #19
 8013f0c:	f240 80cd 	bls.w	80140aa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	895b      	ldrh	r3, [r3, #10]
 8013f14:	2b03      	cmp	r3, #3
 8013f16:	f240 80ca 	bls.w	80140ae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013f24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 80b7 	beq.w	801409c <icmp_input+0x1b4>
 8013f2e:	2b08      	cmp	r3, #8
 8013f30:	f040 80b7 	bne.w	80140a2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013f34:	4b69      	ldr	r3, [pc, #420]	; (80140dc <icmp_input+0x1f4>)
 8013f36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f38:	4b67      	ldr	r3, [pc, #412]	; (80140d8 <icmp_input+0x1f0>)
 8013f3a:	695b      	ldr	r3, [r3, #20]
 8013f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f40:	2be0      	cmp	r3, #224	; 0xe0
 8013f42:	f000 80bb 	beq.w	80140bc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013f46:	4b64      	ldr	r3, [pc, #400]	; (80140d8 <icmp_input+0x1f0>)
 8013f48:	695b      	ldr	r3, [r3, #20]
 8013f4a:	4a63      	ldr	r2, [pc, #396]	; (80140d8 <icmp_input+0x1f0>)
 8013f4c:	6812      	ldr	r2, [r2, #0]
 8013f4e:	4611      	mov	r1, r2
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 fbed 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f040 80b1 	bne.w	80140c0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	891b      	ldrh	r3, [r3, #8]
 8013f62:	2b07      	cmp	r3, #7
 8013f64:	f240 80a5 	bls.w	80140b2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f6a:	330e      	adds	r3, #14
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f7f7 ff86 	bl	800be80 <pbuf_add_header>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d04b      	beq.n	8014012 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	891a      	ldrh	r2, [r3, #8]
 8013f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f80:	4413      	add	r3, r2
 8013f82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	891b      	ldrh	r3, [r3, #8]
 8013f88:	8b7a      	ldrh	r2, [r7, #26]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	f0c0 809a 	bcc.w	80140c4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013f90:	8b7b      	ldrh	r3, [r7, #26]
 8013f92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f96:	4619      	mov	r1, r3
 8013f98:	200e      	movs	r0, #14
 8013f9a:	f7f7 fd23 	bl	800b9e4 <pbuf_alloc>
 8013f9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	f000 8090 	beq.w	80140c8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	895b      	ldrh	r3, [r3, #10]
 8013fac:	461a      	mov	r2, r3
 8013fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fb0:	3308      	adds	r3, #8
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d203      	bcs.n	8013fbe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013fb6:	6978      	ldr	r0, [r7, #20]
 8013fb8:	f7f7 fff8 	bl	800bfac <pbuf_free>
          goto icmperr;
 8013fbc:	e085      	b.n	80140ca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f001 ff16 	bl	8015df8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6978      	ldr	r0, [r7, #20]
 8013fd2:	f7f7 ff65 	bl	800bea0 <pbuf_remove_header>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d009      	beq.n	8013ff0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013fdc:	4b40      	ldr	r3, [pc, #256]	; (80140e0 <icmp_input+0x1f8>)
 8013fde:	22b6      	movs	r2, #182	; 0xb6
 8013fe0:	4940      	ldr	r1, [pc, #256]	; (80140e4 <icmp_input+0x1fc>)
 8013fe2:	4841      	ldr	r0, [pc, #260]	; (80140e8 <icmp_input+0x200>)
 8013fe4:	f001 ffe2 	bl	8015fac <iprintf>
          pbuf_free(r);
 8013fe8:	6978      	ldr	r0, [r7, #20]
 8013fea:	f7f7 ffdf 	bl	800bfac <pbuf_free>
          goto icmperr;
 8013fee:	e06c      	b.n	80140ca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013ff0:	6879      	ldr	r1, [r7, #4]
 8013ff2:	6978      	ldr	r0, [r7, #20]
 8013ff4:	f7f8 f8fe 	bl	800c1f4 <pbuf_copy>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d003      	beq.n	8014006 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013ffe:	6978      	ldr	r0, [r7, #20]
 8014000:	f7f7 ffd4 	bl	800bfac <pbuf_free>
          goto icmperr;
 8014004:	e061      	b.n	80140ca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7f7 ffd0 	bl	800bfac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	607b      	str	r3, [r7, #4]
 8014010:	e00f      	b.n	8014032 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014014:	330e      	adds	r3, #14
 8014016:	4619      	mov	r1, r3
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f7f7 ff41 	bl	800bea0 <pbuf_remove_header>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d006      	beq.n	8014032 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014024:	4b2e      	ldr	r3, [pc, #184]	; (80140e0 <icmp_input+0x1f8>)
 8014026:	22c7      	movs	r2, #199	; 0xc7
 8014028:	4930      	ldr	r1, [pc, #192]	; (80140ec <icmp_input+0x204>)
 801402a:	482f      	ldr	r0, [pc, #188]	; (80140e8 <icmp_input+0x200>)
 801402c:	f001 ffbe 	bl	8015fac <iprintf>
          goto icmperr;
 8014030:	e04b      	b.n	80140ca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801403a:	4619      	mov	r1, r3
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7f7 ff1f 	bl	800be80 <pbuf_add_header>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d12b      	bne.n	80140a0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014056:	4b20      	ldr	r3, [pc, #128]	; (80140d8 <icmp_input+0x1f0>)
 8014058:	691a      	ldr	r2, [r3, #16]
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	2200      	movs	r2, #0
 8014062:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	2200      	movs	r2, #0
 8014068:	709a      	strb	r2, [r3, #2]
 801406a:	2200      	movs	r2, #0
 801406c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	22ff      	movs	r2, #255	; 0xff
 8014072:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2200      	movs	r2, #0
 8014078:	729a      	strb	r2, [r3, #10]
 801407a:	2200      	movs	r2, #0
 801407c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	9302      	str	r3, [sp, #8]
 8014082:	2301      	movs	r3, #1
 8014084:	9301      	str	r3, [sp, #4]
 8014086:	2300      	movs	r3, #0
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	23ff      	movs	r3, #255	; 0xff
 801408c:	2200      	movs	r2, #0
 801408e:	69f9      	ldr	r1, [r7, #28]
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f000 fa75 	bl	8014580 <ip4_output_if>
 8014096:	4603      	mov	r3, r0
 8014098:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801409a:	e001      	b.n	80140a0 <icmp_input+0x1b8>
      break;
 801409c:	bf00      	nop
 801409e:	e000      	b.n	80140a2 <icmp_input+0x1ba>
      break;
 80140a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f7f7 ff82 	bl	800bfac <pbuf_free>
  return;
 80140a8:	e013      	b.n	80140d2 <icmp_input+0x1ea>
    goto lenerr;
 80140aa:	bf00      	nop
 80140ac:	e002      	b.n	80140b4 <icmp_input+0x1cc>
    goto lenerr;
 80140ae:	bf00      	nop
 80140b0:	e000      	b.n	80140b4 <icmp_input+0x1cc>
        goto lenerr;
 80140b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7f7 ff79 	bl	800bfac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140ba:	e00a      	b.n	80140d2 <icmp_input+0x1ea>
        goto icmperr;
 80140bc:	bf00      	nop
 80140be:	e004      	b.n	80140ca <icmp_input+0x1e2>
        goto icmperr;
 80140c0:	bf00      	nop
 80140c2:	e002      	b.n	80140ca <icmp_input+0x1e2>
          goto icmperr;
 80140c4:	bf00      	nop
 80140c6:	e000      	b.n	80140ca <icmp_input+0x1e2>
          goto icmperr;
 80140c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7f7 ff6e 	bl	800bfac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80140d2:	3728      	adds	r7, #40	; 0x28
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	20007ed0 	.word	0x20007ed0
 80140dc:	20007ee4 	.word	0x20007ee4
 80140e0:	0801a244 	.word	0x0801a244
 80140e4:	0801a27c 	.word	0x0801a27c
 80140e8:	0801a2b4 	.word	0x0801a2b4
 80140ec:	0801a2dc 	.word	0x0801a2dc

080140f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	460b      	mov	r3, r1
 80140fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80140fc:	78fb      	ldrb	r3, [r7, #3]
 80140fe:	461a      	mov	r2, r3
 8014100:	2103      	movs	r1, #3
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 f814 	bl	8014130 <icmp_send_response>
}
 8014108:	bf00      	nop
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	460b      	mov	r3, r1
 801411a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801411c:	78fb      	ldrb	r3, [r7, #3]
 801411e:	461a      	mov	r2, r3
 8014120:	210b      	movs	r1, #11
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f000 f804 	bl	8014130 <icmp_send_response>
}
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b08c      	sub	sp, #48	; 0x30
 8014134:	af04      	add	r7, sp, #16
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	460b      	mov	r3, r1
 801413a:	70fb      	strb	r3, [r7, #3]
 801413c:	4613      	mov	r3, r2
 801413e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014140:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014144:	2124      	movs	r1, #36	; 0x24
 8014146:	2022      	movs	r0, #34	; 0x22
 8014148:	f7f7 fc4c 	bl	800b9e4 <pbuf_alloc>
 801414c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d04c      	beq.n	80141ee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	895b      	ldrh	r3, [r3, #10]
 8014158:	2b23      	cmp	r3, #35	; 0x23
 801415a:	d806      	bhi.n	801416a <icmp_send_response+0x3a>
 801415c:	4b26      	ldr	r3, [pc, #152]	; (80141f8 <icmp_send_response+0xc8>)
 801415e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014162:	4926      	ldr	r1, [pc, #152]	; (80141fc <icmp_send_response+0xcc>)
 8014164:	4826      	ldr	r0, [pc, #152]	; (8014200 <icmp_send_response+0xd0>)
 8014166:	f001 ff21 	bl	8015fac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	78fa      	ldrb	r2, [r7, #3]
 801417a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	78ba      	ldrb	r2, [r7, #2]
 8014180:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2200      	movs	r2, #0
 8014186:	711a      	strb	r2, [r3, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2200      	movs	r2, #0
 8014190:	719a      	strb	r2, [r3, #6]
 8014192:	2200      	movs	r2, #0
 8014194:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	f103 0008 	add.w	r0, r3, #8
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	221c      	movs	r2, #28
 80141a4:	4619      	mov	r1, r3
 80141a6:	f001 fe27 	bl	8015df8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80141aa:	69bb      	ldr	r3, [r7, #24]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80141b0:	f107 030c 	add.w	r3, r7, #12
 80141b4:	4618      	mov	r0, r3
 80141b6:	f000 f825 	bl	8014204 <ip4_route>
 80141ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d011      	beq.n	80141e6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2200      	movs	r2, #0
 80141c6:	709a      	strb	r2, [r3, #2]
 80141c8:	2200      	movs	r2, #0
 80141ca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80141cc:	f107 020c 	add.w	r2, r7, #12
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	9302      	str	r3, [sp, #8]
 80141d4:	2301      	movs	r3, #1
 80141d6:	9301      	str	r3, [sp, #4]
 80141d8:	2300      	movs	r3, #0
 80141da:	9300      	str	r3, [sp, #0]
 80141dc:	23ff      	movs	r3, #255	; 0xff
 80141de:	2100      	movs	r1, #0
 80141e0:	69f8      	ldr	r0, [r7, #28]
 80141e2:	f000 f9cd 	bl	8014580 <ip4_output_if>
  }
  pbuf_free(q);
 80141e6:	69f8      	ldr	r0, [r7, #28]
 80141e8:	f7f7 fee0 	bl	800bfac <pbuf_free>
 80141ec:	e000      	b.n	80141f0 <icmp_send_response+0xc0>
    return;
 80141ee:	bf00      	nop
}
 80141f0:	3720      	adds	r7, #32
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	0801a244 	.word	0x0801a244
 80141fc:	0801a310 	.word	0x0801a310
 8014200:	0801a2b4 	.word	0x0801a2b4

08014204 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014204:	b480      	push	{r7}
 8014206:	b085      	sub	sp, #20
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801420c:	4b33      	ldr	r3, [pc, #204]	; (80142dc <ip4_route+0xd8>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	60fb      	str	r3, [r7, #12]
 8014212:	e036      	b.n	8014282 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801421a:	f003 0301 	and.w	r3, r3, #1
 801421e:	b2db      	uxtb	r3, r3
 8014220:	2b00      	cmp	r3, #0
 8014222:	d02b      	beq.n	801427c <ip4_route+0x78>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801422a:	089b      	lsrs	r3, r3, #2
 801422c:	f003 0301 	and.w	r3, r3, #1
 8014230:	b2db      	uxtb	r3, r3
 8014232:	2b00      	cmp	r3, #0
 8014234:	d022      	beq.n	801427c <ip4_route+0x78>
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	3304      	adds	r3, #4
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d01d      	beq.n	801427c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	3304      	adds	r3, #4
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	405a      	eors	r2, r3
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	3308      	adds	r3, #8
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4013      	ands	r3, r2
 8014254:	2b00      	cmp	r3, #0
 8014256:	d101      	bne.n	801425c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	e038      	b.n	80142ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014262:	f003 0302 	and.w	r3, r3, #2
 8014266:	2b00      	cmp	r3, #0
 8014268:	d108      	bne.n	801427c <ip4_route+0x78>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	330c      	adds	r3, #12
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	429a      	cmp	r2, r3
 8014276:	d101      	bne.n	801427c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	e028      	b.n	80142ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	60fb      	str	r3, [r7, #12]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d1c5      	bne.n	8014214 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014288:	4b15      	ldr	r3, [pc, #84]	; (80142e0 <ip4_route+0xdc>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d01a      	beq.n	80142c6 <ip4_route+0xc2>
 8014290:	4b13      	ldr	r3, [pc, #76]	; (80142e0 <ip4_route+0xdc>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014298:	f003 0301 	and.w	r3, r3, #1
 801429c:	2b00      	cmp	r3, #0
 801429e:	d012      	beq.n	80142c6 <ip4_route+0xc2>
 80142a0:	4b0f      	ldr	r3, [pc, #60]	; (80142e0 <ip4_route+0xdc>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142a8:	f003 0304 	and.w	r3, r3, #4
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d00a      	beq.n	80142c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80142b0:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <ip4_route+0xdc>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3304      	adds	r3, #4
 80142b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d004      	beq.n	80142c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	2b7f      	cmp	r3, #127	; 0x7f
 80142c4:	d101      	bne.n	80142ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80142c6:	2300      	movs	r3, #0
 80142c8:	e001      	b.n	80142ce <ip4_route+0xca>
  }

  return netif_default;
 80142ca:	4b05      	ldr	r3, [pc, #20]	; (80142e0 <ip4_route+0xdc>)
 80142cc:	681b      	ldr	r3, [r3, #0]
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3714      	adds	r7, #20
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	2000b5d4 	.word	0x2000b5d4
 80142e0:	2000b5d8 	.word	0x2000b5d8

080142e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142f2:	f003 0301 	and.w	r3, r3, #1
 80142f6:	b2db      	uxtb	r3, r3
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d016      	beq.n	801432a <ip4_input_accept+0x46>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3304      	adds	r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d011      	beq.n	801432a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014306:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <ip4_input_accept+0x50>)
 8014308:	695a      	ldr	r2, [r3, #20]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	3304      	adds	r3, #4
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	429a      	cmp	r2, r3
 8014312:	d008      	beq.n	8014326 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014314:	4b07      	ldr	r3, [pc, #28]	; (8014334 <ip4_input_accept+0x50>)
 8014316:	695b      	ldr	r3, [r3, #20]
 8014318:	6879      	ldr	r1, [r7, #4]
 801431a:	4618      	mov	r0, r3
 801431c:	f000 fa08 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8014320:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014322:	2b00      	cmp	r3, #0
 8014324:	d001      	beq.n	801432a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014326:	2301      	movs	r3, #1
 8014328:	e000      	b.n	801432c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801432a:	2300      	movs	r3, #0
}
 801432c:	4618      	mov	r0, r3
 801432e:	3708      	adds	r7, #8
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	20007ed0 	.word	0x20007ed0

08014338 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b086      	sub	sp, #24
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	091b      	lsrs	r3, r3, #4
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b04      	cmp	r3, #4
 8014352:	d004      	beq.n	801435e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7f7 fe29 	bl	800bfac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801435a:	2300      	movs	r3, #0
 801435c:	e107      	b.n	801456e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	f003 030f 	and.w	r3, r3, #15
 8014366:	b2db      	uxtb	r3, r3
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	b2db      	uxtb	r3, r3
 801436c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	885b      	ldrh	r3, [r3, #2]
 8014372:	b29b      	uxth	r3, r3
 8014374:	4618      	mov	r0, r3
 8014376:	f7f6 fa6d 	bl	800a854 <lwip_htons>
 801437a:	4603      	mov	r3, r0
 801437c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	891b      	ldrh	r3, [r3, #8]
 8014382:	89ba      	ldrh	r2, [r7, #12]
 8014384:	429a      	cmp	r2, r3
 8014386:	d204      	bcs.n	8014392 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014388:	89bb      	ldrh	r3, [r7, #12]
 801438a:	4619      	mov	r1, r3
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f7f7 fc87 	bl	800bca0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	895b      	ldrh	r3, [r3, #10]
 8014396:	89fa      	ldrh	r2, [r7, #14]
 8014398:	429a      	cmp	r2, r3
 801439a:	d807      	bhi.n	80143ac <ip4_input+0x74>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	891b      	ldrh	r3, [r3, #8]
 80143a0:	89ba      	ldrh	r2, [r7, #12]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d802      	bhi.n	80143ac <ip4_input+0x74>
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	2b13      	cmp	r3, #19
 80143aa:	d804      	bhi.n	80143b6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7f7 fdfd 	bl	800bfac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80143b2:	2300      	movs	r3, #0
 80143b4:	e0db      	b.n	801456e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	691b      	ldr	r3, [r3, #16]
 80143ba:	4a6f      	ldr	r2, [pc, #444]	; (8014578 <ip4_input+0x240>)
 80143bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	4a6d      	ldr	r2, [pc, #436]	; (8014578 <ip4_input+0x240>)
 80143c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80143c6:	4b6c      	ldr	r3, [pc, #432]	; (8014578 <ip4_input+0x240>)
 80143c8:	695b      	ldr	r3, [r3, #20]
 80143ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143ce:	2be0      	cmp	r3, #224	; 0xe0
 80143d0:	d112      	bne.n	80143f8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143d8:	f003 0301 	and.w	r3, r3, #1
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d007      	beq.n	80143f2 <ip4_input+0xba>
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	3304      	adds	r3, #4
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <ip4_input+0xba>
      netif = inp;
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	613b      	str	r3, [r7, #16]
 80143f0:	e02a      	b.n	8014448 <ip4_input+0x110>
    } else {
      netif = NULL;
 80143f2:	2300      	movs	r3, #0
 80143f4:	613b      	str	r3, [r7, #16]
 80143f6:	e027      	b.n	8014448 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80143f8:	6838      	ldr	r0, [r7, #0]
 80143fa:	f7ff ff73 	bl	80142e4 <ip4_input_accept>
 80143fe:	4603      	mov	r3, r0
 8014400:	2b00      	cmp	r3, #0
 8014402:	d002      	beq.n	801440a <ip4_input+0xd2>
      netif = inp;
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	613b      	str	r3, [r7, #16]
 8014408:	e01e      	b.n	8014448 <ip4_input+0x110>
    } else {
      netif = NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801440e:	4b5a      	ldr	r3, [pc, #360]	; (8014578 <ip4_input+0x240>)
 8014410:	695b      	ldr	r3, [r3, #20]
 8014412:	b2db      	uxtb	r3, r3
 8014414:	2b7f      	cmp	r3, #127	; 0x7f
 8014416:	d017      	beq.n	8014448 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014418:	4b58      	ldr	r3, [pc, #352]	; (801457c <ip4_input+0x244>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	613b      	str	r3, [r7, #16]
 801441e:	e00e      	b.n	801443e <ip4_input+0x106>
          if (netif == inp) {
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	429a      	cmp	r2, r3
 8014426:	d006      	beq.n	8014436 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014428:	6938      	ldr	r0, [r7, #16]
 801442a:	f7ff ff5b 	bl	80142e4 <ip4_input_accept>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d108      	bne.n	8014446 <ip4_input+0x10e>
 8014434:	e000      	b.n	8014438 <ip4_input+0x100>
            continue;
 8014436:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	613b      	str	r3, [r7, #16]
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1ed      	bne.n	8014420 <ip4_input+0xe8>
 8014444:	e000      	b.n	8014448 <ip4_input+0x110>
            break;
 8014446:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014448:	4b4b      	ldr	r3, [pc, #300]	; (8014578 <ip4_input+0x240>)
 801444a:	691b      	ldr	r3, [r3, #16]
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	4618      	mov	r0, r3
 8014450:	f000 f96e 	bl	8014730 <ip4_addr_isbroadcast_u32>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d105      	bne.n	8014466 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801445a:	4b47      	ldr	r3, [pc, #284]	; (8014578 <ip4_input+0x240>)
 801445c:	691b      	ldr	r3, [r3, #16]
 801445e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014462:	2be0      	cmp	r3, #224	; 0xe0
 8014464:	d104      	bne.n	8014470 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7f7 fda0 	bl	800bfac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801446c:	2300      	movs	r3, #0
 801446e:	e07e      	b.n	801456e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d104      	bne.n	8014480 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7f7 fd98 	bl	800bfac <pbuf_free>
    return ERR_OK;
 801447c:	2300      	movs	r3, #0
 801447e:	e076      	b.n	801456e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	88db      	ldrh	r3, [r3, #6]
 8014484:	b29b      	uxth	r3, r3
 8014486:	461a      	mov	r2, r3
 8014488:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801448c:	4013      	ands	r3, r2
 801448e:	2b00      	cmp	r3, #0
 8014490:	d00b      	beq.n	80144aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 fdbc 	bl	8015010 <ip4_reass>
 8014498:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d101      	bne.n	80144a4 <ip4_input+0x16c>
      return ERR_OK;
 80144a0:	2300      	movs	r3, #0
 80144a2:	e064      	b.n	801456e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80144aa:	4a33      	ldr	r2, [pc, #204]	; (8014578 <ip4_input+0x240>)
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80144b0:	4a31      	ldr	r2, [pc, #196]	; (8014578 <ip4_input+0x240>)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80144b6:	4a30      	ldr	r2, [pc, #192]	; (8014578 <ip4_input+0x240>)
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	f003 030f 	and.w	r3, r3, #15
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	b2db      	uxtb	r3, r3
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	4b2a      	ldr	r3, [pc, #168]	; (8014578 <ip4_input+0x240>)
 80144ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80144d0:	89fb      	ldrh	r3, [r7, #14]
 80144d2:	4619      	mov	r1, r3
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7f7 fce3 	bl	800bea0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	7a5b      	ldrb	r3, [r3, #9]
 80144de:	2b11      	cmp	r3, #17
 80144e0:	d006      	beq.n	80144f0 <ip4_input+0x1b8>
 80144e2:	2b11      	cmp	r3, #17
 80144e4:	dc13      	bgt.n	801450e <ip4_input+0x1d6>
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	d00c      	beq.n	8014504 <ip4_input+0x1cc>
 80144ea:	2b06      	cmp	r3, #6
 80144ec:	d005      	beq.n	80144fa <ip4_input+0x1c2>
 80144ee:	e00e      	b.n	801450e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80144f0:	6839      	ldr	r1, [r7, #0]
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f7fe faec 	bl	8012ad0 <udp_input>
        break;
 80144f8:	e026      	b.n	8014548 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80144fa:	6839      	ldr	r1, [r7, #0]
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7f9 fea9 	bl	800e254 <tcp_input>
        break;
 8014502:	e021      	b.n	8014548 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014504:	6839      	ldr	r1, [r7, #0]
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f7ff fcee 	bl	8013ee8 <icmp_input>
        break;
 801450c:	e01c      	b.n	8014548 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801450e:	4b1a      	ldr	r3, [pc, #104]	; (8014578 <ip4_input+0x240>)
 8014510:	695b      	ldr	r3, [r3, #20]
 8014512:	6939      	ldr	r1, [r7, #16]
 8014514:	4618      	mov	r0, r3
 8014516:	f000 f90b 	bl	8014730 <ip4_addr_isbroadcast_u32>
 801451a:	4603      	mov	r3, r0
 801451c:	2b00      	cmp	r3, #0
 801451e:	d10f      	bne.n	8014540 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014520:	4b15      	ldr	r3, [pc, #84]	; (8014578 <ip4_input+0x240>)
 8014522:	695b      	ldr	r3, [r3, #20]
 8014524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014528:	2be0      	cmp	r3, #224	; 0xe0
 801452a:	d009      	beq.n	8014540 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801452c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f7 fd27 	bl	800bf86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014538:	2102      	movs	r1, #2
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7ff fdd8 	bl	80140f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7f7 fd33 	bl	800bfac <pbuf_free>
        break;
 8014546:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014548:	4b0b      	ldr	r3, [pc, #44]	; (8014578 <ip4_input+0x240>)
 801454a:	2200      	movs	r2, #0
 801454c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801454e:	4b0a      	ldr	r3, [pc, #40]	; (8014578 <ip4_input+0x240>)
 8014550:	2200      	movs	r2, #0
 8014552:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014554:	4b08      	ldr	r3, [pc, #32]	; (8014578 <ip4_input+0x240>)
 8014556:	2200      	movs	r2, #0
 8014558:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801455a:	4b07      	ldr	r3, [pc, #28]	; (8014578 <ip4_input+0x240>)
 801455c:	2200      	movs	r2, #0
 801455e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014560:	4b05      	ldr	r3, [pc, #20]	; (8014578 <ip4_input+0x240>)
 8014562:	2200      	movs	r2, #0
 8014564:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014566:	4b04      	ldr	r3, [pc, #16]	; (8014578 <ip4_input+0x240>)
 8014568:	2200      	movs	r2, #0
 801456a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801456c:	2300      	movs	r3, #0
}
 801456e:	4618      	mov	r0, r3
 8014570:	3718      	adds	r7, #24
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	20007ed0 	.word	0x20007ed0
 801457c:	2000b5d4 	.word	0x2000b5d4

08014580 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b08a      	sub	sp, #40	; 0x28
 8014584:	af04      	add	r7, sp, #16
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
 801458c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d009      	beq.n	80145ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d003      	beq.n	80145a6 <ip4_output_if+0x26>
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d102      	bne.n	80145ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80145a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a8:	3304      	adds	r3, #4
 80145aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80145ac:	78fa      	ldrb	r2, [r7, #3]
 80145ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b0:	9302      	str	r3, [sp, #8]
 80145b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80145b6:	9301      	str	r3, [sp, #4]
 80145b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	4613      	mov	r3, r2
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	6979      	ldr	r1, [r7, #20]
 80145c4:	68f8      	ldr	r0, [r7, #12]
 80145c6:	f000 f805 	bl	80145d4 <ip4_output_if_src>
 80145ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3718      	adds	r7, #24
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	7b9b      	ldrb	r3, [r3, #14]
 80145e6:	2b01      	cmp	r3, #1
 80145e8:	d006      	beq.n	80145f8 <ip4_output_if_src+0x24>
 80145ea:	4b4b      	ldr	r3, [pc, #300]	; (8014718 <ip4_output_if_src+0x144>)
 80145ec:	f44f 7255 	mov.w	r2, #852	; 0x354
 80145f0:	494a      	ldr	r1, [pc, #296]	; (801471c <ip4_output_if_src+0x148>)
 80145f2:	484b      	ldr	r0, [pc, #300]	; (8014720 <ip4_output_if_src+0x14c>)
 80145f4:	f001 fcda 	bl	8015fac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d060      	beq.n	80146c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80145fe:	2314      	movs	r3, #20
 8014600:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014602:	2114      	movs	r1, #20
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f7f7 fc3b 	bl	800be80 <pbuf_add_header>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d002      	beq.n	8014616 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014610:	f06f 0301 	mvn.w	r3, #1
 8014614:	e07c      	b.n	8014710 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	895b      	ldrh	r3, [r3, #10]
 8014620:	2b13      	cmp	r3, #19
 8014622:	d806      	bhi.n	8014632 <ip4_output_if_src+0x5e>
 8014624:	4b3c      	ldr	r3, [pc, #240]	; (8014718 <ip4_output_if_src+0x144>)
 8014626:	f44f 7262 	mov.w	r2, #904	; 0x388
 801462a:	493e      	ldr	r1, [pc, #248]	; (8014724 <ip4_output_if_src+0x150>)
 801462c:	483c      	ldr	r0, [pc, #240]	; (8014720 <ip4_output_if_src+0x14c>)
 801462e:	f001 fcbd 	bl	8015fac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	78fa      	ldrb	r2, [r7, #3]
 8014636:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801463e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681a      	ldr	r2, [r3, #0]
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014648:	8b7b      	ldrh	r3, [r7, #26]
 801464a:	089b      	lsrs	r3, r3, #2
 801464c:	b29b      	uxth	r3, r3
 801464e:	b2db      	uxtb	r3, r3
 8014650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014654:	b2da      	uxtb	r2, r3
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801465a:	69fb      	ldr	r3, [r7, #28]
 801465c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014660:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	891b      	ldrh	r3, [r3, #8]
 8014666:	4618      	mov	r0, r3
 8014668:	f7f6 f8f4 	bl	800a854 <lwip_htons>
 801466c:	4603      	mov	r3, r0
 801466e:	461a      	mov	r2, r3
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014674:	69fb      	ldr	r3, [r7, #28]
 8014676:	2200      	movs	r2, #0
 8014678:	719a      	strb	r2, [r3, #6]
 801467a:	2200      	movs	r2, #0
 801467c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801467e:	4b2a      	ldr	r3, [pc, #168]	; (8014728 <ip4_output_if_src+0x154>)
 8014680:	881b      	ldrh	r3, [r3, #0]
 8014682:	4618      	mov	r0, r3
 8014684:	f7f6 f8e6 	bl	800a854 <lwip_htons>
 8014688:	4603      	mov	r3, r0
 801468a:	461a      	mov	r2, r3
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014690:	4b25      	ldr	r3, [pc, #148]	; (8014728 <ip4_output_if_src+0x154>)
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	3301      	adds	r3, #1
 8014696:	b29a      	uxth	r2, r3
 8014698:	4b23      	ldr	r3, [pc, #140]	; (8014728 <ip4_output_if_src+0x154>)
 801469a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d104      	bne.n	80146ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80146a2:	4b22      	ldr	r3, [pc, #136]	; (801472c <ip4_output_if_src+0x158>)
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	60da      	str	r2, [r3, #12]
 80146aa:	e003      	b.n	80146b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	2200      	movs	r2, #0
 80146b8:	729a      	strb	r2, [r3, #10]
 80146ba:	2200      	movs	r2, #0
 80146bc:	72da      	strb	r2, [r3, #11]
 80146be:	e00f      	b.n	80146e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	895b      	ldrh	r3, [r3, #10]
 80146c4:	2b13      	cmp	r3, #19
 80146c6:	d802      	bhi.n	80146ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80146c8:	f06f 0301 	mvn.w	r3, #1
 80146cc:	e020      	b.n	8014710 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	691b      	ldr	r3, [r3, #16]
 80146d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80146da:	f107 0314 	add.w	r3, r7, #20
 80146de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80146e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00c      	beq.n	8014702 <ip4_output_if_src+0x12e>
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	891a      	ldrh	r2, [r3, #8]
 80146ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d906      	bls.n	8014702 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80146f4:	687a      	ldr	r2, [r7, #4]
 80146f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f000 fe77 	bl	80153ec <ip4_frag>
 80146fe:	4603      	mov	r3, r0
 8014700:	e006      	b.n	8014710 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014704:	695b      	ldr	r3, [r3, #20]
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	68f9      	ldr	r1, [r7, #12]
 801470a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801470c:	4798      	blx	r3
 801470e:	4603      	mov	r3, r0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3720      	adds	r7, #32
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	0801a33c 	.word	0x0801a33c
 801471c:	0801a370 	.word	0x0801a370
 8014720:	0801a37c 	.word	0x0801a37c
 8014724:	0801a3a4 	.word	0x0801a3a4
 8014728:	20004c0a 	.word	0x20004c0a
 801472c:	0801a864 	.word	0x0801a864

08014730 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014730:	b480      	push	{r7}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014744:	d002      	beq.n	801474c <ip4_addr_isbroadcast_u32+0x1c>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d101      	bne.n	8014750 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801474c:	2301      	movs	r3, #1
 801474e:	e02a      	b.n	80147a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014756:	f003 0302 	and.w	r3, r3, #2
 801475a:	2b00      	cmp	r3, #0
 801475c:	d101      	bne.n	8014762 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801475e:	2300      	movs	r3, #0
 8014760:	e021      	b.n	80147a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	3304      	adds	r3, #4
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	429a      	cmp	r2, r3
 801476c:	d101      	bne.n	8014772 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801476e:	2300      	movs	r3, #0
 8014770:	e019      	b.n	80147a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014772:	68fa      	ldr	r2, [r7, #12]
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	3304      	adds	r3, #4
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	405a      	eors	r2, r3
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	3308      	adds	r3, #8
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4013      	ands	r3, r2
 8014784:	2b00      	cmp	r3, #0
 8014786:	d10d      	bne.n	80147a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	3308      	adds	r3, #8
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	43da      	mvns	r2, r3
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	3308      	adds	r3, #8
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801479c:	429a      	cmp	r2, r3
 801479e:	d101      	bne.n	80147a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80147a0:	2301      	movs	r3, #1
 80147a2:	e000      	b.n	80147a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80147a4:	2300      	movs	r3, #0
  }
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3714      	adds	r7, #20
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
	...

080147b4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b08a      	sub	sp, #40	; 0x28
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80147be:	f107 030c 	add.w	r3, r7, #12
 80147c2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80147cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80147d0:	3301      	adds	r3, #1
 80147d2:	4a89      	ldr	r2, [pc, #548]	; (80149f8 <ip4addr_aton+0x244>)
 80147d4:	4413      	add	r3, r2
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	f003 0304 	and.w	r3, r3, #4
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d101      	bne.n	80147e4 <ip4addr_aton+0x30>
      return 0;
 80147e0:	2300      	movs	r3, #0
 80147e2:	e105      	b.n	80149f0 <ip4addr_aton+0x23c>
    }
    val = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80147e8:	230a      	movs	r3, #10
 80147ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80147ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80147f2:	2b30      	cmp	r3, #48	; 0x30
 80147f4:	d11c      	bne.n	8014830 <ip4addr_aton+0x7c>
      c = *++cp;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	3301      	adds	r3, #1
 80147fa:	607b      	str	r3, [r7, #4]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8014804:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014808:	2b78      	cmp	r3, #120	; 0x78
 801480a:	d003      	beq.n	8014814 <ip4addr_aton+0x60>
 801480c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014810:	2b58      	cmp	r3, #88	; 0x58
 8014812:	d10a      	bne.n	801482a <ip4addr_aton+0x76>
        base = 16;
 8014814:	2310      	movs	r3, #16
 8014816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	3301      	adds	r3, #1
 801481e:	607b      	str	r3, [r7, #4]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014828:	e002      	b.n	8014830 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801482a:	2308      	movs	r3, #8
 801482c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8014830:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014834:	3301      	adds	r3, #1
 8014836:	4a70      	ldr	r2, [pc, #448]	; (80149f8 <ip4addr_aton+0x244>)
 8014838:	4413      	add	r3, r2
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	f003 0304 	and.w	r3, r3, #4
 8014840:	2b00      	cmp	r3, #0
 8014842:	d011      	beq.n	8014868 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8014844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801484a:	fb02 f203 	mul.w	r2, r2, r3
 801484e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014852:	4413      	add	r3, r2
 8014854:	3b30      	subs	r3, #48	; 0x30
 8014856:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	3301      	adds	r3, #1
 801485c:	607b      	str	r3, [r7, #4]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014866:	e7e3      	b.n	8014830 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8014868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801486c:	2b10      	cmp	r3, #16
 801486e:	d127      	bne.n	80148c0 <ip4addr_aton+0x10c>
 8014870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014874:	3301      	adds	r3, #1
 8014876:	4a60      	ldr	r2, [pc, #384]	; (80149f8 <ip4addr_aton+0x244>)
 8014878:	4413      	add	r3, r2
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014880:	2b00      	cmp	r3, #0
 8014882:	d01d      	beq.n	80148c0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8014884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014886:	011b      	lsls	r3, r3, #4
 8014888:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801488c:	f102 010a 	add.w	r1, r2, #10
 8014890:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014894:	3201      	adds	r2, #1
 8014896:	4858      	ldr	r0, [pc, #352]	; (80149f8 <ip4addr_aton+0x244>)
 8014898:	4402      	add	r2, r0
 801489a:	7812      	ldrb	r2, [r2, #0]
 801489c:	f002 0203 	and.w	r2, r2, #3
 80148a0:	2a02      	cmp	r2, #2
 80148a2:	d101      	bne.n	80148a8 <ip4addr_aton+0xf4>
 80148a4:	2261      	movs	r2, #97	; 0x61
 80148a6:	e000      	b.n	80148aa <ip4addr_aton+0xf6>
 80148a8:	2241      	movs	r2, #65	; 0x41
 80148aa:	1a8a      	subs	r2, r1, r2
 80148ac:	4313      	orrs	r3, r2
 80148ae:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3301      	adds	r3, #1
 80148b4:	607b      	str	r3, [r7, #4]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80148be:	e7b7      	b.n	8014830 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80148c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80148c4:	2b2e      	cmp	r3, #46	; 0x2e
 80148c6:	d114      	bne.n	80148f2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80148c8:	f107 030c 	add.w	r3, r7, #12
 80148cc:	330c      	adds	r3, #12
 80148ce:	69fa      	ldr	r2, [r7, #28]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d301      	bcc.n	80148d8 <ip4addr_aton+0x124>
        return 0;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e08b      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80148d8:	69fb      	ldr	r3, [r7, #28]
 80148da:	1d1a      	adds	r2, r3, #4
 80148dc:	61fa      	str	r2, [r7, #28]
 80148de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148e0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	3301      	adds	r3, #1
 80148e6:	607b      	str	r3, [r7, #4]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80148f0:	e76c      	b.n	80147cc <ip4addr_aton+0x18>
    } else {
      break;
 80148f2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80148f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d00b      	beq.n	8014914 <ip4addr_aton+0x160>
 80148fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014900:	3301      	adds	r3, #1
 8014902:	4a3d      	ldr	r2, [pc, #244]	; (80149f8 <ip4addr_aton+0x244>)
 8014904:	4413      	add	r3, r2
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	f003 0308 	and.w	r3, r3, #8
 801490c:	2b00      	cmp	r3, #0
 801490e:	d101      	bne.n	8014914 <ip4addr_aton+0x160>
    return 0;
 8014910:	2300      	movs	r3, #0
 8014912:	e06d      	b.n	80149f0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8014914:	f107 030c 	add.w	r3, r7, #12
 8014918:	69fa      	ldr	r2, [r7, #28]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	109b      	asrs	r3, r3, #2
 801491e:	3301      	adds	r3, #1
 8014920:	2b04      	cmp	r3, #4
 8014922:	d853      	bhi.n	80149cc <ip4addr_aton+0x218>
 8014924:	a201      	add	r2, pc, #4	; (adr r2, 801492c <ip4addr_aton+0x178>)
 8014926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801492a:	bf00      	nop
 801492c:	08014941 	.word	0x08014941
 8014930:	080149db 	.word	0x080149db
 8014934:	08014945 	.word	0x08014945
 8014938:	08014967 	.word	0x08014967
 801493c:	08014995 	.word	0x08014995

    case 0:
      return 0;       /* initial nondigit */
 8014940:	2300      	movs	r3, #0
 8014942:	e055      	b.n	80149f0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8014944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801494a:	d301      	bcc.n	8014950 <ip4addr_aton+0x19c>
        return 0;
 801494c:	2300      	movs	r3, #0
 801494e:	e04f      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2bff      	cmp	r3, #255	; 0xff
 8014954:	d901      	bls.n	801495a <ip4addr_aton+0x1a6>
        return 0;
 8014956:	2300      	movs	r3, #0
 8014958:	e04a      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	061b      	lsls	r3, r3, #24
 801495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014960:	4313      	orrs	r3, r2
 8014962:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014964:	e03a      	b.n	80149dc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8014966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801496c:	d301      	bcc.n	8014972 <ip4addr_aton+0x1be>
        return 0;
 801496e:	2300      	movs	r3, #0
 8014970:	e03e      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2bff      	cmp	r3, #255	; 0xff
 8014976:	d802      	bhi.n	801497e <ip4addr_aton+0x1ca>
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	2bff      	cmp	r3, #255	; 0xff
 801497c:	d901      	bls.n	8014982 <ip4addr_aton+0x1ce>
        return 0;
 801497e:	2300      	movs	r3, #0
 8014980:	e036      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	061a      	lsls	r2, r3, #24
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	041b      	lsls	r3, r3, #16
 801498a:	4313      	orrs	r3, r2
 801498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801498e:	4313      	orrs	r3, r2
 8014990:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014992:	e023      	b.n	80149dc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	2bff      	cmp	r3, #255	; 0xff
 8014998:	d901      	bls.n	801499e <ip4addr_aton+0x1ea>
        return 0;
 801499a:	2300      	movs	r3, #0
 801499c:	e028      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2bff      	cmp	r3, #255	; 0xff
 80149a2:	d805      	bhi.n	80149b0 <ip4addr_aton+0x1fc>
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	2bff      	cmp	r3, #255	; 0xff
 80149a8:	d802      	bhi.n	80149b0 <ip4addr_aton+0x1fc>
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	2bff      	cmp	r3, #255	; 0xff
 80149ae:	d901      	bls.n	80149b4 <ip4addr_aton+0x200>
        return 0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	e01d      	b.n	80149f0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	061a      	lsls	r2, r3, #24
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	041b      	lsls	r3, r3, #16
 80149bc:	431a      	orrs	r2, r3
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	021b      	lsls	r3, r3, #8
 80149c2:	4313      	orrs	r3, r2
 80149c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149c6:	4313      	orrs	r3, r2
 80149c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80149ca:	e007      	b.n	80149dc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80149cc:	4b0b      	ldr	r3, [pc, #44]	; (80149fc <ip4addr_aton+0x248>)
 80149ce:	22f9      	movs	r2, #249	; 0xf9
 80149d0:	490b      	ldr	r1, [pc, #44]	; (8014a00 <ip4addr_aton+0x24c>)
 80149d2:	480c      	ldr	r0, [pc, #48]	; (8014a04 <ip4addr_aton+0x250>)
 80149d4:	f001 faea 	bl	8015fac <iprintf>
      break;
 80149d8:	e000      	b.n	80149dc <ip4addr_aton+0x228>
      break;
 80149da:	bf00      	nop
  }
  if (addr) {
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d005      	beq.n	80149ee <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80149e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149e4:	f7f5 ff4b 	bl	800a87e <lwip_htonl>
 80149e8:	4602      	mov	r2, r0
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80149ee:	2301      	movs	r3, #1
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3728      	adds	r7, #40	; 0x28
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0801a876 	.word	0x0801a876
 80149fc:	0801a3d4 	.word	0x0801a3d4
 8014a00:	0801a410 	.word	0x0801a410
 8014a04:	0801a41c 	.word	0x0801a41c

08014a08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014a12:	4b12      	ldr	r3, [pc, #72]	; (8014a5c <ip_reass_tmr+0x54>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014a18:	e018      	b.n	8014a4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	7fdb      	ldrb	r3, [r3, #31]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00b      	beq.n	8014a3a <ip_reass_tmr+0x32>
      r->timer--;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	7fdb      	ldrb	r3, [r3, #31]
 8014a26:	3b01      	subs	r3, #1
 8014a28:	b2da      	uxtb	r2, r3
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
 8014a38:	e008      	b.n	8014a4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014a44:	68b9      	ldr	r1, [r7, #8]
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 f80a 	bl	8014a60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1e3      	bne.n	8014a1a <ip_reass_tmr+0x12>
    }
  }
}
 8014a52:	bf00      	nop
 8014a54:	bf00      	nop
 8014a56:	3710      	adds	r7, #16
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	20004c0c 	.word	0x20004c0c

08014a60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b088      	sub	sp, #32
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d105      	bne.n	8014a82 <ip_reass_free_complete_datagram+0x22>
 8014a76:	4b45      	ldr	r3, [pc, #276]	; (8014b8c <ip_reass_free_complete_datagram+0x12c>)
 8014a78:	22ab      	movs	r2, #171	; 0xab
 8014a7a:	4945      	ldr	r1, [pc, #276]	; (8014b90 <ip_reass_free_complete_datagram+0x130>)
 8014a7c:	4845      	ldr	r0, [pc, #276]	; (8014b94 <ip_reass_free_complete_datagram+0x134>)
 8014a7e:	f001 fa95 	bl	8015fac <iprintf>
  if (prev != NULL) {
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d00a      	beq.n	8014a9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	687a      	ldr	r2, [r7, #4]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d005      	beq.n	8014a9e <ip_reass_free_complete_datagram+0x3e>
 8014a92:	4b3e      	ldr	r3, [pc, #248]	; (8014b8c <ip_reass_free_complete_datagram+0x12c>)
 8014a94:	22ad      	movs	r2, #173	; 0xad
 8014a96:	4940      	ldr	r1, [pc, #256]	; (8014b98 <ip_reass_free_complete_datagram+0x138>)
 8014a98:	483e      	ldr	r0, [pc, #248]	; (8014b94 <ip_reass_free_complete_datagram+0x134>)
 8014a9a:	f001 fa87 	bl	8015fac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	889b      	ldrh	r3, [r3, #4]
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d12a      	bne.n	8014b06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	6858      	ldr	r0, [r3, #4]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	3308      	adds	r3, #8
 8014ac6:	2214      	movs	r2, #20
 8014ac8:	4619      	mov	r1, r3
 8014aca:	f001 f995 	bl	8015df8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014ace:	2101      	movs	r1, #1
 8014ad0:	69b8      	ldr	r0, [r7, #24]
 8014ad2:	f7ff fb1d 	bl	8014110 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014ad6:	69b8      	ldr	r0, [r7, #24]
 8014ad8:	f7f7 faf6 	bl	800c0c8 <pbuf_clen>
 8014adc:	4603      	mov	r3, r0
 8014ade:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ae0:	8bfa      	ldrh	r2, [r7, #30]
 8014ae2:	8a7b      	ldrh	r3, [r7, #18]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014aea:	db05      	blt.n	8014af8 <ip_reass_free_complete_datagram+0x98>
 8014aec:	4b27      	ldr	r3, [pc, #156]	; (8014b8c <ip_reass_free_complete_datagram+0x12c>)
 8014aee:	22bc      	movs	r2, #188	; 0xbc
 8014af0:	492a      	ldr	r1, [pc, #168]	; (8014b9c <ip_reass_free_complete_datagram+0x13c>)
 8014af2:	4828      	ldr	r0, [pc, #160]	; (8014b94 <ip_reass_free_complete_datagram+0x134>)
 8014af4:	f001 fa5a 	bl	8015fac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014af8:	8bfa      	ldrh	r2, [r7, #30]
 8014afa:	8a7b      	ldrh	r3, [r7, #18]
 8014afc:	4413      	add	r3, r2
 8014afe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014b00:	69b8      	ldr	r0, [r7, #24]
 8014b02:	f7f7 fa53 	bl	800bfac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014b0c:	e01f      	b.n	8014b4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014b14:	69bb      	ldr	r3, [r7, #24]
 8014b16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f7f7 fad2 	bl	800c0c8 <pbuf_clen>
 8014b24:	4603      	mov	r3, r0
 8014b26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b28:	8bfa      	ldrh	r2, [r7, #30]
 8014b2a:	8a7b      	ldrh	r3, [r7, #18]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b32:	db05      	blt.n	8014b40 <ip_reass_free_complete_datagram+0xe0>
 8014b34:	4b15      	ldr	r3, [pc, #84]	; (8014b8c <ip_reass_free_complete_datagram+0x12c>)
 8014b36:	22cc      	movs	r2, #204	; 0xcc
 8014b38:	4918      	ldr	r1, [pc, #96]	; (8014b9c <ip_reass_free_complete_datagram+0x13c>)
 8014b3a:	4816      	ldr	r0, [pc, #88]	; (8014b94 <ip_reass_free_complete_datagram+0x134>)
 8014b3c:	f001 fa36 	bl	8015fac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b40:	8bfa      	ldrh	r2, [r7, #30]
 8014b42:	8a7b      	ldrh	r3, [r7, #18]
 8014b44:	4413      	add	r3, r2
 8014b46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f7f7 fa2f 	bl	800bfac <pbuf_free>
  while (p != NULL) {
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d1dc      	bne.n	8014b0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 f8c2 	bl	8014ce0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014b5c:	4b10      	ldr	r3, [pc, #64]	; (8014ba0 <ip_reass_free_complete_datagram+0x140>)
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	8bfa      	ldrh	r2, [r7, #30]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d905      	bls.n	8014b72 <ip_reass_free_complete_datagram+0x112>
 8014b66:	4b09      	ldr	r3, [pc, #36]	; (8014b8c <ip_reass_free_complete_datagram+0x12c>)
 8014b68:	22d2      	movs	r2, #210	; 0xd2
 8014b6a:	490e      	ldr	r1, [pc, #56]	; (8014ba4 <ip_reass_free_complete_datagram+0x144>)
 8014b6c:	4809      	ldr	r0, [pc, #36]	; (8014b94 <ip_reass_free_complete_datagram+0x134>)
 8014b6e:	f001 fa1d 	bl	8015fac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014b72:	4b0b      	ldr	r3, [pc, #44]	; (8014ba0 <ip_reass_free_complete_datagram+0x140>)
 8014b74:	881a      	ldrh	r2, [r3, #0]
 8014b76:	8bfb      	ldrh	r3, [r7, #30]
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	4b08      	ldr	r3, [pc, #32]	; (8014ba0 <ip_reass_free_complete_datagram+0x140>)
 8014b7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014b80:	8bfb      	ldrh	r3, [r7, #30]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3720      	adds	r7, #32
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	0801a444 	.word	0x0801a444
 8014b90:	0801a480 	.word	0x0801a480
 8014b94:	0801a48c 	.word	0x0801a48c
 8014b98:	0801a4b4 	.word	0x0801a4b4
 8014b9c:	0801a4c8 	.word	0x0801a4c8
 8014ba0:	20004c10 	.word	0x20004c10
 8014ba4:	0801a4e8 	.word	0x0801a4e8

08014ba8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b08a      	sub	sp, #40	; 0x28
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014bc6:	4b28      	ldr	r3, [pc, #160]	; (8014c68 <ip_reass_remove_oldest_datagram+0xc0>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014bcc:	e030      	b.n	8014c30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd0:	695a      	ldr	r2, [r3, #20]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	68db      	ldr	r3, [r3, #12]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d10c      	bne.n	8014bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8014bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bdc:	699a      	ldr	r2, [r3, #24]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	691b      	ldr	r3, [r3, #16]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d106      	bne.n	8014bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8014be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be8:	899a      	ldrh	r2, [r3, #12]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	889b      	ldrh	r3, [r3, #4]
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d014      	beq.n	8014c1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014bfa:	6a3b      	ldr	r3, [r7, #32]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d104      	bne.n	8014c0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	61bb      	str	r3, [r7, #24]
 8014c08:	e009      	b.n	8014c1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0c:	7fda      	ldrb	r2, [r3, #31]
 8014c0e:	6a3b      	ldr	r3, [r7, #32]
 8014c10:	7fdb      	ldrb	r3, [r3, #31]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d803      	bhi.n	8014c1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d001      	beq.n	8014c2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1cb      	bne.n	8014bce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d008      	beq.n	8014c4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014c3c:	69b9      	ldr	r1, [r7, #24]
 8014c3e:	6a38      	ldr	r0, [r7, #32]
 8014c40:	f7ff ff0e 	bl	8014a60 <ip_reass_free_complete_datagram>
 8014c44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014c46:	697a      	ldr	r2, [r7, #20]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014c4e:	697a      	ldr	r2, [r7, #20]
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	da02      	bge.n	8014c5c <ip_reass_remove_oldest_datagram+0xb4>
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	dcac      	bgt.n	8014bb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014c5c:	697b      	ldr	r3, [r7, #20]
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3728      	adds	r7, #40	; 0x28
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	20004c0c 	.word	0x20004c0c

08014c6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014c76:	2004      	movs	r0, #4
 8014c78:	f7f6 faa2 	bl	800b1c0 <memp_malloc>
 8014c7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d110      	bne.n	8014ca6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014c84:	6839      	ldr	r1, [r7, #0]
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f7ff ff8e 	bl	8014ba8 <ip_reass_remove_oldest_datagram>
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	4293      	cmp	r3, r2
 8014c92:	dc03      	bgt.n	8014c9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014c94:	2004      	movs	r0, #4
 8014c96:	f7f6 fa93 	bl	800b1c0 <memp_malloc>
 8014c9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d101      	bne.n	8014ca6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	e016      	b.n	8014cd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014ca6:	2220      	movs	r2, #32
 8014ca8:	2100      	movs	r1, #0
 8014caa:	68f8      	ldr	r0, [r7, #12]
 8014cac:	f001 f8cc 	bl	8015e48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	220f      	movs	r2, #15
 8014cb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014cb6:	4b09      	ldr	r3, [pc, #36]	; (8014cdc <ip_reass_enqueue_new_datagram+0x70>)
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014cbe:	4a07      	ldr	r2, [pc, #28]	; (8014cdc <ip_reass_enqueue_new_datagram+0x70>)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	3308      	adds	r3, #8
 8014cc8:	2214      	movs	r2, #20
 8014cca:	6879      	ldr	r1, [r7, #4]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f001 f893 	bl	8015df8 <memcpy>
  return ipr;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3710      	adds	r7, #16
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	20004c0c 	.word	0x20004c0c

08014ce0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
 8014ce8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014cea:	4b10      	ldr	r3, [pc, #64]	; (8014d2c <ip_reass_dequeue_datagram+0x4c>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d104      	bne.n	8014cfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	4a0c      	ldr	r2, [pc, #48]	; (8014d2c <ip_reass_dequeue_datagram+0x4c>)
 8014cfa:	6013      	str	r3, [r2, #0]
 8014cfc:	e00d      	b.n	8014d1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d106      	bne.n	8014d12 <ip_reass_dequeue_datagram+0x32>
 8014d04:	4b0a      	ldr	r3, [pc, #40]	; (8014d30 <ip_reass_dequeue_datagram+0x50>)
 8014d06:	f240 1245 	movw	r2, #325	; 0x145
 8014d0a:	490a      	ldr	r1, [pc, #40]	; (8014d34 <ip_reass_dequeue_datagram+0x54>)
 8014d0c:	480a      	ldr	r0, [pc, #40]	; (8014d38 <ip_reass_dequeue_datagram+0x58>)
 8014d0e:	f001 f94d 	bl	8015fac <iprintf>
    prev->next = ipr->next;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014d1a:	6879      	ldr	r1, [r7, #4]
 8014d1c:	2004      	movs	r0, #4
 8014d1e:	f7f6 faa1 	bl	800b264 <memp_free>
}
 8014d22:	bf00      	nop
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	20004c0c 	.word	0x20004c0c
 8014d30:	0801a444 	.word	0x0801a444
 8014d34:	0801a50c 	.word	0x0801a50c
 8014d38:	0801a48c 	.word	0x0801a48c

08014d3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08c      	sub	sp, #48	; 0x30
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	885b      	ldrh	r3, [r3, #2]
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f5 fd79 	bl	800a854 <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	f003 030f 	and.w	r3, r3, #15
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014d74:	7e7b      	ldrb	r3, [r7, #25]
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	8b7a      	ldrh	r2, [r7, #26]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d202      	bcs.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d82:	e135      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014d84:	7e7b      	ldrb	r3, [r7, #25]
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	8b7a      	ldrh	r2, [r7, #26]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	88db      	ldrh	r3, [r3, #6]
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f5 fd5d 	bl	800a854 <lwip_htons>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dae:	2200      	movs	r2, #0
 8014db0:	701a      	strb	r2, [r3, #0]
 8014db2:	2200      	movs	r2, #0
 8014db4:	705a      	strb	r2, [r3, #1]
 8014db6:	2200      	movs	r2, #0
 8014db8:	709a      	strb	r2, [r3, #2]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc0:	8afa      	ldrh	r2, [r7, #22]
 8014dc2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014dc4:	8afa      	ldrh	r2, [r7, #22]
 8014dc6:	8b7b      	ldrh	r3, [r7, #26]
 8014dc8:	4413      	add	r3, r2
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd2:	88db      	ldrh	r3, [r3, #6]
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	8afa      	ldrh	r2, [r7, #22]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d902      	bls.n	8014de2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8014de0:	e106      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	627b      	str	r3, [r7, #36]	; 0x24
 8014de8:	e068      	b.n	8014ebc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df2:	889b      	ldrh	r3, [r3, #4]
 8014df4:	b29a      	uxth	r2, r3
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	889b      	ldrh	r3, [r3, #4]
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d235      	bcs.n	8014e6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d020      	beq.n	8014e4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0e:	889b      	ldrh	r3, [r3, #4]
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e14:	88db      	ldrh	r3, [r3, #6]
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d307      	bcc.n	8014e2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e1e:	88db      	ldrh	r3, [r3, #6]
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	889b      	ldrh	r3, [r3, #4]
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d902      	bls.n	8014e32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e30:	e0de      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	68ba      	ldr	r2, [r7, #8]
 8014e36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3a:	88db      	ldrh	r3, [r3, #6]
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e40:	889b      	ldrh	r3, [r3, #4]
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d03d      	beq.n	8014ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014e4c:	e03a      	b.n	8014ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e50:	88db      	ldrh	r3, [r3, #6]
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	889b      	ldrh	r3, [r3, #4]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d902      	bls.n	8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e62:	e0c5      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	68ba      	ldr	r2, [r7, #8]
 8014e68:	605a      	str	r2, [r3, #4]
      break;
 8014e6a:	e02b      	b.n	8014ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e6e:	889b      	ldrh	r3, [r3, #4]
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	889b      	ldrh	r3, [r3, #4]
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d102      	bne.n	8014e82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e80:	e0b6      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e84:	889b      	ldrh	r3, [r3, #4]
 8014e86:	b29a      	uxth	r2, r3
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	88db      	ldrh	r3, [r3, #6]
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d202      	bcs.n	8014e98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e92:	f04f 33ff 	mov.w	r3, #4294967295
 8014e96:	e0ab      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d009      	beq.n	8014eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea0:	88db      	ldrh	r3, [r3, #6]
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	889b      	ldrh	r3, [r3, #4]
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d001      	beq.n	8014eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d193      	bne.n	8014dea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014ec2:	e000      	b.n	8014ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014ec4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d12d      	bne.n	8014f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d01c      	beq.n	8014f0c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed4:	88db      	ldrh	r3, [r3, #6]
 8014ed6:	b29a      	uxth	r2, r3
 8014ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eda:	889b      	ldrh	r3, [r3, #4]
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d906      	bls.n	8014ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014ee2:	4b45      	ldr	r3, [pc, #276]	; (8014ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ee4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014ee8:	4944      	ldr	r1, [pc, #272]	; (8014ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014eea:	4845      	ldr	r0, [pc, #276]	; (8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014eec:	f001 f85e 	bl	8015fac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef2:	68ba      	ldr	r2, [r7, #8]
 8014ef4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef8:	88db      	ldrh	r3, [r3, #6]
 8014efa:	b29a      	uxth	r2, r3
 8014efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efe:	889b      	ldrh	r3, [r3, #4]
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d010      	beq.n	8014f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	623b      	str	r3, [r7, #32]
 8014f0a:	e00d      	b.n	8014f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d006      	beq.n	8014f22 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014f14:	4b38      	ldr	r3, [pc, #224]	; (8014ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f16:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014f1a:	493a      	ldr	r1, [pc, #232]	; (8015004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014f1c:	4838      	ldr	r0, [pc, #224]	; (8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f1e:	f001 f845 	bl	8015fac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	68ba      	ldr	r2, [r7, #8]
 8014f26:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d105      	bne.n	8014f3a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	7f9b      	ldrb	r3, [r3, #30]
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d059      	beq.n	8014fee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014f3a:	6a3b      	ldr	r3, [r7, #32]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d04f      	beq.n	8014fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	889b      	ldrh	r3, [r3, #4]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d002      	beq.n	8014f5c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014f56:	2300      	movs	r3, #0
 8014f58:	623b      	str	r3, [r7, #32]
 8014f5a:	e041      	b.n	8014fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f5e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014f66:	e012      	b.n	8014f8e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f70:	88db      	ldrh	r3, [r3, #6]
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f76:	889b      	ldrh	r3, [r3, #4]
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d002      	beq.n	8014f84 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	623b      	str	r3, [r7, #32]
            break;
 8014f82:	e007      	b.n	8014f94 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d1e9      	bne.n	8014f68 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014f94:	6a3b      	ldr	r3, [r7, #32]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d022      	beq.n	8014fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d106      	bne.n	8014fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014fa2:	4b15      	ldr	r3, [pc, #84]	; (8014ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fa4:	f240 12df 	movw	r2, #479	; 0x1df
 8014fa8:	4917      	ldr	r1, [pc, #92]	; (8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014faa:	4815      	ldr	r0, [pc, #84]	; (8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fac:	f000 fffe 	bl	8015fac <iprintf>
          LWIP_ASSERT("sanity check",
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d106      	bne.n	8014fca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014fbc:	4b0e      	ldr	r3, [pc, #56]	; (8014ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014fc2:	4911      	ldr	r1, [pc, #68]	; (8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014fc4:	480e      	ldr	r0, [pc, #56]	; (8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fc6:	f000 fff1 	bl	8015fac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d006      	beq.n	8014fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014fd2:	4b09      	ldr	r3, [pc, #36]	; (8014ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fd4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014fd8:	490c      	ldr	r1, [pc, #48]	; (801500c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014fda:	4809      	ldr	r0, [pc, #36]	; (8015000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fdc:	f000 ffe6 	bl	8015fac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014fe0:	6a3b      	ldr	r3, [r7, #32]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	bf14      	ite	ne
 8014fe6:	2301      	movne	r3, #1
 8014fe8:	2300      	moveq	r3, #0
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	e000      	b.n	8014ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014fee:	2300      	movs	r3, #0
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3730      	adds	r7, #48	; 0x30
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	0801a444 	.word	0x0801a444
 8014ffc:	0801a528 	.word	0x0801a528
 8015000:	0801a48c 	.word	0x0801a48c
 8015004:	0801a548 	.word	0x0801a548
 8015008:	0801a580 	.word	0x0801a580
 801500c:	0801a590 	.word	0x0801a590

08015010 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b08e      	sub	sp, #56	; 0x38
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	f003 030f 	and.w	r3, r3, #15
 8015026:	b2db      	uxtb	r3, r3
 8015028:	009b      	lsls	r3, r3, #2
 801502a:	b2db      	uxtb	r3, r3
 801502c:	2b14      	cmp	r3, #20
 801502e:	f040 8167 	bne.w	8015300 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015034:	88db      	ldrh	r3, [r3, #6]
 8015036:	b29b      	uxth	r3, r3
 8015038:	4618      	mov	r0, r3
 801503a:	f7f5 fc0b 	bl	800a854 <lwip_htons>
 801503e:	4603      	mov	r3, r0
 8015040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015044:	b29b      	uxth	r3, r3
 8015046:	00db      	lsls	r3, r3, #3
 8015048:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801504c:	885b      	ldrh	r3, [r3, #2]
 801504e:	b29b      	uxth	r3, r3
 8015050:	4618      	mov	r0, r3
 8015052:	f7f5 fbff 	bl	800a854 <lwip_htons>
 8015056:	4603      	mov	r3, r0
 8015058:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	f003 030f 	and.w	r3, r3, #15
 8015062:	b2db      	uxtb	r3, r3
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801506a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801506e:	b29b      	uxth	r3, r3
 8015070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015072:	429a      	cmp	r2, r3
 8015074:	f0c0 8146 	bcc.w	8015304 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801507c:	b29b      	uxth	r3, r3
 801507e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7f7 f81f 	bl	800c0c8 <pbuf_clen>
 801508a:	4603      	mov	r3, r0
 801508c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801508e:	4b9f      	ldr	r3, [pc, #636]	; (801530c <ip4_reass+0x2fc>)
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	461a      	mov	r2, r3
 8015094:	8c3b      	ldrh	r3, [r7, #32]
 8015096:	4413      	add	r3, r2
 8015098:	2b0a      	cmp	r3, #10
 801509a:	dd10      	ble.n	80150be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801509c:	8c3b      	ldrh	r3, [r7, #32]
 801509e:	4619      	mov	r1, r3
 80150a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150a2:	f7ff fd81 	bl	8014ba8 <ip_reass_remove_oldest_datagram>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f000 812d 	beq.w	8015308 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80150ae:	4b97      	ldr	r3, [pc, #604]	; (801530c <ip4_reass+0x2fc>)
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	461a      	mov	r2, r3
 80150b4:	8c3b      	ldrh	r3, [r7, #32]
 80150b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80150b8:	2b0a      	cmp	r3, #10
 80150ba:	f300 8125 	bgt.w	8015308 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80150be:	4b94      	ldr	r3, [pc, #592]	; (8015310 <ip4_reass+0x300>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	633b      	str	r3, [r7, #48]	; 0x30
 80150c4:	e015      	b.n	80150f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80150c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c8:	695a      	ldr	r2, [r3, #20]
 80150ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d10c      	bne.n	80150ec <ip4_reass+0xdc>
 80150d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d4:	699a      	ldr	r2, [r3, #24]
 80150d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d8:	691b      	ldr	r3, [r3, #16]
 80150da:	429a      	cmp	r2, r3
 80150dc:	d106      	bne.n	80150ec <ip4_reass+0xdc>
 80150de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e0:	899a      	ldrh	r2, [r3, #12]
 80150e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e4:	889b      	ldrh	r3, [r3, #4]
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d006      	beq.n	80150fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80150ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	633b      	str	r3, [r7, #48]	; 0x30
 80150f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d1e6      	bne.n	80150c6 <ip4_reass+0xb6>
 80150f8:	e000      	b.n	80150fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80150fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80150fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d109      	bne.n	8015116 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015102:	8c3b      	ldrh	r3, [r7, #32]
 8015104:	4619      	mov	r1, r3
 8015106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015108:	f7ff fdb0 	bl	8014c6c <ip_reass_enqueue_new_datagram>
 801510c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015110:	2b00      	cmp	r3, #0
 8015112:	d11c      	bne.n	801514e <ip4_reass+0x13e>
      goto nullreturn;
 8015114:	e109      	b.n	801532a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015118:	88db      	ldrh	r3, [r3, #6]
 801511a:	b29b      	uxth	r3, r3
 801511c:	4618      	mov	r0, r3
 801511e:	f7f5 fb99 	bl	800a854 <lwip_htons>
 8015122:	4603      	mov	r3, r0
 8015124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015128:	2b00      	cmp	r3, #0
 801512a:	d110      	bne.n	801514e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801512e:	89db      	ldrh	r3, [r3, #14]
 8015130:	4618      	mov	r0, r3
 8015132:	f7f5 fb8f 	bl	800a854 <lwip_htons>
 8015136:	4603      	mov	r3, r0
 8015138:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801513c:	2b00      	cmp	r3, #0
 801513e:	d006      	beq.n	801514e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015142:	3308      	adds	r3, #8
 8015144:	2214      	movs	r2, #20
 8015146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015148:	4618      	mov	r0, r3
 801514a:	f000 fe55 	bl	8015df8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015150:	88db      	ldrh	r3, [r3, #6]
 8015152:	b29b      	uxth	r3, r3
 8015154:	f003 0320 	and.w	r3, r3, #32
 8015158:	2b00      	cmp	r3, #0
 801515a:	bf0c      	ite	eq
 801515c:	2301      	moveq	r3, #1
 801515e:	2300      	movne	r3, #0
 8015160:	b2db      	uxtb	r3, r3
 8015162:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d00e      	beq.n	8015188 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801516a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801516c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801516e:	4413      	add	r3, r2
 8015170:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015172:	8b7a      	ldrh	r2, [r7, #26]
 8015174:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015176:	429a      	cmp	r2, r3
 8015178:	f0c0 80a0 	bcc.w	80152bc <ip4_reass+0x2ac>
 801517c:	8b7b      	ldrh	r3, [r7, #26]
 801517e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015182:	4293      	cmp	r3, r2
 8015184:	f200 809a 	bhi.w	80152bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015188:	69fa      	ldr	r2, [r7, #28]
 801518a:	6879      	ldr	r1, [r7, #4]
 801518c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801518e:	f7ff fdd5 	bl	8014d3c <ip_reass_chain_frag_into_datagram_and_validate>
 8015192:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801519a:	f000 8091 	beq.w	80152c0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801519e:	4b5b      	ldr	r3, [pc, #364]	; (801530c <ip4_reass+0x2fc>)
 80151a0:	881a      	ldrh	r2, [r3, #0]
 80151a2:	8c3b      	ldrh	r3, [r7, #32]
 80151a4:	4413      	add	r3, r2
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	4b58      	ldr	r3, [pc, #352]	; (801530c <ip4_reass+0x2fc>)
 80151aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d00d      	beq.n	80151ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80151b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151b6:	4413      	add	r3, r2
 80151b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80151ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151bc:	8a7a      	ldrh	r2, [r7, #18]
 80151be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80151c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c2:	7f9b      	ldrb	r3, [r3, #30]
 80151c4:	f043 0301 	orr.w	r3, r3, #1
 80151c8:	b2da      	uxtb	r2, r3
 80151ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d171      	bne.n	80152b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80151d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d6:	8b9b      	ldrh	r3, [r3, #28]
 80151d8:	3314      	adds	r3, #20
 80151da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80151dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80151e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80151ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f0:	3308      	adds	r3, #8
 80151f2:	2214      	movs	r2, #20
 80151f4:	4619      	mov	r1, r3
 80151f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151f8:	f000 fdfe 	bl	8015df8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80151fc:	8a3b      	ldrh	r3, [r7, #16]
 80151fe:	4618      	mov	r0, r3
 8015200:	f7f5 fb28 	bl	800a854 <lwip_htons>
 8015204:	4603      	mov	r3, r0
 8015206:	461a      	mov	r2, r3
 8015208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520e:	2200      	movs	r2, #0
 8015210:	719a      	strb	r2, [r3, #6]
 8015212:	2200      	movs	r2, #0
 8015214:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015218:	2200      	movs	r2, #0
 801521a:	729a      	strb	r2, [r3, #10]
 801521c:	2200      	movs	r2, #0
 801521e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015226:	e00d      	b.n	8015244 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801522e:	2114      	movs	r1, #20
 8015230:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015232:	f7f6 fe35 	bl	800bea0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f7f6 ff85 	bl	800c148 <pbuf_cat>
      r = iprh->next_pbuf;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015246:	2b00      	cmp	r3, #0
 8015248:	d1ee      	bne.n	8015228 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801524a:	4b31      	ldr	r3, [pc, #196]	; (8015310 <ip4_reass+0x300>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015250:	429a      	cmp	r2, r3
 8015252:	d102      	bne.n	801525a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015254:	2300      	movs	r3, #0
 8015256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015258:	e010      	b.n	801527c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801525a:	4b2d      	ldr	r3, [pc, #180]	; (8015310 <ip4_reass+0x300>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015260:	e007      	b.n	8015272 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015268:	429a      	cmp	r2, r3
 801526a:	d006      	beq.n	801527a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1f4      	bne.n	8015262 <ip4_reass+0x252>
 8015278:	e000      	b.n	801527c <ip4_reass+0x26c>
          break;
 801527a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801527c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801527e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015280:	f7ff fd2e 	bl	8014ce0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7f6 ff1f 	bl	800c0c8 <pbuf_clen>
 801528a:	4603      	mov	r3, r0
 801528c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801528e:	4b1f      	ldr	r3, [pc, #124]	; (801530c <ip4_reass+0x2fc>)
 8015290:	881b      	ldrh	r3, [r3, #0]
 8015292:	8c3a      	ldrh	r2, [r7, #32]
 8015294:	429a      	cmp	r2, r3
 8015296:	d906      	bls.n	80152a6 <ip4_reass+0x296>
 8015298:	4b1e      	ldr	r3, [pc, #120]	; (8015314 <ip4_reass+0x304>)
 801529a:	f240 229b 	movw	r2, #667	; 0x29b
 801529e:	491e      	ldr	r1, [pc, #120]	; (8015318 <ip4_reass+0x308>)
 80152a0:	481e      	ldr	r0, [pc, #120]	; (801531c <ip4_reass+0x30c>)
 80152a2:	f000 fe83 	bl	8015fac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80152a6:	4b19      	ldr	r3, [pc, #100]	; (801530c <ip4_reass+0x2fc>)
 80152a8:	881a      	ldrh	r2, [r3, #0]
 80152aa:	8c3b      	ldrh	r3, [r7, #32]
 80152ac:	1ad3      	subs	r3, r2, r3
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	4b16      	ldr	r3, [pc, #88]	; (801530c <ip4_reass+0x2fc>)
 80152b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	e03c      	b.n	8015332 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80152b8:	2300      	movs	r3, #0
 80152ba:	e03a      	b.n	8015332 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80152bc:	bf00      	nop
 80152be:	e000      	b.n	80152c2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80152c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80152c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d106      	bne.n	80152d6 <ip4_reass+0x2c6>
 80152c8:	4b12      	ldr	r3, [pc, #72]	; (8015314 <ip4_reass+0x304>)
 80152ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80152ce:	4914      	ldr	r1, [pc, #80]	; (8015320 <ip4_reass+0x310>)
 80152d0:	4812      	ldr	r0, [pc, #72]	; (801531c <ip4_reass+0x30c>)
 80152d2:	f000 fe6b 	bl	8015fac <iprintf>
  if (ipr->p == NULL) {
 80152d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d124      	bne.n	8015328 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80152de:	4b0c      	ldr	r3, [pc, #48]	; (8015310 <ip4_reass+0x300>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d006      	beq.n	80152f6 <ip4_reass+0x2e6>
 80152e8:	4b0a      	ldr	r3, [pc, #40]	; (8015314 <ip4_reass+0x304>)
 80152ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 80152ee:	490d      	ldr	r1, [pc, #52]	; (8015324 <ip4_reass+0x314>)
 80152f0:	480a      	ldr	r0, [pc, #40]	; (801531c <ip4_reass+0x30c>)
 80152f2:	f000 fe5b 	bl	8015fac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80152f6:	2100      	movs	r1, #0
 80152f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152fa:	f7ff fcf1 	bl	8014ce0 <ip_reass_dequeue_datagram>
 80152fe:	e014      	b.n	801532a <ip4_reass+0x31a>
    goto nullreturn;
 8015300:	bf00      	nop
 8015302:	e012      	b.n	801532a <ip4_reass+0x31a>
    goto nullreturn;
 8015304:	bf00      	nop
 8015306:	e010      	b.n	801532a <ip4_reass+0x31a>
      goto nullreturn;
 8015308:	bf00      	nop
 801530a:	e00e      	b.n	801532a <ip4_reass+0x31a>
 801530c:	20004c10 	.word	0x20004c10
 8015310:	20004c0c 	.word	0x20004c0c
 8015314:	0801a444 	.word	0x0801a444
 8015318:	0801a5b4 	.word	0x0801a5b4
 801531c:	0801a48c 	.word	0x0801a48c
 8015320:	0801a5d0 	.word	0x0801a5d0
 8015324:	0801a5dc 	.word	0x0801a5dc
  }

nullreturn:
 8015328:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7f6 fe3e 	bl	800bfac <pbuf_free>
  return NULL;
 8015330:	2300      	movs	r3, #0
}
 8015332:	4618      	mov	r0, r3
 8015334:	3738      	adds	r7, #56	; 0x38
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop

0801533c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015340:	2005      	movs	r0, #5
 8015342:	f7f5 ff3d 	bl	800b1c0 <memp_malloc>
 8015346:	4603      	mov	r3, r0
}
 8015348:	4618      	mov	r0, r3
 801534a:	bd80      	pop	{r7, pc}

0801534c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b082      	sub	sp, #8
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d106      	bne.n	8015368 <ip_frag_free_pbuf_custom_ref+0x1c>
 801535a:	4b07      	ldr	r3, [pc, #28]	; (8015378 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801535c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015360:	4906      	ldr	r1, [pc, #24]	; (801537c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015362:	4807      	ldr	r0, [pc, #28]	; (8015380 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015364:	f000 fe22 	bl	8015fac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015368:	6879      	ldr	r1, [r7, #4]
 801536a:	2005      	movs	r0, #5
 801536c:	f7f5 ff7a 	bl	800b264 <memp_free>
}
 8015370:	bf00      	nop
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	0801a444 	.word	0x0801a444
 801537c:	0801a5fc 	.word	0x0801a5fc
 8015380:	0801a48c 	.word	0x0801a48c

08015384 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d106      	bne.n	80153a4 <ipfrag_free_pbuf_custom+0x20>
 8015396:	4b11      	ldr	r3, [pc, #68]	; (80153dc <ipfrag_free_pbuf_custom+0x58>)
 8015398:	f240 22ce 	movw	r2, #718	; 0x2ce
 801539c:	4910      	ldr	r1, [pc, #64]	; (80153e0 <ipfrag_free_pbuf_custom+0x5c>)
 801539e:	4811      	ldr	r0, [pc, #68]	; (80153e4 <ipfrag_free_pbuf_custom+0x60>)
 80153a0:	f000 fe04 	bl	8015fac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d006      	beq.n	80153ba <ipfrag_free_pbuf_custom+0x36>
 80153ac:	4b0b      	ldr	r3, [pc, #44]	; (80153dc <ipfrag_free_pbuf_custom+0x58>)
 80153ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80153b2:	490d      	ldr	r1, [pc, #52]	; (80153e8 <ipfrag_free_pbuf_custom+0x64>)
 80153b4:	480b      	ldr	r0, [pc, #44]	; (80153e4 <ipfrag_free_pbuf_custom+0x60>)
 80153b6:	f000 fdf9 	bl	8015fac <iprintf>
  if (pcr->original != NULL) {
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	695b      	ldr	r3, [r3, #20]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d004      	beq.n	80153cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	695b      	ldr	r3, [r3, #20]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f6 fdf0 	bl	800bfac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff ffbd 	bl	801534c <ip_frag_free_pbuf_custom_ref>
}
 80153d2:	bf00      	nop
 80153d4:	3710      	adds	r7, #16
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	0801a444 	.word	0x0801a444
 80153e0:	0801a608 	.word	0x0801a608
 80153e4:	0801a48c 	.word	0x0801a48c
 80153e8:	0801a614 	.word	0x0801a614

080153ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b094      	sub	sp, #80	; 0x50
 80153f0:	af02      	add	r7, sp, #8
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80153f8:	2300      	movs	r3, #0
 80153fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015402:	3b14      	subs	r3, #20
 8015404:	2b00      	cmp	r3, #0
 8015406:	da00      	bge.n	801540a <ip4_frag+0x1e>
 8015408:	3307      	adds	r3, #7
 801540a:	10db      	asrs	r3, r3, #3
 801540c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801540e:	2314      	movs	r3, #20
 8015410:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f003 030f 	and.w	r3, r3, #15
 8015424:	b2db      	uxtb	r3, r3
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	b2db      	uxtb	r3, r3
 801542a:	2b14      	cmp	r3, #20
 801542c:	d002      	beq.n	8015434 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801542e:	f06f 0305 	mvn.w	r3, #5
 8015432:	e110      	b.n	8015656 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	895b      	ldrh	r3, [r3, #10]
 8015438:	2b13      	cmp	r3, #19
 801543a:	d809      	bhi.n	8015450 <ip4_frag+0x64>
 801543c:	4b88      	ldr	r3, [pc, #544]	; (8015660 <ip4_frag+0x274>)
 801543e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015442:	4988      	ldr	r1, [pc, #544]	; (8015664 <ip4_frag+0x278>)
 8015444:	4888      	ldr	r0, [pc, #544]	; (8015668 <ip4_frag+0x27c>)
 8015446:	f000 fdb1 	bl	8015fac <iprintf>
 801544a:	f06f 0305 	mvn.w	r3, #5
 801544e:	e102      	b.n	8015656 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	88db      	ldrh	r3, [r3, #6]
 8015454:	b29b      	uxth	r3, r3
 8015456:	4618      	mov	r0, r3
 8015458:	f7f5 f9fc 	bl	800a854 <lwip_htons>
 801545c:	4603      	mov	r3, r0
 801545e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015466:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801546a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801546c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015470:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	891b      	ldrh	r3, [r3, #8]
 8015476:	3b14      	subs	r3, #20
 8015478:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801547c:	e0e1      	b.n	8015642 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801547e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	b29b      	uxth	r3, r3
 8015484:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015488:	4293      	cmp	r3, r2
 801548a:	bf28      	it	cs
 801548c:	4613      	movcs	r3, r2
 801548e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015490:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015494:	2114      	movs	r1, #20
 8015496:	200e      	movs	r0, #14
 8015498:	f7f6 faa4 	bl	800b9e4 <pbuf_alloc>
 801549c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	f000 80d5 	beq.w	8015650 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	895b      	ldrh	r3, [r3, #10]
 80154aa:	2b13      	cmp	r3, #19
 80154ac:	d806      	bhi.n	80154bc <ip4_frag+0xd0>
 80154ae:	4b6c      	ldr	r3, [pc, #432]	; (8015660 <ip4_frag+0x274>)
 80154b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80154b4:	496d      	ldr	r1, [pc, #436]	; (801566c <ip4_frag+0x280>)
 80154b6:	486c      	ldr	r0, [pc, #432]	; (8015668 <ip4_frag+0x27c>)
 80154b8:	f000 fd78 	bl	8015fac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	2214      	movs	r2, #20
 80154c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154c4:	4618      	mov	r0, r3
 80154c6:	f000 fc97 	bl	8015df8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80154ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80154d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80154d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80154d6:	e064      	b.n	80155a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	895a      	ldrh	r2, [r3, #10]
 80154dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	895b      	ldrh	r3, [r3, #10]
 80154e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d906      	bls.n	80154fa <ip4_frag+0x10e>
 80154ec:	4b5c      	ldr	r3, [pc, #368]	; (8015660 <ip4_frag+0x274>)
 80154ee:	f240 322d 	movw	r2, #813	; 0x32d
 80154f2:	495f      	ldr	r1, [pc, #380]	; (8015670 <ip4_frag+0x284>)
 80154f4:	485c      	ldr	r0, [pc, #368]	; (8015668 <ip4_frag+0x27c>)
 80154f6:	f000 fd59 	bl	8015fac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80154fa:	8bfa      	ldrh	r2, [r7, #30]
 80154fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015500:	4293      	cmp	r3, r2
 8015502:	bf28      	it	cs
 8015504:	4613      	movcs	r3, r2
 8015506:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801550a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801550e:	2b00      	cmp	r3, #0
 8015510:	d105      	bne.n	801551e <ip4_frag+0x132>
        poff = 0;
 8015512:	2300      	movs	r3, #0
 8015514:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	60fb      	str	r3, [r7, #12]
        continue;
 801551c:	e041      	b.n	80155a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801551e:	f7ff ff0d 	bl	801533c <ip_frag_alloc_pbuf_custom_ref>
 8015522:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d103      	bne.n	8015532 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801552a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801552c:	f7f6 fd3e 	bl	800bfac <pbuf_free>
        goto memerr;
 8015530:	e08f      	b.n	8015652 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015532:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015538:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801553a:	4413      	add	r3, r2
 801553c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015540:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015544:	9201      	str	r2, [sp, #4]
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	4603      	mov	r3, r0
 801554a:	2241      	movs	r2, #65	; 0x41
 801554c:	2000      	movs	r0, #0
 801554e:	f7f6 fb73 	bl	800bc38 <pbuf_alloced_custom>
 8015552:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d106      	bne.n	8015568 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801555a:	69b8      	ldr	r0, [r7, #24]
 801555c:	f7ff fef6 	bl	801534c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015562:	f7f6 fd23 	bl	800bfac <pbuf_free>
        goto memerr;
 8015566:	e074      	b.n	8015652 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f7f6 fdc5 	bl	800c0f8 <pbuf_ref>
      pcr->original = p;
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015574:	69bb      	ldr	r3, [r7, #24]
 8015576:	4a3f      	ldr	r2, [pc, #252]	; (8015674 <ip4_frag+0x288>)
 8015578:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801557a:	6979      	ldr	r1, [r7, #20]
 801557c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801557e:	f7f6 fde3 	bl	800c148 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015582:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015586:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801558a:	1ad3      	subs	r3, r2, r3
 801558c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015594:	2b00      	cmp	r3, #0
 8015596:	d004      	beq.n	80155a2 <ip4_frag+0x1b6>
        poff = 0;
 8015598:	2300      	movs	r3, #0
 801559a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80155a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d196      	bne.n	80154d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80155aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80155ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155b0:	4413      	add	r3, r2
 80155b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155b8:	f1a3 0213 	sub.w	r2, r3, #19
 80155bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155c0:	429a      	cmp	r2, r3
 80155c2:	bfcc      	ite	gt
 80155c4:	2301      	movgt	r3, #1
 80155c6:	2300      	movle	r3, #0
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80155cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80155d6:	6a3b      	ldr	r3, [r7, #32]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d002      	beq.n	80155e2 <ip4_frag+0x1f6>
 80155dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d003      	beq.n	80155ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80155e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80155e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80155e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80155ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f5 f931 	bl	800a854 <lwip_htons>
 80155f2:	4603      	mov	r3, r0
 80155f4:	461a      	mov	r2, r3
 80155f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80155fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80155fc:	3314      	adds	r3, #20
 80155fe:	b29b      	uxth	r3, r3
 8015600:	4618      	mov	r0, r3
 8015602:	f7f5 f927 	bl	800a854 <lwip_htons>
 8015606:	4603      	mov	r3, r0
 8015608:	461a      	mov	r2, r3
 801560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015610:	2200      	movs	r2, #0
 8015612:	729a      	strb	r2, [r3, #10]
 8015614:	2200      	movs	r2, #0
 8015616:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	695b      	ldr	r3, [r3, #20]
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015620:	68b8      	ldr	r0, [r7, #8]
 8015622:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015626:	f7f6 fcc1 	bl	800bfac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801562a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801562e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015630:	1ad3      	subs	r3, r2, r3
 8015632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015636:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801563a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801563c:	4413      	add	r3, r2
 801563e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015642:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015646:	2b00      	cmp	r3, #0
 8015648:	f47f af19 	bne.w	801547e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801564c:	2300      	movs	r3, #0
 801564e:	e002      	b.n	8015656 <ip4_frag+0x26a>
      goto memerr;
 8015650:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015656:	4618      	mov	r0, r3
 8015658:	3748      	adds	r7, #72	; 0x48
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	0801a444 	.word	0x0801a444
 8015664:	0801a620 	.word	0x0801a620
 8015668:	0801a48c 	.word	0x0801a48c
 801566c:	0801a63c 	.word	0x0801a63c
 8015670:	0801a65c 	.word	0x0801a65c
 8015674:	08015385 	.word	0x08015385

08015678 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b086      	sub	sp, #24
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015682:	230e      	movs	r3, #14
 8015684:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	895b      	ldrh	r3, [r3, #10]
 801568a:	2b0e      	cmp	r3, #14
 801568c:	d96e      	bls.n	801576c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	7bdb      	ldrb	r3, [r3, #15]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d106      	bne.n	80156a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801569c:	3301      	adds	r3, #1
 801569e:	b2da      	uxtb	r2, r3
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80156aa:	693b      	ldr	r3, [r7, #16]
 80156ac:	7b1a      	ldrb	r2, [r3, #12]
 80156ae:	7b5b      	ldrb	r3, [r3, #13]
 80156b0:	021b      	lsls	r3, r3, #8
 80156b2:	4313      	orrs	r3, r2
 80156b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	f003 0301 	and.w	r3, r3, #1
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d023      	beq.n	801570a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d10f      	bne.n	80156ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	785b      	ldrb	r3, [r3, #1]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d11b      	bne.n	801570a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80156d6:	2b5e      	cmp	r3, #94	; 0x5e
 80156d8:	d117      	bne.n	801570a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	7b5b      	ldrb	r3, [r3, #13]
 80156de:	f043 0310 	orr.w	r3, r3, #16
 80156e2:	b2da      	uxtb	r2, r3
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	735a      	strb	r2, [r3, #13]
 80156e8:	e00f      	b.n	801570a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	2206      	movs	r2, #6
 80156ee:	4928      	ldr	r1, [pc, #160]	; (8015790 <ethernet_input+0x118>)
 80156f0:	4618      	mov	r0, r3
 80156f2:	f000 fb73 	bl	8015ddc <memcmp>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d106      	bne.n	801570a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	7b5b      	ldrb	r3, [r3, #13]
 8015700:	f043 0308 	orr.w	r3, r3, #8
 8015704:	b2da      	uxtb	r2, r3
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801570a:	89fb      	ldrh	r3, [r7, #14]
 801570c:	2b08      	cmp	r3, #8
 801570e:	d003      	beq.n	8015718 <ethernet_input+0xa0>
 8015710:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015714:	d014      	beq.n	8015740 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015716:	e032      	b.n	801577e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801571e:	f003 0308 	and.w	r3, r3, #8
 8015722:	2b00      	cmp	r3, #0
 8015724:	d024      	beq.n	8015770 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015726:	8afb      	ldrh	r3, [r7, #22]
 8015728:	4619      	mov	r1, r3
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f7f6 fbb8 	bl	800bea0 <pbuf_remove_header>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d11e      	bne.n	8015774 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015736:	6839      	ldr	r1, [r7, #0]
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7fe fdfd 	bl	8014338 <ip4_input>
      break;
 801573e:	e013      	b.n	8015768 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015746:	f003 0308 	and.w	r3, r3, #8
 801574a:	2b00      	cmp	r3, #0
 801574c:	d014      	beq.n	8015778 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801574e:	8afb      	ldrh	r3, [r7, #22]
 8015750:	4619      	mov	r1, r3
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7f6 fba4 	bl	800bea0 <pbuf_remove_header>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d10e      	bne.n	801577c <ethernet_input+0x104>
        etharp_input(p, netif);
 801575e:	6839      	ldr	r1, [r7, #0]
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f7fd ff9d 	bl	80136a0 <etharp_input>
      break;
 8015766:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015768:	2300      	movs	r3, #0
 801576a:	e00c      	b.n	8015786 <ethernet_input+0x10e>
    goto free_and_return;
 801576c:	bf00      	nop
 801576e:	e006      	b.n	801577e <ethernet_input+0x106>
        goto free_and_return;
 8015770:	bf00      	nop
 8015772:	e004      	b.n	801577e <ethernet_input+0x106>
        goto free_and_return;
 8015774:	bf00      	nop
 8015776:	e002      	b.n	801577e <ethernet_input+0x106>
        goto free_and_return;
 8015778:	bf00      	nop
 801577a:	e000      	b.n	801577e <ethernet_input+0x106>
        goto free_and_return;
 801577c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7f6 fc14 	bl	800bfac <pbuf_free>
  return ERR_OK;
 8015784:	2300      	movs	r3, #0
}
 8015786:	4618      	mov	r0, r3
 8015788:	3718      	adds	r7, #24
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
 801578e:	bf00      	nop
 8015790:	0801a868 	.word	0x0801a868

08015794 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015794:	b580      	push	{r7, lr}
 8015796:	b086      	sub	sp, #24
 8015798:	af00      	add	r7, sp, #0
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
 80157a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80157a2:	8c3b      	ldrh	r3, [r7, #32]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7f5 f855 	bl	800a854 <lwip_htons>
 80157aa:	4603      	mov	r3, r0
 80157ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80157ae:	210e      	movs	r1, #14
 80157b0:	68b8      	ldr	r0, [r7, #8]
 80157b2:	f7f6 fb65 	bl	800be80 <pbuf_add_header>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d125      	bne.n	8015808 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	8afa      	ldrh	r2, [r7, #22]
 80157c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	2206      	movs	r2, #6
 80157cc:	6839      	ldr	r1, [r7, #0]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f000 fb12 	bl	8015df8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	3306      	adds	r3, #6
 80157d8:	2206      	movs	r2, #6
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	f000 fb0b 	bl	8015df8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80157e8:	2b06      	cmp	r3, #6
 80157ea:	d006      	beq.n	80157fa <ethernet_output+0x66>
 80157ec:	4b0a      	ldr	r3, [pc, #40]	; (8015818 <ethernet_output+0x84>)
 80157ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 80157f2:	490a      	ldr	r1, [pc, #40]	; (801581c <ethernet_output+0x88>)
 80157f4:	480a      	ldr	r0, [pc, #40]	; (8015820 <ethernet_output+0x8c>)
 80157f6:	f000 fbd9 	bl	8015fac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	699b      	ldr	r3, [r3, #24]
 80157fe:	68b9      	ldr	r1, [r7, #8]
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	4798      	blx	r3
 8015804:	4603      	mov	r3, r0
 8015806:	e002      	b.n	801580e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015808:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801580a:	f06f 0301 	mvn.w	r3, #1
}
 801580e:	4618      	mov	r0, r3
 8015810:	3718      	adds	r7, #24
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	0801a66c 	.word	0x0801a66c
 801581c:	0801a6a4 	.word	0x0801a6a4
 8015820:	0801a6d8 	.word	0x0801a6d8

08015824 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2200      	movs	r2, #0
 8015832:	2104      	movs	r1, #4
 8015834:	4618      	mov	r0, r3
 8015836:	f7ef faa5 	bl	8004d84 <osMessageQueueNew>
 801583a:	4602      	mov	r2, r0
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d102      	bne.n	801584e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015848:	f04f 33ff 	mov.w	r3, #4294967295
 801584c:	e000      	b.n	8015850 <sys_mbox_new+0x2c>

  return ERR_OK;
 801584e:	2300      	movs	r3, #0
}
 8015850:	4618      	mov	r0, r3
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ef fbbf 	bl	8004fe8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	4618      	mov	r0, r3
 8015870:	f7ef fbda 	bl	8005028 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015874:	bf00      	nop
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b084      	sub	sp, #16
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6818      	ldr	r0, [r3, #0]
 801588a:	4639      	mov	r1, r7
 801588c:	2300      	movs	r3, #0
 801588e:	2200      	movs	r2, #0
 8015890:	f7ef faec 	bl	8004e6c <osMessageQueuePut>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	d102      	bne.n	80158a0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]
 801589e:	e001      	b.n	80158a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80158a0:	23ff      	movs	r3, #255	; 0xff
 80158a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80158a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3710      	adds	r7, #16
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b086      	sub	sp, #24
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80158bc:	f7ee ff4e 	bl	800475c <osKernelGetTickCount>
 80158c0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d013      	beq.n	80158f0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	6818      	ldr	r0, [r3, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2200      	movs	r2, #0
 80158d0:	68b9      	ldr	r1, [r7, #8]
 80158d2:	f7ef fb2b 	bl	8004f2c <osMessageQueueGet>
 80158d6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d105      	bne.n	80158ea <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80158de:	f7ee ff3d 	bl	800475c <osKernelGetTickCount>
 80158e2:	4602      	mov	r2, r0
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	1ad3      	subs	r3, r2, r3
 80158e8:	e00f      	b.n	801590a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80158ea:	f04f 33ff 	mov.w	r3, #4294967295
 80158ee:	e00c      	b.n	801590a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	6818      	ldr	r0, [r3, #0]
 80158f4:	f04f 33ff 	mov.w	r3, #4294967295
 80158f8:	2200      	movs	r2, #0
 80158fa:	68b9      	ldr	r1, [r7, #8]
 80158fc:	f7ef fb16 	bl	8004f2c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015900:	f7ee ff2c 	bl	800475c <osKernelGetTickCount>
 8015904:	4602      	mov	r2, r0
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801590a:	4618      	mov	r0, r3
 801590c:	3718      	adds	r7, #24
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}

08015912 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015912:	b580      	push	{r7, lr}
 8015914:	b082      	sub	sp, #8
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
 801591a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6818      	ldr	r0, [r3, #0]
 8015920:	2300      	movs	r3, #0
 8015922:	2200      	movs	r2, #0
 8015924:	6839      	ldr	r1, [r7, #0]
 8015926:	f7ef fb01 	bl	8004f2c <osMessageQueueGet>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d101      	bne.n	8015934 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8015930:	2300      	movs	r3, #0
 8015932:	e001      	b.n	8015938 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015934:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d101      	bne.n	8015954 <sys_mbox_valid+0x14>
    return 0;
 8015950:	2300      	movs	r3, #0
 8015952:	e000      	b.n	8015956 <sys_mbox_valid+0x16>
  else
    return 1;
 8015954:	2301      	movs	r3, #1
}
 8015956:	4618      	mov	r0, r3
 8015958:	370c      	adds	r7, #12
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015962:	b480      	push	{r7}
 8015964:	b083      	sub	sp, #12
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2200      	movs	r2, #0
 801596e:	601a      	str	r2, [r3, #0]
}
 8015970:	bf00      	nop
 8015972:	370c      	adds	r7, #12
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr

0801597c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	460b      	mov	r3, r1
 8015986:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8015988:	78fb      	ldrb	r3, [r7, #3]
 801598a:	2200      	movs	r2, #0
 801598c:	4619      	mov	r1, r3
 801598e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015992:	f7ef f8b3 	bl	8004afc <osSemaphoreNew>
 8015996:	4602      	mov	r2, r0
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d102      	bne.n	80159aa <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80159a4:	f04f 33ff 	mov.w	r3, #4294967295
 80159a8:	e009      	b.n	80159be <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80159aa:	78fb      	ldrb	r3, [r7, #3]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d105      	bne.n	80159bc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	2100      	movs	r1, #0
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7ef f92a 	bl	8004c10 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80159bc:	2300      	movs	r3, #0
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3708      	adds	r7, #8
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}

080159c6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80159c6:	b580      	push	{r7, lr}
 80159c8:	b084      	sub	sp, #16
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
 80159ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80159d0:	f7ee fec4 	bl	800475c <osKernelGetTickCount>
 80159d4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d011      	beq.n	8015a00 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7ef f914 	bl	8004c10 <osSemaphoreAcquire>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d105      	bne.n	80159fa <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80159ee:	f7ee feb5 	bl	800475c <osKernelGetTickCount>
 80159f2:	4602      	mov	r2, r0
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	e012      	b.n	8015a20 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80159fa:	f04f 33ff 	mov.w	r3, #4294967295
 80159fe:	e00f      	b.n	8015a20 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8015a00:	bf00      	nop
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	f04f 31ff 	mov.w	r1, #4294967295
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ef f900 	bl	8004c10 <osSemaphoreAcquire>
 8015a10:	4603      	mov	r3, r0
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1f5      	bne.n	8015a02 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8015a16:	f7ee fea1 	bl	800475c <osKernelGetTickCount>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ef f93d 	bl	8004cb4 <osSemaphoreRelease>
}
 8015a3a:	bf00      	nop
 8015a3c:	3708      	adds	r7, #8
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b082      	sub	sp, #8
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7ef f974 	bl	8004d3c <osSemaphoreDelete>
}
 8015a54:	bf00      	nop
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d101      	bne.n	8015a70 <sys_sem_valid+0x14>
    return 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	e000      	b.n	8015a72 <sys_sem_valid+0x16>
  else
    return 1;
 8015a70:	2301      	movs	r3, #1
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	370c      	adds	r7, #12
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr

08015a7e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015a7e:	b480      	push	{r7}
 8015a80:	b083      	sub	sp, #12
 8015a82:	af00      	add	r7, sp, #0
 8015a84:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	601a      	str	r2, [r3, #0]
}
 8015a8c:	bf00      	nop
 8015a8e:	370c      	adds	r7, #12
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr

08015a98 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015a9c:	2000      	movs	r0, #0
 8015a9e:	f7ee ff1f 	bl	80048e0 <osMutexNew>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	4a01      	ldr	r2, [pc, #4]	; (8015aac <sys_init+0x14>)
 8015aa6:	6013      	str	r3, [r2, #0]
#endif
}
 8015aa8:	bf00      	nop
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	2000b604 	.word	0x2000b604

08015ab0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015ab8:	2000      	movs	r0, #0
 8015aba:	f7ee ff11 	bl	80048e0 <osMutexNew>
 8015abe:	4602      	mov	r2, r0
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d102      	bne.n	8015ad2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015acc:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad0:	e000      	b.n	8015ad4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015ad2:	2300      	movs	r3, #0
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3708      	adds	r7, #8
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7ee ff7d 	bl	80049ec <osMutexAcquire>
#endif
}
 8015af2:	bf00      	nop
 8015af4:	3708      	adds	r7, #8
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}

08015afa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015afa:	b580      	push	{r7, lr}
 8015afc:	b082      	sub	sp, #8
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ee ffbb 	bl	8004a82 <osMutexRelease>
}
 8015b0c:	bf00      	nop
 8015b0e:	3708      	adds	r7, #8
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b08e      	sub	sp, #56	; 0x38
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	607a      	str	r2, [r7, #4]
 8015b20:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015b22:	f107 0314 	add.w	r3, r7, #20
 8015b26:	2224      	movs	r2, #36	; 0x24
 8015b28:	2100      	movs	r1, #0
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 f98c 	bl	8015e48 <memset>
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	617b      	str	r3, [r7, #20]
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015b3c:	f107 0314 	add.w	r3, r7, #20
 8015b40:	461a      	mov	r2, r3
 8015b42:	6879      	ldr	r1, [r7, #4]
 8015b44:	68b8      	ldr	r0, [r7, #8]
 8015b46:	f7ee fe1e 	bl	8004786 <osThreadNew>
 8015b4a:	4603      	mov	r3, r0
#endif
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3738      	adds	r7, #56	; 0x38
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015b58:	4b04      	ldr	r3, [pc, #16]	; (8015b6c <sys_arch_protect+0x18>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7ee ff43 	bl	80049ec <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015b66:	2301      	movs	r3, #1
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	2000b604 	.word	0x2000b604

08015b70 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015b78:	4b04      	ldr	r3, [pc, #16]	; (8015b8c <sys_arch_unprotect+0x1c>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7ee ff80 	bl	8004a82 <osMutexRelease>
}
 8015b82:	bf00      	nop
 8015b84:	3708      	adds	r7, #8
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	2000b604 	.word	0x2000b604

08015b90 <std>:
 8015b90:	2300      	movs	r3, #0
 8015b92:	b510      	push	{r4, lr}
 8015b94:	4604      	mov	r4, r0
 8015b96:	e9c0 3300 	strd	r3, r3, [r0]
 8015b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b9e:	6083      	str	r3, [r0, #8]
 8015ba0:	8181      	strh	r1, [r0, #12]
 8015ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8015ba4:	81c2      	strh	r2, [r0, #14]
 8015ba6:	6183      	str	r3, [r0, #24]
 8015ba8:	4619      	mov	r1, r3
 8015baa:	2208      	movs	r2, #8
 8015bac:	305c      	adds	r0, #92	; 0x5c
 8015bae:	f000 f94b 	bl	8015e48 <memset>
 8015bb2:	4b05      	ldr	r3, [pc, #20]	; (8015bc8 <std+0x38>)
 8015bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8015bb6:	4b05      	ldr	r3, [pc, #20]	; (8015bcc <std+0x3c>)
 8015bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8015bba:	4b05      	ldr	r3, [pc, #20]	; (8015bd0 <std+0x40>)
 8015bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015bbe:	4b05      	ldr	r3, [pc, #20]	; (8015bd4 <std+0x44>)
 8015bc0:	6224      	str	r4, [r4, #32]
 8015bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8015bc4:	bd10      	pop	{r4, pc}
 8015bc6:	bf00      	nop
 8015bc8:	08016191 	.word	0x08016191
 8015bcc:	080161b3 	.word	0x080161b3
 8015bd0:	080161eb 	.word	0x080161eb
 8015bd4:	0801620f 	.word	0x0801620f

08015bd8 <_cleanup_r>:
 8015bd8:	4901      	ldr	r1, [pc, #4]	; (8015be0 <_cleanup_r+0x8>)
 8015bda:	f000 b8af 	b.w	8015d3c <_fwalk_reent>
 8015bde:	bf00      	nop
 8015be0:	080163d9 	.word	0x080163d9

08015be4 <__sfmoreglue>:
 8015be4:	b570      	push	{r4, r5, r6, lr}
 8015be6:	1e4a      	subs	r2, r1, #1
 8015be8:	2568      	movs	r5, #104	; 0x68
 8015bea:	4355      	muls	r5, r2
 8015bec:	460e      	mov	r6, r1
 8015bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015bf2:	f000 f981 	bl	8015ef8 <_malloc_r>
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	b140      	cbz	r0, 8015c0c <__sfmoreglue+0x28>
 8015bfa:	2100      	movs	r1, #0
 8015bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8015c00:	300c      	adds	r0, #12
 8015c02:	60a0      	str	r0, [r4, #8]
 8015c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015c08:	f000 f91e 	bl	8015e48 <memset>
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}

08015c10 <__sfp_lock_acquire>:
 8015c10:	4801      	ldr	r0, [pc, #4]	; (8015c18 <__sfp_lock_acquire+0x8>)
 8015c12:	f000 b8d8 	b.w	8015dc6 <__retarget_lock_acquire_recursive>
 8015c16:	bf00      	nop
 8015c18:	2000b610 	.word	0x2000b610

08015c1c <__sfp_lock_release>:
 8015c1c:	4801      	ldr	r0, [pc, #4]	; (8015c24 <__sfp_lock_release+0x8>)
 8015c1e:	f000 b8d3 	b.w	8015dc8 <__retarget_lock_release_recursive>
 8015c22:	bf00      	nop
 8015c24:	2000b610 	.word	0x2000b610

08015c28 <__sinit_lock_acquire>:
 8015c28:	4801      	ldr	r0, [pc, #4]	; (8015c30 <__sinit_lock_acquire+0x8>)
 8015c2a:	f000 b8cc 	b.w	8015dc6 <__retarget_lock_acquire_recursive>
 8015c2e:	bf00      	nop
 8015c30:	2000b60b 	.word	0x2000b60b

08015c34 <__sinit_lock_release>:
 8015c34:	4801      	ldr	r0, [pc, #4]	; (8015c3c <__sinit_lock_release+0x8>)
 8015c36:	f000 b8c7 	b.w	8015dc8 <__retarget_lock_release_recursive>
 8015c3a:	bf00      	nop
 8015c3c:	2000b60b 	.word	0x2000b60b

08015c40 <__sinit>:
 8015c40:	b510      	push	{r4, lr}
 8015c42:	4604      	mov	r4, r0
 8015c44:	f7ff fff0 	bl	8015c28 <__sinit_lock_acquire>
 8015c48:	69a3      	ldr	r3, [r4, #24]
 8015c4a:	b11b      	cbz	r3, 8015c54 <__sinit+0x14>
 8015c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c50:	f7ff bff0 	b.w	8015c34 <__sinit_lock_release>
 8015c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015c58:	6523      	str	r3, [r4, #80]	; 0x50
 8015c5a:	4b13      	ldr	r3, [pc, #76]	; (8015ca8 <__sinit+0x68>)
 8015c5c:	4a13      	ldr	r2, [pc, #76]	; (8015cac <__sinit+0x6c>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8015c62:	42a3      	cmp	r3, r4
 8015c64:	bf04      	itt	eq
 8015c66:	2301      	moveq	r3, #1
 8015c68:	61a3      	streq	r3, [r4, #24]
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f000 f820 	bl	8015cb0 <__sfp>
 8015c70:	6060      	str	r0, [r4, #4]
 8015c72:	4620      	mov	r0, r4
 8015c74:	f000 f81c 	bl	8015cb0 <__sfp>
 8015c78:	60a0      	str	r0, [r4, #8]
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	f000 f818 	bl	8015cb0 <__sfp>
 8015c80:	2200      	movs	r2, #0
 8015c82:	60e0      	str	r0, [r4, #12]
 8015c84:	2104      	movs	r1, #4
 8015c86:	6860      	ldr	r0, [r4, #4]
 8015c88:	f7ff ff82 	bl	8015b90 <std>
 8015c8c:	68a0      	ldr	r0, [r4, #8]
 8015c8e:	2201      	movs	r2, #1
 8015c90:	2109      	movs	r1, #9
 8015c92:	f7ff ff7d 	bl	8015b90 <std>
 8015c96:	68e0      	ldr	r0, [r4, #12]
 8015c98:	2202      	movs	r2, #2
 8015c9a:	2112      	movs	r1, #18
 8015c9c:	f7ff ff78 	bl	8015b90 <std>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	61a3      	str	r3, [r4, #24]
 8015ca4:	e7d2      	b.n	8015c4c <__sinit+0xc>
 8015ca6:	bf00      	nop
 8015ca8:	0801a9d8 	.word	0x0801a9d8
 8015cac:	08015bd9 	.word	0x08015bd9

08015cb0 <__sfp>:
 8015cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cb2:	4607      	mov	r7, r0
 8015cb4:	f7ff ffac 	bl	8015c10 <__sfp_lock_acquire>
 8015cb8:	4b1e      	ldr	r3, [pc, #120]	; (8015d34 <__sfp+0x84>)
 8015cba:	681e      	ldr	r6, [r3, #0]
 8015cbc:	69b3      	ldr	r3, [r6, #24]
 8015cbe:	b913      	cbnz	r3, 8015cc6 <__sfp+0x16>
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f7ff ffbd 	bl	8015c40 <__sinit>
 8015cc6:	3648      	adds	r6, #72	; 0x48
 8015cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015ccc:	3b01      	subs	r3, #1
 8015cce:	d503      	bpl.n	8015cd8 <__sfp+0x28>
 8015cd0:	6833      	ldr	r3, [r6, #0]
 8015cd2:	b30b      	cbz	r3, 8015d18 <__sfp+0x68>
 8015cd4:	6836      	ldr	r6, [r6, #0]
 8015cd6:	e7f7      	b.n	8015cc8 <__sfp+0x18>
 8015cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015cdc:	b9d5      	cbnz	r5, 8015d14 <__sfp+0x64>
 8015cde:	4b16      	ldr	r3, [pc, #88]	; (8015d38 <__sfp+0x88>)
 8015ce0:	60e3      	str	r3, [r4, #12]
 8015ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8015ce8:	f000 f86c 	bl	8015dc4 <__retarget_lock_init_recursive>
 8015cec:	f7ff ff96 	bl	8015c1c <__sfp_lock_release>
 8015cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015cf8:	6025      	str	r5, [r4, #0]
 8015cfa:	61a5      	str	r5, [r4, #24]
 8015cfc:	2208      	movs	r2, #8
 8015cfe:	4629      	mov	r1, r5
 8015d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d04:	f000 f8a0 	bl	8015e48 <memset>
 8015d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015d10:	4620      	mov	r0, r4
 8015d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d14:	3468      	adds	r4, #104	; 0x68
 8015d16:	e7d9      	b.n	8015ccc <__sfp+0x1c>
 8015d18:	2104      	movs	r1, #4
 8015d1a:	4638      	mov	r0, r7
 8015d1c:	f7ff ff62 	bl	8015be4 <__sfmoreglue>
 8015d20:	4604      	mov	r4, r0
 8015d22:	6030      	str	r0, [r6, #0]
 8015d24:	2800      	cmp	r0, #0
 8015d26:	d1d5      	bne.n	8015cd4 <__sfp+0x24>
 8015d28:	f7ff ff78 	bl	8015c1c <__sfp_lock_release>
 8015d2c:	230c      	movs	r3, #12
 8015d2e:	603b      	str	r3, [r7, #0]
 8015d30:	e7ee      	b.n	8015d10 <__sfp+0x60>
 8015d32:	bf00      	nop
 8015d34:	0801a9d8 	.word	0x0801a9d8
 8015d38:	ffff0001 	.word	0xffff0001

08015d3c <_fwalk_reent>:
 8015d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d40:	4606      	mov	r6, r0
 8015d42:	4688      	mov	r8, r1
 8015d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015d48:	2700      	movs	r7, #0
 8015d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8015d52:	d505      	bpl.n	8015d60 <_fwalk_reent+0x24>
 8015d54:	6824      	ldr	r4, [r4, #0]
 8015d56:	2c00      	cmp	r4, #0
 8015d58:	d1f7      	bne.n	8015d4a <_fwalk_reent+0xe>
 8015d5a:	4638      	mov	r0, r7
 8015d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d60:	89ab      	ldrh	r3, [r5, #12]
 8015d62:	2b01      	cmp	r3, #1
 8015d64:	d907      	bls.n	8015d76 <_fwalk_reent+0x3a>
 8015d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	d003      	beq.n	8015d76 <_fwalk_reent+0x3a>
 8015d6e:	4629      	mov	r1, r5
 8015d70:	4630      	mov	r0, r6
 8015d72:	47c0      	blx	r8
 8015d74:	4307      	orrs	r7, r0
 8015d76:	3568      	adds	r5, #104	; 0x68
 8015d78:	e7e9      	b.n	8015d4e <_fwalk_reent+0x12>
	...

08015d7c <__libc_init_array>:
 8015d7c:	b570      	push	{r4, r5, r6, lr}
 8015d7e:	4d0d      	ldr	r5, [pc, #52]	; (8015db4 <__libc_init_array+0x38>)
 8015d80:	4c0d      	ldr	r4, [pc, #52]	; (8015db8 <__libc_init_array+0x3c>)
 8015d82:	1b64      	subs	r4, r4, r5
 8015d84:	10a4      	asrs	r4, r4, #2
 8015d86:	2600      	movs	r6, #0
 8015d88:	42a6      	cmp	r6, r4
 8015d8a:	d109      	bne.n	8015da0 <__libc_init_array+0x24>
 8015d8c:	4d0b      	ldr	r5, [pc, #44]	; (8015dbc <__libc_init_array+0x40>)
 8015d8e:	4c0c      	ldr	r4, [pc, #48]	; (8015dc0 <__libc_init_array+0x44>)
 8015d90:	f001 f9aa 	bl	80170e8 <_init>
 8015d94:	1b64      	subs	r4, r4, r5
 8015d96:	10a4      	asrs	r4, r4, #2
 8015d98:	2600      	movs	r6, #0
 8015d9a:	42a6      	cmp	r6, r4
 8015d9c:	d105      	bne.n	8015daa <__libc_init_array+0x2e>
 8015d9e:	bd70      	pop	{r4, r5, r6, pc}
 8015da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8015da4:	4798      	blx	r3
 8015da6:	3601      	adds	r6, #1
 8015da8:	e7ee      	b.n	8015d88 <__libc_init_array+0xc>
 8015daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dae:	4798      	blx	r3
 8015db0:	3601      	adds	r6, #1
 8015db2:	e7f2      	b.n	8015d9a <__libc_init_array+0x1e>
 8015db4:	0801aacc 	.word	0x0801aacc
 8015db8:	0801aacc 	.word	0x0801aacc
 8015dbc:	0801aacc 	.word	0x0801aacc
 8015dc0:	0801aad0 	.word	0x0801aad0

08015dc4 <__retarget_lock_init_recursive>:
 8015dc4:	4770      	bx	lr

08015dc6 <__retarget_lock_acquire_recursive>:
 8015dc6:	4770      	bx	lr

08015dc8 <__retarget_lock_release_recursive>:
 8015dc8:	4770      	bx	lr
	...

08015dcc <malloc>:
 8015dcc:	4b02      	ldr	r3, [pc, #8]	; (8015dd8 <malloc+0xc>)
 8015dce:	4601      	mov	r1, r0
 8015dd0:	6818      	ldr	r0, [r3, #0]
 8015dd2:	f000 b891 	b.w	8015ef8 <_malloc_r>
 8015dd6:	bf00      	nop
 8015dd8:	20000020 	.word	0x20000020

08015ddc <memcmp>:
 8015ddc:	b530      	push	{r4, r5, lr}
 8015dde:	3901      	subs	r1, #1
 8015de0:	2400      	movs	r4, #0
 8015de2:	42a2      	cmp	r2, r4
 8015de4:	d101      	bne.n	8015dea <memcmp+0xe>
 8015de6:	2000      	movs	r0, #0
 8015de8:	e005      	b.n	8015df6 <memcmp+0x1a>
 8015dea:	5d03      	ldrb	r3, [r0, r4]
 8015dec:	3401      	adds	r4, #1
 8015dee:	5d0d      	ldrb	r5, [r1, r4]
 8015df0:	42ab      	cmp	r3, r5
 8015df2:	d0f6      	beq.n	8015de2 <memcmp+0x6>
 8015df4:	1b58      	subs	r0, r3, r5
 8015df6:	bd30      	pop	{r4, r5, pc}

08015df8 <memcpy>:
 8015df8:	440a      	add	r2, r1
 8015dfa:	4291      	cmp	r1, r2
 8015dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e00:	d100      	bne.n	8015e04 <memcpy+0xc>
 8015e02:	4770      	bx	lr
 8015e04:	b510      	push	{r4, lr}
 8015e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e0e:	4291      	cmp	r1, r2
 8015e10:	d1f9      	bne.n	8015e06 <memcpy+0xe>
 8015e12:	bd10      	pop	{r4, pc}

08015e14 <memmove>:
 8015e14:	4288      	cmp	r0, r1
 8015e16:	b510      	push	{r4, lr}
 8015e18:	eb01 0402 	add.w	r4, r1, r2
 8015e1c:	d902      	bls.n	8015e24 <memmove+0x10>
 8015e1e:	4284      	cmp	r4, r0
 8015e20:	4623      	mov	r3, r4
 8015e22:	d807      	bhi.n	8015e34 <memmove+0x20>
 8015e24:	1e43      	subs	r3, r0, #1
 8015e26:	42a1      	cmp	r1, r4
 8015e28:	d008      	beq.n	8015e3c <memmove+0x28>
 8015e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e32:	e7f8      	b.n	8015e26 <memmove+0x12>
 8015e34:	4402      	add	r2, r0
 8015e36:	4601      	mov	r1, r0
 8015e38:	428a      	cmp	r2, r1
 8015e3a:	d100      	bne.n	8015e3e <memmove+0x2a>
 8015e3c:	bd10      	pop	{r4, pc}
 8015e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e46:	e7f7      	b.n	8015e38 <memmove+0x24>

08015e48 <memset>:
 8015e48:	4402      	add	r2, r0
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d100      	bne.n	8015e52 <memset+0xa>
 8015e50:	4770      	bx	lr
 8015e52:	f803 1b01 	strb.w	r1, [r3], #1
 8015e56:	e7f9      	b.n	8015e4c <memset+0x4>

08015e58 <_free_r>:
 8015e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e5a:	2900      	cmp	r1, #0
 8015e5c:	d048      	beq.n	8015ef0 <_free_r+0x98>
 8015e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e62:	9001      	str	r0, [sp, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	f1a1 0404 	sub.w	r4, r1, #4
 8015e6a:	bfb8      	it	lt
 8015e6c:	18e4      	addlt	r4, r4, r3
 8015e6e:	f000 fb13 	bl	8016498 <__malloc_lock>
 8015e72:	4a20      	ldr	r2, [pc, #128]	; (8015ef4 <_free_r+0x9c>)
 8015e74:	9801      	ldr	r0, [sp, #4]
 8015e76:	6813      	ldr	r3, [r2, #0]
 8015e78:	4615      	mov	r5, r2
 8015e7a:	b933      	cbnz	r3, 8015e8a <_free_r+0x32>
 8015e7c:	6063      	str	r3, [r4, #4]
 8015e7e:	6014      	str	r4, [r2, #0]
 8015e80:	b003      	add	sp, #12
 8015e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e86:	f000 bb0d 	b.w	80164a4 <__malloc_unlock>
 8015e8a:	42a3      	cmp	r3, r4
 8015e8c:	d90b      	bls.n	8015ea6 <_free_r+0x4e>
 8015e8e:	6821      	ldr	r1, [r4, #0]
 8015e90:	1862      	adds	r2, r4, r1
 8015e92:	4293      	cmp	r3, r2
 8015e94:	bf04      	itt	eq
 8015e96:	681a      	ldreq	r2, [r3, #0]
 8015e98:	685b      	ldreq	r3, [r3, #4]
 8015e9a:	6063      	str	r3, [r4, #4]
 8015e9c:	bf04      	itt	eq
 8015e9e:	1852      	addeq	r2, r2, r1
 8015ea0:	6022      	streq	r2, [r4, #0]
 8015ea2:	602c      	str	r4, [r5, #0]
 8015ea4:	e7ec      	b.n	8015e80 <_free_r+0x28>
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	b10b      	cbz	r3, 8015eb0 <_free_r+0x58>
 8015eac:	42a3      	cmp	r3, r4
 8015eae:	d9fa      	bls.n	8015ea6 <_free_r+0x4e>
 8015eb0:	6811      	ldr	r1, [r2, #0]
 8015eb2:	1855      	adds	r5, r2, r1
 8015eb4:	42a5      	cmp	r5, r4
 8015eb6:	d10b      	bne.n	8015ed0 <_free_r+0x78>
 8015eb8:	6824      	ldr	r4, [r4, #0]
 8015eba:	4421      	add	r1, r4
 8015ebc:	1854      	adds	r4, r2, r1
 8015ebe:	42a3      	cmp	r3, r4
 8015ec0:	6011      	str	r1, [r2, #0]
 8015ec2:	d1dd      	bne.n	8015e80 <_free_r+0x28>
 8015ec4:	681c      	ldr	r4, [r3, #0]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	6053      	str	r3, [r2, #4]
 8015eca:	4421      	add	r1, r4
 8015ecc:	6011      	str	r1, [r2, #0]
 8015ece:	e7d7      	b.n	8015e80 <_free_r+0x28>
 8015ed0:	d902      	bls.n	8015ed8 <_free_r+0x80>
 8015ed2:	230c      	movs	r3, #12
 8015ed4:	6003      	str	r3, [r0, #0]
 8015ed6:	e7d3      	b.n	8015e80 <_free_r+0x28>
 8015ed8:	6825      	ldr	r5, [r4, #0]
 8015eda:	1961      	adds	r1, r4, r5
 8015edc:	428b      	cmp	r3, r1
 8015ede:	bf04      	itt	eq
 8015ee0:	6819      	ldreq	r1, [r3, #0]
 8015ee2:	685b      	ldreq	r3, [r3, #4]
 8015ee4:	6063      	str	r3, [r4, #4]
 8015ee6:	bf04      	itt	eq
 8015ee8:	1949      	addeq	r1, r1, r5
 8015eea:	6021      	streq	r1, [r4, #0]
 8015eec:	6054      	str	r4, [r2, #4]
 8015eee:	e7c7      	b.n	8015e80 <_free_r+0x28>
 8015ef0:	b003      	add	sp, #12
 8015ef2:	bd30      	pop	{r4, r5, pc}
 8015ef4:	20004c14 	.word	0x20004c14

08015ef8 <_malloc_r>:
 8015ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015efa:	1ccd      	adds	r5, r1, #3
 8015efc:	f025 0503 	bic.w	r5, r5, #3
 8015f00:	3508      	adds	r5, #8
 8015f02:	2d0c      	cmp	r5, #12
 8015f04:	bf38      	it	cc
 8015f06:	250c      	movcc	r5, #12
 8015f08:	2d00      	cmp	r5, #0
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	db01      	blt.n	8015f12 <_malloc_r+0x1a>
 8015f0e:	42a9      	cmp	r1, r5
 8015f10:	d903      	bls.n	8015f1a <_malloc_r+0x22>
 8015f12:	230c      	movs	r3, #12
 8015f14:	6033      	str	r3, [r6, #0]
 8015f16:	2000      	movs	r0, #0
 8015f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f1a:	f000 fabd 	bl	8016498 <__malloc_lock>
 8015f1e:	4921      	ldr	r1, [pc, #132]	; (8015fa4 <_malloc_r+0xac>)
 8015f20:	680a      	ldr	r2, [r1, #0]
 8015f22:	4614      	mov	r4, r2
 8015f24:	b99c      	cbnz	r4, 8015f4e <_malloc_r+0x56>
 8015f26:	4f20      	ldr	r7, [pc, #128]	; (8015fa8 <_malloc_r+0xb0>)
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	b923      	cbnz	r3, 8015f36 <_malloc_r+0x3e>
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f000 f8fe 	bl	8016130 <_sbrk_r>
 8015f34:	6038      	str	r0, [r7, #0]
 8015f36:	4629      	mov	r1, r5
 8015f38:	4630      	mov	r0, r6
 8015f3a:	f000 f8f9 	bl	8016130 <_sbrk_r>
 8015f3e:	1c43      	adds	r3, r0, #1
 8015f40:	d123      	bne.n	8015f8a <_malloc_r+0x92>
 8015f42:	230c      	movs	r3, #12
 8015f44:	6033      	str	r3, [r6, #0]
 8015f46:	4630      	mov	r0, r6
 8015f48:	f000 faac 	bl	80164a4 <__malloc_unlock>
 8015f4c:	e7e3      	b.n	8015f16 <_malloc_r+0x1e>
 8015f4e:	6823      	ldr	r3, [r4, #0]
 8015f50:	1b5b      	subs	r3, r3, r5
 8015f52:	d417      	bmi.n	8015f84 <_malloc_r+0x8c>
 8015f54:	2b0b      	cmp	r3, #11
 8015f56:	d903      	bls.n	8015f60 <_malloc_r+0x68>
 8015f58:	6023      	str	r3, [r4, #0]
 8015f5a:	441c      	add	r4, r3
 8015f5c:	6025      	str	r5, [r4, #0]
 8015f5e:	e004      	b.n	8015f6a <_malloc_r+0x72>
 8015f60:	6863      	ldr	r3, [r4, #4]
 8015f62:	42a2      	cmp	r2, r4
 8015f64:	bf0c      	ite	eq
 8015f66:	600b      	streq	r3, [r1, #0]
 8015f68:	6053      	strne	r3, [r2, #4]
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	f000 fa9a 	bl	80164a4 <__malloc_unlock>
 8015f70:	f104 000b 	add.w	r0, r4, #11
 8015f74:	1d23      	adds	r3, r4, #4
 8015f76:	f020 0007 	bic.w	r0, r0, #7
 8015f7a:	1ac2      	subs	r2, r0, r3
 8015f7c:	d0cc      	beq.n	8015f18 <_malloc_r+0x20>
 8015f7e:	1a1b      	subs	r3, r3, r0
 8015f80:	50a3      	str	r3, [r4, r2]
 8015f82:	e7c9      	b.n	8015f18 <_malloc_r+0x20>
 8015f84:	4622      	mov	r2, r4
 8015f86:	6864      	ldr	r4, [r4, #4]
 8015f88:	e7cc      	b.n	8015f24 <_malloc_r+0x2c>
 8015f8a:	1cc4      	adds	r4, r0, #3
 8015f8c:	f024 0403 	bic.w	r4, r4, #3
 8015f90:	42a0      	cmp	r0, r4
 8015f92:	d0e3      	beq.n	8015f5c <_malloc_r+0x64>
 8015f94:	1a21      	subs	r1, r4, r0
 8015f96:	4630      	mov	r0, r6
 8015f98:	f000 f8ca 	bl	8016130 <_sbrk_r>
 8015f9c:	3001      	adds	r0, #1
 8015f9e:	d1dd      	bne.n	8015f5c <_malloc_r+0x64>
 8015fa0:	e7cf      	b.n	8015f42 <_malloc_r+0x4a>
 8015fa2:	bf00      	nop
 8015fa4:	20004c14 	.word	0x20004c14
 8015fa8:	20004c18 	.word	0x20004c18

08015fac <iprintf>:
 8015fac:	b40f      	push	{r0, r1, r2, r3}
 8015fae:	4b0a      	ldr	r3, [pc, #40]	; (8015fd8 <iprintf+0x2c>)
 8015fb0:	b513      	push	{r0, r1, r4, lr}
 8015fb2:	681c      	ldr	r4, [r3, #0]
 8015fb4:	b124      	cbz	r4, 8015fc0 <iprintf+0x14>
 8015fb6:	69a3      	ldr	r3, [r4, #24]
 8015fb8:	b913      	cbnz	r3, 8015fc0 <iprintf+0x14>
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f7ff fe40 	bl	8015c40 <__sinit>
 8015fc0:	ab05      	add	r3, sp, #20
 8015fc2:	9a04      	ldr	r2, [sp, #16]
 8015fc4:	68a1      	ldr	r1, [r4, #8]
 8015fc6:	9301      	str	r3, [sp, #4]
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f000 fbf7 	bl	80167bc <_vfiprintf_r>
 8015fce:	b002      	add	sp, #8
 8015fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fd4:	b004      	add	sp, #16
 8015fd6:	4770      	bx	lr
 8015fd8:	20000020 	.word	0x20000020

08015fdc <rand>:
 8015fdc:	4b17      	ldr	r3, [pc, #92]	; (801603c <rand+0x60>)
 8015fde:	b510      	push	{r4, lr}
 8015fe0:	681c      	ldr	r4, [r3, #0]
 8015fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015fe4:	b9b3      	cbnz	r3, 8016014 <rand+0x38>
 8015fe6:	2018      	movs	r0, #24
 8015fe8:	f7ff fef0 	bl	8015dcc <malloc>
 8015fec:	63a0      	str	r0, [r4, #56]	; 0x38
 8015fee:	b928      	cbnz	r0, 8015ffc <rand+0x20>
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	4b13      	ldr	r3, [pc, #76]	; (8016040 <rand+0x64>)
 8015ff4:	4813      	ldr	r0, [pc, #76]	; (8016044 <rand+0x68>)
 8015ff6:	214e      	movs	r1, #78	; 0x4e
 8015ff8:	f000 f93a 	bl	8016270 <__assert_func>
 8015ffc:	4a12      	ldr	r2, [pc, #72]	; (8016048 <rand+0x6c>)
 8015ffe:	4b13      	ldr	r3, [pc, #76]	; (801604c <rand+0x70>)
 8016000:	e9c0 2300 	strd	r2, r3, [r0]
 8016004:	4b12      	ldr	r3, [pc, #72]	; (8016050 <rand+0x74>)
 8016006:	6083      	str	r3, [r0, #8]
 8016008:	230b      	movs	r3, #11
 801600a:	8183      	strh	r3, [r0, #12]
 801600c:	2201      	movs	r2, #1
 801600e:	2300      	movs	r3, #0
 8016010:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016014:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016016:	480f      	ldr	r0, [pc, #60]	; (8016054 <rand+0x78>)
 8016018:	690a      	ldr	r2, [r1, #16]
 801601a:	694b      	ldr	r3, [r1, #20]
 801601c:	4c0e      	ldr	r4, [pc, #56]	; (8016058 <rand+0x7c>)
 801601e:	4350      	muls	r0, r2
 8016020:	fb04 0003 	mla	r0, r4, r3, r0
 8016024:	fba2 3404 	umull	r3, r4, r2, r4
 8016028:	1c5a      	adds	r2, r3, #1
 801602a:	4404      	add	r4, r0
 801602c:	f144 0000 	adc.w	r0, r4, #0
 8016030:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016038:	bd10      	pop	{r4, pc}
 801603a:	bf00      	nop
 801603c:	20000020 	.word	0x20000020
 8016040:	0801a9dc 	.word	0x0801a9dc
 8016044:	0801a9f3 	.word	0x0801a9f3
 8016048:	abcd330e 	.word	0xabcd330e
 801604c:	e66d1234 	.word	0xe66d1234
 8016050:	0005deec 	.word	0x0005deec
 8016054:	5851f42d 	.word	0x5851f42d
 8016058:	4c957f2d 	.word	0x4c957f2d

0801605c <cleanup_glue>:
 801605c:	b538      	push	{r3, r4, r5, lr}
 801605e:	460c      	mov	r4, r1
 8016060:	6809      	ldr	r1, [r1, #0]
 8016062:	4605      	mov	r5, r0
 8016064:	b109      	cbz	r1, 801606a <cleanup_glue+0xe>
 8016066:	f7ff fff9 	bl	801605c <cleanup_glue>
 801606a:	4621      	mov	r1, r4
 801606c:	4628      	mov	r0, r5
 801606e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016072:	f7ff bef1 	b.w	8015e58 <_free_r>
	...

08016078 <_reclaim_reent>:
 8016078:	4b2c      	ldr	r3, [pc, #176]	; (801612c <_reclaim_reent+0xb4>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	4283      	cmp	r3, r0
 801607e:	b570      	push	{r4, r5, r6, lr}
 8016080:	4604      	mov	r4, r0
 8016082:	d051      	beq.n	8016128 <_reclaim_reent+0xb0>
 8016084:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016086:	b143      	cbz	r3, 801609a <_reclaim_reent+0x22>
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d14a      	bne.n	8016124 <_reclaim_reent+0xac>
 801608e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016090:	6819      	ldr	r1, [r3, #0]
 8016092:	b111      	cbz	r1, 801609a <_reclaim_reent+0x22>
 8016094:	4620      	mov	r0, r4
 8016096:	f7ff fedf 	bl	8015e58 <_free_r>
 801609a:	6961      	ldr	r1, [r4, #20]
 801609c:	b111      	cbz	r1, 80160a4 <_reclaim_reent+0x2c>
 801609e:	4620      	mov	r0, r4
 80160a0:	f7ff feda 	bl	8015e58 <_free_r>
 80160a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80160a6:	b111      	cbz	r1, 80160ae <_reclaim_reent+0x36>
 80160a8:	4620      	mov	r0, r4
 80160aa:	f7ff fed5 	bl	8015e58 <_free_r>
 80160ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80160b0:	b111      	cbz	r1, 80160b8 <_reclaim_reent+0x40>
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ff fed0 	bl	8015e58 <_free_r>
 80160b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80160ba:	b111      	cbz	r1, 80160c2 <_reclaim_reent+0x4a>
 80160bc:	4620      	mov	r0, r4
 80160be:	f7ff fecb 	bl	8015e58 <_free_r>
 80160c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80160c4:	b111      	cbz	r1, 80160cc <_reclaim_reent+0x54>
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7ff fec6 	bl	8015e58 <_free_r>
 80160cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80160ce:	b111      	cbz	r1, 80160d6 <_reclaim_reent+0x5e>
 80160d0:	4620      	mov	r0, r4
 80160d2:	f7ff fec1 	bl	8015e58 <_free_r>
 80160d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80160d8:	b111      	cbz	r1, 80160e0 <_reclaim_reent+0x68>
 80160da:	4620      	mov	r0, r4
 80160dc:	f7ff febc 	bl	8015e58 <_free_r>
 80160e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160e2:	b111      	cbz	r1, 80160ea <_reclaim_reent+0x72>
 80160e4:	4620      	mov	r0, r4
 80160e6:	f7ff feb7 	bl	8015e58 <_free_r>
 80160ea:	69a3      	ldr	r3, [r4, #24]
 80160ec:	b1e3      	cbz	r3, 8016128 <_reclaim_reent+0xb0>
 80160ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80160f0:	4620      	mov	r0, r4
 80160f2:	4798      	blx	r3
 80160f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80160f6:	b1b9      	cbz	r1, 8016128 <_reclaim_reent+0xb0>
 80160f8:	4620      	mov	r0, r4
 80160fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160fe:	f7ff bfad 	b.w	801605c <cleanup_glue>
 8016102:	5949      	ldr	r1, [r1, r5]
 8016104:	b941      	cbnz	r1, 8016118 <_reclaim_reent+0xa0>
 8016106:	3504      	adds	r5, #4
 8016108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801610a:	2d80      	cmp	r5, #128	; 0x80
 801610c:	68d9      	ldr	r1, [r3, #12]
 801610e:	d1f8      	bne.n	8016102 <_reclaim_reent+0x8a>
 8016110:	4620      	mov	r0, r4
 8016112:	f7ff fea1 	bl	8015e58 <_free_r>
 8016116:	e7ba      	b.n	801608e <_reclaim_reent+0x16>
 8016118:	680e      	ldr	r6, [r1, #0]
 801611a:	4620      	mov	r0, r4
 801611c:	f7ff fe9c 	bl	8015e58 <_free_r>
 8016120:	4631      	mov	r1, r6
 8016122:	e7ef      	b.n	8016104 <_reclaim_reent+0x8c>
 8016124:	2500      	movs	r5, #0
 8016126:	e7ef      	b.n	8016108 <_reclaim_reent+0x90>
 8016128:	bd70      	pop	{r4, r5, r6, pc}
 801612a:	bf00      	nop
 801612c:	20000020 	.word	0x20000020

08016130 <_sbrk_r>:
 8016130:	b538      	push	{r3, r4, r5, lr}
 8016132:	4d06      	ldr	r5, [pc, #24]	; (801614c <_sbrk_r+0x1c>)
 8016134:	2300      	movs	r3, #0
 8016136:	4604      	mov	r4, r0
 8016138:	4608      	mov	r0, r1
 801613a:	602b      	str	r3, [r5, #0]
 801613c:	f7ea fd40 	bl	8000bc0 <_sbrk>
 8016140:	1c43      	adds	r3, r0, #1
 8016142:	d102      	bne.n	801614a <_sbrk_r+0x1a>
 8016144:	682b      	ldr	r3, [r5, #0]
 8016146:	b103      	cbz	r3, 801614a <_sbrk_r+0x1a>
 8016148:	6023      	str	r3, [r4, #0]
 801614a:	bd38      	pop	{r3, r4, r5, pc}
 801614c:	2000b600 	.word	0x2000b600

08016150 <siprintf>:
 8016150:	b40e      	push	{r1, r2, r3}
 8016152:	b500      	push	{lr}
 8016154:	b09c      	sub	sp, #112	; 0x70
 8016156:	ab1d      	add	r3, sp, #116	; 0x74
 8016158:	9002      	str	r0, [sp, #8]
 801615a:	9006      	str	r0, [sp, #24]
 801615c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016160:	4809      	ldr	r0, [pc, #36]	; (8016188 <siprintf+0x38>)
 8016162:	9107      	str	r1, [sp, #28]
 8016164:	9104      	str	r1, [sp, #16]
 8016166:	4909      	ldr	r1, [pc, #36]	; (801618c <siprintf+0x3c>)
 8016168:	f853 2b04 	ldr.w	r2, [r3], #4
 801616c:	9105      	str	r1, [sp, #20]
 801616e:	6800      	ldr	r0, [r0, #0]
 8016170:	9301      	str	r3, [sp, #4]
 8016172:	a902      	add	r1, sp, #8
 8016174:	f000 f9f8 	bl	8016568 <_svfiprintf_r>
 8016178:	9b02      	ldr	r3, [sp, #8]
 801617a:	2200      	movs	r2, #0
 801617c:	701a      	strb	r2, [r3, #0]
 801617e:	b01c      	add	sp, #112	; 0x70
 8016180:	f85d eb04 	ldr.w	lr, [sp], #4
 8016184:	b003      	add	sp, #12
 8016186:	4770      	bx	lr
 8016188:	20000020 	.word	0x20000020
 801618c:	ffff0208 	.word	0xffff0208

08016190 <__sread>:
 8016190:	b510      	push	{r4, lr}
 8016192:	460c      	mov	r4, r1
 8016194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016198:	f000 fdd4 	bl	8016d44 <_read_r>
 801619c:	2800      	cmp	r0, #0
 801619e:	bfab      	itete	ge
 80161a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80161a2:	89a3      	ldrhlt	r3, [r4, #12]
 80161a4:	181b      	addge	r3, r3, r0
 80161a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80161aa:	bfac      	ite	ge
 80161ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80161ae:	81a3      	strhlt	r3, [r4, #12]
 80161b0:	bd10      	pop	{r4, pc}

080161b2 <__swrite>:
 80161b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b6:	461f      	mov	r7, r3
 80161b8:	898b      	ldrh	r3, [r1, #12]
 80161ba:	05db      	lsls	r3, r3, #23
 80161bc:	4605      	mov	r5, r0
 80161be:	460c      	mov	r4, r1
 80161c0:	4616      	mov	r6, r2
 80161c2:	d505      	bpl.n	80161d0 <__swrite+0x1e>
 80161c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161c8:	2302      	movs	r3, #2
 80161ca:	2200      	movs	r2, #0
 80161cc:	f000 f952 	bl	8016474 <_lseek_r>
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80161da:	81a3      	strh	r3, [r4, #12]
 80161dc:	4632      	mov	r2, r6
 80161de:	463b      	mov	r3, r7
 80161e0:	4628      	mov	r0, r5
 80161e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161e6:	f000 b831 	b.w	801624c <_write_r>

080161ea <__sseek>:
 80161ea:	b510      	push	{r4, lr}
 80161ec:	460c      	mov	r4, r1
 80161ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161f2:	f000 f93f 	bl	8016474 <_lseek_r>
 80161f6:	1c43      	adds	r3, r0, #1
 80161f8:	89a3      	ldrh	r3, [r4, #12]
 80161fa:	bf15      	itete	ne
 80161fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80161fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016206:	81a3      	strheq	r3, [r4, #12]
 8016208:	bf18      	it	ne
 801620a:	81a3      	strhne	r3, [r4, #12]
 801620c:	bd10      	pop	{r4, pc}

0801620e <__sclose>:
 801620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016212:	f000 b84b 	b.w	80162ac <_close_r>

08016216 <strcpy>:
 8016216:	4603      	mov	r3, r0
 8016218:	f811 2b01 	ldrb.w	r2, [r1], #1
 801621c:	f803 2b01 	strb.w	r2, [r3], #1
 8016220:	2a00      	cmp	r2, #0
 8016222:	d1f9      	bne.n	8016218 <strcpy+0x2>
 8016224:	4770      	bx	lr

08016226 <strncpy>:
 8016226:	b510      	push	{r4, lr}
 8016228:	3901      	subs	r1, #1
 801622a:	4603      	mov	r3, r0
 801622c:	b132      	cbz	r2, 801623c <strncpy+0x16>
 801622e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016232:	f803 4b01 	strb.w	r4, [r3], #1
 8016236:	3a01      	subs	r2, #1
 8016238:	2c00      	cmp	r4, #0
 801623a:	d1f7      	bne.n	801622c <strncpy+0x6>
 801623c:	441a      	add	r2, r3
 801623e:	2100      	movs	r1, #0
 8016240:	4293      	cmp	r3, r2
 8016242:	d100      	bne.n	8016246 <strncpy+0x20>
 8016244:	bd10      	pop	{r4, pc}
 8016246:	f803 1b01 	strb.w	r1, [r3], #1
 801624a:	e7f9      	b.n	8016240 <strncpy+0x1a>

0801624c <_write_r>:
 801624c:	b538      	push	{r3, r4, r5, lr}
 801624e:	4d07      	ldr	r5, [pc, #28]	; (801626c <_write_r+0x20>)
 8016250:	4604      	mov	r4, r0
 8016252:	4608      	mov	r0, r1
 8016254:	4611      	mov	r1, r2
 8016256:	2200      	movs	r2, #0
 8016258:	602a      	str	r2, [r5, #0]
 801625a:	461a      	mov	r2, r3
 801625c:	f7ea fc5f 	bl	8000b1e <_write>
 8016260:	1c43      	adds	r3, r0, #1
 8016262:	d102      	bne.n	801626a <_write_r+0x1e>
 8016264:	682b      	ldr	r3, [r5, #0]
 8016266:	b103      	cbz	r3, 801626a <_write_r+0x1e>
 8016268:	6023      	str	r3, [r4, #0]
 801626a:	bd38      	pop	{r3, r4, r5, pc}
 801626c:	2000b600 	.word	0x2000b600

08016270 <__assert_func>:
 8016270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016272:	4614      	mov	r4, r2
 8016274:	461a      	mov	r2, r3
 8016276:	4b09      	ldr	r3, [pc, #36]	; (801629c <__assert_func+0x2c>)
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4605      	mov	r5, r0
 801627c:	68d8      	ldr	r0, [r3, #12]
 801627e:	b14c      	cbz	r4, 8016294 <__assert_func+0x24>
 8016280:	4b07      	ldr	r3, [pc, #28]	; (80162a0 <__assert_func+0x30>)
 8016282:	9100      	str	r1, [sp, #0]
 8016284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016288:	4906      	ldr	r1, [pc, #24]	; (80162a4 <__assert_func+0x34>)
 801628a:	462b      	mov	r3, r5
 801628c:	f000 f8e0 	bl	8016450 <fiprintf>
 8016290:	f000 fe2a 	bl	8016ee8 <abort>
 8016294:	4b04      	ldr	r3, [pc, #16]	; (80162a8 <__assert_func+0x38>)
 8016296:	461c      	mov	r4, r3
 8016298:	e7f3      	b.n	8016282 <__assert_func+0x12>
 801629a:	bf00      	nop
 801629c:	20000020 	.word	0x20000020
 80162a0:	0801aa52 	.word	0x0801aa52
 80162a4:	0801aa5f 	.word	0x0801aa5f
 80162a8:	0801aa8d 	.word	0x0801aa8d

080162ac <_close_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4d06      	ldr	r5, [pc, #24]	; (80162c8 <_close_r+0x1c>)
 80162b0:	2300      	movs	r3, #0
 80162b2:	4604      	mov	r4, r0
 80162b4:	4608      	mov	r0, r1
 80162b6:	602b      	str	r3, [r5, #0]
 80162b8:	f7ea fc4d 	bl	8000b56 <_close>
 80162bc:	1c43      	adds	r3, r0, #1
 80162be:	d102      	bne.n	80162c6 <_close_r+0x1a>
 80162c0:	682b      	ldr	r3, [r5, #0]
 80162c2:	b103      	cbz	r3, 80162c6 <_close_r+0x1a>
 80162c4:	6023      	str	r3, [r4, #0]
 80162c6:	bd38      	pop	{r3, r4, r5, pc}
 80162c8:	2000b600 	.word	0x2000b600

080162cc <__sflush_r>:
 80162cc:	898a      	ldrh	r2, [r1, #12]
 80162ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d2:	4605      	mov	r5, r0
 80162d4:	0710      	lsls	r0, r2, #28
 80162d6:	460c      	mov	r4, r1
 80162d8:	d458      	bmi.n	801638c <__sflush_r+0xc0>
 80162da:	684b      	ldr	r3, [r1, #4]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	dc05      	bgt.n	80162ec <__sflush_r+0x20>
 80162e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	dc02      	bgt.n	80162ec <__sflush_r+0x20>
 80162e6:	2000      	movs	r0, #0
 80162e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162ee:	2e00      	cmp	r6, #0
 80162f0:	d0f9      	beq.n	80162e6 <__sflush_r+0x1a>
 80162f2:	2300      	movs	r3, #0
 80162f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162f8:	682f      	ldr	r7, [r5, #0]
 80162fa:	602b      	str	r3, [r5, #0]
 80162fc:	d032      	beq.n	8016364 <__sflush_r+0x98>
 80162fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016300:	89a3      	ldrh	r3, [r4, #12]
 8016302:	075a      	lsls	r2, r3, #29
 8016304:	d505      	bpl.n	8016312 <__sflush_r+0x46>
 8016306:	6863      	ldr	r3, [r4, #4]
 8016308:	1ac0      	subs	r0, r0, r3
 801630a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801630c:	b10b      	cbz	r3, 8016312 <__sflush_r+0x46>
 801630e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016310:	1ac0      	subs	r0, r0, r3
 8016312:	2300      	movs	r3, #0
 8016314:	4602      	mov	r2, r0
 8016316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016318:	6a21      	ldr	r1, [r4, #32]
 801631a:	4628      	mov	r0, r5
 801631c:	47b0      	blx	r6
 801631e:	1c43      	adds	r3, r0, #1
 8016320:	89a3      	ldrh	r3, [r4, #12]
 8016322:	d106      	bne.n	8016332 <__sflush_r+0x66>
 8016324:	6829      	ldr	r1, [r5, #0]
 8016326:	291d      	cmp	r1, #29
 8016328:	d82c      	bhi.n	8016384 <__sflush_r+0xb8>
 801632a:	4a2a      	ldr	r2, [pc, #168]	; (80163d4 <__sflush_r+0x108>)
 801632c:	40ca      	lsrs	r2, r1
 801632e:	07d6      	lsls	r6, r2, #31
 8016330:	d528      	bpl.n	8016384 <__sflush_r+0xb8>
 8016332:	2200      	movs	r2, #0
 8016334:	6062      	str	r2, [r4, #4]
 8016336:	04d9      	lsls	r1, r3, #19
 8016338:	6922      	ldr	r2, [r4, #16]
 801633a:	6022      	str	r2, [r4, #0]
 801633c:	d504      	bpl.n	8016348 <__sflush_r+0x7c>
 801633e:	1c42      	adds	r2, r0, #1
 8016340:	d101      	bne.n	8016346 <__sflush_r+0x7a>
 8016342:	682b      	ldr	r3, [r5, #0]
 8016344:	b903      	cbnz	r3, 8016348 <__sflush_r+0x7c>
 8016346:	6560      	str	r0, [r4, #84]	; 0x54
 8016348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801634a:	602f      	str	r7, [r5, #0]
 801634c:	2900      	cmp	r1, #0
 801634e:	d0ca      	beq.n	80162e6 <__sflush_r+0x1a>
 8016350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016354:	4299      	cmp	r1, r3
 8016356:	d002      	beq.n	801635e <__sflush_r+0x92>
 8016358:	4628      	mov	r0, r5
 801635a:	f7ff fd7d 	bl	8015e58 <_free_r>
 801635e:	2000      	movs	r0, #0
 8016360:	6360      	str	r0, [r4, #52]	; 0x34
 8016362:	e7c1      	b.n	80162e8 <__sflush_r+0x1c>
 8016364:	6a21      	ldr	r1, [r4, #32]
 8016366:	2301      	movs	r3, #1
 8016368:	4628      	mov	r0, r5
 801636a:	47b0      	blx	r6
 801636c:	1c41      	adds	r1, r0, #1
 801636e:	d1c7      	bne.n	8016300 <__sflush_r+0x34>
 8016370:	682b      	ldr	r3, [r5, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d0c4      	beq.n	8016300 <__sflush_r+0x34>
 8016376:	2b1d      	cmp	r3, #29
 8016378:	d001      	beq.n	801637e <__sflush_r+0xb2>
 801637a:	2b16      	cmp	r3, #22
 801637c:	d101      	bne.n	8016382 <__sflush_r+0xb6>
 801637e:	602f      	str	r7, [r5, #0]
 8016380:	e7b1      	b.n	80162e6 <__sflush_r+0x1a>
 8016382:	89a3      	ldrh	r3, [r4, #12]
 8016384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016388:	81a3      	strh	r3, [r4, #12]
 801638a:	e7ad      	b.n	80162e8 <__sflush_r+0x1c>
 801638c:	690f      	ldr	r7, [r1, #16]
 801638e:	2f00      	cmp	r7, #0
 8016390:	d0a9      	beq.n	80162e6 <__sflush_r+0x1a>
 8016392:	0793      	lsls	r3, r2, #30
 8016394:	680e      	ldr	r6, [r1, #0]
 8016396:	bf08      	it	eq
 8016398:	694b      	ldreq	r3, [r1, #20]
 801639a:	600f      	str	r7, [r1, #0]
 801639c:	bf18      	it	ne
 801639e:	2300      	movne	r3, #0
 80163a0:	eba6 0807 	sub.w	r8, r6, r7
 80163a4:	608b      	str	r3, [r1, #8]
 80163a6:	f1b8 0f00 	cmp.w	r8, #0
 80163aa:	dd9c      	ble.n	80162e6 <__sflush_r+0x1a>
 80163ac:	6a21      	ldr	r1, [r4, #32]
 80163ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163b0:	4643      	mov	r3, r8
 80163b2:	463a      	mov	r2, r7
 80163b4:	4628      	mov	r0, r5
 80163b6:	47b0      	blx	r6
 80163b8:	2800      	cmp	r0, #0
 80163ba:	dc06      	bgt.n	80163ca <__sflush_r+0xfe>
 80163bc:	89a3      	ldrh	r3, [r4, #12]
 80163be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163c2:	81a3      	strh	r3, [r4, #12]
 80163c4:	f04f 30ff 	mov.w	r0, #4294967295
 80163c8:	e78e      	b.n	80162e8 <__sflush_r+0x1c>
 80163ca:	4407      	add	r7, r0
 80163cc:	eba8 0800 	sub.w	r8, r8, r0
 80163d0:	e7e9      	b.n	80163a6 <__sflush_r+0xda>
 80163d2:	bf00      	nop
 80163d4:	20400001 	.word	0x20400001

080163d8 <_fflush_r>:
 80163d8:	b538      	push	{r3, r4, r5, lr}
 80163da:	690b      	ldr	r3, [r1, #16]
 80163dc:	4605      	mov	r5, r0
 80163de:	460c      	mov	r4, r1
 80163e0:	b913      	cbnz	r3, 80163e8 <_fflush_r+0x10>
 80163e2:	2500      	movs	r5, #0
 80163e4:	4628      	mov	r0, r5
 80163e6:	bd38      	pop	{r3, r4, r5, pc}
 80163e8:	b118      	cbz	r0, 80163f2 <_fflush_r+0x1a>
 80163ea:	6983      	ldr	r3, [r0, #24]
 80163ec:	b90b      	cbnz	r3, 80163f2 <_fflush_r+0x1a>
 80163ee:	f7ff fc27 	bl	8015c40 <__sinit>
 80163f2:	4b14      	ldr	r3, [pc, #80]	; (8016444 <_fflush_r+0x6c>)
 80163f4:	429c      	cmp	r4, r3
 80163f6:	d11b      	bne.n	8016430 <_fflush_r+0x58>
 80163f8:	686c      	ldr	r4, [r5, #4]
 80163fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d0ef      	beq.n	80163e2 <_fflush_r+0xa>
 8016402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016404:	07d0      	lsls	r0, r2, #31
 8016406:	d404      	bmi.n	8016412 <_fflush_r+0x3a>
 8016408:	0599      	lsls	r1, r3, #22
 801640a:	d402      	bmi.n	8016412 <_fflush_r+0x3a>
 801640c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801640e:	f7ff fcda 	bl	8015dc6 <__retarget_lock_acquire_recursive>
 8016412:	4628      	mov	r0, r5
 8016414:	4621      	mov	r1, r4
 8016416:	f7ff ff59 	bl	80162cc <__sflush_r>
 801641a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801641c:	07da      	lsls	r2, r3, #31
 801641e:	4605      	mov	r5, r0
 8016420:	d4e0      	bmi.n	80163e4 <_fflush_r+0xc>
 8016422:	89a3      	ldrh	r3, [r4, #12]
 8016424:	059b      	lsls	r3, r3, #22
 8016426:	d4dd      	bmi.n	80163e4 <_fflush_r+0xc>
 8016428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801642a:	f7ff fccd 	bl	8015dc8 <__retarget_lock_release_recursive>
 801642e:	e7d9      	b.n	80163e4 <_fflush_r+0xc>
 8016430:	4b05      	ldr	r3, [pc, #20]	; (8016448 <_fflush_r+0x70>)
 8016432:	429c      	cmp	r4, r3
 8016434:	d101      	bne.n	801643a <_fflush_r+0x62>
 8016436:	68ac      	ldr	r4, [r5, #8]
 8016438:	e7df      	b.n	80163fa <_fflush_r+0x22>
 801643a:	4b04      	ldr	r3, [pc, #16]	; (801644c <_fflush_r+0x74>)
 801643c:	429c      	cmp	r4, r3
 801643e:	bf08      	it	eq
 8016440:	68ec      	ldreq	r4, [r5, #12]
 8016442:	e7da      	b.n	80163fa <_fflush_r+0x22>
 8016444:	0801a998 	.word	0x0801a998
 8016448:	0801a9b8 	.word	0x0801a9b8
 801644c:	0801a978 	.word	0x0801a978

08016450 <fiprintf>:
 8016450:	b40e      	push	{r1, r2, r3}
 8016452:	b503      	push	{r0, r1, lr}
 8016454:	4601      	mov	r1, r0
 8016456:	ab03      	add	r3, sp, #12
 8016458:	4805      	ldr	r0, [pc, #20]	; (8016470 <fiprintf+0x20>)
 801645a:	f853 2b04 	ldr.w	r2, [r3], #4
 801645e:	6800      	ldr	r0, [r0, #0]
 8016460:	9301      	str	r3, [sp, #4]
 8016462:	f000 f9ab 	bl	80167bc <_vfiprintf_r>
 8016466:	b002      	add	sp, #8
 8016468:	f85d eb04 	ldr.w	lr, [sp], #4
 801646c:	b003      	add	sp, #12
 801646e:	4770      	bx	lr
 8016470:	20000020 	.word	0x20000020

08016474 <_lseek_r>:
 8016474:	b538      	push	{r3, r4, r5, lr}
 8016476:	4d07      	ldr	r5, [pc, #28]	; (8016494 <_lseek_r+0x20>)
 8016478:	4604      	mov	r4, r0
 801647a:	4608      	mov	r0, r1
 801647c:	4611      	mov	r1, r2
 801647e:	2200      	movs	r2, #0
 8016480:	602a      	str	r2, [r5, #0]
 8016482:	461a      	mov	r2, r3
 8016484:	f7ea fb8e 	bl	8000ba4 <_lseek>
 8016488:	1c43      	adds	r3, r0, #1
 801648a:	d102      	bne.n	8016492 <_lseek_r+0x1e>
 801648c:	682b      	ldr	r3, [r5, #0]
 801648e:	b103      	cbz	r3, 8016492 <_lseek_r+0x1e>
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	bd38      	pop	{r3, r4, r5, pc}
 8016494:	2000b600 	.word	0x2000b600

08016498 <__malloc_lock>:
 8016498:	4801      	ldr	r0, [pc, #4]	; (80164a0 <__malloc_lock+0x8>)
 801649a:	f7ff bc94 	b.w	8015dc6 <__retarget_lock_acquire_recursive>
 801649e:	bf00      	nop
 80164a0:	2000b60c 	.word	0x2000b60c

080164a4 <__malloc_unlock>:
 80164a4:	4801      	ldr	r0, [pc, #4]	; (80164ac <__malloc_unlock+0x8>)
 80164a6:	f7ff bc8f 	b.w	8015dc8 <__retarget_lock_release_recursive>
 80164aa:	bf00      	nop
 80164ac:	2000b60c 	.word	0x2000b60c

080164b0 <__ssputs_r>:
 80164b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b4:	688e      	ldr	r6, [r1, #8]
 80164b6:	429e      	cmp	r6, r3
 80164b8:	4682      	mov	sl, r0
 80164ba:	460c      	mov	r4, r1
 80164bc:	4690      	mov	r8, r2
 80164be:	461f      	mov	r7, r3
 80164c0:	d838      	bhi.n	8016534 <__ssputs_r+0x84>
 80164c2:	898a      	ldrh	r2, [r1, #12]
 80164c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80164c8:	d032      	beq.n	8016530 <__ssputs_r+0x80>
 80164ca:	6825      	ldr	r5, [r4, #0]
 80164cc:	6909      	ldr	r1, [r1, #16]
 80164ce:	eba5 0901 	sub.w	r9, r5, r1
 80164d2:	6965      	ldr	r5, [r4, #20]
 80164d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80164dc:	3301      	adds	r3, #1
 80164de:	444b      	add	r3, r9
 80164e0:	106d      	asrs	r5, r5, #1
 80164e2:	429d      	cmp	r5, r3
 80164e4:	bf38      	it	cc
 80164e6:	461d      	movcc	r5, r3
 80164e8:	0553      	lsls	r3, r2, #21
 80164ea:	d531      	bpl.n	8016550 <__ssputs_r+0xa0>
 80164ec:	4629      	mov	r1, r5
 80164ee:	f7ff fd03 	bl	8015ef8 <_malloc_r>
 80164f2:	4606      	mov	r6, r0
 80164f4:	b950      	cbnz	r0, 801650c <__ssputs_r+0x5c>
 80164f6:	230c      	movs	r3, #12
 80164f8:	f8ca 3000 	str.w	r3, [sl]
 80164fc:	89a3      	ldrh	r3, [r4, #12]
 80164fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016502:	81a3      	strh	r3, [r4, #12]
 8016504:	f04f 30ff 	mov.w	r0, #4294967295
 8016508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801650c:	6921      	ldr	r1, [r4, #16]
 801650e:	464a      	mov	r2, r9
 8016510:	f7ff fc72 	bl	8015df8 <memcpy>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801651e:	81a3      	strh	r3, [r4, #12]
 8016520:	6126      	str	r6, [r4, #16]
 8016522:	6165      	str	r5, [r4, #20]
 8016524:	444e      	add	r6, r9
 8016526:	eba5 0509 	sub.w	r5, r5, r9
 801652a:	6026      	str	r6, [r4, #0]
 801652c:	60a5      	str	r5, [r4, #8]
 801652e:	463e      	mov	r6, r7
 8016530:	42be      	cmp	r6, r7
 8016532:	d900      	bls.n	8016536 <__ssputs_r+0x86>
 8016534:	463e      	mov	r6, r7
 8016536:	4632      	mov	r2, r6
 8016538:	6820      	ldr	r0, [r4, #0]
 801653a:	4641      	mov	r1, r8
 801653c:	f7ff fc6a 	bl	8015e14 <memmove>
 8016540:	68a3      	ldr	r3, [r4, #8]
 8016542:	6822      	ldr	r2, [r4, #0]
 8016544:	1b9b      	subs	r3, r3, r6
 8016546:	4432      	add	r2, r6
 8016548:	60a3      	str	r3, [r4, #8]
 801654a:	6022      	str	r2, [r4, #0]
 801654c:	2000      	movs	r0, #0
 801654e:	e7db      	b.n	8016508 <__ssputs_r+0x58>
 8016550:	462a      	mov	r2, r5
 8016552:	f000 fd35 	bl	8016fc0 <_realloc_r>
 8016556:	4606      	mov	r6, r0
 8016558:	2800      	cmp	r0, #0
 801655a:	d1e1      	bne.n	8016520 <__ssputs_r+0x70>
 801655c:	6921      	ldr	r1, [r4, #16]
 801655e:	4650      	mov	r0, sl
 8016560:	f7ff fc7a 	bl	8015e58 <_free_r>
 8016564:	e7c7      	b.n	80164f6 <__ssputs_r+0x46>
	...

08016568 <_svfiprintf_r>:
 8016568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801656c:	4698      	mov	r8, r3
 801656e:	898b      	ldrh	r3, [r1, #12]
 8016570:	061b      	lsls	r3, r3, #24
 8016572:	b09d      	sub	sp, #116	; 0x74
 8016574:	4607      	mov	r7, r0
 8016576:	460d      	mov	r5, r1
 8016578:	4614      	mov	r4, r2
 801657a:	d50e      	bpl.n	801659a <_svfiprintf_r+0x32>
 801657c:	690b      	ldr	r3, [r1, #16]
 801657e:	b963      	cbnz	r3, 801659a <_svfiprintf_r+0x32>
 8016580:	2140      	movs	r1, #64	; 0x40
 8016582:	f7ff fcb9 	bl	8015ef8 <_malloc_r>
 8016586:	6028      	str	r0, [r5, #0]
 8016588:	6128      	str	r0, [r5, #16]
 801658a:	b920      	cbnz	r0, 8016596 <_svfiprintf_r+0x2e>
 801658c:	230c      	movs	r3, #12
 801658e:	603b      	str	r3, [r7, #0]
 8016590:	f04f 30ff 	mov.w	r0, #4294967295
 8016594:	e0d1      	b.n	801673a <_svfiprintf_r+0x1d2>
 8016596:	2340      	movs	r3, #64	; 0x40
 8016598:	616b      	str	r3, [r5, #20]
 801659a:	2300      	movs	r3, #0
 801659c:	9309      	str	r3, [sp, #36]	; 0x24
 801659e:	2320      	movs	r3, #32
 80165a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80165a8:	2330      	movs	r3, #48	; 0x30
 80165aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016754 <_svfiprintf_r+0x1ec>
 80165ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165b2:	f04f 0901 	mov.w	r9, #1
 80165b6:	4623      	mov	r3, r4
 80165b8:	469a      	mov	sl, r3
 80165ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165be:	b10a      	cbz	r2, 80165c4 <_svfiprintf_r+0x5c>
 80165c0:	2a25      	cmp	r2, #37	; 0x25
 80165c2:	d1f9      	bne.n	80165b8 <_svfiprintf_r+0x50>
 80165c4:	ebba 0b04 	subs.w	fp, sl, r4
 80165c8:	d00b      	beq.n	80165e2 <_svfiprintf_r+0x7a>
 80165ca:	465b      	mov	r3, fp
 80165cc:	4622      	mov	r2, r4
 80165ce:	4629      	mov	r1, r5
 80165d0:	4638      	mov	r0, r7
 80165d2:	f7ff ff6d 	bl	80164b0 <__ssputs_r>
 80165d6:	3001      	adds	r0, #1
 80165d8:	f000 80aa 	beq.w	8016730 <_svfiprintf_r+0x1c8>
 80165dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165de:	445a      	add	r2, fp
 80165e0:	9209      	str	r2, [sp, #36]	; 0x24
 80165e2:	f89a 3000 	ldrb.w	r3, [sl]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	f000 80a2 	beq.w	8016730 <_svfiprintf_r+0x1c8>
 80165ec:	2300      	movs	r3, #0
 80165ee:	f04f 32ff 	mov.w	r2, #4294967295
 80165f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165f6:	f10a 0a01 	add.w	sl, sl, #1
 80165fa:	9304      	str	r3, [sp, #16]
 80165fc:	9307      	str	r3, [sp, #28]
 80165fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016602:	931a      	str	r3, [sp, #104]	; 0x68
 8016604:	4654      	mov	r4, sl
 8016606:	2205      	movs	r2, #5
 8016608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801660c:	4851      	ldr	r0, [pc, #324]	; (8016754 <_svfiprintf_r+0x1ec>)
 801660e:	f7e9 fdf7 	bl	8000200 <memchr>
 8016612:	9a04      	ldr	r2, [sp, #16]
 8016614:	b9d8      	cbnz	r0, 801664e <_svfiprintf_r+0xe6>
 8016616:	06d0      	lsls	r0, r2, #27
 8016618:	bf44      	itt	mi
 801661a:	2320      	movmi	r3, #32
 801661c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016620:	0711      	lsls	r1, r2, #28
 8016622:	bf44      	itt	mi
 8016624:	232b      	movmi	r3, #43	; 0x2b
 8016626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801662a:	f89a 3000 	ldrb.w	r3, [sl]
 801662e:	2b2a      	cmp	r3, #42	; 0x2a
 8016630:	d015      	beq.n	801665e <_svfiprintf_r+0xf6>
 8016632:	9a07      	ldr	r2, [sp, #28]
 8016634:	4654      	mov	r4, sl
 8016636:	2000      	movs	r0, #0
 8016638:	f04f 0c0a 	mov.w	ip, #10
 801663c:	4621      	mov	r1, r4
 801663e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016642:	3b30      	subs	r3, #48	; 0x30
 8016644:	2b09      	cmp	r3, #9
 8016646:	d94e      	bls.n	80166e6 <_svfiprintf_r+0x17e>
 8016648:	b1b0      	cbz	r0, 8016678 <_svfiprintf_r+0x110>
 801664a:	9207      	str	r2, [sp, #28]
 801664c:	e014      	b.n	8016678 <_svfiprintf_r+0x110>
 801664e:	eba0 0308 	sub.w	r3, r0, r8
 8016652:	fa09 f303 	lsl.w	r3, r9, r3
 8016656:	4313      	orrs	r3, r2
 8016658:	9304      	str	r3, [sp, #16]
 801665a:	46a2      	mov	sl, r4
 801665c:	e7d2      	b.n	8016604 <_svfiprintf_r+0x9c>
 801665e:	9b03      	ldr	r3, [sp, #12]
 8016660:	1d19      	adds	r1, r3, #4
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	9103      	str	r1, [sp, #12]
 8016666:	2b00      	cmp	r3, #0
 8016668:	bfbb      	ittet	lt
 801666a:	425b      	neglt	r3, r3
 801666c:	f042 0202 	orrlt.w	r2, r2, #2
 8016670:	9307      	strge	r3, [sp, #28]
 8016672:	9307      	strlt	r3, [sp, #28]
 8016674:	bfb8      	it	lt
 8016676:	9204      	strlt	r2, [sp, #16]
 8016678:	7823      	ldrb	r3, [r4, #0]
 801667a:	2b2e      	cmp	r3, #46	; 0x2e
 801667c:	d10c      	bne.n	8016698 <_svfiprintf_r+0x130>
 801667e:	7863      	ldrb	r3, [r4, #1]
 8016680:	2b2a      	cmp	r3, #42	; 0x2a
 8016682:	d135      	bne.n	80166f0 <_svfiprintf_r+0x188>
 8016684:	9b03      	ldr	r3, [sp, #12]
 8016686:	1d1a      	adds	r2, r3, #4
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	9203      	str	r2, [sp, #12]
 801668c:	2b00      	cmp	r3, #0
 801668e:	bfb8      	it	lt
 8016690:	f04f 33ff 	movlt.w	r3, #4294967295
 8016694:	3402      	adds	r4, #2
 8016696:	9305      	str	r3, [sp, #20]
 8016698:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016764 <_svfiprintf_r+0x1fc>
 801669c:	7821      	ldrb	r1, [r4, #0]
 801669e:	2203      	movs	r2, #3
 80166a0:	4650      	mov	r0, sl
 80166a2:	f7e9 fdad 	bl	8000200 <memchr>
 80166a6:	b140      	cbz	r0, 80166ba <_svfiprintf_r+0x152>
 80166a8:	2340      	movs	r3, #64	; 0x40
 80166aa:	eba0 000a 	sub.w	r0, r0, sl
 80166ae:	fa03 f000 	lsl.w	r0, r3, r0
 80166b2:	9b04      	ldr	r3, [sp, #16]
 80166b4:	4303      	orrs	r3, r0
 80166b6:	3401      	adds	r4, #1
 80166b8:	9304      	str	r3, [sp, #16]
 80166ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166be:	4826      	ldr	r0, [pc, #152]	; (8016758 <_svfiprintf_r+0x1f0>)
 80166c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166c4:	2206      	movs	r2, #6
 80166c6:	f7e9 fd9b 	bl	8000200 <memchr>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	d038      	beq.n	8016740 <_svfiprintf_r+0x1d8>
 80166ce:	4b23      	ldr	r3, [pc, #140]	; (801675c <_svfiprintf_r+0x1f4>)
 80166d0:	bb1b      	cbnz	r3, 801671a <_svfiprintf_r+0x1b2>
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	3307      	adds	r3, #7
 80166d6:	f023 0307 	bic.w	r3, r3, #7
 80166da:	3308      	adds	r3, #8
 80166dc:	9303      	str	r3, [sp, #12]
 80166de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e0:	4433      	add	r3, r6
 80166e2:	9309      	str	r3, [sp, #36]	; 0x24
 80166e4:	e767      	b.n	80165b6 <_svfiprintf_r+0x4e>
 80166e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80166ea:	460c      	mov	r4, r1
 80166ec:	2001      	movs	r0, #1
 80166ee:	e7a5      	b.n	801663c <_svfiprintf_r+0xd4>
 80166f0:	2300      	movs	r3, #0
 80166f2:	3401      	adds	r4, #1
 80166f4:	9305      	str	r3, [sp, #20]
 80166f6:	4619      	mov	r1, r3
 80166f8:	f04f 0c0a 	mov.w	ip, #10
 80166fc:	4620      	mov	r0, r4
 80166fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016702:	3a30      	subs	r2, #48	; 0x30
 8016704:	2a09      	cmp	r2, #9
 8016706:	d903      	bls.n	8016710 <_svfiprintf_r+0x1a8>
 8016708:	2b00      	cmp	r3, #0
 801670a:	d0c5      	beq.n	8016698 <_svfiprintf_r+0x130>
 801670c:	9105      	str	r1, [sp, #20]
 801670e:	e7c3      	b.n	8016698 <_svfiprintf_r+0x130>
 8016710:	fb0c 2101 	mla	r1, ip, r1, r2
 8016714:	4604      	mov	r4, r0
 8016716:	2301      	movs	r3, #1
 8016718:	e7f0      	b.n	80166fc <_svfiprintf_r+0x194>
 801671a:	ab03      	add	r3, sp, #12
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	462a      	mov	r2, r5
 8016720:	4b0f      	ldr	r3, [pc, #60]	; (8016760 <_svfiprintf_r+0x1f8>)
 8016722:	a904      	add	r1, sp, #16
 8016724:	4638      	mov	r0, r7
 8016726:	f3af 8000 	nop.w
 801672a:	1c42      	adds	r2, r0, #1
 801672c:	4606      	mov	r6, r0
 801672e:	d1d6      	bne.n	80166de <_svfiprintf_r+0x176>
 8016730:	89ab      	ldrh	r3, [r5, #12]
 8016732:	065b      	lsls	r3, r3, #25
 8016734:	f53f af2c 	bmi.w	8016590 <_svfiprintf_r+0x28>
 8016738:	9809      	ldr	r0, [sp, #36]	; 0x24
 801673a:	b01d      	add	sp, #116	; 0x74
 801673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016740:	ab03      	add	r3, sp, #12
 8016742:	9300      	str	r3, [sp, #0]
 8016744:	462a      	mov	r2, r5
 8016746:	4b06      	ldr	r3, [pc, #24]	; (8016760 <_svfiprintf_r+0x1f8>)
 8016748:	a904      	add	r1, sp, #16
 801674a:	4638      	mov	r0, r7
 801674c:	f000 f9d4 	bl	8016af8 <_printf_i>
 8016750:	e7eb      	b.n	801672a <_svfiprintf_r+0x1c2>
 8016752:	bf00      	nop
 8016754:	0801aa8e 	.word	0x0801aa8e
 8016758:	0801aa98 	.word	0x0801aa98
 801675c:	00000000 	.word	0x00000000
 8016760:	080164b1 	.word	0x080164b1
 8016764:	0801aa94 	.word	0x0801aa94

08016768 <__sfputc_r>:
 8016768:	6893      	ldr	r3, [r2, #8]
 801676a:	3b01      	subs	r3, #1
 801676c:	2b00      	cmp	r3, #0
 801676e:	b410      	push	{r4}
 8016770:	6093      	str	r3, [r2, #8]
 8016772:	da08      	bge.n	8016786 <__sfputc_r+0x1e>
 8016774:	6994      	ldr	r4, [r2, #24]
 8016776:	42a3      	cmp	r3, r4
 8016778:	db01      	blt.n	801677e <__sfputc_r+0x16>
 801677a:	290a      	cmp	r1, #10
 801677c:	d103      	bne.n	8016786 <__sfputc_r+0x1e>
 801677e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016782:	f000 baf1 	b.w	8016d68 <__swbuf_r>
 8016786:	6813      	ldr	r3, [r2, #0]
 8016788:	1c58      	adds	r0, r3, #1
 801678a:	6010      	str	r0, [r2, #0]
 801678c:	7019      	strb	r1, [r3, #0]
 801678e:	4608      	mov	r0, r1
 8016790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016794:	4770      	bx	lr

08016796 <__sfputs_r>:
 8016796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016798:	4606      	mov	r6, r0
 801679a:	460f      	mov	r7, r1
 801679c:	4614      	mov	r4, r2
 801679e:	18d5      	adds	r5, r2, r3
 80167a0:	42ac      	cmp	r4, r5
 80167a2:	d101      	bne.n	80167a8 <__sfputs_r+0x12>
 80167a4:	2000      	movs	r0, #0
 80167a6:	e007      	b.n	80167b8 <__sfputs_r+0x22>
 80167a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167ac:	463a      	mov	r2, r7
 80167ae:	4630      	mov	r0, r6
 80167b0:	f7ff ffda 	bl	8016768 <__sfputc_r>
 80167b4:	1c43      	adds	r3, r0, #1
 80167b6:	d1f3      	bne.n	80167a0 <__sfputs_r+0xa>
 80167b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167bc <_vfiprintf_r>:
 80167bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	460d      	mov	r5, r1
 80167c2:	b09d      	sub	sp, #116	; 0x74
 80167c4:	4614      	mov	r4, r2
 80167c6:	4698      	mov	r8, r3
 80167c8:	4606      	mov	r6, r0
 80167ca:	b118      	cbz	r0, 80167d4 <_vfiprintf_r+0x18>
 80167cc:	6983      	ldr	r3, [r0, #24]
 80167ce:	b90b      	cbnz	r3, 80167d4 <_vfiprintf_r+0x18>
 80167d0:	f7ff fa36 	bl	8015c40 <__sinit>
 80167d4:	4b89      	ldr	r3, [pc, #548]	; (80169fc <_vfiprintf_r+0x240>)
 80167d6:	429d      	cmp	r5, r3
 80167d8:	d11b      	bne.n	8016812 <_vfiprintf_r+0x56>
 80167da:	6875      	ldr	r5, [r6, #4]
 80167dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167de:	07d9      	lsls	r1, r3, #31
 80167e0:	d405      	bmi.n	80167ee <_vfiprintf_r+0x32>
 80167e2:	89ab      	ldrh	r3, [r5, #12]
 80167e4:	059a      	lsls	r2, r3, #22
 80167e6:	d402      	bmi.n	80167ee <_vfiprintf_r+0x32>
 80167e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167ea:	f7ff faec 	bl	8015dc6 <__retarget_lock_acquire_recursive>
 80167ee:	89ab      	ldrh	r3, [r5, #12]
 80167f0:	071b      	lsls	r3, r3, #28
 80167f2:	d501      	bpl.n	80167f8 <_vfiprintf_r+0x3c>
 80167f4:	692b      	ldr	r3, [r5, #16]
 80167f6:	b9eb      	cbnz	r3, 8016834 <_vfiprintf_r+0x78>
 80167f8:	4629      	mov	r1, r5
 80167fa:	4630      	mov	r0, r6
 80167fc:	f000 fb06 	bl	8016e0c <__swsetup_r>
 8016800:	b1c0      	cbz	r0, 8016834 <_vfiprintf_r+0x78>
 8016802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016804:	07dc      	lsls	r4, r3, #31
 8016806:	d50e      	bpl.n	8016826 <_vfiprintf_r+0x6a>
 8016808:	f04f 30ff 	mov.w	r0, #4294967295
 801680c:	b01d      	add	sp, #116	; 0x74
 801680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016812:	4b7b      	ldr	r3, [pc, #492]	; (8016a00 <_vfiprintf_r+0x244>)
 8016814:	429d      	cmp	r5, r3
 8016816:	d101      	bne.n	801681c <_vfiprintf_r+0x60>
 8016818:	68b5      	ldr	r5, [r6, #8]
 801681a:	e7df      	b.n	80167dc <_vfiprintf_r+0x20>
 801681c:	4b79      	ldr	r3, [pc, #484]	; (8016a04 <_vfiprintf_r+0x248>)
 801681e:	429d      	cmp	r5, r3
 8016820:	bf08      	it	eq
 8016822:	68f5      	ldreq	r5, [r6, #12]
 8016824:	e7da      	b.n	80167dc <_vfiprintf_r+0x20>
 8016826:	89ab      	ldrh	r3, [r5, #12]
 8016828:	0598      	lsls	r0, r3, #22
 801682a:	d4ed      	bmi.n	8016808 <_vfiprintf_r+0x4c>
 801682c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801682e:	f7ff facb 	bl	8015dc8 <__retarget_lock_release_recursive>
 8016832:	e7e9      	b.n	8016808 <_vfiprintf_r+0x4c>
 8016834:	2300      	movs	r3, #0
 8016836:	9309      	str	r3, [sp, #36]	; 0x24
 8016838:	2320      	movs	r3, #32
 801683a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801683e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016842:	2330      	movs	r3, #48	; 0x30
 8016844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016a08 <_vfiprintf_r+0x24c>
 8016848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801684c:	f04f 0901 	mov.w	r9, #1
 8016850:	4623      	mov	r3, r4
 8016852:	469a      	mov	sl, r3
 8016854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016858:	b10a      	cbz	r2, 801685e <_vfiprintf_r+0xa2>
 801685a:	2a25      	cmp	r2, #37	; 0x25
 801685c:	d1f9      	bne.n	8016852 <_vfiprintf_r+0x96>
 801685e:	ebba 0b04 	subs.w	fp, sl, r4
 8016862:	d00b      	beq.n	801687c <_vfiprintf_r+0xc0>
 8016864:	465b      	mov	r3, fp
 8016866:	4622      	mov	r2, r4
 8016868:	4629      	mov	r1, r5
 801686a:	4630      	mov	r0, r6
 801686c:	f7ff ff93 	bl	8016796 <__sfputs_r>
 8016870:	3001      	adds	r0, #1
 8016872:	f000 80aa 	beq.w	80169ca <_vfiprintf_r+0x20e>
 8016876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016878:	445a      	add	r2, fp
 801687a:	9209      	str	r2, [sp, #36]	; 0x24
 801687c:	f89a 3000 	ldrb.w	r3, [sl]
 8016880:	2b00      	cmp	r3, #0
 8016882:	f000 80a2 	beq.w	80169ca <_vfiprintf_r+0x20e>
 8016886:	2300      	movs	r3, #0
 8016888:	f04f 32ff 	mov.w	r2, #4294967295
 801688c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016890:	f10a 0a01 	add.w	sl, sl, #1
 8016894:	9304      	str	r3, [sp, #16]
 8016896:	9307      	str	r3, [sp, #28]
 8016898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801689c:	931a      	str	r3, [sp, #104]	; 0x68
 801689e:	4654      	mov	r4, sl
 80168a0:	2205      	movs	r2, #5
 80168a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168a6:	4858      	ldr	r0, [pc, #352]	; (8016a08 <_vfiprintf_r+0x24c>)
 80168a8:	f7e9 fcaa 	bl	8000200 <memchr>
 80168ac:	9a04      	ldr	r2, [sp, #16]
 80168ae:	b9d8      	cbnz	r0, 80168e8 <_vfiprintf_r+0x12c>
 80168b0:	06d1      	lsls	r1, r2, #27
 80168b2:	bf44      	itt	mi
 80168b4:	2320      	movmi	r3, #32
 80168b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168ba:	0713      	lsls	r3, r2, #28
 80168bc:	bf44      	itt	mi
 80168be:	232b      	movmi	r3, #43	; 0x2b
 80168c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168c4:	f89a 3000 	ldrb.w	r3, [sl]
 80168c8:	2b2a      	cmp	r3, #42	; 0x2a
 80168ca:	d015      	beq.n	80168f8 <_vfiprintf_r+0x13c>
 80168cc:	9a07      	ldr	r2, [sp, #28]
 80168ce:	4654      	mov	r4, sl
 80168d0:	2000      	movs	r0, #0
 80168d2:	f04f 0c0a 	mov.w	ip, #10
 80168d6:	4621      	mov	r1, r4
 80168d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168dc:	3b30      	subs	r3, #48	; 0x30
 80168de:	2b09      	cmp	r3, #9
 80168e0:	d94e      	bls.n	8016980 <_vfiprintf_r+0x1c4>
 80168e2:	b1b0      	cbz	r0, 8016912 <_vfiprintf_r+0x156>
 80168e4:	9207      	str	r2, [sp, #28]
 80168e6:	e014      	b.n	8016912 <_vfiprintf_r+0x156>
 80168e8:	eba0 0308 	sub.w	r3, r0, r8
 80168ec:	fa09 f303 	lsl.w	r3, r9, r3
 80168f0:	4313      	orrs	r3, r2
 80168f2:	9304      	str	r3, [sp, #16]
 80168f4:	46a2      	mov	sl, r4
 80168f6:	e7d2      	b.n	801689e <_vfiprintf_r+0xe2>
 80168f8:	9b03      	ldr	r3, [sp, #12]
 80168fa:	1d19      	adds	r1, r3, #4
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	9103      	str	r1, [sp, #12]
 8016900:	2b00      	cmp	r3, #0
 8016902:	bfbb      	ittet	lt
 8016904:	425b      	neglt	r3, r3
 8016906:	f042 0202 	orrlt.w	r2, r2, #2
 801690a:	9307      	strge	r3, [sp, #28]
 801690c:	9307      	strlt	r3, [sp, #28]
 801690e:	bfb8      	it	lt
 8016910:	9204      	strlt	r2, [sp, #16]
 8016912:	7823      	ldrb	r3, [r4, #0]
 8016914:	2b2e      	cmp	r3, #46	; 0x2e
 8016916:	d10c      	bne.n	8016932 <_vfiprintf_r+0x176>
 8016918:	7863      	ldrb	r3, [r4, #1]
 801691a:	2b2a      	cmp	r3, #42	; 0x2a
 801691c:	d135      	bne.n	801698a <_vfiprintf_r+0x1ce>
 801691e:	9b03      	ldr	r3, [sp, #12]
 8016920:	1d1a      	adds	r2, r3, #4
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	9203      	str	r2, [sp, #12]
 8016926:	2b00      	cmp	r3, #0
 8016928:	bfb8      	it	lt
 801692a:	f04f 33ff 	movlt.w	r3, #4294967295
 801692e:	3402      	adds	r4, #2
 8016930:	9305      	str	r3, [sp, #20]
 8016932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016a18 <_vfiprintf_r+0x25c>
 8016936:	7821      	ldrb	r1, [r4, #0]
 8016938:	2203      	movs	r2, #3
 801693a:	4650      	mov	r0, sl
 801693c:	f7e9 fc60 	bl	8000200 <memchr>
 8016940:	b140      	cbz	r0, 8016954 <_vfiprintf_r+0x198>
 8016942:	2340      	movs	r3, #64	; 0x40
 8016944:	eba0 000a 	sub.w	r0, r0, sl
 8016948:	fa03 f000 	lsl.w	r0, r3, r0
 801694c:	9b04      	ldr	r3, [sp, #16]
 801694e:	4303      	orrs	r3, r0
 8016950:	3401      	adds	r4, #1
 8016952:	9304      	str	r3, [sp, #16]
 8016954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016958:	482c      	ldr	r0, [pc, #176]	; (8016a0c <_vfiprintf_r+0x250>)
 801695a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801695e:	2206      	movs	r2, #6
 8016960:	f7e9 fc4e 	bl	8000200 <memchr>
 8016964:	2800      	cmp	r0, #0
 8016966:	d03f      	beq.n	80169e8 <_vfiprintf_r+0x22c>
 8016968:	4b29      	ldr	r3, [pc, #164]	; (8016a10 <_vfiprintf_r+0x254>)
 801696a:	bb1b      	cbnz	r3, 80169b4 <_vfiprintf_r+0x1f8>
 801696c:	9b03      	ldr	r3, [sp, #12]
 801696e:	3307      	adds	r3, #7
 8016970:	f023 0307 	bic.w	r3, r3, #7
 8016974:	3308      	adds	r3, #8
 8016976:	9303      	str	r3, [sp, #12]
 8016978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801697a:	443b      	add	r3, r7
 801697c:	9309      	str	r3, [sp, #36]	; 0x24
 801697e:	e767      	b.n	8016850 <_vfiprintf_r+0x94>
 8016980:	fb0c 3202 	mla	r2, ip, r2, r3
 8016984:	460c      	mov	r4, r1
 8016986:	2001      	movs	r0, #1
 8016988:	e7a5      	b.n	80168d6 <_vfiprintf_r+0x11a>
 801698a:	2300      	movs	r3, #0
 801698c:	3401      	adds	r4, #1
 801698e:	9305      	str	r3, [sp, #20]
 8016990:	4619      	mov	r1, r3
 8016992:	f04f 0c0a 	mov.w	ip, #10
 8016996:	4620      	mov	r0, r4
 8016998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801699c:	3a30      	subs	r2, #48	; 0x30
 801699e:	2a09      	cmp	r2, #9
 80169a0:	d903      	bls.n	80169aa <_vfiprintf_r+0x1ee>
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d0c5      	beq.n	8016932 <_vfiprintf_r+0x176>
 80169a6:	9105      	str	r1, [sp, #20]
 80169a8:	e7c3      	b.n	8016932 <_vfiprintf_r+0x176>
 80169aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80169ae:	4604      	mov	r4, r0
 80169b0:	2301      	movs	r3, #1
 80169b2:	e7f0      	b.n	8016996 <_vfiprintf_r+0x1da>
 80169b4:	ab03      	add	r3, sp, #12
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	462a      	mov	r2, r5
 80169ba:	4b16      	ldr	r3, [pc, #88]	; (8016a14 <_vfiprintf_r+0x258>)
 80169bc:	a904      	add	r1, sp, #16
 80169be:	4630      	mov	r0, r6
 80169c0:	f3af 8000 	nop.w
 80169c4:	4607      	mov	r7, r0
 80169c6:	1c78      	adds	r0, r7, #1
 80169c8:	d1d6      	bne.n	8016978 <_vfiprintf_r+0x1bc>
 80169ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169cc:	07d9      	lsls	r1, r3, #31
 80169ce:	d405      	bmi.n	80169dc <_vfiprintf_r+0x220>
 80169d0:	89ab      	ldrh	r3, [r5, #12]
 80169d2:	059a      	lsls	r2, r3, #22
 80169d4:	d402      	bmi.n	80169dc <_vfiprintf_r+0x220>
 80169d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169d8:	f7ff f9f6 	bl	8015dc8 <__retarget_lock_release_recursive>
 80169dc:	89ab      	ldrh	r3, [r5, #12]
 80169de:	065b      	lsls	r3, r3, #25
 80169e0:	f53f af12 	bmi.w	8016808 <_vfiprintf_r+0x4c>
 80169e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169e6:	e711      	b.n	801680c <_vfiprintf_r+0x50>
 80169e8:	ab03      	add	r3, sp, #12
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	462a      	mov	r2, r5
 80169ee:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <_vfiprintf_r+0x258>)
 80169f0:	a904      	add	r1, sp, #16
 80169f2:	4630      	mov	r0, r6
 80169f4:	f000 f880 	bl	8016af8 <_printf_i>
 80169f8:	e7e4      	b.n	80169c4 <_vfiprintf_r+0x208>
 80169fa:	bf00      	nop
 80169fc:	0801a998 	.word	0x0801a998
 8016a00:	0801a9b8 	.word	0x0801a9b8
 8016a04:	0801a978 	.word	0x0801a978
 8016a08:	0801aa8e 	.word	0x0801aa8e
 8016a0c:	0801aa98 	.word	0x0801aa98
 8016a10:	00000000 	.word	0x00000000
 8016a14:	08016797 	.word	0x08016797
 8016a18:	0801aa94 	.word	0x0801aa94

08016a1c <_printf_common>:
 8016a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a20:	4616      	mov	r6, r2
 8016a22:	4699      	mov	r9, r3
 8016a24:	688a      	ldr	r2, [r1, #8]
 8016a26:	690b      	ldr	r3, [r1, #16]
 8016a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	bfb8      	it	lt
 8016a30:	4613      	movlt	r3, r2
 8016a32:	6033      	str	r3, [r6, #0]
 8016a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016a38:	4607      	mov	r7, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	b10a      	cbz	r2, 8016a42 <_printf_common+0x26>
 8016a3e:	3301      	adds	r3, #1
 8016a40:	6033      	str	r3, [r6, #0]
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	0699      	lsls	r1, r3, #26
 8016a46:	bf42      	ittt	mi
 8016a48:	6833      	ldrmi	r3, [r6, #0]
 8016a4a:	3302      	addmi	r3, #2
 8016a4c:	6033      	strmi	r3, [r6, #0]
 8016a4e:	6825      	ldr	r5, [r4, #0]
 8016a50:	f015 0506 	ands.w	r5, r5, #6
 8016a54:	d106      	bne.n	8016a64 <_printf_common+0x48>
 8016a56:	f104 0a19 	add.w	sl, r4, #25
 8016a5a:	68e3      	ldr	r3, [r4, #12]
 8016a5c:	6832      	ldr	r2, [r6, #0]
 8016a5e:	1a9b      	subs	r3, r3, r2
 8016a60:	42ab      	cmp	r3, r5
 8016a62:	dc26      	bgt.n	8016ab2 <_printf_common+0x96>
 8016a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a68:	1e13      	subs	r3, r2, #0
 8016a6a:	6822      	ldr	r2, [r4, #0]
 8016a6c:	bf18      	it	ne
 8016a6e:	2301      	movne	r3, #1
 8016a70:	0692      	lsls	r2, r2, #26
 8016a72:	d42b      	bmi.n	8016acc <_printf_common+0xb0>
 8016a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a78:	4649      	mov	r1, r9
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	47c0      	blx	r8
 8016a7e:	3001      	adds	r0, #1
 8016a80:	d01e      	beq.n	8016ac0 <_printf_common+0xa4>
 8016a82:	6823      	ldr	r3, [r4, #0]
 8016a84:	68e5      	ldr	r5, [r4, #12]
 8016a86:	6832      	ldr	r2, [r6, #0]
 8016a88:	f003 0306 	and.w	r3, r3, #6
 8016a8c:	2b04      	cmp	r3, #4
 8016a8e:	bf08      	it	eq
 8016a90:	1aad      	subeq	r5, r5, r2
 8016a92:	68a3      	ldr	r3, [r4, #8]
 8016a94:	6922      	ldr	r2, [r4, #16]
 8016a96:	bf0c      	ite	eq
 8016a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a9c:	2500      	movne	r5, #0
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	bfc4      	itt	gt
 8016aa2:	1a9b      	subgt	r3, r3, r2
 8016aa4:	18ed      	addgt	r5, r5, r3
 8016aa6:	2600      	movs	r6, #0
 8016aa8:	341a      	adds	r4, #26
 8016aaa:	42b5      	cmp	r5, r6
 8016aac:	d11a      	bne.n	8016ae4 <_printf_common+0xc8>
 8016aae:	2000      	movs	r0, #0
 8016ab0:	e008      	b.n	8016ac4 <_printf_common+0xa8>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	4652      	mov	r2, sl
 8016ab6:	4649      	mov	r1, r9
 8016ab8:	4638      	mov	r0, r7
 8016aba:	47c0      	blx	r8
 8016abc:	3001      	adds	r0, #1
 8016abe:	d103      	bne.n	8016ac8 <_printf_common+0xac>
 8016ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ac8:	3501      	adds	r5, #1
 8016aca:	e7c6      	b.n	8016a5a <_printf_common+0x3e>
 8016acc:	18e1      	adds	r1, r4, r3
 8016ace:	1c5a      	adds	r2, r3, #1
 8016ad0:	2030      	movs	r0, #48	; 0x30
 8016ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ad6:	4422      	add	r2, r4
 8016ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ae0:	3302      	adds	r3, #2
 8016ae2:	e7c7      	b.n	8016a74 <_printf_common+0x58>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	4649      	mov	r1, r9
 8016aea:	4638      	mov	r0, r7
 8016aec:	47c0      	blx	r8
 8016aee:	3001      	adds	r0, #1
 8016af0:	d0e6      	beq.n	8016ac0 <_printf_common+0xa4>
 8016af2:	3601      	adds	r6, #1
 8016af4:	e7d9      	b.n	8016aaa <_printf_common+0x8e>
	...

08016af8 <_printf_i>:
 8016af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016afc:	460c      	mov	r4, r1
 8016afe:	4691      	mov	r9, r2
 8016b00:	7e27      	ldrb	r7, [r4, #24]
 8016b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b04:	2f78      	cmp	r7, #120	; 0x78
 8016b06:	4680      	mov	r8, r0
 8016b08:	469a      	mov	sl, r3
 8016b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b0e:	d807      	bhi.n	8016b20 <_printf_i+0x28>
 8016b10:	2f62      	cmp	r7, #98	; 0x62
 8016b12:	d80a      	bhi.n	8016b2a <_printf_i+0x32>
 8016b14:	2f00      	cmp	r7, #0
 8016b16:	f000 80d8 	beq.w	8016cca <_printf_i+0x1d2>
 8016b1a:	2f58      	cmp	r7, #88	; 0x58
 8016b1c:	f000 80a3 	beq.w	8016c66 <_printf_i+0x16e>
 8016b20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016b28:	e03a      	b.n	8016ba0 <_printf_i+0xa8>
 8016b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016b2e:	2b15      	cmp	r3, #21
 8016b30:	d8f6      	bhi.n	8016b20 <_printf_i+0x28>
 8016b32:	a001      	add	r0, pc, #4	; (adr r0, 8016b38 <_printf_i+0x40>)
 8016b34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016b38:	08016b91 	.word	0x08016b91
 8016b3c:	08016ba5 	.word	0x08016ba5
 8016b40:	08016b21 	.word	0x08016b21
 8016b44:	08016b21 	.word	0x08016b21
 8016b48:	08016b21 	.word	0x08016b21
 8016b4c:	08016b21 	.word	0x08016b21
 8016b50:	08016ba5 	.word	0x08016ba5
 8016b54:	08016b21 	.word	0x08016b21
 8016b58:	08016b21 	.word	0x08016b21
 8016b5c:	08016b21 	.word	0x08016b21
 8016b60:	08016b21 	.word	0x08016b21
 8016b64:	08016cb1 	.word	0x08016cb1
 8016b68:	08016bd5 	.word	0x08016bd5
 8016b6c:	08016c93 	.word	0x08016c93
 8016b70:	08016b21 	.word	0x08016b21
 8016b74:	08016b21 	.word	0x08016b21
 8016b78:	08016cd3 	.word	0x08016cd3
 8016b7c:	08016b21 	.word	0x08016b21
 8016b80:	08016bd5 	.word	0x08016bd5
 8016b84:	08016b21 	.word	0x08016b21
 8016b88:	08016b21 	.word	0x08016b21
 8016b8c:	08016c9b 	.word	0x08016c9b
 8016b90:	680b      	ldr	r3, [r1, #0]
 8016b92:	1d1a      	adds	r2, r3, #4
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	600a      	str	r2, [r1, #0]
 8016b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	e0a3      	b.n	8016cec <_printf_i+0x1f4>
 8016ba4:	6825      	ldr	r5, [r4, #0]
 8016ba6:	6808      	ldr	r0, [r1, #0]
 8016ba8:	062e      	lsls	r6, r5, #24
 8016baa:	f100 0304 	add.w	r3, r0, #4
 8016bae:	d50a      	bpl.n	8016bc6 <_printf_i+0xce>
 8016bb0:	6805      	ldr	r5, [r0, #0]
 8016bb2:	600b      	str	r3, [r1, #0]
 8016bb4:	2d00      	cmp	r5, #0
 8016bb6:	da03      	bge.n	8016bc0 <_printf_i+0xc8>
 8016bb8:	232d      	movs	r3, #45	; 0x2d
 8016bba:	426d      	negs	r5, r5
 8016bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bc0:	485e      	ldr	r0, [pc, #376]	; (8016d3c <_printf_i+0x244>)
 8016bc2:	230a      	movs	r3, #10
 8016bc4:	e019      	b.n	8016bfa <_printf_i+0x102>
 8016bc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016bca:	6805      	ldr	r5, [r0, #0]
 8016bcc:	600b      	str	r3, [r1, #0]
 8016bce:	bf18      	it	ne
 8016bd0:	b22d      	sxthne	r5, r5
 8016bd2:	e7ef      	b.n	8016bb4 <_printf_i+0xbc>
 8016bd4:	680b      	ldr	r3, [r1, #0]
 8016bd6:	6825      	ldr	r5, [r4, #0]
 8016bd8:	1d18      	adds	r0, r3, #4
 8016bda:	6008      	str	r0, [r1, #0]
 8016bdc:	0628      	lsls	r0, r5, #24
 8016bde:	d501      	bpl.n	8016be4 <_printf_i+0xec>
 8016be0:	681d      	ldr	r5, [r3, #0]
 8016be2:	e002      	b.n	8016bea <_printf_i+0xf2>
 8016be4:	0669      	lsls	r1, r5, #25
 8016be6:	d5fb      	bpl.n	8016be0 <_printf_i+0xe8>
 8016be8:	881d      	ldrh	r5, [r3, #0]
 8016bea:	4854      	ldr	r0, [pc, #336]	; (8016d3c <_printf_i+0x244>)
 8016bec:	2f6f      	cmp	r7, #111	; 0x6f
 8016bee:	bf0c      	ite	eq
 8016bf0:	2308      	moveq	r3, #8
 8016bf2:	230a      	movne	r3, #10
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016bfa:	6866      	ldr	r6, [r4, #4]
 8016bfc:	60a6      	str	r6, [r4, #8]
 8016bfe:	2e00      	cmp	r6, #0
 8016c00:	bfa2      	ittt	ge
 8016c02:	6821      	ldrge	r1, [r4, #0]
 8016c04:	f021 0104 	bicge.w	r1, r1, #4
 8016c08:	6021      	strge	r1, [r4, #0]
 8016c0a:	b90d      	cbnz	r5, 8016c10 <_printf_i+0x118>
 8016c0c:	2e00      	cmp	r6, #0
 8016c0e:	d04d      	beq.n	8016cac <_printf_i+0x1b4>
 8016c10:	4616      	mov	r6, r2
 8016c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8016c16:	fb03 5711 	mls	r7, r3, r1, r5
 8016c1a:	5dc7      	ldrb	r7, [r0, r7]
 8016c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016c20:	462f      	mov	r7, r5
 8016c22:	42bb      	cmp	r3, r7
 8016c24:	460d      	mov	r5, r1
 8016c26:	d9f4      	bls.n	8016c12 <_printf_i+0x11a>
 8016c28:	2b08      	cmp	r3, #8
 8016c2a:	d10b      	bne.n	8016c44 <_printf_i+0x14c>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	07df      	lsls	r7, r3, #31
 8016c30:	d508      	bpl.n	8016c44 <_printf_i+0x14c>
 8016c32:	6923      	ldr	r3, [r4, #16]
 8016c34:	6861      	ldr	r1, [r4, #4]
 8016c36:	4299      	cmp	r1, r3
 8016c38:	bfde      	ittt	le
 8016c3a:	2330      	movle	r3, #48	; 0x30
 8016c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016c40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016c44:	1b92      	subs	r2, r2, r6
 8016c46:	6122      	str	r2, [r4, #16]
 8016c48:	f8cd a000 	str.w	sl, [sp]
 8016c4c:	464b      	mov	r3, r9
 8016c4e:	aa03      	add	r2, sp, #12
 8016c50:	4621      	mov	r1, r4
 8016c52:	4640      	mov	r0, r8
 8016c54:	f7ff fee2 	bl	8016a1c <_printf_common>
 8016c58:	3001      	adds	r0, #1
 8016c5a:	d14c      	bne.n	8016cf6 <_printf_i+0x1fe>
 8016c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c60:	b004      	add	sp, #16
 8016c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c66:	4835      	ldr	r0, [pc, #212]	; (8016d3c <_printf_i+0x244>)
 8016c68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016c6c:	6823      	ldr	r3, [r4, #0]
 8016c6e:	680e      	ldr	r6, [r1, #0]
 8016c70:	061f      	lsls	r7, r3, #24
 8016c72:	f856 5b04 	ldr.w	r5, [r6], #4
 8016c76:	600e      	str	r6, [r1, #0]
 8016c78:	d514      	bpl.n	8016ca4 <_printf_i+0x1ac>
 8016c7a:	07d9      	lsls	r1, r3, #31
 8016c7c:	bf44      	itt	mi
 8016c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8016c82:	6023      	strmi	r3, [r4, #0]
 8016c84:	b91d      	cbnz	r5, 8016c8e <_printf_i+0x196>
 8016c86:	6823      	ldr	r3, [r4, #0]
 8016c88:	f023 0320 	bic.w	r3, r3, #32
 8016c8c:	6023      	str	r3, [r4, #0]
 8016c8e:	2310      	movs	r3, #16
 8016c90:	e7b0      	b.n	8016bf4 <_printf_i+0xfc>
 8016c92:	6823      	ldr	r3, [r4, #0]
 8016c94:	f043 0320 	orr.w	r3, r3, #32
 8016c98:	6023      	str	r3, [r4, #0]
 8016c9a:	2378      	movs	r3, #120	; 0x78
 8016c9c:	4828      	ldr	r0, [pc, #160]	; (8016d40 <_printf_i+0x248>)
 8016c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ca2:	e7e3      	b.n	8016c6c <_printf_i+0x174>
 8016ca4:	065e      	lsls	r6, r3, #25
 8016ca6:	bf48      	it	mi
 8016ca8:	b2ad      	uxthmi	r5, r5
 8016caa:	e7e6      	b.n	8016c7a <_printf_i+0x182>
 8016cac:	4616      	mov	r6, r2
 8016cae:	e7bb      	b.n	8016c28 <_printf_i+0x130>
 8016cb0:	680b      	ldr	r3, [r1, #0]
 8016cb2:	6826      	ldr	r6, [r4, #0]
 8016cb4:	6960      	ldr	r0, [r4, #20]
 8016cb6:	1d1d      	adds	r5, r3, #4
 8016cb8:	600d      	str	r5, [r1, #0]
 8016cba:	0635      	lsls	r5, r6, #24
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	d501      	bpl.n	8016cc4 <_printf_i+0x1cc>
 8016cc0:	6018      	str	r0, [r3, #0]
 8016cc2:	e002      	b.n	8016cca <_printf_i+0x1d2>
 8016cc4:	0671      	lsls	r1, r6, #25
 8016cc6:	d5fb      	bpl.n	8016cc0 <_printf_i+0x1c8>
 8016cc8:	8018      	strh	r0, [r3, #0]
 8016cca:	2300      	movs	r3, #0
 8016ccc:	6123      	str	r3, [r4, #16]
 8016cce:	4616      	mov	r6, r2
 8016cd0:	e7ba      	b.n	8016c48 <_printf_i+0x150>
 8016cd2:	680b      	ldr	r3, [r1, #0]
 8016cd4:	1d1a      	adds	r2, r3, #4
 8016cd6:	600a      	str	r2, [r1, #0]
 8016cd8:	681e      	ldr	r6, [r3, #0]
 8016cda:	6862      	ldr	r2, [r4, #4]
 8016cdc:	2100      	movs	r1, #0
 8016cde:	4630      	mov	r0, r6
 8016ce0:	f7e9 fa8e 	bl	8000200 <memchr>
 8016ce4:	b108      	cbz	r0, 8016cea <_printf_i+0x1f2>
 8016ce6:	1b80      	subs	r0, r0, r6
 8016ce8:	6060      	str	r0, [r4, #4]
 8016cea:	6863      	ldr	r3, [r4, #4]
 8016cec:	6123      	str	r3, [r4, #16]
 8016cee:	2300      	movs	r3, #0
 8016cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cf4:	e7a8      	b.n	8016c48 <_printf_i+0x150>
 8016cf6:	6923      	ldr	r3, [r4, #16]
 8016cf8:	4632      	mov	r2, r6
 8016cfa:	4649      	mov	r1, r9
 8016cfc:	4640      	mov	r0, r8
 8016cfe:	47d0      	blx	sl
 8016d00:	3001      	adds	r0, #1
 8016d02:	d0ab      	beq.n	8016c5c <_printf_i+0x164>
 8016d04:	6823      	ldr	r3, [r4, #0]
 8016d06:	079b      	lsls	r3, r3, #30
 8016d08:	d413      	bmi.n	8016d32 <_printf_i+0x23a>
 8016d0a:	68e0      	ldr	r0, [r4, #12]
 8016d0c:	9b03      	ldr	r3, [sp, #12]
 8016d0e:	4298      	cmp	r0, r3
 8016d10:	bfb8      	it	lt
 8016d12:	4618      	movlt	r0, r3
 8016d14:	e7a4      	b.n	8016c60 <_printf_i+0x168>
 8016d16:	2301      	movs	r3, #1
 8016d18:	4632      	mov	r2, r6
 8016d1a:	4649      	mov	r1, r9
 8016d1c:	4640      	mov	r0, r8
 8016d1e:	47d0      	blx	sl
 8016d20:	3001      	adds	r0, #1
 8016d22:	d09b      	beq.n	8016c5c <_printf_i+0x164>
 8016d24:	3501      	adds	r5, #1
 8016d26:	68e3      	ldr	r3, [r4, #12]
 8016d28:	9903      	ldr	r1, [sp, #12]
 8016d2a:	1a5b      	subs	r3, r3, r1
 8016d2c:	42ab      	cmp	r3, r5
 8016d2e:	dcf2      	bgt.n	8016d16 <_printf_i+0x21e>
 8016d30:	e7eb      	b.n	8016d0a <_printf_i+0x212>
 8016d32:	2500      	movs	r5, #0
 8016d34:	f104 0619 	add.w	r6, r4, #25
 8016d38:	e7f5      	b.n	8016d26 <_printf_i+0x22e>
 8016d3a:	bf00      	nop
 8016d3c:	0801aa9f 	.word	0x0801aa9f
 8016d40:	0801aab0 	.word	0x0801aab0

08016d44 <_read_r>:
 8016d44:	b538      	push	{r3, r4, r5, lr}
 8016d46:	4d07      	ldr	r5, [pc, #28]	; (8016d64 <_read_r+0x20>)
 8016d48:	4604      	mov	r4, r0
 8016d4a:	4608      	mov	r0, r1
 8016d4c:	4611      	mov	r1, r2
 8016d4e:	2200      	movs	r2, #0
 8016d50:	602a      	str	r2, [r5, #0]
 8016d52:	461a      	mov	r2, r3
 8016d54:	f7e9 fec6 	bl	8000ae4 <_read>
 8016d58:	1c43      	adds	r3, r0, #1
 8016d5a:	d102      	bne.n	8016d62 <_read_r+0x1e>
 8016d5c:	682b      	ldr	r3, [r5, #0]
 8016d5e:	b103      	cbz	r3, 8016d62 <_read_r+0x1e>
 8016d60:	6023      	str	r3, [r4, #0]
 8016d62:	bd38      	pop	{r3, r4, r5, pc}
 8016d64:	2000b600 	.word	0x2000b600

08016d68 <__swbuf_r>:
 8016d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d6a:	460e      	mov	r6, r1
 8016d6c:	4614      	mov	r4, r2
 8016d6e:	4605      	mov	r5, r0
 8016d70:	b118      	cbz	r0, 8016d7a <__swbuf_r+0x12>
 8016d72:	6983      	ldr	r3, [r0, #24]
 8016d74:	b90b      	cbnz	r3, 8016d7a <__swbuf_r+0x12>
 8016d76:	f7fe ff63 	bl	8015c40 <__sinit>
 8016d7a:	4b21      	ldr	r3, [pc, #132]	; (8016e00 <__swbuf_r+0x98>)
 8016d7c:	429c      	cmp	r4, r3
 8016d7e:	d12b      	bne.n	8016dd8 <__swbuf_r+0x70>
 8016d80:	686c      	ldr	r4, [r5, #4]
 8016d82:	69a3      	ldr	r3, [r4, #24]
 8016d84:	60a3      	str	r3, [r4, #8]
 8016d86:	89a3      	ldrh	r3, [r4, #12]
 8016d88:	071a      	lsls	r2, r3, #28
 8016d8a:	d52f      	bpl.n	8016dec <__swbuf_r+0x84>
 8016d8c:	6923      	ldr	r3, [r4, #16]
 8016d8e:	b36b      	cbz	r3, 8016dec <__swbuf_r+0x84>
 8016d90:	6923      	ldr	r3, [r4, #16]
 8016d92:	6820      	ldr	r0, [r4, #0]
 8016d94:	1ac0      	subs	r0, r0, r3
 8016d96:	6963      	ldr	r3, [r4, #20]
 8016d98:	b2f6      	uxtb	r6, r6
 8016d9a:	4283      	cmp	r3, r0
 8016d9c:	4637      	mov	r7, r6
 8016d9e:	dc04      	bgt.n	8016daa <__swbuf_r+0x42>
 8016da0:	4621      	mov	r1, r4
 8016da2:	4628      	mov	r0, r5
 8016da4:	f7ff fb18 	bl	80163d8 <_fflush_r>
 8016da8:	bb30      	cbnz	r0, 8016df8 <__swbuf_r+0x90>
 8016daa:	68a3      	ldr	r3, [r4, #8]
 8016dac:	3b01      	subs	r3, #1
 8016dae:	60a3      	str	r3, [r4, #8]
 8016db0:	6823      	ldr	r3, [r4, #0]
 8016db2:	1c5a      	adds	r2, r3, #1
 8016db4:	6022      	str	r2, [r4, #0]
 8016db6:	701e      	strb	r6, [r3, #0]
 8016db8:	6963      	ldr	r3, [r4, #20]
 8016dba:	3001      	adds	r0, #1
 8016dbc:	4283      	cmp	r3, r0
 8016dbe:	d004      	beq.n	8016dca <__swbuf_r+0x62>
 8016dc0:	89a3      	ldrh	r3, [r4, #12]
 8016dc2:	07db      	lsls	r3, r3, #31
 8016dc4:	d506      	bpl.n	8016dd4 <__swbuf_r+0x6c>
 8016dc6:	2e0a      	cmp	r6, #10
 8016dc8:	d104      	bne.n	8016dd4 <__swbuf_r+0x6c>
 8016dca:	4621      	mov	r1, r4
 8016dcc:	4628      	mov	r0, r5
 8016dce:	f7ff fb03 	bl	80163d8 <_fflush_r>
 8016dd2:	b988      	cbnz	r0, 8016df8 <__swbuf_r+0x90>
 8016dd4:	4638      	mov	r0, r7
 8016dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd8:	4b0a      	ldr	r3, [pc, #40]	; (8016e04 <__swbuf_r+0x9c>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d101      	bne.n	8016de2 <__swbuf_r+0x7a>
 8016dde:	68ac      	ldr	r4, [r5, #8]
 8016de0:	e7cf      	b.n	8016d82 <__swbuf_r+0x1a>
 8016de2:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <__swbuf_r+0xa0>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	bf08      	it	eq
 8016de8:	68ec      	ldreq	r4, [r5, #12]
 8016dea:	e7ca      	b.n	8016d82 <__swbuf_r+0x1a>
 8016dec:	4621      	mov	r1, r4
 8016dee:	4628      	mov	r0, r5
 8016df0:	f000 f80c 	bl	8016e0c <__swsetup_r>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d0cb      	beq.n	8016d90 <__swbuf_r+0x28>
 8016df8:	f04f 37ff 	mov.w	r7, #4294967295
 8016dfc:	e7ea      	b.n	8016dd4 <__swbuf_r+0x6c>
 8016dfe:	bf00      	nop
 8016e00:	0801a998 	.word	0x0801a998
 8016e04:	0801a9b8 	.word	0x0801a9b8
 8016e08:	0801a978 	.word	0x0801a978

08016e0c <__swsetup_r>:
 8016e0c:	4b32      	ldr	r3, [pc, #200]	; (8016ed8 <__swsetup_r+0xcc>)
 8016e0e:	b570      	push	{r4, r5, r6, lr}
 8016e10:	681d      	ldr	r5, [r3, #0]
 8016e12:	4606      	mov	r6, r0
 8016e14:	460c      	mov	r4, r1
 8016e16:	b125      	cbz	r5, 8016e22 <__swsetup_r+0x16>
 8016e18:	69ab      	ldr	r3, [r5, #24]
 8016e1a:	b913      	cbnz	r3, 8016e22 <__swsetup_r+0x16>
 8016e1c:	4628      	mov	r0, r5
 8016e1e:	f7fe ff0f 	bl	8015c40 <__sinit>
 8016e22:	4b2e      	ldr	r3, [pc, #184]	; (8016edc <__swsetup_r+0xd0>)
 8016e24:	429c      	cmp	r4, r3
 8016e26:	d10f      	bne.n	8016e48 <__swsetup_r+0x3c>
 8016e28:	686c      	ldr	r4, [r5, #4]
 8016e2a:	89a3      	ldrh	r3, [r4, #12]
 8016e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e30:	0719      	lsls	r1, r3, #28
 8016e32:	d42c      	bmi.n	8016e8e <__swsetup_r+0x82>
 8016e34:	06dd      	lsls	r5, r3, #27
 8016e36:	d411      	bmi.n	8016e5c <__swsetup_r+0x50>
 8016e38:	2309      	movs	r3, #9
 8016e3a:	6033      	str	r3, [r6, #0]
 8016e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e40:	81a3      	strh	r3, [r4, #12]
 8016e42:	f04f 30ff 	mov.w	r0, #4294967295
 8016e46:	e03e      	b.n	8016ec6 <__swsetup_r+0xba>
 8016e48:	4b25      	ldr	r3, [pc, #148]	; (8016ee0 <__swsetup_r+0xd4>)
 8016e4a:	429c      	cmp	r4, r3
 8016e4c:	d101      	bne.n	8016e52 <__swsetup_r+0x46>
 8016e4e:	68ac      	ldr	r4, [r5, #8]
 8016e50:	e7eb      	b.n	8016e2a <__swsetup_r+0x1e>
 8016e52:	4b24      	ldr	r3, [pc, #144]	; (8016ee4 <__swsetup_r+0xd8>)
 8016e54:	429c      	cmp	r4, r3
 8016e56:	bf08      	it	eq
 8016e58:	68ec      	ldreq	r4, [r5, #12]
 8016e5a:	e7e6      	b.n	8016e2a <__swsetup_r+0x1e>
 8016e5c:	0758      	lsls	r0, r3, #29
 8016e5e:	d512      	bpl.n	8016e86 <__swsetup_r+0x7a>
 8016e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e62:	b141      	cbz	r1, 8016e76 <__swsetup_r+0x6a>
 8016e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e68:	4299      	cmp	r1, r3
 8016e6a:	d002      	beq.n	8016e72 <__swsetup_r+0x66>
 8016e6c:	4630      	mov	r0, r6
 8016e6e:	f7fe fff3 	bl	8015e58 <_free_r>
 8016e72:	2300      	movs	r3, #0
 8016e74:	6363      	str	r3, [r4, #52]	; 0x34
 8016e76:	89a3      	ldrh	r3, [r4, #12]
 8016e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e7c:	81a3      	strh	r3, [r4, #12]
 8016e7e:	2300      	movs	r3, #0
 8016e80:	6063      	str	r3, [r4, #4]
 8016e82:	6923      	ldr	r3, [r4, #16]
 8016e84:	6023      	str	r3, [r4, #0]
 8016e86:	89a3      	ldrh	r3, [r4, #12]
 8016e88:	f043 0308 	orr.w	r3, r3, #8
 8016e8c:	81a3      	strh	r3, [r4, #12]
 8016e8e:	6923      	ldr	r3, [r4, #16]
 8016e90:	b94b      	cbnz	r3, 8016ea6 <__swsetup_r+0x9a>
 8016e92:	89a3      	ldrh	r3, [r4, #12]
 8016e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e9c:	d003      	beq.n	8016ea6 <__swsetup_r+0x9a>
 8016e9e:	4621      	mov	r1, r4
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	f000 f84d 	bl	8016f40 <__smakebuf_r>
 8016ea6:	89a0      	ldrh	r0, [r4, #12]
 8016ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016eac:	f010 0301 	ands.w	r3, r0, #1
 8016eb0:	d00a      	beq.n	8016ec8 <__swsetup_r+0xbc>
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	60a3      	str	r3, [r4, #8]
 8016eb6:	6963      	ldr	r3, [r4, #20]
 8016eb8:	425b      	negs	r3, r3
 8016eba:	61a3      	str	r3, [r4, #24]
 8016ebc:	6923      	ldr	r3, [r4, #16]
 8016ebe:	b943      	cbnz	r3, 8016ed2 <__swsetup_r+0xc6>
 8016ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ec4:	d1ba      	bne.n	8016e3c <__swsetup_r+0x30>
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	0781      	lsls	r1, r0, #30
 8016eca:	bf58      	it	pl
 8016ecc:	6963      	ldrpl	r3, [r4, #20]
 8016ece:	60a3      	str	r3, [r4, #8]
 8016ed0:	e7f4      	b.n	8016ebc <__swsetup_r+0xb0>
 8016ed2:	2000      	movs	r0, #0
 8016ed4:	e7f7      	b.n	8016ec6 <__swsetup_r+0xba>
 8016ed6:	bf00      	nop
 8016ed8:	20000020 	.word	0x20000020
 8016edc:	0801a998 	.word	0x0801a998
 8016ee0:	0801a9b8 	.word	0x0801a9b8
 8016ee4:	0801a978 	.word	0x0801a978

08016ee8 <abort>:
 8016ee8:	b508      	push	{r3, lr}
 8016eea:	2006      	movs	r0, #6
 8016eec:	f000 f8b6 	bl	801705c <raise>
 8016ef0:	2001      	movs	r0, #1
 8016ef2:	f7e9 fded 	bl	8000ad0 <_exit>

08016ef6 <__swhatbuf_r>:
 8016ef6:	b570      	push	{r4, r5, r6, lr}
 8016ef8:	460e      	mov	r6, r1
 8016efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016efe:	2900      	cmp	r1, #0
 8016f00:	b096      	sub	sp, #88	; 0x58
 8016f02:	4614      	mov	r4, r2
 8016f04:	461d      	mov	r5, r3
 8016f06:	da07      	bge.n	8016f18 <__swhatbuf_r+0x22>
 8016f08:	2300      	movs	r3, #0
 8016f0a:	602b      	str	r3, [r5, #0]
 8016f0c:	89b3      	ldrh	r3, [r6, #12]
 8016f0e:	061a      	lsls	r2, r3, #24
 8016f10:	d410      	bmi.n	8016f34 <__swhatbuf_r+0x3e>
 8016f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f16:	e00e      	b.n	8016f36 <__swhatbuf_r+0x40>
 8016f18:	466a      	mov	r2, sp
 8016f1a:	f000 f8bb 	bl	8017094 <_fstat_r>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	dbf2      	blt.n	8016f08 <__swhatbuf_r+0x12>
 8016f22:	9a01      	ldr	r2, [sp, #4]
 8016f24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016f28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016f2c:	425a      	negs	r2, r3
 8016f2e:	415a      	adcs	r2, r3
 8016f30:	602a      	str	r2, [r5, #0]
 8016f32:	e7ee      	b.n	8016f12 <__swhatbuf_r+0x1c>
 8016f34:	2340      	movs	r3, #64	; 0x40
 8016f36:	2000      	movs	r0, #0
 8016f38:	6023      	str	r3, [r4, #0]
 8016f3a:	b016      	add	sp, #88	; 0x58
 8016f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016f40 <__smakebuf_r>:
 8016f40:	898b      	ldrh	r3, [r1, #12]
 8016f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f44:	079d      	lsls	r5, r3, #30
 8016f46:	4606      	mov	r6, r0
 8016f48:	460c      	mov	r4, r1
 8016f4a:	d507      	bpl.n	8016f5c <__smakebuf_r+0x1c>
 8016f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f50:	6023      	str	r3, [r4, #0]
 8016f52:	6123      	str	r3, [r4, #16]
 8016f54:	2301      	movs	r3, #1
 8016f56:	6163      	str	r3, [r4, #20]
 8016f58:	b002      	add	sp, #8
 8016f5a:	bd70      	pop	{r4, r5, r6, pc}
 8016f5c:	ab01      	add	r3, sp, #4
 8016f5e:	466a      	mov	r2, sp
 8016f60:	f7ff ffc9 	bl	8016ef6 <__swhatbuf_r>
 8016f64:	9900      	ldr	r1, [sp, #0]
 8016f66:	4605      	mov	r5, r0
 8016f68:	4630      	mov	r0, r6
 8016f6a:	f7fe ffc5 	bl	8015ef8 <_malloc_r>
 8016f6e:	b948      	cbnz	r0, 8016f84 <__smakebuf_r+0x44>
 8016f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f74:	059a      	lsls	r2, r3, #22
 8016f76:	d4ef      	bmi.n	8016f58 <__smakebuf_r+0x18>
 8016f78:	f023 0303 	bic.w	r3, r3, #3
 8016f7c:	f043 0302 	orr.w	r3, r3, #2
 8016f80:	81a3      	strh	r3, [r4, #12]
 8016f82:	e7e3      	b.n	8016f4c <__smakebuf_r+0xc>
 8016f84:	4b0d      	ldr	r3, [pc, #52]	; (8016fbc <__smakebuf_r+0x7c>)
 8016f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f88:	89a3      	ldrh	r3, [r4, #12]
 8016f8a:	6020      	str	r0, [r4, #0]
 8016f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f90:	81a3      	strh	r3, [r4, #12]
 8016f92:	9b00      	ldr	r3, [sp, #0]
 8016f94:	6163      	str	r3, [r4, #20]
 8016f96:	9b01      	ldr	r3, [sp, #4]
 8016f98:	6120      	str	r0, [r4, #16]
 8016f9a:	b15b      	cbz	r3, 8016fb4 <__smakebuf_r+0x74>
 8016f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f000 f889 	bl	80170b8 <_isatty_r>
 8016fa6:	b128      	cbz	r0, 8016fb4 <__smakebuf_r+0x74>
 8016fa8:	89a3      	ldrh	r3, [r4, #12]
 8016faa:	f023 0303 	bic.w	r3, r3, #3
 8016fae:	f043 0301 	orr.w	r3, r3, #1
 8016fb2:	81a3      	strh	r3, [r4, #12]
 8016fb4:	89a0      	ldrh	r0, [r4, #12]
 8016fb6:	4305      	orrs	r5, r0
 8016fb8:	81a5      	strh	r5, [r4, #12]
 8016fba:	e7cd      	b.n	8016f58 <__smakebuf_r+0x18>
 8016fbc:	08015bd9 	.word	0x08015bd9

08016fc0 <_realloc_r>:
 8016fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc2:	4607      	mov	r7, r0
 8016fc4:	4614      	mov	r4, r2
 8016fc6:	460e      	mov	r6, r1
 8016fc8:	b921      	cbnz	r1, 8016fd4 <_realloc_r+0x14>
 8016fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016fce:	4611      	mov	r1, r2
 8016fd0:	f7fe bf92 	b.w	8015ef8 <_malloc_r>
 8016fd4:	b922      	cbnz	r2, 8016fe0 <_realloc_r+0x20>
 8016fd6:	f7fe ff3f 	bl	8015e58 <_free_r>
 8016fda:	4625      	mov	r5, r4
 8016fdc:	4628      	mov	r0, r5
 8016fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe0:	f000 f87a 	bl	80170d8 <_malloc_usable_size_r>
 8016fe4:	42a0      	cmp	r0, r4
 8016fe6:	d20f      	bcs.n	8017008 <_realloc_r+0x48>
 8016fe8:	4621      	mov	r1, r4
 8016fea:	4638      	mov	r0, r7
 8016fec:	f7fe ff84 	bl	8015ef8 <_malloc_r>
 8016ff0:	4605      	mov	r5, r0
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	d0f2      	beq.n	8016fdc <_realloc_r+0x1c>
 8016ff6:	4631      	mov	r1, r6
 8016ff8:	4622      	mov	r2, r4
 8016ffa:	f7fe fefd 	bl	8015df8 <memcpy>
 8016ffe:	4631      	mov	r1, r6
 8017000:	4638      	mov	r0, r7
 8017002:	f7fe ff29 	bl	8015e58 <_free_r>
 8017006:	e7e9      	b.n	8016fdc <_realloc_r+0x1c>
 8017008:	4635      	mov	r5, r6
 801700a:	e7e7      	b.n	8016fdc <_realloc_r+0x1c>

0801700c <_raise_r>:
 801700c:	291f      	cmp	r1, #31
 801700e:	b538      	push	{r3, r4, r5, lr}
 8017010:	4604      	mov	r4, r0
 8017012:	460d      	mov	r5, r1
 8017014:	d904      	bls.n	8017020 <_raise_r+0x14>
 8017016:	2316      	movs	r3, #22
 8017018:	6003      	str	r3, [r0, #0]
 801701a:	f04f 30ff 	mov.w	r0, #4294967295
 801701e:	bd38      	pop	{r3, r4, r5, pc}
 8017020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017022:	b112      	cbz	r2, 801702a <_raise_r+0x1e>
 8017024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017028:	b94b      	cbnz	r3, 801703e <_raise_r+0x32>
 801702a:	4620      	mov	r0, r4
 801702c:	f000 f830 	bl	8017090 <_getpid_r>
 8017030:	462a      	mov	r2, r5
 8017032:	4601      	mov	r1, r0
 8017034:	4620      	mov	r0, r4
 8017036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801703a:	f000 b817 	b.w	801706c <_kill_r>
 801703e:	2b01      	cmp	r3, #1
 8017040:	d00a      	beq.n	8017058 <_raise_r+0x4c>
 8017042:	1c59      	adds	r1, r3, #1
 8017044:	d103      	bne.n	801704e <_raise_r+0x42>
 8017046:	2316      	movs	r3, #22
 8017048:	6003      	str	r3, [r0, #0]
 801704a:	2001      	movs	r0, #1
 801704c:	e7e7      	b.n	801701e <_raise_r+0x12>
 801704e:	2400      	movs	r4, #0
 8017050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017054:	4628      	mov	r0, r5
 8017056:	4798      	blx	r3
 8017058:	2000      	movs	r0, #0
 801705a:	e7e0      	b.n	801701e <_raise_r+0x12>

0801705c <raise>:
 801705c:	4b02      	ldr	r3, [pc, #8]	; (8017068 <raise+0xc>)
 801705e:	4601      	mov	r1, r0
 8017060:	6818      	ldr	r0, [r3, #0]
 8017062:	f7ff bfd3 	b.w	801700c <_raise_r>
 8017066:	bf00      	nop
 8017068:	20000020 	.word	0x20000020

0801706c <_kill_r>:
 801706c:	b538      	push	{r3, r4, r5, lr}
 801706e:	4d07      	ldr	r5, [pc, #28]	; (801708c <_kill_r+0x20>)
 8017070:	2300      	movs	r3, #0
 8017072:	4604      	mov	r4, r0
 8017074:	4608      	mov	r0, r1
 8017076:	4611      	mov	r1, r2
 8017078:	602b      	str	r3, [r5, #0]
 801707a:	f7e9 fd17 	bl	8000aac <_kill>
 801707e:	1c43      	adds	r3, r0, #1
 8017080:	d102      	bne.n	8017088 <_kill_r+0x1c>
 8017082:	682b      	ldr	r3, [r5, #0]
 8017084:	b103      	cbz	r3, 8017088 <_kill_r+0x1c>
 8017086:	6023      	str	r3, [r4, #0]
 8017088:	bd38      	pop	{r3, r4, r5, pc}
 801708a:	bf00      	nop
 801708c:	2000b600 	.word	0x2000b600

08017090 <_getpid_r>:
 8017090:	f7e9 bd04 	b.w	8000a9c <_getpid>

08017094 <_fstat_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4d07      	ldr	r5, [pc, #28]	; (80170b4 <_fstat_r+0x20>)
 8017098:	2300      	movs	r3, #0
 801709a:	4604      	mov	r4, r0
 801709c:	4608      	mov	r0, r1
 801709e:	4611      	mov	r1, r2
 80170a0:	602b      	str	r3, [r5, #0]
 80170a2:	f7e9 fd64 	bl	8000b6e <_fstat>
 80170a6:	1c43      	adds	r3, r0, #1
 80170a8:	d102      	bne.n	80170b0 <_fstat_r+0x1c>
 80170aa:	682b      	ldr	r3, [r5, #0]
 80170ac:	b103      	cbz	r3, 80170b0 <_fstat_r+0x1c>
 80170ae:	6023      	str	r3, [r4, #0]
 80170b0:	bd38      	pop	{r3, r4, r5, pc}
 80170b2:	bf00      	nop
 80170b4:	2000b600 	.word	0x2000b600

080170b8 <_isatty_r>:
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	4d06      	ldr	r5, [pc, #24]	; (80170d4 <_isatty_r+0x1c>)
 80170bc:	2300      	movs	r3, #0
 80170be:	4604      	mov	r4, r0
 80170c0:	4608      	mov	r0, r1
 80170c2:	602b      	str	r3, [r5, #0]
 80170c4:	f7e9 fd63 	bl	8000b8e <_isatty>
 80170c8:	1c43      	adds	r3, r0, #1
 80170ca:	d102      	bne.n	80170d2 <_isatty_r+0x1a>
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	b103      	cbz	r3, 80170d2 <_isatty_r+0x1a>
 80170d0:	6023      	str	r3, [r4, #0]
 80170d2:	bd38      	pop	{r3, r4, r5, pc}
 80170d4:	2000b600 	.word	0x2000b600

080170d8 <_malloc_usable_size_r>:
 80170d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170dc:	1f18      	subs	r0, r3, #4
 80170de:	2b00      	cmp	r3, #0
 80170e0:	bfbc      	itt	lt
 80170e2:	580b      	ldrlt	r3, [r1, r0]
 80170e4:	18c0      	addlt	r0, r0, r3
 80170e6:	4770      	bx	lr

080170e8 <_init>:
 80170e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ea:	bf00      	nop
 80170ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ee:	bc08      	pop	{r3}
 80170f0:	469e      	mov	lr, r3
 80170f2:	4770      	bx	lr

080170f4 <_fini>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	bf00      	nop
 80170f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fa:	bc08      	pop	{r3}
 80170fc:	469e      	mov	lr, r3
 80170fe:	4770      	bx	lr
