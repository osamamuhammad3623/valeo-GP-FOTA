
netconn_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018900  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038f8  08018ab0  08018ab0  00028ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3a8  0801c3a8  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801c3a8  0801c3a8  0002c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3b0  0801c3b0  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c3b0  0801c3b0  0002c3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c3b4  0801c3b4  0002c3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801c3b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b6c0  20000084  0801c43c  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b744  0801c43c  0003b744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cc5e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000962e  00000000  00000000  0007cd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002760  00000000  00000000  00086340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002580  00000000  00000000  00088aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035257  00000000  00000000  0008b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c01b  00000000  00000000  000c0277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025d0  00000000  00000000  000fc292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fe862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aac0  00000000  00000000  001fe8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018a98 	.word	0x08018a98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08018a98 	.word	0x08018a98

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d78:	f3bf 8f4f 	dsb	sy
}
 8000d7c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <__NVIC_SystemReset+0x24>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <__NVIC_SystemReset+0x24>)
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_SystemReset+0x28>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8e:	f3bf 8f4f 	dsb	sy
}
 8000d92:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <__NVIC_SystemReset+0x20>
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	05fa0004 	.word	0x05fa0004

08000da0 <bootloader_set_boot_bank>:
#include "stm32f4xx_hal.h"
#include "bootloader.h"

#if (IS_APPLICATION_CODE == 1)

void static bootloader_set_boot_bank(uint8_t bank){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]

	if ((bank != 1) && (bank!=2)){
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d002      	beq.n	8000db6 <bootloader_set_boot_bank+0x16>
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d124      	bne.n	8000e00 <bootloader_set_boot_bank+0x60>
		return;
	}

	// clear OPTLOCK bit to enable modifying the option bytes
	HAL_FLASH_OB_Unlock();
 8000db6:	f002 fda3 	bl	8003900 <HAL_FLASH_OB_Unlock>

	// Check that no Flash memory operation is ongoing
	while(FLASH->SR & FLASH_SR_BSY_Msk);
 8000dba:	bf00      	nop
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f9      	bne.n	8000dbc <bootloader_set_boot_bank+0x1c>

	// if it's required to set bank 1, then clear BFB2 bit
	// and if it's required to set bank 2, set the BFB2 bit
	if (bank==1){
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d106      	bne.n	8000ddc <bootloader_set_boot_bank+0x3c>
		CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk);
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000dd4:	f023 0310 	bic.w	r3, r3, #16
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	e005      	b.n	8000de8 <bootloader_set_boot_bank+0x48>
	}else{
		SET_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6153      	str	r3, [r2, #20]
	}

	// start changing user option bytes
	HAL_FLASH_OB_Launch();
 8000de8:	f002 fdb6 	bl	8003958 <HAL_FLASH_OB_Launch>

	// Wait for the operation to be completed
	while(FLASH->SR & FLASH_SR_BSY_Msk);
 8000dec:	bf00      	nop
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <bootloader_set_boot_bank+0x68>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f9      	bne.n	8000dee <bootloader_set_boot_bank+0x4e>

	// unlock option-bytes-bit
	HAL_FLASH_OB_Lock();
 8000dfa:	f002 fd9d 	bl	8003938 <HAL_FLASH_OB_Lock>
 8000dfe:	e000      	b.n	8000e02 <bootloader_set_boot_bank+0x62>
		return;
 8000e00:	bf00      	nop

}
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <bootloader_switch_to_inactive_bank>:


void bootloader_switch_to_inactive_bank(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

	// 0 represents bank 1,
	// 1 represents bank 2
	uint8_t active_bank = READ_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <bootloader_switch_to_inactive_bank+0x30>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	71fb      	strb	r3, [r7, #7]

	if (active_bank == 0){
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <bootloader_switch_to_inactive_bank+0x20>
		bootloader_set_boot_bank(2);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f7ff ffbb 	bl	8000da0 <bootloader_set_boot_bank>
	}else{
		bootloader_set_boot_bank(1);
	}
}
 8000e2a:	e002      	b.n	8000e32 <bootloader_switch_to_inactive_bank+0x26>
		bootloader_set_boot_bank(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff ffb7 	bl	8000da0 <bootloader_set_boot_bank>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <bootloader_reboot>:


void bootloader_reboot(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8000e44:	f7ff ff96 	bl	8000d74 <__NVIC_SystemReset>

08000e48 <erase_inactive_bank>:
}




uint8_t erase_inactive_bank(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint32_t SECTORError;

	uint32_t InactiveBank;

	/*check the inactive bank to erase*/
	if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk)){
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <erase_inactive_bank+0x78>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <erase_inactive_bank+0x18>
		/* active bank -> bank2
		 * inactive bank -> bank1
		 */
		InactiveBank=FLASH_BANK_1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e001      	b.n	8000e64 <erase_inactive_bank+0x1c>
	}
	else{
		/* active bank -> bank1
		 * inactive bank -> bank2
		 */
		InactiveBank=FLASH_BANK_2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
	}

	/* Filling the erasing structure */
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	611a      	str	r2, [r3, #16]

    /* Determine the start sector based on which Bank that will be erased */
	switch (InactiveBank){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d003      	beq.n	8000e7e <erase_inactive_bank+0x36>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d004      	beq.n	8000e86 <erase_inactive_bank+0x3e>
 8000e7c:	e007      	b.n	8000e8e <erase_inactive_bank+0x46>
	/*erase from sector 7 in case of bank 1*/
	case FLASH_BANK_1:
		EraseInitStruct.Sector        = MAIN_APP_SECTOR_BANK1;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	609a      	str	r2, [r3, #8]
		break;
 8000e84:	e005      	b.n	8000e92 <erase_inactive_bank+0x4a>
	/*erase from sector 18 in case of bank 2*/
	case FLASH_BANK_2:
		EraseInitStruct.Sector        = MAIN_APP_SECTOR_BANK2;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000e88:	2212      	movs	r2, #18
 8000e8a:	609a      	str	r2, [r3, #8]
		break;
 8000e8c:	e001      	b.n	8000e92 <erase_inactive_bank+0x4a>
	default:
		return FAILED;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e011      	b.n	8000eb6 <erase_inactive_bank+0x6e>

	}

	EraseInitStruct.NbSectors       = 5;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000e94:	2205      	movs	r2, #5
 8000e96:	60da      	str	r2, [r3, #12]

	/* Unlocking the Flash control register */
	HAL_FLASH_Unlock();
 8000e98:	f002 fd00 	bl	800389c <HAL_FLASH_Unlock>

	/* check if the erasing process is done correctly */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <erase_inactive_bank+0x7c>)
 8000ea2:	f002 fead 	bl	8003c00 <HAL_FLASHEx_Erase>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <erase_inactive_bank+0x68>
	{
		/*Error occurred while erasing*/
		return FAILED;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e002      	b.n	8000eb6 <erase_inactive_bank+0x6e>
	}

	/* Locking the Flash control register */
	HAL_FLASH_Lock();
 8000eb0:	f002 fd16 	bl	80038e0 <HAL_FLASH_Lock>

	return SUCCEED;
 8000eb4:	2301      	movs	r3, #1

}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	200000a0 	.word	0x200000a0

08000ec8 <flash_memory_write>:


uint8_t flash_memory_write(uint32_t *data, uint32_t dataSizeInWords, FLASH_DataType dataType){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]
	/* begin from the start
	 * initialized only once, then increased at each call
	 * depending on the data size that will be written */
	static uint32_t StartAddress;
	uint32_t numofWords=dataSizeInWords;     /*getting number of words to write*/
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
	uint32_t numofWordsWritten=0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

	/*depending on the type of data to be written, the start address will be determined*/
	switch (dataType){
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <flash_memory_write+0x22>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d00e      	beq.n	8000f06 <flash_memory_write+0x3e>
 8000ee8:	e01b      	b.n	8000f22 <flash_memory_write+0x5a>
	case META_DATA:
		/*check the inactive bank to write in*/
		if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk)){
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <flash_memory_write+0xb0>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <flash_memory_write+0x36>
			/* active bank -> bank2
			 * inactive bank -> bank1
			 */
			StartAddress=META_DATA_START_ADDRESS_BANK1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <flash_memory_write+0xb4>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <flash_memory_write+0xb8>)
 8000efa:	601a      	str	r2, [r3, #0]
			 * inactive bank -> bank2
			 */
			StartAddress=META_DATA_START_ADDRESS_BANK2;
		}

		break;
 8000efc:	e013      	b.n	8000f26 <flash_memory_write+0x5e>
			StartAddress=META_DATA_START_ADDRESS_BANK2;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <flash_memory_write+0xb4>)
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <flash_memory_write+0xbc>)
 8000f02:	601a      	str	r2, [r3, #0]
		break;
 8000f04:	e00f      	b.n	8000f26 <flash_memory_write+0x5e>

	case APP:
		/*check the inactive bank to write in*/
		if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_BFB2_Msk)){
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <flash_memory_write+0xb0>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <flash_memory_write+0x52>
			/* active bank -> bank2
			 * inactive bank -> bank1
			 */
			StartAddress=APP_START_ADDRESS_BANK1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <flash_memory_write+0xb4>)
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <flash_memory_write+0xc0>)
 8000f16:	601a      	str	r2, [r3, #0]
			 * inactive bank -> bank2
			 */
			StartAddress=APP_START_ADDRESS_BANK2;
		}

		break;
 8000f18:	e005      	b.n	8000f26 <flash_memory_write+0x5e>
			StartAddress=APP_START_ADDRESS_BANK2;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <flash_memory_write+0xb4>)
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <flash_memory_write+0xc4>)
 8000f1e:	601a      	str	r2, [r3, #0]
		break;
 8000f20:	e001      	b.n	8000f26 <flash_memory_write+0x5e>
	default:
		return FAILED;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e024      	b.n	8000f70 <flash_memory_write+0xa8>

	}


	/* Unlocking the Flash control register */
	HAL_FLASH_Unlock();
 8000f26:	f002 fcb9 	bl	800389c <HAL_FLASH_Unlock>

	/* looping on the data word by word to write it in the flash */
	while(numofWordsWritten < numofWords){
 8000f2a:	e01a      	b.n	8000f62 <flash_memory_write+0x9a>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartAddress, data[numofWordsWritten]) == HAL_OK)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <flash_memory_write+0xb4>)
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	2002      	movs	r0, #2
 8000f42:	f002 fc57 	bl	80037f4 <HAL_FLASH_Program>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d108      	bne.n	8000f5e <flash_memory_write+0x96>
		{
			StartAddress += 4;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <flash_memory_write+0xb4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3304      	adds	r3, #4
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <flash_memory_write+0xb4>)
 8000f54:	6013      	str	r3, [r2, #0]
			numofWordsWritten++;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e001      	b.n	8000f62 <flash_memory_write+0x9a>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return FAILED;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e006      	b.n	8000f70 <flash_memory_write+0xa8>
	while(numofWordsWritten < numofWords){
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3e0      	bcc.n	8000f2c <flash_memory_write+0x64>
		}

	}

	/* Locking the Flash control register */
	HAL_FLASH_Lock();
 8000f6a:	f002 fcb9 	bl	80038e0 <HAL_FLASH_Lock>

	return SUCCEED;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023c00 	.word	0x40023c00
 8000f7c:	200000b4 	.word	0x200000b4
 8000f80:	08002000 	.word	0x08002000
 8000f84:	08102000 	.word	0x08102000
 8000f88:	08002100 	.word	0x08002100
 8000f8c:	08102100 	.word	0x08102100

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f001 f8f8 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f820 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f8d0 	bl	8001140 <MX_GPIO_Init>
  MX_HASH_Init();
 8000fa0:	f000 f8a0 	bl	80010e4 <MX_HASH_Init>
  MX_RNG_Init();
 8000fa4:	f000 f8b8 	bl	8001118 <MX_RNG_Init>
  MX_CRC_Init();
 8000fa8:	f000 f888 	bl	80010bc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  init_execute_request_callback(UDS_execute_request);
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <main+0x3c>)
 8000fae:	f000 fbbd 	bl	800172c <init_execute_request_callback>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb2:	f005 fa81 	bl	80064b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <main+0x40>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <main+0x44>)
 8000fbc:	f005 fb0e 	bl	80065dc <osThreadNew>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <main+0x48>)
 8000fc4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fc6:	f005 faab 	bl	8006520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <main+0x3a>
 8000fcc:	08001891 	.word	0x08001891
 8000fd0:	0801c0f8 	.word	0x0801c0f8
 8000fd4:	08001305 	.word	0x08001305
 8000fd8:	20004c34 	.word	0x20004c34

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f016 fdbf 	bl	8017b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <SystemClock_Config+0xd8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <SystemClock_Config+0xd8>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xd8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemClock_Config+0xdc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <SystemClock_Config+0xdc>)
 8001026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xdc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001050:	23b4      	movs	r3, #180	; 0xb4
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001058:	2308      	movs	r3, #8
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fd5b 	bl	8004b1c <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 f968 	bl	8001340 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001070:	f003 fd04 	bl	8004a7c <HAL_PWREx_EnableOverDrive>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800107a:	f000 f961 	bl	8001340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2105      	movs	r1, #5
 800109c:	4618      	mov	r0, r3
 800109e:	f003 ffad 	bl	8004ffc <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010a8:	f000 f94a 	bl	8001340 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_CRC_Init+0x20>)
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MX_CRC_Init+0x24>)
 80010c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_CRC_Init+0x20>)
 80010c8:	f001 f9a6 	bl	8002418 <HAL_CRC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010d2:	f000 f935 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20004c7c 	.word	0x20004c7c
 80010e0:	40023000 	.word	0x40023000

080010e4 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_HASH_Init+0x2c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  hhash.Init.KeySize = 17;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_HASH_Init+0x2c>)
 80010f0:	2211      	movs	r2, #17
 80010f2:	605a      	str	r2, [r3, #4]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_HASH_Init+0x2c>)
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <MX_HASH_Init+0x30>)
 80010f8:	609a      	str	r2, [r3, #8]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_HASH_Init+0x2c>)
 80010fc:	f003 f886 	bl	800420c <HAL_HASH_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8001106:	f000 f91b 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20004c38 	.word	0x20004c38
 8001114:	0801c0e4 	.word	0x0801c0e4

08001118 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_RNG_Init+0x20>)
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <MX_RNG_Init+0x24>)
 8001120:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_RNG_Init+0x20>)
 8001124:	f004 f984 	bl	8005430 <HAL_RNG_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800112e:	f000 f907 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004c88 	.word	0x20004c88
 800113c:	50060800 	.word	0x50060800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a62      	ldr	r2, [pc, #392]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a5b      	ldr	r2, [pc, #364]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a54      	ldr	r2, [pc, #336]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a46      	ldr	r2, [pc, #280]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a3f      	ldr	r2, [pc, #252]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <MX_GPIO_Init+0x1a8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f244 0181 	movw	r1, #16513	; 0x4081
 8001204:	4839      	ldr	r0, [pc, #228]	; (80012ec <MX_GPIO_Init+0x1ac>)
 8001206:	f002 ffe7 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2140      	movs	r1, #64	; 0x40
 800120e:	4838      	ldr	r0, [pc, #224]	; (80012f0 <MX_GPIO_Init+0x1b0>)
 8001210:	f002 ffe2 	bl	80041d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_GPIO_Init+0x1b4>)
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4833      	ldr	r0, [pc, #204]	; (80012f8 <MX_GPIO_Init+0x1b8>)
 800122a:	f002 fe29 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800122e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4829      	ldr	r0, [pc, #164]	; (80012ec <MX_GPIO_Init+0x1ac>)
 8001248:	f002 fe1a 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800124c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125e:	2307      	movs	r3, #7
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4824      	ldr	r0, [pc, #144]	; (80012fc <MX_GPIO_Init+0x1bc>)
 800126a:	f002 fe09 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	481a      	ldr	r0, [pc, #104]	; (80012f0 <MX_GPIO_Init+0x1b0>)
 8001286:	f002 fdfb 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x1b0>)
 800129e:	f002 fdef 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b4:	230a      	movs	r3, #10
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <MX_GPIO_Init+0x1c0>)
 80012c0:	f002 fdde 	bl	8003e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <MX_GPIO_Init+0x1c0>)
 80012da:	f002 fdd1 	bl	8003e80 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	10110000 	.word	0x10110000
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40020000 	.word	0x40020000

08001304 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800130c:	f004 fb46 	bl	800599c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8001310:	f000 faa6 	bl	8001860 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f005 fa07 	bl	8006728 <osDelay>
 800131a:	e7fb      	b.n	8001314 <StartDefaultTask+0x10>

0800131c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132e:	f000 ff4d 	bl	80021cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_MspInit+0x4c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10d      	bne.n	80013ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_CRC_MspInit+0x40>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_CRC_MspInit+0x40>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_CRC_MspInit+0x40>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_HASH_MspInit+0x30>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_HASH_MspInit+0x30>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6353      	str	r3, [r2, #52]	; 0x34
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_HASH_MspInit+0x30>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_RNG_MspInit+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10d      	bne.n	8001446 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RNG_MspInit+0x40>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_RNG_MspInit+0x40>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6353      	str	r3, [r2, #52]	; 0x34
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_RNG_MspInit+0x40>)
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	50060800 	.word	0x50060800
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2019      	movs	r0, #25
 8001472:	f000 ffa7 	bl	80023c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001476:	2019      	movs	r0, #25
 8001478:	f000 ffc0 	bl	80023fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_InitTick+0xa4>)
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_InitTick+0xa4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6453      	str	r3, [r2, #68]	; 0x44
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_InitTick+0xa4>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001498:	f107 0210 	add.w	r2, r7, #16
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 ff92 	bl	80053cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014a8:	f003 ff7c 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 80014ac:	4603      	mov	r3, r0
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_InitTick+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3b01      	subs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_InitTick+0xac>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_InitTick+0xb0>)
 80014c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_InitTick+0xac>)
 80014c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_InitTick+0xac>)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_InitTick+0xac>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_InitTick+0xac>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_InitTick+0xac>)
 80014e2:	f004 f81e 	bl	8005522 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_InitTick+0xac>)
 80014ee:	f004 f84d 	bl	800558c <HAL_TIM_Base_Start_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	431bde83 	.word	0x431bde83
 8001508:	20004c98 	.word	0x20004c98
 800150c:	40010000 	.word	0x40010000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154a:	f004 f843 	bl	80055d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20004c98 	.word	0x20004c98

08001558 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <ETH_IRQHandler+0x10>)
 800155e:	f001 fb87 	bl	8002c70 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200067a4 	.word	0x200067a4

0800156c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <_kill+0x20>)
 8001588:	2216      	movs	r2, #22
 800158a:	601a      	str	r2, [r3, #0]
	return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	2000b730 	.word	0x2000b730

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe5 	bl	800157c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015b2:	e7fe      	b.n	80015b2 <_exit+0x12>

080015b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
	}

return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e009      	b.n	8001614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf1      	blt.n	8001600 <_write+0x12>
	}
	return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_close>:

int _close(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	605a      	str	r2, [r3, #4]
	return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_isatty>:

int _isatty(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return 1;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d205      	bcs.n	80016cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <_sbrk+0x6c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20030000 	.word	0x20030000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	200000b8 	.word	0x200000b8
 80016f8:	2000b748 	.word	0x2000b748
 80016fc:	2000b730 	.word	0x2000b730

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <SystemInit+0x28>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <SystemInit+0x28>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SystemInit+0x28>)
 8001716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800171a:	609a      	str	r2, [r3, #8]
#endif
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <init_execute_request_callback>:
char msg[100];
char * data = (char*)0x10000000;
uint8_t smsg[200];
//==============================================================================

void init_execute_request_callback(void (*p)(void *argument)) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	UDS_exec_req_p = p;
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <init_execute_request_callback+0x1c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20004e0c 	.word	0x20004e0c

0800174c <tcp_thread>:
			tcp_RecievePrograme(programLength);
		}
	}
}
static void tcp_thread(void *arg)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2010      	movs	r0, #16
 800175a:	f008 fe73 	bl	800a444 <netconn_new_with_proto_and_callback>
 800175e:	4603      	mov	r3, r0
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <tcp_thread+0xd4>)
 8001762:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <tcp_thread+0xd4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d055      	beq.n	8001818 <tcp_thread+0xcc>
	{
		/* Bind connection to the port number 10. */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <tcp_thread+0xd4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	220a      	movs	r2, #10
 8001772:	492c      	ldr	r1, [pc, #176]	; (8001824 <tcp_thread+0xd8>)
 8001774:	4618      	mov	r0, r3
 8001776:	f008 ff1f 	bl	800a5b8 <netconn_bind>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d143      	bne.n	800180e <tcp_thread+0xc2>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <tcp_thread+0xd4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	21ff      	movs	r1, #255	; 0xff
 800178c:	4618      	mov	r0, r3
 800178e:	f008 ff4b 	bl	800a628 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <tcp_thread+0xd4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4924      	ldr	r1, [pc, #144]	; (8001828 <tcp_thread+0xdc>)
 8001798:	4618      	mov	r0, r3
 800179a:	f008 ff71 	bl	800a680 <netconn_accept>
 800179e:	4603      	mov	r3, r0
 80017a0:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 80017a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f3      	bne.n	8001792 <tcp_thread+0x46>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80017aa:	e01c      	b.n	80017e6 <tcp_thread+0x9a>
					{
						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							//strncpy(msg,buf->p->payload,buf->p->len);
							memcpy((void *) msg,buf->p->payload,buf->p->len);
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <tcp_thread+0xe0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <tcp_thread+0xe0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	895b      	ldrh	r3, [r3, #10]
 80017bc:	461a      	mov	r2, r3
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <tcp_thread+0xe4>)
 80017c0:	f016 f9c7 	bl	8017b52 <memcpy>
								executeTaskCreated = 1;
							}
							else {
								osThreadResume(executeRequestTaskHandle);
							}*/
							UDS_exec_req_p((void *)msg);
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <tcp_thread+0xe8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4819      	ldr	r0, [pc, #100]	; (8001830 <tcp_thread+0xe4>)
 80017ca:	4798      	blx	r3

						}
						while (netbuf_next(buf) >=0);
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <tcp_thread+0xe0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00a fef3 	bl	800c5bc <netbuf_next>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dae7      	bge.n	80017ac <tcp_thread+0x60>

						netbuf_delete(buf);
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <tcp_thread+0xe0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00a fecb 	bl	800c57c <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <tcp_thread+0xdc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4910      	ldr	r1, [pc, #64]	; (800182c <tcp_thread+0xe0>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f009 f94f 	bl	800aa90 <netconn_recv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0d9      	beq.n	80017ac <tcp_thread+0x60>
					}
					//osThreadTerminate(executeRequestTaskHandle);

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <tcp_thread+0xdc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f009 fac3 	bl	800ad88 <netconn_close>
					netconn_delete(newconn);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <tcp_thread+0xdc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f008 feba 	bl	800a580 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 800180c:	e7c1      	b.n	8001792 <tcp_thread+0x46>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <tcp_thread+0xd4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f008 feb4 	bl	800a580 <netconn_delete>
		}
	}
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200000bc 	.word	0x200000bc
 8001824:	0801c248 	.word	0x0801c248
 8001828:	200000c0 	.word	0x200000c0
 800182c:	200000c4 	.word	0x200000c4
 8001830:	20004da8 	.word	0x20004da8
 8001834:	20004e0c 	.word	0x20004e0c

08001838 <tcp_SendResponse>:
	len = sprintf (smsg, "Done, Length = %d\n",length);
	tcp_SendResponse(smsg,len);
}

void tcp_SendResponse(uint8_t *data , int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	netconn_write(newconn, data, len, NETCONN_COPY);
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <tcp_SendResponse+0x24>)
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f009 f998 	bl	800ab84 <netconn_write_partly>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200000c0 	.word	0x200000c0

08001860 <tcpserver_init>:


void tcpserver_init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af02      	add	r7, sp, #8
	tcpThreadTaskHandle = sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001866:	2318      	movs	r3, #24
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	2200      	movs	r2, #0
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <tcpserver_init+0x24>)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <tcpserver_init+0x28>)
 8001874:	f016 f804 	bl	8017880 <sys_thread_new>
 8001878:	4603      	mov	r3, r0
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <tcpserver_init+0x2c>)
 800187c:	6013      	str	r3, [r2, #0]
	//tcpThreadTaskHandle = osThreadNew(tcp_thread, NULL, &tcpThreadTask_attributes);
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800174d 	.word	0x0800174d
 8001888:	08018abc 	.word	0x08018abc
 800188c:	20004da4 	.word	0x20004da4

08001890 <UDS_execute_request>:
extern HASH_HandleTypeDef hhash;
/******************************************************************************* 
 *                      Functions Implementations		*
 *******************************************************************************/
void UDS_execute_request(void *arg) 
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(arg == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8084 	beq.w	80019a8 <UDS_execute_request+0x118>
	{
		return;
	}

	uint8_t *requestFrame = (uint8_t *)arg;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]

	switch(requestFrame[0]){
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3b10      	subs	r3, #16
 80018aa:	2b27      	cmp	r3, #39	; 0x27
 80018ac:	d86e      	bhi.n	800198c <UDS_execute_request+0xfc>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <UDS_execute_request+0x24>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	08001955 	.word	0x08001955
 80018b8:	08001985 	.word	0x08001985
 80018bc:	0800198d 	.word	0x0800198d
 80018c0:	0800198d 	.word	0x0800198d
 80018c4:	0800198d 	.word	0x0800198d
 80018c8:	0800198d 	.word	0x0800198d
 80018cc:	0800198d 	.word	0x0800198d
 80018d0:	0800198d 	.word	0x0800198d
 80018d4:	0800198d 	.word	0x0800198d
 80018d8:	0800198d 	.word	0x0800198d
 80018dc:	0800198d 	.word	0x0800198d
 80018e0:	0800198d 	.word	0x0800198d
 80018e4:	0800198d 	.word	0x0800198d
 80018e8:	0800198d 	.word	0x0800198d
 80018ec:	0800198d 	.word	0x0800198d
 80018f0:	0800198d 	.word	0x0800198d
 80018f4:	0800198d 	.word	0x0800198d
 80018f8:	0800198d 	.word	0x0800198d
 80018fc:	0800198d 	.word	0x0800198d
 8001900:	0800198d 	.word	0x0800198d
 8001904:	0800198d 	.word	0x0800198d
 8001908:	0800198d 	.word	0x0800198d
 800190c:	0800198d 	.word	0x0800198d
 8001910:	0800195d 	.word	0x0800195d
 8001914:	0800198d 	.word	0x0800198d
 8001918:	0800198d 	.word	0x0800198d
 800191c:	0800198d 	.word	0x0800198d
 8001920:	0800198d 	.word	0x0800198d
 8001924:	0800198d 	.word	0x0800198d
 8001928:	0800198d 	.word	0x0800198d
 800192c:	0800198d 	.word	0x0800198d
 8001930:	0800198d 	.word	0x0800198d
 8001934:	0800198d 	.word	0x0800198d
 8001938:	08001965 	.word	0x08001965
 800193c:	0800198d 	.word	0x0800198d
 8001940:	0800198d 	.word	0x0800198d
 8001944:	0800196d 	.word	0x0800196d
 8001948:	0800198d 	.word	0x0800198d
 800194c:	08001975 	.word	0x08001975
 8001950:	0800197d 	.word	0x0800197d

	case DIAGNOSTICS_SESSION_CONTROL: UDS_change_session(requestFrame);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f82b 	bl	80019b0 <UDS_change_session>
	break;
 800195a:	e026      	b.n	80019aa <UDS_execute_request+0x11a>

	case SECURITY_ACCESS:		 	UDS_security_access(requestFrame);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f859 	bl	8001a14 <UDS_security_access>
	break;
 8001962:	e022      	b.n	80019aa <UDS_execute_request+0x11a>

	case ROUTINE_CONTROL: 		UDS_call_routine(requestFrame);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f95f 	bl	8001c28 <UDS_call_routine>
	break;
 800196a:	e01e      	b.n	80019aa <UDS_execute_request+0x11a>

	case REQUEST_DOWNLOAD:		UDS_start_download(requestFrame);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f9fb 	bl	8001d68 <UDS_start_download>
	break;
 8001972:	e01a      	b.n	80019aa <UDS_execute_request+0x11a>

	case TRANSFER_DATA: 			UDS_process_data(requestFrame);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fa3f 	bl	8001df8 <UDS_process_data>
	break;
 800197a:	e016      	b.n	80019aa <UDS_execute_request+0x11a>

	case REQUEST_TRANSFER_EXIT:		 UDS_exit_download(requestFrame);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 faad 	bl	8001edc <UDS_exit_download>
	break;
 8001982:	e012      	b.n	80019aa <UDS_execute_request+0x11a>

	case ECU_RESET:		 	UDS_reboot(requestFrame);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 faed 	bl	8001f64 <UDS_reboot>
	break;
 800198a:	e00e      	b.n	80019aa <UDS_execute_request+0x11a>

	default:
		;
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, requestFrame[0], SERVICE_NOT_SUPPORTED};
 800198c:	237f      	movs	r3, #127	; 0x7f
 800198e:	723b      	strb	r3, [r7, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	727b      	strb	r3, [r7, #9]
 8001996:	2311      	movs	r3, #17
 8001998:	72bb      	strb	r3, [r7, #10]
		tcp_SendResponse(responseFrame, 3);
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2103      	movs	r1, #3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff49 	bl	8001838 <tcp_SendResponse>
		break;
 80019a6:	e000      	b.n	80019aa <UDS_execute_request+0x11a>
		return;
 80019a8:	bf00      	nop
	}
} 
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <UDS_change_session>:

void UDS_change_session(uint8_t *requestFrame) 
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if(requestFrame[1] < MAX_SESSIONS)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d810      	bhi.n	80019e4 <UDS_change_session+0x34>
	{
		currentSession = requestFrame[1];
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3301      	adds	r3, #1
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <UDS_change_session+0x5c>)
 80019ca:	701a      	strb	r2, [r3, #0]
		uint8_t responseFrame[] = {DIAGNOSTICS_SESSION_CONTROL + POSITIVE_RESPONSE_OFFSET, requestFrame[1]};
 80019cc:	2350      	movs	r3, #80	; 0x50
 80019ce:	733b      	strb	r3, [r7, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	737b      	strb	r3, [r7, #13]
		tcp_SendResponse(responseFrame, 2);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2102      	movs	r1, #2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff2b 	bl	8001838 <tcp_SendResponse>
	else
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, DIAGNOSTICS_SESSION_CONTROL, SUBFUNCTION_NOT_SUPPORTED};
		tcp_SendResponse(responseFrame, 3);
	}
} 
 80019e2:	e00e      	b.n	8001a02 <UDS_change_session+0x52>
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, DIAGNOSTICS_SESSION_CONTROL, SUBFUNCTION_NOT_SUPPORTED};
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <UDS_change_session+0x60>)
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	4611      	mov	r1, r2
 80019ee:	8019      	strh	r1, [r3, #0]
 80019f0:	3302      	adds	r3, #2
 80019f2:	0c12      	lsrs	r2, r2, #16
 80019f4:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2103      	movs	r1, #3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff1b 	bl	8001838 <tcp_SendResponse>
} 
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	08018b58 	.word	0x08018b58

08001a14 <UDS_security_access>:

void UDS_security_access(uint8_t *requestFrame) 
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if(currentSession != EXTENDED)
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <UDS_security_access+0x78>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d00f      	beq.n	8001a44 <UDS_security_access+0x30>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, CONDITIONS_NOT_CORRECT};
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <UDS_security_access+0x7c>)
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	8019      	strh	r1, [r3, #0]
 8001a30:	3302      	adds	r3, #2
 8001a32:	0c12      	lsrs	r2, r2, #16
 8001a34:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fefb 	bl	8001838 <tcp_SendResponse>
 8001a42:	e01f      	b.n	8001a84 <UDS_security_access+0x70>
		return;
	}

	switch(requestFrame[1]){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d002      	beq.n	8001a54 <UDS_security_access+0x40>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d004      	beq.n	8001a5c <UDS_security_access+0x48>
 8001a52:	e007      	b.n	8001a64 <UDS_security_access+0x50>

	case SA_REQUEST_SEED: 	UDS_generate_seed(requestFrame);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f81f 	bl	8001a98 <UDS_generate_seed>
	break;
 8001a5a:	e013      	b.n	8001a84 <UDS_security_access+0x70>

	case SA_SEND_KEY:		 UDS_verify_key(requestFrame);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f861 	bl	8001b24 <UDS_verify_key>
	break;
 8001a62:	e00f      	b.n	8001a84 <UDS_security_access+0x70>

	default:
		;
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, SUBFUNCTION_NOT_SUPPORTED};
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <UDS_security_access+0x80>)
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	8019      	strh	r1, [r3, #0]
 8001a70:	3302      	adds	r3, #2
 8001a72:	0c12      	lsrs	r2, r2, #16
 8001a74:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fedb 	bl	8001838 <tcp_SendResponse>
		break;
 8001a82:	bf00      	nop
	}
} 
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	08018b5c 	.word	0x08018b5c
 8001a94:	08018b60 	.word	0x08018b60

08001a98 <UDS_generate_seed>:

void UDS_generate_seed(uint8_t *requestFrame) 
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
	//use RNG for seed (truly random while rand lib is pseudo random) and HMAC for key and save it in global var! … adjust configurations of the project correctly first.
	seedRequestedFlag = 1;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <UDS_generate_seed+0x7c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
	uint32_t seed;
	HAL_RNG_GenerateRandomNumber(&hrng, &seed);	//pooling takes 40 clk cycles
 8001aa6:	f107 0318 	add.w	r3, r7, #24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <UDS_generate_seed+0x80>)
 8001aae:	f003 fce9 	bl	8005484 <HAL_RNG_GenerateRandomNumber>
	// interrupt fn: HAL_RNG_GenerateRandomNumber_IT(&hrng);  à RTOS use Queue!
	//needs imp for ISR: HAL_RNG_ReadyDataCallback() to set a flag for example and then read the value by calling HAL_RNG_ReadLastRandomNumber()

	uint8_t seedArr[] = {((uint32_t)seed&(0xFF000000))>>(8*3), ((uint32_t)seed&(0x00FF0000))>>(8*2), ((uint32_t)seed&(0x0000FF00))>>8, seed&(0x000000FF)};
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	0e1b      	lsrs	r3, r3, #24
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	753b      	strb	r3, [r7, #20]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	757b      	strb	r3, [r7, #21]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	75bb      	strb	r3, [r7, #22]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef errorState = HAL_HMACEx_SHA256_Start(&hhash, seedArr, 4, generatedKey, TIMEOUT);
 8001ad0:	f107 0114 	add.w	r1, r7, #20
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <UDS_generate_seed+0x84>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <UDS_generate_seed+0x88>)
 8001ade:	f002 ffb5 	bl	8004a4c <HAL_HMACEx_SHA256_Start>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	77fb      	strb	r3, [r7, #31]
	//HAL_HASH_DeInit(&hhash);
	uint8_t responseFrame[] = {SECURITY_ACCESS + POSITIVE_RESPONSE_OFFSET, requestFrame[1], seedArr[0], seedArr[1], seedArr[2], seedArr[3]};
 8001ae6:	2367      	movs	r3, #103	; 0x67
 8001ae8:	733b      	strb	r3, [r7, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	737b      	strb	r3, [r7, #13]
 8001af0:	7d3b      	ldrb	r3, [r7, #20]
 8001af2:	73bb      	strb	r3, [r7, #14]
 8001af4:	7d7b      	ldrb	r3, [r7, #21]
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	7dbb      	ldrb	r3, [r7, #22]
 8001afa:	743b      	strb	r3, [r7, #16]
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	747b      	strb	r3, [r7, #17]
	tcp_SendResponse(responseFrame, 6);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2106      	movs	r1, #6
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fe96 	bl	8001838 <tcp_SendResponse>
}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000c9 	.word	0x200000c9
 8001b18:	20004c88 	.word	0x20004c88
 8001b1c:	20004e14 	.word	0x20004e14
 8001b20:	20004c38 	.word	0x20004c38

08001b24 <UDS_verify_key>:

void UDS_verify_key(uint8_t *requestFrame) 
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b090      	sub	sp, #64	; 0x40
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	static uint8_t attemptsCount = 0;
	uint8_t receivedKey[32];
	for(int i=0; i<32;i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b30:	e00d      	b.n	8001b4e <UDS_verify_key+0x2a>
	{
		receivedKey[i] = requestFrame[i+2];
 8001b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b34:	3302      	adds	r3, #2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	7819      	ldrb	r1, [r3, #0]
 8001b3c:	f107 021c 	add.w	r2, r7, #28
 8001b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b42:	4413      	add	r3, r2
 8001b44:	460a      	mov	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<32;i++)
 8001b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b50:	2b1f      	cmp	r3, #31
 8001b52:	ddee      	ble.n	8001b32 <UDS_verify_key+0xe>
	}

	if(seedRequestedFlag == 0)
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <UDS_verify_key+0xec>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10f      	bne.n	8001b7c <UDS_verify_key+0x58>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, REQUEST_SEQUENCE_ERROR};
 8001b5c:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <UDS_verify_key+0xf0>)
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4611      	mov	r1, r2
 8001b66:	8019      	strh	r1, [r3, #0]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	0c12      	lsrs	r2, r2, #16
 8001b6c:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	2103      	movs	r1, #3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe5f 	bl	8001838 <tcp_SendResponse>
		{
			uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, INVALID_KEY};
			tcp_SendResponse(responseFrame, 3);
		}
	}
}
 8001b7a:	e044      	b.n	8001c06 <UDS_verify_key+0xe2>
	else if(memcmp(generatedKey, receivedKey, 32) == 0)
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2220      	movs	r2, #32
 8001b82:	4619      	mov	r1, r3
 8001b84:	4824      	ldr	r0, [pc, #144]	; (8001c18 <UDS_verify_key+0xf4>)
 8001b86:	f015 ffd6 	bl	8017b36 <memcmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d111      	bne.n	8001bb4 <UDS_verify_key+0x90>
		attemptsCount = 0;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <UDS_verify_key+0xf8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
		seedRequestedFlag = 0;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <UDS_verify_key+0xec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
		uint8_t responseFrame[] = {SECURITY_ACCESS + POSITIVE_RESPONSE_OFFSET, requestFrame[1]};
 8001b9c:	2367      	movs	r3, #103	; 0x67
 8001b9e:	753b      	strb	r3, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	757b      	strb	r3, [r7, #21]
		tcp_SendResponse(responseFrame, 2);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2102      	movs	r1, #2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe43 	bl	8001838 <tcp_SendResponse>
}
 8001bb2:	e028      	b.n	8001c06 <UDS_verify_key+0xe2>
		attemptsCount ++;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <UDS_verify_key+0xf8>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <UDS_verify_key+0xf8>)
 8001bbe:	701a      	strb	r2, [r3, #0]
		if(attemptsCount >= MAX_NUMBER_OF_ATTEMPTS)
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <UDS_verify_key+0xf8>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d90f      	bls.n	8001be8 <UDS_verify_key+0xc4>
			uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, EXTENDED_NUMBER_OF_ATTEMPTS};
 8001bc8:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <UDS_verify_key+0xfc>)
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	8019      	strh	r1, [r3, #0]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	0c12      	lsrs	r2, r2, #16
 8001bd8:	701a      	strb	r2, [r3, #0]
			tcp_SendResponse(responseFrame, 3);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	2103      	movs	r1, #3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe29 	bl	8001838 <tcp_SendResponse>
}
 8001be6:	e00e      	b.n	8001c06 <UDS_verify_key+0xe2>
			uint8_t responseFrame[] = {NEGATIVE_RESPONSE, SECURITY_ACCESS, INVALID_KEY};
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <UDS_verify_key+0x100>)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	8019      	strh	r1, [r3, #0]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	0c12      	lsrs	r2, r2, #16
 8001bf8:	701a      	strb	r2, [r3, #0]
			tcp_SendResponse(responseFrame, 3);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe19 	bl	8001838 <tcp_SendResponse>
}
 8001c06:	bf00      	nop
 8001c08:	3740      	adds	r7, #64	; 0x40
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200000c9 	.word	0x200000c9
 8001c14:	08018b64 	.word	0x08018b64
 8001c18:	20004e14 	.word	0x20004e14
 8001c1c:	200000ca 	.word	0x200000ca
 8001c20:	08018b68 	.word	0x08018b68
 8001c24:	08018b6c 	.word	0x08018b6c

08001c28 <UDS_call_routine>:


void UDS_call_routine(uint8_t *requestFrame) 
{ 
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if(currentAccessState != ACCESS_GRANTED)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <UDS_call_routine+0xb8>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d00f      	beq.n	8001c58 <UDS_call_routine+0x30>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ROUTINE_CONTROL, SECURITY_ACCESS_DENIED};
 8001c38:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <UDS_call_routine+0xbc>)
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4611      	mov	r1, r2
 8001c42:	8019      	strh	r1, [r3, #0]
 8001c44:	3302      	adds	r3, #2
 8001c46:	0c12      	lsrs	r2, r2, #16
 8001c48:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fdf1 	bl	8001838 <tcp_SendResponse>
 8001c56:	e03f      	b.n	8001cd8 <UDS_call_routine+0xb0>
		return;
	}

	//parse payload and jump to the appropriate function
	if(requestFrame[1] == RC_START_ROUTINE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d12b      	bne.n	8001cba <UDS_call_routine+0x92>
	{
		if(requestFrame[2] == 0xFF && requestFrame[3] == 0x00)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3302      	adds	r3, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2bff      	cmp	r3, #255	; 0xff
 8001c6a:	d108      	bne.n	8001c7e <UDS_call_routine+0x56>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <UDS_call_routine+0x56>
		{
			UDS_erase_memory_routine(requestFrame);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f83a 	bl	8001cf0 <UDS_erase_memory_routine>
 8001c7c:	e02c      	b.n	8001cd8 <UDS_call_routine+0xb0>
		}
		else if(requestFrame[2] == 0x02 && requestFrame[3] == 0x02)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3302      	adds	r3, #2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d108      	bne.n	8001c9a <UDS_call_routine+0x72>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3303      	adds	r3, #3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d103      	bne.n	8001c9a <UDS_call_routine+0x72>
		{
			UDS_check_memory_routine(requestFrame);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f85e 	bl	8001d54 <UDS_check_memory_routine>
 8001c98:	e01e      	b.n	8001cd8 <UDS_call_routine+0xb0>
		}
		else
		{
			uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ROUTINE_CONTROL, REQUEST_OUT_OF_RANGE};
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <UDS_call_routine+0xc0>)
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	8019      	strh	r1, [r3, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	0c12      	lsrs	r2, r2, #16
 8001caa:	701a      	strb	r2, [r3, #0]
			tcp_SendResponse(responseFrame, 3);
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fdc0 	bl	8001838 <tcp_SendResponse>
 8001cb8:	e00e      	b.n	8001cd8 <UDS_call_routine+0xb0>
		}
	}
	else
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ROUTINE_CONTROL, SUBFUNCTION_NOT_SUPPORTED};
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <UDS_call_routine+0xc4>)
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	8019      	strh	r1, [r3, #0]
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	0c12      	lsrs	r2, r2, #16
 8001cca:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fdb0 	bl	8001838 <tcp_SendResponse>
	}
} 
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200000c8 	.word	0x200000c8
 8001ce4:	08018b70 	.word	0x08018b70
 8001ce8:	08018b74 	.word	0x08018b74
 8001cec:	08018b78 	.word	0x08018b78

08001cf0 <UDS_erase_memory_routine>:

void UDS_erase_memory_routine(uint8_t *requestFrame) 
{ 
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	// erase inactive bank, and check status
	uint8_t errorState = erase_inactive_bank();
 8001cf8:	f7ff f8a6 	bl	8000e48 <erase_inactive_bank>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	73fb      	strb	r3, [r7, #15]

	// if error, send neg response
	if (errorState != SUCCEED) {
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d00f      	beq.n	8001d26 <UDS_erase_memory_routine+0x36>
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ROUTINE_CONTROL, CONDITIONS_NOT_CORRECT};
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <UDS_erase_memory_routine+0x60>)
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	8019      	strh	r1, [r3, #0]
 8001d12:	3302      	adds	r3, #2
 8001d14:	0c12      	lsrs	r2, r2, #16
 8001d16:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd8a 	bl	8001838 <tcp_SendResponse>
	//else, send positive response
	else {
		uint8_t responseFrame[] = {ROUTINE_CONTROL + POSITIVE_RESPONSE_OFFSET, requestFrame[1], requestFrame[2], requestFrame[3]};
		tcp_SendResponse(responseFrame, 4);
	}
} 
 8001d24:	e010      	b.n	8001d48 <UDS_erase_memory_routine+0x58>
		uint8_t responseFrame[] = {ROUTINE_CONTROL + POSITIVE_RESPONSE_OFFSET, requestFrame[1], requestFrame[2], requestFrame[3]};
 8001d26:	2371      	movs	r3, #113	; 0x71
 8001d28:	723b      	strb	r3, [r7, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	727b      	strb	r3, [r7, #9]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	789b      	ldrb	r3, [r3, #2]
 8001d34:	72bb      	strb	r3, [r7, #10]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	78db      	ldrb	r3, [r3, #3]
 8001d3a:	72fb      	strb	r3, [r7, #11]
		tcp_SendResponse(responseFrame, 4);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2104      	movs	r1, #4
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fd78 	bl	8001838 <tcp_SendResponse>
} 
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08018b7c 	.word	0x08018b7c

08001d54 <UDS_check_memory_routine>:

void UDS_check_memory_routine(uint8_t *requestFrame) 
{ 
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

} 
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <UDS_start_download>:

void UDS_start_download(uint8_t *requestFrame) 
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	// check access
	if (currentAccessState != ACCESS_GRANTED)
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <UDS_start_download+0x84>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d00f      	beq.n	8001d98 <UDS_start_download+0x30>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, REQUEST_DOWNLOAD, SECURITY_ACCESS_DENIED};
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <UDS_start_download+0x88>)
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4611      	mov	r1, r2
 8001d82:	8019      	strh	r1, [r3, #0]
 8001d84:	3302      	adds	r3, #2
 8001d86:	0c12      	lsrs	r2, r2, #16
 8001d88:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	2103      	movs	r1, #3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd51 	bl	8001838 <tcp_SendResponse>
 8001d96:	e025      	b.n	8001de4 <UDS_start_download+0x7c>
		return;
	}
	// save image size from frame
	downloadSize = (requestFrame[2]<<(8*2)) | (requestFrame[1]<<8) | requestFrame[0];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	4313      	orrs	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <UDS_start_download+0x8c>)
 8001db4:	601a      	str	r2, [r3, #0]

	// send response
	uint16_t packetSize = PACKET_SIZE;
 8001db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dba:	82fb      	strh	r3, [r7, #22]
	uint8_t packetSizeBytes[] = {((uint16_t)packetSize&(0xFF00))>>8, packetSize&(0x00FF)};
 8001dbc:	8afb      	ldrh	r3, [r7, #22]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	753b      	strb	r3, [r7, #20]
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	757b      	strb	r3, [r7, #21]

	uint8_t responseFrame[] = {REQUEST_DOWNLOAD + POSITIVE_RESPONSE_OFFSET, packetSizeBytes[0], packetSizeBytes[1]};
 8001dcc:	2374      	movs	r3, #116	; 0x74
 8001dce:	743b      	strb	r3, [r7, #16]
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	747b      	strb	r3, [r7, #17]
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	74bb      	strb	r3, [r7, #18]
	tcp_SendResponse(responseFrame, 3);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fd2a 	bl	8001838 <tcp_SendResponse>
} 
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000c8 	.word	0x200000c8
 8001df0:	08018b80 	.word	0x08018b80
 8001df4:	20004e10 	.word	0x20004e10

08001df8 <UDS_process_data>:

void UDS_process_data(uint8_t *requestFrame) 
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if (currentAccessState != ACCESS_GRANTED) {
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <UDS_process_data+0xcc>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00f      	beq.n	8001e28 <UDS_process_data+0x30>
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, TRANSFER_DATA, SECURITY_ACCESS_DENIED};
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <UDS_process_data+0xd0>)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	4611      	mov	r1, r2
 8001e12:	8019      	strh	r1, [r3, #0]
 8001e14:	3302      	adds	r3, #2
 8001e16:	0c12      	lsrs	r2, r2, #16
 8001e18:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2103      	movs	r1, #3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fd09 	bl	8001838 <tcp_SendResponse>
 8001e26:	e049      	b.n	8001ebc <UDS_process_data+0xc4>
		return;
	}
	uint8_t errorState;
	int dataSizeInWords;
	uint8_t *dataBytes = &requestFrame[1];
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
	uint32_t *dataWords;
	// decrement frame size from image size, and converting data array from bytes to words
	if (downloadSize >= PACKET_SIZE) {
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <UDS_process_data+0xd4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	d30d      	bcc.n	8001e54 <UDS_process_data+0x5c>
		downloadSize -= PACKET_SIZE;
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <UDS_process_data+0xd4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <UDS_process_data+0xd4>)
 8001e42:	6013      	str	r3, [r2, #0]
		dataSizeInWords = bytesToWords(dataBytes, PACKET_SIZE, dataWords);
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	69b8      	ldr	r0, [r7, #24]
 8001e4c:	f000 f8ce 	bl	8001fec <bytesToWords>
 8001e50:	61f8      	str	r0, [r7, #28]
 8001e52:	e007      	b.n	8001e64 <UDS_process_data+0x6c>
	} else {
		dataSizeInWords = bytesToWords(dataBytes, downloadSize, dataWords);
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <UDS_process_data+0xd4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	69b8      	ldr	r0, [r7, #24]
 8001e5e:	f000 f8c5 	bl	8001fec <bytesToWords>
 8001e62:	61f8      	str	r0, [r7, #28]
	}

	// flash
	errorState = flash_memory_write(dataWords, dataSizeInWords, APP); // always APP just for testing
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff f82c 	bl	8000ec8 <flash_memory_write>
 8001e70:	4603      	mov	r3, r0
 8001e72:	74fb      	strb	r3, [r7, #19]
	if (errorState == FAILED)
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <UDS_process_data+0xa2>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, TRANSFER_DATA, CONDITIONS_NOT_CORRECT};
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <UDS_process_data+0xd8>)
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4611      	mov	r1, r2
 8001e84:	8019      	strh	r1, [r3, #0]
 8001e86:	3302      	adds	r3, #2
 8001e88:	0c12      	lsrs	r2, r2, #16
 8001e8a:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2103      	movs	r1, #3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fcd0 	bl	8001838 <tcp_SendResponse>
 8001e98:	e010      	b.n	8001ebc <UDS_process_data+0xc4>
		return;
	}
	// calculate CRC, to check: reset at the start of each file ?
	CRC_result = HAL_CRC_Accumulate(&hcrc, dataWords, (uint32_t) dataSizeInWords);
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <UDS_process_data+0xdc>)
 8001ea2:	f000 fad5 	bl	8002450 <HAL_CRC_Accumulate>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <UDS_process_data+0xe0>)
 8001eaa:	6013      	str	r3, [r2, #0]

	// send response
	uint8_t responseFrame[] = {TRANSFER_DATA + POSITIVE_RESPONSE_OFFSET};
 8001eac:	2376      	movs	r3, #118	; 0x76
 8001eae:	743b      	strb	r3, [r7, #16]
	tcp_SendResponse(responseFrame, 1);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fcbe 	bl	8001838 <tcp_SendResponse>
} 
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200000c8 	.word	0x200000c8
 8001ec8:	08018b84 	.word	0x08018b84
 8001ecc:	20004e10 	.word	0x20004e10
 8001ed0:	08018b88 	.word	0x08018b88
 8001ed4:	20004c7c 	.word	0x20004c7c
 8001ed8:	20004e34 	.word	0x20004e34

08001edc <UDS_exit_download>:


void UDS_exit_download(uint8_t *requestFrame) 
{ 
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	// check access
	if (currentAccessState != ACCESS_GRANTED) {
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <UDS_exit_download+0x7c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d00f      	beq.n	8001f0c <UDS_exit_download+0x30>
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, REQUEST_TRANSFER_EXIT, SECURITY_ACCESS_DENIED};
 8001eec:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <UDS_exit_download+0x80>)
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	8019      	strh	r1, [r3, #0]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	0c12      	lsrs	r2, r2, #16
 8001efc:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fc97 	bl	8001838 <tcp_SendResponse>
 8001f0a:	e022      	b.n	8001f52 <UDS_exit_download+0x76>
		return;
	}

	// send response with final CRC
	uint8_t crcResult[] = {((uint32_t)CRC_result&(0xFF000000))>>(8*3), ((uint32_t)CRC_result&(0x00FF0000))>>(8*2), ((uint32_t)CRC_result&(0x0000FF00))>>8, CRC_result&(0x000000FF)};
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <UDS_exit_download+0x84>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e1b      	lsrs	r3, r3, #24
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	753b      	strb	r3, [r7, #20]
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <UDS_exit_download+0x84>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	757b      	strb	r3, [r7, #21]
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <UDS_exit_download+0x84>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	75bb      	strb	r3, [r7, #22]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <UDS_exit_download+0x84>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	75fb      	strb	r3, [r7, #23]
	uint8_t responseFrame[] = {REQUEST_TRANSFER_EXIT + POSITIVE_RESPONSE_OFFSET, crcResult[0], crcResult[1], crcResult[2], crcResult[3]};
 8001f32:	2377      	movs	r3, #119	; 0x77
 8001f34:	733b      	strb	r3, [r7, #12]
 8001f36:	7d3b      	ldrb	r3, [r7, #20]
 8001f38:	737b      	strb	r3, [r7, #13]
 8001f3a:	7d7b      	ldrb	r3, [r7, #21]
 8001f3c:	73bb      	strb	r3, [r7, #14]
 8001f3e:	7dbb      	ldrb	r3, [r7, #22]
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	743b      	strb	r3, [r7, #16]
	tcp_SendResponse(responseFrame, 5);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc73 	bl	8001838 <tcp_SendResponse>
}
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200000c8 	.word	0x200000c8
 8001f5c:	08018b8c 	.word	0x08018b8c
 8001f60:	20004e34 	.word	0x20004e34

08001f64 <UDS_reboot>:

void UDS_reboot(uint8_t *requestFrame) 
{ 
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	// check access
	if (currentAccessState != ACCESS_GRANTED)
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <UDS_reboot+0x7c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d00f      	beq.n	8001f94 <UDS_reboot+0x30>
	{
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ECU_RESET, SECURITY_ACCESS_DENIED};
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <UDS_reboot+0x80>)
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	8019      	strh	r1, [r3, #0]
 8001f80:	3302      	adds	r3, #2
 8001f82:	0c12      	lsrs	r2, r2, #16
 8001f84:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc53 	bl	8001838 <tcp_SendResponse>
 8001f92:	e021      	b.n	8001fd8 <UDS_reboot+0x74>
		return;
	}

	// check type of reset, if not soft reset, send neg resp. (sub function not supported)
	if (requestFrame[1] != ER_SOFT_RESET) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d00f      	beq.n	8001fbe <UDS_reboot+0x5a>
		uint8_t responseFrame[] = {NEGATIVE_RESPONSE, ECU_RESET, SUBFUNCTION_NOT_SUPPORTED};
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <UDS_reboot+0x84>)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	8019      	strh	r1, [r3, #0]
 8001faa:	3302      	adds	r3, #2
 8001fac:	0c12      	lsrs	r2, r2, #16
 8001fae:	701a      	strb	r2, [r3, #0]
		tcp_SendResponse(responseFrame, 3);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fc3e 	bl	8001838 <tcp_SendResponse>
 8001fbc:	e00c      	b.n	8001fd8 <UDS_reboot+0x74>
		return;
	}

	uint8_t responseFrame[] = {ECU_RESET + POSITIVE_RESPONSE_OFFSET, ER_SOFT_RESET};
 8001fbe:	f240 3351 	movw	r3, #849	; 0x351
 8001fc2:	82bb      	strh	r3, [r7, #20]
	tcp_SendResponse(responseFrame, 2);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc34 	bl	8001838 <tcp_SendResponse>

	// reboot
	bootloader_switch_to_inactive_bank();
 8001fd0:	f7fe ff1c 	bl	8000e0c <bootloader_switch_to_inactive_bank>
	bootloader_reboot();
 8001fd4:	f7fe ff34 	bl	8000e40 <bootloader_reboot>
}
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200000c8 	.word	0x200000c8
 8001fe4:	08018b90 	.word	0x08018b90
 8001fe8:	08018b94 	.word	0x08018b94

08001fec <bytesToWords>:

int bytesToWords(uint8_t* dataBytes, uint32_t dataSizeInBytes, uint32_t * dataWords) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	int i;
	int j;
	int dataSizeInWords;
	if (dataSizeInBytes%4 != 0) {
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d019      	beq.n	8002036 <bytesToWords+0x4a>
		dataSizeInWords = (int)((double)dataSizeInBytes/4 + 1);
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f7fe fa86 	bl	8000514 <__aeabi_ui2d>
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <bytesToWords+0xd8>)
 800200e:	f7fe fc25 	bl	800085c <__aeabi_ddiv>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <bytesToWords+0xdc>)
 8002020:	f7fe f93c 	bl	800029c <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fcfe 	bl	8000a2c <__aeabi_d2iz>
 8002030:	4603      	mov	r3, r0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e002      	b.n	800203c <bytesToWords+0x50>
	} else {
		dataSizeInWords = dataSizeInBytes/4;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	617b      	str	r3, [r7, #20]
	}

	int byteNum = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < dataSizeInWords; i++) {
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e029      	b.n	800209a <bytesToWords+0xae>
		for (j = 0; j < 4 && byteNum < dataSizeInBytes; j++) {
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e01c      	b.n	8002086 <bytesToWords+0x9a>
			dataWords[i] |= dataBytes[byteNum] << 8*(3-j);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	440b      	add	r3, r1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f1c3 0303 	rsb	r3, r3, #3
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4618      	mov	r0, r3
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	440b      	add	r3, r1
 8002076:	4302      	orrs	r2, r0
 8002078:	601a      	str	r2, [r3, #0]
			byteNum++;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	3301      	adds	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < 4 && byteNum < dataSizeInBytes; j++) {
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3301      	adds	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b03      	cmp	r3, #3
 800208a:	dc03      	bgt.n	8002094 <bytesToWords+0xa8>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8db      	bhi.n	800204c <bytesToWords+0x60>
	for (i = 0; i < dataSizeInWords; i++) {
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbd1      	blt.n	8002046 <bytesToWords+0x5a>
		}
	}
	// check if size in bytes is not divisible by 4, then pad with ones
	if (dataSizeInBytes%4 != 0) {
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <bytesToWords+0xcc>
		padWithOnes(dataSizeInBytes, dataWords, dataSizeInWords);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	461a      	mov	r2, r3
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f000 f80a 	bl	80020cc <padWithOnes>
	}
	return dataSizeInWords;
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40100000 	.word	0x40100000
 80020c8:	3ff00000 	.word	0x3ff00000

080020cc <padWithOnes>:

void padWithOnes(uint32_t dataSizeInBytes, uint32_t * dataWords, uint32_t dataSizeInWords) {
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int paddedBytesNum = 4 - (dataSizeInBytes%4);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	f1c3 0304 	rsb	r3, r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
	int i;
	for (i = 0; i < paddedBytesNum; i++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e019      	b.n	800211e <padWithOnes+0x52>
		dataWords[dataSizeInWords-1] |= 0xFF<<(8*i);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020f0:	3b01      	subs	r3, #1
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	21ff      	movs	r1, #255	; 0xff
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4618      	mov	r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210c:	3b01      	subs	r3, #1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	440b      	add	r3, r1
 8002114:	4302      	orrs	r2, r0
 8002116:	601a      	str	r2, [r3, #0]
	for (i = 0; i < paddedBytesNum; i++) {
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbe1      	blt.n	80020ea <padWithOnes+0x1e>
	}
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800213a:	e003      	b.n	8002144 <LoopCopyDataInit>

0800213c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800213e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002142:	3104      	adds	r1, #4

08002144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800214a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800214c:	d3f6      	bcc.n	800213c <CopyDataInit>
  ldr  r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002150:	e002      	b.n	8002158 <LoopFillZerobss>

08002152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002154:	f842 3b04 	str.w	r3, [r2], #4

08002158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800215a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800215c:	d3f9      	bcc.n	8002152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800215e:	f7ff facf 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f015 fcc1 	bl	8017ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7fe ff13 	bl	8000f90 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800216c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002170:	0801c3b8 	.word	0x0801c3b8
  ldr  r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002178:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800217c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002180:	2000b744 	.word	0x2000b744

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f000 f8fc 	bl	80023ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff f950 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff f8c8 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	20004e38 	.word	0x20004e38

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20004e38 	.word	0x20004e38

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000000c 	.word	0x2000000c

08002254 <__NVIC_SetPriorityGrouping>:
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff4c 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d6:	f7ff ff61 	bl	800229c <__NVIC_GetPriorityGrouping>
 80023da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7ff ffb1 	bl	8002348 <NVIC_EncodePriority>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff80 	bl	80022f4 <__NVIC_SetPriority>
}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff54 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00e      	b.n	8002448 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	795b      	ldrb	r3, [r3, #5]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe ffb0 	bl	80013a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2202      	movs	r2, #2
 8002464:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e00a      	b.n	8002482 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	441a      	add	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d3f0      	bcc.n	800246c <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002498:	693b      	ldr	r3, [r7, #16]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024b8:	4baa      	ldr	r3, [pc, #680]	; (8002764 <HAL_ETH_Init+0x2bc>)
 80024ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e183      	b.n	80027d6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f003 fbbc 	bl	8005c60 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b9e      	ldr	r3, [pc, #632]	; (8002768 <HAL_ETH_Init+0x2c0>)
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	4a9d      	ldr	r2, [pc, #628]	; (8002768 <HAL_ETH_Init+0x2c0>)
 80024f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f6:	6453      	str	r3, [r2, #68]	; 0x44
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <HAL_ETH_Init+0x2c0>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002504:	4b99      	ldr	r3, [pc, #612]	; (800276c <HAL_ETH_Init+0x2c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_ETH_Init+0x2c4>)
 800250a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800250e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002510:	4b96      	ldr	r3, [pc, #600]	; (800276c <HAL_ETH_Init+0x2c4>)
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4994      	ldr	r1, [pc, #592]	; (800276c <HAL_ETH_Init+0x2c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002534:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002536:	f7ff fe5d 	bl	80021f4 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800253c:	e011      	b.n	8002562 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800253e:	f7ff fe59 	bl	80021f4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800254c:	d909      	bls.n	8002562 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e139      	b.n	80027d6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e4      	bne.n	800253e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f023 031c 	bic.w	r3, r3, #28
 8002582:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002584:	f002 ff02 	bl	800538c <HAL_RCC_GetHCLKFreq>
 8002588:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4a78      	ldr	r2, [pc, #480]	; (8002770 <HAL_ETH_Init+0x2c8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <HAL_ETH_Init+0xfc>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4a77      	ldr	r2, [pc, #476]	; (8002774 <HAL_ETH_Init+0x2cc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d804      	bhi.n	80025a4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e027      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4a73      	ldr	r2, [pc, #460]	; (8002774 <HAL_ETH_Init+0x2cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d908      	bls.n	80025be <HAL_ETH_Init+0x116>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_ETH_Init+0x2bc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d204      	bcs.n	80025be <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f043 030c 	orr.w	r3, r3, #12
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e01a      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4a68      	ldr	r2, [pc, #416]	; (8002764 <HAL_ETH_Init+0x2bc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d303      	bcc.n	80025ce <HAL_ETH_Init+0x126>
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <HAL_ETH_Init+0x2d0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d911      	bls.n	80025f2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_ETH_Init+0x2d0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d908      	bls.n	80025e8 <HAL_ETH_Init+0x140>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4a68      	ldr	r2, [pc, #416]	; (800277c <HAL_ETH_Init+0x2d4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d804      	bhi.n	80025e8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	e000      	b.n	80025f4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025f2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fc17 	bl	8002e36 <HAL_ETH_WritePHYRegister>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fdcd 	bl	80031b4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0d7      	b.n	80027d6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002626:	20ff      	movs	r0, #255	; 0xff
 8002628:	f7ff fdf0 	bl	800220c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a5 	beq.w	8002780 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002636:	f7ff fddd 	bl	80021f4 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	461a      	mov	r2, r3
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fb8e 	bl	8002d66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800264a:	f7ff fdd3 	bl	80021f4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d90f      	bls.n	800267c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fda6 	bl	80031b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0ac      	b.n	80027d6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0da      	beq.n	800263c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fbd2 	bl	8002e36 <HAL_ETH_WritePHYRegister>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fd88 	bl	80031b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026ac:	2301      	movs	r3, #1
 80026ae:	e092      	b.n	80027d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80026b0:	f7ff fda0 	bl	80021f4 <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	461a      	mov	r2, r3
 80026bc:	2101      	movs	r1, #1
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb51 	bl	8002d66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80026c4:	f7ff fd96 	bl	80021f4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d90f      	bls.n	80026f6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026da:	6939      	ldr	r1, [r7, #16]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fd69 	bl	80031b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e06f      	b.n	80027d6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0da      	beq.n	80026b6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	461a      	mov	r2, r3
 8002706:	211f      	movs	r1, #31
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fb2c 	bl	8002d66 <HAL_ETH_ReadPHYRegister>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fd4a 	bl	80031b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002728:	2301      	movs	r3, #1
 800272a:	e054      	b.n	80027d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e002      	b.n	8002746 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	e035      	b.n	80027c4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e030      	b.n	80027c4 <HAL_ETH_Init+0x31c>
 8002762:	bf00      	nop
 8002764:	03938700 	.word	0x03938700
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	01312cff 	.word	0x01312cff
 8002774:	02160ebf 	.word	0x02160ebf
 8002778:	05f5e0ff 	.word	0x05f5e0ff
 800277c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002790:	4313      	orrs	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	2100      	movs	r1, #0
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fb4c 	bl	8002e36 <HAL_ETH_WritePHYRegister>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fd02 	bl	80031b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e00c      	b.n	80027d6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027c0:	f7ff fd24 	bl	800220c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027c4:	6939      	ldr	r1, [r7, #16]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fcf4 	bl	80031b4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ETH_DMATxDescListInit+0x20>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e052      	b.n	80028a6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e030      	b.n	800287e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4413      	add	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800282c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	461a      	mov	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	d208      	bcs.n	8002872 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	461a      	mov	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	e002      	b.n	8002878 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3ca      	bcc.n	800281c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002890:	3310      	adds	r3, #16
 8002892:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ETH_DMARxDescListInit+0x20>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e056      	b.n	8002980 <HAL_ETH_DMARxDescListInit+0xce>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e034      	b.n	8002958 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4413      	add	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028fe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002906:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	461a      	mov	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4413      	add	r3, r2
 8002944:	461a      	mov	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e002      	b.n	8002952 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d3c6      	bcc.n	80028ee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296a:	330c      	adds	r3, #12
 800296c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_ETH_TransmitFrame+0x24>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0cd      	b.n	8002b4c <HAL_ETH_TransmitFrame+0x1c0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0b8      	b.n	8002b4c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da09      	bge.n	80029f8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2212      	movs	r2, #18
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0a9      	b.n	8002b4c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d915      	bls.n	8002a2e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a12:	fba3 1302 	umull	r1, r3, r3, r2
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e001      	b.n	8002a32 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d11c      	bne.n	8002a72 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a46:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a52:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a62:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a70:	e04b      	b.n	8002b0a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e044      	b.n	8002b02 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a86:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a9c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002aa6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d116      	bne.n	8002ae0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ac0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_ETH_TransmitFrame+0x1d0>)
 8002ac6:	fb02 f203 	mul.w	r2, r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002ad2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ade:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3301      	adds	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3b6      	bcc.n	8002a78 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	3314      	adds	r3, #20
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b26:	3314      	adds	r3, #20
 8002b28:	2204      	movs	r2, #4
 8002b2a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	3304      	adds	r3, #4
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	ac02b00b 	.word	0xac02b00b
 8002b5c:	fffffa0c 	.word	0xfffffa0c

08002b60 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e074      	b.n	8002c64 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002b8a:	e05a      	b.n	8002c42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba0:	d10d      	bne.n	8002bbe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
 8002bbc:	e041      	b.n	8002c42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
 8002be2:	e02e      	b.n	8002c42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d103      	bne.n	8002c06 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c12:	1f1a      	subs	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e010      	b.n	8002c64 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db02      	blt.n	8002c52 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d99c      	bls.n	8002b8c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c80:	3314      	adds	r3, #20
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d112      	bne.n	8002cb2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f003 f8b5 	bl	8005dfc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	2240      	movs	r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cb0:	e01b      	b.n	8002cea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	3314      	adds	r3, #20
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d111      	bne.n	8002cea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f839 	bl	8002d3e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	3314      	adds	r3, #20
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d112      	bne.n	8002d36 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f81e 	bl	8002d52 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1e:	3314      	adds	r3, #20
 8002d20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d24:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b82      	cmp	r3, #130	; 0x82
 8002d86:	d101      	bne.n	8002d8c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e050      	b.n	8002e2e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2282      	movs	r2, #130	; 0x82
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 031c 	and.w	r3, r3, #28
 8002da2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8a1b      	ldrh	r3, [r3, #16]
 8002da8:	02db      	lsls	r3, r3, #11
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0302 	bic.w	r3, r3, #2
 8002dc6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd8:	f7ff fa0c 	bl	80021f4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dde:	e015      	b.n	8002e0c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002de0:	f7ff fa08 	bl	80021f4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d309      	bcc.n	8002e04 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e014      	b.n	8002e2e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e4      	bne.n	8002de0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b42      	cmp	r3, #66	; 0x42
 8002e56:	d101      	bne.n	8002e5c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e04e      	b.n	8002efa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2242      	movs	r2, #66	; 0x42
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 031c 	and.w	r3, r3, #28
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8a1b      	ldrh	r3, [r3, #16]
 8002e78:	02db      	lsls	r3, r3, #11
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb2:	f7ff f99f 	bl	80021f4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002eb8:	e015      	b.n	8002ee6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002eba:	f7ff f99b 	bl	80021f4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d309      	bcc.n	8002ede <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e00d      	b.n	8002efa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e4      	bne.n	8002eba <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_ETH_Start+0x16>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e01f      	b.n	8002f58 <HAL_ETH_Start+0x56>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fb45 	bl	80035b8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fb7c 	bl	800362c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fc13 	bl	8003760 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fbb0 	bl	80036a0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fbdd 	bl	8003700 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_ETH_Stop+0x16>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e01f      	b.n	8002fb6 <HAL_ETH_Stop+0x56>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fba2 	bl	80036d0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fbcf 	bl	8003730 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fb67 	bl	8003666 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fbe1 	bl	8003760 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb27 	bl	80035f2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ETH_ConfigMAC+0x1c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0e4      	b.n	80031a6 <HAL_ETH_ConfigMAC+0x1e6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80b1 	beq.w	8003156 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_ETH_ConfigMAC+0x1f0>)
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800300c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003012:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003018:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800301e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003024:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800302a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003030:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003036:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800303c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003042:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003048:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800304e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003066:	2001      	movs	r0, #1
 8003068:	f7ff f8d0 	bl	800220c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800307c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003082:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003088:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800308e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003094:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800309a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80030a6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030a8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7ff f8aa 	bl	800220c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030c8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030d2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030f0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80030f6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80030fc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003102:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003108:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003120:	2001      	movs	r0, #1
 8003122:	f7ff f873 	bl	800220c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003146:	2001      	movs	r0, #1
 8003148:	f7ff f860 	bl	800220c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	61da      	str	r2, [r3, #28]
 8003154:	e01e      	b.n	8003194 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003164:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003186:	2001      	movs	r0, #1
 8003188:	f7ff f840 	bl	800220c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	ff20810f 	.word	0xff20810f

080031b4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0b0      	sub	sp, #192	; 0xc0
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80031e2:	2300      	movs	r3, #0
 80031e4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003200:	e001      	b.n	8003206 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003210:	2300      	movs	r3, #0
 8003212:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003288:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328c:	4bac      	ldr	r3, [pc, #688]	; (8003540 <ETH_MACDMAConfig+0x38c>)
 800328e:	4013      	ands	r3, r2
 8003290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003294:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003298:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800329a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800329c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80032a0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80032a6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80032a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80032aa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80032ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80032ae:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80032b4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80032b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80032b8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80032ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80032bc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80032be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80032c0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80032c4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80032c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80032c8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f7fe ff8f 	bl	800220c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032fc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003300:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003306:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800330c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800330e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003312:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003318:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800331c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003324:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003326:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003332:	2001      	movs	r0, #1
 8003334:	f7fe ff6a 	bl	800220c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003340:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800334a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003354:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003364:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003368:	4013      	ands	r3, r2
 800336a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800336e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003372:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003378:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800337a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800337e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003384:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800338a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800338c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003390:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003392:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b0:	2001      	movs	r0, #1
 80033b2:	f7fe ff2b 	bl	800220c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033be:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80033c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033da:	2001      	movs	r0, #1
 80033dc:	f7fe ff16 	bl	800220c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033e8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033fc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800340e:	2304      	movs	r3, #4
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800341e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800342e:	2300      	movs	r3, #0
 8003430:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003432:	2300      	movs	r3, #0
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343e:	3318      	adds	r3, #24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003446:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <ETH_MACDMAConfig+0x390>)
 800344c:	4013      	ands	r3, r2
 800344e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003452:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003454:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003456:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003458:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800345a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800345c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800345e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003460:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003462:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003464:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003466:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003468:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800346a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800346e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003472:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003486:	3318      	adds	r3, #24
 8003488:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800348c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003496:	3318      	adds	r3, #24
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fe feb4 	bl	800220c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ac:	3318      	adds	r3, #24
 80034ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80034bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80034c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80034ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80034cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034ce:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034dc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7fe fe8d 	bl	800220c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034fe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10f      	bne.n	8003528 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	331c      	adds	r3, #28
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800351c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003524:	331c      	adds	r3, #28
 8003526:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	461a      	mov	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f809 	bl	8003548 <ETH_MACAddressConfig>
}
 8003536:	bf00      	nop
 8003538:	37c0      	adds	r7, #192	; 0xc0
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	ff20810f 	.word	0xff20810f
 8003544:	f8de3f23 	.word	0xf8de3f23

08003548 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3305      	adds	r3, #5
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	3204      	adds	r2, #4
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <ETH_MACAddressConfig+0x68>)
 800356a:	4413      	add	r3, r2
 800356c:	461a      	mov	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3303      	adds	r3, #3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	061a      	lsls	r2, r3, #24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3302      	adds	r3, #2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3301      	adds	r3, #1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	4313      	orrs	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <ETH_MACAddressConfig+0x6c>)
 800359a:	4413      	add	r3, r2
 800359c:	461a      	mov	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40028040 	.word	0x40028040
 80035b4:	40028044 	.word	0x40028044

080035b8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035dc:	2001      	movs	r0, #1
 80035de:	f000 f8e9 	bl	80037b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0208 	bic.w	r2, r2, #8
 800360c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003616:	2001      	movs	r0, #1
 8003618:	f000 f8cc 	bl	80037b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0204 	orr.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003650:	2001      	movs	r0, #1
 8003652:	f000 f8af 	bl	80037b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0204 	bic.w	r2, r2, #4
 8003680:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800368a:	2001      	movs	r0, #1
 800368c:	f000 f892 	bl	80037b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	3318      	adds	r3, #24
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c0:	3318      	adds	r3, #24
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	3318      	adds	r3, #24
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	3318      	adds	r3, #24
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	3318      	adds	r3, #24
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0202 	orr.w	r2, r2, #2
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	3318      	adds	r3, #24
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003740:	3318      	adds	r3, #24
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0202 	bic.w	r2, r2, #2
 800374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003750:	3318      	adds	r3, #24
 8003752:	601a      	str	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003774:	3318      	adds	r3, #24
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003784:	3318      	adds	r3, #24
 8003786:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	3318      	adds	r3, #24
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003796:	2001      	movs	r0, #1
 8003798:	f000 f80c 	bl	80037b4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a6:	3318      	adds	r3, #24
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <ETH_Delay+0x38>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <ETH_Delay+0x3c>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0a5b      	lsrs	r3, r3, #9
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80037d0:	bf00      	nop
  } 
  while (Delay --);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	60fa      	str	r2, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <ETH_Delay+0x1c>
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000000 	.word	0x20000000
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_FLASH_Program+0xa0>)
 8003808:	7e1b      	ldrb	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_FLASH_Program+0x1e>
 800380e:	2302      	movs	r3, #2
 8003810:	e03b      	b.n	800388a <HAL_FLASH_Program+0x96>
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_FLASH_Program+0xa0>)
 8003814:	2201      	movs	r2, #1
 8003816:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003818:	f24c 3050 	movw	r0, #50000	; 0xc350
 800381c:	f000 f8b0 	bl	8003980 <FLASH_WaitForLastOperation>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d12b      	bne.n	8003882 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003830:	783b      	ldrb	r3, [r7, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	68b8      	ldr	r0, [r7, #8]
 8003836:	f000 f95b 	bl	8003af0 <FLASH_Program_Byte>
 800383a:	e016      	b.n	800386a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003842:	883b      	ldrh	r3, [r7, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	68b8      	ldr	r0, [r7, #8]
 8003848:	f000 f92e 	bl	8003aa8 <FLASH_Program_HalfWord>
 800384c:	e00d      	b.n	800386a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d105      	bne.n	8003860 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	68b8      	ldr	r0, [r7, #8]
 800385a:	f000 f903 	bl	8003a64 <FLASH_Program_Word>
 800385e:	e004      	b.n	800386a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f000 f8cb 	bl	8003a00 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800386a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800386e:	f000 f887 	bl	8003980 <FLASH_WaitForLastOperation>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_FLASH_Program+0xa4>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_FLASH_Program+0xa4>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_FLASH_Program+0xa0>)
 8003884:	2200      	movs	r2, #0
 8003886:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20004e3c 	.word	0x20004e3c
 8003898:	40023c00 	.word	0x40023c00

0800389c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_FLASH_Unlock+0x38>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da0b      	bge.n	80038c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_FLASH_Unlock+0x38>)
 80038b0:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_FLASH_Unlock+0x3c>)
 80038b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_FLASH_Unlock+0x38>)
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_FLASH_Unlock+0x40>)
 80038b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_FLASH_Unlock+0x38>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da01      	bge.n	80038c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80038c6:	79fb      	ldrb	r3, [r7, #7]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	45670123 	.word	0x45670123
 80038dc:	cdef89ab 	.word	0xcdef89ab

080038e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_FLASH_Lock+0x1c>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_FLASH_Lock+0x1c>)
 80038ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40023c00 	.word	0x40023c00

08003900 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_FLASH_OB_Unlock+0x2c>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_FLASH_OB_Unlock+0x2c>)
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_FLASH_OB_Unlock+0x30>)
 8003914:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_FLASH_OB_Unlock+0x2c>)
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <HAL_FLASH_OB_Unlock+0x34>)
 800391a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40023c00 	.word	0x40023c00
 8003930:	08192a3b 	.word	0x08192a3b
 8003934:	4c5d6e7f 	.word	0x4c5d6e7f

08003938 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_FLASH_OB_Lock+0x1c>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4a04      	ldr	r2, [pc, #16]	; (8003954 <HAL_FLASH_OB_Lock+0x1c>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40023c00 	.word	0x40023c00

08003958 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_FLASH_OB_Launch+0x24>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4a06      	ldr	r2, [pc, #24]	; (800397c <HAL_FLASH_OB_Launch+0x24>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800396c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003970:	f000 f806 	bl	8003980 <FLASH_WaitForLastOperation>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c14 	.word	0x40023c14

08003980 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <FLASH_WaitForLastOperation+0x78>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003992:	f7fe fc2f 	bl	80021f4 <HAL_GetTick>
 8003996:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003998:	e010      	b.n	80039bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d00c      	beq.n	80039bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <FLASH_WaitForLastOperation+0x38>
 80039a8:	f7fe fc24 	bl	80021f4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d201      	bcs.n	80039bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e019      	b.n	80039f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <FLASH_WaitForLastOperation+0x7c>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e8      	bne.n	800399a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <FLASH_WaitForLastOperation+0x7c>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <FLASH_WaitForLastOperation+0x7c>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <FLASH_WaitForLastOperation+0x7c>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80039e6:	f000 f8a5 	bl	8003b34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
  
}  
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20004e3c 	.word	0x20004e3c
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <FLASH_Program_DoubleWord+0x60>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003a36:	f3bf 8f6f 	isb	sy
}
 8003a3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	000a      	movs	r2, r1
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	68f9      	ldr	r1, [r7, #12]
 8003a4e:	3104      	adds	r1, #4
 8003a50:	4613      	mov	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40023c00 	.word	0x40023c00

08003a64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <FLASH_Program_Word+0x40>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40023c00 	.word	0x40023c00

08003aa8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <FLASH_Program_HalfWord+0x44>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	801a      	strh	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00

08003af0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <FLASH_Program_Byte+0x40>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	701a      	strb	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00

08003b34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b4e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b52:	2210      	movs	r2, #16
 8003b54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003b56:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003b62:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f043 0308 	orr.w	r3, r3, #8
 8003b6a:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b6c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003b6e:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b70:	2220      	movs	r2, #32
 8003b72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003b8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f043 0302 	orr.w	r3, r3, #2
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003ba8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003bc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f043 0320 	orr.w	r3, r3, #32
 8003be4:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <FLASH_SetErrorCode+0xc8>)
 8003be6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <FLASH_SetErrorCode+0xc4>)
 8003bea:	2202      	movs	r2, #2
 8003bec:	60da      	str	r2, [r3, #12]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	20004e3c 	.word	0x20004e3c

08003c00 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c12:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_FLASHEx_Erase+0xdc>)
 8003c14:	7e1b      	ldrb	r3, [r3, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_FLASHEx_Erase+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e05a      	b.n	8003cd4 <HAL_FLASHEx_Erase+0xd4>
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_FLASHEx_Erase+0xdc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c28:	f7ff feaa 	bl	8003980 <FLASH_WaitForLastOperation>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d14a      	bne.n	8003ccc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d117      	bne.n	8003c76 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 f846 	bl	8003ce4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c5c:	f7ff fe90 	bl	8003980 <FLASH_WaitForLastOperation>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HAL_FLASHEx_Erase+0xe0>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_FLASHEx_Erase+0xe0>)
 8003c6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6113      	str	r3, [r2, #16]
 8003c74:	e028      	b.n	8003cc8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	e01c      	b.n	8003cb8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	68b8      	ldr	r0, [r7, #8]
 8003c88:	f000 f866 	bl	8003d58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c90:	f7ff fe76 	bl	8003980 <FLASH_WaitForLastOperation>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_FLASHEx_Erase+0xe0>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_FLASHEx_Erase+0xe0>)
 8003c9e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ca2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	601a      	str	r2, [r3, #0]
          break;
 8003cb0:	e00a      	b.n	8003cc8 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3da      	bcc.n	8003c7e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003cc8:	f000 f894 	bl	8003df4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <HAL_FLASHEx_Erase+0xdc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	761a      	strb	r2, [r3, #24]

  return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20004e3c 	.word	0x20004e3c
 8003ce0:	40023c00 	.word	0x40023c00

08003ce4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <FLASH_MassErase+0x70>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <FLASH_MassErase+0x70>)
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfa:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d108      	bne.n	8003d14 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	6113      	str	r3, [r2, #16]
 8003d12:	e00f      	b.n	8003d34 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d106      	bne.n	8003d28 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6113      	str	r3, [r2, #16]
 8003d26:	e005      	b.n	8003d34 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <FLASH_MassErase+0x70>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6113      	str	r3, [r2, #16]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e010      	b.n	8003d96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d103      	bne.n	8003d82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e009      	b.n	8003d96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d103      	bne.n	8003d90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e002      	b.n	8003d96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b0b      	cmp	r3, #11
 8003d9a:	d902      	bls.n	8003da2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	490f      	ldr	r1, [pc, #60]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003dc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <FLASH_Erase_Sector+0x98>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6113      	str	r3, [r2, #16]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40023c00 	.word	0x40023c00

08003df4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e28:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e32:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e62:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <FLASH_FlushCaches+0x88>)
 8003e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6e:	6013      	str	r3, [r2, #0]
  }
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40023c00 	.word	0x40023c00

08003e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	e177      	b.n	800418c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f040 8166 	bne.w	8004186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d00b      	beq.n	8003eda <HAL_GPIO_Init+0x5a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d007      	beq.n	8003eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ece:	2b11      	cmp	r3, #17
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b12      	cmp	r3, #18
 8003ed8:	d130      	bne.n	8003f3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f10:	2201      	movs	r2, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 0201 	and.w	r2, r3, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_Init+0xfc>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b12      	cmp	r3, #18
 8003f7a:	d123      	bne.n	8003fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80c0 	beq.w	8004186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_GPIO_Init+0x324>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_GPIO_Init+0x324>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004014:	6453      	str	r3, [r2, #68]	; 0x44
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_GPIO_Init+0x324>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004022:	4a61      	ldr	r2, [pc, #388]	; (80041a8 <HAL_GPIO_Init+0x328>)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_GPIO_Init+0x32c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d037      	beq.n	80040be <HAL_GPIO_Init+0x23e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a57      	ldr	r2, [pc, #348]	; (80041b0 <HAL_GPIO_Init+0x330>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d031      	beq.n	80040ba <HAL_GPIO_Init+0x23a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a56      	ldr	r2, [pc, #344]	; (80041b4 <HAL_GPIO_Init+0x334>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02b      	beq.n	80040b6 <HAL_GPIO_Init+0x236>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a55      	ldr	r2, [pc, #340]	; (80041b8 <HAL_GPIO_Init+0x338>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d025      	beq.n	80040b2 <HAL_GPIO_Init+0x232>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a54      	ldr	r2, [pc, #336]	; (80041bc <HAL_GPIO_Init+0x33c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <HAL_GPIO_Init+0x22e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a53      	ldr	r2, [pc, #332]	; (80041c0 <HAL_GPIO_Init+0x340>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x22a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_GPIO_Init+0x344>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x226>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a51      	ldr	r2, [pc, #324]	; (80041c8 <HAL_GPIO_Init+0x348>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x222>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a50      	ldr	r2, [pc, #320]	; (80041cc <HAL_GPIO_Init+0x34c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x21e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4f      	ldr	r2, [pc, #316]	; (80041d0 <HAL_GPIO_Init+0x350>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x21a>
 8004096:	2309      	movs	r3, #9
 8004098:	e012      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 800409a:	230a      	movs	r3, #10
 800409c:	e010      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 800409e:	2308      	movs	r3, #8
 80040a0:	e00e      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040a2:	2307      	movs	r3, #7
 80040a4:	e00c      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040a6:	2306      	movs	r3, #6
 80040a8:	e00a      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040aa:	2305      	movs	r3, #5
 80040ac:	e008      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040ae:	2304      	movs	r3, #4
 80040b0:	e006      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e004      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e002      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_GPIO_Init+0x240>
 80040be:	2300      	movs	r3, #0
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	f002 0203 	and.w	r2, r2, #3
 80040c6:	0092      	lsls	r2, r2, #2
 80040c8:	4093      	lsls	r3, r2
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d0:	4935      	ldr	r1, [pc, #212]	; (80041a8 <HAL_GPIO_Init+0x328>)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040de:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_GPIO_Init+0x354>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004102:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <HAL_GPIO_Init+0x354>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_GPIO_Init+0x354>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <HAL_GPIO_Init+0x354>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_GPIO_Init+0x354>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004156:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_GPIO_Init+0x354>)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_GPIO_Init+0x354>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_GPIO_Init+0x354>)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	f67f ae84 	bls.w	8003e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40013800 	.word	0x40013800
 80041ac:	40020000 	.word	0x40020000
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020800 	.word	0x40020800
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40021400 	.word	0x40021400
 80041c4:	40021800 	.word	0x40021800
 80041c8:	40021c00 	.word	0x40021c00
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40022400 	.word	0x40022400
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
 80041e4:	4613      	mov	r3, r2
 80041e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e8:	787b      	ldrb	r3, [r7, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f4:	e003      	b.n	80041fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if(hhash == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e043      	b.n	80042a6 <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if(hhash->State == HAL_HASH_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f8d6 	bl	80013e4 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

    /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_HASH_Init+0xa4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <HAL_HASH_Init+0xa4>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
#if defined(HASH_CR_MDMAT)
  /* Reset MDMAT bit */
__HAL_HASH_RESET_MDMAT();
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_HASH_Init+0xa4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <HAL_HASH_Init+0xa4>)
 8004288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428c:	6013      	str	r3, [r2, #0]
#endif
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	50060400 	.word	0x50060400

080042b4 <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	613b      	str	r3, [r7, #16]

  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e057      	b.n	800437a <HASH_WriteData+0xc6>
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t*)inputaddr;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4a30      	ldr	r2, [pc, #192]	; (8004390 <HASH_WriteData+0xdc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6053      	str	r3, [r2, #4]
    inputaddr+=4U;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3304      	adds	r3, #4
 80042d6:	613b      	str	r3, [r7, #16]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d148      	bne.n	8004374 <HASH_WriteData+0xc0>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3304      	adds	r3, #4
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d943      	bls.n	8004374 <HASH_WriteData+0xc0>
    {
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 80042ec:	4b28      	ldr	r3, [pc, #160]	; (8004390 <HASH_WriteData+0xdc>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d13d      	bne.n	8004374 <HASH_WriteData+0xc0>
      {
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004306:	2b02      	cmp	r3, #2
 8004308:	d004      	beq.n	8004314 <HASH_WriteData+0x60>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004310:	2b04      	cmp	r3, #4
 8004312:	d10a      	bne.n	800432a <HASH_WriteData+0x76>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	60da      	str	r2, [r3, #12]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	1f1a      	subs	r2, r3, #4
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	621a      	str	r2, [r3, #32]
 8004328:	e01e      	b.n	8004368 <HASH_WriteData+0xb4>
        }
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004330:	2b03      	cmp	r3, #3
 8004332:	d004      	beq.n	800433e <HASH_WriteData+0x8a>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800433a:	2b05      	cmp	r3, #5
 800433c:	d10a      	bne.n	8004354 <HASH_WriteData+0xa0>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashKeyBuffPtr  =  (uint8_t *)inputaddr;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	461a      	mov	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	615a      	str	r2, [r3, #20]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	1f1a      	subs	r2, r3, #4
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	629a      	str	r2, [r3, #40]	; 0x28
 8004352:	e009      	b.n	8004368 <HASH_WriteData+0xb4>
        }
        else
        {
          /* Unexpected phase: unlock process and report error */
          hhash->State = HAL_HASH_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e00d      	b.n	8004384 <HASH_WriteData+0xd0>
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2208      	movs	r2, #8
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e007      	b.n	8004384 <HASH_WriteData+0xd0>
  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3304      	adds	r3, #4
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3a3      	bcc.n	80042ca <HASH_WriteData+0x16>
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	50060400 	.word	0x50060400

08004394 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
 8004394:	b480      	push	{r7}
 8004396:	b09d      	sub	sp, #116	; 0x74
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch(Size)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	3b10      	subs	r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	f200 810d 	bhi.w	80045c8 <HASH_GetDigest+0x234>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HASH_GetDigest+0x20>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	080045c9 	.word	0x080045c9
 80043bc:	080045c9 	.word	0x080045c9
 80043c0:	080045c9 	.word	0x080045c9
 80043c4:	08004445 	.word	0x08004445
 80043c8:	080045c9 	.word	0x080045c9
 80043cc:	080045c9 	.word	0x080045c9
 80043d0:	080045c9 	.word	0x080045c9
 80043d4:	080045c9 	.word	0x080045c9
 80043d8:	080045c9 	.word	0x080045c9
 80043dc:	080045c9 	.word	0x080045c9
 80043e0:	080045c9 	.word	0x080045c9
 80043e4:	080044a5 	.word	0x080044a5
 80043e8:	080045c9 	.word	0x080045c9
 80043ec:	080045c9 	.word	0x080045c9
 80043f0:	080045c9 	.word	0x080045c9
 80043f4:	0800452d 	.word	0x0800452d
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 80043f8:	4b77      	ldr	r3, [pc, #476]	; (80045d8 <HASH_GetDigest+0x244>)
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	65fa      	str	r2, [r7, #92]	; 0x5c
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8004400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004402:	ba12      	rev	r2, r2
 8004404:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	3304      	adds	r3, #4
 800440a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800440c:	4b72      	ldr	r3, [pc, #456]	; (80045d8 <HASH_GetDigest+0x244>)
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	663a      	str	r2, [r7, #96]	; 0x60
 8004414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004416:	ba12      	rev	r2, r2
 8004418:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	3304      	adds	r3, #4
 800441e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 8004420:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HASH_GetDigest+0x244>)
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	667a      	str	r2, [r7, #100]	; 0x64
 8004428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800442a:	ba12      	rev	r2, r2
 800442c:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	3304      	adds	r3, #4
 8004432:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HASH_GetDigest+0x244>)
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	66ba      	str	r2, [r7, #104]	; 0x68
 800443c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800443e:	ba12      	rev	r2, r2
 8004440:	601a      	str	r2, [r3, #0]
    break;
 8004442:	e0c2      	b.n	80045ca <HASH_GetDigest+0x236>
    case 20:  /* SHA1 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 8004444:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <HASH_GetDigest+0x244>)
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	64ba      	str	r2, [r7, #72]	; 0x48
 800444c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444e:	ba12      	rev	r2, r2
 8004450:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004454:	3304      	adds	r3, #4
 8004456:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 8004458:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HASH_GetDigest+0x244>)
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004462:	ba12      	rev	r2, r2
 8004464:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	3304      	adds	r3, #4
 800446a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 800446c:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <HASH_GetDigest+0x244>)
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	653a      	str	r2, [r7, #80]	; 0x50
 8004474:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004476:	ba12      	rev	r2, r2
 8004478:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	3304      	adds	r3, #4
 800447e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 8004480:	4b55      	ldr	r3, [pc, #340]	; (80045d8 <HASH_GetDigest+0x244>)
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	657a      	str	r2, [r7, #84]	; 0x54
 8004488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800448a:	ba12      	rev	r2, r2
 800448c:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	3304      	adds	r3, #4
 8004492:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HASH_GetDigest+0x244>)
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449a:	65ba      	str	r2, [r7, #88]	; 0x58
 800449c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449e:	ba12      	rev	r2, r2
 80044a0:	601a      	str	r2, [r3, #0]
    break;
 80044a2:	e092      	b.n	80045ca <HASH_GetDigest+0x236>
  case 28:  /* SHA224 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 80044a4:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <HASH_GetDigest+0x244>)
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ae:	ba12      	rev	r2, r2
 80044b0:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	3304      	adds	r3, #4
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 80044b8:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HASH_GetDigest+0x244>)
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	633a      	str	r2, [r7, #48]	; 0x30
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	ba12      	rev	r2, r2
 80044c4:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	3304      	adds	r3, #4
 80044ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 80044cc:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <HASH_GetDigest+0x244>)
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	637a      	str	r2, [r7, #52]	; 0x34
 80044d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044d6:	ba12      	rev	r2, r2
 80044d8:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	3304      	adds	r3, #4
 80044de:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 80044e0:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HASH_GetDigest+0x244>)
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80044e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ea:	ba12      	rev	r2, r2
 80044ec:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	3304      	adds	r3, #4
 80044f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 80044f4:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <HASH_GetDigest+0x244>)
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044fe:	ba12      	rev	r2, r2
 8004500:	601a      	str	r2, [r3, #0]
#if defined(HASH_CR_MDMAT)
    msgdigest+=4U;
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	3304      	adds	r3, #4
 8004506:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HASH_GetDigest+0x248>)
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	643a      	str	r2, [r7, #64]	; 0x40
 8004510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004512:	ba12      	rev	r2, r2
 8004514:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	3304      	adds	r3, #4
 800451a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HASH_GetDigest+0x248>)
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	647a      	str	r2, [r7, #68]	; 0x44
 8004524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004526:	ba12      	rev	r2, r2
 8004528:	601a      	str	r2, [r3, #0]
#endif
    break;
 800452a:	e04e      	b.n	80045ca <HASH_GetDigest+0x236>
  case 32:   /* SHA256 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HASH_GetDigest+0x244>)
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	60fa      	str	r2, [r7, #12]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	ba12      	rev	r2, r2
 8004538:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	3304      	adds	r3, #4
 800453e:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HASH_GetDigest+0x244>)
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	613a      	str	r2, [r7, #16]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	ba12      	rev	r2, r2
 800454c:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 800454e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004550:	3304      	adds	r3, #4
 8004552:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HASH_GetDigest+0x244>)
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	617a      	str	r2, [r7, #20]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	ba12      	rev	r2, r2
 8004560:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	3304      	adds	r3, #4
 8004566:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HASH_GetDigest+0x244>)
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	61ba      	str	r2, [r7, #24]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	ba12      	rev	r2, r2
 8004574:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	3304      	adds	r3, #4
 800457a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HASH_GetDigest+0x244>)
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	ba12      	rev	r2, r2
 8004588:	601a      	str	r2, [r3, #0]
#if defined(HASH_CR_MDMAT)
    msgdigest+=4U;
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	3304      	adds	r3, #4
 800458e:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HASH_GetDigest+0x248>)
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004596:	623a      	str	r2, [r7, #32]
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	ba12      	rev	r2, r2
 800459c:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	3304      	adds	r3, #4
 80045a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HASH_GetDigest+0x248>)
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045aa:	627a      	str	r2, [r7, #36]	; 0x24
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	ba12      	rev	r2, r2
 80045b0:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	3304      	adds	r3, #4
 80045b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HASH_GetDigest+0x248>)
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045be:	62ba      	str	r2, [r7, #40]	; 0x28
 80045c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c2:	ba12      	rev	r2, r2
 80045c4:	601a      	str	r2, [r3, #0]
#endif
    break;
 80045c6:	e000      	b.n	80045ca <HASH_GetDigest+0x236>
    default:
    break;
 80045c8:	bf00      	nop
  }
}
 80045ca:	bf00      	nop
 80045cc:	3774      	adds	r7, #116	; 0x74
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	50060400 	.word	0x50060400
 80045dc:	50060710 	.word	0x50060710

080045e0 <HASH_WaitOnFlagUntilTimeout>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 80045f0:	f7fd fe00 	bl	80021f4 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d155      	bne.n	80046a8 <HASH_WaitOnFlagUntilTimeout+0xc8>
  {
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 80045fc:	e01c      	b.n	8004638 <HASH_WaitOnFlagUntilTimeout+0x58>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d018      	beq.n	8004638 <HASH_WaitOnFlagUntilTimeout+0x58>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fd fdf5 	bl	80021f4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <HASH_WaitOnFlagUntilTimeout+0x3c>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HASH_WaitOnFlagUntilTimeout+0x58>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2203      	movs	r2, #3
 8004628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e052      	b.n	80046de <HASH_WaitOnFlagUntilTimeout+0xfe>
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d90a      	bls.n	8004654 <HASH_WaitOnFlagUntilTimeout+0x74>
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HASH_WaitOnFlagUntilTimeout+0x108>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	429a      	cmp	r2, r3
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e009      	b.n	8004668 <HASH_WaitOnFlagUntilTimeout+0x88>
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HASH_WaitOnFlagUntilTimeout+0x108>)
 8004656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1c8      	bne.n	80045fe <HASH_WaitOnFlagUntilTimeout+0x1e>
 800466c:	e036      	b.n	80046dc <HASH_WaitOnFlagUntilTimeout+0xfc>
  else
  {
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d018      	beq.n	80046a8 <HASH_WaitOnFlagUntilTimeout+0xc8>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fd fdbd 	bl	80021f4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <HASH_WaitOnFlagUntilTimeout+0xac>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HASH_WaitOnFlagUntilTimeout+0xc8>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2203      	movs	r2, #3
 8004698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e01a      	b.n	80046de <HASH_WaitOnFlagUntilTimeout+0xfe>
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d90a      	bls.n	80046c4 <HASH_WaitOnFlagUntilTimeout+0xe4>
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HASH_WaitOnFlagUntilTimeout+0x108>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e009      	b.n	80046d8 <HASH_WaitOnFlagUntilTimeout+0xf8>
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HASH_WaitOnFlagUntilTimeout+0x108>)
 80046c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c8      	bne.n	800466e <HASH_WaitOnFlagUntilTimeout+0x8e>
        }
      }
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	50060400 	.word	0x50060400

080046ec <HMAC_Processing>:
  * @param  hhash HASH handle.
  * @param  Timeout Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef HMAC_Processing(HASH_HandleTypeDef *hhash, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Ensure first that Phase is correct */
  if ((hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_1) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_2) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_3))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d013      	beq.n	8004728 <HMAC_Processing+0x3c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004706:	2b04      	cmp	r3, #4
 8004708:	d00e      	beq.n	8004728 <HMAC_Processing+0x3c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004710:	2b05      	cmp	r3, #5
 8004712:	d009      	beq.n	8004728 <HMAC_Processing+0x3c>
  {
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlock */
    __HAL_UNLOCK(hhash);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return function status */
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e108      	b.n	800493a <HMAC_Processing+0x24e>
  }

  /* HMAC Step 1 processing */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800472e:	2b03      	cmp	r3, #3
 8004730:	d142      	bne.n	80047b8 <HMAC_Processing+0xcc>
  {
    /************************** STEP 1 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 8004732:	4b84      	ldr	r3, [pc, #528]	; (8004944 <HMAC_Processing+0x258>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 021f 	bic.w	r2, r3, #31
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	497f      	ldr	r1, [pc, #508]	; (8004944 <HMAC_Processing+0x258>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6959      	ldr	r1, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	461a      	mov	r2, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fdad 	bl	80042b4 <HASH_WriteData>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HMAC_Processing+0x8a>
    {
      return hhash->Status;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004774:	e0e1      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Check whether or not key entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b08      	cmp	r3, #8
 8004780:	d105      	bne.n	800478e <HMAC_Processing+0xa2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e0d5      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: set DCAL bit. */
    __HAL_HASH_START_DIGEST();
 800478e:	4b6d      	ldr	r3, [pc, #436]	; (8004944 <HMAC_Processing+0x258>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4a6c      	ldr	r2, [pc, #432]	; (8004944 <HMAC_Processing+0x258>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6093      	str	r3, [r2, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	2108      	movs	r1, #8
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff1d 	bl	80045e0 <HASH_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HMAC_Processing+0xc4>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0c4      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Move from Step 1 to Step 2 */
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* HMAC Step 2 processing.
     After phase check, HMAC_Processing() may
     - directly start up from this point in resumption case
       if the same Step 2 processing was suspended previously
    - or fall through from the Step 1 processing carried out hereabove */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d14a      	bne.n	8004858 <HMAC_Processing+0x16c>
  {
    /************************** STEP 2 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);
 80047c2:	4b60      	ldr	r3, [pc, #384]	; (8004944 <HMAC_Processing+0x258>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 021f 	bic.w	r2, r3, #31
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	495b      	ldr	r1, [pc, #364]	; (8004944 <HMAC_Processing+0x258>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashInBuffPtr, hhash->HashInCount);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fd65 	bl	80042b4 <HASH_WriteData>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HMAC_Processing+0x11a>
    {
      return hhash->Status;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004804:	e099      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Check whether or not data entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b08      	cmp	r3, #8
 8004810:	d105      	bne.n	800481e <HMAC_Processing+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e08d      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: set DCAL bit. */
    __HAL_HASH_START_DIGEST();
 800481e:	4b49      	ldr	r3, [pc, #292]	; (8004944 <HMAC_Processing+0x258>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4a48      	ldr	r2, [pc, #288]	; (8004944 <HMAC_Processing+0x258>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004828:	6093      	str	r3, [r2, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	2108      	movs	r1, #8
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fed5 	bl	80045e0 <HASH_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HMAC_Processing+0x154>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e07c      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Move from Step 2 to Step 3 */
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2205      	movs	r2, #5
 8004844:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* In case Step 1 phase was suspended then resumed,
       set again Key input buffers and size before moving to
       next step */
    hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	615a      	str	r2, [r3, #20]
    hhash->HashKeyCount    = hhash->Init.KeySize;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
 /* HMAC Step 3 processing.
     After phase check, HMAC_Processing() may
     - directly start up from this point in resumption case
       if the same Step 3 processing was suspended previously
    - or fall through from the Step 2 processing carried out hereabove */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800485e:	2b05      	cmp	r3, #5
 8004860:	d162      	bne.n	8004928 <HMAC_Processing+0x23c>
  {
    /************************** STEP 3 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <HMAC_Processing+0x258>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 021f 	bic.w	r2, r3, #31
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4933      	ldr	r1, [pc, #204]	; (8004944 <HMAC_Processing+0x258>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6959      	ldr	r1, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	461a      	mov	r2, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fd15 	bl	80042b4 <HASH_WriteData>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HMAC_Processing+0x1ba>
    {
      return hhash->Status;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048a4:	e049      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Check whether or not key entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d105      	bne.n	80048be <HMAC_Processing+0x1d2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e03d      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: start the Digest calculation. */
    __HAL_HASH_START_DIGEST();
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <HMAC_Processing+0x258>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a20      	ldr	r2, [pc, #128]	; (8004944 <HMAC_Processing+0x258>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6093      	str	r3, [r2, #8]

    /* Wait for DCIS flag to be set */
     if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2102      	movs	r1, #2
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fe85 	bl	80045e0 <HASH_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HMAC_Processing+0x1f4>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e02c      	b.n	800493a <HMAC_Processing+0x24e>
    }

    /* Read the message digest */
    HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6918      	ldr	r0, [r3, #16]
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HMAC_Processing+0x258>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HMAC_Processing+0x25c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <HMAC_Processing+0x22c>
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HMAC_Processing+0x258>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HMAC_Processing+0x25c>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048fc:	d00a      	beq.n	8004914 <HMAC_Processing+0x228>
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HMAC_Processing+0x258>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HMAC_Processing+0x25c>)
 8004904:	4013      	ands	r3, r2
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <HMAC_Processing+0x25c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <HMAC_Processing+0x224>
 800490c:	2320      	movs	r3, #32
 800490e:	e004      	b.n	800491a <HMAC_Processing+0x22e>
 8004910:	2310      	movs	r3, #16
 8004912:	e002      	b.n	800491a <HMAC_Processing+0x22e>
 8004914:	231c      	movs	r3, #28
 8004916:	e000      	b.n	800491a <HMAC_Processing+0x22e>
 8004918:	2314      	movs	r3, #20
 800491a:	4619      	mov	r1, r3
 800491c:	f7ff fd3a 	bl	8004394 <HASH_GetDigest>

    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

   /* Change the HASH state */
   hhash->State = HAL_HASH_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   /* Process Unlock */
   __HAL_UNLOCK(hhash);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

   /* Return function status */
   return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	50060400 	.word	0x50060400
 8004948:	00040080 	.word	0x00040080

0800494c <HMAC_Start>:
  * @param  Timeout Timeout value.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HMAC_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout, uint32_t Algorithm)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
    HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004960:	75fb      	strb	r3, [r7, #23]

   /* If State is ready or suspended, start or resume polling-based HASH processing */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d002      	beq.n	800496e <HMAC_Start+0x22>
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b08      	cmp	r3, #8
 800496c:	d167      	bne.n	8004a3e <HMAC_Start+0xf2>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U) || (hhash->Init.pKey == NULL) || (hhash->Init.KeySize == 0U) || (pOutBuffer == NULL))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <HMAC_Start+0x44>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HMAC_Start+0x44>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <HMAC_Start+0x44>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HMAC_Start+0x44>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HMAC_Start+0x50>
    {
      hhash->State = HAL_HASH_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      return  HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e051      	b.n	8004a40 <HMAC_Start+0xf4>
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HMAC_Start+0x5e>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e04a      	b.n	8004a40 <HMAC_Start+0xf4>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Check if initialization phase has already be performed */
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d136      	bne.n	8004a32 <HMAC_Start+0xe6>
    {
      /* Check if key size is larger than 64 bytes, accordingly set LKEY and the other setting bits */
      if(hhash->Init.KeySize > 64U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d90e      	bls.n	80049ea <HMAC_Start+0x9e>
      {
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_HMAC_KEYTYPE_LONGKEY | HASH_CR_INIT);
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HMAC_Start+0xfc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 80049d4:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	4313      	orrs	r3, r2
 80049dc:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HMAC_Start+0xfc>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e00b      	b.n	8004a02 <HMAC_Start+0xb6>
      }
      else
      {
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_CR_INIT);
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <HMAC_Start+0xfc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 80049f2:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	4313      	orrs	r3, r2
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HMAC_Start+0xfc>)
 80049fc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a00:	6013      	str	r3, [r2, #0]
      }
      /* Set the phase to Step 1 */
      hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      /* Resort to hhash internal fields to feed the Peripheral.
         Parameters will be updated in case of suspension to contain the proper
         information at resumption time. */
      hhash->pHashOutBuffPtr  = pOutBuffer;            /* Output digest address                                              */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	611a      	str	r2, [r3, #16]
      hhash->pHashInBuffPtr   = pInBuffer;             /* Input data address, HMAC_Processing input parameter for Step 2     */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	60da      	str	r2, [r3, #12]
      hhash->HashInCount      = Size;                  /* Input data size, HMAC_Processing input parameter for Step 2        */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	621a      	str	r2, [r3, #32]
      hhash->HashBuffSize     = Size;                  /* Store the input buffer size for the whole HMAC process             */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	61da      	str	r2, [r3, #28]
      hhash->pHashKeyBuffPtr  = hhash->Init.pKey;      /* Key address, HMAC_Processing input parameter for Step 1 and Step 3 */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	615a      	str	r2, [r3, #20]
      hhash->HashKeyCount     = hhash->Init.KeySize;   /* Key size, HMAC_Processing input parameter for Step 1 and Step 3    */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    /* Carry out HMAC processing */
    return HMAC_Processing(hhash, Timeout);
 8004a32:	6a39      	ldr	r1, [r7, #32]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff fe59 	bl	80046ec <HMAC_Processing>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	e000      	b.n	8004a40 <HMAC_Start+0xf4>

  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	50060400 	.word	0x50060400

08004a4c <HAL_HMACEx_SHA256_Start>:
  * @param  pOutBuffer pointer to the computed digest. Digest size is 32 bytes.
  * @param  Timeout Timeout value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HMACEx_SHA256_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  return HMAC_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_HMACEx_SHA256_Start+0x2c>)
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff6f 	bl	800494c <HMAC_Start>
 8004a6e:	4603      	mov	r3, r0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	00040080 	.word	0x00040080

08004a7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x90>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_PWREx_EnableOverDrive+0x94>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa8:	f7fd fba4 	bl	80021f4 <HAL_GetTick>
 8004aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aae:	e009      	b.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ab0:	f7fd fba0 	bl	80021f4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abe:	d901      	bls.n	8004ac4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e01f      	b.n	8004b04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad8:	f7fd fb8c 	bl	80021f4 <HAL_GetTick>
 8004adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ade:	e009      	b.n	8004af4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ae0:	f7fd fb88 	bl	80021f4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aee:	d901      	bls.n	8004af4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e007      	b.n	8004b04 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	420e0040 	.word	0x420e0040
 8004b14:	40007000 	.word	0x40007000
 8004b18:	420e0044 	.word	0x420e0044

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e25b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d075      	beq.n	8004c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3a:	4ba3      	ldr	r3, [pc, #652]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4ba0      	ldr	r3, [pc, #640]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d112      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b52:	4b9d      	ldr	r3, [pc, #628]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	4b99      	ldr	r3, [pc, #612]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05b      	beq.n	8004c24 <HAL_RCC_OscConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d157      	bne.n	8004c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e236      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x74>
 8004b82:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a90      	ldr	r2, [pc, #576]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e01d      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x98>
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a8a      	ldr	r2, [pc, #552]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a87      	ldr	r2, [pc, #540]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004bb4:	4b84      	ldr	r3, [pc, #528]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a83      	ldr	r2, [pc, #524]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b81      	ldr	r3, [pc, #516]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a80      	ldr	r2, [pc, #512]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fd fb0e 	bl	80021f4 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fd fb0a 	bl	80021f4 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1fb      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	4b76      	ldr	r3, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0xc0>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fafa 	bl	80021f4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fd faf6 	bl	80021f4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1e7      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0xe8>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d063      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c32:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3e:	4b62      	ldr	r3, [pc, #392]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	4b5c      	ldr	r3, [pc, #368]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e1bb      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b56      	ldr	r3, [pc, #344]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4952      	ldr	r1, [pc, #328]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	; (8004dcc <HAL_RCC_OscConfig+0x2b0>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fd faaf 	bl	80021f4 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fd faab 	bl	80021f4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e19c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4940      	ldr	r1, [pc, #256]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e015      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_OscConfig+0x2b0>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fa8e 	bl	80021f4 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fd fa8a 	bl	80021f4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e17b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d030      	beq.n	8004d68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <HAL_RCC_OscConfig+0x2b4>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd fa6e 	bl	80021f4 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fd fa6a 	bl	80021f4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e15b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x200>
 8004d3a:	e015      	b.n	8004d68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <HAL_RCC_OscConfig+0x2b4>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d42:	f7fd fa57 	bl	80021f4 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fd fa53 	bl	80021f4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e144      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80a0 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6413      	str	r3, [r2, #64]	; 0x40
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_OscConfig+0x2b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d121      	bne.n	8004df6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <HAL_RCC_OscConfig+0x2b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <HAL_RCC_OscConfig+0x2b8>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbe:	f7fd fa19 	bl	80021f4 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc4:	e011      	b.n	8004dea <HAL_RCC_OscConfig+0x2ce>
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
 8004dd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fd fa0c 	bl	80021f4 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0fd      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b81      	ldr	r3, [pc, #516]	; (8004ff0 <HAL_RCC_OscConfig+0x4d4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2f0>
 8004dfe:	4b7d      	ldr	r3, [pc, #500]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a7c      	ldr	r2, [pc, #496]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	e01c      	b.n	8004e46 <HAL_RCC_OscConfig+0x32a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d10c      	bne.n	8004e2e <HAL_RCC_OscConfig+0x312>
 8004e14:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a76      	ldr	r2, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	4b74      	ldr	r3, [pc, #464]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	4a73      	ldr	r2, [pc, #460]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2c:	e00b      	b.n	8004e46 <HAL_RCC_OscConfig+0x32a>
 8004e2e:	4b71      	ldr	r3, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a70      	ldr	r2, [pc, #448]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	4b6e      	ldr	r3, [pc, #440]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a6d      	ldr	r2, [pc, #436]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e40:	f023 0304 	bic.w	r3, r3, #4
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fd f9d1 	bl	80021f4 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fd f9cd 	bl	80021f4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0bc      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6c:	4b61      	ldr	r3, [pc, #388]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ee      	beq.n	8004e56 <HAL_RCC_OscConfig+0x33a>
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd f9bb 	bl	80021f4 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fd f9b7 	bl	80021f4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0a6      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e98:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8092 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ec0:	4b4c      	ldr	r3, [pc, #304]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d05c      	beq.n	8004f86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d141      	bne.n	8004f58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed4:	4b48      	ldr	r3, [pc, #288]	; (8004ff8 <HAL_RCC_OscConfig+0x4dc>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fd f98b 	bl	80021f4 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fd f987 	bl	80021f4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e078      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	019b      	lsls	r3, r3, #6
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	4933      	ldr	r1, [pc, #204]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2a:	4b33      	ldr	r3, [pc, #204]	; (8004ff8 <HAL_RCC_OscConfig+0x4dc>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd f960 	bl	80021f4 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd f95c 	bl	80021f4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04d      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x41c>
 8004f56:	e045      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x4dc>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fd f949 	bl	80021f4 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fd f945 	bl	80021f4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e036      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x44a>
 8004f84:	e02e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e029      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_RCC_OscConfig+0x4d8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d115      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fba:	4013      	ands	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470060 	.word	0x42470060

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fd f882 	bl	80021f4 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd f87e 	bl	80021f4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005182:	f000 f821 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc f95a 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	0801c11c 	.word	0x0801c11c
 80051c0:	20000000 	.word	0x20000000
 80051c4:	20000008 	.word	0x20000008

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	2300      	movs	r3, #0
 80051da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e0:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d00d      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x40>
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	f200 80bd 	bhi.w	800536c <HAL_RCC_GetSysClockFreq+0x1a4>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x34>
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0x3a>
 80051fa:	e0b7      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051fc:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051fe:	60bb      	str	r3, [r7, #8]
       break;
 8005200:	e0b7      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005202:	4b61      	ldr	r3, [pc, #388]	; (8005388 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005204:	60bb      	str	r3, [r7, #8]
      break;
 8005206:	e0b4      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005208:	4b5d      	ldr	r3, [pc, #372]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005212:	4b5b      	ldr	r3, [pc, #364]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04d      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521e:	4b58      	ldr	r3, [pc, #352]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	461a      	mov	r2, r3
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	ea02 0800 	and.w	r8, r2, r0
 8005236:	ea03 0901 	and.w	r9, r3, r1
 800523a:	4640      	mov	r0, r8
 800523c:	4649      	mov	r1, r9
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	014b      	lsls	r3, r1, #5
 8005248:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800524c:	0142      	lsls	r2, r0, #5
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	ebb0 0008 	subs.w	r0, r0, r8
 8005256:	eb61 0109 	sbc.w	r1, r1, r9
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	018b      	lsls	r3, r1, #6
 8005264:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005268:	0182      	lsls	r2, r0, #6
 800526a:	1a12      	subs	r2, r2, r0
 800526c:	eb63 0301 	sbc.w	r3, r3, r1
 8005270:	f04f 0000 	mov.w	r0, #0
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	00d9      	lsls	r1, r3, #3
 800527a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800527e:	00d0      	lsls	r0, r2, #3
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	eb12 0208 	adds.w	r2, r2, r8
 8005288:	eb43 0309 	adc.w	r3, r3, r9
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	0259      	lsls	r1, r3, #9
 8005296:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800529a:	0250      	lsls	r0, r2, #9
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f7fb fbe6 	bl	8000a7c <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4613      	mov	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e04a      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	461a      	mov	r2, r3
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	ea02 0400 	and.w	r4, r2, r0
 80052d2:	ea03 0501 	and.w	r5, r3, r1
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	014b      	lsls	r3, r1, #5
 80052e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052e8:	0142      	lsls	r2, r0, #5
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	1b00      	subs	r0, r0, r4
 80052f0:	eb61 0105 	sbc.w	r1, r1, r5
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	018b      	lsls	r3, r1, #6
 80052fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005302:	0182      	lsls	r2, r0, #6
 8005304:	1a12      	subs	r2, r2, r0
 8005306:	eb63 0301 	sbc.w	r3, r3, r1
 800530a:	f04f 0000 	mov.w	r0, #0
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	00d9      	lsls	r1, r3, #3
 8005314:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005318:	00d0      	lsls	r0, r2, #3
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	1912      	adds	r2, r2, r4
 8005320:	eb45 0303 	adc.w	r3, r5, r3
 8005324:	f04f 0000 	mov.w	r0, #0
 8005328:	f04f 0100 	mov.w	r1, #0
 800532c:	0299      	lsls	r1, r3, #10
 800532e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005332:	0290      	lsls	r0, r2, #10
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	461a      	mov	r2, r3
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f7fb fb9a 	bl	8000a7c <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	60bb      	str	r3, [r7, #8]
      break;
 800536a:	e002      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800536e:	60bb      	str	r3, [r7, #8]
      break;
 8005370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005372:	68bb      	ldr	r3, [r7, #8]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000000 	.word	0x20000000

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff fff0 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0801c12c 	.word	0x0801c12c

080053cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	220f      	movs	r2, #15
 80053da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053dc:	4b12      	ldr	r3, [pc, #72]	; (8005428 <HAL_RCC_GetClockConfig+0x5c>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0203 	and.w	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <HAL_RCC_GetClockConfig+0x5c>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_RCC_GetClockConfig+0x5c>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCC_GetClockConfig+0x5c>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	08db      	lsrs	r3, r3, #3
 8005406:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <HAL_RCC_GetClockConfig+0x60>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 020f 	and.w	r2, r3, #15
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	601a      	str	r2, [r3, #0]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	40023c00 	.word	0x40023c00

08005430 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e01c      	b.n	800547c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	795b      	ldrb	r3, [r3, #5]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fb ffe0 	bl	8001418 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0204 	orr.w	r2, r2, #4
 800546c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_RNG_GenerateRandomNumber+0x1a>
 800549a:	2302      	movs	r3, #2
 800549c:	e03d      	b.n	800551a <HAL_RNG_GenerateRandomNumber+0x96>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	795b      	ldrb	r3, [r3, #5]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d12c      	bne.n	8005508 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054b4:	f7fc fe9e 	bl	80021f4 <HAL_GetTick>
 80054b8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054ba:	e011      	b.n	80054e0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80054bc:	f7fc fe9a 	bl	80021f4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d90a      	bls.n	80054e0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e01c      	b.n	800551a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d1e6      	bne.n	80054bc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	715a      	strb	r2, [r3, #5]
 8005506:	e004      	b.n	8005512 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2204      	movs	r2, #4
 800550c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	711a      	strb	r2, [r3, #4]

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e01d      	b.n	8005570 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f815 	bl	8005578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 f967 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d007      	beq.n	80055c6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d122      	bne.n	8005630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d11b      	bne.n	8005630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0202 	mvn.w	r2, #2
 8005600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8ee 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8e0 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f8f1 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b04      	cmp	r3, #4
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0204 	mvn.w	r2, #4
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8c4 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8b6 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8c7 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0208 	mvn.w	r2, #8
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2204      	movs	r2, #4
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f89a 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f88c 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f89d 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0210 	mvn.w	r2, #16
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2208      	movs	r2, #8
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f870 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f862 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f873 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0201 	mvn.w	r2, #1
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fb fde2 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b80      	cmp	r3, #128	; 0x80
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f902 	bl	8005988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f838 	bl	8005820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0220 	mvn.w	r2, #32
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8cc 	bl	8005974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d00f      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3d      	ldr	r2, [pc, #244]	; (800594c <TIM_Base_SetConfig+0x118>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <TIM_Base_SetConfig+0x120>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <TIM_Base_SetConfig+0x114>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d02b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d027      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <TIM_Base_SetConfig+0x118>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d023      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_Base_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_Base_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d017      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_Base_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_Base_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <TIM_Base_SetConfig+0x134>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a24      	ldr	r2, [pc, #144]	; (800596c <TIM_Base_SetConfig+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <TIM_Base_SetConfig+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800
 8005968:	40001800 	.word	0x40001800
 800596c:	40001c00 	.word	0x40001c00
 8005970:	40002000 	.word	0x40002000

08005974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80059a2:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059a4:	22a9      	movs	r2, #169	; 0xa9
 80059a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 80059a8:	4b9e      	ldr	r3, [pc, #632]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059aa:	22fe      	movs	r2, #254	; 0xfe
 80059ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 84;
 80059ae:	4b9d      	ldr	r3, [pc, #628]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059b0:	2254      	movs	r2, #84	; 0x54
 80059b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 58;
 80059b4:	4b9b      	ldr	r3, [pc, #620]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059b6:	223a      	movs	r2, #58	; 0x3a
 80059b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80059ba:	4b9b      	ldr	r3, [pc, #620]	; (8005c28 <MX_LWIP_Init+0x28c>)
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80059c0:	4b99      	ldr	r3, [pc, #612]	; (8005c28 <MX_LWIP_Init+0x28c>)
 80059c2:	22ff      	movs	r2, #255	; 0xff
 80059c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80059c6:	4b98      	ldr	r3, [pc, #608]	; (8005c28 <MX_LWIP_Init+0x28c>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80059cc:	4b96      	ldr	r3, [pc, #600]	; (8005c28 <MX_LWIP_Init+0x28c>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 80059d2:	4b96      	ldr	r3, [pc, #600]	; (8005c2c <MX_LWIP_Init+0x290>)
 80059d4:	22a9      	movs	r2, #169	; 0xa9
 80059d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 80059d8:	4b94      	ldr	r3, [pc, #592]	; (8005c2c <MX_LWIP_Init+0x290>)
 80059da:	22fe      	movs	r2, #254	; 0xfe
 80059dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 84;
 80059de:	4b93      	ldr	r3, [pc, #588]	; (8005c2c <MX_LWIP_Init+0x290>)
 80059e0:	2254      	movs	r2, #84	; 0x54
 80059e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 59;
 80059e4:	4b91      	ldr	r3, [pc, #580]	; (8005c2c <MX_LWIP_Init+0x290>)
 80059e6:	223b      	movs	r2, #59	; 0x3b
 80059e8:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80059ea:	2100      	movs	r1, #0
 80059ec:	2000      	movs	r0, #0
 80059ee:	f006 ff83 	bl	800c8f8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80059f2:	4b8c      	ldr	r3, [pc, #560]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	061a      	lsls	r2, r3, #24
 80059f8:	4b8a      	ldr	r3, [pc, #552]	; (8005c24 <MX_LWIP_Init+0x288>)
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	041b      	lsls	r3, r3, #16
 80059fe:	431a      	orrs	r2, r3
 8005a00:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a02:	789b      	ldrb	r3, [r3, #2]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	4313      	orrs	r3, r2
 8005a08:	4a86      	ldr	r2, [pc, #536]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a0a:	78d2      	ldrb	r2, [r2, #3]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	061a      	lsls	r2, r3, #24
 8005a10:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	0619      	lsls	r1, r3, #24
 8005a16:	4b83      	ldr	r3, [pc, #524]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	4319      	orrs	r1, r3
 8005a1e:	4b81      	ldr	r3, [pc, #516]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	430b      	orrs	r3, r1
 8005a26:	497f      	ldr	r1, [pc, #508]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a28:	78c9      	ldrb	r1, [r1, #3]
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a32:	431a      	orrs	r2, r3
 8005a34:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	0619      	lsls	r1, r3, #24
 8005a3a:	4b7a      	ldr	r3, [pc, #488]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	4319      	orrs	r1, r3
 8005a42:	4b78      	ldr	r3, [pc, #480]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a44:	789b      	ldrb	r3, [r3, #2]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	4976      	ldr	r1, [pc, #472]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a4c:	78c9      	ldrb	r1, [r1, #3]
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a56:	431a      	orrs	r2, r3
 8005a58:	4b72      	ldr	r3, [pc, #456]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	0619      	lsls	r1, r3, #24
 8005a5e:	4b71      	ldr	r3, [pc, #452]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	4319      	orrs	r1, r3
 8005a66:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	496d      	ldr	r1, [pc, #436]	; (8005c24 <MX_LWIP_Init+0x288>)
 8005a70:	78c9      	ldrb	r1, [r1, #3]
 8005a72:	430b      	orrs	r3, r1
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	4313      	orrs	r3, r2
 8005a78:	4a6d      	ldr	r2, [pc, #436]	; (8005c30 <MX_LWIP_Init+0x294>)
 8005a7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a7c:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	061a      	lsls	r2, r3, #24
 8005a82:	4b69      	ldr	r3, [pc, #420]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005a8c:	789b      	ldrb	r3, [r3, #2]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	4313      	orrs	r3, r2
 8005a92:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005a94:	78d2      	ldrb	r2, [r2, #3]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	061a      	lsls	r2, r3, #24
 8005a9a:	4b63      	ldr	r3, [pc, #396]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	0619      	lsls	r1, r3, #24
 8005aa0:	4b61      	ldr	r3, [pc, #388]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	4319      	orrs	r1, r3
 8005aa8:	4b5f      	ldr	r3, [pc, #380]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005aaa:	789b      	ldrb	r3, [r3, #2]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	495d      	ldr	r1, [pc, #372]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ab2:	78c9      	ldrb	r1, [r1, #3]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005abc:	431a      	orrs	r2, r3
 8005abe:	4b5a      	ldr	r3, [pc, #360]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	0619      	lsls	r1, r3, #24
 8005ac4:	4b58      	ldr	r3, [pc, #352]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	4319      	orrs	r1, r3
 8005acc:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ace:	789b      	ldrb	r3, [r3, #2]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	4954      	ldr	r1, [pc, #336]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ad6:	78c9      	ldrb	r1, [r1, #3]
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	4b51      	ldr	r3, [pc, #324]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	0619      	lsls	r1, r3, #24
 8005ae8:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	4319      	orrs	r1, r3
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005af2:	789b      	ldrb	r3, [r3, #2]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	430b      	orrs	r3, r1
 8005af8:	494b      	ldr	r1, [pc, #300]	; (8005c28 <MX_LWIP_Init+0x28c>)
 8005afa:	78c9      	ldrb	r1, [r1, #3]
 8005afc:	430b      	orrs	r3, r1
 8005afe:	0e1b      	lsrs	r3, r3, #24
 8005b00:	4313      	orrs	r3, r2
 8005b02:	4a4c      	ldr	r2, [pc, #304]	; (8005c34 <MX_LWIP_Init+0x298>)
 8005b04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	061a      	lsls	r2, r3, #24
 8005b0c:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	431a      	orrs	r2, r3
 8005b14:	4b45      	ldr	r3, [pc, #276]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b16:	789b      	ldrb	r3, [r3, #2]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	4a43      	ldr	r2, [pc, #268]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b1e:	78d2      	ldrb	r2, [r2, #3]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	061a      	lsls	r2, r3, #24
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	0619      	lsls	r1, r3, #24
 8005b2a:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	4319      	orrs	r1, r3
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	493c      	ldr	r1, [pc, #240]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b3c:	78c9      	ldrb	r1, [r1, #3]
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b46:	431a      	orrs	r2, r3
 8005b48:	4b38      	ldr	r3, [pc, #224]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	0619      	lsls	r1, r3, #24
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4319      	orrs	r1, r3
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b58:	789b      	ldrb	r3, [r3, #2]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	4933      	ldr	r1, [pc, #204]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b60:	78c9      	ldrb	r1, [r1, #3]
 8005b62:	430b      	orrs	r3, r1
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	0619      	lsls	r1, r3, #24
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	4319      	orrs	r1, r3
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b7c:	789b      	ldrb	r3, [r3, #2]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	430b      	orrs	r3, r1
 8005b82:	492a      	ldr	r1, [pc, #168]	; (8005c2c <MX_LWIP_Init+0x290>)
 8005b84:	78c9      	ldrb	r1, [r1, #3]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	4a2a      	ldr	r2, [pc, #168]	; (8005c38 <MX_LWIP_Init+0x29c>)
 8005b8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005b90:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <MX_LWIP_Init+0x2a0>)
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <MX_LWIP_Init+0x2a4>)
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <MX_LWIP_Init+0x29c>)
 8005b9e:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <MX_LWIP_Init+0x298>)
 8005ba0:	4923      	ldr	r1, [pc, #140]	; (8005c30 <MX_LWIP_Init+0x294>)
 8005ba2:	4828      	ldr	r0, [pc, #160]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005ba4:	f007 fc2c 	bl	800d400 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005ba8:	4826      	ldr	r0, [pc, #152]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005baa:	f007 fddb 	bl	800d764 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005bae:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005bb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005bc0:	4820      	ldr	r0, [pc, #128]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005bc2:	f007 fddf 	bl	800d784 <netif_set_up>
 8005bc6:	e002      	b.n	8005bce <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005bc8:	481e      	ldr	r0, [pc, #120]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005bca:	f007 fe47 	bl	800d85c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005bce:	491e      	ldr	r1, [pc, #120]	; (8005c48 <MX_LWIP_Init+0x2ac>)
 8005bd0:	481c      	ldr	r0, [pc, #112]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005bd2:	f007 fed9 	bl	800d988 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2101      	movs	r1, #1
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f000 ff1a 	bl	8006a14 <osSemaphoreNew>
 8005be0:	4603      	mov	r3, r0
 8005be2:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <MX_LWIP_Init+0x2b0>)
 8005be4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <MX_LWIP_Init+0x2b4>)
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <MX_LWIP_Init+0x2a8>)
 8005bea:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005bec:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <MX_LWIP_Init+0x2b0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <MX_LWIP_Init+0x2b4>)
 8005bf2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005bf4:	2224      	movs	r2, #36	; 0x24
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4816      	ldr	r0, [pc, #88]	; (8005c54 <MX_LWIP_Init+0x2b8>)
 8005bfa:	f011 ffb8 	bl	8017b6e <memset>
  attributes.name = "LinkThr";
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <MX_LWIP_Init+0x2b8>)
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <MX_LWIP_Init+0x2bc>)
 8005c02:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <MX_LWIP_Init+0x2b8>)
 8005c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c0a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <MX_LWIP_Init+0x2b8>)
 8005c0e:	2210      	movs	r2, #16
 8005c10:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <MX_LWIP_Init+0x2b8>)
 8005c14:	490e      	ldr	r1, [pc, #56]	; (8005c50 <MX_LWIP_Init+0x2b4>)
 8005c16:	4811      	ldr	r0, [pc, #68]	; (8005c5c <MX_LWIP_Init+0x2c0>)
 8005c18:	f000 fce0 	bl	80065dc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20004ec8 	.word	0x20004ec8
 8005c28:	20004ec4 	.word	0x20004ec4
 8005c2c:	20004e64 	.word	0x20004e64
 8005c30:	20004ec0 	.word	0x20004ec0
 8005c34:	20004ecc 	.word	0x20004ecc
 8005c38:	20004ed0 	.word	0x20004ed0
 8005c3c:	0800c809 	.word	0x0800c809
 8005c40:	080062b9 	.word	0x080062b9
 8005c44:	20004e8c 	.word	0x20004e8c
 8005c48:	0800639d 	.word	0x0800639d
 8005c4c:	200000cc 	.word	0x200000cc
 8005c50:	20004e5c 	.word	0x20004e5c
 8005c54:	20004e68 	.word	0x20004e68
 8005c58:	08018b98 	.word	0x08018b98
 8005c5c:	08006325 	.word	0x08006325

08005c60 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a59      	ldr	r2, [pc, #356]	; (8005de4 <HAL_ETH_MspInit+0x184>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f040 80ac 	bne.w	8005ddc <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005c84:	2300      	movs	r3, #0
 8005c86:	623b      	str	r3, [r7, #32]
 8005c88:	4b57      	ldr	r3, [pc, #348]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	4a56      	ldr	r2, [pc, #344]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c92:	6313      	str	r3, [r2, #48]	; 0x30
 8005c94:	4b54      	ldr	r3, [pc, #336]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	4b50      	ldr	r3, [pc, #320]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	4a4f      	ldr	r2, [pc, #316]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cae:	6313      	str	r3, [r2, #48]	; 0x30
 8005cb0:	4b4d      	ldr	r3, [pc, #308]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4a48      	ldr	r2, [pc, #288]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cca:	6313      	str	r3, [r2, #48]	; 0x30
 8005ccc:	4b46      	ldr	r3, [pc, #280]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	4b42      	ldr	r3, [pc, #264]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	4a41      	ldr	r2, [pc, #260]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce8:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	4b3b      	ldr	r3, [pc, #236]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	4a3a      	ldr	r2, [pc, #232]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6313      	str	r3, [r2, #48]	; 0x30
 8005d04:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	4b34      	ldr	r3, [pc, #208]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	4a33      	ldr	r2, [pc, #204]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	4b2d      	ldr	r3, [pc, #180]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d3c:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <HAL_ETH_MspInit+0x188>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005d48:	2332      	movs	r3, #50	; 0x32
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d54:	2303      	movs	r3, #3
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d58:	230b      	movs	r3, #11
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d60:	4619      	mov	r1, r3
 8005d62:	4822      	ldr	r0, [pc, #136]	; (8005dec <HAL_ETH_MspInit+0x18c>)
 8005d64:	f7fe f88c 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005d68:	2386      	movs	r3, #134	; 0x86
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d74:	2303      	movs	r3, #3
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d78:	230b      	movs	r3, #11
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d80:	4619      	mov	r1, r3
 8005d82:	481b      	ldr	r0, [pc, #108]	; (8005df0 <HAL_ETH_MspInit+0x190>)
 8005d84:	f7fe f87c 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d96:	2303      	movs	r3, #3
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d9a:	230b      	movs	r3, #11
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da2:	4619      	mov	r1, r3
 8005da4:	4813      	ldr	r0, [pc, #76]	; (8005df4 <HAL_ETH_MspInit+0x194>)
 8005da6:	f7fe f86b 	bl	8003e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005daa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db0:	2302      	movs	r3, #2
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	2303      	movs	r3, #3
 8005dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005dbc:	230b      	movs	r3, #11
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	480c      	ldr	r0, [pc, #48]	; (8005df8 <HAL_ETH_MspInit+0x198>)
 8005dc8:	f7fe f85a 	bl	8003e80 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2100      	movs	r1, #0
 8005dd0:	203d      	movs	r0, #61	; 0x3d
 8005dd2:	f7fc faf7 	bl	80023c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005dd6:	203d      	movs	r0, #61	; 0x3d
 8005dd8:	f7fc fb10 	bl	80023fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3738      	adds	r7, #56	; 0x38
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40028000 	.word	0x40028000
 8005de8:	40023800 	.word	0x40023800
 8005dec:	40020800 	.word	0x40020800
 8005df0:	40020000 	.word	0x40020000
 8005df4:	40020400 	.word	0x40020400
 8005df8:	40021800 	.word	0x40021800

08005dfc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <HAL_ETH_RxCpltCallback+0x1c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 ff05 	bl	8006c18 <osSemaphoreRelease>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200000d0 	.word	0x200000d0

08005e1c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005e28:	4b59      	ldr	r3, [pc, #356]	; (8005f90 <low_level_init+0x174>)
 8005e2a:	4a5a      	ldr	r2, [pc, #360]	; (8005f94 <low_level_init+0x178>)
 8005e2c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005e2e:	4b58      	ldr	r3, [pc, #352]	; (8005f90 <low_level_init+0x174>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005e34:	4b56      	ldr	r3, [pc, #344]	; (8005f90 <low_level_init+0x174>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005e42:	23e1      	movs	r3, #225	; 0xe1
 8005e44:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005e52:	4a4f      	ldr	r2, [pc, #316]	; (8005f90 <low_level_init+0x174>)
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005e5a:	4b4d      	ldr	r3, [pc, #308]	; (8005f90 <low_level_init+0x174>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <low_level_init+0x174>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005e66:	4b4a      	ldr	r3, [pc, #296]	; (8005f90 <low_level_init+0x174>)
 8005e68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005e6c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e6e:	4848      	ldr	r0, [pc, #288]	; (8005f90 <low_level_init+0x174>)
 8005e70:	f7fc fb1a 	bl	80024a8 <HAL_ETH_Init>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <low_level_init+0x78>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005e94:	2304      	movs	r3, #4
 8005e96:	4a40      	ldr	r2, [pc, #256]	; (8005f98 <low_level_init+0x17c>)
 8005e98:	4940      	ldr	r1, [pc, #256]	; (8005f9c <low_level_init+0x180>)
 8005e9a:	483d      	ldr	r0, [pc, #244]	; (8005f90 <low_level_init+0x174>)
 8005e9c:	f7fc fca0 	bl	80027e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	4a3f      	ldr	r2, [pc, #252]	; (8005fa0 <low_level_init+0x184>)
 8005ea4:	493f      	ldr	r1, [pc, #252]	; (8005fa4 <low_level_init+0x188>)
 8005ea6:	483a      	ldr	r0, [pc, #232]	; (8005f90 <low_level_init+0x174>)
 8005ea8:	f7fc fd03 	bl	80028b2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2206      	movs	r2, #6
 8005eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005eb4:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <low_level_init+0x174>)
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <low_level_init+0x174>)
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ecc:	4b30      	ldr	r3, [pc, #192]	; (8005f90 <low_level_init+0x174>)
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	789a      	ldrb	r2, [r3, #2]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <low_level_init+0x174>)
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	78da      	ldrb	r2, [r3, #3]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <low_level_init+0x174>)
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	791a      	ldrb	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <low_level_init+0x174>)
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	795a      	ldrb	r2, [r3, #5]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f02:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f0a:	f043 030a 	orr.w	r3, r3, #10
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005f16:	2200      	movs	r2, #0
 8005f18:	2101      	movs	r1, #1
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f000 fd7a 	bl	8006a14 <osSemaphoreNew>
 8005f20:	4603      	mov	r3, r0
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <low_level_init+0x18c>)
 8005f24:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005f26:	f107 0314 	add.w	r3, r7, #20
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f011 fe1d 	bl	8017b6e <memset>
  attributes.name = "EthIf";
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <low_level_init+0x190>)
 8005f36:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005f38:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005f3e:	2330      	movs	r3, #48	; 0x30
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005f42:	f107 0314 	add.w	r3, r7, #20
 8005f46:	461a      	mov	r2, r3
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <low_level_init+0x194>)
 8005f4c:	f000 fb46 	bl	80065dc <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005f50:	480f      	ldr	r0, [pc, #60]	; (8005f90 <low_level_init+0x174>)
 8005f52:	f7fc ffd6 	bl	8002f02 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	211d      	movs	r1, #29
 8005f5e:	480c      	ldr	r0, [pc, #48]	; (8005f90 <low_level_init+0x174>)
 8005f60:	f7fc ff01 	bl	8002d66 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	f043 030b 	orr.w	r3, r3, #11
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	461a      	mov	r2, r3
 8005f70:	211d      	movs	r1, #29
 8005f72:	4807      	ldr	r0, [pc, #28]	; (8005f90 <low_level_init+0x174>)
 8005f74:	f7fc ff5f 	bl	8002e36 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	211d      	movs	r1, #29
 8005f80:	4803      	ldr	r0, [pc, #12]	; (8005f90 <low_level_init+0x174>)
 8005f82:	f7fc fef0 	bl	8002d66 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005f86:	bf00      	nop
 8005f88:	3740      	adds	r7, #64	; 0x40
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200067a4 	.word	0x200067a4
 8005f94:	40028000 	.word	0x40028000
 8005f98:	200067ec 	.word	0x200067ec
 8005f9c:	20004ed4 	.word	0x20004ed4
 8005fa0:	20004f54 	.word	0x20004f54
 8005fa4:	20006724 	.word	0x20006724
 8005fa8:	200000d0 	.word	0x200000d0
 8005fac:	08018ba0 	.word	0x08018ba0
 8005fb0:	08006259 	.word	0x08006259

08005fb4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005fbe:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <low_level_output+0x138>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005fd6:	4b45      	ldr	r3, [pc, #276]	; (80060ec <low_level_output+0x138>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	623b      	str	r3, [r7, #32]
 8005fe4:	e05a      	b.n	800609c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da03      	bge.n	8005ff6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005fee:	23f8      	movs	r3, #248	; 0xf8
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005ff4:	e05c      	b.n	80060b0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	895b      	ldrh	r3, [r3, #10]
 8005ffa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006000:	e02f      	b.n	8006062 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	18d0      	adds	r0, r2, r3
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	18d1      	adds	r1, r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006016:	3304      	adds	r3, #4
 8006018:	461a      	mov	r2, r3
 800601a:	f011 fd9a 	bl	8017b52 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da03      	bge.n	8006034 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800602c:	23f8      	movs	r3, #248	; 0xf8
 800602e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006032:	e03d      	b.n	80060b0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006044:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006050:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800605c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800606c:	4293      	cmp	r3, r2
 800606e:	d8c8      	bhi.n	8006002 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	18d0      	adds	r0, r2, r3
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4413      	add	r3, r2
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4619      	mov	r1, r3
 8006082:	f011 fd66 	bl	8017b52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1a1      	bne.n	8005fe6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	4811      	ldr	r0, [pc, #68]	; (80060ec <low_level_output+0x138>)
 80060a6:	f7fc fc71 	bl	800298c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <low_level_output+0x138>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b8:	3314      	adds	r3, #20
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <low_level_output+0x138>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060cc:	3314      	adds	r3, #20
 80060ce:	2220      	movs	r2, #32
 80060d0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <low_level_output+0x138>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	3304      	adds	r3, #4
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80060e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3728      	adds	r7, #40	; 0x28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200067a4 	.word	0x200067a4

080060f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006114:	484f      	ldr	r0, [pc, #316]	; (8006254 <low_level_input+0x164>)
 8006116:	f7fc fd23 	bl	8002b60 <HAL_ETH_GetReceivedFrame_IT>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <low_level_input+0x34>

    return NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	e092      	b.n	800624a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <low_level_input+0x164>)
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <low_level_input+0x164>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006130:	89fb      	ldrh	r3, [r7, #14]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006136:	89fb      	ldrh	r3, [r7, #14]
 8006138:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800613c:	4619      	mov	r1, r3
 800613e:	2000      	movs	r0, #0
 8006140:	f007 fcec 	bl	800db1c <pbuf_alloc>
 8006144:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d04b      	beq.n	80061e4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800614c:	4b41      	ldr	r3, [pc, #260]	; (8006254 <low_level_input+0x164>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 800615a:	e040      	b.n	80061de <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	895b      	ldrh	r3, [r3, #10]
 8006160:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006166:	e021      	b.n	80061ac <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	18d0      	adds	r0, r2, r3
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800617c:	3304      	adds	r3, #4
 800617e:	461a      	mov	r2, r3
 8006180:	f011 fce7 	bl	8017b52 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800619a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80061a6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d8d6      	bhi.n	8006168 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	18d0      	adds	r0, r2, r3
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4619      	mov	r1, r3
 80061cc:	f011 fcc1 	bl	8017b52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1bb      	bne.n	800615c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <low_level_input+0x164>)
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	e00b      	b.n	8006208 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3301      	adds	r3, #1
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <low_level_input+0x164>)
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	429a      	cmp	r2, r3
 8006210:	d3ee      	bcc.n	80061f0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <low_level_input+0x164>)
 8006214:	2200      	movs	r2, #0
 8006216:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <low_level_input+0x164>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	3314      	adds	r3, #20
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <low_level_input+0x164>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006234:	3314      	adds	r3, #20
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <low_level_input+0x164>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006242:	3308      	adds	r3, #8
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800624a:	4618      	mov	r0, r3
 800624c:	3730      	adds	r7, #48	; 0x30
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200067a4 	.word	0x200067a4

08006258 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006264:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <ethernetif_input+0x58>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f04f 31ff 	mov.w	r1, #4294967295
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fc6d 	bl	8006b4c <osSemaphoreAcquire>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f5      	bne.n	8006264 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006278:	480e      	ldr	r0, [pc, #56]	; (80062b4 <ethernetif_input+0x5c>)
 800627a:	f011 fae5 	bl	8017848 <sys_mutex_lock>
        p = low_level_input( netif );
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff ff36 	bl	80060f0 <low_level_input>
 8006284:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	68b8      	ldr	r0, [r7, #8]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f007 ff21 	bl	800e0e4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80062a2:	4804      	ldr	r0, [pc, #16]	; (80062b4 <ethernetif_input+0x5c>)
 80062a4:	f011 fadf 	bl	8017866 <sys_mutex_unlock>
      } while(p!=NULL);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e4      	bne.n	8006278 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80062ae:	e7d9      	b.n	8006264 <ethernetif_input+0xc>
 80062b0:	200000d0 	.word	0x200000d0
 80062b4:	20007ffc 	.word	0x20007ffc

080062b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <ethernetif_init+0x1c>
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <ethernetif_init+0x48>)
 80062c8:	f44f 720e 	mov.w	r2, #568	; 0x238
 80062cc:	490d      	ldr	r1, [pc, #52]	; (8006304 <ethernetif_init+0x4c>)
 80062ce:	480e      	ldr	r0, [pc, #56]	; (8006308 <ethernetif_init+0x50>)
 80062d0:	f011 fcb0 	bl	8017c34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2273      	movs	r2, #115	; 0x73
 80062d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2274      	movs	r2, #116	; 0x74
 80062e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <ethernetif_init+0x54>)
 80062e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <ethernetif_init+0x58>)
 80062ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fd93 	bl	8005e1c <low_level_init>

  return ERR_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	08018ba8 	.word	0x08018ba8
 8006304:	08018bc4 	.word	0x08018bc4
 8006308:	08018bd4 	.word	0x08018bd4
 800630c:	080158a9 	.word	0x080158a9
 8006310:	08005fb5 	.word	0x08005fb5

08006314 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006318:	f7fb ff6c 	bl	80021f4 <HAL_GetTick>
 800631c:	4603      	mov	r3, r0
}
 800631e:	4618      	mov	r0, r3
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	461a      	mov	r2, r3
 800633a:	2101      	movs	r1, #1
 800633c:	4816      	ldr	r0, [pc, #88]	; (8006398 <ethernetif_set_link+0x74>)
 800633e:	f7fc fd12 	bl	8002d66 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <ethernetif_set_link+0x48>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f007 faab 	bl	800d8c0 <netif_set_link_up>
 800636a:	e011      	b.n	8006390 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006374:	089b      	lsrs	r3, r3, #2
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <ethernetif_set_link+0x6c>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f007 facc 	bl	800d928 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006390:	20c8      	movs	r0, #200	; 0xc8
 8006392:	f000 f9c9 	bl	8006728 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006396:	e7cd      	b.n	8006334 <ethernetif_set_link+0x10>
 8006398:	200067a4 	.word	0x200067a4

0800639c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063b2:	089b      	lsrs	r3, r3, #2
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d05d      	beq.n	800647a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80063be:	4b34      	ldr	r3, [pc, #208]	; (8006490 <ethernetif_update_config+0xf4>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03f      	beq.n	8006446 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80063c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063ca:	2100      	movs	r1, #0
 80063cc:	4830      	ldr	r0, [pc, #192]	; (8006490 <ethernetif_update_config+0xf4>)
 80063ce:	f7fc fd32 	bl	8002e36 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80063d2:	f7fb ff0f 	bl	80021f4 <HAL_GetTick>
 80063d6:	4603      	mov	r3, r0
 80063d8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	461a      	mov	r2, r3
 80063e0:	2101      	movs	r1, #1
 80063e2:	482b      	ldr	r0, [pc, #172]	; (8006490 <ethernetif_update_config+0xf4>)
 80063e4:	f7fc fcbf 	bl	8002d66 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80063e8:	f7fb ff04 	bl	80021f4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063f6:	d828      	bhi.n	800644a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0eb      	beq.n	80063da <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	461a      	mov	r2, r3
 8006408:	211f      	movs	r1, #31
 800640a:	4821      	ldr	r0, [pc, #132]	; (8006490 <ethernetif_update_config+0xf4>)
 800640c:	f7fc fcab 	bl	8002d66 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <ethernetif_update_config+0xf4>)
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e002      	b.n	800642a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006424:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <ethernetif_update_config+0xf4>)
 8006426:	2200      	movs	r2, #0
 8006428:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006434:	4b16      	ldr	r3, [pc, #88]	; (8006490 <ethernetif_update_config+0xf4>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	e016      	b.n	800646a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800643c:	4b14      	ldr	r3, [pc, #80]	; (8006490 <ethernetif_update_config+0xf4>)
 800643e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	e011      	b.n	800646a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <ethernetif_update_config+0xb0>
          goto error;
 800644a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <ethernetif_update_config+0xf4>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <ethernetif_update_config+0xf4>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800645c:	4313      	orrs	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	2100      	movs	r1, #0
 8006464:	480a      	ldr	r0, [pc, #40]	; (8006490 <ethernetif_update_config+0xf4>)
 8006466:	f7fc fce6 	bl	8002e36 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800646a:	2100      	movs	r1, #0
 800646c:	4808      	ldr	r0, [pc, #32]	; (8006490 <ethernetif_update_config+0xf4>)
 800646e:	f7fc fda7 	bl	8002fc0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006472:	4807      	ldr	r0, [pc, #28]	; (8006490 <ethernetif_update_config+0xf4>)
 8006474:	f7fc fd45 	bl	8002f02 <HAL_ETH_Start>
 8006478:	e002      	b.n	8006480 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800647a:	4805      	ldr	r0, [pc, #20]	; (8006490 <ethernetif_update_config+0xf4>)
 800647c:	f7fc fd70 	bl	8002f60 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f807 	bl	8006494 <ethernetif_notify_conn_changed>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200067a4 	.word	0x200067a4

08006494 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064be:	f3ef 8305 	mrs	r3, IPSR
 80064c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	607b      	str	r3, [r7, #4]
  return(result);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d6:	f3ef 8311 	mrs	r3, BASEPRI
 80064da:	603b      	str	r3, [r7, #0]
  return(result);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <osKernelInitialize+0x3a>
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <osKernelInitialize+0x64>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d103      	bne.n	80064f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064ea:	f06f 0305 	mvn.w	r3, #5
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e00c      	b.n	800650c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <osKernelInitialize+0x64>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <osKernelInitialize+0x64>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	200000d4 	.word	0x200000d4

08006520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006526:	f3ef 8305 	mrs	r3, IPSR
 800652a:	60bb      	str	r3, [r7, #8]
  return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	607b      	str	r3, [r7, #4]
  return(result);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	603b      	str	r3, [r7, #0]
  return(result);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <osKernelStart+0x3a>
 800654a:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <osKernelStart+0x68>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006552:	f06f 0305 	mvn.w	r3, #5
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e010      	b.n	800657c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <osKernelStart+0x68>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d109      	bne.n	8006576 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006562:	f7ff ffa1 	bl	80064a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <osKernelStart+0x68>)
 8006568:	2202      	movs	r2, #2
 800656a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800656c:	f002 f98e 	bl	800888c <vTaskStartScheduler>
      stat = osOK;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e002      	b.n	800657c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800657c:	68fb      	ldr	r3, [r7, #12]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200000d4 	.word	0x200000d4

0800658c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006592:	f3ef 8305 	mrs	r3, IPSR
 8006596:	60bb      	str	r3, [r7, #8]
  return(result);
 8006598:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659e:	f3ef 8310 	mrs	r3, PRIMASK
 80065a2:	607b      	str	r3, [r7, #4]
  return(result);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065aa:	f3ef 8311 	mrs	r3, BASEPRI
 80065ae:	603b      	str	r3, [r7, #0]
  return(result);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <osKernelGetTickCount+0x3a>
 80065b6:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <osKernelGetTickCount+0x4c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d103      	bne.n	80065c6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80065be:	f002 fa91 	bl	8008ae4 <xTaskGetTickCountFromISR>
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	e002      	b.n	80065cc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80065c6:	f002 fa7d 	bl	8008ac4 <xTaskGetTickCount>
 80065ca:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200000d4 	.word	0x200000d4

080065dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b090      	sub	sp, #64	; 0x40
 80065e0:	af04      	add	r7, sp, #16
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ec:	f3ef 8305 	mrs	r3, IPSR
 80065f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 808f 	bne.w	8006718 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fa:	f3ef 8310 	mrs	r3, PRIMASK
 80065fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d105      	bne.n	8006612 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006606:	f3ef 8311 	mrs	r3, BASEPRI
 800660a:	617b      	str	r3, [r7, #20]
  return(result);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <osThreadNew+0x3e>
 8006612:	4b44      	ldr	r3, [pc, #272]	; (8006724 <osThreadNew+0x148>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d07e      	beq.n	8006718 <osThreadNew+0x13c>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d07b      	beq.n	8006718 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006624:	2318      	movs	r3, #24
 8006626:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d045      	beq.n	80066c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <osThreadNew+0x6a>
        name = attr->name;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <osThreadNew+0x90>
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	2b38      	cmp	r3, #56	; 0x38
 800665e:	d805      	bhi.n	800666c <osThreadNew+0x90>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <osThreadNew+0x94>
        return (NULL);
 800666c:	2300      	movs	r3, #0
 800666e:	e054      	b.n	800671a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	089b      	lsrs	r3, r3, #2
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <osThreadNew+0xca>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2bbb      	cmp	r3, #187	; 0xbb
 800668e:	d90a      	bls.n	80066a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <osThreadNew+0xca>
        mem = 1;
 80066a0:	2301      	movs	r3, #1
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	e010      	b.n	80066c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <osThreadNew+0xec>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d108      	bne.n	80066c8 <osThreadNew+0xec>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <osThreadNew+0xec>
          mem = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	e001      	b.n	80066c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d110      	bne.n	80066f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066d6:	9202      	str	r2, [sp, #8]
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f001 fee5 	bl	80084b4 <xTaskCreateStatic>
 80066ea:	4603      	mov	r3, r0
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	e013      	b.n	8006718 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d110      	bne.n	8006718 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f107 0310 	add.w	r3, r7, #16
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 ff30 	bl	800856e <xTaskCreate>
 800670e:	4603      	mov	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d001      	beq.n	8006718 <osThreadNew+0x13c>
          hTask = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006718:	693b      	ldr	r3, [r7, #16]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200000d4 	.word	0x200000d4

08006728 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006730:	f3ef 8305 	mrs	r3, IPSR
 8006734:	613b      	str	r3, [r7, #16]
  return(result);
 8006736:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10f      	bne.n	800675c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800673c:	f3ef 8310 	mrs	r3, PRIMASK
 8006740:	60fb      	str	r3, [r7, #12]
  return(result);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006748:	f3ef 8311 	mrs	r3, BASEPRI
 800674c:	60bb      	str	r3, [r7, #8]
  return(result);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <osDelay+0x3c>
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <osDelay+0x58>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d103      	bne.n	8006764 <osDelay+0x3c>
    stat = osErrorISR;
 800675c:	f06f 0305 	mvn.w	r3, #5
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e007      	b.n	8006774 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <osDelay+0x4c>
      vTaskDelay(ticks);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 f858 	bl	8008824 <vTaskDelay>
    }
  }

  return (stat);
 8006774:	697b      	ldr	r3, [r7, #20]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200000d4 	.word	0x200000d4

08006784 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006790:	f3ef 8305 	mrs	r3, IPSR
 8006794:	613b      	str	r3, [r7, #16]
  return(result);
 8006796:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 8085 	bne.w	80068a8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679e:	f3ef 8310 	mrs	r3, PRIMASK
 80067a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067aa:	f3ef 8311 	mrs	r3, BASEPRI
 80067ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <osMutexNew+0x3a>
 80067b6:	4b3f      	ldr	r3, [pc, #252]	; (80068b4 <osMutexNew+0x130>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d074      	beq.n	80068a8 <osMutexNew+0x124>
    if (attr != NULL) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <osMutexNew+0x48>
      type = attr->attr_bits;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	e001      	b.n	80067d0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <osMutexNew+0x5c>
      rmtx = 1U;
 80067da:	2301      	movs	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e001      	b.n	80067e4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d15c      	bne.n	80068a8 <osMutexNew+0x124>
      mem = -1;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d015      	beq.n	8006826 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d006      	beq.n	8006810 <osMutexNew+0x8c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b4f      	cmp	r3, #79	; 0x4f
 8006808:	d902      	bls.n	8006810 <osMutexNew+0x8c>
          mem = 1;
 800680a:	2301      	movs	r3, #1
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e00c      	b.n	800682a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <osMutexNew+0xa6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <osMutexNew+0xa6>
            mem = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e001      	b.n	800682a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d112      	bne.n	8006856 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	4619      	mov	r1, r3
 800683c:	2004      	movs	r0, #4
 800683e:	f000 feaa 	bl	8007596 <xQueueCreateMutexStatic>
 8006842:	6278      	str	r0, [r7, #36]	; 0x24
 8006844:	e016      	b.n	8006874 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	4619      	mov	r1, r3
 800684c:	2001      	movs	r0, #1
 800684e:	f000 fea2 	bl	8007596 <xQueueCreateMutexStatic>
 8006852:	6278      	str	r0, [r7, #36]	; 0x24
 8006854:	e00e      	b.n	8006874 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006862:	2004      	movs	r0, #4
 8006864:	f000 fe7f 	bl	8007566 <xQueueCreateMutex>
 8006868:	6278      	str	r0, [r7, #36]	; 0x24
 800686a:	e003      	b.n	8006874 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800686c:	2001      	movs	r0, #1
 800686e:	f000 fe7a 	bl	8007566 <xQueueCreateMutex>
 8006872:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00c      	beq.n	8006894 <osMutexNew+0x110>
        if (attr != NULL) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <osMutexNew+0x104>
          name = attr->name;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e001      	b.n	800688c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800688c:	6979      	ldr	r1, [r7, #20]
 800688e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006890:	f001 fd88 	bl	80083a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <osMutexNew+0x124>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200000d4 	.word	0x200000d4

080068b8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d6:	f3ef 8305 	mrs	r3, IPSR
 80068da:	613b      	str	r3, [r7, #16]
  return(result);
 80068dc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e2:	f3ef 8310 	mrs	r3, PRIMASK
 80068e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <osMutexAcquire+0x52>
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <osMutexAcquire+0xb8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d103      	bne.n	800690a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006902:	f06f 0305 	mvn.w	r3, #5
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e02c      	b.n	8006964 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006910:	f06f 0303 	mvn.w	r3, #3
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	e025      	b.n	8006964 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d011      	beq.n	8006942 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	69b8      	ldr	r0, [r7, #24]
 8006922:	f000 fe87 	bl	8007634 <xQueueTakeMutexRecursive>
 8006926:	4603      	mov	r3, r0
 8006928:	2b01      	cmp	r3, #1
 800692a:	d01b      	beq.n	8006964 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006932:	f06f 0301 	mvn.w	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e014      	b.n	8006964 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800693a:	f06f 0302 	mvn.w	r3, #2
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e010      	b.n	8006964 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	69b8      	ldr	r0, [r7, #24]
 8006946:	f001 fa19 	bl	8007d7c <xQueueSemaphoreTake>
 800694a:	4603      	mov	r3, r0
 800694c:	2b01      	cmp	r3, #1
 800694e:	d009      	beq.n	8006964 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006956:	f06f 0301 	mvn.w	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e002      	b.n	8006964 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800695e:	f06f 0302 	mvn.w	r3, #2
 8006962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006964:	69fb      	ldr	r3, [r7, #28]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200000d4 	.word	0x200000d4

08006974 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006990:	f3ef 8305 	mrs	r3, IPSR
 8006994:	613b      	str	r3, [r7, #16]
  return(result);
 8006996:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10f      	bne.n	80069bc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069a8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <osMutexRelease+0x50>
 80069b4:	4b16      	ldr	r3, [pc, #88]	; (8006a10 <osMutexRelease+0x9c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d103      	bne.n	80069c4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80069bc:	f06f 0305 	mvn.w	r3, #5
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	e01f      	b.n	8006a04 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d103      	bne.n	80069d2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80069ca:	f06f 0303 	mvn.w	r3, #3
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e018      	b.n	8006a04 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80069d8:	69b8      	ldr	r0, [r7, #24]
 80069da:	f000 fdf7 	bl	80075cc <xQueueGiveMutexRecursive>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d00f      	beq.n	8006a04 <osMutexRelease+0x90>
        stat = osErrorResource;
 80069e4:	f06f 0302 	mvn.w	r3, #2
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e00b      	b.n	8006a04 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	69b8      	ldr	r0, [r7, #24]
 80069f4:	f000 febe 	bl	8007774 <xQueueGenericSend>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d002      	beq.n	8006a04 <osMutexRelease+0x90>
        stat = osErrorResource;
 80069fe:	f06f 0302 	mvn.w	r3, #2
 8006a02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006a04:	69fb      	ldr	r3, [r7, #28]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200000d4 	.word	0x200000d4

08006a14 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08c      	sub	sp, #48	; 0x30
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a24:	f3ef 8305 	mrs	r3, IPSR
 8006a28:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 8086 	bne.w	8006b3e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	617b      	str	r3, [r7, #20]
  return(result);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	613b      	str	r3, [r7, #16]
  return(result);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <osSemaphoreNew+0x3e>
 8006a4a:	4b3f      	ldr	r3, [pc, #252]	; (8006b48 <osSemaphoreNew+0x134>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d075      	beq.n	8006b3e <osSemaphoreNew+0x12a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d072      	beq.n	8006b3e <osSemaphoreNew+0x12a>
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d86e      	bhi.n	8006b3e <osSemaphoreNew+0x12a>
    mem = -1;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d015      	beq.n	8006a98 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <osSemaphoreNew+0x6e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b4f      	cmp	r3, #79	; 0x4f
 8006a7a:	d902      	bls.n	8006a82 <osSemaphoreNew+0x6e>
        mem = 1;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	e00c      	b.n	8006a9c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <osSemaphoreNew+0x88>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <osSemaphoreNew+0x88>
          mem = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	e001      	b.n	8006a9c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d04c      	beq.n	8006b3e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d128      	bne.n	8006afc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10a      	bne.n	8006ac6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	9200      	str	r2, [sp, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	2001      	movs	r0, #1
 8006abe:	f000 fc5d 	bl	800737c <xQueueGenericCreateStatic>
 8006ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ac4:	e005      	b.n	8006ad2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2001      	movs	r0, #1
 8006acc:	f000 fcce 	bl	800746c <xQueueGenericCreate>
 8006ad0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d022      	beq.n	8006b1e <osSemaphoreNew+0x10a>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01f      	beq.n	8006b1e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae6:	f000 fe45 	bl	8007774 <xQueueGenericSend>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d016      	beq.n	8006b1e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af2:	f001 fb0b 	bl	800810c <vQueueDelete>
            hSemaphore = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
 8006afa:	e010      	b.n	8006b1e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d108      	bne.n	8006b14 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fdc8 	bl	80076a0 <xQueueCreateCountingSemaphoreStatic>
 8006b10:	6278      	str	r0, [r7, #36]	; 0x24
 8006b12:	e004      	b.n	8006b1e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fdf9 	bl	800770e <xQueueCreateCountingSemaphore>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e001      	b.n	8006b36 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b3a:	f001 fc33 	bl	80083a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	; 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200000d4 	.word	0x200000d4

08006b4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b64:	f06f 0303 	mvn.w	r3, #3
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	e04b      	b.n	8006c04 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6c:	f3ef 8305 	mrs	r3, IPSR
 8006b70:	617b      	str	r3, [r7, #20]
  return(result);
 8006b72:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10f      	bne.n	8006b98 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b78:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b84:	f3ef 8311 	mrs	r3, BASEPRI
 8006b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d026      	beq.n	8006bde <osSemaphoreAcquire+0x92>
 8006b90:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <osSemaphoreAcquire+0xc4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d122      	bne.n	8006bde <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006b9e:	f06f 0303 	mvn.w	r3, #3
 8006ba2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ba4:	e02d      	b.n	8006c02 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006baa:	f107 0308 	add.w	r3, r7, #8
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f001 f9ee 	bl	8007f94 <xQueueReceiveFromISR>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d003      	beq.n	8006bc6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006bbe:	f06f 0302 	mvn.w	r3, #2
 8006bc2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006bc4:	e01d      	b.n	8006c02 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <osSemaphoreAcquire+0xb6>
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <osSemaphoreAcquire+0xc8>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006bdc:	e011      	b.n	8006c02 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	69b8      	ldr	r0, [r7, #24]
 8006be2:	f001 f8cb 	bl	8007d7c <xQueueSemaphoreTake>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d00b      	beq.n	8006c04 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006bf2:	f06f 0301 	mvn.w	r3, #1
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e004      	b.n	8006c04 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006bfa:	f06f 0302 	mvn.w	r3, #2
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	e000      	b.n	8006c04 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006c02:	bf00      	nop
      }
    }
  }

  return (stat);
 8006c04:	69fb      	ldr	r3, [r7, #28]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200000d4 	.word	0x200000d4
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c2e:	f06f 0303 	mvn.w	r3, #3
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	e03e      	b.n	8006cb4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8006c3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10f      	bne.n	8006c62 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	613b      	str	r3, [r7, #16]
  return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01e      	beq.n	8006c98 <osSemaphoreRelease+0x80>
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <osSemaphoreRelease+0xa8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d11a      	bne.n	8006c98 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	69b8      	ldr	r0, [r7, #24]
 8006c6e:	f000 ff17 	bl	8007aa0 <xQueueGiveFromISR>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d003      	beq.n	8006c80 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006c78:	f06f 0302 	mvn.w	r3, #2
 8006c7c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c7e:	e018      	b.n	8006cb2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d015      	beq.n	8006cb2 <osSemaphoreRelease+0x9a>
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <osSemaphoreRelease+0xac>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c96:	e00c      	b.n	8006cb2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	69b8      	ldr	r0, [r7, #24]
 8006ca0:	f000 fd68 	bl	8007774 <xQueueGenericSend>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d004      	beq.n	8006cb4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006caa:	f06f 0302 	mvn.w	r3, #2
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e000      	b.n	8006cb4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cb2:	bf00      	nop
    }
  }

  return (stat);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200000d4 	.word	0x200000d4
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd4:	f3ef 8305 	mrs	r3, IPSR
 8006cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cda:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cec:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <osSemaphoreDelete+0x40>
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <osSemaphoreDelete+0x68>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d103      	bne.n	8006d08 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006d00:	f06f 0305 	mvn.w	r3, #5
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	e00e      	b.n	8006d26 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d103      	bne.n	8006d16 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006d0e:	f06f 0303 	mvn.w	r3, #3
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e007      	b.n	8006d26 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006d16:	69b8      	ldr	r0, [r7, #24]
 8006d18:	f001 fb6e 	bl	80083f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006d20:	69b8      	ldr	r0, [r7, #24]
 8006d22:	f001 f9f3 	bl	800810c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	200000d4 	.word	0x200000d4

08006d34 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d44:	f3ef 8305 	mrs	r3, IPSR
 8006d48:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d16f      	bne.n	8006e30 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d50:	f3ef 8310 	mrs	r3, PRIMASK
 8006d54:	617b      	str	r3, [r7, #20]
  return(result);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d60:	613b      	str	r3, [r7, #16]
  return(result);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <osMessageQueueNew+0x3c>
 8006d68:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <osMessageQueueNew+0x108>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d05f      	beq.n	8006e30 <osMessageQueueNew+0xfc>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05c      	beq.n	8006e30 <osMessageQueueNew+0xfc>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d059      	beq.n	8006e30 <osMessageQueueNew+0xfc>
    mem = -1;
 8006d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d029      	beq.n	8006ddc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d012      	beq.n	8006db6 <osMessageQueueNew+0x82>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b4f      	cmp	r3, #79	; 0x4f
 8006d96:	d90e      	bls.n	8006db6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <osMessageQueueNew+0x82>
        mem = 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	623b      	str	r3, [r7, #32]
 8006db4:	e014      	b.n	8006de0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <osMessageQueueNew+0xac>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10c      	bne.n	8006de0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <osMessageQueueNew+0xac>
          mem = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	623b      	str	r3, [r7, #32]
 8006dda:	e001      	b.n	8006de0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d10b      	bne.n	8006dfe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2100      	movs	r1, #0
 8006df0:	9100      	str	r1, [sp, #0]
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fac1 	bl	800737c <xQueueGenericCreateStatic>
 8006dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8006dfc:	e008      	b.n	8006e10 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006e04:	2200      	movs	r2, #0
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fb2f 	bl	800746c <xQueueGenericCreate>
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e001      	b.n	8006e28 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e28:	69f9      	ldr	r1, [r7, #28]
 8006e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e2c:	f001 faba 	bl	80083a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3728      	adds	r7, #40	; 0x28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200000d4 	.word	0x200000d4

08006e40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e58:	f3ef 8305 	mrs	r3, IPSR
 8006e5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e5e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10f      	bne.n	8006e84 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e64:	f3ef 8310 	mrs	r3, PRIMASK
 8006e68:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d105      	bne.n	8006e7c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e70:	f3ef 8311 	mrs	r3, BASEPRI
 8006e74:	617b      	str	r3, [r7, #20]
  return(result);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d02c      	beq.n	8006ed6 <osMessageQueuePut+0x96>
 8006e7c:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <osMessageQueuePut+0xe0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d128      	bne.n	8006ed6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <osMessageQueuePut+0x56>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <osMessageQueuePut+0x56>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006e96:	f06f 0303 	mvn.w	r3, #3
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e9c:	e039      	b.n	8006f12 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ea2:	f107 0210 	add.w	r2, r7, #16
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	6a38      	ldr	r0, [r7, #32]
 8006eac:	f000 fd60 	bl	8007970 <xQueueGenericSendFromISR>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d003      	beq.n	8006ebe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006eb6:	f06f 0302 	mvn.w	r3, #2
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ebc:	e029      	b.n	8006f12 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d026      	beq.n	8006f12 <osMessageQueuePut+0xd2>
 8006ec4:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <osMessageQueuePut+0xe4>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ed4:	e01d      	b.n	8006f12 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <osMessageQueuePut+0xa2>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006ee2:	f06f 0303 	mvn.w	r3, #3
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	e014      	b.n	8006f14 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006eea:	2300      	movs	r3, #0
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6a38      	ldr	r0, [r7, #32]
 8006ef2:	f000 fc3f 	bl	8007774 <xQueueGenericSend>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d00b      	beq.n	8006f14 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006f02:	f06f 0301 	mvn.w	r3, #1
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	e004      	b.n	8006f14 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006f0a:	f06f 0302 	mvn.w	r3, #2
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f10:	e000      	b.n	8006f14 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200000d4 	.word	0x200000d4
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f44:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10f      	bne.n	8006f6a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f56:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d02c      	beq.n	8006fbc <osMessageQueueGet+0x94>
 8006f62:	4b28      	ldr	r3, [pc, #160]	; (8007004 <osMessageQueueGet+0xdc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d128      	bne.n	8006fbc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <osMessageQueueGet+0x54>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <osMessageQueueGet+0x54>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006f7c:	f06f 0303 	mvn.w	r3, #3
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f82:	e038      	b.n	8006ff6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	6a38      	ldr	r0, [r7, #32]
 8006f92:	f000 ffff 	bl	8007f94 <xQueueReceiveFromISR>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d003      	beq.n	8006fa4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006f9c:	f06f 0302 	mvn.w	r3, #2
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fa2:	e028      	b.n	8006ff6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d025      	beq.n	8006ff6 <osMessageQueueGet+0xce>
 8006faa:	4b17      	ldr	r3, [pc, #92]	; (8007008 <osMessageQueueGet+0xe0>)
 8006fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fba:	e01c      	b.n	8006ff6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <osMessageQueueGet+0xa0>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006fc8:	f06f 0303 	mvn.w	r3, #3
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fce:	e013      	b.n	8006ff8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	6a38      	ldr	r0, [r7, #32]
 8006fd6:	f000 fdf1 	bl	8007bbc <xQueueReceive>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d00b      	beq.n	8006ff8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006fe6:	f06f 0301 	mvn.w	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
 8006fec:	e004      	b.n	8006ff8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006fee:	f06f 0302 	mvn.w	r3, #2
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff4:	e000      	b.n	8006ff8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ff6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3728      	adds	r7, #40	; 0x28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200000d4 	.word	0x200000d4
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <osMessageQueueGetCount+0x18>
    count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	e01e      	b.n	8007062 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007024:	f3ef 8305 	mrs	r3, IPSR
 8007028:	617b      	str	r3, [r7, #20]
  return(result);
 800702a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10f      	bne.n	8007050 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	613b      	str	r3, [r7, #16]
  return(result);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800703c:	f3ef 8311 	mrs	r3, BASEPRI
 8007040:	60fb      	str	r3, [r7, #12]
  return(result);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <osMessageQueueGetCount+0x4e>
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <osMessageQueueGetCount+0x60>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d104      	bne.n	800705a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007050:	69b8      	ldr	r0, [r7, #24]
 8007052:	f001 f83d 	bl	80080d0 <uxQueueMessagesWaitingFromISR>
 8007056:	61f8      	str	r0, [r7, #28]
 8007058:	e003      	b.n	8007062 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f001 f81a 	bl	8008094 <uxQueueMessagesWaiting>
 8007060:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007062:	69fb      	ldr	r3, [r7, #28]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200000d4 	.word	0x200000d4

08007070 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800707c:	f3ef 8305 	mrs	r3, IPSR
 8007080:	617b      	str	r3, [r7, #20]
  return(result);
 8007082:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10f      	bne.n	80070a8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007088:	f3ef 8310 	mrs	r3, PRIMASK
 800708c:	613b      	str	r3, [r7, #16]
  return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007094:	f3ef 8311 	mrs	r3, BASEPRI
 8007098:	60fb      	str	r3, [r7, #12]
  return(result);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <osMessageQueueDelete+0x40>
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <osMessageQueueDelete+0x68>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d103      	bne.n	80070b0 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80070a8:	f06f 0305 	mvn.w	r3, #5
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	e00e      	b.n	80070ce <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80070b6:	f06f 0303 	mvn.w	r3, #3
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e007      	b.n	80070ce <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80070be:	69b8      	ldr	r0, [r7, #24]
 80070c0:	f001 f99a 	bl	80083f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80070c8:	69b8      	ldr	r0, [r7, #24]
 80070ca:	f001 f81f 	bl	800810c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80070ce:	69fb      	ldr	r3, [r7, #28]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	200000d4 	.word	0x200000d4

080070dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a07      	ldr	r2, [pc, #28]	; (8007108 <vApplicationGetIdleTaskMemory+0x2c>)
 80070ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a06      	ldr	r2, [pc, #24]	; (800710c <vApplicationGetIdleTaskMemory+0x30>)
 80070f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200000d8 	.word	0x200000d8
 800710c:	20000194 	.word	0x20000194

08007110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a07      	ldr	r2, [pc, #28]	; (800713c <vApplicationGetTimerTaskMemory+0x2c>)
 8007120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4a06      	ldr	r2, [pc, #24]	; (8007140 <vApplicationGetTimerTaskMemory+0x30>)
 8007126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800712e:	601a      	str	r2, [r3, #0]
}
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	20000394 	.word	0x20000394
 8007140:	20000450 	.word	0x20000450

08007144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f103 0208 	add.w	r2, r3, #8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f103 0208 	add.w	r2, r3, #8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f103 0208 	add.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d103      	bne.n	8007206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e00c      	b.n	8007220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3308      	adds	r3, #8
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	e002      	b.n	8007214 <vListInsert+0x2e>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d2f6      	bcs.n	800720e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	601a      	str	r2, [r3, #0]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6892      	ldr	r2, [r2, #8]
 800726e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d103      	bne.n	800728c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	1e5a      	subs	r2, r3, #1
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072d6:	f002 fdad 	bl	8009e34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	3b01      	subs	r3, #1
 8007308:	68f9      	ldr	r1, [r7, #12]
 800730a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	441a      	add	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d114      	bne.n	8007356 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3310      	adds	r3, #16
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fd53 	bl	8008de4 <xTaskRemoveFromEventList>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d012      	beq.n	800736a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <xQueueGenericReset+0xcc>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	e009      	b.n	800736a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3310      	adds	r3, #16
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fef2 	bl	8007144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3324      	adds	r3, #36	; 0x24
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff feed 	bl	8007144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800736a:	f002 fd93 	bl	8009e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800736e:	2301      	movs	r3, #1
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08e      	sub	sp, #56	; 0x38
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <xQueueGenericCreateStatic+0x52>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <xQueueGenericCreateStatic+0x56>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <xQueueGenericCreateStatic+0x58>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	623b      	str	r3, [r7, #32]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <xQueueGenericCreateStatic+0x7e>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <xQueueGenericCreateStatic+0x82>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <xQueueGenericCreateStatic+0x84>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	61fb      	str	r3, [r7, #28]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800741a:	2350      	movs	r3, #80	; 0x50
 800741c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b50      	cmp	r3, #80	; 0x50
 8007422:	d00a      	beq.n	800743a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	61bb      	str	r3, [r7, #24]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800743a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800744e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 f845 	bl	80074ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007464:	4618      	mov	r0, r3
 8007466:	3730      	adds	r7, #48	; 0x30
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	613b      	str	r3, [r7, #16]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800749c:	2300      	movs	r3, #0
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	e004      	b.n	80074ac <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3350      	adds	r3, #80	; 0x50
 80074b0:	4618      	mov	r0, r3
 80074b2:	f002 fdcf 	bl	800a054 <pvPortMalloc>
 80074b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	3350      	adds	r3, #80	; 0x50
 80074c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074d0:	79fa      	ldrb	r2, [r7, #7]
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f805 	bl	80074ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e2:	69bb      	ldr	r3, [r7, #24]
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e002      	b.n	800750e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800751a:	2101      	movs	r1, #1
 800751c:	69b8      	ldr	r0, [r7, #24]
 800751e:	f7ff fec5 	bl	80072ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00e      	beq.n	800755e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007552:	2300      	movs	r3, #0
 8007554:	2200      	movs	r2, #0
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f90b 	bl	8007774 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	4603      	mov	r3, r0
 800756e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007570:	2301      	movs	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	461a      	mov	r2, r3
 800757c:	6939      	ldr	r1, [r7, #16]
 800757e:	6978      	ldr	r0, [r7, #20]
 8007580:	f7ff ff74 	bl	800746c <xQueueGenericCreate>
 8007584:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff ffd3 	bl	8007532 <prvInitialiseMutex>

		return xNewQueue;
 800758c:	68fb      	ldr	r3, [r7, #12]
	}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af02      	add	r7, sp, #8
 800759c:	4603      	mov	r3, r0
 800759e:	6039      	str	r1, [r7, #0]
 80075a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075a2:	2301      	movs	r3, #1
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	6939      	ldr	r1, [r7, #16]
 80075b4:	6978      	ldr	r0, [r7, #20]
 80075b6:	f7ff fee1 	bl	800737c <xQueueGenericCreateStatic>
 80075ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ffb8 	bl	8007532 <prvInitialiseMutex>

		return xNewQueue;
 80075c2:	68fb      	ldr	r3, [r7, #12]
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	60fb      	str	r3, [r7, #12]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	689c      	ldr	r4, [r3, #8]
 80075f8:	f001 fdb6 	bl	8009168 <xTaskGetCurrentTaskHandle>
 80075fc:	4603      	mov	r3, r0
 80075fe:	429c      	cmp	r4, r3
 8007600:	d111      	bne.n	8007626 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	1e5a      	subs	r2, r3, #1
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007614:	2300      	movs	r3, #0
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f000 f8aa 	bl	8007774 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007620:	2301      	movs	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e001      	b.n	800762a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800762a:	697b      	ldr	r3, [r7, #20]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	bd90      	pop	{r4, r7, pc}

08007634 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	689c      	ldr	r4, [r3, #8]
 8007662:	f001 fd81 	bl	8009168 <xTaskGetCurrentTaskHandle>
 8007666:	4603      	mov	r3, r0
 8007668:	429c      	cmp	r4, r3
 800766a:	d107      	bne.n	800767c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007676:	2301      	movs	r3, #1
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e00c      	b.n	8007696 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6938      	ldr	r0, [r7, #16]
 8007680:	f000 fb7c 	bl	8007d7c <xQueueSemaphoreTake>
 8007684:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007696:	697b      	ldr	r3, [r7, #20]
	}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd90      	pop	{r4, r7, pc}

080076a0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	61bb      	str	r3, [r7, #24]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d90a      	bls.n	80076e6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	617b      	str	r3, [r7, #20]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076e6:	2302      	movs	r3, #2
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff fe43 	bl	800737c <xQueueGenericCreateStatic>
 80076f6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007704:	69fb      	ldr	r3, [r7, #28]
	}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	613b      	str	r3, [r7, #16]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	429a      	cmp	r2, r3
 800773a:	d90a      	bls.n	8007752 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60fb      	str	r3, [r7, #12]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007752:	2202      	movs	r2, #2
 8007754:	2100      	movs	r1, #0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff fe88 	bl	800746c <xQueueGenericCreate>
 800775c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800776a:	697b      	ldr	r3, [r7, #20]
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08e      	sub	sp, #56	; 0x38
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007782:	2300      	movs	r3, #0
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xQueueGenericSend+0x32>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <xQueueGenericSend+0x40>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <xQueueGenericSend+0x44>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <xQueueGenericSend+0x46>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <xQueueGenericSend+0x60>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d103      	bne.n	80077e2 <xQueueGenericSend+0x6e>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <xQueueGenericSend+0x72>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueGenericSend+0x74>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericSend+0x8e>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007802:	f001 fcc1 	bl	8009188 <xTaskGetSchedulerState>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueGenericSend+0x9e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueGenericSend+0xa2>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueGenericSend+0xa4>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueGenericSend+0xbe>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f002 faff 	bl	8009e34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <xQueueGenericSend+0xd4>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d129      	bne.n	800789c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800784e:	f000 fc98 	bl	8008182 <prvCopyDataToQueue>
 8007852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d010      	beq.n	800787e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	4618      	mov	r0, r3
 8007862:	f001 fabf 	bl	8008de4 <xTaskRemoveFromEventList>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d013      	beq.n	8007894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800786c:	4b3f      	ldr	r3, [pc, #252]	; (800796c <xQueueGenericSend+0x1f8>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	e00a      	b.n	8007894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b39      	ldr	r3, [pc, #228]	; (800796c <xQueueGenericSend+0x1f8>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007894:	f002 fafe 	bl	8009e94 <vPortExitCritical>
				return pdPASS;
 8007898:	2301      	movs	r3, #1
 800789a:	e063      	b.n	8007964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d103      	bne.n	80078aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078a2:	f002 faf7 	bl	8009e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	e05c      	b.n	8007964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 faf9 	bl	8008eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078ba:	2301      	movs	r3, #1
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078be:	f002 fae9 	bl	8009e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078c2:	f001 f853 	bl	800896c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078c6:	f002 fab5 	bl	8009e34 <vPortEnterCritical>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078d0:	b25b      	sxtb	r3, r3
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d103      	bne.n	80078e0 <xQueueGenericSend+0x16c>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e6:	b25b      	sxtb	r3, r3
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d103      	bne.n	80078f6 <xQueueGenericSend+0x182>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f6:	f002 facd 	bl	8009e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078fa:	1d3a      	adds	r2, r7, #4
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fae8 	bl	8008ed8 <xTaskCheckForTimeOut>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d124      	bne.n	8007958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800790e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007910:	f000 fd2f 	bl	8008372 <prvIsQueueFull>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	3310      	adds	r3, #16
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f001 fa0e 	bl	8008d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800792a:	f000 fcba 	bl	80082a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800792e:	f001 f82b 	bl	8008988 <xTaskResumeAll>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	f47f af7c 	bne.w	8007832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <xQueueGenericSend+0x1f8>)
 800793c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	e772      	b.n	8007832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800794c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800794e:	f000 fca8 	bl	80082a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007952:	f001 f819 	bl	8008988 <xTaskResumeAll>
 8007956:	e76c      	b.n	8007832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800795a:	f000 fca2 	bl	80082a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800795e:	f001 f813 	bl	8008988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007964:	4618      	mov	r0, r3
 8007966:	3738      	adds	r7, #56	; 0x38
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08e      	sub	sp, #56	; 0x38
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <xQueueGenericSendFromISR+0x3c>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <xQueueGenericSendFromISR+0x40>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <xQueueGenericSendFromISR+0x42>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	623b      	str	r3, [r7, #32]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d103      	bne.n	80079da <xQueueGenericSendFromISR+0x6a>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <xQueueGenericSendFromISR+0x6e>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <xQueueGenericSendFromISR+0x70>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	61fb      	str	r3, [r7, #28]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079fa:	f002 fafd 	bl	8009ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	61ba      	str	r2, [r7, #24]
 8007a14:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <xQueueGenericSendFromISR+0xbc>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d12c      	bne.n	8007a86 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a3c:	f000 fba1 	bl	8008182 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d112      	bne.n	8007a70 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d016      	beq.n	8007a80 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f9c4 	bl	8008de4 <xTaskRemoveFromEventList>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e007      	b.n	8007a80 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	b25a      	sxtb	r2, r3
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a80:	2301      	movs	r3, #1
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007a84:	e001      	b.n	8007a8a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3738      	adds	r7, #56	; 0x38
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	623b      	str	r3, [r7, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61fb      	str	r3, [r7, #28]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <xQueueGiveFromISR+0x58>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <xQueueGiveFromISR+0x5c>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <xQueueGiveFromISR+0x5e>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	61bb      	str	r3, [r7, #24]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b18:	f002 fa6e 	bl	8009ff8 <vPortValidateInterruptPriority>
	__asm volatile
 8007b1c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	617a      	str	r2, [r7, #20]
 8007b32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b34:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d22b      	bcs.n	8007ba0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d112      	bne.n	8007b8a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d016      	beq.n	8007b9a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	3324      	adds	r3, #36	; 0x24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f937 	bl	8008de4 <xTaskRemoveFromEventList>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00e      	beq.n	8007b9a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e007      	b.n	8007b9a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	b25a      	sxtb	r2, r3
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9e:	e001      	b.n	8007ba4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3738      	adds	r7, #56	; 0x38
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	; 0x30
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <xQueueReceive+0x30>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	623b      	str	r3, [r7, #32]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <xQueueReceive+0x3e>
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueReceive+0x42>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueReceive+0x44>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <xQueueReceive+0x5e>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61fb      	str	r3, [r7, #28]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c1a:	f001 fab5 	bl	8009188 <xTaskGetSchedulerState>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <xQueueReceive+0x6e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <xQueueReceive+0x72>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e000      	b.n	8007c30 <xQueueReceive+0x74>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <xQueueReceive+0x8e>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	61bb      	str	r3, [r7, #24]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c4a:	f002 f8f3 	bl	8009e34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01f      	beq.n	8007c9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5e:	f000 fafa 	bl	8008256 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00f      	beq.n	8007c92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	3310      	adds	r3, #16
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f8b4 	bl	8008de4 <xTaskRemoveFromEventList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c82:	4b3d      	ldr	r3, [pc, #244]	; (8007d78 <xQueueReceive+0x1bc>)
 8007c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c92:	f002 f8ff 	bl	8009e94 <vPortExitCritical>
				return pdPASS;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e069      	b.n	8007d6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ca0:	f002 f8f8 	bl	8009e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e062      	b.n	8007d6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cae:	f107 0310 	add.w	r3, r7, #16
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f8fa 	bl	8008eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cbc:	f002 f8ea 	bl	8009e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cc0:	f000 fe54 	bl	800896c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cc4:	f002 f8b6 	bl	8009e34 <vPortEnterCritical>
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d103      	bne.n	8007cde <xQueueReceive+0x122>
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d103      	bne.n	8007cf4 <xQueueReceive+0x138>
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf4:	f002 f8ce 	bl	8009e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cf8:	1d3a      	adds	r2, r7, #4
 8007cfa:	f107 0310 	add.w	r3, r7, #16
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f8e9 	bl	8008ed8 <xTaskCheckForTimeOut>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d123      	bne.n	8007d54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0e:	f000 fb1a 	bl	8008346 <prvIsQueueEmpty>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	3324      	adds	r3, #36	; 0x24
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f80f 	bl	8008d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d28:	f000 fabb 	bl	80082a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d2c:	f000 fe2c 	bl	8008988 <xTaskResumeAll>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d189      	bne.n	8007c4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <xQueueReceive+0x1bc>)
 8007d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	e780      	b.n	8007c4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4a:	f000 faaa 	bl	80082a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d4e:	f000 fe1b 	bl	8008988 <xTaskResumeAll>
 8007d52:	e77a      	b.n	8007c4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d56:	f000 faa4 	bl	80082a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d5a:	f000 fe15 	bl	8008988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d60:	f000 faf1 	bl	8008346 <prvIsQueueEmpty>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f43f af6f 	beq.w	8007c4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3730      	adds	r7, #48	; 0x30
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08e      	sub	sp, #56	; 0x38
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	623b      	str	r3, [r7, #32]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	61fb      	str	r3, [r7, #28]
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dcc:	f001 f9dc 	bl	8009188 <xTaskGetSchedulerState>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <xQueueSemaphoreTake+0x60>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <xQueueSemaphoreTake+0x64>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <xQueueSemaphoreTake+0x66>
 8007de0:	2300      	movs	r3, #0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	61bb      	str	r3, [r7, #24]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dfc:	f002 f81a 	bl	8009e34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d024      	beq.n	8007e56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	1e5a      	subs	r2, r3, #1
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e1c:	f001 fb2a 	bl	8009474 <pvTaskIncrementMutexHeldCount>
 8007e20:	4602      	mov	r2, r0
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00f      	beq.n	8007e4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	3310      	adds	r3, #16
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ffd6 	bl	8008de4 <xTaskRemoveFromEventList>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e3e:	4b54      	ldr	r3, [pc, #336]	; (8007f90 <xQueueSemaphoreTake+0x214>)
 8007e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e4e:	f002 f821 	bl	8009e94 <vPortExitCritical>
				return pdPASS;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e097      	b.n	8007f86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d111      	bne.n	8007e80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	617b      	str	r3, [r7, #20]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e78:	f002 f80c 	bl	8009e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e082      	b.n	8007f86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e86:	f107 030c 	add.w	r3, r7, #12
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f80e 	bl	8008eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e94:	f001 fffe 	bl	8009e94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e98:	f000 fd68 	bl	800896c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e9c:	f001 ffca 	bl	8009e34 <vPortEnterCritical>
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ea6:	b25b      	sxtb	r3, r3
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	d103      	bne.n	8007eb6 <xQueueSemaphoreTake+0x13a>
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d103      	bne.n	8007ecc <xQueueSemaphoreTake+0x150>
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ecc:	f001 ffe2 	bl	8009e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	f107 030c 	add.w	r3, r7, #12
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fffd 	bl	8008ed8 <xTaskCheckForTimeOut>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d132      	bne.n	8007f4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ee6:	f000 fa2e 	bl	8008346 <prvIsQueueEmpty>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d026      	beq.n	8007f3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d109      	bne.n	8007f0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007ef8:	f001 ff9c 	bl	8009e34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f95f 	bl	80091c4 <xTaskPriorityInherit>
 8007f06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f08:	f001 ffc4 	bl	8009e94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ff15 	bl	8008d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f1c:	f000 f9c1 	bl	80082a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f20:	f000 fd32 	bl	8008988 <xTaskResumeAll>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f47f af68 	bne.w	8007dfc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007f2c:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <xQueueSemaphoreTake+0x214>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	e75e      	b.n	8007dfc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f40:	f000 f9af 	bl	80082a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f44:	f000 fd20 	bl	8008988 <xTaskResumeAll>
 8007f48:	e758      	b.n	8007dfc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f4c:	f000 f9a9 	bl	80082a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f50:	f000 fd1a 	bl	8008988 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f56:	f000 f9f6 	bl	8008346 <prvIsQueueEmpty>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f43f af4d 	beq.w	8007dfc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00d      	beq.n	8007f84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007f68:	f001 ff64 	bl	8009e34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6e:	f000 f8f0 	bl	8008152 <prvGetDisinheritPriorityAfterTimeout>
 8007f72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 f9f8 	bl	8009370 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f80:	f001 ff88 	bl	8009e94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3738      	adds	r7, #56	; 0x38
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08e      	sub	sp, #56	; 0x38
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	623b      	str	r3, [r7, #32]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <xQueueReceiveFromISR+0x3a>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <xQueueReceiveFromISR+0x3e>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xQueueReceiveFromISR+0x40>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	61fb      	str	r3, [r7, #28]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fee:	f002 f803 	bl	8009ff8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	61ba      	str	r2, [r7, #24]
 8008008:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800800a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d02f      	beq.n	800807a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008028:	f000 f915 	bl	8008256 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	1e5a      	subs	r2, r3, #1
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d112      	bne.n	8008064 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d016      	beq.n	8008074 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	3310      	adds	r3, #16
 800804a:	4618      	mov	r0, r3
 800804c:	f000 feca 	bl	8008de4 <xTaskRemoveFromEventList>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e007      	b.n	8008074 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008068:	3301      	adds	r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	b25a      	sxtb	r2, r3
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008074:	2301      	movs	r3, #1
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
 8008078:	e001      	b.n	800807e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800807a:	2300      	movs	r3, #0
 800807c:	637b      	str	r3, [r7, #52]	; 0x34
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f383 8811 	msr	BASEPRI, r3
}
 8008088:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800808a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800808c:	4618      	mov	r0, r3
 800808e:	3738      	adds	r7, #56	; 0x38
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60bb      	str	r3, [r7, #8]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80080b8:	f001 febc 	bl	8009e34 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80080c2:	f001 fee7 	bl	8009e94 <vPortExitCritical>

	return uxReturn;
 80080c6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60fb      	str	r3, [r7, #12]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80080fe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008100:	4618      	mov	r0, r3
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <vQueueDelete+0x28>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	60bb      	str	r3, [r7, #8]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f95f 	bl	80083f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f002 f849 	bl	800a1dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d006      	beq.n	8008170 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e001      	b.n	8008174 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008174:	68fb      	ldr	r3, [r7, #12]
	}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b086      	sub	sp, #24
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10d      	bne.n	80081bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d14d      	bne.n	8008244 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f871 	bl	8009294 <xTaskPriorityDisinherit>
 80081b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]
 80081ba:	e043      	b.n	8008244 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d119      	bne.n	80081f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6858      	ldr	r0, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	461a      	mov	r2, r3
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	f00f fcc0 	bl	8017b52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	441a      	add	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d32b      	bcc.n	8008244 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	e026      	b.n	8008244 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68d8      	ldr	r0, [r3, #12]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	461a      	mov	r2, r3
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	f00f fca6 	bl	8017b52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	425b      	negs	r3, r3
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d207      	bcs.n	8008232 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	425b      	negs	r3, r3
 800822c:	441a      	add	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d105      	bne.n	8008244 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3b01      	subs	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800824c:	697b      	ldr	r3, [r7, #20]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d018      	beq.n	800829a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	441a      	add	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d303      	bcc.n	800828a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68d9      	ldr	r1, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	461a      	mov	r2, r3
 8008294:	6838      	ldr	r0, [r7, #0]
 8008296:	f00f fc5c 	bl	8017b52 <memcpy>
	}
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082aa:	f001 fdc3 	bl	8009e34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082b6:	e011      	b.n	80082dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d012      	beq.n	80082e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3324      	adds	r3, #36	; 0x24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fd8d 	bl	8008de4 <xTaskRemoveFromEventList>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082d0:	f000 fe64 	bl	8008f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dce9      	bgt.n	80082b8 <prvUnlockQueue+0x16>
 80082e4:	e000      	b.n	80082e8 <prvUnlockQueue+0x46>
					break;
 80082e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	22ff      	movs	r2, #255	; 0xff
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082f0:	f001 fdd0 	bl	8009e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082f4:	f001 fd9e 	bl	8009e34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008300:	e011      	b.n	8008326 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d012      	beq.n	8008330 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3310      	adds	r3, #16
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fd68 	bl	8008de4 <xTaskRemoveFromEventList>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800831a:	f000 fe3f 	bl	8008f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	3b01      	subs	r3, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dce9      	bgt.n	8008302 <prvUnlockQueue+0x60>
 800832e:	e000      	b.n	8008332 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008330:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	22ff      	movs	r2, #255	; 0xff
 8008336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800833a:	f001 fdab 	bl	8009e94 <vPortExitCritical>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800834e:	f001 fd71 	bl	8009e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800835a:	2301      	movs	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	e001      	b.n	8008364 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008364:	f001 fd96 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 8008368:	68fb      	ldr	r3, [r7, #12]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800837a:	f001 fd5b 	bl	8009e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	429a      	cmp	r2, r3
 8008388:	d102      	bne.n	8008390 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	e001      	b.n	8008394 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008394:	f001 fd7e 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 8008398:	68fb      	ldr	r3, [r7, #12]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e014      	b.n	80083de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083b4:	4a0f      	ldr	r2, [pc, #60]	; (80083f4 <vQueueAddToRegistry+0x50>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083c0:	490c      	ldr	r1, [pc, #48]	; (80083f4 <vQueueAddToRegistry+0x50>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ca:	4a0a      	ldr	r2, [pc, #40]	; (80083f4 <vQueueAddToRegistry+0x50>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083d6:	e006      	b.n	80083e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b07      	cmp	r3, #7
 80083e2:	d9e7      	bls.n	80083b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20007fbc 	.word	0x20007fbc

080083f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e016      	b.n	8008434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008406:	4a10      	ldr	r2, [pc, #64]	; (8008448 <vQueueUnregisterQueue+0x50>)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d10b      	bne.n	800842e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008416:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <vQueueUnregisterQueue+0x50>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2100      	movs	r1, #0
 800841c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008420:	4a09      	ldr	r2, [pc, #36]	; (8008448 <vQueueUnregisterQueue+0x50>)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	2200      	movs	r2, #0
 800842a:	605a      	str	r2, [r3, #4]
				break;
 800842c:	e006      	b.n	800843c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b07      	cmp	r3, #7
 8008438:	d9e5      	bls.n	8008406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	20007fbc 	.word	0x20007fbc

0800844c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800845c:	f001 fcea 	bl	8009e34 <vPortEnterCritical>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008466:	b25b      	sxtb	r3, r3
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d103      	bne.n	8008476 <vQueueWaitForMessageRestricted+0x2a>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800847c:	b25b      	sxtb	r3, r3
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d103      	bne.n	800848c <vQueueWaitForMessageRestricted+0x40>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800848c:	f001 fd02 	bl	8009e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fc73 	bl	8008d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084a6:	6978      	ldr	r0, [r7, #20]
 80084a8:	f7ff fefb 	bl	80082a2 <prvUnlockQueue>
	}
 80084ac:	bf00      	nop
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	; 0x38
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xTaskCreateStatic+0x2a>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	623b      	str	r3, [r7, #32]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xTaskCreateStatic+0x46>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	61fb      	str	r3, [r7, #28]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084fa:	23bc      	movs	r3, #188	; 0xbc
 80084fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2bbc      	cmp	r3, #188	; 0xbc
 8008502:	d00a      	beq.n	800851a <xTaskCreateStatic+0x66>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	61bb      	str	r3, [r7, #24]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800851a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01e      	beq.n	8008560 <xTaskCreateStatic+0xac>
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01b      	beq.n	8008560 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	2202      	movs	r2, #2
 8008536:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800853a:	2300      	movs	r3, #0
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	9302      	str	r3, [sp, #8]
 8008542:	f107 0314 	add.w	r3, r7, #20
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f850 	bl	80085f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800855a:	f000 f8f3 	bl	8008744 <prvAddNewTaskToReadyList>
 800855e:	e001      	b.n	8008564 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008564:	697b      	ldr	r3, [r7, #20]
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3728      	adds	r7, #40	; 0x28
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800856e:	b580      	push	{r7, lr}
 8008570:	b08c      	sub	sp, #48	; 0x30
 8008572:	af04      	add	r7, sp, #16
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fd66 	bl	800a054 <pvPortMalloc>
 8008588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00e      	beq.n	80085ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008590:	20bc      	movs	r0, #188	; 0xbc
 8008592:	f001 fd5f 	bl	800a054 <pvPortMalloc>
 8008596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30
 80085a4:	e005      	b.n	80085b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085a6:	6978      	ldr	r0, [r7, #20]
 80085a8:	f001 fe18 	bl	800a1dc <vPortFree>
 80085ac:	e001      	b.n	80085b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d017      	beq.n	80085e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9303      	str	r3, [sp, #12]
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	9302      	str	r3, [sp, #8]
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f80e 	bl	80085f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085dc:	69f8      	ldr	r0, [r7, #28]
 80085de:	f000 f8b1 	bl	8008744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e002      	b.n	80085ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085e8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085ee:	69bb      	ldr	r3, [r7, #24]
	}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	461a      	mov	r2, r3
 8008610:	21a5      	movs	r1, #165	; 0xa5
 8008612:	f00f faac 	bl	8017b6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008620:	3b01      	subs	r3, #1
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	f023 0307 	bic.w	r3, r3, #7
 800862e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <prvInitialiseNewTask+0x58>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	617b      	str	r3, [r7, #20]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01f      	beq.n	8008696 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008656:	2300      	movs	r3, #0
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	e012      	b.n	8008682 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	7819      	ldrb	r1, [r3, #0]
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	3334      	adds	r3, #52	; 0x34
 800866c:	460a      	mov	r2, r1
 800866e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d006      	beq.n	800868a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	2b0f      	cmp	r3, #15
 8008686:	d9e9      	bls.n	800865c <prvInitialiseNewTask+0x64>
 8008688:	e000      	b.n	800868c <prvInitialiseNewTask+0x94>
			{
				break;
 800868a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008694:	e003      	b.n	800869e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	2b37      	cmp	r3, #55	; 0x37
 80086a2:	d901      	bls.n	80086a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086a4:	2337      	movs	r3, #55	; 0x37
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	2200      	movs	r2, #0
 80086b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	3304      	adds	r3, #4
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fd60 	bl	8007184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	3318      	adds	r3, #24
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fd5b 	bl	8007184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	3354      	adds	r3, #84	; 0x54
 80086f8:	2260      	movs	r2, #96	; 0x60
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00f fa36 	bl	8017b6e <memset>
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	4a0c      	ldr	r2, [pc, #48]	; (8008738 <prvInitialiseNewTask+0x140>)
 8008706:	659a      	str	r2, [r3, #88]	; 0x58
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	4a0c      	ldr	r2, [pc, #48]	; (800873c <prvInitialiseNewTask+0x144>)
 800870c:	65da      	str	r2, [r3, #92]	; 0x5c
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	4a0b      	ldr	r2, [pc, #44]	; (8008740 <prvInitialiseNewTask+0x148>)
 8008712:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	69b8      	ldr	r0, [r7, #24]
 800871a:	f001 fa61 	bl	8009be0 <pxPortInitialiseStack>
 800871e:	4602      	mov	r2, r0
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008730:	bf00      	nop
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	0801c27c 	.word	0x0801c27c
 800873c:	0801c29c 	.word	0x0801c29c
 8008740:	0801c25c 	.word	0x0801c25c

08008744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800874c:	f001 fb72 	bl	8009e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008750:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <prvAddNewTaskToReadyList+0xc4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	4a2c      	ldr	r2, [pc, #176]	; (8008808 <prvAddNewTaskToReadyList+0xc4>)
 8008758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800875a:	4b2c      	ldr	r3, [pc, #176]	; (800880c <prvAddNewTaskToReadyList+0xc8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008762:	4a2a      	ldr	r2, [pc, #168]	; (800880c <prvAddNewTaskToReadyList+0xc8>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008768:	4b27      	ldr	r3, [pc, #156]	; (8008808 <prvAddNewTaskToReadyList+0xc4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d110      	bne.n	8008792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008770:	f000 fc38 	bl	8008fe4 <prvInitialiseTaskLists>
 8008774:	e00d      	b.n	8008792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008776:	4b26      	ldr	r3, [pc, #152]	; (8008810 <prvAddNewTaskToReadyList+0xcc>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800877e:	4b23      	ldr	r3, [pc, #140]	; (800880c <prvAddNewTaskToReadyList+0xc8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	429a      	cmp	r2, r3
 800878a:	d802      	bhi.n	8008792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800878c:	4a1f      	ldr	r2, [pc, #124]	; (800880c <prvAddNewTaskToReadyList+0xc8>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008792:	4b20      	ldr	r3, [pc, #128]	; (8008814 <prvAddNewTaskToReadyList+0xd0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <prvAddNewTaskToReadyList+0xd0>)
 800879a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800879c:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <prvAddNewTaskToReadyList+0xd0>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <prvAddNewTaskToReadyList+0xd4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d903      	bls.n	80087b8 <prvAddNewTaskToReadyList+0x74>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	4a18      	ldr	r2, [pc, #96]	; (8008818 <prvAddNewTaskToReadyList+0xd4>)
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4a15      	ldr	r2, [pc, #84]	; (800881c <prvAddNewTaskToReadyList+0xd8>)
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f7fe fce5 	bl	800719e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087d4:	f001 fb5e 	bl	8009e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087d8:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <prvAddNewTaskToReadyList+0xcc>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00e      	beq.n	80087fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <prvAddNewTaskToReadyList+0xc8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d207      	bcs.n	80087fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <prvAddNewTaskToReadyList+0xdc>)
 80087f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000d24 	.word	0x20000d24
 800880c:	20000850 	.word	0x20000850
 8008810:	20000d30 	.word	0x20000d30
 8008814:	20000d40 	.word	0x20000d40
 8008818:	20000d2c 	.word	0x20000d2c
 800881c:	20000854 	.word	0x20000854
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d017      	beq.n	8008866 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008836:	4b13      	ldr	r3, [pc, #76]	; (8008884 <vTaskDelay+0x60>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <vTaskDelay+0x30>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60bb      	str	r3, [r7, #8]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008854:	f000 f88a 	bl	800896c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fe1e 	bl	800949c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008860:	f000 f892 	bl	8008988 <xTaskResumeAll>
 8008864:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d107      	bne.n	800887c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <vTaskDelay+0x64>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000d4c 	.word	0x20000d4c
 8008888:	e000ed04 	.word	0xe000ed04

0800888c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	; 0x28
 8008890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800889a:	463a      	mov	r2, r7
 800889c:	1d39      	adds	r1, r7, #4
 800889e:	f107 0308 	add.w	r3, r7, #8
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fc1a 	bl	80070dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	9202      	str	r2, [sp, #8]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	460a      	mov	r2, r1
 80088ba:	4924      	ldr	r1, [pc, #144]	; (800894c <vTaskStartScheduler+0xc0>)
 80088bc:	4824      	ldr	r0, [pc, #144]	; (8008950 <vTaskStartScheduler+0xc4>)
 80088be:	f7ff fdf9 	bl	80084b4 <xTaskCreateStatic>
 80088c2:	4603      	mov	r3, r0
 80088c4:	4a23      	ldr	r2, [pc, #140]	; (8008954 <vTaskStartScheduler+0xc8>)
 80088c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088c8:	4b22      	ldr	r3, [pc, #136]	; (8008954 <vTaskStartScheduler+0xc8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088d0:	2301      	movs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	e001      	b.n	80088da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d102      	bne.n	80088e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088e0:	f000 fe30 	bl	8009544 <xTimerCreateTimerTask>
 80088e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d11b      	bne.n	8008924 <vTaskStartScheduler+0x98>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	613b      	str	r3, [r7, #16]
}
 80088fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008900:	4b15      	ldr	r3, [pc, #84]	; (8008958 <vTaskStartScheduler+0xcc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3354      	adds	r3, #84	; 0x54
 8008906:	4a15      	ldr	r2, [pc, #84]	; (800895c <vTaskStartScheduler+0xd0>)
 8008908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <vTaskStartScheduler+0xd4>)
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008912:	4b14      	ldr	r3, [pc, #80]	; (8008964 <vTaskStartScheduler+0xd8>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008918:	4b13      	ldr	r3, [pc, #76]	; (8008968 <vTaskStartScheduler+0xdc>)
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800891e:	f001 f9e7 	bl	8009cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008922:	e00e      	b.n	8008942 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d10a      	bne.n	8008942 <vTaskStartScheduler+0xb6>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <vTaskStartScheduler+0xb4>
}
 8008942:	bf00      	nop
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	08018bfc 	.word	0x08018bfc
 8008950:	08008fb5 	.word	0x08008fb5
 8008954:	20000d48 	.word	0x20000d48
 8008958:	20000850 	.word	0x20000850
 800895c:	20000020 	.word	0x20000020
 8008960:	20000d44 	.word	0x20000d44
 8008964:	20000d30 	.word	0x20000d30
 8008968:	20000d28 	.word	0x20000d28

0800896c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <vTaskSuspendAll+0x18>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	4a03      	ldr	r2, [pc, #12]	; (8008984 <vTaskSuspendAll+0x18>)
 8008978:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800897a:	bf00      	nop
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000d4c 	.word	0x20000d4c

08008988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008996:	4b42      	ldr	r3, [pc, #264]	; (8008aa0 <xTaskResumeAll+0x118>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	603b      	str	r3, [r7, #0]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089b4:	f001 fa3e 	bl	8009e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089b8:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <xTaskResumeAll+0x118>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3b01      	subs	r3, #1
 80089be:	4a38      	ldr	r2, [pc, #224]	; (8008aa0 <xTaskResumeAll+0x118>)
 80089c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <xTaskResumeAll+0x118>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d162      	bne.n	8008a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089ca:	4b36      	ldr	r3, [pc, #216]	; (8008aa4 <xTaskResumeAll+0x11c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d05e      	beq.n	8008a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d2:	e02f      	b.n	8008a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	4b34      	ldr	r3, [pc, #208]	; (8008aa8 <xTaskResumeAll+0x120>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3318      	adds	r3, #24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fc39 	bl	8007258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fc34 	bl	8007258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4b2d      	ldr	r3, [pc, #180]	; (8008aac <xTaskResumeAll+0x124>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d903      	bls.n	8008a04 <xTaskResumeAll+0x7c>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	4a2a      	ldr	r2, [pc, #168]	; (8008aac <xTaskResumeAll+0x124>)
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4a27      	ldr	r2, [pc, #156]	; (8008ab0 <xTaskResumeAll+0x128>)
 8008a12:	441a      	add	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f7fe fbbf 	bl	800719e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <xTaskResumeAll+0x12c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a2e:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <xTaskResumeAll+0x130>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a34:	4b1c      	ldr	r3, [pc, #112]	; (8008aa8 <xTaskResumeAll+0x120>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1cb      	bne.n	80089d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a42:	f000 fb71 	bl	8009128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a46:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <xTaskResumeAll+0x134>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d010      	beq.n	8008a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a52:	f000 f859 	bl	8008b08 <xTaskIncrementTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a5c:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <xTaskResumeAll+0x130>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f1      	bne.n	8008a52 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <xTaskResumeAll+0x134>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <xTaskResumeAll+0x130>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a80:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <xTaskResumeAll+0x138>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a90:	f001 fa00 	bl	8009e94 <vPortExitCritical>

	return xAlreadyYielded;
 8008a94:	68bb      	ldr	r3, [r7, #8]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000d4c 	.word	0x20000d4c
 8008aa4:	20000d24 	.word	0x20000d24
 8008aa8:	20000ce4 	.word	0x20000ce4
 8008aac:	20000d2c 	.word	0x20000d2c
 8008ab0:	20000854 	.word	0x20000854
 8008ab4:	20000850 	.word	0x20000850
 8008ab8:	20000d38 	.word	0x20000d38
 8008abc:	20000d34 	.word	0x20000d34
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <xTaskGetTickCount+0x1c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ad0:	687b      	ldr	r3, [r7, #4]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000d28 	.word	0x20000d28

08008ae4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aea:	f001 fa85 	bl	8009ff8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008aee:	2300      	movs	r3, #0
 8008af0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008af2:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <xTaskGetTickCountFromISR+0x20>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008af8:	683b      	ldr	r3, [r7, #0]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000d28 	.word	0x20000d28

08008b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b12:	4b4f      	ldr	r3, [pc, #316]	; (8008c50 <xTaskIncrementTick+0x148>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 8089 	bne.w	8008c2e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b1c:	4b4d      	ldr	r3, [pc, #308]	; (8008c54 <xTaskIncrementTick+0x14c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b24:	4a4b      	ldr	r2, [pc, #300]	; (8008c54 <xTaskIncrementTick+0x14c>)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d120      	bne.n	8008b72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b30:	4b49      	ldr	r3, [pc, #292]	; (8008c58 <xTaskIncrementTick+0x150>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	603b      	str	r3, [r7, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <xTaskIncrementTick+0x46>
 8008b50:	4b41      	ldr	r3, [pc, #260]	; (8008c58 <xTaskIncrementTick+0x150>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	4b41      	ldr	r3, [pc, #260]	; (8008c5c <xTaskIncrementTick+0x154>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <xTaskIncrementTick+0x150>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	4a3f      	ldr	r2, [pc, #252]	; (8008c5c <xTaskIncrementTick+0x154>)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	4b3e      	ldr	r3, [pc, #248]	; (8008c60 <xTaskIncrementTick+0x158>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	4a3d      	ldr	r2, [pc, #244]	; (8008c60 <xTaskIncrementTick+0x158>)
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	f000 fadb 	bl	8009128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b72:	4b3c      	ldr	r3, [pc, #240]	; (8008c64 <xTaskIncrementTick+0x15c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d349      	bcc.n	8008c10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b7c:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <xTaskIncrementTick+0x150>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b86:	4b37      	ldr	r3, [pc, #220]	; (8008c64 <xTaskIncrementTick+0x15c>)
 8008b88:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8c:	601a      	str	r2, [r3, #0]
					break;
 8008b8e:	e03f      	b.n	8008c10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	4b31      	ldr	r3, [pc, #196]	; (8008c58 <xTaskIncrementTick+0x150>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d203      	bcs.n	8008bb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ba8:	4a2e      	ldr	r2, [pc, #184]	; (8008c64 <xTaskIncrementTick+0x15c>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bae:	e02f      	b.n	8008c10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fb4f 	bl	8007258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3318      	adds	r3, #24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fb46 	bl	8007258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <xTaskIncrementTick+0x160>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <xTaskIncrementTick+0xd8>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a22      	ldr	r2, [pc, #136]	; (8008c68 <xTaskIncrementTick+0x160>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <xTaskIncrementTick+0x164>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe fad1 	bl	800719e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b1b      	ldr	r3, [pc, #108]	; (8008c70 <xTaskIncrementTick+0x168>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3b8      	bcc.n	8008b7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0e:	e7b5      	b.n	8008b7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c10:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <xTaskIncrementTick+0x168>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	4915      	ldr	r1, [pc, #84]	; (8008c6c <xTaskIncrementTick+0x164>)
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d907      	bls.n	8008c38 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e004      	b.n	8008c38 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c2e:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <xTaskIncrementTick+0x16c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a0f      	ldr	r2, [pc, #60]	; (8008c74 <xTaskIncrementTick+0x16c>)
 8008c36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c38:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <xTaskIncrementTick+0x170>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c44:	697b      	ldr	r3, [r7, #20]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000d4c 	.word	0x20000d4c
 8008c54:	20000d28 	.word	0x20000d28
 8008c58:	20000cdc 	.word	0x20000cdc
 8008c5c:	20000ce0 	.word	0x20000ce0
 8008c60:	20000d3c 	.word	0x20000d3c
 8008c64:	20000d44 	.word	0x20000d44
 8008c68:	20000d2c 	.word	0x20000d2c
 8008c6c:	20000854 	.word	0x20000854
 8008c70:	20000850 	.word	0x20000850
 8008c74:	20000d34 	.word	0x20000d34
 8008c78:	20000d38 	.word	0x20000d38

08008c7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c82:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <vTaskSwitchContext+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c8a:	4b29      	ldr	r3, [pc, #164]	; (8008d30 <vTaskSwitchContext+0xb4>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c90:	e046      	b.n	8008d20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c92:	4b27      	ldr	r3, [pc, #156]	; (8008d30 <vTaskSwitchContext+0xb4>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c98:	4b26      	ldr	r3, [pc, #152]	; (8008d34 <vTaskSwitchContext+0xb8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e010      	b.n	8008cc2 <vTaskSwitchContext+0x46>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10a      	bne.n	8008cbc <vTaskSwitchContext+0x40>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	607b      	str	r3, [r7, #4]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <vTaskSwitchContext+0x3e>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	491d      	ldr	r1, [pc, #116]	; (8008d38 <vTaskSwitchContext+0xbc>)
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0e4      	beq.n	8008ca0 <vTaskSwitchContext+0x24>
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <vTaskSwitchContext+0xbc>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	605a      	str	r2, [r3, #4]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d104      	bne.n	8008d06 <vTaskSwitchContext+0x8a>
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <vTaskSwitchContext+0xc0>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	4a08      	ldr	r2, [pc, #32]	; (8008d34 <vTaskSwitchContext+0xb8>)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <vTaskSwitchContext+0xc0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3354      	adds	r3, #84	; 0x54
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <vTaskSwitchContext+0xc4>)
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	20000d4c 	.word	0x20000d4c
 8008d30:	20000d38 	.word	0x20000d38
 8008d34:	20000d2c 	.word	0x20000d2c
 8008d38:	20000854 	.word	0x20000854
 8008d3c:	20000850 	.word	0x20000850
 8008d40:	20000020 	.word	0x20000020

08008d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10a      	bne.n	8008d6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	60fb      	str	r3, [r7, #12]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <vTaskPlaceOnEventList+0x44>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7fe fa37 	bl	80071e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d78:	2101      	movs	r1, #1
 8008d7a:	6838      	ldr	r0, [r7, #0]
 8008d7c:	f000 fb8e 	bl	800949c <prvAddCurrentTaskToDelayedList>
}
 8008d80:	bf00      	nop
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20000850 	.word	0x20000850

08008d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	617b      	str	r3, [r7, #20]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3318      	adds	r3, #24
 8008dba:	4619      	mov	r1, r3
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7fe f9ee 	bl	800719e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	68b8      	ldr	r0, [r7, #8]
 8008dd2:	f000 fb63 	bl	800949c <prvAddCurrentTaskToDelayedList>
	}
 8008dd6:	bf00      	nop
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000850 	.word	0x20000850

08008de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	60fb      	str	r3, [r7, #12]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3318      	adds	r3, #24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fa1f 	bl	8007258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e1a:	4b1e      	ldr	r3, [pc, #120]	; (8008e94 <xTaskRemoveFromEventList+0xb0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d11d      	bne.n	8008e5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fa16 	bl	8007258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <xTaskRemoveFromEventList+0xb4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d903      	bls.n	8008e40 <xTaskRemoveFromEventList+0x5c>
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4a16      	ldr	r2, [pc, #88]	; (8008e98 <xTaskRemoveFromEventList+0xb4>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a13      	ldr	r2, [pc, #76]	; (8008e9c <xTaskRemoveFromEventList+0xb8>)
 8008e4e:	441a      	add	r2, r3
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fe f9a1 	bl	800719e <vListInsertEnd>
 8008e5c:	e005      	b.n	8008e6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4619      	mov	r1, r3
 8008e64:	480e      	ldr	r0, [pc, #56]	; (8008ea0 <xTaskRemoveFromEventList+0xbc>)
 8008e66:	f7fe f99a 	bl	800719e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <xTaskRemoveFromEventList+0xc0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d905      	bls.n	8008e84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <xTaskRemoveFromEventList+0xc4>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e001      	b.n	8008e88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e88:	697b      	ldr	r3, [r7, #20]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20000d4c 	.word	0x20000d4c
 8008e98:	20000d2c 	.word	0x20000d2c
 8008e9c:	20000854 	.word	0x20000854
 8008ea0:	20000ce4 	.word	0x20000ce4
 8008ea4:	20000850 	.word	0x20000850
 8008ea8:	20000d38 	.word	0x20000d38

08008eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <vTaskInternalSetTimeOutState+0x24>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <vTaskInternalSetTimeOutState+0x28>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	605a      	str	r2, [r3, #4]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000d3c 	.word	0x20000d3c
 8008ed4:	20000d28 	.word	0x20000d28

08008ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	613b      	str	r3, [r7, #16]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f1a:	f000 ff8b 	bl	8009e34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <xTaskCheckForTimeOut+0xbc>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d102      	bne.n	8008f3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	e023      	b.n	8008f86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <xTaskCheckForTimeOut+0xc0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d007      	beq.n	8008f5a <xTaskCheckForTimeOut+0x82>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d302      	bcc.n	8008f5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f54:	2301      	movs	r3, #1
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	e015      	b.n	8008f86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d20b      	bcs.n	8008f7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff9b 	bl	8008eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	e004      	b.n	8008f86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f82:	2301      	movs	r3, #1
 8008f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f86:	f000 ff85 	bl	8009e94 <vPortExitCritical>

	return xReturn;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000d28 	.word	0x20000d28
 8008f98:	20000d3c 	.word	0x20000d3c

08008f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <vTaskMissedYield+0x14>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
}
 8008fa6:	bf00      	nop
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000d38 	.word	0x20000d38

08008fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fbc:	f000 f852 	bl	8009064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <prvIdleTask+0x28>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d9f9      	bls.n	8008fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <prvIdleTask+0x2c>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fd8:	e7f0      	b.n	8008fbc <prvIdleTask+0x8>
 8008fda:	bf00      	nop
 8008fdc:	20000854 	.word	0x20000854
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e00c      	b.n	800900a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4a12      	ldr	r2, [pc, #72]	; (8009044 <prvInitialiseTaskLists+0x60>)
 8008ffc:	4413      	add	r3, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe f8a0 	bl	8007144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3301      	adds	r3, #1
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b37      	cmp	r3, #55	; 0x37
 800900e:	d9ef      	bls.n	8008ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009010:	480d      	ldr	r0, [pc, #52]	; (8009048 <prvInitialiseTaskLists+0x64>)
 8009012:	f7fe f897 	bl	8007144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009016:	480d      	ldr	r0, [pc, #52]	; (800904c <prvInitialiseTaskLists+0x68>)
 8009018:	f7fe f894 	bl	8007144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800901c:	480c      	ldr	r0, [pc, #48]	; (8009050 <prvInitialiseTaskLists+0x6c>)
 800901e:	f7fe f891 	bl	8007144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009022:	480c      	ldr	r0, [pc, #48]	; (8009054 <prvInitialiseTaskLists+0x70>)
 8009024:	f7fe f88e 	bl	8007144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009028:	480b      	ldr	r0, [pc, #44]	; (8009058 <prvInitialiseTaskLists+0x74>)
 800902a:	f7fe f88b 	bl	8007144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800902e:	4b0b      	ldr	r3, [pc, #44]	; (800905c <prvInitialiseTaskLists+0x78>)
 8009030:	4a05      	ldr	r2, [pc, #20]	; (8009048 <prvInitialiseTaskLists+0x64>)
 8009032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <prvInitialiseTaskLists+0x7c>)
 8009036:	4a05      	ldr	r2, [pc, #20]	; (800904c <prvInitialiseTaskLists+0x68>)
 8009038:	601a      	str	r2, [r3, #0]
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000854 	.word	0x20000854
 8009048:	20000cb4 	.word	0x20000cb4
 800904c:	20000cc8 	.word	0x20000cc8
 8009050:	20000ce4 	.word	0x20000ce4
 8009054:	20000cf8 	.word	0x20000cf8
 8009058:	20000d10 	.word	0x20000d10
 800905c:	20000cdc 	.word	0x20000cdc
 8009060:	20000ce0 	.word	0x20000ce0

08009064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800906a:	e019      	b.n	80090a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800906c:	f000 fee2 	bl	8009e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009070:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <prvCheckTasksWaitingTermination+0x50>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe f8eb 	bl	8007258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <prvCheckTasksWaitingTermination+0x54>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	4a0b      	ldr	r2, [pc, #44]	; (80090b8 <prvCheckTasksWaitingTermination+0x54>)
 800908a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <prvCheckTasksWaitingTermination+0x58>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3b01      	subs	r3, #1
 8009092:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvCheckTasksWaitingTermination+0x58>)
 8009094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009096:	f000 fefd 	bl	8009e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f810 	bl	80090c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <prvCheckTasksWaitingTermination+0x58>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e1      	bne.n	800906c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000cf8 	.word	0x20000cf8
 80090b8:	20000d24 	.word	0x20000d24
 80090bc:	20000d0c 	.word	0x20000d0c

080090c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3354      	adds	r3, #84	; 0x54
 80090cc:	4618      	mov	r0, r3
 80090ce:	f00e fe17 	bl	8017d00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d108      	bne.n	80090ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 f87b 	bl	800a1dc <vPortFree>
				vPortFree( pxTCB );
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 f878 	bl	800a1dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090ec:	e018      	b.n	8009120 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d103      	bne.n	8009100 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 f86f 	bl	800a1dc <vPortFree>
	}
 80090fe:	e00f      	b.n	8009120 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009106:	2b02      	cmp	r3, #2
 8009108:	d00a      	beq.n	8009120 <prvDeleteTCB+0x60>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	60fb      	str	r3, [r7, #12]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <prvDeleteTCB+0x5e>
	}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009140:	e008      	b.n	8009154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 8009152:	6013      	str	r3, [r2, #0]
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20000cdc 	.word	0x20000cdc
 8009164:	20000d44 	.word	0x20000d44

08009168 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <xTaskGetCurrentTaskHandle+0x1c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009174:	687b      	ldr	r3, [r7, #4]
	}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000850 	.word	0x20000850

08009188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <xTaskGetSchedulerState+0x34>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009196:	2301      	movs	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	e008      	b.n	80091ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919c:	4b08      	ldr	r3, [pc, #32]	; (80091c0 <xTaskGetSchedulerState+0x38>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091a4:	2302      	movs	r3, #2
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	e001      	b.n	80091ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091ae:	687b      	ldr	r3, [r7, #4]
	}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000d30 	.word	0x20000d30
 80091c0:	20000d4c 	.word	0x20000d4c

080091c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d051      	beq.n	800927e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091de:	4b2a      	ldr	r3, [pc, #168]	; (8009288 <xTaskPriorityInherit+0xc4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d241      	bcs.n	800926c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db06      	blt.n	80091fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <xTaskPriorityInherit+0xc4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6959      	ldr	r1, [r3, #20]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4a1f      	ldr	r2, [pc, #124]	; (800928c <xTaskPriorityInherit+0xc8>)
 8009210:	4413      	add	r3, r2
 8009212:	4299      	cmp	r1, r3
 8009214:	d122      	bne.n	800925c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3304      	adds	r3, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f81c 	bl	8007258 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009220:	4b19      	ldr	r3, [pc, #100]	; (8009288 <xTaskPriorityInherit+0xc4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	4b18      	ldr	r3, [pc, #96]	; (8009290 <xTaskPriorityInherit+0xcc>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d903      	bls.n	800923e <xTaskPriorityInherit+0x7a>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	4a15      	ldr	r2, [pc, #84]	; (8009290 <xTaskPriorityInherit+0xcc>)
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4a10      	ldr	r2, [pc, #64]	; (800928c <xTaskPriorityInherit+0xc8>)
 800924c:	441a      	add	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	3304      	adds	r3, #4
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fd ffa2 	bl	800719e <vListInsertEnd>
 800925a:	e004      	b.n	8009266 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <xTaskPriorityInherit+0xc4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e008      	b.n	800927e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <xTaskPriorityInherit+0xc4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	429a      	cmp	r2, r3
 8009278:	d201      	bcs.n	800927e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800927e:	68fb      	ldr	r3, [r7, #12]
	}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000850 	.word	0x20000850
 800928c:	20000854 	.word	0x20000854
 8009290:	20000d2c 	.word	0x20000d2c

08009294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d056      	beq.n	8009358 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092aa:	4b2e      	ldr	r3, [pc, #184]	; (8009364 <xTaskPriorityDisinherit+0xd0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d00a      	beq.n	80092ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	60fb      	str	r3, [r7, #12]
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	60bb      	str	r3, [r7, #8]
}
 80092e4:	bf00      	nop
 80092e6:	e7fe      	b.n	80092e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d02c      	beq.n	8009358 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	2b00      	cmp	r3, #0
 8009304:	d128      	bne.n	8009358 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	3304      	adds	r3, #4
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd ffa4 	bl	8007258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <xTaskPriorityDisinherit+0xd4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d903      	bls.n	8009338 <xTaskPriorityDisinherit+0xa4>
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <xTaskPriorityDisinherit+0xd4>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4a09      	ldr	r2, [pc, #36]	; (800936c <xTaskPriorityDisinherit+0xd8>)
 8009346:	441a      	add	r2, r3
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7fd ff25 	bl	800719e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009354:	2301      	movs	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009358:	697b      	ldr	r3, [r7, #20]
	}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000850 	.word	0x20000850
 8009368:	20000d2c 	.word	0x20000d2c
 800936c:	20000854 	.word	0x20000854

08009370 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800937e:	2301      	movs	r3, #1
 8009380:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d06a      	beq.n	800945e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d902      	bls.n	80093b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	e002      	b.n	80093bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d04b      	beq.n	800945e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d146      	bne.n	800945e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093d0:	4b25      	ldr	r3, [pc, #148]	; (8009468 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d10a      	bne.n	80093f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	60bb      	str	r3, [r7, #8]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	db04      	blt.n	800940e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	6959      	ldr	r1, [r3, #20]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a13      	ldr	r2, [pc, #76]	; (800946c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800941e:	4413      	add	r3, r2
 8009420:	4299      	cmp	r1, r3
 8009422:	d11c      	bne.n	800945e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	3304      	adds	r3, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7fd ff15 	bl	8007258 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d903      	bls.n	8009442 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4a07      	ldr	r2, [pc, #28]	; (800946c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009450:	441a      	add	r2, r3
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	3304      	adds	r3, #4
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7fd fea0 	bl	800719e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800945e:	bf00      	nop
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20000850 	.word	0x20000850
 800946c:	20000854 	.word	0x20000854
 8009470:	20000d2c 	.word	0x20000d2c

08009474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009478:	4b07      	ldr	r3, [pc, #28]	; (8009498 <pvTaskIncrementMutexHeldCount+0x24>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009480:	4b05      	ldr	r3, [pc, #20]	; (8009498 <pvTaskIncrementMutexHeldCount+0x24>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009486:	3201      	adds	r2, #1
 8009488:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800948a:	4b03      	ldr	r3, [pc, #12]	; (8009498 <pvTaskIncrementMutexHeldCount+0x24>)
 800948c:	681b      	ldr	r3, [r3, #0]
	}
 800948e:	4618      	mov	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20000850 	.word	0x20000850

0800949c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094a6:	4b21      	ldr	r3, [pc, #132]	; (800952c <prvAddCurrentTaskToDelayedList+0x90>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ac:	4b20      	ldr	r3, [pc, #128]	; (8009530 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fd fed0 	bl	8007258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094be:	d10a      	bne.n	80094d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094c6:	4b1a      	ldr	r3, [pc, #104]	; (8009530 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4819      	ldr	r0, [pc, #100]	; (8009534 <prvAddCurrentTaskToDelayedList+0x98>)
 80094d0:	f7fd fe65 	bl	800719e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094d4:	e026      	b.n	8009524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094de:	4b14      	ldr	r3, [pc, #80]	; (8009530 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d209      	bcs.n	8009502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ee:	4b12      	ldr	r3, [pc, #72]	; (8009538 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <prvAddCurrentTaskToDelayedList+0x94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3304      	adds	r3, #4
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7fd fe73 	bl	80071e6 <vListInsert>
}
 8009500:	e010      	b.n	8009524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009502:	4b0e      	ldr	r3, [pc, #56]	; (800953c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <prvAddCurrentTaskToDelayedList+0x94>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3304      	adds	r3, #4
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f7fd fe69 	bl	80071e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	429a      	cmp	r2, r3
 800951c:	d202      	bcs.n	8009524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800951e:	4a08      	ldr	r2, [pc, #32]	; (8009540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6013      	str	r3, [r2, #0]
}
 8009524:	bf00      	nop
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000d28 	.word	0x20000d28
 8009530:	20000850 	.word	0x20000850
 8009534:	20000d10 	.word	0x20000d10
 8009538:	20000ce0 	.word	0x20000ce0
 800953c:	20000cdc 	.word	0x20000cdc
 8009540:	20000d44 	.word	0x20000d44

08009544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	; 0x28
 8009548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800954e:	f000 fb07 	bl	8009b60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009552:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <xTimerCreateTimerTask+0x80>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d021      	beq.n	800959e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009562:	1d3a      	adds	r2, r7, #4
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	f107 030c 	add.w	r3, r7, #12
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd fdcf 	bl	8007110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	9202      	str	r2, [sp, #8]
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	2302      	movs	r3, #2
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	460a      	mov	r2, r1
 8009584:	4910      	ldr	r1, [pc, #64]	; (80095c8 <xTimerCreateTimerTask+0x84>)
 8009586:	4811      	ldr	r0, [pc, #68]	; (80095cc <xTimerCreateTimerTask+0x88>)
 8009588:	f7fe ff94 	bl	80084b4 <xTaskCreateStatic>
 800958c:	4603      	mov	r3, r0
 800958e:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <xTimerCreateTimerTask+0x8c>)
 8009590:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <xTimerCreateTimerTask+0x8c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800959a:	2301      	movs	r3, #1
 800959c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	613b      	str	r3, [r7, #16]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095ba:	697b      	ldr	r3, [r7, #20]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000d80 	.word	0x20000d80
 80095c8:	08018c04 	.word	0x08018c04
 80095cc:	08009709 	.word	0x08009709
 80095d0:	20000d84 	.word	0x20000d84

080095d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <xTimerGenericCommand+0x2e>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	623b      	str	r3, [r7, #32]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009602:	4b1a      	ldr	r3, [pc, #104]	; (800966c <xTimerGenericCommand+0x98>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d02a      	beq.n	8009660 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b05      	cmp	r3, #5
 800961a:	dc18      	bgt.n	800964e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800961c:	f7ff fdb4 	bl	8009188 <xTaskGetSchedulerState>
 8009620:	4603      	mov	r3, r0
 8009622:	2b02      	cmp	r3, #2
 8009624:	d109      	bne.n	800963a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009626:	4b11      	ldr	r3, [pc, #68]	; (800966c <xTimerGenericCommand+0x98>)
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f107 0110 	add.w	r1, r7, #16
 800962e:	2300      	movs	r3, #0
 8009630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009632:	f7fe f89f 	bl	8007774 <xQueueGenericSend>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24
 8009638:	e012      	b.n	8009660 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <xTimerGenericCommand+0x98>)
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f107 0110 	add.w	r1, r7, #16
 8009642:	2300      	movs	r3, #0
 8009644:	2200      	movs	r2, #0
 8009646:	f7fe f895 	bl	8007774 <xQueueGenericSend>
 800964a:	6278      	str	r0, [r7, #36]	; 0x24
 800964c:	e008      	b.n	8009660 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <xTimerGenericCommand+0x98>)
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f107 0110 	add.w	r1, r7, #16
 8009656:	2300      	movs	r3, #0
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	f7fe f989 	bl	8007970 <xQueueGenericSendFromISR>
 800965e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009662:	4618      	mov	r0, r3
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000d80 	.word	0x20000d80

08009670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af02      	add	r7, sp, #8
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967a:	4b22      	ldr	r3, [pc, #136]	; (8009704 <prvProcessExpiredTimer+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	3304      	adds	r3, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f7fd fde5 	bl	8007258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d022      	beq.n	80096e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	699a      	ldr	r2, [r3, #24]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	18d1      	adds	r1, r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	6978      	ldr	r0, [r7, #20]
 80096aa:	f000 f8d1 	bl	8009850 <prvInsertTimerInActiveList>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01f      	beq.n	80096f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096b4:	2300      	movs	r3, #0
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	2300      	movs	r3, #0
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	2100      	movs	r1, #0
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f7ff ff88 	bl	80095d4 <xTimerGenericCommand>
 80096c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d113      	bne.n	80096f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	6978      	ldr	r0, [r7, #20]
 80096fa:	4798      	blx	r3
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000d78 	.word	0x20000d78

08009708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f857 	bl	80097c8 <prvGetNextExpireTime>
 800971a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4619      	mov	r1, r3
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f803 	bl	800972c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009726:	f000 f8d5 	bl	80098d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800972a:	e7f1      	b.n	8009710 <prvTimerTask+0x8>

0800972c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009736:	f7ff f919 	bl	800896c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f866 	bl	8009810 <prvSampleTimeNow>
 8009744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d130      	bne.n	80097ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	429a      	cmp	r2, r3
 8009758:	d806      	bhi.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800975a:	f7ff f915 	bl	8008988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff85 	bl	8009670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009766:	e024      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <prvProcessTimerOrBlockTask+0x90>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <prvProcessTimerOrBlockTask+0x50>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <prvProcessTimerOrBlockTask+0x52>
 800977c:	2300      	movs	r3, #0
 800977e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvProcessTimerOrBlockTask+0x94>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fe fe5d 	bl	800844c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009792:	f7ff f8f9 	bl	8008988 <xTaskResumeAll>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <prvProcessTimerOrBlockTask+0x98>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
}
 80097ac:	e001      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ae:	f7ff f8eb 	bl	8008988 <xTaskResumeAll>
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000d7c 	.word	0x20000d7c
 80097c0:	20000d80 	.word	0x20000d80
 80097c4:	e000ed04 	.word	0xe000ed04

080097c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <prvGetNextExpireTime+0x44>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <prvGetNextExpireTime+0x16>
 80097da:	2201      	movs	r2, #1
 80097dc:	e000      	b.n	80097e0 <prvGetNextExpireTime+0x18>
 80097de:	2200      	movs	r2, #0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <prvGetNextExpireTime+0x44>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e001      	b.n	80097fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20000d78 	.word	0x20000d78

08009810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009818:	f7ff f954 	bl	8008ac4 <xTaskGetTickCount>
 800981c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <prvSampleTimeNow+0x3c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d205      	bcs.n	8009834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009828:	f000 f936 	bl	8009a98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e002      	b.n	800983a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <prvSampleTimeNow+0x3c>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009840:	68fb      	ldr	r3, [r7, #12]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000d88 	.word	0x20000d88

08009850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	429a      	cmp	r2, r3
 8009874:	d812      	bhi.n	800989c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	d302      	bcc.n	800988a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e01b      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <prvInsertTimerInActiveList+0x7c>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fd fca6 	bl	80071e6 <vListInsert>
 800989a:	e012      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d206      	bcs.n	80098b2 <prvInsertTimerInActiveList+0x62>
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e007      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <prvInsertTimerInActiveList+0x80>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fd fc92 	bl	80071e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098c2:	697b      	ldr	r3, [r7, #20]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000d7c 	.word	0x20000d7c
 80098d0:	20000d78 	.word	0x20000d78

080098d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098da:	e0ca      	b.n	8009a72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da18      	bge.n	8009914 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	3304      	adds	r3, #4
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	61fb      	str	r3, [r7, #28]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990a:	6850      	ldr	r0, [r2, #4]
 800990c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990e:	6892      	ldr	r2, [r2, #8]
 8009910:	4611      	mov	r1, r2
 8009912:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f2c0 80aa 	blt.w	8009a70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fd fc93 	bl	8007258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009932:	463b      	mov	r3, r7
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff ff6b 	bl	8009810 <prvSampleTimeNow>
 800993a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b09      	cmp	r3, #9
 8009940:	f200 8097 	bhi.w	8009a72 <prvProcessReceivedCommands+0x19e>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <prvProcessReceivedCommands+0x78>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009975 	.word	0x08009975
 8009950:	08009975 	.word	0x08009975
 8009954:	08009975 	.word	0x08009975
 8009958:	080099e9 	.word	0x080099e9
 800995c:	080099fd 	.word	0x080099fd
 8009960:	08009a47 	.word	0x08009a47
 8009964:	08009975 	.word	0x08009975
 8009968:	08009975 	.word	0x08009975
 800996c:	080099e9 	.word	0x080099e9
 8009970:	080099fd 	.word	0x080099fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800997a:	f043 0301 	orr.w	r3, r3, #1
 800997e:	b2da      	uxtb	r2, r3
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	18d1      	adds	r1, r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009994:	f7ff ff5c 	bl	8009850 <prvInsertTimerInActiveList>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d069      	beq.n	8009a72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d05e      	beq.n	8009a72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	441a      	add	r2, r3
 80099bc:	2300      	movs	r3, #0
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	2300      	movs	r3, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c6:	f7ff fe05 	bl	80095d4 <xTimerGenericCommand>
 80099ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d14f      	bne.n	8009a72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	61bb      	str	r3, [r7, #24]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80099fa:	e03a      	b.n	8009a72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	617b      	str	r3, [r7, #20]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	18d1      	adds	r1, r2, r3
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a40:	f7ff ff06 	bl	8009850 <prvInsertTimerInActiveList>
					break;
 8009a44:	e015      	b.n	8009a72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a56:	f000 fbc1 	bl	800a1dc <vPortFree>
 8009a5a:	e00a      	b.n	8009a72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a62:	f023 0301 	bic.w	r3, r3, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a6e:	e000      	b.n	8009a72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <prvProcessReceivedCommands+0x1c0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	1d39      	adds	r1, r7, #4
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe f89e 	bl	8007bbc <xQueueReceive>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f47f af2a 	bne.w	80098dc <prvProcessReceivedCommands+0x8>
	}
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	3730      	adds	r7, #48	; 0x30
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000d80 	.word	0x20000d80

08009a98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a9e:	e048      	b.n	8009b32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aa0:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aaa:	4b2b      	ldr	r3, [pc, #172]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fd fbcd 	bl	8007258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d02e      	beq.n	8009b32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	4413      	add	r3, r2
 8009adc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d90e      	bls.n	8009b04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009af2:	4b19      	ldr	r3, [pc, #100]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fd fb72 	bl	80071e6 <vListInsert>
 8009b02:	e016      	b.n	8009b32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b04:	2300      	movs	r3, #0
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fd60 	bl	80095d4 <xTimerGenericCommand>
 8009b14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	603b      	str	r3, [r7, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1b1      	bne.n	8009aa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b42:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <prvSwitchTimerLists+0xc4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <prvSwitchTimerLists+0xc0>)
 8009b48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b4a:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <prvSwitchTimerLists+0xc4>)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	6013      	str	r3, [r2, #0]
}
 8009b50:	bf00      	nop
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20000d78 	.word	0x20000d78
 8009b5c:	20000d7c 	.word	0x20000d7c

08009b60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b66:	f000 f965 	bl	8009e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <prvCheckForValidListAndQueue+0x60>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d120      	bne.n	8009bb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b72:	4814      	ldr	r0, [pc, #80]	; (8009bc4 <prvCheckForValidListAndQueue+0x64>)
 8009b74:	f7fd fae6 	bl	8007144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b78:	4813      	ldr	r0, [pc, #76]	; (8009bc8 <prvCheckForValidListAndQueue+0x68>)
 8009b7a:	f7fd fae3 	bl	8007144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <prvCheckForValidListAndQueue+0x6c>)
 8009b80:	4a10      	ldr	r2, [pc, #64]	; (8009bc4 <prvCheckForValidListAndQueue+0x64>)
 8009b82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b84:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <prvCheckForValidListAndQueue+0x70>)
 8009b86:	4a10      	ldr	r2, [pc, #64]	; (8009bc8 <prvCheckForValidListAndQueue+0x68>)
 8009b88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <prvCheckForValidListAndQueue+0x74>)
 8009b90:	4a11      	ldr	r2, [pc, #68]	; (8009bd8 <prvCheckForValidListAndQueue+0x78>)
 8009b92:	2110      	movs	r1, #16
 8009b94:	200a      	movs	r0, #10
 8009b96:	f7fd fbf1 	bl	800737c <xQueueGenericCreateStatic>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4a08      	ldr	r2, [pc, #32]	; (8009bc0 <prvCheckForValidListAndQueue+0x60>)
 8009b9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ba0:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <prvCheckForValidListAndQueue+0x60>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ba8:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <prvCheckForValidListAndQueue+0x60>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	490b      	ldr	r1, [pc, #44]	; (8009bdc <prvCheckForValidListAndQueue+0x7c>)
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fbf8 	bl	80083a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bb4:	f000 f96e 	bl	8009e94 <vPortExitCritical>
}
 8009bb8:	bf00      	nop
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000d80 	.word	0x20000d80
 8009bc4:	20000d50 	.word	0x20000d50
 8009bc8:	20000d64 	.word	0x20000d64
 8009bcc:	20000d78 	.word	0x20000d78
 8009bd0:	20000d7c 	.word	0x20000d7c
 8009bd4:	20000e2c 	.word	0x20000e2c
 8009bd8:	20000d8c 	.word	0x20000d8c
 8009bdc:	08018c0c 	.word	0x08018c0c

08009be0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3b04      	subs	r3, #4
 8009bf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3b04      	subs	r3, #4
 8009bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f023 0201 	bic.w	r2, r3, #1
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c10:	4a0c      	ldr	r2, [pc, #48]	; (8009c44 <pxPortInitialiseStack+0x64>)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3b14      	subs	r3, #20
 8009c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3b04      	subs	r3, #4
 8009c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f06f 0202 	mvn.w	r2, #2
 8009c2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3b20      	subs	r3, #32
 8009c34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c36:	68fb      	ldr	r3, [r7, #12]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	08009c49 	.word	0x08009c49

08009c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c52:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <prvTaskExitError+0x54>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5a:	d00a      	beq.n	8009c72 <prvTaskExitError+0x2a>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60fb      	str	r3, [r7, #12]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <prvTaskExitError+0x28>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	60bb      	str	r3, [r7, #8]
}
 8009c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c86:	bf00      	nop
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0fc      	beq.n	8009c88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000010 	.word	0x20000010

08009ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <pxCurrentTCBConst2>)
 8009ca2:	6819      	ldr	r1, [r3, #0]
 8009ca4:	6808      	ldr	r0, [r1, #0]
 8009ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009caa:	f380 8809 	msr	PSP, r0
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f04f 0000 	mov.w	r0, #0
 8009cb6:	f380 8811 	msr	BASEPRI, r0
 8009cba:	4770      	bx	lr
 8009cbc:	f3af 8000 	nop.w

08009cc0 <pxCurrentTCBConst2>:
 8009cc0:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop

08009cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cc8:	4808      	ldr	r0, [pc, #32]	; (8009cec <prvPortStartFirstTask+0x24>)
 8009cca:	6800      	ldr	r0, [r0, #0]
 8009ccc:	6800      	ldr	r0, [r0, #0]
 8009cce:	f380 8808 	msr	MSP, r0
 8009cd2:	f04f 0000 	mov.w	r0, #0
 8009cd6:	f380 8814 	msr	CONTROL, r0
 8009cda:	b662      	cpsie	i
 8009cdc:	b661      	cpsie	f
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	df00      	svc	0
 8009ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cea:	bf00      	nop
 8009cec:	e000ed08 	.word	0xe000ed08

08009cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cf6:	4b46      	ldr	r3, [pc, #280]	; (8009e10 <xPortStartScheduler+0x120>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a46      	ldr	r2, [pc, #280]	; (8009e14 <xPortStartScheduler+0x124>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d10a      	bne.n	8009d16 <xPortStartScheduler+0x26>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	613b      	str	r3, [r7, #16]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d16:	4b3e      	ldr	r3, [pc, #248]	; (8009e10 <xPortStartScheduler+0x120>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a3f      	ldr	r2, [pc, #252]	; (8009e18 <xPortStartScheduler+0x128>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d10a      	bne.n	8009d36 <xPortStartScheduler+0x46>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	60fb      	str	r3, [r7, #12]
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d36:	4b39      	ldr	r3, [pc, #228]	; (8009e1c <xPortStartScheduler+0x12c>)
 8009d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	22ff      	movs	r2, #255	; 0xff
 8009d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	4b31      	ldr	r3, [pc, #196]	; (8009e20 <xPortStartScheduler+0x130>)
 8009d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d5e:	4b31      	ldr	r3, [pc, #196]	; (8009e24 <xPortStartScheduler+0x134>)
 8009d60:	2207      	movs	r2, #7
 8009d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d64:	e009      	b.n	8009d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d66:	4b2f      	ldr	r3, [pc, #188]	; (8009e24 <xPortStartScheduler+0x134>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	4a2d      	ldr	r2, [pc, #180]	; (8009e24 <xPortStartScheduler+0x134>)
 8009d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d82:	2b80      	cmp	r3, #128	; 0x80
 8009d84:	d0ef      	beq.n	8009d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d86:	4b27      	ldr	r3, [pc, #156]	; (8009e24 <xPortStartScheduler+0x134>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1c3 0307 	rsb	r3, r3, #7
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d00a      	beq.n	8009da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	60bb      	str	r3, [r7, #8]
}
 8009da4:	bf00      	nop
 8009da6:	e7fe      	b.n	8009da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009da8:	4b1e      	ldr	r3, [pc, #120]	; (8009e24 <xPortStartScheduler+0x134>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <xPortStartScheduler+0x134>)
 8009db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <xPortStartScheduler+0x134>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dba:	4a1a      	ldr	r2, [pc, #104]	; (8009e24 <xPortStartScheduler+0x134>)
 8009dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dc6:	4b18      	ldr	r3, [pc, #96]	; (8009e28 <xPortStartScheduler+0x138>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <xPortStartScheduler+0x138>)
 8009dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <xPortStartScheduler+0x138>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a14      	ldr	r2, [pc, #80]	; (8009e28 <xPortStartScheduler+0x138>)
 8009dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dde:	f000 f8dd 	bl	8009f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009de2:	4b12      	ldr	r3, [pc, #72]	; (8009e2c <xPortStartScheduler+0x13c>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009de8:	f000 f8fc 	bl	8009fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dec:	4b10      	ldr	r3, [pc, #64]	; (8009e30 <xPortStartScheduler+0x140>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a0f      	ldr	r2, [pc, #60]	; (8009e30 <xPortStartScheduler+0x140>)
 8009df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009df8:	f7ff ff66 	bl	8009cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dfc:	f7fe ff3e 	bl	8008c7c <vTaskSwitchContext>
	prvTaskExitError();
 8009e00:	f7ff ff22 	bl	8009c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	e000ed00 	.word	0xe000ed00
 8009e14:	410fc271 	.word	0x410fc271
 8009e18:	410fc270 	.word	0x410fc270
 8009e1c:	e000e400 	.word	0xe000e400
 8009e20:	20000e7c 	.word	0x20000e7c
 8009e24:	20000e80 	.word	0x20000e80
 8009e28:	e000ed20 	.word	0xe000ed20
 8009e2c:	20000010 	.word	0x20000010
 8009e30:	e000ef34 	.word	0xe000ef34

08009e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <vPortEnterCritical+0x58>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3301      	adds	r3, #1
 8009e54:	4a0d      	ldr	r2, [pc, #52]	; (8009e8c <vPortEnterCritical+0x58>)
 8009e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e58:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <vPortEnterCritical+0x58>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d10f      	bne.n	8009e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <vPortEnterCritical+0x5c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	603b      	str	r3, [r7, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <vPortEnterCritical+0x4a>
	}
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	20000010 	.word	0x20000010
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e9a:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <vPortExitCritical+0x50>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <vPortExitCritical+0x24>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	607b      	str	r3, [r7, #4]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <vPortExitCritical+0x50>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <vPortExitCritical+0x50>)
 8009ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ec2:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <vPortExitCritical+0x50>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d105      	bne.n	8009ed6 <vPortExitCritical+0x42>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	f383 8811 	msr	BASEPRI, r3
}
 8009ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000010 	.word	0x20000010
	...

08009ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ef0:	f3ef 8009 	mrs	r0, PSP
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <pxCurrentTCBConst>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	f01e 0f10 	tst.w	lr, #16
 8009f00:	bf08      	it	eq
 8009f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	6010      	str	r0, [r2, #0]
 8009f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f14:	f380 8811 	msr	BASEPRI, r0
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f7fe feac 	bl	8008c7c <vTaskSwitchContext>
 8009f24:	f04f 0000 	mov.w	r0, #0
 8009f28:	f380 8811 	msr	BASEPRI, r0
 8009f2c:	bc09      	pop	{r0, r3}
 8009f2e:	6819      	ldr	r1, [r3, #0]
 8009f30:	6808      	ldr	r0, [r1, #0]
 8009f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f36:	f01e 0f10 	tst.w	lr, #16
 8009f3a:	bf08      	it	eq
 8009f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f40:	f380 8809 	msr	PSP, r0
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	f3af 8000 	nop.w

08009f50 <pxCurrentTCBConst>:
 8009f50:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f72:	f7fe fdc9 	bl	8008b08 <xTaskIncrementTick>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <SysTick_Handler+0x40>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	f383 8811 	msr	BASEPRI, r3
}
 8009f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fa0:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <vPortSetupTimerInterrupt+0x34>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fa6:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <vPortSetupTimerInterrupt+0x38>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fac:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <vPortSetupTimerInterrupt+0x3c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a0a      	ldr	r2, [pc, #40]	; (8009fdc <vPortSetupTimerInterrupt+0x40>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	099b      	lsrs	r3, r3, #6
 8009fb8:	4a09      	ldr	r2, [pc, #36]	; (8009fe0 <vPortSetupTimerInterrupt+0x44>)
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fbe:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <vPortSetupTimerInterrupt+0x34>)
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000e010 	.word	0xe000e010
 8009fd4:	e000e018 	.word	0xe000e018
 8009fd8:	20000000 	.word	0x20000000
 8009fdc:	10624dd3 	.word	0x10624dd3
 8009fe0:	e000e014 	.word	0xe000e014

08009fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ff4 <vPortEnableVFP+0x10>
 8009fe8:	6801      	ldr	r1, [r0, #0]
 8009fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fee:	6001      	str	r1, [r0, #0]
 8009ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ff2:	bf00      	nop
 8009ff4:	e000ed88 	.word	0xe000ed88

08009ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ffe:	f3ef 8305 	mrs	r3, IPSR
 800a002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b0f      	cmp	r3, #15
 800a008:	d904      	bls.n	800a014 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a00a:	4a0f      	ldr	r2, [pc, #60]	; (800a048 <vPortValidateInterruptPriority+0x50>)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	72fb      	strb	r3, [r7, #11]
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a014:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <vPortValidateInterruptPriority+0x54>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a01c:	4b0c      	ldr	r3, [pc, #48]	; (800a050 <vPortValidateInterruptPriority+0x58>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d90a      	bls.n	800a03a <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	607b      	str	r3, [r7, #4]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <vPortValidateInterruptPriority+0x40>
	}
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	e000e3f0 	.word	0xe000e3f0
 800a04c:	e000ed0c 	.word	0xe000ed0c
 800a050:	20000e80 	.word	0x20000e80

0800a054 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a060:	f7fe fc84 	bl	800896c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a064:	4b58      	ldr	r3, [pc, #352]	; (800a1c8 <pvPortMalloc+0x174>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a06c:	f000 f910 	bl	800a290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a070:	4b56      	ldr	r3, [pc, #344]	; (800a1cc <pvPortMalloc+0x178>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4013      	ands	r3, r2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f040 808e 	bne.w	800a19a <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01d      	beq.n	800a0c0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a084:	2208      	movs	r2, #8
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4413      	add	r3, r2
 800a08a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	2b00      	cmp	r3, #0
 800a094:	d014      	beq.n	800a0c0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	3308      	adds	r3, #8
 800a09e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <pvPortMalloc+0x6c>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	617b      	str	r3, [r7, #20]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d069      	beq.n	800a19a <pvPortMalloc+0x146>
 800a0c6:	4b42      	ldr	r3, [pc, #264]	; (800a1d0 <pvPortMalloc+0x17c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d864      	bhi.n	800a19a <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0d0:	4b40      	ldr	r3, [pc, #256]	; (800a1d4 <pvPortMalloc+0x180>)
 800a0d2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0d4:	4b3f      	ldr	r3, [pc, #252]	; (800a1d4 <pvPortMalloc+0x180>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0da:	e004      	b.n	800a0e6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d903      	bls.n	800a0f8 <pvPortMalloc+0xa4>
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f1      	bne.n	800a0dc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0f8:	4b33      	ldr	r3, [pc, #204]	; (800a1c8 <pvPortMalloc+0x174>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d04b      	beq.n	800a19a <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2208      	movs	r2, #8
 800a108:	4413      	add	r3, r2
 800a10a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	1ad2      	subs	r2, r2, r3
 800a11c:	2308      	movs	r3, #8
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	429a      	cmp	r2, r3
 800a122:	d91f      	bls.n	800a164 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4413      	add	r3, r2
 800a12a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <pvPortMalloc+0xf8>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	613b      	str	r3, [r7, #16]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f000 f8f8 	bl	800a354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a164:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <pvPortMalloc+0x17c>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	4a18      	ldr	r2, [pc, #96]	; (800a1d0 <pvPortMalloc+0x17c>)
 800a170:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a172:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <pvPortMalloc+0x17c>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b18      	ldr	r3, [pc, #96]	; (800a1d8 <pvPortMalloc+0x184>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d203      	bcs.n	800a186 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a17e:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <pvPortMalloc+0x17c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <pvPortMalloc+0x184>)
 800a184:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	4b10      	ldr	r3, [pc, #64]	; (800a1cc <pvPortMalloc+0x178>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	431a      	orrs	r2, r3
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a19a:	f7fe fbf5 	bl	8008988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00a      	beq.n	800a1be <pvPortMalloc+0x16a>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	60fb      	str	r3, [r7, #12]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <pvPortMalloc+0x168>
	return pvReturn;
 800a1be:	69fb      	ldr	r3, [r7, #28]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3728      	adds	r7, #40	; 0x28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20004a8c 	.word	0x20004a8c
 800a1cc:	20004a98 	.word	0x20004a98
 800a1d0:	20004a90 	.word	0x20004a90
 800a1d4:	20004a84 	.word	0x20004a84
 800a1d8:	20004a94 	.word	0x20004a94

0800a1dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d048      	beq.n	800a280 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	4b21      	ldr	r3, [pc, #132]	; (800a288 <vPortFree+0xac>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4013      	ands	r3, r2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <vPortFree+0x44>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	60fb      	str	r3, [r7, #12]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <vPortFree+0x62>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	60bb      	str	r3, [r7, #8]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4b11      	ldr	r3, [pc, #68]	; (800a288 <vPortFree+0xac>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4013      	ands	r3, r2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d019      	beq.n	800a280 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d115      	bne.n	800a280 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <vPortFree+0xac>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a264:	f7fe fb82 	bl	800896c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <vPortFree+0xb0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4413      	add	r3, r2
 800a272:	4a06      	ldr	r2, [pc, #24]	; (800a28c <vPortFree+0xb0>)
 800a274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f000 f86c 	bl	800a354 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a27c:	f7fe fb84 	bl	8008988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a280:	bf00      	nop
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20004a98 	.word	0x20004a98
 800a28c:	20004a90 	.word	0x20004a90

0800a290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a296:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a29a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a29c:	4b27      	ldr	r3, [pc, #156]	; (800a33c <prvHeapInit+0xac>)
 800a29e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00c      	beq.n	800a2c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3307      	adds	r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	4a1f      	ldr	r2, [pc, #124]	; (800a33c <prvHeapInit+0xac>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2c8:	4a1d      	ldr	r2, [pc, #116]	; (800a340 <prvHeapInit+0xb0>)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ce:	4b1c      	ldr	r3, [pc, #112]	; (800a340 <prvHeapInit+0xb0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	4413      	add	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2dc:	2208      	movs	r2, #8
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4a15      	ldr	r2, [pc, #84]	; (800a344 <prvHeapInit+0xb4>)
 800a2f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2f2:	4b14      	ldr	r3, [pc, #80]	; (800a344 <prvHeapInit+0xb4>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <prvHeapInit+0xb4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a310:	4b0c      	ldr	r3, [pc, #48]	; (800a344 <prvHeapInit+0xb4>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	4a0a      	ldr	r2, [pc, #40]	; (800a348 <prvHeapInit+0xb8>)
 800a31e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	4a09      	ldr	r2, [pc, #36]	; (800a34c <prvHeapInit+0xbc>)
 800a326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a328:	4b09      	ldr	r3, [pc, #36]	; (800a350 <prvHeapInit+0xc0>)
 800a32a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a32e:	601a      	str	r2, [r3, #0]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	20000e84 	.word	0x20000e84
 800a340:	20004a84 	.word	0x20004a84
 800a344:	20004a8c 	.word	0x20004a8c
 800a348:	20004a94 	.word	0x20004a94
 800a34c:	20004a90 	.word	0x20004a90
 800a350:	20004a98 	.word	0x20004a98

0800a354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a35c:	4b28      	ldr	r3, [pc, #160]	; (800a400 <prvInsertBlockIntoFreeList+0xac>)
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e002      	b.n	800a368 <prvInsertBlockIntoFreeList+0x14>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d8f7      	bhi.n	800a362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d108      	bne.n	800a396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d118      	bne.n	800a3dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	4b15      	ldr	r3, [pc, #84]	; (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d00d      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e008      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e003      	b.n	800a3e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d002      	beq.n	800a3f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20004a84 	.word	0x20004a84
 800a404:	20004a8c 	.word	0x20004a8c

0800a408 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	330c      	adds	r3, #12
 800a418:	461a      	mov	r2, r3
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f002 fa55 	bl	800c8cc <tcpip_send_msg_wait_sem>
 800a422:	4603      	mov	r3, r0
 800a424:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <netconn_apimsg+0x2e>
    return apimsg->err;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a434:	e001      	b.n	800a43a <netconn_apimsg+0x32>
  }
  return err;
 800a436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08c      	sub	sp, #48	; 0x30
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	603a      	str	r2, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
 800a450:	460b      	mov	r3, r1
 800a452:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f923 	bl	800b6a4 <netconn_alloc>
 800a45e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d054      	beq.n	800a510 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a466:	79bb      	ldrb	r3, [r7, #6]
 800a468:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a46e:	f107 0308 	add.w	r3, r7, #8
 800a472:	4619      	mov	r1, r3
 800a474:	4829      	ldr	r0, [pc, #164]	; (800a51c <netconn_new_with_proto_and_callback+0xd8>)
 800a476:	f7ff ffc7 	bl	800a408 <netconn_apimsg>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a480:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a484:	2b00      	cmp	r3, #0
 800a486:	d043      	beq.n	800a510 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <netconn_new_with_proto_and_callback+0x58>
 800a490:	4b23      	ldr	r3, [pc, #140]	; (800a520 <netconn_new_with_proto_and_callback+0xdc>)
 800a492:	22a3      	movs	r2, #163	; 0xa3
 800a494:	4923      	ldr	r1, [pc, #140]	; (800a524 <netconn_new_with_proto_and_callback+0xe0>)
 800a496:	4824      	ldr	r0, [pc, #144]	; (800a528 <netconn_new_with_proto_and_callback+0xe4>)
 800a498:	f00d fbcc 	bl	8017c34 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	3310      	adds	r3, #16
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f00d f903 	bl	80176ac <sys_mbox_valid>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d105      	bne.n	800a4b8 <netconn_new_with_proto_and_callback+0x74>
 800a4ac:	4b1c      	ldr	r3, [pc, #112]	; (800a520 <netconn_new_with_proto_and_callback+0xdc>)
 800a4ae:	22a4      	movs	r2, #164	; 0xa4
 800a4b0:	491e      	ldr	r1, [pc, #120]	; (800a52c <netconn_new_with_proto_and_callback+0xe8>)
 800a4b2:	481d      	ldr	r0, [pc, #116]	; (800a528 <netconn_new_with_proto_and_callback+0xe4>)
 800a4b4:	f00d fbbe 	bl	8017c34 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	3314      	adds	r3, #20
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00d f8f5 	bl	80176ac <sys_mbox_valid>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <netconn_new_with_proto_and_callback+0x90>
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <netconn_new_with_proto_and_callback+0xdc>)
 800a4ca:	22a6      	movs	r2, #166	; 0xa6
 800a4cc:	4918      	ldr	r1, [pc, #96]	; (800a530 <netconn_new_with_proto_and_callback+0xec>)
 800a4ce:	4816      	ldr	r0, [pc, #88]	; (800a528 <netconn_new_with_proto_and_callback+0xe4>)
 800a4d0:	f00d fbb0 	bl	8017c34 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	330c      	adds	r3, #12
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f00d f975 	bl	80177c8 <sys_sem_valid>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <netconn_new_with_proto_and_callback+0xac>
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <netconn_new_with_proto_and_callback+0xdc>)
 800a4e6:	22a9      	movs	r2, #169	; 0xa9
 800a4e8:	4912      	ldr	r1, [pc, #72]	; (800a534 <netconn_new_with_proto_and_callback+0xf0>)
 800a4ea:	480f      	ldr	r0, [pc, #60]	; (800a528 <netconn_new_with_proto_and_callback+0xe4>)
 800a4ec:	f00d fba2 	bl	8017c34 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f00d f95a 	bl	80177ae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	3310      	adds	r3, #16
 800a4fe:	4618      	mov	r0, r3
 800a500:	f00d f860 	bl	80175c4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a506:	2007      	movs	r0, #7
 800a508:	f002 ff48 	bl	800d39c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a512:	4618      	mov	r0, r3
 800a514:	3730      	adds	r7, #48	; 0x30
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800b679 	.word	0x0800b679
 800a520:	08018c14 	.word	0x08018c14
 800a524:	08018c48 	.word	0x08018c48
 800a528:	08018c6c 	.word	0x08018c6c
 800a52c:	08018c94 	.word	0x08018c94
 800a530:	08018cac 	.word	0x08018cac
 800a534:	08018cd0 	.word	0x08018cd0

0800a538 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08c      	sub	sp, #48	; 0x30
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	e014      	b.n	800a574 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a54e:	2329      	movs	r3, #41	; 0x29
 800a550:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a552:	f107 030c 	add.w	r3, r7, #12
 800a556:	4619      	mov	r1, r3
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <netconn_prepare_delete+0x44>)
 800a55a:	f7ff ff55 	bl	800a408 <netconn_apimsg>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <netconn_prepare_delete+0x3a>
    return err;
 800a56c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a570:	e000      	b.n	800a574 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3730      	adds	r7, #48	; 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	0800bbdd 	.word	0x0800bbdd

0800a580 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <netconn_delete+0x12>
    return ERR_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	e00d      	b.n	800a5ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff ffd0 	bl	800a538 <netconn_prepare_delete>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <netconn_delete+0x2a>
    netconn_free(conn);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f8eb 	bl	800b780 <netconn_free>
  }
  return err;
 800a5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	; 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <netconn_bind+0x28>
 800a5cc:	4b11      	ldr	r3, [pc, #68]	; (800a614 <netconn_bind+0x5c>)
 800a5ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a5d2:	4911      	ldr	r1, [pc, #68]	; (800a618 <netconn_bind+0x60>)
 800a5d4:	4811      	ldr	r0, [pc, #68]	; (800a61c <netconn_bind+0x64>)
 800a5d6:	f00d fb2d 	bl	8017c34 <iprintf>
 800a5da:	f06f 030f 	mvn.w	r3, #15
 800a5de:	e015      	b.n	800a60c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a5e6:	4b0e      	ldr	r3, [pc, #56]	; (800a620 <netconn_bind+0x68>)
 800a5e8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a5f2:	88fb      	ldrh	r3, [r7, #6]
 800a5f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a5f6:	f107 0314 	add.w	r3, r7, #20
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4809      	ldr	r0, [pc, #36]	; (800a624 <netconn_bind+0x6c>)
 800a5fe:	f7ff ff03 	bl	800a408 <netconn_apimsg>
 800a602:	4603      	mov	r3, r0
 800a604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a608:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3738      	adds	r7, #56	; 0x38
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08018c14 	.word	0x08018c14
 800a618:	08018d4c 	.word	0x08018d4c
 800a61c:	08018c6c 	.word	0x08018c6c
 800a620:	0801c248 	.word	0x0801c248
 800a624:	0800bda5 	.word	0x0800bda5

0800a628 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08c      	sub	sp, #48	; 0x30
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <netconn_listen_with_backlog+0x26>
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <netconn_listen_with_backlog+0x48>)
 800a63c:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a640:	490c      	ldr	r1, [pc, #48]	; (800a674 <netconn_listen_with_backlog+0x4c>)
 800a642:	480d      	ldr	r0, [pc, #52]	; (800a678 <netconn_listen_with_backlog+0x50>)
 800a644:	f00d faf6 	bl	8017c34 <iprintf>
 800a648:	f06f 030f 	mvn.w	r3, #15
 800a64c:	e00c      	b.n	800a668 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	4619      	mov	r1, r3
 800a658:	4808      	ldr	r0, [pc, #32]	; (800a67c <netconn_listen_with_backlog+0x54>)
 800a65a:	f7ff fed5 	bl	800a408 <netconn_apimsg>
 800a65e:	4603      	mov	r3, r0
 800a660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a664:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3730      	adds	r7, #48	; 0x30
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	08018c14 	.word	0x08018c14
 800a674:	08018dcc 	.word	0x08018dcc
 800a678:	08018c6c 	.word	0x08018c6c
 800a67c:	0800be19 	.word	0x0800be19

0800a680 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d109      	bne.n	800a6a4 <netconn_accept+0x24>
 800a690:	4b3d      	ldr	r3, [pc, #244]	; (800a788 <netconn_accept+0x108>)
 800a692:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a696:	493d      	ldr	r1, [pc, #244]	; (800a78c <netconn_accept+0x10c>)
 800a698:	483d      	ldr	r0, [pc, #244]	; (800a790 <netconn_accept+0x110>)
 800a69a:	f00d facb 	bl	8017c34 <iprintf>
 800a69e:	f06f 030f 	mvn.w	r3, #15
 800a6a2:	e06c      	b.n	800a77e <netconn_accept+0xfe>
  *new_conn = NULL;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <netconn_accept+0x44>
 800a6b0:	4b35      	ldr	r3, [pc, #212]	; (800a788 <netconn_accept+0x108>)
 800a6b2:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a6b6:	4937      	ldr	r1, [pc, #220]	; (800a794 <netconn_accept+0x114>)
 800a6b8:	4835      	ldr	r0, [pc, #212]	; (800a790 <netconn_accept+0x110>)
 800a6ba:	f00d fabb 	bl	8017c34 <iprintf>
 800a6be:	f06f 030f 	mvn.w	r3, #15
 800a6c2:	e05c      	b.n	800a77e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fb6c 	bl	800ada2 <netconn_err>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a6ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a6d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6da:	e050      	b.n	800a77e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3314      	adds	r3, #20
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f00c ffe3 	bl	80176ac <sys_mbox_valid>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <netconn_accept+0x78>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7f1b      	ldrb	r3, [r3, #28]
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a6f8:	f06f 030e 	mvn.w	r3, #14
 800a6fc:	e03f      	b.n	800a77e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	7f1b      	ldrb	r3, [r3, #28]
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00e      	beq.n	800a728 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3314      	adds	r3, #20
 800a70e:	f107 020c 	add.w	r2, r7, #12
 800a712:	4611      	mov	r1, r2
 800a714:	4618      	mov	r0, r3
 800a716:	f00c ffb2 	bl	801767e <sys_arch_mbox_tryfetch>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a720:	d10a      	bne.n	800a738 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a722:	f06f 0306 	mvn.w	r3, #6
 800a726:	e02a      	b.n	800a77e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3314      	adds	r3, #20
 800a72c:	f107 010c 	add.w	r1, r7, #12
 800a730:	2200      	movs	r2, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f00c ff72 	bl	801761c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <netconn_accept+0xcc>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2200      	movs	r2, #0
 800a746:	2101      	movs	r1, #1
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f107 0213 	add.w	r2, r7, #19
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fb75 	bl	800ae44 <lwip_netconn_is_err_msg>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a764:	e00b      	b.n	800a77e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d102      	bne.n	800a772 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a76c:	f06f 030e 	mvn.w	r3, #14
 800a770:	e005      	b.n	800a77e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a77c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	08018c14 	.word	0x08018c14
 800a78c:	08018dec 	.word	0x08018dec
 800a790:	08018c6c 	.word	0x08018c6c
 800a794:	08018e0c 	.word	0x08018e0c

0800a798 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <netconn_recv_data+0x2c>
 800a7b0:	4b58      	ldr	r3, [pc, #352]	; (800a914 <netconn_recv_data+0x17c>)
 800a7b2:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a7b6:	4958      	ldr	r1, [pc, #352]	; (800a918 <netconn_recv_data+0x180>)
 800a7b8:	4858      	ldr	r0, [pc, #352]	; (800a91c <netconn_recv_data+0x184>)
 800a7ba:	f00d fa3b 	bl	8017c34 <iprintf>
 800a7be:	f06f 030f 	mvn.w	r3, #15
 800a7c2:	e0a2      	b.n	800a90a <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d109      	bne.n	800a7e4 <netconn_recv_data+0x4c>
 800a7d0:	4b50      	ldr	r3, [pc, #320]	; (800a914 <netconn_recv_data+0x17c>)
 800a7d2:	f240 224a 	movw	r2, #586	; 0x24a
 800a7d6:	4952      	ldr	r1, [pc, #328]	; (800a920 <netconn_recv_data+0x188>)
 800a7d8:	4850      	ldr	r0, [pc, #320]	; (800a91c <netconn_recv_data+0x184>)
 800a7da:	f00d fa2b 	bl	8017c34 <iprintf>
 800a7de:	f06f 030f 	mvn.w	r3, #15
 800a7e2:	e092      	b.n	800a90a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f00c ff5f 	bl	80176ac <sys_mbox_valid>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10e      	bne.n	800a812 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 fad4 	bl	800ada2 <netconn_err>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a7fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a806:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a80a:	e07e      	b.n	800a90a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a80c:	f06f 030a 	mvn.w	r3, #10
 800a810:	e07b      	b.n	800a90a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	7f1b      	ldrb	r3, [r3, #28]
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10f      	bne.n	800a83e <netconn_recv_data+0xa6>
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	7f1b      	ldrb	r3, [r3, #28]
 800a82c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a830:	2b00      	cmp	r3, #0
 800a832:	d104      	bne.n	800a83e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d023      	beq.n	800a886 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3310      	adds	r3, #16
 800a842:	f107 0218 	add.w	r2, r7, #24
 800a846:	4611      	mov	r1, r2
 800a848:	4618      	mov	r0, r3
 800a84a:	f00c ff18 	bl	801767e <sys_arch_mbox_tryfetch>
 800a84e:	4603      	mov	r3, r0
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a854:	d11f      	bne.n	800a896 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 faa3 	bl	800ada2 <netconn_err>
 800a85c:	4603      	mov	r3, r0
 800a85e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a860:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a868:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a86c:	e04d      	b.n	800a90a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	7f1b      	ldrb	r3, [r3, #28]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a87a:	f06f 030a 	mvn.w	r3, #10
 800a87e:	e044      	b.n	800a90a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a880:	f06f 0306 	mvn.w	r3, #6
 800a884:	e041      	b.n	800a90a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3310      	adds	r3, #16
 800a88a:	f107 0118 	add.w	r1, r7, #24
 800a88e:	2200      	movs	r2, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f00c fec3 	bl	801761c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a89e:	2b10      	cmp	r3, #16
 800a8a0:	d117      	bne.n	800a8d2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	f107 0217 	add.w	r2, r7, #23
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 faca 	bl	800ae44 <lwip_netconn_is_err_msg>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a8b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8ba:	f113 0f0f 	cmn.w	r3, #15
 800a8be:	d101      	bne.n	800a8c4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e022      	b.n	800a90a <netconn_recv_data+0x172>
      }
      return err;
 800a8c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8c8:	e01f      	b.n	800a90a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	891b      	ldrh	r3, [r3, #8]
 800a8ce:	83fb      	strh	r3, [r7, #30]
 800a8d0:	e00d      	b.n	800a8ee <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d106      	bne.n	800a8e6 <netconn_recv_data+0x14e>
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <netconn_recv_data+0x17c>)
 800a8da:	f240 2291 	movw	r2, #657	; 0x291
 800a8de:	4911      	ldr	r1, [pc, #68]	; (800a924 <netconn_recv_data+0x18c>)
 800a8e0:	480e      	ldr	r0, [pc, #56]	; (800a91c <netconn_recv_data+0x184>)
 800a8e2:	f00d f9a7 	bl	8017c34 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	891b      	ldrh	r3, [r3, #8]
 800a8ec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <netconn_recv_data+0x16a>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	8bfa      	ldrh	r2, [r7, #30]
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3720      	adds	r7, #32
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	08018c14 	.word	0x08018c14
 800a918:	08018e2c 	.word	0x08018e2c
 800a91c:	08018c6c 	.word	0x08018c6c
 800a920:	08018e4c 	.word	0x08018e4c
 800a924:	08018e68 	.word	0x08018e68

0800a928 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <netconn_tcp_recvd_msg+0x1e>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a942:	2b10      	cmp	r3, #16
 800a944:	d009      	beq.n	800a95a <netconn_tcp_recvd_msg+0x32>
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <netconn_tcp_recvd_msg+0x50>)
 800a948:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a94c:	490b      	ldr	r1, [pc, #44]	; (800a97c <netconn_tcp_recvd_msg+0x54>)
 800a94e:	480c      	ldr	r0, [pc, #48]	; (800a980 <netconn_tcp_recvd_msg+0x58>)
 800a950:	f00d f970 	bl	8017c34 <iprintf>
 800a954:	f06f 030f 	mvn.w	r3, #15
 800a958:	e00a      	b.n	800a970 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	4806      	ldr	r0, [pc, #24]	; (800a984 <netconn_tcp_recvd_msg+0x5c>)
 800a96a:	f7ff fd4d 	bl	800a408 <netconn_apimsg>
 800a96e:	4603      	mov	r3, r0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	08018c14 	.word	0x08018c14
 800a97c:	08018e74 	.word	0x08018e74
 800a980:	08018c6c 	.word	0x08018c6c
 800a984:	0800bf49 	.word	0x0800bf49

0800a988 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b090      	sub	sp, #64	; 0x40
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	4613      	mov	r3, r2
 800a994:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3310      	adds	r3, #16
 800a99a:	4618      	mov	r0, r3
 800a99c:	f00c fe86 	bl	80176ac <sys_mbox_valid>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a9a6:	f06f 030a 	mvn.w	r3, #10
 800a9aa:	e06d      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	7f1b      	ldrb	r3, [r3, #28]
 800a9b0:	b25b      	sxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	da07      	bge.n	800a9c6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	7f1b      	ldrb	r3, [r3, #28]
 800a9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a9c4:	e039      	b.n	800aa3a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff fee3 	bl	800a798 <netconn_recv_data>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a9d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a9e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9e4:	e050      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10e      	bne.n	800aa14 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <netconn_recv_data_tcp+0x7a>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	891b      	ldrh	r3, [r3, #8]
 800aa00:	e000      	b.n	800aa04 <netconn_recv_data_tcp+0x7c>
 800aa02:	2301      	movs	r3, #1
 800aa04:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800aa06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa08:	f107 0214 	add.w	r2, r7, #20
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff ff8a 	bl	800a928 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d134      	bne.n	800aa84 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	f003 0310 	and.w	r3, r3, #16
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	7f1b      	ldrb	r3, [r3, #28]
 800aa28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800aa32:	f06f 0306 	mvn.w	r3, #6
 800aa36:	e027      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800aa38:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d005      	beq.n	800aa4e <netconn_recv_data_tcp+0xc6>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2200      	movs	r2, #0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10f      	bne.n	800aa76 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 f9a3 	bl	800ada2 <netconn_err>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800aa62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <netconn_recv_data_tcp+0xe8>
          return err;
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa6e:	e00b      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800aa70:	f06f 030d 	mvn.w	r3, #13
 800aa74:	e008      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800aa76:	2101      	movs	r1, #1
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f955 	bl	800ad28 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800aa7e:	f06f 030e 	mvn.w	r3, #14
 800aa82:	e001      	b.n	800aa88 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800aa84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3740      	adds	r7, #64	; 0x40
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d109      	bne.n	800aab8 <netconn_recv+0x28>
 800aaa4:	4b32      	ldr	r3, [pc, #200]	; (800ab70 <netconn_recv+0xe0>)
 800aaa6:	f240 3263 	movw	r2, #867	; 0x363
 800aaaa:	4932      	ldr	r1, [pc, #200]	; (800ab74 <netconn_recv+0xe4>)
 800aaac:	4832      	ldr	r0, [pc, #200]	; (800ab78 <netconn_recv+0xe8>)
 800aaae:	f00d f8c1 	bl	8017c34 <iprintf>
 800aab2:	f06f 030f 	mvn.w	r3, #15
 800aab6:	e056      	b.n	800ab66 <netconn_recv+0xd6>
  *new_buf = NULL;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2200      	movs	r2, #0
 800aabc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <netconn_recv+0x48>
 800aac4:	4b2a      	ldr	r3, [pc, #168]	; (800ab70 <netconn_recv+0xe0>)
 800aac6:	f240 3265 	movw	r2, #869	; 0x365
 800aaca:	492c      	ldr	r1, [pc, #176]	; (800ab7c <netconn_recv+0xec>)
 800aacc:	482a      	ldr	r0, [pc, #168]	; (800ab78 <netconn_recv+0xe8>)
 800aace:	f00d f8b1 	bl	8017c34 <iprintf>
 800aad2:	f06f 030f 	mvn.w	r3, #15
 800aad6:	e046      	b.n	800ab66 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aae0:	2b10      	cmp	r3, #16
 800aae2:	d13a      	bne.n	800ab5a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aae8:	2006      	movs	r0, #6
 800aaea:	f002 fc05 	bl	800d2f8 <memp_malloc>
 800aaee:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d102      	bne.n	800aafc <netconn_recv+0x6c>
      return ERR_MEM;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e034      	b.n	800ab66 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800aafc:	f107 030c 	add.w	r3, r7, #12
 800ab00:	2200      	movs	r2, #0
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ff3f 	bl	800a988 <netconn_recv_data_tcp>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ab0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ab16:	6979      	ldr	r1, [r7, #20]
 800ab18:	2006      	movs	r0, #6
 800ab1a:	f002 fc3f 	bl	800d39c <memp_free>
      return err;
 800ab1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab22:	e020      	b.n	800ab66 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <netconn_recv+0xa8>
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <netconn_recv+0xe0>)
 800ab2c:	f240 3279 	movw	r2, #889	; 0x379
 800ab30:	4913      	ldr	r1, [pc, #76]	; (800ab80 <netconn_recv+0xf0>)
 800ab32:	4811      	ldr	r0, [pc, #68]	; (800ab78 <netconn_recv+0xe8>)
 800ab34:	f00d f87e 	bl	8017c34 <iprintf>

    buf->p = p;
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2200      	movs	r2, #0
 800ab48:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	e005      	b.n	800ab66 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fe1a 	bl	800a798 <netconn_recv_data>
 800ab64:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	08018c14 	.word	0x08018c14
 800ab74:	08018e2c 	.word	0x08018e2c
 800ab78:	08018c6c 	.word	0x08018c6c
 800ab7c:	08018e4c 	.word	0x08018e4c
 800ab80:	08018ec4 	.word	0x08018ec4

0800ab84 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ab9a:	78fa      	ldrb	r2, [r7, #3]
 800ab9c:	f107 0110 	add.w	r1, r7, #16
 800aba0:	6a3b      	ldr	r3, [r7, #32]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4613      	mov	r3, r2
 800aba6:	2201      	movs	r2, #1
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f805 	bl	800abb8 <netconn_write_vectors_partly>
 800abae:	4603      	mov	r3, r0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b092      	sub	sp, #72	; 0x48
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4611      	mov	r1, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	460b      	mov	r3, r1
 800abc8:	80fb      	strh	r3, [r7, #6]
 800abca:	4613      	mov	r3, r2
 800abcc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d109      	bne.n	800abe8 <netconn_write_vectors_partly+0x30>
 800abd4:	4b4e      	ldr	r3, [pc, #312]	; (800ad10 <netconn_write_vectors_partly+0x158>)
 800abd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800abda:	494e      	ldr	r1, [pc, #312]	; (800ad14 <netconn_write_vectors_partly+0x15c>)
 800abdc:	484e      	ldr	r0, [pc, #312]	; (800ad18 <netconn_write_vectors_partly+0x160>)
 800abde:	f00d f829 	bl	8017c34 <iprintf>
 800abe2:	f06f 030f 	mvn.w	r3, #15
 800abe6:	e08e      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d009      	beq.n	800ac08 <netconn_write_vectors_partly+0x50>
 800abf4:	4b46      	ldr	r3, [pc, #280]	; (800ad10 <netconn_write_vectors_partly+0x158>)
 800abf6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800abfa:	4948      	ldr	r1, [pc, #288]	; (800ad1c <netconn_write_vectors_partly+0x164>)
 800abfc:	4846      	ldr	r0, [pc, #280]	; (800ad18 <netconn_write_vectors_partly+0x160>)
 800abfe:	f00d f819 	bl	8017c34 <iprintf>
 800ac02:	f06f 0305 	mvn.w	r3, #5
 800ac06:	e07e      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	7f1b      	ldrb	r3, [r3, #28]
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <netconn_write_vectors_partly+0x66>
 800ac14:	797b      	ldrb	r3, [r7, #5]
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <netconn_write_vectors_partly+0x6a>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <netconn_write_vectors_partly+0x6c>
 800ac22:	2300      	movs	r3, #0
 800ac24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ac28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <netconn_write_vectors_partly+0x84>
 800ac30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ac36:	f06f 0305 	mvn.w	r3, #5
 800ac3a:	e064      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ac40:	2300      	movs	r3, #0
 800ac42:	643b      	str	r3, [r7, #64]	; 0x40
 800ac44:	e015      	b.n	800ac72 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ac46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac52:	4413      	add	r3, r2
 800ac54:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d202      	bcs.n	800ac6c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ac66:	f06f 0305 	mvn.w	r3, #5
 800ac6a:	e04c      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6e:	3301      	adds	r3, #1
 800ac70:	643b      	str	r3, [r7, #64]	; 0x40
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac76:	429a      	cmp	r2, r3
 800ac78:	dbe5      	blt.n	800ac46 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ac7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e040      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ac84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	da0a      	bge.n	800aca0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ac90:	f06f 0305 	mvn.w	r3, #5
 800ac94:	e037      	b.n	800ad06 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ac96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ac9a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800aca8:	88fb      	ldrh	r3, [r7, #6]
 800acaa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800acb0:	797b      	ldrb	r3, [r7, #5]
 800acb2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800acb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acb8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800acbe:	f107 0314 	add.w	r3, r7, #20
 800acc2:	4619      	mov	r1, r3
 800acc4:	4816      	ldr	r0, [pc, #88]	; (800ad20 <netconn_write_vectors_partly+0x168>)
 800acc6:	f7ff fb9f 	bl	800a408 <netconn_apimsg>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800acd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d114      	bne.n	800ad02 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800acd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800acde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ace0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ace4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d006      	beq.n	800ad02 <netconn_write_vectors_partly+0x14a>
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <netconn_write_vectors_partly+0x158>)
 800acf6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800acfa:	490a      	ldr	r1, [pc, #40]	; (800ad24 <netconn_write_vectors_partly+0x16c>)
 800acfc:	4806      	ldr	r0, [pc, #24]	; (800ad18 <netconn_write_vectors_partly+0x160>)
 800acfe:	f00c ff99 	bl	8017c34 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ad02:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3748      	adds	r7, #72	; 0x48
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08018c14 	.word	0x08018c14
 800ad14:	08018eec 	.word	0x08018eec
 800ad18:	08018c6c 	.word	0x08018c6c
 800ad1c:	08018f08 	.word	0x08018f08
 800ad20:	0800c34d 	.word	0x0800c34d
 800ad24:	08018f2c 	.word	0x08018f2c

0800ad28 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08c      	sub	sp, #48	; 0x30
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d109      	bne.n	800ad4e <netconn_close_shutdown+0x26>
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <netconn_close_shutdown+0x50>)
 800ad3c:	f240 4247 	movw	r2, #1095	; 0x447
 800ad40:	490e      	ldr	r1, [pc, #56]	; (800ad7c <netconn_close_shutdown+0x54>)
 800ad42:	480f      	ldr	r0, [pc, #60]	; (800ad80 <netconn_close_shutdown+0x58>)
 800ad44:	f00c ff76 	bl	8017c34 <iprintf>
 800ad48:	f06f 030f 	mvn.w	r3, #15
 800ad4c:	e010      	b.n	800ad70 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ad56:	2329      	movs	r3, #41	; 0x29
 800ad58:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ad5a:	f107 030c 	add.w	r3, r7, #12
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4808      	ldr	r0, [pc, #32]	; (800ad84 <netconn_close_shutdown+0x5c>)
 800ad62:	f7ff fb51 	bl	800a408 <netconn_apimsg>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ad6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3730      	adds	r7, #48	; 0x30
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08018c14 	.word	0x08018c14
 800ad7c:	08018f50 	.word	0x08018f50
 800ad80:	08018c6c 	.word	0x08018c6c
 800ad84:	0800c465 	.word	0x0800c465

0800ad88 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ad90:	2103      	movs	r1, #3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff ffc8 	bl	800ad28 <netconn_close_shutdown>
 800ad98:	4603      	mov	r3, r0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <netconn_err+0x12>
    return ERR_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	e00d      	b.n	800add0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800adb4:	f00c fd84 	bl	80178c0 <sys_arch_protect>
 800adb8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	7a1b      	ldrb	r3, [r3, #8]
 800adbe:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f00c fd88 	bl	80178dc <sys_arch_unprotect>
  return err;
 800adcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ade2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade6:	f113 0f0d 	cmn.w	r3, #13
 800adea:	d009      	beq.n	800ae00 <lwip_netconn_err_to_msg+0x28>
 800adec:	f113 0f0d 	cmn.w	r3, #13
 800adf0:	dc0c      	bgt.n	800ae0c <lwip_netconn_err_to_msg+0x34>
 800adf2:	f113 0f0f 	cmn.w	r3, #15
 800adf6:	d007      	beq.n	800ae08 <lwip_netconn_err_to_msg+0x30>
 800adf8:	f113 0f0e 	cmn.w	r3, #14
 800adfc:	d002      	beq.n	800ae04 <lwip_netconn_err_to_msg+0x2c>
 800adfe:	e005      	b.n	800ae0c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <lwip_netconn_err_to_msg+0x54>)
 800ae02:	e00e      	b.n	800ae22 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ae04:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <lwip_netconn_err_to_msg+0x58>)
 800ae06:	e00c      	b.n	800ae22 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ae08:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <lwip_netconn_err_to_msg+0x5c>)
 800ae0a:	e00a      	b.n	800ae22 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ae0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <lwip_netconn_err_to_msg+0x48>
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <lwip_netconn_err_to_msg+0x60>)
 800ae16:	227d      	movs	r2, #125	; 0x7d
 800ae18:	4908      	ldr	r1, [pc, #32]	; (800ae3c <lwip_netconn_err_to_msg+0x64>)
 800ae1a:	4809      	ldr	r0, [pc, #36]	; (800ae40 <lwip_netconn_err_to_msg+0x68>)
 800ae1c:	f00c ff0a 	bl	8017c34 <iprintf>
      return NULL;
 800ae20:	2300      	movs	r3, #0
  }
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0801c134 	.word	0x0801c134
 800ae30:	0801c135 	.word	0x0801c135
 800ae34:	0801c136 	.word	0x0801c136
 800ae38:	08018f6c 	.word	0x08018f6c
 800ae3c:	08018fa0 	.word	0x08018fa0
 800ae40:	08018fb0 	.word	0x08018fb0

0800ae44 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d105      	bne.n	800ae60 <lwip_netconn_is_err_msg+0x1c>
 800ae54:	4b12      	ldr	r3, [pc, #72]	; (800aea0 <lwip_netconn_is_err_msg+0x5c>)
 800ae56:	2285      	movs	r2, #133	; 0x85
 800ae58:	4912      	ldr	r1, [pc, #72]	; (800aea4 <lwip_netconn_is_err_msg+0x60>)
 800ae5a:	4813      	ldr	r0, [pc, #76]	; (800aea8 <lwip_netconn_is_err_msg+0x64>)
 800ae5c:	f00c feea 	bl	8017c34 <iprintf>

  if (msg == &netconn_aborted) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a12      	ldr	r2, [pc, #72]	; (800aeac <lwip_netconn_is_err_msg+0x68>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d104      	bne.n	800ae72 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	22f3      	movs	r2, #243	; 0xf3
 800ae6c:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e012      	b.n	800ae98 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a0e      	ldr	r2, [pc, #56]	; (800aeb0 <lwip_netconn_is_err_msg+0x6c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d104      	bne.n	800ae84 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	22f2      	movs	r2, #242	; 0xf2
 800ae7e:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e009      	b.n	800ae98 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <lwip_netconn_is_err_msg+0x70>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d104      	bne.n	800ae96 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	22f1      	movs	r2, #241	; 0xf1
 800ae90:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	08018f6c 	.word	0x08018f6c
 800aea4:	08018fd8 	.word	0x08018fd8
 800aea8:	08018fb0 	.word	0x08018fb0
 800aeac:	0801c134 	.word	0x0801c134
 800aeb0:	0801c135 	.word	0x0801c135
 800aeb4:	0801c136 	.word	0x0801c136

0800aeb8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d105      	bne.n	800aed8 <recv_udp+0x20>
 800aecc:	4b34      	ldr	r3, [pc, #208]	; (800afa0 <recv_udp+0xe8>)
 800aece:	22e5      	movs	r2, #229	; 0xe5
 800aed0:	4934      	ldr	r1, [pc, #208]	; (800afa4 <recv_udp+0xec>)
 800aed2:	4835      	ldr	r0, [pc, #212]	; (800afa8 <recv_udp+0xf0>)
 800aed4:	f00c feae 	bl	8017c34 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d105      	bne.n	800aeea <recv_udp+0x32>
 800aede:	4b30      	ldr	r3, [pc, #192]	; (800afa0 <recv_udp+0xe8>)
 800aee0:	22e6      	movs	r2, #230	; 0xe6
 800aee2:	4932      	ldr	r1, [pc, #200]	; (800afac <recv_udp+0xf4>)
 800aee4:	4830      	ldr	r0, [pc, #192]	; (800afa8 <recv_udp+0xf0>)
 800aee6:	f00c fea5 	bl	8017c34 <iprintf>
  conn = (struct netconn *)arg;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <recv_udp+0x44>
    pbuf_free(p);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f003 f8f5 	bl	800e0e4 <pbuf_free>
    return;
 800aefa:	e04d      	b.n	800af98 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	429a      	cmp	r2, r3
 800af04:	d005      	beq.n	800af12 <recv_udp+0x5a>
 800af06:	4b26      	ldr	r3, [pc, #152]	; (800afa0 <recv_udp+0xe8>)
 800af08:	22ee      	movs	r2, #238	; 0xee
 800af0a:	4929      	ldr	r1, [pc, #164]	; (800afb0 <recv_udp+0xf8>)
 800af0c:	4826      	ldr	r0, [pc, #152]	; (800afa8 <recv_udp+0xf0>)
 800af0e:	f00c fe91 	bl	8017c34 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	3310      	adds	r3, #16
 800af16:	4618      	mov	r0, r3
 800af18:	f00c fbc8 	bl	80176ac <sys_mbox_valid>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f003 f8de 	bl	800e0e4 <pbuf_free>
    return;
 800af28:	e036      	b.n	800af98 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800af2a:	2006      	movs	r0, #6
 800af2c:	f002 f9e4 	bl	800d2f8 <memp_malloc>
 800af30:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <recv_udp+0x88>
    pbuf_free(p);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f003 f8d3 	bl	800e0e4 <pbuf_free>
    return;
 800af3e:	e02b      	b.n	800af98 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <recv_udp+0xa0>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	e000      	b.n	800af5a <recv_udp+0xa2>
 800af58:	2300      	movs	r3, #0
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af62:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	891b      	ldrh	r3, [r3, #8]
 800af68:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	3310      	adds	r3, #16
 800af6e:	69b9      	ldr	r1, [r7, #24]
 800af70:	4618      	mov	r0, r3
 800af72:	f00c fb39 	bl	80175e8 <sys_mbox_trypost>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <recv_udp+0xcc>
    netbuf_delete(buf);
 800af7c:	69b8      	ldr	r0, [r7, #24]
 800af7e:	f001 fafd 	bl	800c57c <netbuf_delete>
    return;
 800af82:	e009      	b.n	800af98 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <recv_udp+0xe0>
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	8afa      	ldrh	r2, [r7, #22]
 800af92:	2100      	movs	r1, #0
 800af94:	69f8      	ldr	r0, [r7, #28]
 800af96:	4798      	blx	r3
  }
}
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08018f6c 	.word	0x08018f6c
 800afa4:	08018fe4 	.word	0x08018fe4
 800afa8:	08018fb0 	.word	0x08018fb0
 800afac:	08019008 	.word	0x08019008
 800afb0:	08019028 	.word	0x08019028

0800afb4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <recv_tcp+0x22>
 800afc8:	4b36      	ldr	r3, [pc, #216]	; (800b0a4 <recv_tcp+0xf0>)
 800afca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afce:	4936      	ldr	r1, [pc, #216]	; (800b0a8 <recv_tcp+0xf4>)
 800afd0:	4836      	ldr	r0, [pc, #216]	; (800b0ac <recv_tcp+0xf8>)
 800afd2:	f00c fe2f 	bl	8017c34 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d106      	bne.n	800afea <recv_tcp+0x36>
 800afdc:	4b31      	ldr	r3, [pc, #196]	; (800b0a4 <recv_tcp+0xf0>)
 800afde:	f240 122d 	movw	r2, #301	; 0x12d
 800afe2:	4933      	ldr	r1, [pc, #204]	; (800b0b0 <recv_tcp+0xfc>)
 800afe4:	4831      	ldr	r0, [pc, #196]	; (800b0ac <recv_tcp+0xf8>)
 800afe6:	f00c fe25 	bl	8017c34 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800afea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <recv_tcp+0x4c>
 800aff2:	4b2c      	ldr	r3, [pc, #176]	; (800b0a4 <recv_tcp+0xf0>)
 800aff4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800aff8:	492e      	ldr	r1, [pc, #184]	; (800b0b4 <recv_tcp+0x100>)
 800affa:	482c      	ldr	r0, [pc, #176]	; (800b0ac <recv_tcp+0xf8>)
 800affc:	f00c fe1a 	bl	8017c34 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <recv_tcp+0x5c>
    return ERR_VAL;
 800b00a:	f06f 0305 	mvn.w	r3, #5
 800b00e:	e045      	b.n	800b09c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	429a      	cmp	r2, r3
 800b018:	d006      	beq.n	800b028 <recv_tcp+0x74>
 800b01a:	4b22      	ldr	r3, [pc, #136]	; (800b0a4 <recv_tcp+0xf0>)
 800b01c:	f240 1235 	movw	r2, #309	; 0x135
 800b020:	4925      	ldr	r1, [pc, #148]	; (800b0b8 <recv_tcp+0x104>)
 800b022:	4822      	ldr	r0, [pc, #136]	; (800b0ac <recv_tcp+0xf8>)
 800b024:	f00c fe06 	bl	8017c34 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	3310      	adds	r3, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	f00c fb3d 	bl	80176ac <sys_mbox_valid>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10d      	bne.n	800b054 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d008      	beq.n	800b050 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	891b      	ldrh	r3, [r3, #8]
 800b042:	4619      	mov	r1, r3
 800b044:	68b8      	ldr	r0, [r7, #8]
 800b046:	f004 f805 	bl	800f054 <tcp_recved>
      pbuf_free(p);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f003 f84a 	bl	800e0e4 <pbuf_free>
    }
    return ERR_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	e023      	b.n	800b09c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <recv_tcp+0xb2>
    msg = p;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	891b      	ldrh	r3, [r3, #8]
 800b062:	83fb      	strh	r3, [r7, #30]
 800b064:	e003      	b.n	800b06e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b066:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <recv_tcp+0x108>)
 800b068:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	3310      	adds	r3, #16
 800b072:	69b9      	ldr	r1, [r7, #24]
 800b074:	4618      	mov	r0, r3
 800b076:	f00c fab7 	bl	80175e8 <sys_mbox_trypost>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	e00a      	b.n	800b09c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <recv_tcp+0xe6>
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	8bfa      	ldrh	r2, [r7, #30]
 800b094:	2100      	movs	r1, #0
 800b096:	6978      	ldr	r0, [r7, #20]
 800b098:	4798      	blx	r3
  }

  return ERR_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	08018f6c 	.word	0x08018f6c
 800b0a8:	08019048 	.word	0x08019048
 800b0ac:	08018fb0 	.word	0x08018fb0
 800b0b0:	0801906c 	.word	0x0801906c
 800b0b4:	0801908c 	.word	0x0801908c
 800b0b8:	080190a4 	.word	0x080190a4
 800b0bc:	0801c136 	.word	0x0801c136

0800b0c0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <poll_tcp+0x22>
 800b0d4:	4b29      	ldr	r3, [pc, #164]	; (800b17c <poll_tcp+0xbc>)
 800b0d6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b0da:	4929      	ldr	r1, [pc, #164]	; (800b180 <poll_tcp+0xc0>)
 800b0dc:	4829      	ldr	r0, [pc, #164]	; (800b184 <poll_tcp+0xc4>)
 800b0de:	f00c fda9 	bl	8017c34 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d104      	bne.n	800b0f4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 ff61 	bl	800bfb4 <lwip_netconn_do_writemore>
 800b0f2:	e016      	b.n	800b122 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	785b      	ldrb	r3, [r3, #1]
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	d112      	bne.n	800b122 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <poll_tcp+0x5a>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	7a5b      	ldrb	r3, [r3, #9]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d005      	beq.n	800b11a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	7a5a      	ldrb	r2, [r3, #9]
 800b114:	3a01      	subs	r2, #1
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b11a:	2101      	movs	r1, #1
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fbf7 	bl	800b910 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	7f1b      	ldrb	r3, [r3, #28]
 800b126:	f003 0310 	and.w	r3, r3, #16
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d021      	beq.n	800b172 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01d      	beq.n	800b172 <poll_tcp+0xb2>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b13e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b142:	d316      	bcc.n	800b172 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d810      	bhi.n	800b172 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	7f1b      	ldrb	r3, [r3, #28]
 800b154:	f023 0310 	bic.w	r3, r3, #16
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <poll_tcp+0xb2>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2200      	movs	r2, #0
 800b16c:	2102      	movs	r1, #2
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	08018f6c 	.word	0x08018f6c
 800b180:	080190c4 	.word	0x080190c4
 800b184:	08018fb0 	.word	0x08018fb0

0800b188 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	4613      	mov	r3, r2
 800b194:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d106      	bne.n	800b1ae <sent_tcp+0x26>
 800b1a0:	4b20      	ldr	r3, [pc, #128]	; (800b224 <sent_tcp+0x9c>)
 800b1a2:	f240 1293 	movw	r2, #403	; 0x193
 800b1a6:	4920      	ldr	r1, [pc, #128]	; (800b228 <sent_tcp+0xa0>)
 800b1a8:	4820      	ldr	r0, [pc, #128]	; (800b22c <sent_tcp+0xa4>)
 800b1aa:	f00c fd43 	bl	8017c34 <iprintf>

  if (conn) {
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d032      	beq.n	800b21a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	785b      	ldrb	r3, [r3, #1]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d104      	bne.n	800b1c6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b1bc:	2101      	movs	r1, #1
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f000 fef8 	bl	800bfb4 <lwip_netconn_do_writemore>
 800b1c4:	e007      	b.n	800b1d6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d103      	bne.n	800b1d6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	6978      	ldr	r0, [r7, #20]
 800b1d2:	f000 fb9d 	bl	800b910 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01d      	beq.n	800b21a <sent_tcp+0x92>
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1e6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b1ea:	d316      	bcc.n	800b21a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d810      	bhi.n	800b21a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	7f1b      	ldrb	r3, [r3, #28]
 800b1fc:	f023 0310 	bic.w	r3, r3, #16
 800b200:	b2da      	uxtb	r2, r3
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <sent_tcp+0x92>
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	2102      	movs	r1, #2
 800b216:	6978      	ldr	r0, [r7, #20]
 800b218:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	08018f6c 	.word	0x08018f6c
 800b228:	080190c4 	.word	0x080190c4
 800b22c:	08018fb0 	.word	0x08018fb0

0800b230 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <err_tcp+0x24>
 800b246:	4b5f      	ldr	r3, [pc, #380]	; (800b3c4 <err_tcp+0x194>)
 800b248:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b24c:	495e      	ldr	r1, [pc, #376]	; (800b3c8 <err_tcp+0x198>)
 800b24e:	485f      	ldr	r0, [pc, #380]	; (800b3cc <err_tcp+0x19c>)
 800b250:	f00c fcf0 	bl	8017c34 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b254:	f00c fb34 	bl	80178c0 <sys_arch_protect>
 800b258:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	2200      	movs	r2, #0
 800b25e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	78fa      	ldrb	r2, [r7, #3]
 800b264:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	7f1b      	ldrb	r3, [r3, #28]
 800b26a:	f043 0301 	orr.w	r3, r3, #1
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	2200      	movs	r2, #0
 800b27e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b280:	69b8      	ldr	r0, [r7, #24]
 800b282:	f00c fb2b 	bl	80178dc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <err_tcp+0x6a>
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2200      	movs	r2, #0
 800b294:	2104      	movs	r1, #4
 800b296:	69f8      	ldr	r0, [r7, #28]
 800b298:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <err_tcp+0x7e>
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	69f8      	ldr	r0, [r7, #28]
 800b2ac:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <err_tcp+0x92>
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2102      	movs	r1, #2
 800b2be:	69f8      	ldr	r0, [r7, #28]
 800b2c0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b2c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fd86 	bl	800add8 <lwip_netconn_err_to_msg>
 800b2cc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	3310      	adds	r3, #16
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f00c f9ea 	bl	80176ac <sys_mbox_valid>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	3310      	adds	r3, #16
 800b2e2:	6939      	ldr	r1, [r7, #16]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f00c f97f 	bl	80175e8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	3314      	adds	r3, #20
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f00c f9dc 	bl	80176ac <sys_mbox_valid>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	3314      	adds	r3, #20
 800b2fe:	6939      	ldr	r1, [r7, #16]
 800b300:	4618      	mov	r0, r3
 800b302:	f00c f971 	bl	80175e8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d005      	beq.n	800b318 <err_tcp+0xe8>
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d002      	beq.n	800b318 <err_tcp+0xe8>
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b03      	cmp	r3, #3
 800b316:	d143      	bne.n	800b3a0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	7f1b      	ldrb	r3, [r3, #28]
 800b31c:	f003 0304 	and.w	r3, r3, #4
 800b320:	2b00      	cmp	r3, #0
 800b322:	bf14      	ite	ne
 800b324:	2301      	movne	r3, #1
 800b326:	2300      	moveq	r3, #0
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	7f1b      	ldrb	r3, [r3, #28]
 800b330:	f023 0304 	bic.w	r3, r3, #4
 800b334:	b2da      	uxtb	r2, r3
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d13b      	bne.n	800b3b8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <err_tcp+0x126>
 800b348:	4b1e      	ldr	r3, [pc, #120]	; (800b3c4 <err_tcp+0x194>)
 800b34a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b34e:	4920      	ldr	r1, [pc, #128]	; (800b3d0 <err_tcp+0x1a0>)
 800b350:	481e      	ldr	r0, [pc, #120]	; (800b3cc <err_tcp+0x19c>)
 800b352:	f00c fc6f 	bl	8017c34 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d104      	bne.n	800b366 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	6a1b      	ldr	r3, [r3, #32]
 800b360:	2200      	movs	r2, #0
 800b362:	711a      	strb	r2, [r3, #4]
 800b364:	e003      	b.n	800b36e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	78fa      	ldrb	r2, [r7, #3]
 800b36c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	330c      	adds	r3, #12
 800b376:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f00c fa25 	bl	80177c8 <sys_sem_valid>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <err_tcp+0x162>
 800b384:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <err_tcp+0x194>)
 800b386:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b38a:	4912      	ldr	r1, [pc, #72]	; (800b3d4 <err_tcp+0x1a4>)
 800b38c:	480f      	ldr	r0, [pc, #60]	; (800b3cc <err_tcp+0x19c>)
 800b38e:	f00c fc51 	bl	8017c34 <iprintf>
      conn->current_msg = NULL;
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	2200      	movs	r2, #0
 800b396:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b398:	68b8      	ldr	r0, [r7, #8]
 800b39a:	f00c f9fb 	bl	8017794 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b39e:	e00b      	b.n	800b3b8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	6a1b      	ldr	r3, [r3, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d008      	beq.n	800b3ba <err_tcp+0x18a>
 800b3a8:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <err_tcp+0x194>)
 800b3aa:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b3ae:	490a      	ldr	r1, [pc, #40]	; (800b3d8 <err_tcp+0x1a8>)
 800b3b0:	4806      	ldr	r0, [pc, #24]	; (800b3cc <err_tcp+0x19c>)
 800b3b2:	f00c fc3f 	bl	8017c34 <iprintf>
  }
}
 800b3b6:	e000      	b.n	800b3ba <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b3b8:	bf00      	nop
}
 800b3ba:	bf00      	nop
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	08018f6c 	.word	0x08018f6c
 800b3c8:	080190c4 	.word	0x080190c4
 800b3cc:	08018fb0 	.word	0x08018fb0
 800b3d0:	080190d4 	.word	0x080190d4
 800b3d4:	080190f0 	.word	0x080190f0
 800b3d8:	0801910c 	.word	0x0801910c

0800b3dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f004 fcf7 	bl	800fde0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b3f2:	490a      	ldr	r1, [pc, #40]	; (800b41c <setup_tcp+0x40>)
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f004 fd05 	bl	800fe04 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b3fa:	4909      	ldr	r1, [pc, #36]	; (800b420 <setup_tcp+0x44>)
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f004 fd23 	bl	800fe48 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b402:	2202      	movs	r2, #2
 800b404:	4907      	ldr	r1, [pc, #28]	; (800b424 <setup_tcp+0x48>)
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f004 fd7a 	bl	800ff00 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b40c:	4906      	ldr	r1, [pc, #24]	; (800b428 <setup_tcp+0x4c>)
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f004 fd3c 	bl	800fe8c <tcp_err>
}
 800b414:	bf00      	nop
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	0800afb5 	.word	0x0800afb5
 800b420:	0800b189 	.word	0x0800b189
 800b424:	0800b0c1 	.word	0x0800b0c1
 800b428:	0800b231 	.word	0x0800b231

0800b42c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b089      	sub	sp, #36	; 0x24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <accept_function+0x1e>
    return ERR_VAL;
 800b444:	f06f 0305 	mvn.w	r3, #5
 800b448:	e0a1      	b.n	800b58e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	3314      	adds	r3, #20
 800b44e:	4618      	mov	r0, r3
 800b450:	f00c f92c 	bl	80176ac <sys_mbox_valid>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b45a:	f06f 0305 	mvn.w	r3, #5
 800b45e:	e096      	b.n	800b58e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d11b      	bne.n	800b49e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	f103 0414 	add.w	r4, r3, #20
 800b46c:	f06f 000c 	mvn.w	r0, #12
 800b470:	f7ff fcb2 	bl	800add8 <lwip_netconn_err_to_msg>
 800b474:	4603      	mov	r3, r0
 800b476:	4619      	mov	r1, r3
 800b478:	4620      	mov	r0, r4
 800b47a:	f00c f8b5 	bl	80175e8 <sys_mbox_trypost>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d109      	bne.n	800b498 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <accept_function+0x6c>
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2200      	movs	r2, #0
 800b492:	2100      	movs	r1, #0
 800b494:	69f8      	ldr	r0, [r7, #28]
 800b496:	4798      	blx	r3
    }
    return ERR_VAL;
 800b498:	f06f 0305 	mvn.w	r3, #5
 800b49c:	e077      	b.n	800b58e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d006      	beq.n	800b4b4 <accept_function+0x88>
 800b4a6:	4b3c      	ldr	r3, [pc, #240]	; (800b598 <accept_function+0x16c>)
 800b4a8:	f240 222a 	movw	r2, #554	; 0x22a
 800b4ac:	493b      	ldr	r1, [pc, #236]	; (800b59c <accept_function+0x170>)
 800b4ae:	483c      	ldr	r0, [pc, #240]	; (800b5a0 <accept_function+0x174>)
 800b4b0:	f00c fbc0 	bl	8017c34 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	781a      	ldrb	r2, [r3, #0]
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4610      	mov	r0, r2
 800b4c0:	f000 f8f0 	bl	800b6a4 <netconn_alloc>
 800b4c4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d11b      	bne.n	800b504 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f103 0414 	add.w	r4, r3, #20
 800b4d2:	f06f 000c 	mvn.w	r0, #12
 800b4d6:	f7ff fc7f 	bl	800add8 <lwip_netconn_err_to_msg>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f00c f882 	bl	80175e8 <sys_mbox_trypost>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d005      	beq.n	800b4fe <accept_function+0xd2>
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	69f8      	ldr	r0, [r7, #28]
 800b4fc:	4798      	blx	r3
    }
    return ERR_MEM;
 800b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b502:	e044      	b.n	800b58e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b50a:	69b8      	ldr	r0, [r7, #24]
 800b50c:	f7ff ff66 	bl	800b3dc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	3314      	adds	r3, #20
 800b514:	69b9      	ldr	r1, [r7, #24]
 800b516:	4618      	mov	r0, r3
 800b518:	f00c f866 	bl	80175e8 <sys_mbox_trypost>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d02a      	beq.n	800b578 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b528:	2100      	movs	r1, #0
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f004 fc58 	bl	800fde0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b530:	2100      	movs	r1, #0
 800b532:	6978      	ldr	r0, [r7, #20]
 800b534:	f004 fc66 	bl	800fe04 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b538:	2100      	movs	r1, #0
 800b53a:	6978      	ldr	r0, [r7, #20]
 800b53c:	f004 fc84 	bl	800fe48 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b540:	2200      	movs	r2, #0
 800b542:	2100      	movs	r1, #0
 800b544:	6978      	ldr	r0, [r7, #20]
 800b546:	f004 fcdb 	bl	800ff00 <tcp_poll>
    tcp_err(pcb, NULL);
 800b54a:	2100      	movs	r1, #0
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f004 fc9d 	bl	800fe8c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2200      	movs	r2, #0
 800b556:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	3310      	adds	r3, #16
 800b55c:	4618      	mov	r0, r3
 800b55e:	f00c f831 	bl	80175c4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	3310      	adds	r3, #16
 800b566:	4618      	mov	r0, r3
 800b568:	f00c f8b1 	bl	80176ce <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b56c:	69b8      	ldr	r0, [r7, #24]
 800b56e:	f000 f907 	bl	800b780 <netconn_free>
    return ERR_MEM;
 800b572:	f04f 33ff 	mov.w	r3, #4294967295
 800b576:	e00a      	b.n	800b58e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d005      	beq.n	800b58c <accept_function+0x160>
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	2200      	movs	r2, #0
 800b586:	2100      	movs	r1, #0
 800b588:	69f8      	ldr	r0, [r7, #28]
 800b58a:	4798      	blx	r3
  }

  return ERR_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3724      	adds	r7, #36	; 0x24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd90      	pop	{r4, r7, pc}
 800b596:	bf00      	nop
 800b598:	08018f6c 	.word	0x08018f6c
 800b59c:	08019128 	.word	0x08019128
 800b5a0:	08018fb0 	.word	0x08018fb0

0800b5a4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d006      	beq.n	800b5c8 <pcb_new+0x24>
 800b5ba:	4b2b      	ldr	r3, [pc, #172]	; (800b668 <pcb_new+0xc4>)
 800b5bc:	f240 2265 	movw	r2, #613	; 0x265
 800b5c0:	492a      	ldr	r1, [pc, #168]	; (800b66c <pcb_new+0xc8>)
 800b5c2:	482b      	ldr	r0, [pc, #172]	; (800b670 <pcb_new+0xcc>)
 800b5c4:	f00c fb36 	bl	8017c34 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d022      	beq.n	800b61c <pcb_new+0x78>
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	d133      	bne.n	800b642 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681c      	ldr	r4, [r3, #0]
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f009 fcd8 	bl	8014f96 <udp_new_ip_type>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d02a      	beq.n	800b64a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b22      	cmp	r3, #34	; 0x22
 800b5fc:	d104      	bne.n	800b608 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6858      	ldr	r0, [r3, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	4917      	ldr	r1, [pc, #92]	; (800b674 <pcb_new+0xd0>)
 800b616:	f009 fc45 	bl	8014ea4 <udp_recv>
      }
      break;
 800b61a:	e016      	b.n	800b64a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681c      	ldr	r4, [r3, #0]
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	4618      	mov	r0, r3
 800b624:	f004 fbce 	bl	800fdc4 <tcp_new_ip_type>
 800b628:	4603      	mov	r3, r0
 800b62a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fece 	bl	800b3dc <setup_tcp>
      }
      break;
 800b640:	e005      	b.n	800b64e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	22fa      	movs	r2, #250	; 0xfa
 800b646:	711a      	strb	r2, [r3, #4]
      return;
 800b648:	e00a      	b.n	800b660 <pcb_new+0xbc>
      break;
 800b64a:	bf00      	nop
 800b64c:	e000      	b.n	800b650 <pcb_new+0xac>
      break;
 800b64e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d102      	bne.n	800b660 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	22ff      	movs	r2, #255	; 0xff
 800b65e:	711a      	strb	r2, [r3, #4]
  }
}
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}
 800b666:	bf00      	nop
 800b668:	08018f6c 	.word	0x08018f6c
 800b66c:	08019150 	.word	0x08019150
 800b670:	08018fb0 	.word	0x08018fb0
 800b674:	0800aeb9 	.word	0x0800aeb9

0800b678 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ff85 	bl	800b5a4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b6b4:	2007      	movs	r0, #7
 800b6b6:	f001 fe1f 	bl	800d2f8 <memp_malloc>
 800b6ba:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <netconn_alloc+0x22>
    return NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e052      	b.n	800b76c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	79fa      	ldrb	r2, [r7, #7]
 800b6d0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6de:	2b10      	cmp	r3, #16
 800b6e0:	d004      	beq.n	800b6ec <netconn_alloc+0x48>
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d105      	bne.n	800b6f2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b6e6:	2306      	movs	r3, #6
 800b6e8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b6ea:	e00a      	b.n	800b702 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b6ec:	2306      	movs	r3, #6
 800b6ee:	617b      	str	r3, [r7, #20]
      break;
 800b6f0:	e007      	b.n	800b702 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <netconn_alloc+0xd0>)
 800b6f4:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b6f8:	491f      	ldr	r1, [pc, #124]	; (800b778 <netconn_alloc+0xd4>)
 800b6fa:	4820      	ldr	r0, [pc, #128]	; (800b77c <netconn_alloc+0xd8>)
 800b6fc:	f00c fa9a 	bl	8017c34 <iprintf>
      goto free_and_return;
 800b700:	e02f      	b.n	800b762 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3310      	adds	r3, #16
 800b706:	6979      	ldr	r1, [r7, #20]
 800b708:	4618      	mov	r0, r3
 800b70a:	f00b ff41 	bl	8017590 <sys_mbox_new>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d125      	bne.n	800b760 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	330c      	adds	r3, #12
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f00b ffe4 	bl	80176e8 <sys_sem_new>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3310      	adds	r3, #16
 800b72a:	4618      	mov	r0, r3
 800b72c:	f00b ff4a 	bl	80175c4 <sys_mbox_free>
    goto free_and_return;
 800b730:	e017      	b.n	800b762 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3314      	adds	r3, #20
 800b736:	4618      	mov	r0, r3
 800b738:	f00b ffc9 	bl	80176ce <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f04f 32ff 	mov.w	r2, #4294967295
 800b748:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	7cfa      	ldrb	r2, [r7, #19]
 800b75a:	771a      	strb	r2, [r3, #28]
  return conn;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	e005      	b.n	800b76c <netconn_alloc+0xc8>
    goto free_and_return;
 800b760:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	2007      	movs	r0, #7
 800b766:	f001 fe19 	bl	800d39c <memp_free>
  return NULL;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	08018f6c 	.word	0x08018f6c
 800b778:	08019170 	.word	0x08019170
 800b77c:	08018fb0 	.word	0x08018fb0

0800b780 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d006      	beq.n	800b79e <netconn_free+0x1e>
 800b790:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <netconn_free+0x80>)
 800b792:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b796:	491b      	ldr	r1, [pc, #108]	; (800b804 <netconn_free+0x84>)
 800b798:	481b      	ldr	r0, [pc, #108]	; (800b808 <netconn_free+0x88>)
 800b79a:	f00c fa4b 	bl	8017c34 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3310      	adds	r3, #16
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f00b ff82 	bl	80176ac <sys_mbox_valid>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d006      	beq.n	800b7bc <netconn_free+0x3c>
 800b7ae:	4b14      	ldr	r3, [pc, #80]	; (800b800 <netconn_free+0x80>)
 800b7b0:	f240 3223 	movw	r2, #803	; 0x323
 800b7b4:	4915      	ldr	r1, [pc, #84]	; (800b80c <netconn_free+0x8c>)
 800b7b6:	4814      	ldr	r0, [pc, #80]	; (800b808 <netconn_free+0x88>)
 800b7b8:	f00c fa3c 	bl	8017c34 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3314      	adds	r3, #20
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f00b ff73 	bl	80176ac <sys_mbox_valid>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d006      	beq.n	800b7da <netconn_free+0x5a>
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <netconn_free+0x80>)
 800b7ce:	f240 3226 	movw	r2, #806	; 0x326
 800b7d2:	490f      	ldr	r1, [pc, #60]	; (800b810 <netconn_free+0x90>)
 800b7d4:	480c      	ldr	r0, [pc, #48]	; (800b808 <netconn_free+0x88>)
 800b7d6:	f00c fa2d 	bl	8017c34 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f00b ffe5 	bl	80177ae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	330c      	adds	r3, #12
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f00b fffe 	bl	80177ea <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	2007      	movs	r0, #7
 800b7f2:	f001 fdd3 	bl	800d39c <memp_free>
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	08018f6c 	.word	0x08018f6c
 800b804:	08019198 	.word	0x08019198
 800b808:	08018fb0 	.word	0x08018fb0
 800b80c:	080191c8 	.word	0x080191c8
 800b810:	08019204 	.word	0x08019204

0800b814 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3310      	adds	r3, #16
 800b820:	4618      	mov	r0, r3
 800b822:	f00b ff43 	bl	80176ac <sys_mbox_valid>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d02f      	beq.n	800b88c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b82c:	e018      	b.n	800b860 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b836:	2b10      	cmp	r3, #16
 800b838:	d10e      	bne.n	800b858 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f107 020f 	add.w	r2, r7, #15
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fafe 	bl	800ae44 <lwip_netconn_is_err_msg>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d108      	bne.n	800b860 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	4618      	mov	r0, r3
 800b852:	f002 fc47 	bl	800e0e4 <pbuf_free>
 800b856:	e003      	b.n	800b860 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 fe8e 	bl	800c57c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3310      	adds	r3, #16
 800b864:	f107 0210 	add.w	r2, r7, #16
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f00b ff07 	bl	801767e <sys_arch_mbox_tryfetch>
 800b870:	4603      	mov	r3, r0
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b876:	d1da      	bne.n	800b82e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3310      	adds	r3, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f00b fea1 	bl	80175c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3310      	adds	r3, #16
 800b886:	4618      	mov	r0, r3
 800b888:	f00b ff21 	bl	80176ce <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3314      	adds	r3, #20
 800b890:	4618      	mov	r0, r3
 800b892:	f00b ff0b 	bl	80176ac <sys_mbox_valid>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d034      	beq.n	800b906 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b89c:	e01d      	b.n	800b8da <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f107 020e 	add.w	r2, r7, #14
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff facc 	bl	800ae44 <lwip_netconn_is_err_msg>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d113      	bne.n	800b8da <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b8b6:	6978      	ldr	r0, [r7, #20]
 800b8b8:	f7ff ffac 	bl	800b814 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d007      	beq.n	800b8d4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f003 f9fb 	bl	800ecc4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b8d4:	6978      	ldr	r0, [r7, #20]
 800b8d6:	f7ff ff53 	bl	800b780 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3314      	adds	r3, #20
 800b8de:	f107 0210 	add.w	r2, r7, #16
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f00b feca 	bl	801767e <sys_arch_mbox_tryfetch>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f0:	d1d5      	bne.n	800b89e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3314      	adds	r3, #20
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f00b fe64 	bl	80175c4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3314      	adds	r3, #20
 800b900:	4618      	mov	r0, r3
 800b902:	f00b fee4 	bl	80176ce <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b906:	bf00      	nop
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <lwip_netconn_do_close_internal+0x24>
 800b926:	4ba1      	ldr	r3, [pc, #644]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800b928:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b92c:	49a0      	ldr	r1, [pc, #640]	; (800bbb0 <lwip_netconn_do_close_internal+0x2a0>)
 800b92e:	48a1      	ldr	r0, [pc, #644]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800b930:	f00c f980 	bl	8017c34 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b93c:	2b10      	cmp	r3, #16
 800b93e:	d006      	beq.n	800b94e <lwip_netconn_do_close_internal+0x3e>
 800b940:	4b9a      	ldr	r3, [pc, #616]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800b942:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b946:	499c      	ldr	r1, [pc, #624]	; (800bbb8 <lwip_netconn_do_close_internal+0x2a8>)
 800b948:	489a      	ldr	r0, [pc, #616]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800b94a:	f00c f973 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	785b      	ldrb	r3, [r3, #1]
 800b952:	2b04      	cmp	r3, #4
 800b954:	d006      	beq.n	800b964 <lwip_netconn_do_close_internal+0x54>
 800b956:	4b95      	ldr	r3, [pc, #596]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800b958:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b95c:	4997      	ldr	r1, [pc, #604]	; (800bbbc <lwip_netconn_do_close_internal+0x2ac>)
 800b95e:	4895      	ldr	r0, [pc, #596]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800b960:	f00c f968 	bl	8017c34 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d106      	bne.n	800b97a <lwip_netconn_do_close_internal+0x6a>
 800b96c:	4b8f      	ldr	r3, [pc, #572]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800b96e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b972:	4993      	ldr	r1, [pc, #588]	; (800bbc0 <lwip_netconn_do_close_internal+0x2b0>)
 800b974:	488f      	ldr	r0, [pc, #572]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800b976:	f00c f95d 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <lwip_netconn_do_close_internal+0x80>
 800b982:	4b8a      	ldr	r3, [pc, #552]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800b984:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b988:	498e      	ldr	r1, [pc, #568]	; (800bbc4 <lwip_netconn_do_close_internal+0x2b4>)
 800b98a:	488a      	ldr	r0, [pc, #552]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800b98c:	f00c f952 	bl	8017c34 <iprintf>

  tpcb = conn->pcb.tcp;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	7a1b      	ldrb	r3, [r3, #8]
 800b99c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d102      	bne.n	800b9ba <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	75bb      	strb	r3, [r7, #22]
 800b9b8:	e01f      	b.n	800b9fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00e      	beq.n	800b9de <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b9c4:	2b05      	cmp	r3, #5
 800b9c6:	d007      	beq.n	800b9d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b9cc:	2b06      	cmp	r3, #6
 800b9ce:	d003      	beq.n	800b9d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b9d4:	2b08      	cmp	r3, #8
 800b9d6:	d102      	bne.n	800b9de <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	75bb      	strb	r3, [r7, #22]
 800b9dc:	e00d      	b.n	800b9fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b9de:	7b7b      	ldrb	r3, [r7, #13]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d008      	beq.n	800b9f6 <lwip_netconn_do_close_internal+0xe6>
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	8b5b      	ldrh	r3, [r3, #26]
 800b9e8:	f003 0310 	and.w	r3, r3, #16
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	75bb      	strb	r3, [r7, #22]
 800b9f4:	e001      	b.n	800b9fa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b9fa:	7dbb      	ldrb	r3, [r7, #22]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ba00:	2100      	movs	r1, #0
 800ba02:	6938      	ldr	r0, [r7, #16]
 800ba04:	f004 f9ec 	bl	800fde0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	7d1b      	ldrb	r3, [r3, #20]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d104      	bne.n	800ba1a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ba10:	2100      	movs	r1, #0
 800ba12:	6938      	ldr	r0, [r7, #16]
 800ba14:	f004 fa5c 	bl	800fed0 <tcp_accept>
 800ba18:	e01d      	b.n	800ba56 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d007      	beq.n	800ba30 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ba20:	2100      	movs	r1, #0
 800ba22:	6938      	ldr	r0, [r7, #16]
 800ba24:	f004 f9ee 	bl	800fe04 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ba28:	2100      	movs	r1, #0
 800ba2a:	6938      	ldr	r0, [r7, #16]
 800ba2c:	f004 fa50 	bl	800fed0 <tcp_accept>
    }
    if (shut_tx) {
 800ba30:	7b7b      	ldrb	r3, [r7, #13]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ba36:	2100      	movs	r1, #0
 800ba38:	6938      	ldr	r0, [r7, #16]
 800ba3a:	f004 fa05 	bl	800fe48 <tcp_sent>
    }
    if (shut_close) {
 800ba3e:	7dbb      	ldrb	r3, [r7, #22]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d008      	beq.n	800ba56 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ba44:	2200      	movs	r2, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	6938      	ldr	r0, [r7, #16]
 800ba4a:	f004 fa59 	bl	800ff00 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6938      	ldr	r0, [r7, #16]
 800ba52:	f004 fa1b 	bl	800fe8c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ba5c:	6938      	ldr	r0, [r7, #16]
 800ba5e:	f002 ffeb 	bl	800ea38 <tcp_close>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
 800ba66:	e007      	b.n	800ba78 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	7b7a      	ldrb	r2, [r7, #13]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6938      	ldr	r0, [r7, #16]
 800ba70:	f003 f80e 	bl	800ea90 <tcp_shutdown>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ba78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ba80:	2301      	movs	r3, #1
 800ba82:	757b      	strb	r3, [r7, #21]
 800ba84:	e016      	b.n	800bab4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ba86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d10f      	bne.n	800bab0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	7a5b      	ldrb	r3, [r3, #9]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10c      	bne.n	800bab4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ba9e:	7dbb      	ldrb	r3, [r7, #22]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800baa4:	6938      	ldr	r0, [r7, #16]
 800baa6:	f003 f90d 	bl	800ecc4 <tcp_abort>
          err = ERR_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
 800baae:	e001      	b.n	800bab4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bab0:	2301      	movs	r3, #1
 800bab2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bab4:	7d7b      	ldrb	r3, [r7, #21]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d044      	beq.n	800bb44 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	330c      	adds	r3, #12
 800bac2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	7dfa      	ldrb	r2, [r7, #23]
 800baca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800bad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d129      	bne.n	800bb34 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bae0:	7dbb      	ldrb	r3, [r7, #22]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00c      	beq.n	800bb00 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <lwip_netconn_do_close_internal+0x1f0>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	2200      	movs	r2, #0
 800bafa:	2104      	movs	r1, #4
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	4798      	blx	r3
      }
      if (shut_rx) {
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d005      	beq.n	800bb1a <lwip_netconn_do_close_internal+0x20a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	2200      	movs	r2, #0
 800bb14:	2100      	movs	r1, #0
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	4798      	blx	r3
      }
      if (shut_tx) {
 800bb1a:	7b7b      	ldrb	r3, [r7, #13]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d005      	beq.n	800bb34 <lwip_netconn_do_close_internal+0x224>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2102      	movs	r1, #2
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bb3a:	68b8      	ldr	r0, [r7, #8]
 800bb3c:	f00b fe2a 	bl	8017794 <sys_sem_signal>
    }
    return ERR_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e02e      	b.n	800bba2 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800bb44:	7d7b      	ldrb	r3, [r7, #21]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d11e      	bne.n	800bb88 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	7d1b      	ldrb	r3, [r3, #20]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d106      	bne.n	800bb60 <lwip_netconn_do_close_internal+0x250>
 800bb52:	4b16      	ldr	r3, [pc, #88]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800bb54:	f240 4241 	movw	r2, #1089	; 0x441
 800bb58:	491b      	ldr	r1, [pc, #108]	; (800bbc8 <lwip_netconn_do_close_internal+0x2b8>)
 800bb5a:	4816      	ldr	r0, [pc, #88]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800bb5c:	f00c f86a 	bl	8017c34 <iprintf>
    if (shut_tx) {
 800bb60:	7b7b      	ldrb	r3, [r7, #13]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800bb66:	4919      	ldr	r1, [pc, #100]	; (800bbcc <lwip_netconn_do_close_internal+0x2bc>)
 800bb68:	6938      	ldr	r0, [r7, #16]
 800bb6a:	f004 f96d 	bl	800fe48 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4917      	ldr	r1, [pc, #92]	; (800bbd0 <lwip_netconn_do_close_internal+0x2c0>)
 800bb72:	6938      	ldr	r0, [r7, #16]
 800bb74:	f004 f9c4 	bl	800ff00 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bb78:	4916      	ldr	r1, [pc, #88]	; (800bbd4 <lwip_netconn_do_close_internal+0x2c4>)
 800bb7a:	6938      	ldr	r0, [r7, #16]
 800bb7c:	f004 f986 	bl	800fe8c <tcp_err>
    tcp_arg(tpcb, conn);
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	6938      	ldr	r0, [r7, #16]
 800bb84:	f004 f92c 	bl	800fde0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bb88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d106      	bne.n	800bb9e <lwip_netconn_do_close_internal+0x28e>
 800bb90:	4b06      	ldr	r3, [pc, #24]	; (800bbac <lwip_netconn_do_close_internal+0x29c>)
 800bb92:	f240 424d 	movw	r2, #1101	; 0x44d
 800bb96:	4910      	ldr	r1, [pc, #64]	; (800bbd8 <lwip_netconn_do_close_internal+0x2c8>)
 800bb98:	4806      	ldr	r0, [pc, #24]	; (800bbb4 <lwip_netconn_do_close_internal+0x2a4>)
 800bb9a:	f00c f84b 	bl	8017c34 <iprintf>
  return err;
 800bb9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	08018f6c 	.word	0x08018f6c
 800bbb0:	08019240 	.word	0x08019240
 800bbb4:	08018fb0 	.word	0x08018fb0
 800bbb8:	08019250 	.word	0x08019250
 800bbbc:	08019270 	.word	0x08019270
 800bbc0:	08019294 	.word	0x08019294
 800bbc4:	080190d4 	.word	0x080190d4
 800bbc8:	080192a8 	.word	0x080192a8
 800bbcc:	0800b189 	.word	0x0800b189
 800bbd0:	0800b0c1 	.word	0x0800b0c1
 800bbd4:	0800b231 	.word	0x0800b231
 800bbd8:	080192cc 	.word	0x080192cc

0800bbdc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00d      	beq.n	800bc12 <lwip_netconn_do_delconn+0x36>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc00:	2b10      	cmp	r3, #16
 800bc02:	d006      	beq.n	800bc12 <lwip_netconn_do_delconn+0x36>
 800bc04:	4b60      	ldr	r3, [pc, #384]	; (800bd88 <lwip_netconn_do_delconn+0x1ac>)
 800bc06:	f240 425e 	movw	r2, #1118	; 0x45e
 800bc0a:	4960      	ldr	r1, [pc, #384]	; (800bd8c <lwip_netconn_do_delconn+0x1b0>)
 800bc0c:	4860      	ldr	r0, [pc, #384]	; (800bd90 <lwip_netconn_do_delconn+0x1b4>)
 800bc0e:	f00c f811 	bl	8017c34 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bc12:	7afb      	ldrb	r3, [r7, #11]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <lwip_netconn_do_delconn+0x48>
 800bc18:	7afb      	ldrb	r3, [r7, #11]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d002      	beq.n	800bc24 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d109      	bne.n	800bc38 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d10a      	bne.n	800bc40 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	7f1b      	ldrb	r3, [r3, #28]
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d103      	bne.n	800bc40 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	22fb      	movs	r2, #251	; 0xfb
 800bc3c:	711a      	strb	r2, [r3, #4]
 800bc3e:	e097      	b.n	800bd70 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d10d      	bne.n	800bc62 <lwip_netconn_do_delconn+0x86>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	7f1b      	ldrb	r3, [r3, #28]
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d106      	bne.n	800bc62 <lwip_netconn_do_delconn+0x86>
 800bc54:	4b4c      	ldr	r3, [pc, #304]	; (800bd88 <lwip_netconn_do_delconn+0x1ac>)
 800bc56:	f240 427a 	movw	r2, #1146	; 0x47a
 800bc5a:	494e      	ldr	r1, [pc, #312]	; (800bd94 <lwip_netconn_do_delconn+0x1b8>)
 800bc5c:	484c      	ldr	r0, [pc, #304]	; (800bd90 <lwip_netconn_do_delconn+0x1b4>)
 800bc5e:	f00b ffe9 	bl	8017c34 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff fdd1 	bl	800b814 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05f      	beq.n	800bd3c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc86:	2b10      	cmp	r3, #16
 800bc88:	d00d      	beq.n	800bca6 <lwip_netconn_do_delconn+0xca>
 800bc8a:	2b20      	cmp	r3, #32
 800bc8c:	d151      	bne.n	800bd32 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f009 f920 	bl	8014ee4 <udp_remove>
          break;
 800bca4:	e046      	b.n	800bd34 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d006      	beq.n	800bcbe <lwip_netconn_do_delconn+0xe2>
 800bcb0:	4b35      	ldr	r3, [pc, #212]	; (800bd88 <lwip_netconn_do_delconn+0x1ac>)
 800bcb2:	f240 4294 	movw	r2, #1172	; 0x494
 800bcb6:	4938      	ldr	r1, [pc, #224]	; (800bd98 <lwip_netconn_do_delconn+0x1bc>)
 800bcb8:	4835      	ldr	r0, [pc, #212]	; (800bd90 <lwip_netconn_do_delconn+0x1b4>)
 800bcba:	f00b ffbb 	bl	8017c34 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2203      	movs	r2, #3
 800bcca:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff fe18 	bl	800b910 <lwip_netconn_do_close_internal>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d04b      	beq.n	800bd7e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	785b      	ldrb	r3, [r3, #1]
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d006      	beq.n	800bcfe <lwip_netconn_do_delconn+0x122>
 800bcf0:	4b25      	ldr	r3, [pc, #148]	; (800bd88 <lwip_netconn_do_delconn+0x1ac>)
 800bcf2:	f240 429a 	movw	r2, #1178	; 0x49a
 800bcf6:	4929      	ldr	r1, [pc, #164]	; (800bd9c <lwip_netconn_do_delconn+0x1c0>)
 800bcf8:	4825      	ldr	r0, [pc, #148]	; (800bd90 <lwip_netconn_do_delconn+0x1b4>)
 800bcfa:	f00b ff9b 	bl	8017c34 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bcfe:	4828      	ldr	r0, [pc, #160]	; (800bda0 <lwip_netconn_do_delconn+0x1c4>)
 800bd00:	f00b fdb1 	bl	8017866 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	330c      	adds	r3, #12
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f00b fd10 	bl	8017732 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bd12:	4823      	ldr	r0, [pc, #140]	; (800bda0 <lwip_netconn_do_delconn+0x1c4>)
 800bd14:	f00b fd98 	bl	8017848 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	785b      	ldrb	r3, [r3, #1]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d02d      	beq.n	800bd7e <lwip_netconn_do_delconn+0x1a2>
 800bd22:	4b19      	ldr	r3, [pc, #100]	; (800bd88 <lwip_netconn_do_delconn+0x1ac>)
 800bd24:	f240 429e 	movw	r2, #1182	; 0x49e
 800bd28:	491c      	ldr	r1, [pc, #112]	; (800bd9c <lwip_netconn_do_delconn+0x1c0>)
 800bd2a:	4819      	ldr	r0, [pc, #100]	; (800bd90 <lwip_netconn_do_delconn+0x1b4>)
 800bd2c:	f00b ff82 	bl	8017c34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bd30:	e025      	b.n	800bd7e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800bd32:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d007      	beq.n	800bd56 <lwip_netconn_do_delconn+0x17a>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	6810      	ldr	r0, [r2, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	2100      	movs	r1, #0
 800bd54:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d007      	beq.n	800bd70 <lwip_netconn_do_delconn+0x194>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	6810      	ldr	r0, [r2, #0]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	330c      	adds	r3, #12
 800bd76:	4618      	mov	r0, r3
 800bd78:	f00b fd26 	bl	80177c8 <sys_sem_valid>
 800bd7c:	e000      	b.n	800bd80 <lwip_netconn_do_delconn+0x1a4>
          return;
 800bd7e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	08018f6c 	.word	0x08018f6c
 800bd8c:	080192dc 	.word	0x080192dc
 800bd90:	08018fb0 	.word	0x08018fb0
 800bd94:	080192f0 	.word	0x080192f0
 800bd98:	08019310 	.word	0x08019310
 800bd9c:	0801932c 	.word	0x0801932c
 800bda0:	20007ffc 	.word	0x20007ffc

0800bda4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d025      	beq.n	800be06 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	d00e      	beq.n	800bde6 <lwip_netconn_do_bind+0x42>
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d119      	bne.n	800be00 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6858      	ldr	r0, [r3, #4]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6899      	ldr	r1, [r3, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	899b      	ldrh	r3, [r3, #12]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f008 ffda 	bl	8014d94 <udp_bind>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73fb      	strb	r3, [r7, #15]
        break;
 800bde4:	e011      	b.n	800be0a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6858      	ldr	r0, [r3, #4]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6899      	ldr	r1, [r3, #8]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	899b      	ldrh	r3, [r3, #12]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f002 ff71 	bl	800ecdc <tcp_bind>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73fb      	strb	r3, [r7, #15]
        break;
 800bdfe:	e004      	b.n	800be0a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800be00:	23fa      	movs	r3, #250	; 0xfa
 800be02:	73fb      	strb	r3, [r7, #15]
        break;
 800be04:	e001      	b.n	800be0a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800be06:	23fa      	movs	r3, #250	; 0xfa
 800be08:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	7bfa      	ldrb	r2, [r7, #15]
 800be0e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d07f      	beq.n	800bf2e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be38:	2b10      	cmp	r3, #16
 800be3a:	d175      	bne.n	800bf28 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	785b      	ldrb	r3, [r3, #1]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d165      	bne.n	800bf12 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	7d1b      	ldrb	r3, [r3, #20]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800be52:	23fa      	movs	r3, #250	; 0xfa
 800be54:	72fb      	strb	r3, [r7, #11]
 800be56:	e06c      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800be58:	23ff      	movs	r3, #255	; 0xff
 800be5a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f107 020b 	add.w	r2, r7, #11
 800be66:	7cf9      	ldrb	r1, [r7, #19]
 800be68:	4618      	mov	r0, r3
 800be6a:	f002 ffef 	bl	800ee4c <tcp_listen_with_backlog_and_err>
 800be6e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d05d      	beq.n	800bf32 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3310      	adds	r3, #16
 800be7c:	4618      	mov	r0, r3
 800be7e:	f00b fc15 	bl	80176ac <sys_mbox_valid>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3310      	adds	r3, #16
 800be8e:	4618      	mov	r0, r3
 800be90:	f00b fb98 	bl	80175c4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f00b fc17 	bl	80176ce <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3314      	adds	r3, #20
 800beaa:	4618      	mov	r0, r3
 800beac:	f00b fbfe 	bl	80176ac <sys_mbox_valid>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d108      	bne.n	800bec8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3314      	adds	r3, #20
 800bebc:	2106      	movs	r1, #6
 800bebe:	4618      	mov	r0, r3
 800bec0:	f00b fb66 	bl	8017590 <sys_mbox_new>
 800bec4:	4603      	mov	r3, r0
 800bec6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bec8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d118      	bne.n	800bf02 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2202      	movs	r2, #2
 800bed6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4619      	mov	r1, r3
 800beec:	4610      	mov	r0, r2
 800beee:	f003 ff77 	bl	800fde0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4912      	ldr	r1, [pc, #72]	; (800bf44 <lwip_netconn_do_listen+0x12c>)
 800befa:	4618      	mov	r0, r3
 800befc:	f003 ffe8 	bl	800fed0 <tcp_accept>
 800bf00:	e017      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f002 fd98 	bl	800ea38 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	605a      	str	r2, [r3, #4]
 800bf10:	e00f      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	785b      	ldrb	r3, [r3, #1]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d102      	bne.n	800bf22 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	72fb      	strb	r3, [r7, #11]
 800bf20:	e007      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bf22:	23f5      	movs	r3, #245	; 0xf5
 800bf24:	72fb      	strb	r3, [r7, #11]
 800bf26:	e004      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bf28:	23f0      	movs	r3, #240	; 0xf0
 800bf2a:	72fb      	strb	r3, [r7, #11]
 800bf2c:	e001      	b.n	800bf32 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bf2e:	23f5      	movs	r3, #245	; 0xf5
 800bf30:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bf32:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bf3a:	bf00      	nop
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	0800b42d 	.word	0x0800b42d

0800bf48 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	2200      	movs	r2, #0
 800bf58:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d022      	beq.n	800bfaa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf6e:	2b10      	cmp	r3, #16
 800bf70:	d11b      	bne.n	800bfaa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf7e:	d202      	bcs.n	800bf86 <lwip_netconn_do_recv+0x3e>
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	e001      	b.n	800bf8a <lwip_netconn_do_recv+0x42>
 800bf86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf8a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	89fa      	ldrh	r2, [r7, #14]
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f003 f85c 	bl	800f054 <tcp_recved>
        remaining -= recved;
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e6      	bne.n	800bf78 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bfaa:	bf00      	nop
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
	...

0800bfb4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <lwip_netconn_do_writemore+0x24>
 800bfca:	4b96      	ldr	r3, [pc, #600]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800bfcc:	f240 6273 	movw	r2, #1651	; 0x673
 800bfd0:	4995      	ldr	r1, [pc, #596]	; (800c228 <lwip_netconn_do_writemore+0x274>)
 800bfd2:	4896      	ldr	r0, [pc, #600]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800bfd4:	f00b fe2e 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d006      	beq.n	800bfee <lwip_netconn_do_writemore+0x3a>
 800bfe0:	4b90      	ldr	r3, [pc, #576]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800bfe2:	f240 6274 	movw	r2, #1652	; 0x674
 800bfe6:	4992      	ldr	r1, [pc, #584]	; (800c230 <lwip_netconn_do_writemore+0x27c>)
 800bfe8:	4890      	ldr	r0, [pc, #576]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800bfea:	f00b fe23 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <lwip_netconn_do_writemore+0x50>
 800bff6:	4b8b      	ldr	r3, [pc, #556]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800bff8:	f240 6275 	movw	r2, #1653	; 0x675
 800bffc:	498d      	ldr	r1, [pc, #564]	; (800c234 <lwip_netconn_do_writemore+0x280>)
 800bffe:	488b      	ldr	r0, [pc, #556]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800c000:	f00b fe18 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d106      	bne.n	800c01a <lwip_netconn_do_writemore+0x66>
 800c00c:	4b85      	ldr	r3, [pc, #532]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800c00e:	f240 6276 	movw	r2, #1654	; 0x676
 800c012:	4989      	ldr	r1, [pc, #548]	; (800c238 <lwip_netconn_do_writemore+0x284>)
 800c014:	4885      	ldr	r0, [pc, #532]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800c016:	f00b fe0d 	bl	8017c34 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	429a      	cmp	r2, r3
 800c028:	d306      	bcc.n	800c038 <lwip_netconn_do_writemore+0x84>
 800c02a:	4b7e      	ldr	r3, [pc, #504]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800c02c:	f240 6277 	movw	r2, #1655	; 0x677
 800c030:	4982      	ldr	r1, [pc, #520]	; (800c23c <lwip_netconn_do_writemore+0x288>)
 800c032:	487e      	ldr	r0, [pc, #504]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800c034:	f00b fdfe 	bl	8017c34 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	899b      	ldrh	r3, [r3, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d106      	bne.n	800c050 <lwip_netconn_do_writemore+0x9c>
 800c042:	4b78      	ldr	r3, [pc, #480]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800c044:	f240 6279 	movw	r2, #1657	; 0x679
 800c048:	497d      	ldr	r1, [pc, #500]	; (800c240 <lwip_netconn_do_writemore+0x28c>)
 800c04a:	4878      	ldr	r0, [pc, #480]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800c04c:	f00b fdf2 	bl	8017c34 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	7f1b      	ldrb	r3, [r3, #28]
 800c056:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7f1b      	ldrb	r3, [r3, #28]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d104      	bne.n	800c06e <lwip_netconn_do_writemore+0xba>
 800c064:	7ebb      	ldrb	r3, [r7, #26]
 800c066:	f003 0304 	and.w	r3, r3, #4
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <lwip_netconn_do_writemore+0xbe>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <lwip_netconn_do_writemore+0xc0>
 800c072:	2300      	movs	r3, #0
 800c074:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	4413      	add	r3, r2
 800c086:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0a0:	d307      	bcc.n	800c0b2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c0a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0a6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c0a8:	7ebb      	ldrb	r3, [r7, #26]
 800c0aa:	f043 0302 	orr.w	r3, r3, #2
 800c0ae:	76bb      	strb	r3, [r7, #26]
 800c0b0:	e001      	b.n	800c0b6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c0be:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c0c0:	89fa      	ldrh	r2, [r7, #14]
 800c0c2:	8bbb      	ldrh	r3, [r7, #28]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d216      	bcs.n	800c0f6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c0c8:	89fb      	ldrh	r3, [r7, #14]
 800c0ca:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c0cc:	7e3b      	ldrb	r3, [r7, #24]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00d      	beq.n	800c0ee <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c0d2:	8bbb      	ldrh	r3, [r7, #28]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10e      	bne.n	800c0f6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <lwip_netconn_do_writemore+0x134>
 800c0e2:	f06f 0306 	mvn.w	r3, #6
 800c0e6:	e000      	b.n	800c0ea <lwip_netconn_do_writemore+0x136>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c0ec:	e07d      	b.n	800c1ea <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c0ee:	7ebb      	ldrb	r3, [r7, #26]
 800c0f0:	f043 0302 	orr.w	r3, r3, #2
 800c0f4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	691a      	ldr	r2, [r3, #16]
 800c0fc:	8bbb      	ldrh	r3, [r7, #28]
 800c0fe:	441a      	add	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d906      	bls.n	800c11a <lwip_netconn_do_writemore+0x166>
 800c10c:	4b45      	ldr	r3, [pc, #276]	; (800c224 <lwip_netconn_do_writemore+0x270>)
 800c10e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c112:	494c      	ldr	r1, [pc, #304]	; (800c244 <lwip_netconn_do_writemore+0x290>)
 800c114:	4845      	ldr	r0, [pc, #276]	; (800c22c <lwip_netconn_do_writemore+0x278>)
 800c116:	f00b fd8d 	bl	8017c34 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c11a:	8bbb      	ldrh	r3, [r7, #28]
 800c11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c120:	4293      	cmp	r3, r2
 800c122:	d103      	bne.n	800c12c <lwip_netconn_do_writemore+0x178>
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12a:	d209      	bcs.n	800c140 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c130:	8bba      	ldrh	r2, [r7, #28]
 800c132:	429a      	cmp	r2, r3
 800c134:	d10b      	bne.n	800c14e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	899b      	ldrh	r3, [r3, #12]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d906      	bls.n	800c14e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c140:	2301      	movs	r3, #1
 800c142:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c144:	7ebb      	ldrb	r3, [r7, #26]
 800c146:	f043 0302 	orr.w	r3, r3, #2
 800c14a:	76bb      	strb	r3, [r7, #26]
 800c14c:	e001      	b.n	800c152 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6858      	ldr	r0, [r3, #4]
 800c156:	7ebb      	ldrb	r3, [r7, #26]
 800c158:	8bba      	ldrh	r2, [r7, #28]
 800c15a:	6979      	ldr	r1, [r7, #20]
 800c15c:	f006 fd7e 	bl	8012c5c <tcp_write>
 800c160:	4603      	mov	r3, r0
 800c162:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c164:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d12c      	bne.n	800c1c6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	6999      	ldr	r1, [r3, #24]
 800c172:	8bba      	ldrh	r2, [r7, #28]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	440a      	add	r2, r1
 800c17a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	6919      	ldr	r1, [r3, #16]
 800c182:	8bba      	ldrh	r2, [r7, #28]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a1b      	ldr	r3, [r3, #32]
 800c188:	440a      	add	r2, r1
 800c18a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	691a      	ldr	r2, [r3, #16]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d113      	bne.n	800c1c6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	899a      	ldrh	r2, [r3, #12]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	b292      	uxth	r2, r2
 800c1a8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	899b      	ldrh	r3, [r3, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d008      	beq.n	800c1c6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	3208      	adds	r2, #8
 800c1bc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c1c6:	7e7b      	ldrb	r3, [r7, #25]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d004      	beq.n	800c1d6 <lwip_netconn_do_writemore+0x222>
 800c1cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f43f af50 	beq.w	800c076 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c1d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d004      	beq.n	800c1e8 <lwip_netconn_do_writemore+0x234>
 800c1de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d146      	bne.n	800c276 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c1e8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c1ea:	7e3b      	ldrb	r3, [r7, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d02b      	beq.n	800c248 <lwip_netconn_do_writemore+0x294>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	699a      	ldr	r2, [r3, #24]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d223      	bcs.n	800c248 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <lwip_netconn_do_writemore+0x260>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20c:	2200      	movs	r2, #0
 800c20e:	2103      	movs	r1, #3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	7f1b      	ldrb	r3, [r3, #28]
 800c218:	f043 0310 	orr.w	r3, r3, #16
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	771a      	strb	r2, [r3, #28]
 800c222:	e028      	b.n	800c276 <lwip_netconn_do_writemore+0x2c2>
 800c224:	08018f6c 	.word	0x08018f6c
 800c228:	080190c4 	.word	0x080190c4
 800c22c:	08018fb0 	.word	0x08018fb0
 800c230:	080193cc 	.word	0x080193cc
 800c234:	080190d4 	.word	0x080190d4
 800c238:	080193ec 	.word	0x080193ec
 800c23c:	08019404 	.word	0x08019404
 800c240:	08019444 	.word	0x08019444
 800c244:	0801946c 	.word	0x0801946c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c250:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c254:	d305      	bcc.n	800c262 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d909      	bls.n	800c276 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c266:	2b00      	cmp	r3, #0
 800c268:	d005      	beq.n	800c276 <lwip_netconn_do_writemore+0x2c2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26e:	2200      	movs	r2, #0
 800c270:	2103      	movs	r1, #3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11d      	bne.n	800c2ba <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	699a      	ldr	r2, [r3, #24]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d002      	beq.n	800c294 <lwip_netconn_do_writemore+0x2e0>
 800c28e:	7e3b      	ldrb	r3, [r7, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c294:	2301      	movs	r3, #1
 800c296:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f007 fac7 	bl	8013830 <tcp_output>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c2a6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c2aa:	f113 0f04 	cmn.w	r3, #4
 800c2ae:	d12c      	bne.n	800c30a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2b0:	7b3b      	ldrb	r3, [r7, #12]
 800c2b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	76fb      	strb	r3, [r7, #27]
 800c2b8:	e027      	b.n	800c30a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c2ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c2:	d120      	bne.n	800c306 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f007 fab1 	bl	8013830 <tcp_output>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c2d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c2d6:	f113 0f04 	cmn.w	r3, #4
 800c2da:	d104      	bne.n	800c2e6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c2dc:	7b7b      	ldrb	r3, [r7, #13]
 800c2de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	76fb      	strb	r3, [r7, #27]
 800c2e4:	e011      	b.n	800c30a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c2e6:	7e3b      	ldrb	r3, [r7, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a1b      	ldr	r3, [r3, #32]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d102      	bne.n	800c2fc <lwip_netconn_do_writemore+0x348>
 800c2f6:	f06f 0306 	mvn.w	r3, #6
 800c2fa:	e000      	b.n	800c2fe <lwip_netconn_do_writemore+0x34a>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c300:	2301      	movs	r3, #1
 800c302:	76fb      	strb	r3, [r7, #27]
 800c304:	e001      	b.n	800c30a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c306:	2301      	movs	r3, #1
 800c308:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c30a:	7efb      	ldrb	r3, [r7, #27]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d015      	beq.n	800c33c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a1b      	ldr	r3, [r3, #32]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	330c      	adds	r3, #12
 800c318:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	7ffa      	ldrb	r2, [r7, #31]
 800c320:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d006      	beq.n	800c342 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c334:	68b8      	ldr	r0, [r7, #8]
 800c336:	f00b fa2d 	bl	8017794 <sys_sem_signal>
 800c33a:	e002      	b.n	800c342 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c33c:	f04f 33ff 	mov.w	r3, #4294967295
 800c340:	e000      	b.n	800c344 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3720      	adds	r7, #32
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fd20 	bl	800ada2 <netconn_err>
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d166      	bne.n	800c43c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d15d      	bne.n	800c438 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c386:	23fb      	movs	r3, #251	; 0xfb
 800c388:	73fb      	strb	r3, [r7, #15]
 800c38a:	e057      	b.n	800c43c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d04d      	beq.n	800c432 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2201      	movs	r2, #1
 800c39c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6a1b      	ldr	r3, [r3, #32]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d006      	beq.n	800c3b6 <lwip_netconn_do_write+0x6a>
 800c3a8:	4b28      	ldr	r3, [pc, #160]	; (800c44c <lwip_netconn_do_write+0x100>)
 800c3aa:	f240 7223 	movw	r2, #1827	; 0x723
 800c3ae:	4928      	ldr	r1, [pc, #160]	; (800c450 <lwip_netconn_do_write+0x104>)
 800c3b0:	4828      	ldr	r0, [pc, #160]	; (800c454 <lwip_netconn_do_write+0x108>)
 800c3b2:	f00b fc3f 	bl	8017c34 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <lwip_netconn_do_write+0x80>
 800c3be:	4b23      	ldr	r3, [pc, #140]	; (800c44c <lwip_netconn_do_write+0x100>)
 800c3c0:	f240 7224 	movw	r2, #1828	; 0x724
 800c3c4:	4924      	ldr	r1, [pc, #144]	; (800c458 <lwip_netconn_do_write+0x10c>)
 800c3c6:	4823      	ldr	r0, [pc, #140]	; (800c454 <lwip_netconn_do_write+0x108>)
 800c3c8:	f00b fc34 	bl	8017c34 <iprintf>
        msg->conn->current_msg = msg;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff fdea 	bl	800bfb4 <lwip_netconn_do_writemore>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d02e      	beq.n	800c444 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d006      	beq.n	800c3fe <lwip_netconn_do_write+0xb2>
 800c3f0:	4b16      	ldr	r3, [pc, #88]	; (800c44c <lwip_netconn_do_write+0x100>)
 800c3f2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c3f6:	4919      	ldr	r1, [pc, #100]	; (800c45c <lwip_netconn_do_write+0x110>)
 800c3f8:	4816      	ldr	r0, [pc, #88]	; (800c454 <lwip_netconn_do_write+0x108>)
 800c3fa:	f00b fc1b 	bl	8017c34 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c3fe:	4818      	ldr	r0, [pc, #96]	; (800c460 <lwip_netconn_do_write+0x114>)
 800c400:	f00b fa31 	bl	8017866 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	2100      	movs	r1, #0
 800c40c:	4618      	mov	r0, r3
 800c40e:	f00b f990 	bl	8017732 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c412:	4813      	ldr	r0, [pc, #76]	; (800c460 <lwip_netconn_do_write+0x114>)
 800c414:	f00b fa18 	bl	8017848 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	785b      	ldrb	r3, [r3, #1]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d110      	bne.n	800c444 <lwip_netconn_do_write+0xf8>
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <lwip_netconn_do_write+0x100>)
 800c424:	f240 722c 	movw	r2, #1836	; 0x72c
 800c428:	490c      	ldr	r1, [pc, #48]	; (800c45c <lwip_netconn_do_write+0x110>)
 800c42a:	480a      	ldr	r0, [pc, #40]	; (800c454 <lwip_netconn_do_write+0x108>)
 800c42c:	f00b fc02 	bl	8017c34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c430:	e008      	b.n	800c444 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c432:	23f5      	movs	r3, #245	; 0xf5
 800c434:	73fb      	strb	r3, [r7, #15]
 800c436:	e001      	b.n	800c43c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c438:	23fa      	movs	r3, #250	; 0xfa
 800c43a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	7bfa      	ldrb	r2, [r7, #15]
 800c440:	711a      	strb	r2, [r3, #4]
 800c442:	e000      	b.n	800c446 <lwip_netconn_do_write+0xfa>
        return;
 800c444:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	08018f6c 	.word	0x08018f6c
 800c450:	08019310 	.word	0x08019310
 800c454:	08018fb0 	.word	0x08018fb0
 800c458:	08019498 	.word	0x08019498
 800c45c:	0801932c 	.word	0x0801932c
 800c460:	20007ffc 	.word	0x20007ffc

0800c464 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d069      	beq.n	800c556 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c48c:	2b10      	cmp	r3, #16
 800c48e:	d162      	bne.n	800c556 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c494:	2b03      	cmp	r3, #3
 800c496:	d002      	beq.n	800c49e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d05b      	beq.n	800c556 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c49e:	7afb      	ldrb	r3, [r7, #11]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d103      	bne.n	800c4ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	22f5      	movs	r2, #245	; 0xf5
 800c4a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4aa:	e059      	b.n	800c560 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d103      	bne.n	800c4ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	22fb      	movs	r2, #251	; 0xfb
 800c4b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c4b8:	e052      	b.n	800c560 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	7a1b      	ldrb	r3, [r3, #8]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff f9a2 	bl	800b814 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d006      	beq.n	800c4e8 <lwip_netconn_do_close+0x84>
 800c4da:	4b23      	ldr	r3, [pc, #140]	; (800c568 <lwip_netconn_do_close+0x104>)
 800c4dc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c4e0:	4922      	ldr	r1, [pc, #136]	; (800c56c <lwip_netconn_do_close+0x108>)
 800c4e2:	4823      	ldr	r0, [pc, #140]	; (800c570 <lwip_netconn_do_close+0x10c>)
 800c4e4:	f00b fba6 	bl	8017c34 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2204      	movs	r2, #4
 800c4ee:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff fa06 	bl	800b910 <lwip_netconn_do_close_internal>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d029      	beq.n	800c55e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	785b      	ldrb	r3, [r3, #1]
 800c510:	2b04      	cmp	r3, #4
 800c512:	d006      	beq.n	800c522 <lwip_netconn_do_close+0xbe>
 800c514:	4b14      	ldr	r3, [pc, #80]	; (800c568 <lwip_netconn_do_close+0x104>)
 800c516:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c51a:	4916      	ldr	r1, [pc, #88]	; (800c574 <lwip_netconn_do_close+0x110>)
 800c51c:	4814      	ldr	r0, [pc, #80]	; (800c570 <lwip_netconn_do_close+0x10c>)
 800c51e:	f00b fb89 	bl	8017c34 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c522:	4815      	ldr	r0, [pc, #84]	; (800c578 <lwip_netconn_do_close+0x114>)
 800c524:	f00b f99f 	bl	8017866 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	330c      	adds	r3, #12
 800c52e:	2100      	movs	r1, #0
 800c530:	4618      	mov	r0, r3
 800c532:	f00b f8fe 	bl	8017732 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c536:	4810      	ldr	r0, [pc, #64]	; (800c578 <lwip_netconn_do_close+0x114>)
 800c538:	f00b f986 	bl	8017848 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00b      	beq.n	800c55e <lwip_netconn_do_close+0xfa>
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <lwip_netconn_do_close+0x104>)
 800c548:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c54c:	4909      	ldr	r1, [pc, #36]	; (800c574 <lwip_netconn_do_close+0x110>)
 800c54e:	4808      	ldr	r0, [pc, #32]	; (800c570 <lwip_netconn_do_close+0x10c>)
 800c550:	f00b fb70 	bl	8017c34 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c554:	e003      	b.n	800c55e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	22f5      	movs	r2, #245	; 0xf5
 800c55a:	711a      	strb	r2, [r3, #4]
 800c55c:	e000      	b.n	800c560 <lwip_netconn_do_close+0xfc>
      return;
 800c55e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	08018f6c 	.word	0x08018f6c
 800c56c:	08019310 	.word	0x08019310
 800c570:	08018fb0 	.word	0x08018fb0
 800c574:	0801932c 	.word	0x0801932c
 800c578:	20007ffc 	.word	0x20007ffc

0800c57c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d013      	beq.n	800c5b2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00b      	beq.n	800c5aa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4618      	mov	r0, r3
 800c598:	f001 fda4 	bl	800e0e4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	605a      	str	r2, [r3, #4]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	2006      	movs	r0, #6
 800c5ae:	f000 fef5 	bl	800d39c <memp_free>
  }
}
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d108      	bne.n	800c5dc <netbuf_next+0x20>
 800c5ca:	4b11      	ldr	r3, [pc, #68]	; (800c610 <netbuf_next+0x54>)
 800c5cc:	22e0      	movs	r2, #224	; 0xe0
 800c5ce:	4911      	ldr	r1, [pc, #68]	; (800c614 <netbuf_next+0x58>)
 800c5d0:	4811      	ldr	r0, [pc, #68]	; (800c618 <netbuf_next+0x5c>)
 800c5d2:	f00b fb2f 	bl	8017c34 <iprintf>
 800c5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5da:	e014      	b.n	800c606 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <netbuf_next+0x30>
    return -1;
 800c5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ea:	e00c      	b.n	800c606 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <netbuf_next+0x48>
    return 1;
 800c600:	2301      	movs	r3, #1
 800c602:	e000      	b.n	800c606 <netbuf_next+0x4a>
  }
  return 0;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	080194c4 	.word	0x080194c4
 800c614:	08019624 	.word	0x08019624
 800c618:	08019514 	.word	0x08019514

0800c61c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c626:	f008 f9bb 	bl	80149a0 <sys_timeouts_sleeptime>
 800c62a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c632:	d10b      	bne.n	800c64c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c634:	4813      	ldr	r0, [pc, #76]	; (800c684 <tcpip_timeouts_mbox_fetch+0x68>)
 800c636:	f00b f916 	bl	8017866 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c63a:	2200      	movs	r2, #0
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f00a ffec 	bl	801761c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c644:	480f      	ldr	r0, [pc, #60]	; (800c684 <tcpip_timeouts_mbox_fetch+0x68>)
 800c646:	f00b f8ff 	bl	8017848 <sys_mutex_lock>
    return;
 800c64a:	e018      	b.n	800c67e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d102      	bne.n	800c658 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c652:	f008 f96b 	bl	801492c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c656:	e7e6      	b.n	800c626 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c658:	480a      	ldr	r0, [pc, #40]	; (800c684 <tcpip_timeouts_mbox_fetch+0x68>)
 800c65a:	f00b f904 	bl	8017866 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f00a ffda 	bl	801761c <sys_arch_mbox_fetch>
 800c668:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c66a:	4806      	ldr	r0, [pc, #24]	; (800c684 <tcpip_timeouts_mbox_fetch+0x68>)
 800c66c:	f00b f8ec 	bl	8017848 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d102      	bne.n	800c67e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c678:	f008 f958 	bl	801492c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c67c:	e7d3      	b.n	800c626 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20007ffc 	.word	0x20007ffc

0800c688 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c690:	4810      	ldr	r0, [pc, #64]	; (800c6d4 <tcpip_thread+0x4c>)
 800c692:	f00b f8d9 	bl	8017848 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c696:	4b10      	ldr	r3, [pc, #64]	; (800c6d8 <tcpip_thread+0x50>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c69e:	4b0e      	ldr	r3, [pc, #56]	; (800c6d8 <tcpip_thread+0x50>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a0e      	ldr	r2, [pc, #56]	; (800c6dc <tcpip_thread+0x54>)
 800c6a4:	6812      	ldr	r2, [r2, #0]
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6aa:	f107 030c 	add.w	r3, r7, #12
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	480b      	ldr	r0, [pc, #44]	; (800c6e0 <tcpip_thread+0x58>)
 800c6b2:	f7ff ffb3 	bl	800c61c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <tcpip_thread+0x5c>)
 800c6be:	2291      	movs	r2, #145	; 0x91
 800c6c0:	4909      	ldr	r1, [pc, #36]	; (800c6e8 <tcpip_thread+0x60>)
 800c6c2:	480a      	ldr	r0, [pc, #40]	; (800c6ec <tcpip_thread+0x64>)
 800c6c4:	f00b fab6 	bl	8017c34 <iprintf>
      continue;
 800c6c8:	e003      	b.n	800c6d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 f80f 	bl	800c6f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6d2:	e7ea      	b.n	800c6aa <tcpip_thread+0x22>
 800c6d4:	20007ffc 	.word	0x20007ffc
 800c6d8:	20004a9c 	.word	0x20004a9c
 800c6dc:	20004aa0 	.word	0x20004aa0
 800c6e0:	20004aa4 	.word	0x20004aa4
 800c6e4:	0801965c 	.word	0x0801965c
 800c6e8:	0801968c 	.word	0x0801968c
 800c6ec:	080196ac 	.word	0x080196ac

0800c6f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d026      	beq.n	800c74e <tcpip_thread_handle_msg+0x5e>
 800c700:	2b02      	cmp	r3, #2
 800c702:	dc2b      	bgt.n	800c75c <tcpip_thread_handle_msg+0x6c>
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <tcpip_thread_handle_msg+0x1e>
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d015      	beq.n	800c738 <tcpip_thread_handle_msg+0x48>
 800c70c:	e026      	b.n	800c75c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6850      	ldr	r0, [r2, #4]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6892      	ldr	r2, [r2, #8]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4798      	blx	r3
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d004      	beq.n	800c72e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f001 fcdb 	bl	800e0e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	2009      	movs	r0, #9
 800c732:	f000 fe33 	bl	800d39c <memp_free>
      break;
 800c736:	e018      	b.n	800c76a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	6892      	ldr	r2, [r2, #8]
 800c740:	4610      	mov	r0, r2
 800c742:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	2008      	movs	r0, #8
 800c748:	f000 fe28 	bl	800d39c <memp_free>
      break;
 800c74c:	e00d      	b.n	800c76a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	6892      	ldr	r2, [r2, #8]
 800c756:	4610      	mov	r0, r2
 800c758:	4798      	blx	r3
      break;
 800c75a:	e006      	b.n	800c76a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <tcpip_thread_handle_msg+0x84>)
 800c75e:	22cf      	movs	r2, #207	; 0xcf
 800c760:	4905      	ldr	r1, [pc, #20]	; (800c778 <tcpip_thread_handle_msg+0x88>)
 800c762:	4806      	ldr	r0, [pc, #24]	; (800c77c <tcpip_thread_handle_msg+0x8c>)
 800c764:	f00b fa66 	bl	8017c34 <iprintf>
      break;
 800c768:	bf00      	nop
  }
}
 800c76a:	bf00      	nop
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	0801965c 	.word	0x0801965c
 800c778:	0801968c 	.word	0x0801968c
 800c77c:	080196ac 	.word	0x080196ac

0800c780 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c78c:	481a      	ldr	r0, [pc, #104]	; (800c7f8 <tcpip_inpkt+0x78>)
 800c78e:	f00a ff8d 	bl	80176ac <sys_mbox_valid>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d105      	bne.n	800c7a4 <tcpip_inpkt+0x24>
 800c798:	4b18      	ldr	r3, [pc, #96]	; (800c7fc <tcpip_inpkt+0x7c>)
 800c79a:	22fc      	movs	r2, #252	; 0xfc
 800c79c:	4918      	ldr	r1, [pc, #96]	; (800c800 <tcpip_inpkt+0x80>)
 800c79e:	4819      	ldr	r0, [pc, #100]	; (800c804 <tcpip_inpkt+0x84>)
 800c7a0:	f00b fa48 	bl	8017c34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c7a4:	2009      	movs	r0, #9
 800c7a6:	f000 fda7 	bl	800d2f8 <memp_malloc>
 800c7aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d102      	bne.n	800c7b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b6:	e01a      	b.n	800c7ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c7d0:	6979      	ldr	r1, [r7, #20]
 800c7d2:	4809      	ldr	r0, [pc, #36]	; (800c7f8 <tcpip_inpkt+0x78>)
 800c7d4:	f00a ff08 	bl	80175e8 <sys_mbox_trypost>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d006      	beq.n	800c7ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c7de:	6979      	ldr	r1, [r7, #20]
 800c7e0:	2009      	movs	r0, #9
 800c7e2:	f000 fddb 	bl	800d39c <memp_free>
    return ERR_MEM;
 800c7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ea:	e000      	b.n	800c7ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c7ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20004aa4 	.word	0x20004aa4
 800c7fc:	0801965c 	.word	0x0801965c
 800c800:	080196d4 	.word	0x080196d4
 800c804:	080196ac 	.word	0x080196ac

0800c808 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c818:	f003 0318 	and.w	r3, r3, #24
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c820:	4a08      	ldr	r2, [pc, #32]	; (800c844 <tcpip_input+0x3c>)
 800c822:	6839      	ldr	r1, [r7, #0]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff ffab 	bl	800c780 <tcpip_inpkt>
 800c82a:	4603      	mov	r3, r0
 800c82c:	e005      	b.n	800c83a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c82e:	4a06      	ldr	r2, [pc, #24]	; (800c848 <tcpip_input+0x40>)
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff ffa4 	bl	800c780 <tcpip_inpkt>
 800c838:	4603      	mov	r3, r0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	080173e5 	.word	0x080173e5
 800c848:	080162f9 	.word	0x080162f9

0800c84c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c856:	4819      	ldr	r0, [pc, #100]	; (800c8bc <tcpip_try_callback+0x70>)
 800c858:	f00a ff28 	bl	80176ac <sys_mbox_valid>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <tcpip_try_callback+0x24>
 800c862:	4b17      	ldr	r3, [pc, #92]	; (800c8c0 <tcpip_try_callback+0x74>)
 800c864:	f240 125d 	movw	r2, #349	; 0x15d
 800c868:	4916      	ldr	r1, [pc, #88]	; (800c8c4 <tcpip_try_callback+0x78>)
 800c86a:	4817      	ldr	r0, [pc, #92]	; (800c8c8 <tcpip_try_callback+0x7c>)
 800c86c:	f00b f9e2 	bl	8017c34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c870:	2008      	movs	r0, #8
 800c872:	f000 fd41 	bl	800d2f8 <memp_malloc>
 800c876:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d102      	bne.n	800c884 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
 800c882:	e017      	b.n	800c8b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c896:	68f9      	ldr	r1, [r7, #12]
 800c898:	4808      	ldr	r0, [pc, #32]	; (800c8bc <tcpip_try_callback+0x70>)
 800c89a:	f00a fea5 	bl	80175e8 <sys_mbox_trypost>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d006      	beq.n	800c8b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8a4:	68f9      	ldr	r1, [r7, #12]
 800c8a6:	2008      	movs	r0, #8
 800c8a8:	f000 fd78 	bl	800d39c <memp_free>
    return ERR_MEM;
 800c8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b0:	e000      	b.n	800c8b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20004aa4 	.word	0x20004aa4
 800c8c0:	0801965c 	.word	0x0801965c
 800c8c4:	080196d4 	.word	0x080196d4
 800c8c8:	080196ac 	.word	0x080196ac

0800c8cc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c8d8:	4806      	ldr	r0, [pc, #24]	; (800c8f4 <tcpip_send_msg_wait_sem+0x28>)
 800c8da:	f00a ffb5 	bl	8017848 <sys_mutex_lock>
  fn(apimsg);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68b8      	ldr	r0, [r7, #8]
 800c8e2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c8e4:	4803      	ldr	r0, [pc, #12]	; (800c8f4 <tcpip_send_msg_wait_sem+0x28>)
 800c8e6:	f00a ffbe 	bl	8017866 <sys_mutex_unlock>
  return ERR_OK;
 800c8ea:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	20007ffc 	.word	0x20007ffc

0800c8f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af02      	add	r7, sp, #8
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c902:	f000 f871 	bl	800c9e8 <lwip_init>

  tcpip_init_done = initfunc;
 800c906:	4a17      	ldr	r2, [pc, #92]	; (800c964 <tcpip_init+0x6c>)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c90c:	4a16      	ldr	r2, [pc, #88]	; (800c968 <tcpip_init+0x70>)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c912:	2106      	movs	r1, #6
 800c914:	4815      	ldr	r0, [pc, #84]	; (800c96c <tcpip_init+0x74>)
 800c916:	f00a fe3b 	bl	8017590 <sys_mbox_new>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d006      	beq.n	800c92e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c920:	4b13      	ldr	r3, [pc, #76]	; (800c970 <tcpip_init+0x78>)
 800c922:	f240 2261 	movw	r2, #609	; 0x261
 800c926:	4913      	ldr	r1, [pc, #76]	; (800c974 <tcpip_init+0x7c>)
 800c928:	4813      	ldr	r0, [pc, #76]	; (800c978 <tcpip_init+0x80>)
 800c92a:	f00b f983 	bl	8017c34 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c92e:	4813      	ldr	r0, [pc, #76]	; (800c97c <tcpip_init+0x84>)
 800c930:	f00a ff74 	bl	801781c <sys_mutex_new>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d006      	beq.n	800c948 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c93a:	4b0d      	ldr	r3, [pc, #52]	; (800c970 <tcpip_init+0x78>)
 800c93c:	f240 2265 	movw	r2, #613	; 0x265
 800c940:	490f      	ldr	r1, [pc, #60]	; (800c980 <tcpip_init+0x88>)
 800c942:	480d      	ldr	r0, [pc, #52]	; (800c978 <tcpip_init+0x80>)
 800c944:	f00b f976 	bl	8017c34 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c948:	2318      	movs	r3, #24
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c950:	2200      	movs	r2, #0
 800c952:	490c      	ldr	r1, [pc, #48]	; (800c984 <tcpip_init+0x8c>)
 800c954:	480c      	ldr	r0, [pc, #48]	; (800c988 <tcpip_init+0x90>)
 800c956:	f00a ff93 	bl	8017880 <sys_thread_new>
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	20004a9c 	.word	0x20004a9c
 800c968:	20004aa0 	.word	0x20004aa0
 800c96c:	20004aa4 	.word	0x20004aa4
 800c970:	0801965c 	.word	0x0801965c
 800c974:	080196e4 	.word	0x080196e4
 800c978:	080196ac 	.word	0x080196ac
 800c97c:	20007ffc 	.word	0x20007ffc
 800c980:	08019708 	.word	0x08019708
 800c984:	0800c689 	.word	0x0800c689
 800c988:	0801972c 	.word	0x0801972c

0800c98c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c996:	88fb      	ldrh	r3, [r7, #6]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	b21a      	sxth	r2, r3
 800c99c:	88fb      	ldrh	r3, [r7, #6]
 800c99e:	0a1b      	lsrs	r3, r3, #8
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	b21b      	sxth	r3, r3
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	b21b      	sxth	r3, r3
 800c9a8:	b29b      	uxth	r3, r3
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	061a      	lsls	r2, r3, #24
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	0a1b      	lsrs	r3, r3, #8
 800c9d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9d4:	431a      	orrs	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	0e1b      	lsrs	r3, r3, #24
 800c9da:	4313      	orrs	r3, r2
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c9f2:	f00a ff07 	bl	8017804 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c9f6:	f000 f8d5 	bl	800cba4 <mem_init>
  memp_init();
 800c9fa:	f000 fc31 	bl	800d260 <memp_init>
  pbuf_init();
  netif_init();
 800c9fe:	f000 fcf7 	bl	800d3f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ca02:	f008 f805 	bl	8014a10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ca06:	f001 fe07 	bl	800e618 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ca0a:	f007 ff47 	bl	801489c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
	...

0800ca18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <ptr_to_mem+0x20>)
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	88fb      	ldrh	r3, [r7, #6]
 800ca28:	4413      	add	r3, r2
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	20004aa8 	.word	0x20004aa8

0800ca3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <mem_to_ptr+0x20>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	b29b      	uxth	r3, r3
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	20004aa8 	.word	0x20004aa8

0800ca60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca68:	4b45      	ldr	r3, [pc, #276]	; (800cb80 <plug_holes+0x120>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d206      	bcs.n	800ca80 <plug_holes+0x20>
 800ca72:	4b44      	ldr	r3, [pc, #272]	; (800cb84 <plug_holes+0x124>)
 800ca74:	f240 12df 	movw	r2, #479	; 0x1df
 800ca78:	4943      	ldr	r1, [pc, #268]	; (800cb88 <plug_holes+0x128>)
 800ca7a:	4844      	ldr	r0, [pc, #272]	; (800cb8c <plug_holes+0x12c>)
 800ca7c:	f00b f8da 	bl	8017c34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca80:	4b43      	ldr	r3, [pc, #268]	; (800cb90 <plug_holes+0x130>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d306      	bcc.n	800ca98 <plug_holes+0x38>
 800ca8a:	4b3e      	ldr	r3, [pc, #248]	; (800cb84 <plug_holes+0x124>)
 800ca8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ca90:	4940      	ldr	r1, [pc, #256]	; (800cb94 <plug_holes+0x134>)
 800ca92:	483e      	ldr	r0, [pc, #248]	; (800cb8c <plug_holes+0x12c>)
 800ca94:	f00b f8ce 	bl	8017c34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	791b      	ldrb	r3, [r3, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d006      	beq.n	800caae <plug_holes+0x4e>
 800caa0:	4b38      	ldr	r3, [pc, #224]	; (800cb84 <plug_holes+0x124>)
 800caa2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800caa6:	493c      	ldr	r1, [pc, #240]	; (800cb98 <plug_holes+0x138>)
 800caa8:	4838      	ldr	r0, [pc, #224]	; (800cb8c <plug_holes+0x12c>)
 800caaa:	f00b f8c3 	bl	8017c34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cab6:	d906      	bls.n	800cac6 <plug_holes+0x66>
 800cab8:	4b32      	ldr	r3, [pc, #200]	; (800cb84 <plug_holes+0x124>)
 800caba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cabe:	4937      	ldr	r1, [pc, #220]	; (800cb9c <plug_holes+0x13c>)
 800cac0:	4832      	ldr	r0, [pc, #200]	; (800cb8c <plug_holes+0x12c>)
 800cac2:	f00b f8b7 	bl	8017c34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff ffa4 	bl	800ca18 <ptr_to_mem>
 800cad0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d024      	beq.n	800cb24 <plug_holes+0xc4>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	791b      	ldrb	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d120      	bne.n	800cb24 <plug_holes+0xc4>
 800cae2:	4b2b      	ldr	r3, [pc, #172]	; (800cb90 <plug_holes+0x130>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d01b      	beq.n	800cb24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800caec:	4b2c      	ldr	r3, [pc, #176]	; (800cba0 <plug_holes+0x140>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d102      	bne.n	800cafc <plug_holes+0x9c>
      lfree = mem;
 800caf6:	4a2a      	ldr	r2, [pc, #168]	; (800cba0 <plug_holes+0x140>)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	881a      	ldrh	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb0c:	d00a      	beq.n	800cb24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff ff80 	bl	800ca18 <ptr_to_mem>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ff8e 	bl	800ca3c <mem_to_ptr>
 800cb20:	4603      	mov	r3, r0
 800cb22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	885b      	ldrh	r3, [r3, #2]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff ff75 	bl	800ca18 <ptr_to_mem>
 800cb2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d01f      	beq.n	800cb78 <plug_holes+0x118>
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	791b      	ldrb	r3, [r3, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11b      	bne.n	800cb78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb40:	4b17      	ldr	r3, [pc, #92]	; (800cba0 <plug_holes+0x140>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d102      	bne.n	800cb50 <plug_holes+0xf0>
      lfree = pmem;
 800cb4a:	4a15      	ldr	r2, [pc, #84]	; (800cba0 <plug_holes+0x140>)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	881a      	ldrh	r2, [r3, #0]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb60:	d00a      	beq.n	800cb78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff ff56 	bl	800ca18 <ptr_to_mem>
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	68b8      	ldr	r0, [r7, #8]
 800cb70:	f7ff ff64 	bl	800ca3c <mem_to_ptr>
 800cb74:	4603      	mov	r3, r0
 800cb76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb78:	bf00      	nop
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd90      	pop	{r4, r7, pc}
 800cb80:	20004aa8 	.word	0x20004aa8
 800cb84:	0801973c 	.word	0x0801973c
 800cb88:	0801976c 	.word	0x0801976c
 800cb8c:	08019784 	.word	0x08019784
 800cb90:	20004aac 	.word	0x20004aac
 800cb94:	080197ac 	.word	0x080197ac
 800cb98:	080197c8 	.word	0x080197c8
 800cb9c:	080197e4 	.word	0x080197e4
 800cba0:	20004ab4 	.word	0x20004ab4

0800cba4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cbaa:	4b1f      	ldr	r3, [pc, #124]	; (800cc28 <mem_init+0x84>)
 800cbac:	3303      	adds	r3, #3
 800cbae:	f023 0303 	bic.w	r3, r3, #3
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <mem_init+0x88>)
 800cbb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cbb8:	4b1c      	ldr	r3, [pc, #112]	; (800cc2c <mem_init+0x88>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbd2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cbd6:	f7ff ff1f 	bl	800ca18 <ptr_to_mem>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	4a14      	ldr	r2, [pc, #80]	; (800cc30 <mem_init+0x8c>)
 800cbde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cbe0:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <mem_init+0x8c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cbe8:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <mem_init+0x8c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbf0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cbf2:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <mem_init+0x8c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbfa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cbfc:	4b0b      	ldr	r3, [pc, #44]	; (800cc2c <mem_init+0x88>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a0c      	ldr	r2, [pc, #48]	; (800cc34 <mem_init+0x90>)
 800cc02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cc04:	480c      	ldr	r0, [pc, #48]	; (800cc38 <mem_init+0x94>)
 800cc06:	f00a fe09 	bl	801781c <sys_mutex_new>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <mem_init+0x98>)
 800cc12:	f240 221f 	movw	r2, #543	; 0x21f
 800cc16:	490a      	ldr	r1, [pc, #40]	; (800cc40 <mem_init+0x9c>)
 800cc18:	480a      	ldr	r0, [pc, #40]	; (800cc44 <mem_init+0xa0>)
 800cc1a:	f00b f80b 	bl	8017c34 <iprintf>
  }
}
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20008018 	.word	0x20008018
 800cc2c:	20004aa8 	.word	0x20004aa8
 800cc30:	20004aac 	.word	0x20004aac
 800cc34:	20004ab4 	.word	0x20004ab4
 800cc38:	20004ab0 	.word	0x20004ab0
 800cc3c:	0801973c 	.word	0x0801973c
 800cc40:	08019810 	.word	0x08019810
 800cc44:	08019784 	.word	0x08019784

0800cc48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff fef3 	bl	800ca3c <mem_to_ptr>
 800cc56:	4603      	mov	r3, r0
 800cc58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	881b      	ldrh	r3, [r3, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff feda 	bl	800ca18 <ptr_to_mem>
 800cc64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	885b      	ldrh	r3, [r3, #2]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff fed4 	bl	800ca18 <ptr_to_mem>
 800cc70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc7a:	d818      	bhi.n	800ccae <mem_link_valid+0x66>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	885b      	ldrh	r3, [r3, #2]
 800cc80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc84:	d813      	bhi.n	800ccae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc8a:	8afa      	ldrh	r2, [r7, #22]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d004      	beq.n	800cc9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	881b      	ldrh	r3, [r3, #0]
 800cc94:	8afa      	ldrh	r2, [r7, #22]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d109      	bne.n	800ccae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc9a:	4b08      	ldr	r3, [pc, #32]	; (800ccbc <mem_link_valid+0x74>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d006      	beq.n	800ccb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	885b      	ldrh	r3, [r3, #2]
 800cca8:	8afa      	ldrh	r2, [r7, #22]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d001      	beq.n	800ccb2 <mem_link_valid+0x6a>
    return 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e000      	b.n	800ccb4 <mem_link_valid+0x6c>
  }
  return 1;
 800ccb2:	2301      	movs	r3, #1
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	20004aac 	.word	0x20004aac

0800ccc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d070      	beq.n	800cdb0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f003 0303 	and.w	r3, r3, #3
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00d      	beq.n	800ccf4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ccd8:	4b37      	ldr	r3, [pc, #220]	; (800cdb8 <mem_free+0xf8>)
 800ccda:	f240 2273 	movw	r2, #627	; 0x273
 800ccde:	4937      	ldr	r1, [pc, #220]	; (800cdbc <mem_free+0xfc>)
 800cce0:	4837      	ldr	r0, [pc, #220]	; (800cdc0 <mem_free+0x100>)
 800cce2:	f00a ffa7 	bl	8017c34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cce6:	f00a fdeb 	bl	80178c0 <sys_arch_protect>
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f00a fdf5 	bl	80178dc <sys_arch_unprotect>
    return;
 800ccf2:	e05e      	b.n	800cdb2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3b08      	subs	r3, #8
 800ccf8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ccfa:	4b32      	ldr	r3, [pc, #200]	; (800cdc4 <mem_free+0x104>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	69fa      	ldr	r2, [r7, #28]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d306      	bcc.n	800cd12 <mem_free+0x52>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f103 020c 	add.w	r2, r3, #12
 800cd0a:	4b2f      	ldr	r3, [pc, #188]	; (800cdc8 <mem_free+0x108>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d90d      	bls.n	800cd2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cd12:	4b29      	ldr	r3, [pc, #164]	; (800cdb8 <mem_free+0xf8>)
 800cd14:	f240 227f 	movw	r2, #639	; 0x27f
 800cd18:	492c      	ldr	r1, [pc, #176]	; (800cdcc <mem_free+0x10c>)
 800cd1a:	4829      	ldr	r0, [pc, #164]	; (800cdc0 <mem_free+0x100>)
 800cd1c:	f00a ff8a 	bl	8017c34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd20:	f00a fdce 	bl	80178c0 <sys_arch_protect>
 800cd24:	6138      	str	r0, [r7, #16]
 800cd26:	6938      	ldr	r0, [r7, #16]
 800cd28:	f00a fdd8 	bl	80178dc <sys_arch_unprotect>
    return;
 800cd2c:	e041      	b.n	800cdb2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd2e:	4828      	ldr	r0, [pc, #160]	; (800cdd0 <mem_free+0x110>)
 800cd30:	f00a fd8a 	bl	8017848 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	791b      	ldrb	r3, [r3, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d110      	bne.n	800cd5e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cd3c:	4b1e      	ldr	r3, [pc, #120]	; (800cdb8 <mem_free+0xf8>)
 800cd3e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cd42:	4924      	ldr	r1, [pc, #144]	; (800cdd4 <mem_free+0x114>)
 800cd44:	481e      	ldr	r0, [pc, #120]	; (800cdc0 <mem_free+0x100>)
 800cd46:	f00a ff75 	bl	8017c34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd4a:	4821      	ldr	r0, [pc, #132]	; (800cdd0 <mem_free+0x110>)
 800cd4c:	f00a fd8b 	bl	8017866 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd50:	f00a fdb6 	bl	80178c0 <sys_arch_protect>
 800cd54:	6178      	str	r0, [r7, #20]
 800cd56:	6978      	ldr	r0, [r7, #20]
 800cd58:	f00a fdc0 	bl	80178dc <sys_arch_unprotect>
    return;
 800cd5c:	e029      	b.n	800cdb2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cd5e:	69f8      	ldr	r0, [r7, #28]
 800cd60:	f7ff ff72 	bl	800cc48 <mem_link_valid>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d110      	bne.n	800cd8c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd6a:	4b13      	ldr	r3, [pc, #76]	; (800cdb8 <mem_free+0xf8>)
 800cd6c:	f240 2295 	movw	r2, #661	; 0x295
 800cd70:	4919      	ldr	r1, [pc, #100]	; (800cdd8 <mem_free+0x118>)
 800cd72:	4813      	ldr	r0, [pc, #76]	; (800cdc0 <mem_free+0x100>)
 800cd74:	f00a ff5e 	bl	8017c34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cd78:	4815      	ldr	r0, [pc, #84]	; (800cdd0 <mem_free+0x110>)
 800cd7a:	f00a fd74 	bl	8017866 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd7e:	f00a fd9f 	bl	80178c0 <sys_arch_protect>
 800cd82:	61b8      	str	r0, [r7, #24]
 800cd84:	69b8      	ldr	r0, [r7, #24]
 800cd86:	f00a fda9 	bl	80178dc <sys_arch_unprotect>
    return;
 800cd8a:	e012      	b.n	800cdb2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd92:	4b12      	ldr	r3, [pc, #72]	; (800cddc <mem_free+0x11c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d202      	bcs.n	800cda2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd9c:	4a0f      	ldr	r2, [pc, #60]	; (800cddc <mem_free+0x11c>)
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f7ff fe5c 	bl	800ca60 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cda8:	4809      	ldr	r0, [pc, #36]	; (800cdd0 <mem_free+0x110>)
 800cdaa:	f00a fd5c 	bl	8017866 <sys_mutex_unlock>
 800cdae:	e000      	b.n	800cdb2 <mem_free+0xf2>
    return;
 800cdb0:	bf00      	nop
}
 800cdb2:	3720      	adds	r7, #32
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	0801973c 	.word	0x0801973c
 800cdbc:	0801982c 	.word	0x0801982c
 800cdc0:	08019784 	.word	0x08019784
 800cdc4:	20004aa8 	.word	0x20004aa8
 800cdc8:	20004aac 	.word	0x20004aac
 800cdcc:	08019850 	.word	0x08019850
 800cdd0:	20004ab0 	.word	0x20004ab0
 800cdd4:	0801986c 	.word	0x0801986c
 800cdd8:	08019894 	.word	0x08019894
 800cddc:	20004ab4 	.word	0x20004ab4

0800cde0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cdec:	887b      	ldrh	r3, [r7, #2]
 800cdee:	3303      	adds	r3, #3
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	f023 0303 	bic.w	r3, r3, #3
 800cdf6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cdf8:	8bfb      	ldrh	r3, [r7, #30]
 800cdfa:	2b0b      	cmp	r3, #11
 800cdfc:	d801      	bhi.n	800ce02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cdfe:	230c      	movs	r3, #12
 800ce00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ce02:	8bfb      	ldrh	r3, [r7, #30]
 800ce04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce08:	d803      	bhi.n	800ce12 <mem_trim+0x32>
 800ce0a:	8bfa      	ldrh	r2, [r7, #30]
 800ce0c:	887b      	ldrh	r3, [r7, #2]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d201      	bcs.n	800ce16 <mem_trim+0x36>
    return NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e0d8      	b.n	800cfc8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ce16:	4b6e      	ldr	r3, [pc, #440]	; (800cfd0 <mem_trim+0x1f0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d304      	bcc.n	800ce2a <mem_trim+0x4a>
 800ce20:	4b6c      	ldr	r3, [pc, #432]	; (800cfd4 <mem_trim+0x1f4>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d306      	bcc.n	800ce38 <mem_trim+0x58>
 800ce2a:	4b6b      	ldr	r3, [pc, #428]	; (800cfd8 <mem_trim+0x1f8>)
 800ce2c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ce30:	496a      	ldr	r1, [pc, #424]	; (800cfdc <mem_trim+0x1fc>)
 800ce32:	486b      	ldr	r0, [pc, #428]	; (800cfe0 <mem_trim+0x200>)
 800ce34:	f00a fefe 	bl	8017c34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ce38:	4b65      	ldr	r3, [pc, #404]	; (800cfd0 <mem_trim+0x1f0>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d304      	bcc.n	800ce4c <mem_trim+0x6c>
 800ce42:	4b64      	ldr	r3, [pc, #400]	; (800cfd4 <mem_trim+0x1f4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d307      	bcc.n	800ce5c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce4c:	f00a fd38 	bl	80178c0 <sys_arch_protect>
 800ce50:	60b8      	str	r0, [r7, #8]
 800ce52:	68b8      	ldr	r0, [r7, #8]
 800ce54:	f00a fd42 	bl	80178dc <sys_arch_unprotect>
    return rmem;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	e0b5      	b.n	800cfc8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3b08      	subs	r3, #8
 800ce60:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce62:	69b8      	ldr	r0, [r7, #24]
 800ce64:	f7ff fdea 	bl	800ca3c <mem_to_ptr>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	881a      	ldrh	r2, [r3, #0]
 800ce70:	8afb      	ldrh	r3, [r7, #22]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3b08      	subs	r3, #8
 800ce78:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce7a:	8bfa      	ldrh	r2, [r7, #30]
 800ce7c:	8abb      	ldrh	r3, [r7, #20]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d906      	bls.n	800ce90 <mem_trim+0xb0>
 800ce82:	4b55      	ldr	r3, [pc, #340]	; (800cfd8 <mem_trim+0x1f8>)
 800ce84:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ce88:	4956      	ldr	r1, [pc, #344]	; (800cfe4 <mem_trim+0x204>)
 800ce8a:	4855      	ldr	r0, [pc, #340]	; (800cfe0 <mem_trim+0x200>)
 800ce8c:	f00a fed2 	bl	8017c34 <iprintf>
  if (newsize > size) {
 800ce90:	8bfa      	ldrh	r2, [r7, #30]
 800ce92:	8abb      	ldrh	r3, [r7, #20]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d901      	bls.n	800ce9c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e095      	b.n	800cfc8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ce9c:	8bfa      	ldrh	r2, [r7, #30]
 800ce9e:	8abb      	ldrh	r3, [r7, #20]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d101      	bne.n	800cea8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	e08f      	b.n	800cfc8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cea8:	484f      	ldr	r0, [pc, #316]	; (800cfe8 <mem_trim+0x208>)
 800ceaa:	f00a fccd 	bl	8017848 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fdb0 	bl	800ca18 <ptr_to_mem>
 800ceb8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	791b      	ldrb	r3, [r3, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d13f      	bne.n	800cf42 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ceca:	d106      	bne.n	800ceda <mem_trim+0xfa>
 800cecc:	4b42      	ldr	r3, [pc, #264]	; (800cfd8 <mem_trim+0x1f8>)
 800cece:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ced2:	4946      	ldr	r1, [pc, #280]	; (800cfec <mem_trim+0x20c>)
 800ced4:	4842      	ldr	r0, [pc, #264]	; (800cfe0 <mem_trim+0x200>)
 800ced6:	f00a fead 	bl	8017c34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cee0:	8afa      	ldrh	r2, [r7, #22]
 800cee2:	8bfb      	ldrh	r3, [r7, #30]
 800cee4:	4413      	add	r3, r2
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	3308      	adds	r3, #8
 800ceea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ceec:	4b40      	ldr	r3, [pc, #256]	; (800cff0 <mem_trim+0x210>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d106      	bne.n	800cf04 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cef6:	89fb      	ldrh	r3, [r7, #14]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff fd8d 	bl	800ca18 <ptr_to_mem>
 800cefe:	4603      	mov	r3, r0
 800cf00:	4a3b      	ldr	r2, [pc, #236]	; (800cff0 <mem_trim+0x210>)
 800cf02:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cf04:	89fb      	ldrh	r3, [r7, #14]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fd86 	bl	800ca18 <ptr_to_mem>
 800cf0c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2200      	movs	r2, #0
 800cf12:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	89ba      	ldrh	r2, [r7, #12]
 800cf18:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	8afa      	ldrh	r2, [r7, #22]
 800cf1e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	89fa      	ldrh	r2, [r7, #14]
 800cf24:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf2e:	d047      	beq.n	800cfc0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fd6f 	bl	800ca18 <ptr_to_mem>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	89fb      	ldrh	r3, [r7, #14]
 800cf3e:	8053      	strh	r3, [r2, #2]
 800cf40:	e03e      	b.n	800cfc0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cf42:	8bfb      	ldrh	r3, [r7, #30]
 800cf44:	f103 0214 	add.w	r2, r3, #20
 800cf48:	8abb      	ldrh	r3, [r7, #20]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d838      	bhi.n	800cfc0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cf4e:	8afa      	ldrh	r2, [r7, #22]
 800cf50:	8bfb      	ldrh	r3, [r7, #30]
 800cf52:	4413      	add	r3, r2
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	3308      	adds	r3, #8
 800cf58:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf62:	d106      	bne.n	800cf72 <mem_trim+0x192>
 800cf64:	4b1c      	ldr	r3, [pc, #112]	; (800cfd8 <mem_trim+0x1f8>)
 800cf66:	f240 3216 	movw	r2, #790	; 0x316
 800cf6a:	4920      	ldr	r1, [pc, #128]	; (800cfec <mem_trim+0x20c>)
 800cf6c:	481c      	ldr	r0, [pc, #112]	; (800cfe0 <mem_trim+0x200>)
 800cf6e:	f00a fe61 	bl	8017c34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf72:	89fb      	ldrh	r3, [r7, #14]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7ff fd4f 	bl	800ca18 <ptr_to_mem>
 800cf7a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cf7c:	4b1c      	ldr	r3, [pc, #112]	; (800cff0 <mem_trim+0x210>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d202      	bcs.n	800cf8c <mem_trim+0x1ac>
      lfree = mem2;
 800cf86:	4a1a      	ldr	r2, [pc, #104]	; (800cff0 <mem_trim+0x210>)
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	881a      	ldrh	r2, [r3, #0]
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	8afa      	ldrh	r2, [r7, #22]
 800cf9e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	89fa      	ldrh	r2, [r7, #14]
 800cfa4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfae:	d007      	beq.n	800cfc0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fd2f 	bl	800ca18 <ptr_to_mem>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	89fb      	ldrh	r3, [r7, #14]
 800cfbe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cfc0:	4809      	ldr	r0, [pc, #36]	; (800cfe8 <mem_trim+0x208>)
 800cfc2:	f00a fc50 	bl	8017866 <sys_mutex_unlock>
  return rmem;
 800cfc6:	687b      	ldr	r3, [r7, #4]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3720      	adds	r7, #32
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20004aa8 	.word	0x20004aa8
 800cfd4:	20004aac 	.word	0x20004aac
 800cfd8:	0801973c 	.word	0x0801973c
 800cfdc:	080198c8 	.word	0x080198c8
 800cfe0:	08019784 	.word	0x08019784
 800cfe4:	080198e0 	.word	0x080198e0
 800cfe8:	20004ab0 	.word	0x20004ab0
 800cfec:	08019900 	.word	0x08019900
 800cff0:	20004ab4 	.word	0x20004ab4

0800cff4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cffe:	88fb      	ldrh	r3, [r7, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <mem_malloc+0x14>
    return NULL;
 800d004:	2300      	movs	r3, #0
 800d006:	e0e2      	b.n	800d1ce <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d008:	88fb      	ldrh	r3, [r7, #6]
 800d00a:	3303      	adds	r3, #3
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	f023 0303 	bic.w	r3, r3, #3
 800d012:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d014:	8bbb      	ldrh	r3, [r7, #28]
 800d016:	2b0b      	cmp	r3, #11
 800d018:	d801      	bhi.n	800d01e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d01a:	230c      	movs	r3, #12
 800d01c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d01e:	8bbb      	ldrh	r3, [r7, #28]
 800d020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d024:	d803      	bhi.n	800d02e <mem_malloc+0x3a>
 800d026:	8bba      	ldrh	r2, [r7, #28]
 800d028:	88fb      	ldrh	r3, [r7, #6]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d201      	bcs.n	800d032 <mem_malloc+0x3e>
    return NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	e0cd      	b.n	800d1ce <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d032:	4869      	ldr	r0, [pc, #420]	; (800d1d8 <mem_malloc+0x1e4>)
 800d034:	f00a fc08 	bl	8017848 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d038:	4b68      	ldr	r3, [pc, #416]	; (800d1dc <mem_malloc+0x1e8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff fcfd 	bl	800ca3c <mem_to_ptr>
 800d042:	4603      	mov	r3, r0
 800d044:	83fb      	strh	r3, [r7, #30]
 800d046:	e0b7      	b.n	800d1b8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d048:	8bfb      	ldrh	r3, [r7, #30]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff fce4 	bl	800ca18 <ptr_to_mem>
 800d050:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	791b      	ldrb	r3, [r3, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f040 80a7 	bne.w	800d1aa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	8bfb      	ldrh	r3, [r7, #30]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	f1a3 0208 	sub.w	r2, r3, #8
 800d06a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d06c:	429a      	cmp	r2, r3
 800d06e:	f0c0 809c 	bcc.w	800d1aa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	8bfb      	ldrh	r3, [r7, #30]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	f1a3 0208 	sub.w	r2, r3, #8
 800d080:	8bbb      	ldrh	r3, [r7, #28]
 800d082:	3314      	adds	r3, #20
 800d084:	429a      	cmp	r2, r3
 800d086:	d333      	bcc.n	800d0f0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d088:	8bfa      	ldrh	r2, [r7, #30]
 800d08a:	8bbb      	ldrh	r3, [r7, #28]
 800d08c:	4413      	add	r3, r2
 800d08e:	b29b      	uxth	r3, r3
 800d090:	3308      	adds	r3, #8
 800d092:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d094:	8a7b      	ldrh	r3, [r7, #18]
 800d096:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d09a:	d106      	bne.n	800d0aa <mem_malloc+0xb6>
 800d09c:	4b50      	ldr	r3, [pc, #320]	; (800d1e0 <mem_malloc+0x1ec>)
 800d09e:	f240 3287 	movw	r2, #903	; 0x387
 800d0a2:	4950      	ldr	r1, [pc, #320]	; (800d1e4 <mem_malloc+0x1f0>)
 800d0a4:	4850      	ldr	r0, [pc, #320]	; (800d1e8 <mem_malloc+0x1f4>)
 800d0a6:	f00a fdc5 	bl	8017c34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d0aa:	8a7b      	ldrh	r3, [r7, #18]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff fcb3 	bl	800ca18 <ptr_to_mem>
 800d0b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	881a      	ldrh	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	8bfa      	ldrh	r2, [r7, #30]
 800d0c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	8a7a      	ldrh	r2, [r7, #18]
 800d0cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d0dc:	d00b      	beq.n	800d0f6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff fc98 	bl	800ca18 <ptr_to_mem>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	8a7b      	ldrh	r3, [r7, #18]
 800d0ec:	8053      	strh	r3, [r2, #2]
 800d0ee:	e002      	b.n	800d0f6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d0f6:	4b39      	ldr	r3, [pc, #228]	; (800d1dc <mem_malloc+0x1e8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d127      	bne.n	800d150 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d100:	4b36      	ldr	r3, [pc, #216]	; (800d1dc <mem_malloc+0x1e8>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d106:	e005      	b.n	800d114 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff fc83 	bl	800ca18 <ptr_to_mem>
 800d112:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	791b      	ldrb	r3, [r3, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d004      	beq.n	800d126 <mem_malloc+0x132>
 800d11c:	4b33      	ldr	r3, [pc, #204]	; (800d1ec <mem_malloc+0x1f8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	69ba      	ldr	r2, [r7, #24]
 800d122:	429a      	cmp	r2, r3
 800d124:	d1f0      	bne.n	800d108 <mem_malloc+0x114>
          }
          lfree = cur;
 800d126:	4a2d      	ldr	r2, [pc, #180]	; (800d1dc <mem_malloc+0x1e8>)
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d12c:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <mem_malloc+0x1e8>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	4b2e      	ldr	r3, [pc, #184]	; (800d1ec <mem_malloc+0x1f8>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d00b      	beq.n	800d150 <mem_malloc+0x15c>
 800d138:	4b28      	ldr	r3, [pc, #160]	; (800d1dc <mem_malloc+0x1e8>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	791b      	ldrb	r3, [r3, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d006      	beq.n	800d150 <mem_malloc+0x15c>
 800d142:	4b27      	ldr	r3, [pc, #156]	; (800d1e0 <mem_malloc+0x1ec>)
 800d144:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d148:	4929      	ldr	r1, [pc, #164]	; (800d1f0 <mem_malloc+0x1fc>)
 800d14a:	4827      	ldr	r0, [pc, #156]	; (800d1e8 <mem_malloc+0x1f4>)
 800d14c:	f00a fd72 	bl	8017c34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d150:	4821      	ldr	r0, [pc, #132]	; (800d1d8 <mem_malloc+0x1e4>)
 800d152:	f00a fb88 	bl	8017866 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d156:	8bba      	ldrh	r2, [r7, #28]
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	4413      	add	r3, r2
 800d15c:	3308      	adds	r3, #8
 800d15e:	4a23      	ldr	r2, [pc, #140]	; (800d1ec <mem_malloc+0x1f8>)
 800d160:	6812      	ldr	r2, [r2, #0]
 800d162:	4293      	cmp	r3, r2
 800d164:	d906      	bls.n	800d174 <mem_malloc+0x180>
 800d166:	4b1e      	ldr	r3, [pc, #120]	; (800d1e0 <mem_malloc+0x1ec>)
 800d168:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d16c:	4921      	ldr	r1, [pc, #132]	; (800d1f4 <mem_malloc+0x200>)
 800d16e:	481e      	ldr	r0, [pc, #120]	; (800d1e8 <mem_malloc+0x1f4>)
 800d170:	f00a fd60 	bl	8017c34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f003 0303 	and.w	r3, r3, #3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d006      	beq.n	800d18c <mem_malloc+0x198>
 800d17e:	4b18      	ldr	r3, [pc, #96]	; (800d1e0 <mem_malloc+0x1ec>)
 800d180:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d184:	491c      	ldr	r1, [pc, #112]	; (800d1f8 <mem_malloc+0x204>)
 800d186:	4818      	ldr	r0, [pc, #96]	; (800d1e8 <mem_malloc+0x1f4>)
 800d188:	f00a fd54 	bl	8017c34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d006      	beq.n	800d1a4 <mem_malloc+0x1b0>
 800d196:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <mem_malloc+0x1ec>)
 800d198:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d19c:	4917      	ldr	r1, [pc, #92]	; (800d1fc <mem_malloc+0x208>)
 800d19e:	4812      	ldr	r0, [pc, #72]	; (800d1e8 <mem_malloc+0x1f4>)
 800d1a0:	f00a fd48 	bl	8017c34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	e011      	b.n	800d1ce <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d1aa:	8bfb      	ldrh	r3, [r7, #30]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fc33 	bl	800ca18 <ptr_to_mem>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1b8:	8bfa      	ldrh	r2, [r7, #30]
 800d1ba:	8bbb      	ldrh	r3, [r7, #28]
 800d1bc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	f4ff af41 	bcc.w	800d048 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d1c6:	4804      	ldr	r0, [pc, #16]	; (800d1d8 <mem_malloc+0x1e4>)
 800d1c8:	f00a fb4d 	bl	8017866 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3720      	adds	r7, #32
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20004ab0 	.word	0x20004ab0
 800d1dc:	20004ab4 	.word	0x20004ab4
 800d1e0:	0801973c 	.word	0x0801973c
 800d1e4:	08019900 	.word	0x08019900
 800d1e8:	08019784 	.word	0x08019784
 800d1ec:	20004aac 	.word	0x20004aac
 800d1f0:	08019914 	.word	0x08019914
 800d1f4:	08019930 	.word	0x08019930
 800d1f8:	08019960 	.word	0x08019960
 800d1fc:	08019990 	.word	0x08019990

0800d200 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	2200      	movs	r2, #0
 800d20e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	3303      	adds	r3, #3
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d21c:	2300      	movs	r3, #0
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	e011      	b.n	800d246 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	461a      	mov	r2, r3
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	4413      	add	r3, r2
 800d23e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3301      	adds	r3, #1
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	885b      	ldrh	r3, [r3, #2]
 800d24a:	461a      	mov	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4293      	cmp	r3, r2
 800d250:	dbe7      	blt.n	800d222 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d252:	bf00      	nop
 800d254:	bf00      	nop
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d266:	2300      	movs	r3, #0
 800d268:	80fb      	strh	r3, [r7, #6]
 800d26a:	e009      	b.n	800d280 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d26c:	88fb      	ldrh	r3, [r7, #6]
 800d26e:	4a08      	ldr	r2, [pc, #32]	; (800d290 <memp_init+0x30>)
 800d270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff ffc3 	bl	800d200 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d27a:	88fb      	ldrh	r3, [r7, #6]
 800d27c:	3301      	adds	r3, #1
 800d27e:	80fb      	strh	r3, [r7, #6]
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	2b0c      	cmp	r3, #12
 800d284:	d9f2      	bls.n	800d26c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d286:	bf00      	nop
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	0801c1d4 	.word	0x0801c1d4

0800d294 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d29c:	f00a fb10 	bl	80178c0 <sys_arch_protect>
 800d2a0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d015      	beq.n	800d2dc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	6812      	ldr	r2, [r2, #0]
 800d2b8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <do_memp_malloc_pool+0x3e>
 800d2c4:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <do_memp_malloc_pool+0x58>)
 800d2c6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d2ca:	4909      	ldr	r1, [pc, #36]	; (800d2f0 <do_memp_malloc_pool+0x5c>)
 800d2cc:	4809      	ldr	r0, [pc, #36]	; (800d2f4 <do_memp_malloc_pool+0x60>)
 800d2ce:	f00a fcb1 	bl	8017c34 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f00a fb02 	bl	80178dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	e003      	b.n	800d2e4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f00a fafd 	bl	80178dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	080199b4 	.word	0x080199b4
 800d2f0:	080199e4 	.word	0x080199e4
 800d2f4:	08019a08 	.word	0x08019a08

0800d2f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	2b0c      	cmp	r3, #12
 800d306:	d908      	bls.n	800d31a <memp_malloc+0x22>
 800d308:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <memp_malloc+0x3c>)
 800d30a:	f240 1257 	movw	r2, #343	; 0x157
 800d30e:	490a      	ldr	r1, [pc, #40]	; (800d338 <memp_malloc+0x40>)
 800d310:	480a      	ldr	r0, [pc, #40]	; (800d33c <memp_malloc+0x44>)
 800d312:	f00a fc8f 	bl	8017c34 <iprintf>
 800d316:	2300      	movs	r3, #0
 800d318:	e008      	b.n	800d32c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	4a08      	ldr	r2, [pc, #32]	; (800d340 <memp_malloc+0x48>)
 800d31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff ffb6 	bl	800d294 <do_memp_malloc_pool>
 800d328:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d32a:	68fb      	ldr	r3, [r7, #12]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	080199b4 	.word	0x080199b4
 800d338:	08019a44 	.word	0x08019a44
 800d33c:	08019a08 	.word	0x08019a08
 800d340:	0801c1d4 	.word	0x0801c1d4

0800d344 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	f003 0303 	and.w	r3, r3, #3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d006      	beq.n	800d366 <do_memp_free_pool+0x22>
 800d358:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <do_memp_free_pool+0x4c>)
 800d35a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d35e:	490d      	ldr	r1, [pc, #52]	; (800d394 <do_memp_free_pool+0x50>)
 800d360:	480d      	ldr	r0, [pc, #52]	; (800d398 <do_memp_free_pool+0x54>)
 800d362:	f00a fc67 	bl	8017c34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d36a:	f00a faa9 	bl	80178c0 <sys_arch_protect>
 800d36e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d382:	68b8      	ldr	r0, [r7, #8]
 800d384:	f00a faaa 	bl	80178dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d388:	bf00      	nop
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	080199b4 	.word	0x080199b4
 800d394:	08019a64 	.word	0x08019a64
 800d398:	08019a08 	.word	0x08019a08

0800d39c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	6039      	str	r1, [r7, #0]
 800d3a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	2b0c      	cmp	r3, #12
 800d3ac:	d907      	bls.n	800d3be <memp_free+0x22>
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <memp_free+0x44>)
 800d3b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d3b4:	490b      	ldr	r1, [pc, #44]	; (800d3e4 <memp_free+0x48>)
 800d3b6:	480c      	ldr	r0, [pc, #48]	; (800d3e8 <memp_free+0x4c>)
 800d3b8:	f00a fc3c 	bl	8017c34 <iprintf>
 800d3bc:	e00c      	b.n	800d3d8 <memp_free+0x3c>

  if (mem == NULL) {
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d008      	beq.n	800d3d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	4a09      	ldr	r2, [pc, #36]	; (800d3ec <memp_free+0x50>)
 800d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff ffb8 	bl	800d344 <do_memp_free_pool>
 800d3d4:	e000      	b.n	800d3d8 <memp_free+0x3c>
    return;
 800d3d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	080199b4 	.word	0x080199b4
 800d3e4:	08019a84 	.word	0x08019a84
 800d3e8:	08019a08 	.word	0x08019a08
 800d3ec:	0801c1d4 	.word	0x0801c1d4

0800d3f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d3f4:	bf00      	nop
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
	...

0800d400 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d108      	bne.n	800d426 <netif_add+0x26>
 800d414:	4b57      	ldr	r3, [pc, #348]	; (800d574 <netif_add+0x174>)
 800d416:	f240 1227 	movw	r2, #295	; 0x127
 800d41a:	4957      	ldr	r1, [pc, #348]	; (800d578 <netif_add+0x178>)
 800d41c:	4857      	ldr	r0, [pc, #348]	; (800d57c <netif_add+0x17c>)
 800d41e:	f00a fc09 	bl	8017c34 <iprintf>
 800d422:	2300      	movs	r3, #0
 800d424:	e0a2      	b.n	800d56c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d108      	bne.n	800d43e <netif_add+0x3e>
 800d42c:	4b51      	ldr	r3, [pc, #324]	; (800d574 <netif_add+0x174>)
 800d42e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d432:	4953      	ldr	r1, [pc, #332]	; (800d580 <netif_add+0x180>)
 800d434:	4851      	ldr	r0, [pc, #324]	; (800d57c <netif_add+0x17c>)
 800d436:	f00a fbfd 	bl	8017c34 <iprintf>
 800d43a:	2300      	movs	r3, #0
 800d43c:	e096      	b.n	800d56c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d444:	4b4f      	ldr	r3, [pc, #316]	; (800d584 <netif_add+0x184>)
 800d446:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d44e:	4b4d      	ldr	r3, [pc, #308]	; (800d584 <netif_add+0x184>)
 800d450:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d458:	4b4a      	ldr	r3, [pc, #296]	; (800d584 <netif_add+0x184>)
 800d45a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4a45      	ldr	r2, [pc, #276]	; (800d588 <netif_add+0x188>)
 800d472:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2200      	movs	r2, #0
 800d478:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6a3a      	ldr	r2, [r7, #32]
 800d48c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d48e:	4b3f      	ldr	r3, [pc, #252]	; (800d58c <netif_add+0x18c>)
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d49c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f000 f913 	bl	800d6d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	4798      	blx	r3
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <netif_add+0xba>
    return NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e058      	b.n	800d56c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4c0:	2bff      	cmp	r3, #255	; 0xff
 800d4c2:	d103      	bne.n	800d4cc <netif_add+0xcc>
        netif->num = 0;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4d0:	4b2f      	ldr	r3, [pc, #188]	; (800d590 <netif_add+0x190>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	617b      	str	r3, [r7, #20]
 800d4d6:	e02b      	b.n	800d530 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d106      	bne.n	800d4ee <netif_add+0xee>
 800d4e0:	4b24      	ldr	r3, [pc, #144]	; (800d574 <netif_add+0x174>)
 800d4e2:	f240 128b 	movw	r2, #395	; 0x18b
 800d4e6:	492b      	ldr	r1, [pc, #172]	; (800d594 <netif_add+0x194>)
 800d4e8:	4824      	ldr	r0, [pc, #144]	; (800d57c <netif_add+0x17c>)
 800d4ea:	f00a fba3 	bl	8017c34 <iprintf>
        num_netifs++;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	2bff      	cmp	r3, #255	; 0xff
 800d4f8:	dd06      	ble.n	800d508 <netif_add+0x108>
 800d4fa:	4b1e      	ldr	r3, [pc, #120]	; (800d574 <netif_add+0x174>)
 800d4fc:	f240 128d 	movw	r2, #397	; 0x18d
 800d500:	4925      	ldr	r1, [pc, #148]	; (800d598 <netif_add+0x198>)
 800d502:	481e      	ldr	r0, [pc, #120]	; (800d57c <netif_add+0x17c>)
 800d504:	f00a fb96 	bl	8017c34 <iprintf>
        if (netif2->num == netif->num) {
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d514:	429a      	cmp	r2, r3
 800d516:	d108      	bne.n	800d52a <netif_add+0x12a>
          netif->num++;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d51e:	3301      	adds	r3, #1
 800d520:	b2da      	uxtb	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d528:	e005      	b.n	800d536 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1d0      	bne.n	800d4d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1be      	bne.n	800d4ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d542:	2bfe      	cmp	r3, #254	; 0xfe
 800d544:	d103      	bne.n	800d54e <netif_add+0x14e>
    netif_num = 0;
 800d546:	4b11      	ldr	r3, [pc, #68]	; (800d58c <netif_add+0x18c>)
 800d548:	2200      	movs	r2, #0
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	e006      	b.n	800d55c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d554:	3301      	adds	r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <netif_add+0x18c>)
 800d55a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d55c:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <netif_add+0x190>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d564:	4a0a      	ldr	r2, [pc, #40]	; (800d590 <netif_add+0x190>)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d56a:	68fb      	ldr	r3, [r7, #12]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	08019aa0 	.word	0x08019aa0
 800d578:	08019b34 	.word	0x08019b34
 800d57c:	08019af0 	.word	0x08019af0
 800d580:	08019b50 	.word	0x08019b50
 800d584:	0801c248 	.word	0x0801c248
 800d588:	0800d9ab 	.word	0x0800d9ab
 800d58c:	20004aec 	.word	0x20004aec
 800d590:	2000b704 	.word	0x2000b704
 800d594:	08019b74 	.word	0x08019b74
 800d598:	08019b88 	.word	0x08019b88

0800d59c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f002 fe4f 	bl	801024c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f007 fcfd 	bl	8014fb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
	...

0800d5c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <netif_do_set_ipaddr+0x20>
 800d5d2:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <netif_do_set_ipaddr+0x88>)
 800d5d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d5d8:	491c      	ldr	r1, [pc, #112]	; (800d64c <netif_do_set_ipaddr+0x8c>)
 800d5da:	481d      	ldr	r0, [pc, #116]	; (800d650 <netif_do_set_ipaddr+0x90>)
 800d5dc:	f00a fb2a 	bl	8017c34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d106      	bne.n	800d5f4 <netif_do_set_ipaddr+0x34>
 800d5e6:	4b18      	ldr	r3, [pc, #96]	; (800d648 <netif_do_set_ipaddr+0x88>)
 800d5e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d5ec:	4917      	ldr	r1, [pc, #92]	; (800d64c <netif_do_set_ipaddr+0x8c>)
 800d5ee:	4818      	ldr	r0, [pc, #96]	; (800d650 <netif_do_set_ipaddr+0x90>)
 800d5f0:	f00a fb20 	bl	8017c34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d01c      	beq.n	800d63c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3304      	adds	r3, #4
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d612:	f107 0314 	add.w	r3, r7, #20
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff ffbf 	bl	800d59c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <netif_do_set_ipaddr+0x6a>
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	e000      	b.n	800d62c <netif_do_set_ipaddr+0x6c>
 800d62a:	2300      	movs	r3, #0
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d630:	2101      	movs	r1, #1
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f000 f8d2 	bl	800d7dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d638:	2301      	movs	r3, #1
 800d63a:	e000      	b.n	800d63e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d63c:	2300      	movs	r3, #0
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	08019aa0 	.word	0x08019aa0
 800d64c:	08019bb8 	.word	0x08019bb8
 800d650:	08019af0 	.word	0x08019af0

0800d654 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3308      	adds	r3, #8
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d00a      	beq.n	800d684 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <netif_do_set_netmask+0x26>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	e000      	b.n	800d67c <netif_do_set_netmask+0x28>
 800d67a:	2300      	movs	r3, #0
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d692:	b480      	push	{r7}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	330c      	adds	r3, #12
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d00a      	beq.n	800d6c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <netif_do_set_gw+0x26>
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	e000      	b.n	800d6ba <netif_do_set_gw+0x28>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e000      	b.n	800d6c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b088      	sub	sp, #32
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d6ec:	4b1c      	ldr	r3, [pc, #112]	; (800d760 <netif_set_addr+0x90>)
 800d6ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d6f6:	4b1a      	ldr	r3, [pc, #104]	; (800d760 <netif_set_addr+0x90>)
 800d6f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d700:	4b17      	ldr	r3, [pc, #92]	; (800d760 <netif_set_addr+0x90>)
 800d702:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <netif_set_addr+0x42>
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <netif_set_addr+0x46>
 800d712:	2301      	movs	r3, #1
 800d714:	e000      	b.n	800d718 <netif_set_addr+0x48>
 800d716:	2300      	movs	r3, #0
 800d718:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d006      	beq.n	800d72e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d720:	f107 0310 	add.w	r3, r7, #16
 800d724:	461a      	mov	r2, r3
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff ff49 	bl	800d5c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f7ff ff8e 	bl	800d654 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff ffa8 	bl	800d692 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d106      	bne.n	800d756 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d748:	f107 0310 	add.w	r3, r7, #16
 800d74c:	461a      	mov	r2, r3
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff ff35 	bl	800d5c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d756:	bf00      	nop
 800d758:	3720      	adds	r7, #32
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	0801c248 	.word	0x0801c248

0800d764 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d76c:	4a04      	ldr	r2, [pc, #16]	; (800d780 <netif_set_default+0x1c>)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	2000b708 	.word	0x2000b708

0800d784 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d107      	bne.n	800d7a2 <netif_set_up+0x1e>
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <netif_set_up+0x4c>)
 800d794:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d798:	490e      	ldr	r1, [pc, #56]	; (800d7d4 <netif_set_up+0x50>)
 800d79a:	480f      	ldr	r0, [pc, #60]	; (800d7d8 <netif_set_up+0x54>)
 800d79c:	f00a fa4a 	bl	8017c34 <iprintf>
 800d7a0:	e013      	b.n	800d7ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10c      	bne.n	800d7ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d7c2:	2103      	movs	r1, #3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f809 	bl	800d7dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	08019aa0 	.word	0x08019aa0
 800d7d4:	08019c28 	.word	0x08019c28
 800d7d8:	08019af0 	.word	0x08019af0

0800d7dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <netif_issue_reports+0x20>
 800d7ee:	4b18      	ldr	r3, [pc, #96]	; (800d850 <netif_issue_reports+0x74>)
 800d7f0:	f240 326d 	movw	r2, #877	; 0x36d
 800d7f4:	4917      	ldr	r1, [pc, #92]	; (800d854 <netif_issue_reports+0x78>)
 800d7f6:	4818      	ldr	r0, [pc, #96]	; (800d858 <netif_issue_reports+0x7c>)
 800d7f8:	f00a fa1c 	bl	8017c34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d802:	f003 0304 	and.w	r3, r3, #4
 800d806:	2b00      	cmp	r3, #0
 800d808:	d01e      	beq.n	800d848 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d810:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d814:	2b00      	cmp	r3, #0
 800d816:	d017      	beq.n	800d848 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d013      	beq.n	800d84a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3304      	adds	r3, #4
 800d826:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00e      	beq.n	800d84a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d007      	beq.n	800d84a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4619      	mov	r1, r3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f008 fb1f 	bl	8015e84 <etharp_request>
 800d846:	e000      	b.n	800d84a <netif_issue_reports+0x6e>
    return;
 800d848:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	08019aa0 	.word	0x08019aa0
 800d854:	08019c44 	.word	0x08019c44
 800d858:	08019af0 	.word	0x08019af0

0800d85c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d107      	bne.n	800d87a <netif_set_down+0x1e>
 800d86a:	4b12      	ldr	r3, [pc, #72]	; (800d8b4 <netif_set_down+0x58>)
 800d86c:	f240 329b 	movw	r2, #923	; 0x39b
 800d870:	4911      	ldr	r1, [pc, #68]	; (800d8b8 <netif_set_down+0x5c>)
 800d872:	4812      	ldr	r0, [pc, #72]	; (800d8bc <netif_set_down+0x60>)
 800d874:	f00a f9de 	bl	8017c34 <iprintf>
 800d878:	e019      	b.n	800d8ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	d012      	beq.n	800d8ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d88e:	f023 0301 	bic.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8a0:	f003 0308 	and.w	r3, r3, #8
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f007 fea9 	bl	8015600 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	08019aa0 	.word	0x08019aa0
 800d8b8:	08019c68 	.word	0x08019c68
 800d8bc:	08019af0 	.word	0x08019af0

0800d8c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d107      	bne.n	800d8de <netif_set_link_up+0x1e>
 800d8ce:	4b13      	ldr	r3, [pc, #76]	; (800d91c <netif_set_link_up+0x5c>)
 800d8d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d8d4:	4912      	ldr	r1, [pc, #72]	; (800d920 <netif_set_link_up+0x60>)
 800d8d6:	4813      	ldr	r0, [pc, #76]	; (800d924 <netif_set_link_up+0x64>)
 800d8d8:	f00a f9ac 	bl	8017c34 <iprintf>
 800d8dc:	e01b      	b.n	800d916 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8e4:	f003 0304 	and.w	r3, r3, #4
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d114      	bne.n	800d916 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8f2:	f043 0304 	orr.w	r3, r3, #4
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d8fe:	2103      	movs	r1, #3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff6b 	bl	800d7dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <netif_set_link_up+0x56>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	08019aa0 	.word	0x08019aa0
 800d920:	08019c88 	.word	0x08019c88
 800d924:	08019af0 	.word	0x08019af0

0800d928 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d107      	bne.n	800d946 <netif_set_link_down+0x1e>
 800d936:	4b11      	ldr	r3, [pc, #68]	; (800d97c <netif_set_link_down+0x54>)
 800d938:	f240 4206 	movw	r2, #1030	; 0x406
 800d93c:	4910      	ldr	r1, [pc, #64]	; (800d980 <netif_set_link_down+0x58>)
 800d93e:	4811      	ldr	r0, [pc, #68]	; (800d984 <netif_set_link_down+0x5c>)
 800d940:	f00a f978 	bl	8017c34 <iprintf>
 800d944:	e017      	b.n	800d976 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d010      	beq.n	800d976 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d95a:	f023 0304 	bic.w	r3, r3, #4
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <netif_set_link_down+0x4e>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	08019aa0 	.word	0x08019aa0
 800d980:	08019cac 	.word	0x08019cac
 800d984:	08019af0 	.word	0x08019af0

0800d988 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	61da      	str	r2, [r3, #28]
  }
}
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	60b9      	str	r1, [r7, #8]
 800d9b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d9b6:	f06f 030b 	mvn.w	r3, #11
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
	...

0800d9c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d013      	beq.n	800da00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d9d8:	4b0d      	ldr	r3, [pc, #52]	; (800da10 <netif_get_by_index+0x48>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	e00c      	b.n	800d9fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	79fa      	ldrb	r2, [r7, #7]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d101      	bne.n	800d9f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	e006      	b.n	800da02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1ef      	bne.n	800d9e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	2000b704 	.word	0x2000b704

0800da14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800da1a:	f009 ff51 	bl	80178c0 <sys_arch_protect>
 800da1e:	6038      	str	r0, [r7, #0]
 800da20:	4b0d      	ldr	r3, [pc, #52]	; (800da58 <pbuf_free_ooseq+0x44>)
 800da22:	2200      	movs	r2, #0
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	6838      	ldr	r0, [r7, #0]
 800da28:	f009 ff58 	bl	80178dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da2c:	4b0b      	ldr	r3, [pc, #44]	; (800da5c <pbuf_free_ooseq+0x48>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	e00a      	b.n	800da4a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d003      	beq.n	800da44 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f002 fc43 	bl	80102c8 <tcp_free_ooseq>
      return;
 800da42:	e005      	b.n	800da50 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	607b      	str	r3, [r7, #4]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1f1      	bne.n	800da34 <pbuf_free_ooseq+0x20>
    }
  }
}
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	2000b70c 	.word	0x2000b70c
 800da5c:	2000b714 	.word	0x2000b714

0800da60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800da68:	f7ff ffd4 	bl	800da14 <pbuf_free_ooseq>
}
 800da6c:	bf00      	nop
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800da7a:	f009 ff21 	bl	80178c0 <sys_arch_protect>
 800da7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800da80:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <pbuf_pool_is_empty+0x4c>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800da86:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <pbuf_pool_is_empty+0x4c>)
 800da88:	2201      	movs	r2, #1
 800da8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f009 ff25 	bl	80178dc <sys_arch_unprotect>

  if (!queued) {
 800da92:	78fb      	ldrb	r3, [r7, #3]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10f      	bne.n	800dab8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800da98:	2100      	movs	r1, #0
 800da9a:	480a      	ldr	r0, [pc, #40]	; (800dac4 <pbuf_pool_is_empty+0x50>)
 800da9c:	f7fe fed6 	bl	800c84c <tcpip_try_callback>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d008      	beq.n	800dab8 <pbuf_pool_is_empty+0x44>
 800daa6:	f009 ff0b 	bl	80178c0 <sys_arch_protect>
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <pbuf_pool_is_empty+0x4c>)
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f009 ff12 	bl	80178dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dab8:	bf00      	nop
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	2000b70c 	.word	0x2000b70c
 800dac4:	0800da61 	.word	0x0800da61

0800dac8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	4611      	mov	r1, r2
 800dad4:	461a      	mov	r2, r3
 800dad6:	460b      	mov	r3, r1
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	4613      	mov	r3, r2
 800dadc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	88fa      	ldrh	r2, [r7, #6]
 800daee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	88ba      	ldrh	r2, [r7, #4]
 800daf4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800daf6:	8b3b      	ldrh	r3, [r7, #24]
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	7f3a      	ldrb	r2, [r7, #28]
 800db02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	73da      	strb	r2, [r3, #15]
}
 800db10:	bf00      	nop
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08c      	sub	sp, #48	; 0x30
 800db20:	af02      	add	r7, sp, #8
 800db22:	4603      	mov	r3, r0
 800db24:	71fb      	strb	r3, [r7, #7]
 800db26:	460b      	mov	r3, r1
 800db28:	80bb      	strh	r3, [r7, #4]
 800db2a:	4613      	mov	r3, r2
 800db2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800db32:	887b      	ldrh	r3, [r7, #2]
 800db34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800db38:	d07f      	beq.n	800dc3a <pbuf_alloc+0x11e>
 800db3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800db3e:	f300 80c8 	bgt.w	800dcd2 <pbuf_alloc+0x1b6>
 800db42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800db46:	d010      	beq.n	800db6a <pbuf_alloc+0x4e>
 800db48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800db4c:	f300 80c1 	bgt.w	800dcd2 <pbuf_alloc+0x1b6>
 800db50:	2b01      	cmp	r3, #1
 800db52:	d002      	beq.n	800db5a <pbuf_alloc+0x3e>
 800db54:	2b41      	cmp	r3, #65	; 0x41
 800db56:	f040 80bc 	bne.w	800dcd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800db5a:	887a      	ldrh	r2, [r7, #2]
 800db5c:	88bb      	ldrh	r3, [r7, #4]
 800db5e:	4619      	mov	r1, r3
 800db60:	2000      	movs	r0, #0
 800db62:	f000 f8d1 	bl	800dd08 <pbuf_alloc_reference>
 800db66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800db68:	e0bd      	b.n	800dce6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800db72:	88bb      	ldrh	r3, [r7, #4]
 800db74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800db76:	200c      	movs	r0, #12
 800db78:	f7ff fbbe 	bl	800d2f8 <memp_malloc>
 800db7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d109      	bne.n	800db98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800db84:	f7ff ff76 	bl	800da74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <pbuf_alloc+0x78>
            pbuf_free(p);
 800db8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db90:	f000 faa8 	bl	800e0e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	e0a7      	b.n	800dce8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800db98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db9a:	3303      	adds	r3, #3
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	f023 0303 	bic.w	r3, r3, #3
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	8b7a      	ldrh	r2, [r7, #26]
 800dbac:	4293      	cmp	r3, r2
 800dbae:	bf28      	it	cs
 800dbb0:	4613      	movcs	r3, r2
 800dbb2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dbb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	4413      	add	r3, r2
 800dbbc:	3303      	adds	r3, #3
 800dbbe:	f023 0303 	bic.w	r3, r3, #3
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	89f9      	ldrh	r1, [r7, #14]
 800dbc6:	8b7a      	ldrh	r2, [r7, #26]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	887b      	ldrh	r3, [r7, #2]
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6938      	ldr	r0, [r7, #16]
 800dbd6:	f7ff ff77 	bl	800dac8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d006      	beq.n	800dbf4 <pbuf_alloc+0xd8>
 800dbe6:	4b42      	ldr	r3, [pc, #264]	; (800dcf0 <pbuf_alloc+0x1d4>)
 800dbe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbec:	4941      	ldr	r1, [pc, #260]	; (800dcf4 <pbuf_alloc+0x1d8>)
 800dbee:	4842      	ldr	r0, [pc, #264]	; (800dcf8 <pbuf_alloc+0x1dc>)
 800dbf0:	f00a f820 	bl	8017c34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dbf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbf6:	3303      	adds	r3, #3
 800dbf8:	f023 0303 	bic.w	r3, r3, #3
 800dbfc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dc00:	d106      	bne.n	800dc10 <pbuf_alloc+0xf4>
 800dc02:	4b3b      	ldr	r3, [pc, #236]	; (800dcf0 <pbuf_alloc+0x1d4>)
 800dc04:	f44f 7281 	mov.w	r2, #258	; 0x102
 800dc08:	493c      	ldr	r1, [pc, #240]	; (800dcfc <pbuf_alloc+0x1e0>)
 800dc0a:	483b      	ldr	r0, [pc, #236]	; (800dcf8 <pbuf_alloc+0x1dc>)
 800dc0c:	f00a f812 	bl	8017c34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	627b      	str	r3, [r7, #36]	; 0x24
 800dc1a:	e002      	b.n	800dc22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dc26:	8b7a      	ldrh	r2, [r7, #26]
 800dc28:	89fb      	ldrh	r3, [r7, #14]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dc32:	8b7b      	ldrh	r3, [r7, #26]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d19e      	bne.n	800db76 <pbuf_alloc+0x5a>
      break;
 800dc38:	e055      	b.n	800dce6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dc3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc3c:	3303      	adds	r3, #3
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	f023 0303 	bic.w	r3, r3, #3
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	88bb      	ldrh	r3, [r7, #4]
 800dc48:	3303      	adds	r3, #3
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	f023 0303 	bic.w	r3, r3, #3
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	4413      	add	r3, r2
 800dc54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dc56:	8b3b      	ldrh	r3, [r7, #24]
 800dc58:	3310      	adds	r3, #16
 800dc5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc5c:	8b3a      	ldrh	r2, [r7, #24]
 800dc5e:	88bb      	ldrh	r3, [r7, #4]
 800dc60:	3303      	adds	r3, #3
 800dc62:	f023 0303 	bic.w	r3, r3, #3
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d306      	bcc.n	800dc78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dc6a:	8afa      	ldrh	r2, [r7, #22]
 800dc6c:	88bb      	ldrh	r3, [r7, #4]
 800dc6e:	3303      	adds	r3, #3
 800dc70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d201      	bcs.n	800dc7c <pbuf_alloc+0x160>
        return NULL;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e035      	b.n	800dce8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dc7c:	8afb      	ldrh	r3, [r7, #22]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff f9b8 	bl	800cff4 <mem_malloc>
 800dc84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <pbuf_alloc+0x174>
        return NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	e02b      	b.n	800dce8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dc90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc92:	3310      	adds	r3, #16
 800dc94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc96:	4413      	add	r3, r2
 800dc98:	3303      	adds	r3, #3
 800dc9a:	f023 0303 	bic.w	r3, r3, #3
 800dc9e:	4618      	mov	r0, r3
 800dca0:	88b9      	ldrh	r1, [r7, #4]
 800dca2:	88ba      	ldrh	r2, [r7, #4]
 800dca4:	2300      	movs	r3, #0
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	887b      	ldrh	r3, [r7, #2]
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	460b      	mov	r3, r1
 800dcae:	4601      	mov	r1, r0
 800dcb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcb2:	f7ff ff09 	bl	800dac8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f003 0303 	and.w	r3, r3, #3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d010      	beq.n	800dce4 <pbuf_alloc+0x1c8>
 800dcc2:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <pbuf_alloc+0x1d4>)
 800dcc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dcc8:	490d      	ldr	r1, [pc, #52]	; (800dd00 <pbuf_alloc+0x1e4>)
 800dcca:	480b      	ldr	r0, [pc, #44]	; (800dcf8 <pbuf_alloc+0x1dc>)
 800dccc:	f009 ffb2 	bl	8017c34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dcd0:	e008      	b.n	800dce4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dcd2:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <pbuf_alloc+0x1d4>)
 800dcd4:	f240 1227 	movw	r2, #295	; 0x127
 800dcd8:	490a      	ldr	r1, [pc, #40]	; (800dd04 <pbuf_alloc+0x1e8>)
 800dcda:	4807      	ldr	r0, [pc, #28]	; (800dcf8 <pbuf_alloc+0x1dc>)
 800dcdc:	f009 ffaa 	bl	8017c34 <iprintf>
      return NULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	e001      	b.n	800dce8 <pbuf_alloc+0x1cc>
      break;
 800dce4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3728      	adds	r7, #40	; 0x28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08019cd0 	.word	0x08019cd0
 800dcf4:	08019d00 	.word	0x08019d00
 800dcf8:	08019d30 	.word	0x08019d30
 800dcfc:	08019d58 	.word	0x08019d58
 800dd00:	08019d8c 	.word	0x08019d8c
 800dd04:	08019db8 	.word	0x08019db8

0800dd08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af02      	add	r7, sp, #8
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	807b      	strh	r3, [r7, #2]
 800dd14:	4613      	mov	r3, r2
 800dd16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dd18:	883b      	ldrh	r3, [r7, #0]
 800dd1a:	2b41      	cmp	r3, #65	; 0x41
 800dd1c:	d009      	beq.n	800dd32 <pbuf_alloc_reference+0x2a>
 800dd1e:	883b      	ldrh	r3, [r7, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d006      	beq.n	800dd32 <pbuf_alloc_reference+0x2a>
 800dd24:	4b0f      	ldr	r3, [pc, #60]	; (800dd64 <pbuf_alloc_reference+0x5c>)
 800dd26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dd2a:	490f      	ldr	r1, [pc, #60]	; (800dd68 <pbuf_alloc_reference+0x60>)
 800dd2c:	480f      	ldr	r0, [pc, #60]	; (800dd6c <pbuf_alloc_reference+0x64>)
 800dd2e:	f009 ff81 	bl	8017c34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dd32:	200b      	movs	r0, #11
 800dd34:	f7ff fae0 	bl	800d2f8 <memp_malloc>
 800dd38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dd40:	2300      	movs	r3, #0
 800dd42:	e00b      	b.n	800dd5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dd44:	8879      	ldrh	r1, [r7, #2]
 800dd46:	887a      	ldrh	r2, [r7, #2]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	883b      	ldrh	r3, [r7, #0]
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	460b      	mov	r3, r1
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff feb7 	bl	800dac8 <pbuf_init_alloced_pbuf>
  return p;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	08019cd0 	.word	0x08019cd0
 800dd68:	08019dd4 	.word	0x08019dd4
 800dd6c:	08019d30 	.word	0x08019d30

0800dd70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b088      	sub	sp, #32
 800dd74:	af02      	add	r7, sp, #8
 800dd76:	607b      	str	r3, [r7, #4]
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73fb      	strb	r3, [r7, #15]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	81bb      	strh	r3, [r7, #12]
 800dd80:	4613      	mov	r3, r2
 800dd82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
 800dd86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dd88:	8a7b      	ldrh	r3, [r7, #18]
 800dd8a:	3303      	adds	r3, #3
 800dd8c:	f023 0203 	bic.w	r2, r3, #3
 800dd90:	89bb      	ldrh	r3, [r7, #12]
 800dd92:	441a      	add	r2, r3
 800dd94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d901      	bls.n	800dd9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e018      	b.n	800ddd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d007      	beq.n	800ddb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dda4:	8a7b      	ldrh	r3, [r7, #18]
 800dda6:	3303      	adds	r3, #3
 800dda8:	f023 0303 	bic.w	r3, r3, #3
 800ddac:	6a3a      	ldr	r2, [r7, #32]
 800ddae:	4413      	add	r3, r2
 800ddb0:	617b      	str	r3, [r7, #20]
 800ddb2:	e001      	b.n	800ddb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	89b9      	ldrh	r1, [r7, #12]
 800ddbc:	89ba      	ldrh	r2, [r7, #12]
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	897b      	ldrh	r3, [r7, #10]
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	6979      	ldr	r1, [r7, #20]
 800ddca:	f7ff fe7d 	bl	800dac8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ddce:	687b      	ldr	r3, [r7, #4]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <pbuf_realloc+0x20>
 800ddea:	4b3a      	ldr	r3, [pc, #232]	; (800ded4 <pbuf_realloc+0xfc>)
 800ddec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ddf0:	4939      	ldr	r1, [pc, #228]	; (800ded8 <pbuf_realloc+0x100>)
 800ddf2:	483a      	ldr	r0, [pc, #232]	; (800dedc <pbuf_realloc+0x104>)
 800ddf4:	f009 ff1e 	bl	8017c34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	891b      	ldrh	r3, [r3, #8]
 800ddfc:	887a      	ldrh	r2, [r7, #2]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d263      	bcs.n	800deca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	891a      	ldrh	r2, [r3, #8]
 800de06:	887b      	ldrh	r3, [r7, #2]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800de0c:	887b      	ldrh	r3, [r7, #2]
 800de0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800de14:	e018      	b.n	800de48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	895b      	ldrh	r3, [r3, #10]
 800de1a:	897a      	ldrh	r2, [r7, #10]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	891a      	ldrh	r2, [r3, #8]
 800de24:	893b      	ldrh	r3, [r7, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	b29a      	uxth	r2, r3
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <pbuf_realloc+0x70>
 800de3a:	4b26      	ldr	r3, [pc, #152]	; (800ded4 <pbuf_realloc+0xfc>)
 800de3c:	f240 12af 	movw	r2, #431	; 0x1af
 800de40:	4927      	ldr	r1, [pc, #156]	; (800dee0 <pbuf_realloc+0x108>)
 800de42:	4826      	ldr	r0, [pc, #152]	; (800dedc <pbuf_realloc+0x104>)
 800de44:	f009 fef6 	bl	8017c34 <iprintf>
  while (rem_len > q->len) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	895b      	ldrh	r3, [r3, #10]
 800de4c:	897a      	ldrh	r2, [r7, #10]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d8e1      	bhi.n	800de16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	7b1b      	ldrb	r3, [r3, #12]
 800de56:	f003 030f 	and.w	r3, r3, #15
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d121      	bne.n	800dea2 <pbuf_realloc+0xca>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	895b      	ldrh	r3, [r3, #10]
 800de62:	897a      	ldrh	r2, [r7, #10]
 800de64:	429a      	cmp	r2, r3
 800de66:	d01c      	beq.n	800dea2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	7b5b      	ldrb	r3, [r3, #13]
 800de6c:	f003 0302 	and.w	r3, r3, #2
 800de70:	2b00      	cmp	r3, #0
 800de72:	d116      	bne.n	800dea2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	897b      	ldrh	r3, [r7, #10]
 800de80:	4413      	add	r3, r2
 800de82:	b29b      	uxth	r3, r3
 800de84:	4619      	mov	r1, r3
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7fe ffaa 	bl	800cde0 <mem_trim>
 800de8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <pbuf_realloc+0xca>
 800de94:	4b0f      	ldr	r3, [pc, #60]	; (800ded4 <pbuf_realloc+0xfc>)
 800de96:	f240 12bd 	movw	r2, #445	; 0x1bd
 800de9a:	4912      	ldr	r1, [pc, #72]	; (800dee4 <pbuf_realloc+0x10c>)
 800de9c:	480f      	ldr	r0, [pc, #60]	; (800dedc <pbuf_realloc+0x104>)
 800de9e:	f009 fec9 	bl	8017c34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	897a      	ldrh	r2, [r7, #10]
 800dea6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	895a      	ldrh	r2, [r3, #10]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d004      	beq.n	800dec2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f000 f911 	bl	800e0e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	e000      	b.n	800decc <pbuf_realloc+0xf4>
    return;
 800deca:	bf00      	nop

}
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	08019cd0 	.word	0x08019cd0
 800ded8:	08019de8 	.word	0x08019de8
 800dedc:	08019d30 	.word	0x08019d30
 800dee0:	08019e00 	.word	0x08019e00
 800dee4:	08019e18 	.word	0x08019e18

0800dee8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	4613      	mov	r3, r2
 800def4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <pbuf_add_header_impl+0x22>
 800defc:	4b2b      	ldr	r3, [pc, #172]	; (800dfac <pbuf_add_header_impl+0xc4>)
 800defe:	f240 12df 	movw	r2, #479	; 0x1df
 800df02:	492b      	ldr	r1, [pc, #172]	; (800dfb0 <pbuf_add_header_impl+0xc8>)
 800df04:	482b      	ldr	r0, [pc, #172]	; (800dfb4 <pbuf_add_header_impl+0xcc>)
 800df06:	f009 fe95 	bl	8017c34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d003      	beq.n	800df18 <pbuf_add_header_impl+0x30>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df16:	d301      	bcc.n	800df1c <pbuf_add_header_impl+0x34>
    return 1;
 800df18:	2301      	movs	r3, #1
 800df1a:	e043      	b.n	800dfa4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <pbuf_add_header_impl+0x3e>
    return 0;
 800df22:	2300      	movs	r3, #0
 800df24:	e03e      	b.n	800dfa4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	891a      	ldrh	r2, [r3, #8]
 800df2e:	8a7b      	ldrh	r3, [r7, #18]
 800df30:	4413      	add	r3, r2
 800df32:	b29b      	uxth	r3, r3
 800df34:	8a7a      	ldrh	r2, [r7, #18]
 800df36:	429a      	cmp	r2, r3
 800df38:	d901      	bls.n	800df3e <pbuf_add_header_impl+0x56>
    return 1;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e032      	b.n	800dfa4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	7b1b      	ldrb	r3, [r3, #12]
 800df42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800df44:	8a3b      	ldrh	r3, [r7, #16]
 800df46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00c      	beq.n	800df68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	425b      	negs	r3, r3
 800df56:	4413      	add	r3, r2
 800df58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	3310      	adds	r3, #16
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	429a      	cmp	r2, r3
 800df62:	d20d      	bcs.n	800df80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800df64:	2301      	movs	r3, #1
 800df66:	e01d      	b.n	800dfa4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d006      	beq.n	800df7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	425b      	negs	r3, r3
 800df76:	4413      	add	r3, r2
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e001      	b.n	800df80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800df7c:	2301      	movs	r3, #1
 800df7e:	e011      	b.n	800dfa4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	895a      	ldrh	r2, [r3, #10]
 800df8a:	8a7b      	ldrh	r3, [r7, #18]
 800df8c:	4413      	add	r3, r2
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	891a      	ldrh	r2, [r3, #8]
 800df98:	8a7b      	ldrh	r3, [r7, #18]
 800df9a:	4413      	add	r3, r2
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	811a      	strh	r2, [r3, #8]


  return 0;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	08019cd0 	.word	0x08019cd0
 800dfb0:	08019e34 	.word	0x08019e34
 800dfb4:	08019d30 	.word	0x08019d30

0800dfb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff ff8e 	bl	800dee8 <pbuf_add_header_impl>
 800dfcc:	4603      	mov	r3, r0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
	...

0800dfd8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d106      	bne.n	800dff6 <pbuf_remove_header+0x1e>
 800dfe8:	4b20      	ldr	r3, [pc, #128]	; (800e06c <pbuf_remove_header+0x94>)
 800dfea:	f240 224b 	movw	r2, #587	; 0x24b
 800dfee:	4920      	ldr	r1, [pc, #128]	; (800e070 <pbuf_remove_header+0x98>)
 800dff0:	4820      	ldr	r0, [pc, #128]	; (800e074 <pbuf_remove_header+0x9c>)
 800dff2:	f009 fe1f 	bl	8017c34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d003      	beq.n	800e004 <pbuf_remove_header+0x2c>
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e002:	d301      	bcc.n	800e008 <pbuf_remove_header+0x30>
    return 1;
 800e004:	2301      	movs	r3, #1
 800e006:	e02c      	b.n	800e062 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <pbuf_remove_header+0x3a>
    return 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	e027      	b.n	800e062 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	895b      	ldrh	r3, [r3, #10]
 800e01a:	89fa      	ldrh	r2, [r7, #14]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d908      	bls.n	800e032 <pbuf_remove_header+0x5a>
 800e020:	4b12      	ldr	r3, [pc, #72]	; (800e06c <pbuf_remove_header+0x94>)
 800e022:	f240 2255 	movw	r2, #597	; 0x255
 800e026:	4914      	ldr	r1, [pc, #80]	; (800e078 <pbuf_remove_header+0xa0>)
 800e028:	4812      	ldr	r0, [pc, #72]	; (800e074 <pbuf_remove_header+0x9c>)
 800e02a:	f009 fe03 	bl	8017c34 <iprintf>
 800e02e:	2301      	movs	r3, #1
 800e030:	e017      	b.n	800e062 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	441a      	add	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	895a      	ldrh	r2, [r3, #10]
 800e048:	89fb      	ldrh	r3, [r7, #14]
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	891a      	ldrh	r2, [r3, #8]
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	08019cd0 	.word	0x08019cd0
 800e070:	08019e34 	.word	0x08019e34
 800e074:	08019d30 	.word	0x08019d30
 800e078:	08019e40 	.word	0x08019e40

0800e07c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	807b      	strh	r3, [r7, #2]
 800e088:	4613      	mov	r3, r2
 800e08a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e08c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e090:	2b00      	cmp	r3, #0
 800e092:	da08      	bge.n	800e0a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e094:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e098:	425b      	negs	r3, r3
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff ff9b 	bl	800dfd8 <pbuf_remove_header>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	e007      	b.n	800e0b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e0a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0aa:	787a      	ldrb	r2, [r7, #1]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff ff1a 	bl	800dee8 <pbuf_add_header_impl>
 800e0b4:	4603      	mov	r3, r0
  }
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e0ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7ff ffd2 	bl	800e07c <pbuf_header_impl>
 800e0d8:	4603      	mov	r3, r0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10b      	bne.n	800e10a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d106      	bne.n	800e106 <pbuf_free+0x22>
 800e0f8:	4b3b      	ldr	r3, [pc, #236]	; (800e1e8 <pbuf_free+0x104>)
 800e0fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e0fe:	493b      	ldr	r1, [pc, #236]	; (800e1ec <pbuf_free+0x108>)
 800e100:	483b      	ldr	r0, [pc, #236]	; (800e1f0 <pbuf_free+0x10c>)
 800e102:	f009 fd97 	bl	8017c34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e106:	2300      	movs	r3, #0
 800e108:	e069      	b.n	800e1de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e10e:	e062      	b.n	800e1d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e110:	f009 fbd6 	bl	80178c0 <sys_arch_protect>
 800e114:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7b9b      	ldrb	r3, [r3, #14]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <pbuf_free+0x48>
 800e11e:	4b32      	ldr	r3, [pc, #200]	; (800e1e8 <pbuf_free+0x104>)
 800e120:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e124:	4933      	ldr	r1, [pc, #204]	; (800e1f4 <pbuf_free+0x110>)
 800e126:	4832      	ldr	r0, [pc, #200]	; (800e1f0 <pbuf_free+0x10c>)
 800e128:	f009 fd84 	bl	8017c34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	7b9b      	ldrb	r3, [r3, #14]
 800e130:	3b01      	subs	r3, #1
 800e132:	b2da      	uxtb	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	739a      	strb	r2, [r3, #14]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	7b9b      	ldrb	r3, [r3, #14]
 800e13c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e13e:	69b8      	ldr	r0, [r7, #24]
 800e140:	f009 fbcc 	bl	80178dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e144:	7dfb      	ldrb	r3, [r7, #23]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d143      	bne.n	800e1d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7b1b      	ldrb	r3, [r3, #12]
 800e154:	f003 030f 	and.w	r3, r3, #15
 800e158:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	7b5b      	ldrb	r3, [r3, #13]
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b00      	cmp	r3, #0
 800e164:	d011      	beq.n	800e18a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <pbuf_free+0x9c>
 800e172:	4b1d      	ldr	r3, [pc, #116]	; (800e1e8 <pbuf_free+0x104>)
 800e174:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e178:	491f      	ldr	r1, [pc, #124]	; (800e1f8 <pbuf_free+0x114>)
 800e17a:	481d      	ldr	r0, [pc, #116]	; (800e1f0 <pbuf_free+0x10c>)
 800e17c:	f009 fd5a 	bl	8017c34 <iprintf>
        pc->custom_free_function(p);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	4798      	blx	r3
 800e188:	e01d      	b.n	800e1c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d104      	bne.n	800e19a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e190:	6879      	ldr	r1, [r7, #4]
 800e192:	200c      	movs	r0, #12
 800e194:	f7ff f902 	bl	800d39c <memp_free>
 800e198:	e015      	b.n	800e1c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d104      	bne.n	800e1aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e1a0:	6879      	ldr	r1, [r7, #4]
 800e1a2:	200b      	movs	r0, #11
 800e1a4:	f7ff f8fa 	bl	800d39c <memp_free>
 800e1a8:	e00d      	b.n	800e1c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d103      	bne.n	800e1b8 <pbuf_free+0xd4>
          mem_free(p);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7fe fd85 	bl	800ccc0 <mem_free>
 800e1b6:	e006      	b.n	800e1c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e1b8:	4b0b      	ldr	r3, [pc, #44]	; (800e1e8 <pbuf_free+0x104>)
 800e1ba:	f240 320f 	movw	r2, #783	; 0x30f
 800e1be:	490f      	ldr	r1, [pc, #60]	; (800e1fc <pbuf_free+0x118>)
 800e1c0:	480b      	ldr	r0, [pc, #44]	; (800e1f0 <pbuf_free+0x10c>)
 800e1c2:	f009 fd37 	bl	8017c34 <iprintf>
        }
      }
      count++;
 800e1c6:	7ffb      	ldrb	r3, [r7, #31]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	607b      	str	r3, [r7, #4]
 800e1d0:	e001      	b.n	800e1d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d199      	bne.n	800e110 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e1dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3720      	adds	r7, #32
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	08019cd0 	.word	0x08019cd0
 800e1ec:	08019e34 	.word	0x08019e34
 800e1f0:	08019d30 	.word	0x08019d30
 800e1f4:	08019e60 	.word	0x08019e60
 800e1f8:	08019e78 	.word	0x08019e78
 800e1fc:	08019e9c 	.word	0x08019e9c

0800e200 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e20c:	e005      	b.n	800e21a <pbuf_clen+0x1a>
    ++len;
 800e20e:	89fb      	ldrh	r3, [r7, #14]
 800e210:	3301      	adds	r3, #1
 800e212:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1f6      	bne.n	800e20e <pbuf_clen+0xe>
  }
  return len;
 800e220:	89fb      	ldrh	r3, [r7, #14]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
	...

0800e230 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d016      	beq.n	800e26c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e23e:	f009 fb3f 	bl	80178c0 <sys_arch_protect>
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	7b9b      	ldrb	r3, [r3, #14]
 800e248:	3301      	adds	r3, #1
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	739a      	strb	r2, [r3, #14]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f009 fb43 	bl	80178dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7b9b      	ldrb	r3, [r3, #14]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d106      	bne.n	800e26c <pbuf_ref+0x3c>
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <pbuf_ref+0x44>)
 800e260:	f240 3242 	movw	r2, #834	; 0x342
 800e264:	4904      	ldr	r1, [pc, #16]	; (800e278 <pbuf_ref+0x48>)
 800e266:	4805      	ldr	r0, [pc, #20]	; (800e27c <pbuf_ref+0x4c>)
 800e268:	f009 fce4 	bl	8017c34 <iprintf>
  }
}
 800e26c:	bf00      	nop
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	08019cd0 	.word	0x08019cd0
 800e278:	08019eb0 	.word	0x08019eb0
 800e27c:	08019d30 	.word	0x08019d30

0800e280 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <pbuf_cat+0x16>
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d107      	bne.n	800e2a6 <pbuf_cat+0x26>
 800e296:	4b20      	ldr	r3, [pc, #128]	; (800e318 <pbuf_cat+0x98>)
 800e298:	f240 3259 	movw	r2, #857	; 0x359
 800e29c:	491f      	ldr	r1, [pc, #124]	; (800e31c <pbuf_cat+0x9c>)
 800e29e:	4820      	ldr	r0, [pc, #128]	; (800e320 <pbuf_cat+0xa0>)
 800e2a0:	f009 fcc8 	bl	8017c34 <iprintf>
 800e2a4:	e034      	b.n	800e310 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	e00a      	b.n	800e2c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	891a      	ldrh	r2, [r3, #8]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	891b      	ldrh	r3, [r3, #8]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1f0      	bne.n	800e2ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	891a      	ldrh	r2, [r3, #8]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	895b      	ldrh	r3, [r3, #10]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d006      	beq.n	800e2e4 <pbuf_cat+0x64>
 800e2d6:	4b10      	ldr	r3, [pc, #64]	; (800e318 <pbuf_cat+0x98>)
 800e2d8:	f240 3262 	movw	r2, #866	; 0x362
 800e2dc:	4911      	ldr	r1, [pc, #68]	; (800e324 <pbuf_cat+0xa4>)
 800e2de:	4810      	ldr	r0, [pc, #64]	; (800e320 <pbuf_cat+0xa0>)
 800e2e0:	f009 fca8 	bl	8017c34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d006      	beq.n	800e2fa <pbuf_cat+0x7a>
 800e2ec:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <pbuf_cat+0x98>)
 800e2ee:	f240 3263 	movw	r2, #867	; 0x363
 800e2f2:	490d      	ldr	r1, [pc, #52]	; (800e328 <pbuf_cat+0xa8>)
 800e2f4:	480a      	ldr	r0, [pc, #40]	; (800e320 <pbuf_cat+0xa0>)
 800e2f6:	f009 fc9d 	bl	8017c34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	891a      	ldrh	r2, [r3, #8]
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	891b      	ldrh	r3, [r3, #8]
 800e302:	4413      	add	r3, r2
 800e304:	b29a      	uxth	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	08019cd0 	.word	0x08019cd0
 800e31c:	08019ec4 	.word	0x08019ec4
 800e320:	08019d30 	.word	0x08019d30
 800e324:	08019efc 	.word	0x08019efc
 800e328:	08019f2c 	.word	0x08019f2c

0800e32c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e336:	2300      	movs	r3, #0
 800e338:	617b      	str	r3, [r7, #20]
 800e33a:	2300      	movs	r3, #0
 800e33c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d008      	beq.n	800e356 <pbuf_copy+0x2a>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d005      	beq.n	800e356 <pbuf_copy+0x2a>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	891a      	ldrh	r2, [r3, #8]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	891b      	ldrh	r3, [r3, #8]
 800e352:	429a      	cmp	r2, r3
 800e354:	d209      	bcs.n	800e36a <pbuf_copy+0x3e>
 800e356:	4b57      	ldr	r3, [pc, #348]	; (800e4b4 <pbuf_copy+0x188>)
 800e358:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e35c:	4956      	ldr	r1, [pc, #344]	; (800e4b8 <pbuf_copy+0x18c>)
 800e35e:	4857      	ldr	r0, [pc, #348]	; (800e4bc <pbuf_copy+0x190>)
 800e360:	f009 fc68 	bl	8017c34 <iprintf>
 800e364:	f06f 030f 	mvn.w	r3, #15
 800e368:	e09f      	b.n	800e4aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	895b      	ldrh	r3, [r3, #10]
 800e36e:	461a      	mov	r2, r3
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	1ad2      	subs	r2, r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	4619      	mov	r1, r3
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	1acb      	subs	r3, r1, r3
 800e37e:	429a      	cmp	r2, r3
 800e380:	d306      	bcc.n	800e390 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	895b      	ldrh	r3, [r3, #10]
 800e386:	461a      	mov	r2, r3
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	60fb      	str	r3, [r7, #12]
 800e38e:	e005      	b.n	800e39c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	895b      	ldrh	r3, [r3, #10]
 800e394:	461a      	mov	r2, r3
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	1ad3      	subs	r3, r2, r3
 800e39a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	18d0      	adds	r0, r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	685a      	ldr	r2, [r3, #4]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	f009 fbcf 	bl	8017b52 <memcpy>
    offset_to += len;
 800e3b4:	697a      	ldr	r2, [r7, #20]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	895b      	ldrh	r3, [r3, #10]
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d906      	bls.n	800e3de <pbuf_copy+0xb2>
 800e3d0:	4b38      	ldr	r3, [pc, #224]	; (800e4b4 <pbuf_copy+0x188>)
 800e3d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e3d6:	493a      	ldr	r1, [pc, #232]	; (800e4c0 <pbuf_copy+0x194>)
 800e3d8:	4838      	ldr	r0, [pc, #224]	; (800e4bc <pbuf_copy+0x190>)
 800e3da:	f009 fc2b 	bl	8017c34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	895b      	ldrh	r3, [r3, #10]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d906      	bls.n	800e3f8 <pbuf_copy+0xcc>
 800e3ea:	4b32      	ldr	r3, [pc, #200]	; (800e4b4 <pbuf_copy+0x188>)
 800e3ec:	f240 32da 	movw	r2, #986	; 0x3da
 800e3f0:	4934      	ldr	r1, [pc, #208]	; (800e4c4 <pbuf_copy+0x198>)
 800e3f2:	4832      	ldr	r0, [pc, #200]	; (800e4bc <pbuf_copy+0x190>)
 800e3f4:	f009 fc1e 	bl	8017c34 <iprintf>
    if (offset_from >= p_from->len) {
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	895b      	ldrh	r3, [r3, #10]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	4293      	cmp	r3, r2
 800e402:	d304      	bcc.n	800e40e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895b      	ldrh	r3, [r3, #10]
 800e412:	461a      	mov	r2, r3
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	4293      	cmp	r3, r2
 800e418:	d114      	bne.n	800e444 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10c      	bne.n	800e444 <pbuf_copy+0x118>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d009      	beq.n	800e444 <pbuf_copy+0x118>
 800e430:	4b20      	ldr	r3, [pc, #128]	; (800e4b4 <pbuf_copy+0x188>)
 800e432:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e436:	4924      	ldr	r1, [pc, #144]	; (800e4c8 <pbuf_copy+0x19c>)
 800e438:	4820      	ldr	r0, [pc, #128]	; (800e4bc <pbuf_copy+0x190>)
 800e43a:	f009 fbfb 	bl	8017c34 <iprintf>
 800e43e:	f06f 030f 	mvn.w	r3, #15
 800e442:	e032      	b.n	800e4aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d013      	beq.n	800e472 <pbuf_copy+0x146>
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	895a      	ldrh	r2, [r3, #10]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	891b      	ldrh	r3, [r3, #8]
 800e452:	429a      	cmp	r2, r3
 800e454:	d10d      	bne.n	800e472 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d009      	beq.n	800e472 <pbuf_copy+0x146>
 800e45e:	4b15      	ldr	r3, [pc, #84]	; (800e4b4 <pbuf_copy+0x188>)
 800e460:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e464:	4919      	ldr	r1, [pc, #100]	; (800e4cc <pbuf_copy+0x1a0>)
 800e466:	4815      	ldr	r0, [pc, #84]	; (800e4bc <pbuf_copy+0x190>)
 800e468:	f009 fbe4 	bl	8017c34 <iprintf>
 800e46c:	f06f 0305 	mvn.w	r3, #5
 800e470:	e01b      	b.n	800e4aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d013      	beq.n	800e4a0 <pbuf_copy+0x174>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	895a      	ldrh	r2, [r3, #10]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	891b      	ldrh	r3, [r3, #8]
 800e480:	429a      	cmp	r2, r3
 800e482:	d10d      	bne.n	800e4a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d009      	beq.n	800e4a0 <pbuf_copy+0x174>
 800e48c:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <pbuf_copy+0x188>)
 800e48e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e492:	490e      	ldr	r1, [pc, #56]	; (800e4cc <pbuf_copy+0x1a0>)
 800e494:	4809      	ldr	r0, [pc, #36]	; (800e4bc <pbuf_copy+0x190>)
 800e496:	f009 fbcd 	bl	8017c34 <iprintf>
 800e49a:	f06f 0305 	mvn.w	r3, #5
 800e49e:	e004      	b.n	800e4aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f47f af61 	bne.w	800e36a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	08019cd0 	.word	0x08019cd0
 800e4b8:	08019f78 	.word	0x08019f78
 800e4bc:	08019d30 	.word	0x08019d30
 800e4c0:	08019fa8 	.word	0x08019fa8
 800e4c4:	08019fc0 	.word	0x08019fc0
 800e4c8:	08019fdc 	.word	0x08019fdc
 800e4cc:	08019fec 	.word	0x08019fec

0800e4d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4611      	mov	r1, r2
 800e4dc:	461a      	mov	r2, r3
 800e4de:	460b      	mov	r3, r1
 800e4e0:	80fb      	strh	r3, [r7, #6]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d108      	bne.n	800e506 <pbuf_copy_partial+0x36>
 800e4f4:	4b2b      	ldr	r3, [pc, #172]	; (800e5a4 <pbuf_copy_partial+0xd4>)
 800e4f6:	f240 420a 	movw	r2, #1034	; 0x40a
 800e4fa:	492b      	ldr	r1, [pc, #172]	; (800e5a8 <pbuf_copy_partial+0xd8>)
 800e4fc:	482b      	ldr	r0, [pc, #172]	; (800e5ac <pbuf_copy_partial+0xdc>)
 800e4fe:	f009 fb99 	bl	8017c34 <iprintf>
 800e502:	2300      	movs	r3, #0
 800e504:	e04a      	b.n	800e59c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d108      	bne.n	800e51e <pbuf_copy_partial+0x4e>
 800e50c:	4b25      	ldr	r3, [pc, #148]	; (800e5a4 <pbuf_copy_partial+0xd4>)
 800e50e:	f240 420b 	movw	r2, #1035	; 0x40b
 800e512:	4927      	ldr	r1, [pc, #156]	; (800e5b0 <pbuf_copy_partial+0xe0>)
 800e514:	4825      	ldr	r0, [pc, #148]	; (800e5ac <pbuf_copy_partial+0xdc>)
 800e516:	f009 fb8d 	bl	8017c34 <iprintf>
 800e51a:	2300      	movs	r3, #0
 800e51c:	e03e      	b.n	800e59c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	61fb      	str	r3, [r7, #28]
 800e522:	e034      	b.n	800e58e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e524:	88bb      	ldrh	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <pbuf_copy_partial+0x70>
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	895b      	ldrh	r3, [r3, #10]
 800e52e:	88ba      	ldrh	r2, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d305      	bcc.n	800e540 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	895b      	ldrh	r3, [r3, #10]
 800e538:	88ba      	ldrh	r2, [r7, #4]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	80bb      	strh	r3, [r7, #4]
 800e53e:	e023      	b.n	800e588 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	895a      	ldrh	r2, [r3, #10]
 800e544:	88bb      	ldrh	r3, [r7, #4]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e54a:	8b3a      	ldrh	r2, [r7, #24]
 800e54c:	88fb      	ldrh	r3, [r7, #6]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d901      	bls.n	800e556 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e552:	88fb      	ldrh	r3, [r7, #6]
 800e554:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e556:	8b7b      	ldrh	r3, [r7, #26]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	18d0      	adds	r0, r2, r3
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	685a      	ldr	r2, [r3, #4]
 800e560:	88bb      	ldrh	r3, [r7, #4]
 800e562:	4413      	add	r3, r2
 800e564:	8b3a      	ldrh	r2, [r7, #24]
 800e566:	4619      	mov	r1, r3
 800e568:	f009 faf3 	bl	8017b52 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e56c:	8afa      	ldrh	r2, [r7, #22]
 800e56e:	8b3b      	ldrh	r3, [r7, #24]
 800e570:	4413      	add	r3, r2
 800e572:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e574:	8b7a      	ldrh	r2, [r7, #26]
 800e576:	8b3b      	ldrh	r3, [r7, #24]
 800e578:	4413      	add	r3, r2
 800e57a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e57c:	88fa      	ldrh	r2, [r7, #6]
 800e57e:	8b3b      	ldrh	r3, [r7, #24]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	61fb      	str	r3, [r7, #28]
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <pbuf_copy_partial+0xca>
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d1c4      	bne.n	800e524 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e59a:	8afb      	ldrh	r3, [r7, #22]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	08019cd0 	.word	0x08019cd0
 800e5a8:	0801a018 	.word	0x0801a018
 800e5ac:	08019d30 	.word	0x08019d30
 800e5b0:	0801a038 	.word	0x0801a038

0800e5b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	603a      	str	r2, [r7, #0]
 800e5be:	71fb      	strb	r3, [r7, #7]
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	8919      	ldrh	r1, [r3, #8]
 800e5c8:	88ba      	ldrh	r2, [r7, #4]
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7ff faa5 	bl	800db1c <pbuf_alloc>
 800e5d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <pbuf_clone+0x2a>
    return NULL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e011      	b.n	800e602 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7ff fea3 	bl	800e32c <pbuf_copy>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e5ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d006      	beq.n	800e600 <pbuf_clone+0x4c>
 800e5f2:	4b06      	ldr	r3, [pc, #24]	; (800e60c <pbuf_clone+0x58>)
 800e5f4:	f240 5224 	movw	r2, #1316	; 0x524
 800e5f8:	4905      	ldr	r1, [pc, #20]	; (800e610 <pbuf_clone+0x5c>)
 800e5fa:	4806      	ldr	r0, [pc, #24]	; (800e614 <pbuf_clone+0x60>)
 800e5fc:	f009 fb1a 	bl	8017c34 <iprintf>
  return q;
 800e600:	68fb      	ldr	r3, [r7, #12]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	08019cd0 	.word	0x08019cd0
 800e610:	0801a144 	.word	0x0801a144
 800e614:	08019d30 	.word	0x08019d30

0800e618 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e61c:	f009 fb22 	bl	8017c64 <rand>
 800e620:	4603      	mov	r3, r0
 800e622:	b29b      	uxth	r3, r3
 800e624:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e62e:	b29a      	uxth	r2, r3
 800e630:	4b01      	ldr	r3, [pc, #4]	; (800e638 <tcp_init+0x20>)
 800e632:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e634:	bf00      	nop
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20000014 	.word	0x20000014

0800e63c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	7d1b      	ldrb	r3, [r3, #20]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d105      	bne.n	800e658 <tcp_free+0x1c>
 800e64c:	4b06      	ldr	r3, [pc, #24]	; (800e668 <tcp_free+0x2c>)
 800e64e:	22d4      	movs	r2, #212	; 0xd4
 800e650:	4906      	ldr	r1, [pc, #24]	; (800e66c <tcp_free+0x30>)
 800e652:	4807      	ldr	r0, [pc, #28]	; (800e670 <tcp_free+0x34>)
 800e654:	f009 faee 	bl	8017c34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e658:	6879      	ldr	r1, [r7, #4]
 800e65a:	2001      	movs	r0, #1
 800e65c:	f7fe fe9e 	bl	800d39c <memp_free>
}
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	0801a1d0 	.word	0x0801a1d0
 800e66c:	0801a200 	.word	0x0801a200
 800e670:	0801a214 	.word	0x0801a214

0800e674 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	7d1b      	ldrb	r3, [r3, #20]
 800e680:	2b01      	cmp	r3, #1
 800e682:	d105      	bne.n	800e690 <tcp_free_listen+0x1c>
 800e684:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <tcp_free_listen+0x2c>)
 800e686:	22df      	movs	r2, #223	; 0xdf
 800e688:	4906      	ldr	r1, [pc, #24]	; (800e6a4 <tcp_free_listen+0x30>)
 800e68a:	4807      	ldr	r0, [pc, #28]	; (800e6a8 <tcp_free_listen+0x34>)
 800e68c:	f009 fad2 	bl	8017c34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	2002      	movs	r0, #2
 800e694:	f7fe fe82 	bl	800d39c <memp_free>
}
 800e698:	bf00      	nop
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	0801a1d0 	.word	0x0801a1d0
 800e6a4:	0801a23c 	.word	0x0801a23c
 800e6a8:	0801a214 	.word	0x0801a214

0800e6ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e6b0:	f001 f8a6 	bl	800f800 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e6b4:	4b07      	ldr	r3, [pc, #28]	; (800e6d4 <tcp_tmr+0x28>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <tcp_tmr+0x28>)
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	4b04      	ldr	r3, [pc, #16]	; (800e6d4 <tcp_tmr+0x28>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e6cc:	f000 fd58 	bl	800f180 <tcp_slowtmr>
  }
}
 800e6d0:	bf00      	nop
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	20004aed 	.word	0x20004aed

0800e6d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d105      	bne.n	800e6f4 <tcp_remove_listener+0x1c>
 800e6e8:	4b0d      	ldr	r3, [pc, #52]	; (800e720 <tcp_remove_listener+0x48>)
 800e6ea:	22ff      	movs	r2, #255	; 0xff
 800e6ec:	490d      	ldr	r1, [pc, #52]	; (800e724 <tcp_remove_listener+0x4c>)
 800e6ee:	480e      	ldr	r0, [pc, #56]	; (800e728 <tcp_remove_listener+0x50>)
 800e6f0:	f009 faa0 	bl	8017c34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	e00a      	b.n	800e710 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	429a      	cmp	r2, r3
 800e702:	d102      	bne.n	800e70a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1f1      	bne.n	800e6fa <tcp_remove_listener+0x22>
    }
  }
}
 800e716:	bf00      	nop
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	0801a1d0 	.word	0x0801a1d0
 800e724:	0801a258 	.word	0x0801a258
 800e728:	0801a214 	.word	0x0801a214

0800e72c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d106      	bne.n	800e748 <tcp_listen_closed+0x1c>
 800e73a:	4b14      	ldr	r3, [pc, #80]	; (800e78c <tcp_listen_closed+0x60>)
 800e73c:	f240 1211 	movw	r2, #273	; 0x111
 800e740:	4913      	ldr	r1, [pc, #76]	; (800e790 <tcp_listen_closed+0x64>)
 800e742:	4814      	ldr	r0, [pc, #80]	; (800e794 <tcp_listen_closed+0x68>)
 800e744:	f009 fa76 	bl	8017c34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	7d1b      	ldrb	r3, [r3, #20]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d006      	beq.n	800e75e <tcp_listen_closed+0x32>
 800e750:	4b0e      	ldr	r3, [pc, #56]	; (800e78c <tcp_listen_closed+0x60>)
 800e752:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e756:	4910      	ldr	r1, [pc, #64]	; (800e798 <tcp_listen_closed+0x6c>)
 800e758:	480e      	ldr	r0, [pc, #56]	; (800e794 <tcp_listen_closed+0x68>)
 800e75a:	f009 fa6b 	bl	8017c34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e75e:	2301      	movs	r3, #1
 800e760:	60fb      	str	r3, [r7, #12]
 800e762:	e00b      	b.n	800e77c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e764:	4a0d      	ldr	r2, [pc, #52]	; (800e79c <tcp_listen_closed+0x70>)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff ffb1 	bl	800e6d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3301      	adds	r3, #1
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d9f0      	bls.n	800e764 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e782:	bf00      	nop
 800e784:	bf00      	nop
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	0801a1d0 	.word	0x0801a1d0
 800e790:	0801a280 	.word	0x0801a280
 800e794:	0801a214 	.word	0x0801a214
 800e798:	0801a28c 	.word	0x0801a28c
 800e79c:	0801c220 	.word	0x0801c220

0800e7a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e7a0:	b5b0      	push	{r4, r5, r7, lr}
 800e7a2:	b088      	sub	sp, #32
 800e7a4:	af04      	add	r7, sp, #16
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d106      	bne.n	800e7c0 <tcp_close_shutdown+0x20>
 800e7b2:	4b63      	ldr	r3, [pc, #396]	; (800e940 <tcp_close_shutdown+0x1a0>)
 800e7b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e7b8:	4962      	ldr	r1, [pc, #392]	; (800e944 <tcp_close_shutdown+0x1a4>)
 800e7ba:	4863      	ldr	r0, [pc, #396]	; (800e948 <tcp_close_shutdown+0x1a8>)
 800e7bc:	f009 fa3a 	bl	8017c34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d066      	beq.n	800e894 <tcp_close_shutdown+0xf4>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	d003      	beq.n	800e7d6 <tcp_close_shutdown+0x36>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	7d1b      	ldrb	r3, [r3, #20]
 800e7d2:	2b07      	cmp	r3, #7
 800e7d4:	d15e      	bne.n	800e894 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d104      	bne.n	800e7e8 <tcp_close_shutdown+0x48>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e7e6:	d055      	beq.n	800e894 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8b5b      	ldrh	r3, [r3, #26]
 800e7ec:	f003 0310 	and.w	r3, r3, #16
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d106      	bne.n	800e802 <tcp_close_shutdown+0x62>
 800e7f4:	4b52      	ldr	r3, [pc, #328]	; (800e940 <tcp_close_shutdown+0x1a0>)
 800e7f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e7fa:	4954      	ldr	r1, [pc, #336]	; (800e94c <tcp_close_shutdown+0x1ac>)
 800e7fc:	4852      	ldr	r0, [pc, #328]	; (800e948 <tcp_close_shutdown+0x1a8>)
 800e7fe:	f009 fa19 	bl	8017c34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e80a:	687d      	ldr	r5, [r7, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3304      	adds	r3, #4
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	8ad2      	ldrh	r2, [r2, #22]
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	8b09      	ldrh	r1, [r1, #24]
 800e818:	9102      	str	r1, [sp, #8]
 800e81a:	9201      	str	r2, [sp, #4]
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	462b      	mov	r3, r5
 800e820:	4622      	mov	r2, r4
 800e822:	4601      	mov	r1, r0
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f005 fdb7 	bl	8014398 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f001 fb98 	bl	800ff60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e830:	4b47      	ldr	r3, [pc, #284]	; (800e950 <tcp_close_shutdown+0x1b0>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	429a      	cmp	r2, r3
 800e838:	d105      	bne.n	800e846 <tcp_close_shutdown+0xa6>
 800e83a:	4b45      	ldr	r3, [pc, #276]	; (800e950 <tcp_close_shutdown+0x1b0>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4a43      	ldr	r2, [pc, #268]	; (800e950 <tcp_close_shutdown+0x1b0>)
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	e013      	b.n	800e86e <tcp_close_shutdown+0xce>
 800e846:	4b42      	ldr	r3, [pc, #264]	; (800e950 <tcp_close_shutdown+0x1b0>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	60fb      	str	r3, [r7, #12]
 800e84c:	e00c      	b.n	800e868 <tcp_close_shutdown+0xc8>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	429a      	cmp	r2, r3
 800e856:	d104      	bne.n	800e862 <tcp_close_shutdown+0xc2>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68da      	ldr	r2, [r3, #12]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	60da      	str	r2, [r3, #12]
 800e860:	e005      	b.n	800e86e <tcp_close_shutdown+0xce>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1ef      	bne.n	800e84e <tcp_close_shutdown+0xae>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	60da      	str	r2, [r3, #12]
 800e874:	4b37      	ldr	r3, [pc, #220]	; (800e954 <tcp_close_shutdown+0x1b4>)
 800e876:	2201      	movs	r2, #1
 800e878:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e87a:	4b37      	ldr	r3, [pc, #220]	; (800e958 <tcp_close_shutdown+0x1b8>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d102      	bne.n	800e88a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e884:	f004 f82c 	bl	80128e0 <tcp_trigger_input_pcb_close>
 800e888:	e002      	b.n	800e890 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fed6 	bl	800e63c <tcp_free>
      }
      return ERR_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	e050      	b.n	800e936 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	7d1b      	ldrb	r3, [r3, #20]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d03b      	beq.n	800e914 <tcp_close_shutdown+0x174>
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	dc44      	bgt.n	800e92a <tcp_close_shutdown+0x18a>
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <tcp_close_shutdown+0x10a>
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d02a      	beq.n	800e8fe <tcp_close_shutdown+0x15e>
 800e8a8:	e03f      	b.n	800e92a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	8adb      	ldrh	r3, [r3, #22]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d021      	beq.n	800e8f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8b2:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <tcp_close_shutdown+0x1bc>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d105      	bne.n	800e8c8 <tcp_close_shutdown+0x128>
 800e8bc:	4b27      	ldr	r3, [pc, #156]	; (800e95c <tcp_close_shutdown+0x1bc>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	4a26      	ldr	r2, [pc, #152]	; (800e95c <tcp_close_shutdown+0x1bc>)
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	e013      	b.n	800e8f0 <tcp_close_shutdown+0x150>
 800e8c8:	4b24      	ldr	r3, [pc, #144]	; (800e95c <tcp_close_shutdown+0x1bc>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	60bb      	str	r3, [r7, #8]
 800e8ce:	e00c      	b.n	800e8ea <tcp_close_shutdown+0x14a>
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d104      	bne.n	800e8e4 <tcp_close_shutdown+0x144>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68da      	ldr	r2, [r3, #12]
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	60da      	str	r2, [r3, #12]
 800e8e2:	e005      	b.n	800e8f0 <tcp_close_shutdown+0x150>
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	60bb      	str	r3, [r7, #8]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1ef      	bne.n	800e8d0 <tcp_close_shutdown+0x130>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff fea0 	bl	800e63c <tcp_free>
      break;
 800e8fc:	e01a      	b.n	800e934 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7ff ff14 	bl	800e72c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e904:	6879      	ldr	r1, [r7, #4]
 800e906:	4816      	ldr	r0, [pc, #88]	; (800e960 <tcp_close_shutdown+0x1c0>)
 800e908:	f001 fb7a 	bl	8010000 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff feb1 	bl	800e674 <tcp_free_listen>
      break;
 800e912:	e00f      	b.n	800e934 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e914:	6879      	ldr	r1, [r7, #4]
 800e916:	480e      	ldr	r0, [pc, #56]	; (800e950 <tcp_close_shutdown+0x1b0>)
 800e918:	f001 fb72 	bl	8010000 <tcp_pcb_remove>
 800e91c:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <tcp_close_shutdown+0x1b4>)
 800e91e:	2201      	movs	r2, #1
 800e920:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff fe8a 	bl	800e63c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e928:	e004      	b.n	800e934 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f81a 	bl	800e964 <tcp_close_shutdown_fin>
 800e930:	4603      	mov	r3, r0
 800e932:	e000      	b.n	800e936 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bdb0      	pop	{r4, r5, r7, pc}
 800e93e:	bf00      	nop
 800e940:	0801a1d0 	.word	0x0801a1d0
 800e944:	0801a2a4 	.word	0x0801a2a4
 800e948:	0801a214 	.word	0x0801a214
 800e94c:	0801a2c4 	.word	0x0801a2c4
 800e950:	2000b714 	.word	0x2000b714
 800e954:	2000b710 	.word	0x2000b710
 800e958:	2000b728 	.word	0x2000b728
 800e95c:	2000b720 	.word	0x2000b720
 800e960:	2000b71c 	.word	0x2000b71c

0800e964 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <tcp_close_shutdown_fin+0x1c>
 800e972:	4b2e      	ldr	r3, [pc, #184]	; (800ea2c <tcp_close_shutdown_fin+0xc8>)
 800e974:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e978:	492d      	ldr	r1, [pc, #180]	; (800ea30 <tcp_close_shutdown_fin+0xcc>)
 800e97a:	482e      	ldr	r0, [pc, #184]	; (800ea34 <tcp_close_shutdown_fin+0xd0>)
 800e97c:	f009 f95a 	bl	8017c34 <iprintf>

  switch (pcb->state) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	7d1b      	ldrb	r3, [r3, #20]
 800e984:	2b07      	cmp	r3, #7
 800e986:	d020      	beq.n	800e9ca <tcp_close_shutdown_fin+0x66>
 800e988:	2b07      	cmp	r3, #7
 800e98a:	dc2b      	bgt.n	800e9e4 <tcp_close_shutdown_fin+0x80>
 800e98c:	2b03      	cmp	r3, #3
 800e98e:	d002      	beq.n	800e996 <tcp_close_shutdown_fin+0x32>
 800e990:	2b04      	cmp	r3, #4
 800e992:	d00d      	beq.n	800e9b0 <tcp_close_shutdown_fin+0x4c>
 800e994:	e026      	b.n	800e9e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f004 fe0c 	bl	80135b4 <tcp_send_fin>
 800e99c:	4603      	mov	r3, r0
 800e99e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d11f      	bne.n	800e9e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2205      	movs	r2, #5
 800e9ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9ae:	e01b      	b.n	800e9e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f004 fdff 	bl	80135b4 <tcp_send_fin>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d114      	bne.n	800e9ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2205      	movs	r2, #5
 800e9c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9c8:	e010      	b.n	800e9ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f004 fdf2 	bl	80135b4 <tcp_send_fin>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d109      	bne.n	800e9f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2209      	movs	r2, #9
 800e9e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9e2:	e005      	b.n	800e9f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e01c      	b.n	800ea22 <tcp_close_shutdown_fin+0xbe>
      break;
 800e9e8:	bf00      	nop
 800e9ea:	e002      	b.n	800e9f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e9ec:	bf00      	nop
 800e9ee:	e000      	b.n	800e9f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e9f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d103      	bne.n	800ea02 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f004 ff18 	bl	8013830 <tcp_output>
 800ea00:	e00d      	b.n	800ea1e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ea02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0a:	d108      	bne.n	800ea1e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	8b5b      	ldrh	r3, [r3, #26]
 800ea10:	f043 0308 	orr.w	r3, r3, #8
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e001      	b.n	800ea22 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ea1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0801a1d0 	.word	0x0801a1d0
 800ea30:	0801a280 	.word	0x0801a280
 800ea34:	0801a214 	.word	0x0801a214

0800ea38 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d109      	bne.n	800ea5a <tcp_close+0x22>
 800ea46:	4b0f      	ldr	r3, [pc, #60]	; (800ea84 <tcp_close+0x4c>)
 800ea48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ea4c:	490e      	ldr	r1, [pc, #56]	; (800ea88 <tcp_close+0x50>)
 800ea4e:	480f      	ldr	r0, [pc, #60]	; (800ea8c <tcp_close+0x54>)
 800ea50:	f009 f8f0 	bl	8017c34 <iprintf>
 800ea54:	f06f 030f 	mvn.w	r3, #15
 800ea58:	e00f      	b.n	800ea7a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	7d1b      	ldrb	r3, [r3, #20]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d006      	beq.n	800ea70 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8b5b      	ldrh	r3, [r3, #26]
 800ea66:	f043 0310 	orr.w	r3, r3, #16
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ea70:	2101      	movs	r1, #1
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff fe94 	bl	800e7a0 <tcp_close_shutdown>
 800ea78:	4603      	mov	r3, r0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	0801a1d0 	.word	0x0801a1d0
 800ea88:	0801a2e0 	.word	0x0801a2e0
 800ea8c:	0801a214 	.word	0x0801a214

0800ea90 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d109      	bne.n	800eab6 <tcp_shutdown+0x26>
 800eaa2:	4b26      	ldr	r3, [pc, #152]	; (800eb3c <tcp_shutdown+0xac>)
 800eaa4:	f240 2207 	movw	r2, #519	; 0x207
 800eaa8:	4925      	ldr	r1, [pc, #148]	; (800eb40 <tcp_shutdown+0xb0>)
 800eaaa:	4826      	ldr	r0, [pc, #152]	; (800eb44 <tcp_shutdown+0xb4>)
 800eaac:	f009 f8c2 	bl	8017c34 <iprintf>
 800eab0:	f06f 030f 	mvn.w	r3, #15
 800eab4:	e03d      	b.n	800eb32 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	7d1b      	ldrb	r3, [r3, #20]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d102      	bne.n	800eac4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800eabe:	f06f 030a 	mvn.w	r3, #10
 800eac2:	e036      	b.n	800eb32 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d01b      	beq.n	800eb02 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	8b5b      	ldrh	r3, [r3, #26]
 800eace:	f043 0310 	orr.w	r3, r3, #16
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d005      	beq.n	800eaea <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800eade:	2101      	movs	r1, #1
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f7ff fe5d 	bl	800e7a0 <tcp_close_shutdown>
 800eae6:	4603      	mov	r3, r0
 800eae8:	e023      	b.n	800eb32 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff faf4 	bl	800e0e4 <pbuf_free>
      pcb->refused_data = NULL;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d013      	beq.n	800eb30 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	7d1b      	ldrb	r3, [r3, #20]
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	dc02      	bgt.n	800eb16 <tcp_shutdown+0x86>
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	da02      	bge.n	800eb1a <tcp_shutdown+0x8a>
 800eb14:	e009      	b.n	800eb2a <tcp_shutdown+0x9a>
 800eb16:	2b07      	cmp	r3, #7
 800eb18:	d107      	bne.n	800eb2a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	4619      	mov	r1, r3
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f7ff fe3d 	bl	800e7a0 <tcp_close_shutdown>
 800eb26:	4603      	mov	r3, r0
 800eb28:	e003      	b.n	800eb32 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800eb2a:	f06f 030a 	mvn.w	r3, #10
 800eb2e:	e000      	b.n	800eb32 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	0801a1d0 	.word	0x0801a1d0
 800eb40:	0801a2f8 	.word	0x0801a2f8
 800eb44:	0801a214 	.word	0x0801a214

0800eb48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08e      	sub	sp, #56	; 0x38
 800eb4c:	af04      	add	r7, sp, #16
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <tcp_abandon+0x20>
 800eb58:	4b52      	ldr	r3, [pc, #328]	; (800eca4 <tcp_abandon+0x15c>)
 800eb5a:	f240 223d 	movw	r2, #573	; 0x23d
 800eb5e:	4952      	ldr	r1, [pc, #328]	; (800eca8 <tcp_abandon+0x160>)
 800eb60:	4852      	ldr	r0, [pc, #328]	; (800ecac <tcp_abandon+0x164>)
 800eb62:	f009 f867 	bl	8017c34 <iprintf>
 800eb66:	e099      	b.n	800ec9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	7d1b      	ldrb	r3, [r3, #20]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d106      	bne.n	800eb7e <tcp_abandon+0x36>
 800eb70:	4b4c      	ldr	r3, [pc, #304]	; (800eca4 <tcp_abandon+0x15c>)
 800eb72:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eb76:	494e      	ldr	r1, [pc, #312]	; (800ecb0 <tcp_abandon+0x168>)
 800eb78:	484c      	ldr	r0, [pc, #304]	; (800ecac <tcp_abandon+0x164>)
 800eb7a:	f009 f85b 	bl	8017c34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	7d1b      	ldrb	r3, [r3, #20]
 800eb82:	2b0a      	cmp	r3, #10
 800eb84:	d107      	bne.n	800eb96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	484a      	ldr	r0, [pc, #296]	; (800ecb4 <tcp_abandon+0x16c>)
 800eb8a:	f001 fa39 	bl	8010000 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7ff fd54 	bl	800e63c <tcp_free>
 800eb94:	e082      	b.n	800ec9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eba2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebb0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d126      	bne.n	800ec0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	8adb      	ldrh	r3, [r3, #22]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d02e      	beq.n	800ec26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ebc8:	4b3b      	ldr	r3, [pc, #236]	; (800ecb8 <tcp_abandon+0x170>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d105      	bne.n	800ebde <tcp_abandon+0x96>
 800ebd2:	4b39      	ldr	r3, [pc, #228]	; (800ecb8 <tcp_abandon+0x170>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	4a37      	ldr	r2, [pc, #220]	; (800ecb8 <tcp_abandon+0x170>)
 800ebda:	6013      	str	r3, [r2, #0]
 800ebdc:	e013      	b.n	800ec06 <tcp_abandon+0xbe>
 800ebde:	4b36      	ldr	r3, [pc, #216]	; (800ecb8 <tcp_abandon+0x170>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e00c      	b.n	800ec00 <tcp_abandon+0xb8>
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d104      	bne.n	800ebfa <tcp_abandon+0xb2>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	68da      	ldr	r2, [r3, #12]
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	60da      	str	r2, [r3, #12]
 800ebf8:	e005      	b.n	800ec06 <tcp_abandon+0xbe>
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	61fb      	str	r3, [r7, #28]
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1ef      	bne.n	800ebe6 <tcp_abandon+0x9e>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	60da      	str	r2, [r3, #12]
 800ec0c:	e00b      	b.n	800ec26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8adb      	ldrh	r3, [r3, #22]
 800ec16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	4828      	ldr	r0, [pc, #160]	; (800ecbc <tcp_abandon+0x174>)
 800ec1c:	f001 f9f0 	bl	8010000 <tcp_pcb_remove>
 800ec20:	4b27      	ldr	r3, [pc, #156]	; (800ecc0 <tcp_abandon+0x178>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d004      	beq.n	800ec38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 fec4 	bl	800f9c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d004      	beq.n	800ec4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 febb 	bl	800f9c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d004      	beq.n	800ec5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 feb2 	bl	800f9c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00e      	beq.n	800ec80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3304      	adds	r3, #4
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	8b12      	ldrh	r2, [r2, #24]
 800ec6c:	9202      	str	r2, [sp, #8]
 800ec6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec70:	9201      	str	r2, [sp, #4]
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	460b      	mov	r3, r1
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	69b9      	ldr	r1, [r7, #24]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f005 fb8c 	bl	8014398 <tcp_rst>
    }
    last_state = pcb->state;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f7ff fcd8 	bl	800e63c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d004      	beq.n	800ec9c <tcp_abandon+0x154>
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f06f 010c 	mvn.w	r1, #12
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	4798      	blx	r3
  }
}
 800ec9c:	3728      	adds	r7, #40	; 0x28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	0801a1d0 	.word	0x0801a1d0
 800eca8:	0801a314 	.word	0x0801a314
 800ecac:	0801a214 	.word	0x0801a214
 800ecb0:	0801a330 	.word	0x0801a330
 800ecb4:	2000b724 	.word	0x2000b724
 800ecb8:	2000b720 	.word	0x2000b720
 800ecbc:	2000b714 	.word	0x2000b714
 800ecc0:	2000b710 	.word	0x2000b710

0800ecc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eccc:	2101      	movs	r1, #1
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7ff ff3a 	bl	800eb48 <tcp_abandon>
}
 800ecd4:	bf00      	nop
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b088      	sub	sp, #32
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ecea:	2304      	movs	r3, #4
 800ecec:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ecf4:	4b3e      	ldr	r3, [pc, #248]	; (800edf0 <tcp_bind+0x114>)
 800ecf6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d109      	bne.n	800ed12 <tcp_bind+0x36>
 800ecfe:	4b3d      	ldr	r3, [pc, #244]	; (800edf4 <tcp_bind+0x118>)
 800ed00:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ed04:	493c      	ldr	r1, [pc, #240]	; (800edf8 <tcp_bind+0x11c>)
 800ed06:	483d      	ldr	r0, [pc, #244]	; (800edfc <tcp_bind+0x120>)
 800ed08:	f008 ff94 	bl	8017c34 <iprintf>
 800ed0c:	f06f 030f 	mvn.w	r3, #15
 800ed10:	e06a      	b.n	800ede8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d009      	beq.n	800ed2e <tcp_bind+0x52>
 800ed1a:	4b36      	ldr	r3, [pc, #216]	; (800edf4 <tcp_bind+0x118>)
 800ed1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed20:	4937      	ldr	r1, [pc, #220]	; (800ee00 <tcp_bind+0x124>)
 800ed22:	4836      	ldr	r0, [pc, #216]	; (800edfc <tcp_bind+0x120>)
 800ed24:	f008 ff86 	bl	8017c34 <iprintf>
 800ed28:	f06f 0305 	mvn.w	r3, #5
 800ed2c:	e05c      	b.n	800ede8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ed2e:	88fb      	ldrh	r3, [r7, #6]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d109      	bne.n	800ed48 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ed34:	f000 f9de 	bl	800f0f4 <tcp_new_port>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ed3c:	88fb      	ldrh	r3, [r7, #6]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d135      	bne.n	800edae <tcp_bind+0xd2>
      return ERR_BUF;
 800ed42:	f06f 0301 	mvn.w	r3, #1
 800ed46:	e04f      	b.n	800ede8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61fb      	str	r3, [r7, #28]
 800ed4c:	e02b      	b.n	800eda6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ed4e:	4a2d      	ldr	r2, [pc, #180]	; (800ee04 <tcp_bind+0x128>)
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	61bb      	str	r3, [r7, #24]
 800ed5a:	e01e      	b.n	800ed9a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	8adb      	ldrh	r3, [r3, #22]
 800ed60:	88fa      	ldrh	r2, [r7, #6]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d116      	bne.n	800ed94 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ed66:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d010      	beq.n	800ed8e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00c      	beq.n	800ed8e <tcp_bind+0xb2>
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d009      	beq.n	800ed8e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d005      	beq.n	800ed8e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d102      	bne.n	800ed94 <tcp_bind+0xb8>
              return ERR_USE;
 800ed8e:	f06f 0307 	mvn.w	r3, #7
 800ed92:	e029      	b.n	800ede8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	61bb      	str	r3, [r7, #24]
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1dd      	bne.n	800ed5c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	3301      	adds	r3, #1
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	69fa      	ldr	r2, [r7, #28]
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	429a      	cmp	r2, r3
 800edac:	dbcf      	blt.n	800ed4e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00c      	beq.n	800edce <tcp_bind+0xf2>
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d008      	beq.n	800edce <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d002      	beq.n	800edc8 <tcp_bind+0xec>
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	e000      	b.n	800edca <tcp_bind+0xee>
 800edc8:	2300      	movs	r3, #0
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	88fa      	ldrh	r2, [r7, #6]
 800edd2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <tcp_bind+0x12c>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	60da      	str	r2, [r3, #12]
 800eddc:	4a0a      	ldr	r2, [pc, #40]	; (800ee08 <tcp_bind+0x12c>)
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6013      	str	r3, [r2, #0]
 800ede2:	f005 fc9b 	bl	801471c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3720      	adds	r7, #32
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	0801c248 	.word	0x0801c248
 800edf4:	0801a1d0 	.word	0x0801a1d0
 800edf8:	0801a364 	.word	0x0801a364
 800edfc:	0801a214 	.word	0x0801a214
 800ee00:	0801a37c 	.word	0x0801a37c
 800ee04:	0801c220 	.word	0x0801c220
 800ee08:	2000b720 	.word	0x2000b720

0800ee0c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	4613      	mov	r3, r2
 800ee18:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d106      	bne.n	800ee2e <tcp_accept_null+0x22>
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <tcp_accept_null+0x34>)
 800ee22:	f240 320f 	movw	r2, #783	; 0x30f
 800ee26:	4907      	ldr	r1, [pc, #28]	; (800ee44 <tcp_accept_null+0x38>)
 800ee28:	4807      	ldr	r0, [pc, #28]	; (800ee48 <tcp_accept_null+0x3c>)
 800ee2a:	f008 ff03 	bl	8017c34 <iprintf>

  tcp_abort(pcb);
 800ee2e:	68b8      	ldr	r0, [r7, #8]
 800ee30:	f7ff ff48 	bl	800ecc4 <tcp_abort>

  return ERR_ABRT;
 800ee34:	f06f 030c 	mvn.w	r3, #12
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	0801a1d0 	.word	0x0801a1d0
 800ee44:	0801a3a4 	.word	0x0801a3a4
 800ee48:	0801a214 	.word	0x0801a214

0800ee4c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	460b      	mov	r3, r1
 800ee56:	607a      	str	r2, [r7, #4]
 800ee58:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d109      	bne.n	800ee78 <tcp_listen_with_backlog_and_err+0x2c>
 800ee64:	4b47      	ldr	r3, [pc, #284]	; (800ef84 <tcp_listen_with_backlog_and_err+0x138>)
 800ee66:	f240 3259 	movw	r2, #857	; 0x359
 800ee6a:	4947      	ldr	r1, [pc, #284]	; (800ef88 <tcp_listen_with_backlog_and_err+0x13c>)
 800ee6c:	4847      	ldr	r0, [pc, #284]	; (800ef8c <tcp_listen_with_backlog_and_err+0x140>)
 800ee6e:	f008 fee1 	bl	8017c34 <iprintf>
 800ee72:	23f0      	movs	r3, #240	; 0xf0
 800ee74:	76fb      	strb	r3, [r7, #27]
 800ee76:	e079      	b.n	800ef6c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	7d1b      	ldrb	r3, [r3, #20]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d009      	beq.n	800ee94 <tcp_listen_with_backlog_and_err+0x48>
 800ee80:	4b40      	ldr	r3, [pc, #256]	; (800ef84 <tcp_listen_with_backlog_and_err+0x138>)
 800ee82:	f240 325a 	movw	r2, #858	; 0x35a
 800ee86:	4942      	ldr	r1, [pc, #264]	; (800ef90 <tcp_listen_with_backlog_and_err+0x144>)
 800ee88:	4840      	ldr	r0, [pc, #256]	; (800ef8c <tcp_listen_with_backlog_and_err+0x140>)
 800ee8a:	f008 fed3 	bl	8017c34 <iprintf>
 800ee8e:	23f1      	movs	r3, #241	; 0xf1
 800ee90:	76fb      	strb	r3, [r7, #27]
 800ee92:	e06b      	b.n	800ef6c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	7d1b      	ldrb	r3, [r3, #20]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d104      	bne.n	800eea6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800eea0:	23f7      	movs	r3, #247	; 0xf7
 800eea2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eea4:	e062      	b.n	800ef6c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800eea6:	2002      	movs	r0, #2
 800eea8:	f7fe fa26 	bl	800d2f8 <memp_malloc>
 800eeac:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800eeb4:	23ff      	movs	r3, #255	; 0xff
 800eeb6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eeb8:	e058      	b.n	800ef6c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	8ada      	ldrh	r2, [r3, #22]
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	2201      	movs	r2, #1
 800eece:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	7d5a      	ldrb	r2, [r3, #21]
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	7a5a      	ldrb	r2, [r3, #9]
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	2200      	movs	r2, #0
 800eee4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	7ada      	ldrb	r2, [r3, #11]
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	7a9a      	ldrb	r2, [r3, #10]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	8adb      	ldrh	r3, [r3, #22]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d021      	beq.n	800ef4a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef06:	4b23      	ldr	r3, [pc, #140]	; (800ef94 <tcp_listen_with_backlog_and_err+0x148>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d105      	bne.n	800ef1c <tcp_listen_with_backlog_and_err+0xd0>
 800ef10:	4b20      	ldr	r3, [pc, #128]	; (800ef94 <tcp_listen_with_backlog_and_err+0x148>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	4a1f      	ldr	r2, [pc, #124]	; (800ef94 <tcp_listen_with_backlog_and_err+0x148>)
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	e013      	b.n	800ef44 <tcp_listen_with_backlog_and_err+0xf8>
 800ef1c:	4b1d      	ldr	r3, [pc, #116]	; (800ef94 <tcp_listen_with_backlog_and_err+0x148>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	617b      	str	r3, [r7, #20]
 800ef22:	e00c      	b.n	800ef3e <tcp_listen_with_backlog_and_err+0xf2>
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d104      	bne.n	800ef38 <tcp_listen_with_backlog_and_err+0xec>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	68da      	ldr	r2, [r3, #12]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	60da      	str	r2, [r3, #12]
 800ef36:	e005      	b.n	800ef44 <tcp_listen_with_backlog_and_err+0xf8>
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	617b      	str	r3, [r7, #20]
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1ef      	bne.n	800ef24 <tcp_listen_with_backlog_and_err+0xd8>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff fb76 	bl	800e63c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	4a11      	ldr	r2, [pc, #68]	; (800ef98 <tcp_listen_with_backlog_and_err+0x14c>)
 800ef54:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ef56:	4b11      	ldr	r3, [pc, #68]	; (800ef9c <tcp_listen_with_backlog_and_err+0x150>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	60da      	str	r2, [r3, #12]
 800ef5e:	4a0f      	ldr	r2, [pc, #60]	; (800ef9c <tcp_listen_with_backlog_and_err+0x150>)
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	f005 fbda 	bl	801471c <tcp_timer_needed>
  res = ERR_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	7efa      	ldrb	r2, [r7, #27]
 800ef76:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ef78:	69fb      	ldr	r3, [r7, #28]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3720      	adds	r7, #32
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	0801a1d0 	.word	0x0801a1d0
 800ef88:	0801a3c4 	.word	0x0801a3c4
 800ef8c:	0801a214 	.word	0x0801a214
 800ef90:	0801a3f4 	.word	0x0801a3f4
 800ef94:	2000b720 	.word	0x2000b720
 800ef98:	0800ee0d 	.word	0x0800ee0d
 800ef9c:	2000b71c 	.word	0x2000b71c

0800efa0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <tcp_update_rcv_ann_wnd+0x1c>
 800efae:	4b25      	ldr	r3, [pc, #148]	; (800f044 <tcp_update_rcv_ann_wnd+0xa4>)
 800efb0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800efb4:	4924      	ldr	r1, [pc, #144]	; (800f048 <tcp_update_rcv_ann_wnd+0xa8>)
 800efb6:	4825      	ldr	r0, [pc, #148]	; (800f04c <tcp_update_rcv_ann_wnd+0xac>)
 800efb8:	f008 fe3c 	bl	8017c34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800efc4:	4413      	add	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800efd0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800efd4:	bf28      	it	cs
 800efd6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800efda:	b292      	uxth	r2, r2
 800efdc:	4413      	add	r3, r2
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	db08      	blt.n	800eff8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	e020      	b.n	800f03a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	dd03      	ble.n	800f00e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f00c:	e014      	b.n	800f038 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f020:	d306      	bcc.n	800f030 <tcp_update_rcv_ann_wnd+0x90>
 800f022:	4b08      	ldr	r3, [pc, #32]	; (800f044 <tcp_update_rcv_ann_wnd+0xa4>)
 800f024:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f028:	4909      	ldr	r1, [pc, #36]	; (800f050 <tcp_update_rcv_ann_wnd+0xb0>)
 800f02a:	4808      	ldr	r0, [pc, #32]	; (800f04c <tcp_update_rcv_ann_wnd+0xac>)
 800f02c:	f008 fe02 	bl	8017c34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	b29a      	uxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f038:	2300      	movs	r3, #0
  }
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	0801a1d0 	.word	0x0801a1d0
 800f048:	0801a42c 	.word	0x0801a42c
 800f04c:	0801a214 	.word	0x0801a214
 800f050:	0801a450 	.word	0x0801a450

0800f054 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	460b      	mov	r3, r1
 800f05e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d107      	bne.n	800f076 <tcp_recved+0x22>
 800f066:	4b1f      	ldr	r3, [pc, #124]	; (800f0e4 <tcp_recved+0x90>)
 800f068:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f06c:	491e      	ldr	r1, [pc, #120]	; (800f0e8 <tcp_recved+0x94>)
 800f06e:	481f      	ldr	r0, [pc, #124]	; (800f0ec <tcp_recved+0x98>)
 800f070:	f008 fde0 	bl	8017c34 <iprintf>
 800f074:	e032      	b.n	800f0dc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7d1b      	ldrb	r3, [r3, #20]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d106      	bne.n	800f08c <tcp_recved+0x38>
 800f07e:	4b19      	ldr	r3, [pc, #100]	; (800f0e4 <tcp_recved+0x90>)
 800f080:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f084:	491a      	ldr	r1, [pc, #104]	; (800f0f0 <tcp_recved+0x9c>)
 800f086:	4819      	ldr	r0, [pc, #100]	; (800f0ec <tcp_recved+0x98>)
 800f088:	f008 fdd4 	bl	8017c34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f090:	887b      	ldrh	r3, [r7, #2]
 800f092:	4413      	add	r3, r2
 800f094:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f096:	89fb      	ldrh	r3, [r7, #14]
 800f098:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f09c:	d804      	bhi.n	800f0a8 <tcp_recved+0x54>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0a2:	89fa      	ldrh	r2, [r7, #14]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d204      	bcs.n	800f0b2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f0ae:	851a      	strh	r2, [r3, #40]	; 0x28
 800f0b0:	e002      	b.n	800f0b8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	89fa      	ldrh	r2, [r7, #14]
 800f0b6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff ff71 	bl	800efa0 <tcp_update_rcv_ann_wnd>
 800f0be:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f0c6:	d309      	bcc.n	800f0dc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	8b5b      	ldrh	r3, [r3, #26]
 800f0cc:	f043 0302 	orr.w	r3, r3, #2
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f004 fbaa 	bl	8013830 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	0801a1d0 	.word	0x0801a1d0
 800f0e8:	0801a46c 	.word	0x0801a46c
 800f0ec:	0801a214 	.word	0x0801a214
 800f0f0:	0801a484 	.word	0x0801a484

0800f0f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f0fe:	4b1e      	ldr	r3, [pc, #120]	; (800f178 <tcp_new_port+0x84>)
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	3301      	adds	r3, #1
 800f104:	b29a      	uxth	r2, r3
 800f106:	4b1c      	ldr	r3, [pc, #112]	; (800f178 <tcp_new_port+0x84>)
 800f108:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f10a:	4b1b      	ldr	r3, [pc, #108]	; (800f178 <tcp_new_port+0x84>)
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f112:	4293      	cmp	r3, r2
 800f114:	d103      	bne.n	800f11e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f116:	4b18      	ldr	r3, [pc, #96]	; (800f178 <tcp_new_port+0x84>)
 800f118:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f11c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f11e:	2300      	movs	r3, #0
 800f120:	71fb      	strb	r3, [r7, #7]
 800f122:	e01e      	b.n	800f162 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	4a15      	ldr	r2, [pc, #84]	; (800f17c <tcp_new_port+0x88>)
 800f128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	603b      	str	r3, [r7, #0]
 800f130:	e011      	b.n	800f156 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	8ada      	ldrh	r2, [r3, #22]
 800f136:	4b10      	ldr	r3, [pc, #64]	; (800f178 <tcp_new_port+0x84>)
 800f138:	881b      	ldrh	r3, [r3, #0]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d108      	bne.n	800f150 <tcp_new_port+0x5c>
        n++;
 800f13e:	88bb      	ldrh	r3, [r7, #4]
 800f140:	3301      	adds	r3, #1
 800f142:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f144:	88bb      	ldrh	r3, [r7, #4]
 800f146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f14a:	d3d8      	bcc.n	800f0fe <tcp_new_port+0xa>
          return 0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e00d      	b.n	800f16c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	603b      	str	r3, [r7, #0]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1ea      	bne.n	800f132 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	3301      	adds	r3, #1
 800f160:	71fb      	strb	r3, [r7, #7]
 800f162:	79fb      	ldrb	r3, [r7, #7]
 800f164:	2b03      	cmp	r3, #3
 800f166:	d9dd      	bls.n	800f124 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f168:	4b03      	ldr	r3, [pc, #12]	; (800f178 <tcp_new_port+0x84>)
 800f16a:	881b      	ldrh	r3, [r3, #0]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr
 800f178:	20000014 	.word	0x20000014
 800f17c:	0801c220 	.word	0x0801c220

0800f180 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b090      	sub	sp, #64	; 0x40
 800f184:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f186:	2300      	movs	r3, #0
 800f188:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f18c:	4b94      	ldr	r3, [pc, #592]	; (800f3e0 <tcp_slowtmr+0x260>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3301      	adds	r3, #1
 800f192:	4a93      	ldr	r2, [pc, #588]	; (800f3e0 <tcp_slowtmr+0x260>)
 800f194:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f196:	4b93      	ldr	r3, [pc, #588]	; (800f3e4 <tcp_slowtmr+0x264>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	3301      	adds	r3, #1
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	4b91      	ldr	r3, [pc, #580]	; (800f3e4 <tcp_slowtmr+0x264>)
 800f1a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f1a6:	4b90      	ldr	r3, [pc, #576]	; (800f3e8 <tcp_slowtmr+0x268>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f1ac:	e29f      	b.n	800f6ee <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	7d1b      	ldrb	r3, [r3, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <tcp_slowtmr+0x44>
 800f1b6:	4b8d      	ldr	r3, [pc, #564]	; (800f3ec <tcp_slowtmr+0x26c>)
 800f1b8:	f240 42be 	movw	r2, #1214	; 0x4be
 800f1bc:	498c      	ldr	r1, [pc, #560]	; (800f3f0 <tcp_slowtmr+0x270>)
 800f1be:	488d      	ldr	r0, [pc, #564]	; (800f3f4 <tcp_slowtmr+0x274>)
 800f1c0:	f008 fd38 	bl	8017c34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d106      	bne.n	800f1da <tcp_slowtmr+0x5a>
 800f1cc:	4b87      	ldr	r3, [pc, #540]	; (800f3ec <tcp_slowtmr+0x26c>)
 800f1ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f1d2:	4989      	ldr	r1, [pc, #548]	; (800f3f8 <tcp_slowtmr+0x278>)
 800f1d4:	4887      	ldr	r0, [pc, #540]	; (800f3f4 <tcp_slowtmr+0x274>)
 800f1d6:	f008 fd2d 	bl	8017c34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	7d1b      	ldrb	r3, [r3, #20]
 800f1de:	2b0a      	cmp	r3, #10
 800f1e0:	d106      	bne.n	800f1f0 <tcp_slowtmr+0x70>
 800f1e2:	4b82      	ldr	r3, [pc, #520]	; (800f3ec <tcp_slowtmr+0x26c>)
 800f1e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f1e8:	4984      	ldr	r1, [pc, #528]	; (800f3fc <tcp_slowtmr+0x27c>)
 800f1ea:	4882      	ldr	r0, [pc, #520]	; (800f3f4 <tcp_slowtmr+0x274>)
 800f1ec:	f008 fd22 	bl	8017c34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	7f9a      	ldrb	r2, [r3, #30]
 800f1f4:	4b7b      	ldr	r3, [pc, #492]	; (800f3e4 <tcp_slowtmr+0x264>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d105      	bne.n	800f208 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f206:	e272      	b.n	800f6ee <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f208:	4b76      	ldr	r3, [pc, #472]	; (800f3e4 <tcp_slowtmr+0x264>)
 800f20a:	781a      	ldrb	r2, [r3, #0]
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	7d1b      	ldrb	r3, [r3, #20]
 800f220:	2b02      	cmp	r3, #2
 800f222:	d10a      	bne.n	800f23a <tcp_slowtmr+0xba>
 800f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f22a:	2b05      	cmp	r3, #5
 800f22c:	d905      	bls.n	800f23a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f232:	3301      	adds	r3, #1
 800f234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f238:	e11e      	b.n	800f478 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f240:	2b0b      	cmp	r3, #11
 800f242:	d905      	bls.n	800f250 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f248:	3301      	adds	r3, #1
 800f24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f24e:	e113      	b.n	800f478 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f256:	2b00      	cmp	r3, #0
 800f258:	d075      	beq.n	800f346 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d006      	beq.n	800f270 <tcp_slowtmr+0xf0>
 800f262:	4b62      	ldr	r3, [pc, #392]	; (800f3ec <tcp_slowtmr+0x26c>)
 800f264:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f268:	4965      	ldr	r1, [pc, #404]	; (800f400 <tcp_slowtmr+0x280>)
 800f26a:	4862      	ldr	r0, [pc, #392]	; (800f3f4 <tcp_slowtmr+0x274>)
 800f26c:	f008 fce2 	bl	8017c34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f274:	2b00      	cmp	r3, #0
 800f276:	d106      	bne.n	800f286 <tcp_slowtmr+0x106>
 800f278:	4b5c      	ldr	r3, [pc, #368]	; (800f3ec <tcp_slowtmr+0x26c>)
 800f27a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f27e:	4961      	ldr	r1, [pc, #388]	; (800f404 <tcp_slowtmr+0x284>)
 800f280:	485c      	ldr	r0, [pc, #368]	; (800f3f4 <tcp_slowtmr+0x274>)
 800f282:	f008 fcd7 	bl	8017c34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f28c:	2b0b      	cmp	r3, #11
 800f28e:	d905      	bls.n	800f29c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f294:	3301      	adds	r3, #1
 800f296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f29a:	e0ed      	b.n	800f478 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	4a58      	ldr	r2, [pc, #352]	; (800f408 <tcp_slowtmr+0x288>)
 800f2a6:	5cd3      	ldrb	r3, [r2, r3]
 800f2a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f2b0:	7c7a      	ldrb	r2, [r7, #17]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d907      	bls.n	800f2c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f2bc:	3301      	adds	r3, #1
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f2cc:	7c7a      	ldrb	r2, [r7, #17]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	f200 80d2 	bhi.w	800f478 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d108      	bne.n	800f2f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f2e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2e4:	f005 f94c 	bl	8014580 <tcp_zero_window_probe>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d014      	beq.n	800f318 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	623b      	str	r3, [r7, #32]
 800f2f2:	e011      	b.n	800f318 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2fe:	f004 f811 	bl	8013324 <tcp_split_unsent_seg>
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d107      	bne.n	800f318 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f30a:	f004 fa91 	bl	8013830 <tcp_output>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f000 80ac 	beq.w	800f478 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f32e:	2b06      	cmp	r3, #6
 800f330:	f200 80a2 	bhi.w	800f478 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f33a:	3301      	adds	r3, #1
 800f33c:	b2da      	uxtb	r2, r3
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f344:	e098      	b.n	800f478 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	db0f      	blt.n	800f370 <tcp_slowtmr+0x1f0>
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f356:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d008      	beq.n	800f370 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f364:	b29b      	uxth	r3, r3
 800f366:	3301      	adds	r3, #1
 800f368:	b29b      	uxth	r3, r3
 800f36a:	b21a      	sxth	r2, r3
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f37c:	429a      	cmp	r2, r3
 800f37e:	db7b      	blt.n	800f478 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f382:	f004 fd47 	bl	8013e14 <tcp_rexmit_rto_prepare>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d007      	beq.n	800f39c <tcp_slowtmr+0x21c>
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f390:	2b00      	cmp	r3, #0
 800f392:	d171      	bne.n	800f478 <tcp_slowtmr+0x2f8>
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d06d      	beq.n	800f478 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	7d1b      	ldrb	r3, [r3, #20]
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d03a      	beq.n	800f41a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3aa:	2b0c      	cmp	r3, #12
 800f3ac:	bf28      	it	cs
 800f3ae:	230c      	movcs	r3, #12
 800f3b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3b8:	10db      	asrs	r3, r3, #3
 800f3ba:	b21b      	sxth	r3, r3
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3c4:	4413      	add	r3, r2
 800f3c6:	7efa      	ldrb	r2, [r7, #27]
 800f3c8:	4910      	ldr	r1, [pc, #64]	; (800f40c <tcp_slowtmr+0x28c>)
 800f3ca:	5c8a      	ldrb	r2, [r1, r2]
 800f3cc:	4093      	lsls	r3, r2
 800f3ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	dc1a      	bgt.n	800f410 <tcp_slowtmr+0x290>
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	b21a      	sxth	r2, r3
 800f3de:	e019      	b.n	800f414 <tcp_slowtmr+0x294>
 800f3e0:	2000b718 	.word	0x2000b718
 800f3e4:	20004aee 	.word	0x20004aee
 800f3e8:	2000b714 	.word	0x2000b714
 800f3ec:	0801a1d0 	.word	0x0801a1d0
 800f3f0:	0801a514 	.word	0x0801a514
 800f3f4:	0801a214 	.word	0x0801a214
 800f3f8:	0801a540 	.word	0x0801a540
 800f3fc:	0801a56c 	.word	0x0801a56c
 800f400:	0801a59c 	.word	0x0801a59c
 800f404:	0801a5d0 	.word	0x0801a5d0
 800f408:	0801c218 	.word	0x0801c218
 800f40c:	0801c208 	.word	0x0801c208
 800f410:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	2200      	movs	r2, #0
 800f41e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f422:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f428:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f42c:	4293      	cmp	r3, r2
 800f42e:	bf28      	it	cs
 800f430:	4613      	movcs	r3, r2
 800f432:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f434:	8a7b      	ldrh	r3, [r7, #18]
 800f436:	085b      	lsrs	r3, r3, #1
 800f438:	b29a      	uxth	r2, r3
 800f43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f44a:	005b      	lsls	r3, r3, #1
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	429a      	cmp	r2, r3
 800f450:	d206      	bcs.n	800f460 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	b29a      	uxth	r2, r3
 800f45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	2200      	movs	r2, #0
 800f46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f474:	f004 fd3e 	bl	8013ef4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	7d1b      	ldrb	r3, [r3, #20]
 800f47c:	2b06      	cmp	r3, #6
 800f47e:	d111      	bne.n	800f4a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f482:	8b5b      	ldrh	r3, [r3, #26]
 800f484:	f003 0310 	and.w	r3, r3, #16
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00b      	beq.n	800f4a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f48c:	4b9d      	ldr	r3, [pc, #628]	; (800f704 <tcp_slowtmr+0x584>)
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f492:	6a1b      	ldr	r3, [r3, #32]
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	2b28      	cmp	r3, #40	; 0x28
 800f498:	d904      	bls.n	800f4a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f49a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f49e:	3301      	adds	r3, #1
 800f4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	7a5b      	ldrb	r3, [r3, #9]
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d04c      	beq.n	800f54a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	d003      	beq.n	800f4c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f4bc:	2b07      	cmp	r3, #7
 800f4be:	d144      	bne.n	800f54a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4c0:	4b90      	ldr	r3, [pc, #576]	; (800f704 <tcp_slowtmr+0x584>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c6:	6a1b      	ldr	r3, [r3, #32]
 800f4c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f4d0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f4d4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f4d8:	498b      	ldr	r1, [pc, #556]	; (800f708 <tcp_slowtmr+0x588>)
 800f4da:	fba1 1303 	umull	r1, r3, r1, r3
 800f4de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d90a      	bls.n	800f4fa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f4ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f4f8:	e027      	b.n	800f54a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4fa:	4b82      	ldr	r3, [pc, #520]	; (800f704 <tcp_slowtmr+0x584>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f510:	4618      	mov	r0, r3
 800f512:	4b7e      	ldr	r3, [pc, #504]	; (800f70c <tcp_slowtmr+0x58c>)
 800f514:	fb03 f300 	mul.w	r3, r3, r0
 800f518:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f51a:	497b      	ldr	r1, [pc, #492]	; (800f708 <tcp_slowtmr+0x588>)
 800f51c:	fba1 1303 	umull	r1, r3, r1, r3
 800f520:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f522:	429a      	cmp	r2, r3
 800f524:	d911      	bls.n	800f54a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f528:	f004 ffea 	bl	8014500 <tcp_keepalive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f532:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f536:	2b00      	cmp	r3, #0
 800f538:	d107      	bne.n	800f54a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f540:	3301      	adds	r3, #1
 800f542:	b2da      	uxtb	r2, r3
 800f544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f546:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d011      	beq.n	800f576 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f552:	4b6c      	ldr	r3, [pc, #432]	; (800f704 <tcp_slowtmr+0x584>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	1ad2      	subs	r2, r2, r3
 800f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f562:	4619      	mov	r1, r3
 800f564:	460b      	mov	r3, r1
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	440b      	add	r3, r1
 800f56a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d302      	bcc.n	800f576 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f572:	f000 fea9 	bl	80102c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	7d1b      	ldrb	r3, [r3, #20]
 800f57a:	2b03      	cmp	r3, #3
 800f57c:	d10b      	bne.n	800f596 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f57e:	4b61      	ldr	r3, [pc, #388]	; (800f704 <tcp_slowtmr+0x584>)
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	6a1b      	ldr	r3, [r3, #32]
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	2b28      	cmp	r3, #40	; 0x28
 800f58a:	d904      	bls.n	800f596 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f590:	3301      	adds	r3, #1
 800f592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	7d1b      	ldrb	r3, [r3, #20]
 800f59a:	2b09      	cmp	r3, #9
 800f59c:	d10b      	bne.n	800f5b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f59e:	4b59      	ldr	r3, [pc, #356]	; (800f704 <tcp_slowtmr+0x584>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	2bf0      	cmp	r3, #240	; 0xf0
 800f5aa:	d904      	bls.n	800f5b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f5b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d060      	beq.n	800f680 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5c8:	f000 fcca 	bl	800ff60 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d010      	beq.n	800f5f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f5d2:	4b4f      	ldr	r3, [pc, #316]	; (800f710 <tcp_slowtmr+0x590>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d106      	bne.n	800f5ea <tcp_slowtmr+0x46a>
 800f5dc:	4b4d      	ldr	r3, [pc, #308]	; (800f714 <tcp_slowtmr+0x594>)
 800f5de:	f240 526d 	movw	r2, #1389	; 0x56d
 800f5e2:	494d      	ldr	r1, [pc, #308]	; (800f718 <tcp_slowtmr+0x598>)
 800f5e4:	484d      	ldr	r0, [pc, #308]	; (800f71c <tcp_slowtmr+0x59c>)
 800f5e6:	f008 fb25 	bl	8017c34 <iprintf>
        prev->next = pcb->next;
 800f5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ec:	68da      	ldr	r2, [r3, #12]
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	60da      	str	r2, [r3, #12]
 800f5f2:	e00f      	b.n	800f614 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f5f4:	4b46      	ldr	r3, [pc, #280]	; (800f710 <tcp_slowtmr+0x590>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d006      	beq.n	800f60c <tcp_slowtmr+0x48c>
 800f5fe:	4b45      	ldr	r3, [pc, #276]	; (800f714 <tcp_slowtmr+0x594>)
 800f600:	f240 5271 	movw	r2, #1393	; 0x571
 800f604:	4946      	ldr	r1, [pc, #280]	; (800f720 <tcp_slowtmr+0x5a0>)
 800f606:	4845      	ldr	r0, [pc, #276]	; (800f71c <tcp_slowtmr+0x59c>)
 800f608:	f008 fb14 	bl	8017c34 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	4a3f      	ldr	r2, [pc, #252]	; (800f710 <tcp_slowtmr+0x590>)
 800f612:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d013      	beq.n	800f644 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f622:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f624:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f628:	3304      	adds	r3, #4
 800f62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f62c:	8ad2      	ldrh	r2, [r2, #22]
 800f62e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f630:	8b09      	ldrh	r1, [r1, #24]
 800f632:	9102      	str	r1, [sp, #8]
 800f634:	9201      	str	r2, [sp, #4]
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	462b      	mov	r3, r5
 800f63a:	4622      	mov	r2, r4
 800f63c:	4601      	mov	r1, r0
 800f63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f640:	f004 feaa 	bl	8014398 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	7d1b      	ldrb	r3, [r3, #20]
 800f64e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f652:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f65a:	6838      	ldr	r0, [r7, #0]
 800f65c:	f7fe ffee 	bl	800e63c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f660:	4b30      	ldr	r3, [pc, #192]	; (800f724 <tcp_slowtmr+0x5a4>)
 800f662:	2200      	movs	r2, #0
 800f664:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d004      	beq.n	800f676 <tcp_slowtmr+0x4f6>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f06f 010c 	mvn.w	r1, #12
 800f672:	68b8      	ldr	r0, [r7, #8]
 800f674:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f676:	4b2b      	ldr	r3, [pc, #172]	; (800f724 <tcp_slowtmr+0x5a4>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d037      	beq.n	800f6ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f67e:	e590      	b.n	800f1a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f682:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68c:	7f1b      	ldrb	r3, [r3, #28]
 800f68e:	3301      	adds	r3, #1
 800f690:	b2da      	uxtb	r2, r3
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f698:	7f1a      	ldrb	r2, [r3, #28]
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	7f5b      	ldrb	r3, [r3, #29]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d325      	bcc.n	800f6ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f6a8:	4b1e      	ldr	r3, [pc, #120]	; (800f724 <tcp_slowtmr+0x5a4>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <tcp_slowtmr+0x550>
 800f6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c0:	6912      	ldr	r2, [r2, #16]
 800f6c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f6ce:	e002      	b.n	800f6d6 <tcp_slowtmr+0x556>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f6d6:	4b13      	ldr	r3, [pc, #76]	; (800f724 <tcp_slowtmr+0x5a4>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d000      	beq.n	800f6e0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f6de:	e560      	b.n	800f1a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f6e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d102      	bne.n	800f6ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6ea:	f004 f8a1 	bl	8013830 <tcp_output>
  while (pcb != NULL) {
 800f6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f47f ad5c 	bne.w	800f1ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f6fa:	4b0b      	ldr	r3, [pc, #44]	; (800f728 <tcp_slowtmr+0x5a8>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f700:	e067      	b.n	800f7d2 <tcp_slowtmr+0x652>
 800f702:	bf00      	nop
 800f704:	2000b718 	.word	0x2000b718
 800f708:	10624dd3 	.word	0x10624dd3
 800f70c:	000124f8 	.word	0x000124f8
 800f710:	2000b714 	.word	0x2000b714
 800f714:	0801a1d0 	.word	0x0801a1d0
 800f718:	0801a608 	.word	0x0801a608
 800f71c:	0801a214 	.word	0x0801a214
 800f720:	0801a634 	.word	0x0801a634
 800f724:	2000b710 	.word	0x2000b710
 800f728:	2000b724 	.word	0x2000b724
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	7d1b      	ldrb	r3, [r3, #20]
 800f730:	2b0a      	cmp	r3, #10
 800f732:	d006      	beq.n	800f742 <tcp_slowtmr+0x5c2>
 800f734:	4b2b      	ldr	r3, [pc, #172]	; (800f7e4 <tcp_slowtmr+0x664>)
 800f736:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f73a:	492b      	ldr	r1, [pc, #172]	; (800f7e8 <tcp_slowtmr+0x668>)
 800f73c:	482b      	ldr	r0, [pc, #172]	; (800f7ec <tcp_slowtmr+0x66c>)
 800f73e:	f008 fa79 	bl	8017c34 <iprintf>
    pcb_remove = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f748:	4b29      	ldr	r3, [pc, #164]	; (800f7f0 <tcp_slowtmr+0x670>)
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	2bf0      	cmp	r3, #240	; 0xf0
 800f754:	d904      	bls.n	800f760 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f75a:	3301      	adds	r3, #1
 800f75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f764:	2b00      	cmp	r3, #0
 800f766:	d02f      	beq.n	800f7c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f76a:	f000 fbf9 	bl	800ff60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	2b00      	cmp	r3, #0
 800f772:	d010      	beq.n	800f796 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f774:	4b1f      	ldr	r3, [pc, #124]	; (800f7f4 <tcp_slowtmr+0x674>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d106      	bne.n	800f78c <tcp_slowtmr+0x60c>
 800f77e:	4b19      	ldr	r3, [pc, #100]	; (800f7e4 <tcp_slowtmr+0x664>)
 800f780:	f240 52af 	movw	r2, #1455	; 0x5af
 800f784:	491c      	ldr	r1, [pc, #112]	; (800f7f8 <tcp_slowtmr+0x678>)
 800f786:	4819      	ldr	r0, [pc, #100]	; (800f7ec <tcp_slowtmr+0x66c>)
 800f788:	f008 fa54 	bl	8017c34 <iprintf>
        prev->next = pcb->next;
 800f78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78e:	68da      	ldr	r2, [r3, #12]
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	60da      	str	r2, [r3, #12]
 800f794:	e00f      	b.n	800f7b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f796:	4b17      	ldr	r3, [pc, #92]	; (800f7f4 <tcp_slowtmr+0x674>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d006      	beq.n	800f7ae <tcp_slowtmr+0x62e>
 800f7a0:	4b10      	ldr	r3, [pc, #64]	; (800f7e4 <tcp_slowtmr+0x664>)
 800f7a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f7a6:	4915      	ldr	r1, [pc, #84]	; (800f7fc <tcp_slowtmr+0x67c>)
 800f7a8:	4810      	ldr	r0, [pc, #64]	; (800f7ec <tcp_slowtmr+0x66c>)
 800f7aa:	f008 fa43 	bl	8017c34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	4a10      	ldr	r2, [pc, #64]	; (800f7f4 <tcp_slowtmr+0x674>)
 800f7b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f7c0:	69f8      	ldr	r0, [r7, #28]
 800f7c2:	f7fe ff3b 	bl	800e63c <tcp_free>
 800f7c6:	e004      	b.n	800f7d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1a9      	bne.n	800f72c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	3730      	adds	r7, #48	; 0x30
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bdb0      	pop	{r4, r5, r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801a1d0 	.word	0x0801a1d0
 800f7e8:	0801a660 	.word	0x0801a660
 800f7ec:	0801a214 	.word	0x0801a214
 800f7f0:	2000b718 	.word	0x2000b718
 800f7f4:	2000b724 	.word	0x2000b724
 800f7f8:	0801a690 	.word	0x0801a690
 800f7fc:	0801a6b8 	.word	0x0801a6b8

0800f800 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f806:	4b2d      	ldr	r3, [pc, #180]	; (800f8bc <tcp_fasttmr+0xbc>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	4b2b      	ldr	r3, [pc, #172]	; (800f8bc <tcp_fasttmr+0xbc>)
 800f810:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f812:	4b2b      	ldr	r3, [pc, #172]	; (800f8c0 <tcp_fasttmr+0xc0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f818:	e048      	b.n	800f8ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7f9a      	ldrb	r2, [r3, #30]
 800f81e:	4b27      	ldr	r3, [pc, #156]	; (800f8bc <tcp_fasttmr+0xbc>)
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	429a      	cmp	r2, r3
 800f824:	d03f      	beq.n	800f8a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f826:	4b25      	ldr	r3, [pc, #148]	; (800f8bc <tcp_fasttmr+0xbc>)
 800f828:	781a      	ldrb	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	8b5b      	ldrh	r3, [r3, #26]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d010      	beq.n	800f85c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8b5b      	ldrh	r3, [r3, #26]
 800f83e:	f043 0302 	orr.w	r3, r3, #2
 800f842:	b29a      	uxth	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f003 fff1 	bl	8013830 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	8b5b      	ldrh	r3, [r3, #26]
 800f852:	f023 0303 	bic.w	r3, r3, #3
 800f856:	b29a      	uxth	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	8b5b      	ldrh	r3, [r3, #26]
 800f860:	f003 0308 	and.w	r3, r3, #8
 800f864:	2b00      	cmp	r3, #0
 800f866:	d009      	beq.n	800f87c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	8b5b      	ldrh	r3, [r3, #26]
 800f86c:	f023 0308 	bic.w	r3, r3, #8
 800f870:	b29a      	uxth	r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff f874 	bl	800e964 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f88a:	4b0e      	ldr	r3, [pc, #56]	; (800f8c4 <tcp_fasttmr+0xc4>)
 800f88c:	2200      	movs	r2, #0
 800f88e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f819 	bl	800f8c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f896:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <tcp_fasttmr+0xc4>)
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d000      	beq.n	800f8a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f89e:	e7b8      	b.n	800f812 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	607b      	str	r3, [r7, #4]
 800f8a4:	e002      	b.n	800f8ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1b3      	bne.n	800f81a <tcp_fasttmr+0x1a>
    }
  }
}
 800f8b2:	bf00      	nop
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20004aee 	.word	0x20004aee
 800f8c0:	2000b714 	.word	0x2000b714
 800f8c4:	2000b710 	.word	0x2000b710

0800f8c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f8c8:	b590      	push	{r4, r7, lr}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d109      	bne.n	800f8ea <tcp_process_refused_data+0x22>
 800f8d6:	4b37      	ldr	r3, [pc, #220]	; (800f9b4 <tcp_process_refused_data+0xec>)
 800f8d8:	f240 6209 	movw	r2, #1545	; 0x609
 800f8dc:	4936      	ldr	r1, [pc, #216]	; (800f9b8 <tcp_process_refused_data+0xf0>)
 800f8de:	4837      	ldr	r0, [pc, #220]	; (800f9bc <tcp_process_refused_data+0xf4>)
 800f8e0:	f008 f9a8 	bl	8017c34 <iprintf>
 800f8e4:	f06f 030f 	mvn.w	r3, #15
 800f8e8:	e060      	b.n	800f9ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ee:	7b5b      	ldrb	r3, [r3, #13]
 800f8f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00b      	beq.n	800f920 <tcp_process_refused_data+0x58>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6918      	ldr	r0, [r3, #16]
 800f912:	2300      	movs	r3, #0
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	6879      	ldr	r1, [r7, #4]
 800f918:	47a0      	blx	r4
 800f91a:	4603      	mov	r3, r0
 800f91c:	73fb      	strb	r3, [r7, #15]
 800f91e:	e007      	b.n	800f930 <tcp_process_refused_data+0x68>
 800f920:	2300      	movs	r3, #0
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	2000      	movs	r0, #0
 800f928:	f000 f8a4 	bl	800fa74 <tcp_recv_null>
 800f92c:	4603      	mov	r3, r0
 800f92e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d12a      	bne.n	800f98e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f938:	7bbb      	ldrb	r3, [r7, #14]
 800f93a:	f003 0320 	and.w	r3, r3, #32
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d033      	beq.n	800f9aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f946:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f94a:	d005      	beq.n	800f958 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f950:	3301      	adds	r3, #1
 800f952:	b29a      	uxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00b      	beq.n	800f97a <tcp_process_refused_data+0xb2>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6918      	ldr	r0, [r3, #16]
 800f96c:	2300      	movs	r3, #0
 800f96e:	2200      	movs	r2, #0
 800f970:	6879      	ldr	r1, [r7, #4]
 800f972:	47a0      	blx	r4
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]
 800f978:	e001      	b.n	800f97e <tcp_process_refused_data+0xb6>
 800f97a:	2300      	movs	r3, #0
 800f97c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f982:	f113 0f0d 	cmn.w	r3, #13
 800f986:	d110      	bne.n	800f9aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f988:	f06f 030c 	mvn.w	r3, #12
 800f98c:	e00e      	b.n	800f9ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f992:	f113 0f0d 	cmn.w	r3, #13
 800f996:	d102      	bne.n	800f99e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f998:	f06f 030c 	mvn.w	r3, #12
 800f99c:	e006      	b.n	800f9ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	68ba      	ldr	r2, [r7, #8]
 800f9a2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f9a4:	f06f 0304 	mvn.w	r3, #4
 800f9a8:	e000      	b.n	800f9ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3714      	adds	r7, #20
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd90      	pop	{r4, r7, pc}
 800f9b4:	0801a1d0 	.word	0x0801a1d0
 800f9b8:	0801a6e0 	.word	0x0801a6e0
 800f9bc:	0801a214 	.word	0x0801a214

0800f9c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f9c8:	e007      	b.n	800f9da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f80a 	bl	800f9ea <tcp_seg_free>
    seg = next;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1f4      	bne.n	800f9ca <tcp_segs_free+0xa>
  }
}
 800f9e0:	bf00      	nop
 800f9e2:	bf00      	nop
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b082      	sub	sp, #8
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00c      	beq.n	800fa12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d004      	beq.n	800fa0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe fb6d 	bl	800e0e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	2003      	movs	r0, #3
 800fa0e:	f7fd fcc5 	bl	800d39c <memp_free>
  }
}
 800fa12:	bf00      	nop
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <tcp_seg_copy+0x1c>
 800fa2a:	4b0f      	ldr	r3, [pc, #60]	; (800fa68 <tcp_seg_copy+0x4c>)
 800fa2c:	f240 6282 	movw	r2, #1666	; 0x682
 800fa30:	490e      	ldr	r1, [pc, #56]	; (800fa6c <tcp_seg_copy+0x50>)
 800fa32:	480f      	ldr	r0, [pc, #60]	; (800fa70 <tcp_seg_copy+0x54>)
 800fa34:	f008 f8fe 	bl	8017c34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fa38:	2003      	movs	r0, #3
 800fa3a:	f7fd fc5d 	bl	800d2f8 <memp_malloc>
 800fa3e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d101      	bne.n	800fa4a <tcp_seg_copy+0x2e>
    return NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	e00a      	b.n	800fa60 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fa4a:	2210      	movs	r2, #16
 800fa4c:	6879      	ldr	r1, [r7, #4]
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f008 f87f 	bl	8017b52 <memcpy>
  pbuf_ref(cseg->p);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fe fbe9 	bl	800e230 <pbuf_ref>
  return cseg;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801a1d0 	.word	0x0801a1d0
 800fa6c:	0801a724 	.word	0x0801a724
 800fa70:	0801a214 	.word	0x0801a214

0800fa74 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
 800fa80:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d109      	bne.n	800fa9c <tcp_recv_null+0x28>
 800fa88:	4b12      	ldr	r3, [pc, #72]	; (800fad4 <tcp_recv_null+0x60>)
 800fa8a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fa8e:	4912      	ldr	r1, [pc, #72]	; (800fad8 <tcp_recv_null+0x64>)
 800fa90:	4812      	ldr	r0, [pc, #72]	; (800fadc <tcp_recv_null+0x68>)
 800fa92:	f008 f8cf 	bl	8017c34 <iprintf>
 800fa96:	f06f 030f 	mvn.w	r3, #15
 800fa9a:	e016      	b.n	800faca <tcp_recv_null+0x56>

  if (p != NULL) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d009      	beq.n	800fab6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	891b      	ldrh	r3, [r3, #8]
 800faa6:	4619      	mov	r1, r3
 800faa8:	68b8      	ldr	r0, [r7, #8]
 800faaa:	f7ff fad3 	bl	800f054 <tcp_recved>
    pbuf_free(p);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7fe fb18 	bl	800e0e4 <pbuf_free>
 800fab4:	e008      	b.n	800fac8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d104      	bne.n	800fac8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fabe:	68b8      	ldr	r0, [r7, #8]
 800fac0:	f7fe ffba 	bl	800ea38 <tcp_close>
 800fac4:	4603      	mov	r3, r0
 800fac6:	e000      	b.n	800faca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	0801a1d0 	.word	0x0801a1d0
 800fad8:	0801a740 	.word	0x0801a740
 800fadc:	0801a214 	.word	0x0801a214

0800fae0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800faea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	db01      	blt.n	800faf6 <tcp_kill_prio+0x16>
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	e000      	b.n	800faf8 <tcp_kill_prio+0x18>
 800faf6:	237f      	movs	r3, #127	; 0x7f
 800faf8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fafa:	7afb      	ldrb	r3, [r7, #11]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d034      	beq.n	800fb6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fb00:	7afb      	ldrb	r3, [r7, #11]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb0e:	4b19      	ldr	r3, [pc, #100]	; (800fb74 <tcp_kill_prio+0x94>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	617b      	str	r3, [r7, #20]
 800fb14:	e01f      	b.n	800fb56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	7d5b      	ldrb	r3, [r3, #21]
 800fb1a:	7afa      	ldrb	r2, [r7, #11]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d80c      	bhi.n	800fb3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fb24:	7afa      	ldrb	r2, [r7, #11]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d112      	bne.n	800fb50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fb2a:	4b13      	ldr	r3, [pc, #76]	; (800fb78 <tcp_kill_prio+0x98>)
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	6a1b      	ldr	r3, [r3, #32]
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d80a      	bhi.n	800fb50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <tcp_kill_prio+0x98>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a1b      	ldr	r3, [r3, #32]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	7d5b      	ldrb	r3, [r3, #21]
 800fb4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	617b      	str	r3, [r7, #20]
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1dc      	bne.n	800fb16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d004      	beq.n	800fb6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fb62:	6938      	ldr	r0, [r7, #16]
 800fb64:	f7ff f8ae 	bl	800ecc4 <tcp_abort>
 800fb68:	e000      	b.n	800fb6c <tcp_kill_prio+0x8c>
    return;
 800fb6a:	bf00      	nop
  }
}
 800fb6c:	3718      	adds	r7, #24
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	2000b714 	.word	0x2000b714
 800fb78:	2000b718 	.word	0x2000b718

0800fb7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	4603      	mov	r3, r0
 800fb84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fb86:	79fb      	ldrb	r3, [r7, #7]
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d009      	beq.n	800fba0 <tcp_kill_state+0x24>
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	2b09      	cmp	r3, #9
 800fb90:	d006      	beq.n	800fba0 <tcp_kill_state+0x24>
 800fb92:	4b1a      	ldr	r3, [pc, #104]	; (800fbfc <tcp_kill_state+0x80>)
 800fb94:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fb98:	4919      	ldr	r1, [pc, #100]	; (800fc00 <tcp_kill_state+0x84>)
 800fb9a:	481a      	ldr	r0, [pc, #104]	; (800fc04 <tcp_kill_state+0x88>)
 800fb9c:	f008 f84a 	bl	8017c34 <iprintf>

  inactivity = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fba4:	2300      	movs	r3, #0
 800fba6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fba8:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <tcp_kill_state+0x8c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	e017      	b.n	800fbe0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
 800fbb4:	79fa      	ldrb	r2, [r7, #7]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d10f      	bne.n	800fbda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fbba:	4b14      	ldr	r3, [pc, #80]	; (800fc0c <tcp_kill_state+0x90>)
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d807      	bhi.n	800fbda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fbca:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <tcp_kill_state+0x90>)
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	617b      	str	r3, [r7, #20]
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1e4      	bne.n	800fbb0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d003      	beq.n	800fbf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fbec:	2100      	movs	r1, #0
 800fbee:	6938      	ldr	r0, [r7, #16]
 800fbf0:	f7fe ffaa 	bl	800eb48 <tcp_abandon>
  }
}
 800fbf4:	bf00      	nop
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	0801a1d0 	.word	0x0801a1d0
 800fc00:	0801a75c 	.word	0x0801a75c
 800fc04:	0801a214 	.word	0x0801a214
 800fc08:	2000b714 	.word	0x2000b714
 800fc0c:	2000b718 	.word	0x2000b718

0800fc10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc1e:	4b12      	ldr	r3, [pc, #72]	; (800fc68 <tcp_kill_timewait+0x58>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e012      	b.n	800fc4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fc26:	4b11      	ldr	r3, [pc, #68]	; (800fc6c <tcp_kill_timewait+0x5c>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6a1b      	ldr	r3, [r3, #32]
 800fc2e:	1ad3      	subs	r3, r2, r3
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d807      	bhi.n	800fc46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fc36:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <tcp_kill_timewait+0x5c>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	1ad3      	subs	r3, r2, r3
 800fc40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1e9      	bne.n	800fc26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d002      	beq.n	800fc5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc58:	68b8      	ldr	r0, [r7, #8]
 800fc5a:	f7ff f833 	bl	800ecc4 <tcp_abort>
  }
}
 800fc5e:	bf00      	nop
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	2000b724 	.word	0x2000b724
 800fc6c:	2000b718 	.word	0x2000b718

0800fc70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fc76:	4b10      	ldr	r3, [pc, #64]	; (800fcb8 <tcp_handle_closepend+0x48>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc7c:	e014      	b.n	800fca8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	8b5b      	ldrh	r3, [r3, #26]
 800fc88:	f003 0308 	and.w	r3, r3, #8
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d009      	beq.n	800fca4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	8b5b      	ldrh	r3, [r3, #26]
 800fc94:	f023 0308 	bic.w	r3, r3, #8
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7fe fe60 	bl	800e964 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1e7      	bne.n	800fc7e <tcp_handle_closepend+0xe>
  }
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	2000b714 	.word	0x2000b714

0800fcbc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	f7fd fb16 	bl	800d2f8 <memp_malloc>
 800fccc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d126      	bne.n	800fd22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fcd4:	f7ff ffcc 	bl	800fc70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fcd8:	f7ff ff9a 	bl	800fc10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcdc:	2001      	movs	r0, #1
 800fcde:	f7fd fb0b 	bl	800d2f8 <memp_malloc>
 800fce2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d11b      	bne.n	800fd22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fcea:	2009      	movs	r0, #9
 800fcec:	f7ff ff46 	bl	800fb7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcf0:	2001      	movs	r0, #1
 800fcf2:	f7fd fb01 	bl	800d2f8 <memp_malloc>
 800fcf6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d111      	bne.n	800fd22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fcfe:	2008      	movs	r0, #8
 800fd00:	f7ff ff3c 	bl	800fb7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd04:	2001      	movs	r0, #1
 800fd06:	f7fd faf7 	bl	800d2f8 <memp_malloc>
 800fd0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d107      	bne.n	800fd22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fd12:	79fb      	ldrb	r3, [r7, #7]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fee3 	bl	800fae0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd1a:	2001      	movs	r0, #1
 800fd1c:	f7fd faec 	bl	800d2f8 <memp_malloc>
 800fd20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d03f      	beq.n	800fda8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fd28:	229c      	movs	r2, #156	; 0x9c
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f007 ff1e 	bl	8017b6e <memset>
    pcb->prio = prio;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	79fa      	ldrb	r2, [r7, #7]
 800fd36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fd3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fd48:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	22ff      	movs	r2, #255	; 0xff
 800fd56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd5e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2206      	movs	r2, #6
 800fd64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2206      	movs	r2, #6
 800fd6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd74:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fd7e:	4b0d      	ldr	r3, [pc, #52]	; (800fdb4 <tcp_alloc+0xf8>)
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <tcp_alloc+0xfc>)
 800fd88:	781a      	ldrb	r2, [r3, #0]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fd94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	4a08      	ldr	r2, [pc, #32]	; (800fdbc <tcp_alloc+0x100>)
 800fd9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	4a07      	ldr	r2, [pc, #28]	; (800fdc0 <tcp_alloc+0x104>)
 800fda4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fda8:	68fb      	ldr	r3, [r7, #12]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	2000b718 	.word	0x2000b718
 800fdb8:	20004aee 	.word	0x20004aee
 800fdbc:	0800fa75 	.word	0x0800fa75
 800fdc0:	006ddd00 	.word	0x006ddd00

0800fdc4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fdce:	2040      	movs	r0, #64	; 0x40
 800fdd0:	f7ff ff74 	bl	800fcbc <tcp_alloc>
 800fdd4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d002      	beq.n	800fdf6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	683a      	ldr	r2, [r7, #0]
 800fdf4:	611a      	str	r2, [r3, #16]
  }
}
 800fdf6:	bf00      	nop
 800fdf8:	370c      	adds	r7, #12
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
	...

0800fe04 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00e      	beq.n	800fe32 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	7d1b      	ldrb	r3, [r3, #20]
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d106      	bne.n	800fe2a <tcp_recv+0x26>
 800fe1c:	4b07      	ldr	r3, [pc, #28]	; (800fe3c <tcp_recv+0x38>)
 800fe1e:	f240 72df 	movw	r2, #2015	; 0x7df
 800fe22:	4907      	ldr	r1, [pc, #28]	; (800fe40 <tcp_recv+0x3c>)
 800fe24:	4807      	ldr	r0, [pc, #28]	; (800fe44 <tcp_recv+0x40>)
 800fe26:	f007 ff05 	bl	8017c34 <iprintf>
    pcb->recv = recv;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fe32:	bf00      	nop
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	0801a1d0 	.word	0x0801a1d0
 800fe40:	0801a76c 	.word	0x0801a76c
 800fe44:	0801a214 	.word	0x0801a214

0800fe48 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00e      	beq.n	800fe76 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	7d1b      	ldrb	r3, [r3, #20]
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d106      	bne.n	800fe6e <tcp_sent+0x26>
 800fe60:	4b07      	ldr	r3, [pc, #28]	; (800fe80 <tcp_sent+0x38>)
 800fe62:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fe66:	4907      	ldr	r1, [pc, #28]	; (800fe84 <tcp_sent+0x3c>)
 800fe68:	4807      	ldr	r0, [pc, #28]	; (800fe88 <tcp_sent+0x40>)
 800fe6a:	f007 fee3 	bl	8017c34 <iprintf>
    pcb->sent = sent;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fe76:	bf00      	nop
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	0801a1d0 	.word	0x0801a1d0
 800fe84:	0801a794 	.word	0x0801a794
 800fe88:	0801a214 	.word	0x0801a214

0800fe8c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00e      	beq.n	800feba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	7d1b      	ldrb	r3, [r3, #20]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d106      	bne.n	800feb2 <tcp_err+0x26>
 800fea4:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <tcp_err+0x38>)
 800fea6:	f640 020d 	movw	r2, #2061	; 0x80d
 800feaa:	4907      	ldr	r1, [pc, #28]	; (800fec8 <tcp_err+0x3c>)
 800feac:	4807      	ldr	r0, [pc, #28]	; (800fecc <tcp_err+0x40>)
 800feae:	f007 fec1 	bl	8017c34 <iprintf>
    pcb->errf = err;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800feba:	bf00      	nop
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	0801a1d0 	.word	0x0801a1d0
 800fec8:	0801a7bc 	.word	0x0801a7bc
 800fecc:	0801a214 	.word	0x0801a214

0800fed0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b085      	sub	sp, #20
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d008      	beq.n	800fef2 <tcp_accept+0x22>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	7d1b      	ldrb	r3, [r3, #20]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d104      	bne.n	800fef2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	619a      	str	r2, [r3, #24]
  }
}
 800fef2:	bf00      	nop
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
	...

0800ff00 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d107      	bne.n	800ff24 <tcp_poll+0x24>
 800ff14:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <tcp_poll+0x50>)
 800ff16:	f640 023d 	movw	r2, #2109	; 0x83d
 800ff1a:	490e      	ldr	r1, [pc, #56]	; (800ff54 <tcp_poll+0x54>)
 800ff1c:	480e      	ldr	r0, [pc, #56]	; (800ff58 <tcp_poll+0x58>)
 800ff1e:	f007 fe89 	bl	8017c34 <iprintf>
 800ff22:	e011      	b.n	800ff48 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	7d1b      	ldrb	r3, [r3, #20]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d106      	bne.n	800ff3a <tcp_poll+0x3a>
 800ff2c:	4b08      	ldr	r3, [pc, #32]	; (800ff50 <tcp_poll+0x50>)
 800ff2e:	f640 023e 	movw	r2, #2110	; 0x83e
 800ff32:	490a      	ldr	r1, [pc, #40]	; (800ff5c <tcp_poll+0x5c>)
 800ff34:	4808      	ldr	r0, [pc, #32]	; (800ff58 <tcp_poll+0x58>)
 800ff36:	f007 fe7d 	bl	8017c34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	79fa      	ldrb	r2, [r7, #7]
 800ff46:	775a      	strb	r2, [r3, #29]
}
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	0801a1d0 	.word	0x0801a1d0
 800ff54:	0801a7e4 	.word	0x0801a7e4
 800ff58:	0801a214 	.word	0x0801a214
 800ff5c:	0801a7fc 	.word	0x0801a7fc

0800ff60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d107      	bne.n	800ff7e <tcp_pcb_purge+0x1e>
 800ff6e:	4b21      	ldr	r3, [pc, #132]	; (800fff4 <tcp_pcb_purge+0x94>)
 800ff70:	f640 0251 	movw	r2, #2129	; 0x851
 800ff74:	4920      	ldr	r1, [pc, #128]	; (800fff8 <tcp_pcb_purge+0x98>)
 800ff76:	4821      	ldr	r0, [pc, #132]	; (800fffc <tcp_pcb_purge+0x9c>)
 800ff78:	f007 fe5c 	bl	8017c34 <iprintf>
 800ff7c:	e037      	b.n	800ffee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	7d1b      	ldrb	r3, [r3, #20]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d033      	beq.n	800ffee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ff8a:	2b0a      	cmp	r3, #10
 800ff8c:	d02f      	beq.n	800ffee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d02b      	beq.n	800ffee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d007      	beq.n	800ffae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe f89e 	bl	800e0e4 <pbuf_free>
      pcb->refused_data = NULL;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d002      	beq.n	800ffbc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f986 	bl	80102c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffc2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7ff fcf9 	bl	800f9c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff fcf4 	bl	800f9c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	66da      	str	r2, [r3, #108]	; 0x6c
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	0801a1d0 	.word	0x0801a1d0
 800fff8:	0801a81c 	.word	0x0801a81c
 800fffc:	0801a214 	.word	0x0801a214

08010000 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d106      	bne.n	801001e <tcp_pcb_remove+0x1e>
 8010010:	4b3e      	ldr	r3, [pc, #248]	; (801010c <tcp_pcb_remove+0x10c>)
 8010012:	f640 0283 	movw	r2, #2179	; 0x883
 8010016:	493e      	ldr	r1, [pc, #248]	; (8010110 <tcp_pcb_remove+0x110>)
 8010018:	483e      	ldr	r0, [pc, #248]	; (8010114 <tcp_pcb_remove+0x114>)
 801001a:	f007 fe0b 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d106      	bne.n	8010032 <tcp_pcb_remove+0x32>
 8010024:	4b39      	ldr	r3, [pc, #228]	; (801010c <tcp_pcb_remove+0x10c>)
 8010026:	f640 0284 	movw	r2, #2180	; 0x884
 801002a:	493b      	ldr	r1, [pc, #236]	; (8010118 <tcp_pcb_remove+0x118>)
 801002c:	4839      	ldr	r0, [pc, #228]	; (8010114 <tcp_pcb_remove+0x114>)
 801002e:	f007 fe01 	bl	8017c34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d105      	bne.n	8010048 <tcp_pcb_remove+0x48>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	68da      	ldr	r2, [r3, #12]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	e013      	b.n	8010070 <tcp_pcb_remove+0x70>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	60fb      	str	r3, [r7, #12]
 801004e:	e00c      	b.n	801006a <tcp_pcb_remove+0x6a>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	683a      	ldr	r2, [r7, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	d104      	bne.n	8010064 <tcp_pcb_remove+0x64>
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	68da      	ldr	r2, [r3, #12]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	60da      	str	r2, [r3, #12]
 8010062:	e005      	b.n	8010070 <tcp_pcb_remove+0x70>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	60fb      	str	r3, [r7, #12]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1ef      	bne.n	8010050 <tcp_pcb_remove+0x50>
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2200      	movs	r2, #0
 8010074:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010076:	6838      	ldr	r0, [r7, #0]
 8010078:	f7ff ff72 	bl	800ff60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	7d1b      	ldrb	r3, [r3, #20]
 8010080:	2b0a      	cmp	r3, #10
 8010082:	d013      	beq.n	80100ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010088:	2b01      	cmp	r3, #1
 801008a:	d00f      	beq.n	80100ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	8b5b      	ldrh	r3, [r3, #26]
 8010090:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010094:	2b00      	cmp	r3, #0
 8010096:	d009      	beq.n	80100ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	8b5b      	ldrh	r3, [r3, #26]
 801009c:	f043 0302 	orr.w	r3, r3, #2
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80100a6:	6838      	ldr	r0, [r7, #0]
 80100a8:	f003 fbc2 	bl	8013830 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	7d1b      	ldrb	r3, [r3, #20]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d020      	beq.n	80100f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d006      	beq.n	80100ca <tcp_pcb_remove+0xca>
 80100bc:	4b13      	ldr	r3, [pc, #76]	; (801010c <tcp_pcb_remove+0x10c>)
 80100be:	f640 0293 	movw	r2, #2195	; 0x893
 80100c2:	4916      	ldr	r1, [pc, #88]	; (801011c <tcp_pcb_remove+0x11c>)
 80100c4:	4813      	ldr	r0, [pc, #76]	; (8010114 <tcp_pcb_remove+0x114>)
 80100c6:	f007 fdb5 	bl	8017c34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d006      	beq.n	80100e0 <tcp_pcb_remove+0xe0>
 80100d2:	4b0e      	ldr	r3, [pc, #56]	; (801010c <tcp_pcb_remove+0x10c>)
 80100d4:	f640 0294 	movw	r2, #2196	; 0x894
 80100d8:	4911      	ldr	r1, [pc, #68]	; (8010120 <tcp_pcb_remove+0x120>)
 80100da:	480e      	ldr	r0, [pc, #56]	; (8010114 <tcp_pcb_remove+0x114>)
 80100dc:	f007 fdaa 	bl	8017c34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d006      	beq.n	80100f6 <tcp_pcb_remove+0xf6>
 80100e8:	4b08      	ldr	r3, [pc, #32]	; (801010c <tcp_pcb_remove+0x10c>)
 80100ea:	f640 0296 	movw	r2, #2198	; 0x896
 80100ee:	490d      	ldr	r1, [pc, #52]	; (8010124 <tcp_pcb_remove+0x124>)
 80100f0:	4808      	ldr	r0, [pc, #32]	; (8010114 <tcp_pcb_remove+0x114>)
 80100f2:	f007 fd9f 	bl	8017c34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2200      	movs	r2, #0
 80100fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2200      	movs	r2, #0
 8010100:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010102:	bf00      	nop
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	0801a1d0 	.word	0x0801a1d0
 8010110:	0801a838 	.word	0x0801a838
 8010114:	0801a214 	.word	0x0801a214
 8010118:	0801a854 	.word	0x0801a854
 801011c:	0801a874 	.word	0x0801a874
 8010120:	0801a88c 	.word	0x0801a88c
 8010124:	0801a8a8 	.word	0x0801a8a8

08010128 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <tcp_next_iss+0x1c>
 8010136:	4b0a      	ldr	r3, [pc, #40]	; (8010160 <tcp_next_iss+0x38>)
 8010138:	f640 02af 	movw	r2, #2223	; 0x8af
 801013c:	4909      	ldr	r1, [pc, #36]	; (8010164 <tcp_next_iss+0x3c>)
 801013e:	480a      	ldr	r0, [pc, #40]	; (8010168 <tcp_next_iss+0x40>)
 8010140:	f007 fd78 	bl	8017c34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010144:	4b09      	ldr	r3, [pc, #36]	; (801016c <tcp_next_iss+0x44>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	4b09      	ldr	r3, [pc, #36]	; (8010170 <tcp_next_iss+0x48>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4413      	add	r3, r2
 801014e:	4a07      	ldr	r2, [pc, #28]	; (801016c <tcp_next_iss+0x44>)
 8010150:	6013      	str	r3, [r2, #0]
  return iss;
 8010152:	4b06      	ldr	r3, [pc, #24]	; (801016c <tcp_next_iss+0x44>)
 8010154:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	0801a1d0 	.word	0x0801a1d0
 8010164:	0801a8c0 	.word	0x0801a8c0
 8010168:	0801a214 	.word	0x0801a214
 801016c:	20000018 	.word	0x20000018
 8010170:	2000b718 	.word	0x2000b718

08010174 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d106      	bne.n	8010196 <tcp_eff_send_mss_netif+0x22>
 8010188:	4b14      	ldr	r3, [pc, #80]	; (80101dc <tcp_eff_send_mss_netif+0x68>)
 801018a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801018e:	4914      	ldr	r1, [pc, #80]	; (80101e0 <tcp_eff_send_mss_netif+0x6c>)
 8010190:	4814      	ldr	r0, [pc, #80]	; (80101e4 <tcp_eff_send_mss_netif+0x70>)
 8010192:	f007 fd4f 	bl	8017c34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801019c:	89fb      	ldrh	r3, [r7, #14]
 801019e:	e019      	b.n	80101d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80101a6:	8afb      	ldrh	r3, [r7, #22]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d012      	beq.n	80101d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80101ac:	2328      	movs	r3, #40	; 0x28
 80101ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80101b0:	8afa      	ldrh	r2, [r7, #22]
 80101b2:	8abb      	ldrh	r3, [r7, #20]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d904      	bls.n	80101c2 <tcp_eff_send_mss_netif+0x4e>
 80101b8:	8afa      	ldrh	r2, [r7, #22]
 80101ba:	8abb      	ldrh	r3, [r7, #20]
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	b29b      	uxth	r3, r3
 80101c0:	e000      	b.n	80101c4 <tcp_eff_send_mss_netif+0x50>
 80101c2:	2300      	movs	r3, #0
 80101c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80101c6:	8a7a      	ldrh	r2, [r7, #18]
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	4293      	cmp	r3, r2
 80101cc:	bf28      	it	cs
 80101ce:	4613      	movcs	r3, r2
 80101d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80101d2:	89fb      	ldrh	r3, [r7, #14]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3718      	adds	r7, #24
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	0801a1d0 	.word	0x0801a1d0
 80101e0:	0801a8dc 	.word	0x0801a8dc
 80101e4:	0801a214 	.word	0x0801a214

080101e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d119      	bne.n	8010230 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80101fc:	4b10      	ldr	r3, [pc, #64]	; (8010240 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80101fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010202:	4910      	ldr	r1, [pc, #64]	; (8010244 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010204:	4810      	ldr	r0, [pc, #64]	; (8010248 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010206:	f007 fd15 	bl	8017c34 <iprintf>

  while (pcb != NULL) {
 801020a:	e011      	b.n	8010230 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	429a      	cmp	r2, r3
 8010216:	d108      	bne.n	801022a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7fe fd50 	bl	800ecc4 <tcp_abort>
      pcb = next;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	e002      	b.n	8010230 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1ea      	bne.n	801020c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010236:	bf00      	nop
 8010238:	bf00      	nop
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	0801a1d0 	.word	0x0801a1d0
 8010244:	0801a904 	.word	0x0801a904
 8010248:	0801a214 	.word	0x0801a214

0801024c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d02a      	beq.n	80102b2 <tcp_netif_ip_addr_changed+0x66>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d026      	beq.n	80102b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010264:	4b15      	ldr	r3, [pc, #84]	; (80102bc <tcp_netif_ip_addr_changed+0x70>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff ffbc 	bl	80101e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010270:	4b13      	ldr	r3, [pc, #76]	; (80102c0 <tcp_netif_ip_addr_changed+0x74>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4619      	mov	r1, r3
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff ffb6 	bl	80101e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d017      	beq.n	80102b2 <tcp_netif_ip_addr_changed+0x66>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d013      	beq.n	80102b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801028a:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <tcp_netif_ip_addr_changed+0x78>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	60fb      	str	r3, [r7, #12]
 8010290:	e00c      	b.n	80102ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	d103      	bne.n	80102a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	60fb      	str	r3, [r7, #12]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1ef      	bne.n	8010292 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80102b2:	bf00      	nop
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	2000b714 	.word	0x2000b714
 80102c0:	2000b720 	.word	0x2000b720
 80102c4:	2000b71c 	.word	0x2000b71c

080102c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff fb6f 	bl	800f9c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80102f0:	b590      	push	{r4, r7, lr}
 80102f2:	b08d      	sub	sp, #52	; 0x34
 80102f4:	af04      	add	r7, sp, #16
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d105      	bne.n	801030c <tcp_input+0x1c>
 8010300:	4b9b      	ldr	r3, [pc, #620]	; (8010570 <tcp_input+0x280>)
 8010302:	2283      	movs	r2, #131	; 0x83
 8010304:	499b      	ldr	r1, [pc, #620]	; (8010574 <tcp_input+0x284>)
 8010306:	489c      	ldr	r0, [pc, #624]	; (8010578 <tcp_input+0x288>)
 8010308:	f007 fc94 	bl	8017c34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	4a9a      	ldr	r2, [pc, #616]	; (801057c <tcp_input+0x28c>)
 8010312:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	895b      	ldrh	r3, [r3, #10]
 8010318:	2b13      	cmp	r3, #19
 801031a:	f240 83c4 	bls.w	8010aa6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801031e:	4b98      	ldr	r3, [pc, #608]	; (8010580 <tcp_input+0x290>)
 8010320:	695b      	ldr	r3, [r3, #20]
 8010322:	4a97      	ldr	r2, [pc, #604]	; (8010580 <tcp_input+0x290>)
 8010324:	6812      	ldr	r2, [r2, #0]
 8010326:	4611      	mov	r1, r2
 8010328:	4618      	mov	r0, r3
 801032a:	f006 f9e1 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 83ba 	bne.w	8010aaa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010336:	4b92      	ldr	r3, [pc, #584]	; (8010580 <tcp_input+0x290>)
 8010338:	695b      	ldr	r3, [r3, #20]
 801033a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801033e:	2be0      	cmp	r3, #224	; 0xe0
 8010340:	f000 83b3 	beq.w	8010aaa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010344:	4b8d      	ldr	r3, [pc, #564]	; (801057c <tcp_input+0x28c>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	899b      	ldrh	r3, [r3, #12]
 801034a:	b29b      	uxth	r3, r3
 801034c:	4618      	mov	r0, r3
 801034e:	f7fc fb1d 	bl	800c98c <lwip_htons>
 8010352:	4603      	mov	r3, r0
 8010354:	0b1b      	lsrs	r3, r3, #12
 8010356:	b29b      	uxth	r3, r3
 8010358:	b2db      	uxtb	r3, r3
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801035e:	7cbb      	ldrb	r3, [r7, #18]
 8010360:	2b13      	cmp	r3, #19
 8010362:	f240 83a4 	bls.w	8010aae <tcp_input+0x7be>
 8010366:	7cbb      	ldrb	r3, [r7, #18]
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	891b      	ldrh	r3, [r3, #8]
 801036e:	429a      	cmp	r2, r3
 8010370:	f200 839d 	bhi.w	8010aae <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010374:	7cbb      	ldrb	r3, [r7, #18]
 8010376:	b29b      	uxth	r3, r3
 8010378:	3b14      	subs	r3, #20
 801037a:	b29a      	uxth	r2, r3
 801037c:	4b81      	ldr	r3, [pc, #516]	; (8010584 <tcp_input+0x294>)
 801037e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010380:	4b81      	ldr	r3, [pc, #516]	; (8010588 <tcp_input+0x298>)
 8010382:	2200      	movs	r2, #0
 8010384:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	895a      	ldrh	r2, [r3, #10]
 801038a:	7cbb      	ldrb	r3, [r7, #18]
 801038c:	b29b      	uxth	r3, r3
 801038e:	429a      	cmp	r2, r3
 8010390:	d309      	bcc.n	80103a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010392:	4b7c      	ldr	r3, [pc, #496]	; (8010584 <tcp_input+0x294>)
 8010394:	881a      	ldrh	r2, [r3, #0]
 8010396:	4b7d      	ldr	r3, [pc, #500]	; (801058c <tcp_input+0x29c>)
 8010398:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801039a:	7cbb      	ldrb	r3, [r7, #18]
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7fd fe1a 	bl	800dfd8 <pbuf_remove_header>
 80103a4:	e04e      	b.n	8010444 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d105      	bne.n	80103ba <tcp_input+0xca>
 80103ae:	4b70      	ldr	r3, [pc, #448]	; (8010570 <tcp_input+0x280>)
 80103b0:	22c2      	movs	r2, #194	; 0xc2
 80103b2:	4977      	ldr	r1, [pc, #476]	; (8010590 <tcp_input+0x2a0>)
 80103b4:	4870      	ldr	r0, [pc, #448]	; (8010578 <tcp_input+0x288>)
 80103b6:	f007 fc3d 	bl	8017c34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80103ba:	2114      	movs	r1, #20
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7fd fe0b 	bl	800dfd8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	895a      	ldrh	r2, [r3, #10]
 80103c6:	4b71      	ldr	r3, [pc, #452]	; (801058c <tcp_input+0x29c>)
 80103c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80103ca:	4b6e      	ldr	r3, [pc, #440]	; (8010584 <tcp_input+0x294>)
 80103cc:	881a      	ldrh	r2, [r3, #0]
 80103ce:	4b6f      	ldr	r3, [pc, #444]	; (801058c <tcp_input+0x29c>)
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80103d6:	4b6d      	ldr	r3, [pc, #436]	; (801058c <tcp_input+0x29c>)
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	4619      	mov	r1, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7fd fdfb 	bl	800dfd8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	895b      	ldrh	r3, [r3, #10]
 80103e8:	8a3a      	ldrh	r2, [r7, #16]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	f200 8361 	bhi.w	8010ab2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	4a64      	ldr	r2, [pc, #400]	; (8010588 <tcp_input+0x298>)
 80103f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	8a3a      	ldrh	r2, [r7, #16]
 8010400:	4611      	mov	r1, r2
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd fde8 	bl	800dfd8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	891a      	ldrh	r2, [r3, #8]
 801040c:	8a3b      	ldrh	r3, [r7, #16]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	b29a      	uxth	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	895b      	ldrh	r3, [r3, #10]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d005      	beq.n	801042a <tcp_input+0x13a>
 801041e:	4b54      	ldr	r3, [pc, #336]	; (8010570 <tcp_input+0x280>)
 8010420:	22df      	movs	r2, #223	; 0xdf
 8010422:	495c      	ldr	r1, [pc, #368]	; (8010594 <tcp_input+0x2a4>)
 8010424:	4854      	ldr	r0, [pc, #336]	; (8010578 <tcp_input+0x288>)
 8010426:	f007 fc05 	bl	8017c34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	891a      	ldrh	r2, [r3, #8]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	891b      	ldrh	r3, [r3, #8]
 8010434:	429a      	cmp	r2, r3
 8010436:	d005      	beq.n	8010444 <tcp_input+0x154>
 8010438:	4b4d      	ldr	r3, [pc, #308]	; (8010570 <tcp_input+0x280>)
 801043a:	22e0      	movs	r2, #224	; 0xe0
 801043c:	4956      	ldr	r1, [pc, #344]	; (8010598 <tcp_input+0x2a8>)
 801043e:	484e      	ldr	r0, [pc, #312]	; (8010578 <tcp_input+0x288>)
 8010440:	f007 fbf8 	bl	8017c34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010444:	4b4d      	ldr	r3, [pc, #308]	; (801057c <tcp_input+0x28c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	b29b      	uxth	r3, r3
 801044c:	4a4b      	ldr	r2, [pc, #300]	; (801057c <tcp_input+0x28c>)
 801044e:	6814      	ldr	r4, [r2, #0]
 8010450:	4618      	mov	r0, r3
 8010452:	f7fc fa9b 	bl	800c98c <lwip_htons>
 8010456:	4603      	mov	r3, r0
 8010458:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801045a:	4b48      	ldr	r3, [pc, #288]	; (801057c <tcp_input+0x28c>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	885b      	ldrh	r3, [r3, #2]
 8010460:	b29b      	uxth	r3, r3
 8010462:	4a46      	ldr	r2, [pc, #280]	; (801057c <tcp_input+0x28c>)
 8010464:	6814      	ldr	r4, [r2, #0]
 8010466:	4618      	mov	r0, r3
 8010468:	f7fc fa90 	bl	800c98c <lwip_htons>
 801046c:	4603      	mov	r3, r0
 801046e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010470:	4b42      	ldr	r3, [pc, #264]	; (801057c <tcp_input+0x28c>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	4a41      	ldr	r2, [pc, #260]	; (801057c <tcp_input+0x28c>)
 8010478:	6814      	ldr	r4, [r2, #0]
 801047a:	4618      	mov	r0, r3
 801047c:	f7fc fa9b 	bl	800c9b6 <lwip_htonl>
 8010480:	4603      	mov	r3, r0
 8010482:	6063      	str	r3, [r4, #4]
 8010484:	6863      	ldr	r3, [r4, #4]
 8010486:	4a45      	ldr	r2, [pc, #276]	; (801059c <tcp_input+0x2ac>)
 8010488:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801048a:	4b3c      	ldr	r3, [pc, #240]	; (801057c <tcp_input+0x28c>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	4a3a      	ldr	r2, [pc, #232]	; (801057c <tcp_input+0x28c>)
 8010492:	6814      	ldr	r4, [r2, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	f7fc fa8e 	bl	800c9b6 <lwip_htonl>
 801049a:	4603      	mov	r3, r0
 801049c:	60a3      	str	r3, [r4, #8]
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	4a3f      	ldr	r2, [pc, #252]	; (80105a0 <tcp_input+0x2b0>)
 80104a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80104a4:	4b35      	ldr	r3, [pc, #212]	; (801057c <tcp_input+0x28c>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	89db      	ldrh	r3, [r3, #14]
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	4a33      	ldr	r2, [pc, #204]	; (801057c <tcp_input+0x28c>)
 80104ae:	6814      	ldr	r4, [r2, #0]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fc fa6b 	bl	800c98c <lwip_htons>
 80104b6:	4603      	mov	r3, r0
 80104b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80104ba:	4b30      	ldr	r3, [pc, #192]	; (801057c <tcp_input+0x28c>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	899b      	ldrh	r3, [r3, #12]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fc fa62 	bl	800c98c <lwip_htons>
 80104c8:	4603      	mov	r3, r0
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	4b34      	ldr	r3, [pc, #208]	; (80105a4 <tcp_input+0x2b4>)
 80104d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	891a      	ldrh	r2, [r3, #8]
 80104da:	4b33      	ldr	r3, [pc, #204]	; (80105a8 <tcp_input+0x2b8>)
 80104dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80104de:	4b31      	ldr	r3, [pc, #196]	; (80105a4 <tcp_input+0x2b4>)
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	f003 0303 	and.w	r3, r3, #3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00c      	beq.n	8010504 <tcp_input+0x214>
    tcplen++;
 80104ea:	4b2f      	ldr	r3, [pc, #188]	; (80105a8 <tcp_input+0x2b8>)
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	3301      	adds	r3, #1
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	4b2d      	ldr	r3, [pc, #180]	; (80105a8 <tcp_input+0x2b8>)
 80104f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	891a      	ldrh	r2, [r3, #8]
 80104fa:	4b2b      	ldr	r3, [pc, #172]	; (80105a8 <tcp_input+0x2b8>)
 80104fc:	881b      	ldrh	r3, [r3, #0]
 80104fe:	429a      	cmp	r2, r3
 8010500:	f200 82d9 	bhi.w	8010ab6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010504:	2300      	movs	r3, #0
 8010506:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010508:	4b28      	ldr	r3, [pc, #160]	; (80105ac <tcp_input+0x2bc>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	61fb      	str	r3, [r7, #28]
 801050e:	e09d      	b.n	801064c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	7d1b      	ldrb	r3, [r3, #20]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d105      	bne.n	8010524 <tcp_input+0x234>
 8010518:	4b15      	ldr	r3, [pc, #84]	; (8010570 <tcp_input+0x280>)
 801051a:	22fb      	movs	r2, #251	; 0xfb
 801051c:	4924      	ldr	r1, [pc, #144]	; (80105b0 <tcp_input+0x2c0>)
 801051e:	4816      	ldr	r0, [pc, #88]	; (8010578 <tcp_input+0x288>)
 8010520:	f007 fb88 	bl	8017c34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	7d1b      	ldrb	r3, [r3, #20]
 8010528:	2b0a      	cmp	r3, #10
 801052a:	d105      	bne.n	8010538 <tcp_input+0x248>
 801052c:	4b10      	ldr	r3, [pc, #64]	; (8010570 <tcp_input+0x280>)
 801052e:	22fc      	movs	r2, #252	; 0xfc
 8010530:	4920      	ldr	r1, [pc, #128]	; (80105b4 <tcp_input+0x2c4>)
 8010532:	4811      	ldr	r0, [pc, #68]	; (8010578 <tcp_input+0x288>)
 8010534:	f007 fb7e 	bl	8017c34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	7d1b      	ldrb	r3, [r3, #20]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d105      	bne.n	801054c <tcp_input+0x25c>
 8010540:	4b0b      	ldr	r3, [pc, #44]	; (8010570 <tcp_input+0x280>)
 8010542:	22fd      	movs	r2, #253	; 0xfd
 8010544:	491c      	ldr	r1, [pc, #112]	; (80105b8 <tcp_input+0x2c8>)
 8010546:	480c      	ldr	r0, [pc, #48]	; (8010578 <tcp_input+0x288>)
 8010548:	f007 fb74 	bl	8017c34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	7a1b      	ldrb	r3, [r3, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d033      	beq.n	80105bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	7a1a      	ldrb	r2, [r3, #8]
 8010558:	4b09      	ldr	r3, [pc, #36]	; (8010580 <tcp_input+0x290>)
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010560:	3301      	adds	r3, #1
 8010562:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010564:	429a      	cmp	r2, r3
 8010566:	d029      	beq.n	80105bc <tcp_input+0x2cc>
      prev = pcb;
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	61bb      	str	r3, [r7, #24]
      continue;
 801056c:	e06b      	b.n	8010646 <tcp_input+0x356>
 801056e:	bf00      	nop
 8010570:	0801a938 	.word	0x0801a938
 8010574:	0801a96c 	.word	0x0801a96c
 8010578:	0801a984 	.word	0x0801a984
 801057c:	20004b00 	.word	0x20004b00
 8010580:	20008000 	.word	0x20008000
 8010584:	20004b04 	.word	0x20004b04
 8010588:	20004b08 	.word	0x20004b08
 801058c:	20004b06 	.word	0x20004b06
 8010590:	0801a9ac 	.word	0x0801a9ac
 8010594:	0801a9bc 	.word	0x0801a9bc
 8010598:	0801a9c8 	.word	0x0801a9c8
 801059c:	20004b10 	.word	0x20004b10
 80105a0:	20004b14 	.word	0x20004b14
 80105a4:	20004b1c 	.word	0x20004b1c
 80105a8:	20004b1a 	.word	0x20004b1a
 80105ac:	2000b714 	.word	0x2000b714
 80105b0:	0801a9e8 	.word	0x0801a9e8
 80105b4:	0801aa10 	.word	0x0801aa10
 80105b8:	0801aa3c 	.word	0x0801aa3c
    }

    if (pcb->remote_port == tcphdr->src &&
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	8b1a      	ldrh	r2, [r3, #24]
 80105c0:	4b94      	ldr	r3, [pc, #592]	; (8010814 <tcp_input+0x524>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d13a      	bne.n	8010642 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	8ada      	ldrh	r2, [r3, #22]
 80105d0:	4b90      	ldr	r3, [pc, #576]	; (8010814 <tcp_input+0x524>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	885b      	ldrh	r3, [r3, #2]
 80105d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80105d8:	429a      	cmp	r2, r3
 80105da:	d132      	bne.n	8010642 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	685a      	ldr	r2, [r3, #4]
 80105e0:	4b8d      	ldr	r3, [pc, #564]	; (8010818 <tcp_input+0x528>)
 80105e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d12c      	bne.n	8010642 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	4b8a      	ldr	r3, [pc, #552]	; (8010818 <tcp_input+0x528>)
 80105ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d126      	bne.n	8010642 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	69fa      	ldr	r2, [r7, #28]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d106      	bne.n	801060c <tcp_input+0x31c>
 80105fe:	4b87      	ldr	r3, [pc, #540]	; (801081c <tcp_input+0x52c>)
 8010600:	f240 120d 	movw	r2, #269	; 0x10d
 8010604:	4986      	ldr	r1, [pc, #536]	; (8010820 <tcp_input+0x530>)
 8010606:	4887      	ldr	r0, [pc, #540]	; (8010824 <tcp_input+0x534>)
 8010608:	f007 fb14 	bl	8017c34 <iprintf>
      if (prev != NULL) {
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00a      	beq.n	8010628 <tcp_input+0x338>
        prev->next = pcb->next;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	68da      	ldr	r2, [r3, #12]
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801061a:	4b83      	ldr	r3, [pc, #524]	; (8010828 <tcp_input+0x538>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010622:	4a81      	ldr	r2, [pc, #516]	; (8010828 <tcp_input+0x538>)
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	69fa      	ldr	r2, [r7, #28]
 801062e:	429a      	cmp	r2, r3
 8010630:	d111      	bne.n	8010656 <tcp_input+0x366>
 8010632:	4b7a      	ldr	r3, [pc, #488]	; (801081c <tcp_input+0x52c>)
 8010634:	f240 1215 	movw	r2, #277	; 0x115
 8010638:	497c      	ldr	r1, [pc, #496]	; (801082c <tcp_input+0x53c>)
 801063a:	487a      	ldr	r0, [pc, #488]	; (8010824 <tcp_input+0x534>)
 801063c:	f007 fafa 	bl	8017c34 <iprintf>
      break;
 8010640:	e009      	b.n	8010656 <tcp_input+0x366>
    }
    prev = pcb;
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	61fb      	str	r3, [r7, #28]
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	2b00      	cmp	r3, #0
 8010650:	f47f af5e 	bne.w	8010510 <tcp_input+0x220>
 8010654:	e000      	b.n	8010658 <tcp_input+0x368>
      break;
 8010656:	bf00      	nop
  }

  if (pcb == NULL) {
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f040 8095 	bne.w	801078a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010660:	4b73      	ldr	r3, [pc, #460]	; (8010830 <tcp_input+0x540>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	61fb      	str	r3, [r7, #28]
 8010666:	e03f      	b.n	80106e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	7d1b      	ldrb	r3, [r3, #20]
 801066c:	2b0a      	cmp	r3, #10
 801066e:	d006      	beq.n	801067e <tcp_input+0x38e>
 8010670:	4b6a      	ldr	r3, [pc, #424]	; (801081c <tcp_input+0x52c>)
 8010672:	f240 121f 	movw	r2, #287	; 0x11f
 8010676:	496f      	ldr	r1, [pc, #444]	; (8010834 <tcp_input+0x544>)
 8010678:	486a      	ldr	r0, [pc, #424]	; (8010824 <tcp_input+0x534>)
 801067a:	f007 fadb 	bl	8017c34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	7a1b      	ldrb	r3, [r3, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d009      	beq.n	801069a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	7a1a      	ldrb	r2, [r3, #8]
 801068a:	4b63      	ldr	r3, [pc, #396]	; (8010818 <tcp_input+0x528>)
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010692:	3301      	adds	r3, #1
 8010694:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010696:	429a      	cmp	r2, r3
 8010698:	d122      	bne.n	80106e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	8b1a      	ldrh	r2, [r3, #24]
 801069e:	4b5d      	ldr	r3, [pc, #372]	; (8010814 <tcp_input+0x524>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	881b      	ldrh	r3, [r3, #0]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d11b      	bne.n	80106e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	8ada      	ldrh	r2, [r3, #22]
 80106ae:	4b59      	ldr	r3, [pc, #356]	; (8010814 <tcp_input+0x524>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	885b      	ldrh	r3, [r3, #2]
 80106b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d113      	bne.n	80106e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	4b56      	ldr	r3, [pc, #344]	; (8010818 <tcp_input+0x528>)
 80106c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d10d      	bne.n	80106e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	4b53      	ldr	r3, [pc, #332]	; (8010818 <tcp_input+0x528>)
 80106cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d107      	bne.n	80106e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80106d2:	69f8      	ldr	r0, [r7, #28]
 80106d4:	f000 fb54 	bl	8010d80 <tcp_timewait_input>
        }
        pbuf_free(p);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7fd fd03 	bl	800e0e4 <pbuf_free>
        return;
 80106de:	e1f0      	b.n	8010ac2 <tcp_input+0x7d2>
        continue;
 80106e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	61fb      	str	r3, [r7, #28]
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1bc      	bne.n	8010668 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106f2:	4b51      	ldr	r3, [pc, #324]	; (8010838 <tcp_input+0x548>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	617b      	str	r3, [r7, #20]
 80106f8:	e02a      	b.n	8010750 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	7a1b      	ldrb	r3, [r3, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00c      	beq.n	801071c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	7a1a      	ldrb	r2, [r3, #8]
 8010706:	4b44      	ldr	r3, [pc, #272]	; (8010818 <tcp_input+0x528>)
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801070e:	3301      	adds	r3, #1
 8010710:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010712:	429a      	cmp	r2, r3
 8010714:	d002      	beq.n	801071c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	61bb      	str	r3, [r7, #24]
        continue;
 801071a:	e016      	b.n	801074a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	8ada      	ldrh	r2, [r3, #22]
 8010720:	4b3c      	ldr	r3, [pc, #240]	; (8010814 <tcp_input+0x524>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	885b      	ldrh	r3, [r3, #2]
 8010726:	b29b      	uxth	r3, r3
 8010728:	429a      	cmp	r2, r3
 801072a:	d10c      	bne.n	8010746 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	4b39      	ldr	r3, [pc, #228]	; (8010818 <tcp_input+0x528>)
 8010732:	695b      	ldr	r3, [r3, #20]
 8010734:	429a      	cmp	r2, r3
 8010736:	d00f      	beq.n	8010758 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00d      	beq.n	801075a <tcp_input+0x46a>
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d009      	beq.n	801075a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	617b      	str	r3, [r7, #20]
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1d1      	bne.n	80106fa <tcp_input+0x40a>
 8010756:	e000      	b.n	801075a <tcp_input+0x46a>
            break;
 8010758:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d014      	beq.n	801078a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00a      	beq.n	801077c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	68da      	ldr	r2, [r3, #12]
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801076e:	4b32      	ldr	r3, [pc, #200]	; (8010838 <tcp_input+0x548>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010776:	4a30      	ldr	r2, [pc, #192]	; (8010838 <tcp_input+0x548>)
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801077c:	6978      	ldr	r0, [r7, #20]
 801077e:	f000 fa01 	bl	8010b84 <tcp_listen_input>
      }
      pbuf_free(p);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7fd fcae 	bl	800e0e4 <pbuf_free>
      return;
 8010788:	e19b      	b.n	8010ac2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	2b00      	cmp	r3, #0
 801078e:	f000 8160 	beq.w	8010a52 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010792:	4b2a      	ldr	r3, [pc, #168]	; (801083c <tcp_input+0x54c>)
 8010794:	2200      	movs	r2, #0
 8010796:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	891a      	ldrh	r2, [r3, #8]
 801079c:	4b27      	ldr	r3, [pc, #156]	; (801083c <tcp_input+0x54c>)
 801079e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80107a0:	4a26      	ldr	r2, [pc, #152]	; (801083c <tcp_input+0x54c>)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80107a6:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <tcp_input+0x524>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4a24      	ldr	r2, [pc, #144]	; (801083c <tcp_input+0x54c>)
 80107ac:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80107ae:	4b24      	ldr	r3, [pc, #144]	; (8010840 <tcp_input+0x550>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80107b4:	4b23      	ldr	r3, [pc, #140]	; (8010844 <tcp_input+0x554>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80107ba:	4b23      	ldr	r3, [pc, #140]	; (8010848 <tcp_input+0x558>)
 80107bc:	2200      	movs	r2, #0
 80107be:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80107c0:	4b22      	ldr	r3, [pc, #136]	; (801084c <tcp_input+0x55c>)
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	f003 0308 	and.w	r3, r3, #8
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d006      	beq.n	80107da <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	7b5b      	ldrb	r3, [r3, #13]
 80107d0:	f043 0301 	orr.w	r3, r3, #1
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d038      	beq.n	8010854 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107e2:	69f8      	ldr	r0, [r7, #28]
 80107e4:	f7ff f870 	bl	800f8c8 <tcp_process_refused_data>
 80107e8:	4603      	mov	r3, r0
 80107ea:	f113 0f0d 	cmn.w	r3, #13
 80107ee:	d007      	beq.n	8010800 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d02d      	beq.n	8010854 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <tcp_input+0x560>)
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d029      	beq.n	8010854 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010804:	2b00      	cmp	r3, #0
 8010806:	f040 8104 	bne.w	8010a12 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801080a:	69f8      	ldr	r0, [r7, #28]
 801080c:	f003 fe16 	bl	801443c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010810:	e0ff      	b.n	8010a12 <tcp_input+0x722>
 8010812:	bf00      	nop
 8010814:	20004b00 	.word	0x20004b00
 8010818:	20008000 	.word	0x20008000
 801081c:	0801a938 	.word	0x0801a938
 8010820:	0801aa64 	.word	0x0801aa64
 8010824:	0801a984 	.word	0x0801a984
 8010828:	2000b714 	.word	0x2000b714
 801082c:	0801aa90 	.word	0x0801aa90
 8010830:	2000b724 	.word	0x2000b724
 8010834:	0801aabc 	.word	0x0801aabc
 8010838:	2000b71c 	.word	0x2000b71c
 801083c:	20004af0 	.word	0x20004af0
 8010840:	20004b20 	.word	0x20004b20
 8010844:	20004b1d 	.word	0x20004b1d
 8010848:	20004b18 	.word	0x20004b18
 801084c:	20004b1c 	.word	0x20004b1c
 8010850:	20004b1a 	.word	0x20004b1a
      }
    }
    tcp_input_pcb = pcb;
 8010854:	4a9c      	ldr	r2, [pc, #624]	; (8010ac8 <tcp_input+0x7d8>)
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801085a:	69f8      	ldr	r0, [r7, #28]
 801085c:	f000 fb0a 	bl	8010e74 <tcp_process>
 8010860:	4603      	mov	r3, r0
 8010862:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010864:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010868:	f113 0f0d 	cmn.w	r3, #13
 801086c:	f000 80d3 	beq.w	8010a16 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010870:	4b96      	ldr	r3, [pc, #600]	; (8010acc <tcp_input+0x7dc>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f003 0308 	and.w	r3, r3, #8
 8010878:	2b00      	cmp	r3, #0
 801087a:	d015      	beq.n	80108a8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010882:	2b00      	cmp	r3, #0
 8010884:	d008      	beq.n	8010898 <tcp_input+0x5a8>
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088c:	69fa      	ldr	r2, [r7, #28]
 801088e:	6912      	ldr	r2, [r2, #16]
 8010890:	f06f 010d 	mvn.w	r1, #13
 8010894:	4610      	mov	r0, r2
 8010896:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010898:	69f9      	ldr	r1, [r7, #28]
 801089a:	488d      	ldr	r0, [pc, #564]	; (8010ad0 <tcp_input+0x7e0>)
 801089c:	f7ff fbb0 	bl	8010000 <tcp_pcb_remove>
        tcp_free(pcb);
 80108a0:	69f8      	ldr	r0, [r7, #28]
 80108a2:	f7fd fecb 	bl	800e63c <tcp_free>
 80108a6:	e0c1      	b.n	8010a2c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80108ac:	4b89      	ldr	r3, [pc, #548]	; (8010ad4 <tcp_input+0x7e4>)
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d01d      	beq.n	80108f0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80108b4:	4b87      	ldr	r3, [pc, #540]	; (8010ad4 <tcp_input+0x7e4>)
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d00a      	beq.n	80108da <tcp_input+0x5ea>
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ca:	69fa      	ldr	r2, [r7, #28]
 80108cc:	6910      	ldr	r0, [r2, #16]
 80108ce:	89fa      	ldrh	r2, [r7, #14]
 80108d0:	69f9      	ldr	r1, [r7, #28]
 80108d2:	4798      	blx	r3
 80108d4:	4603      	mov	r3, r0
 80108d6:	74fb      	strb	r3, [r7, #19]
 80108d8:	e001      	b.n	80108de <tcp_input+0x5ee>
 80108da:	2300      	movs	r3, #0
 80108dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80108de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108e2:	f113 0f0d 	cmn.w	r3, #13
 80108e6:	f000 8098 	beq.w	8010a1a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80108ea:	4b7a      	ldr	r3, [pc, #488]	; (8010ad4 <tcp_input+0x7e4>)
 80108ec:	2200      	movs	r2, #0
 80108ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80108f0:	69f8      	ldr	r0, [r7, #28]
 80108f2:	f000 f907 	bl	8010b04 <tcp_input_delayed_close>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f040 8090 	bne.w	8010a1e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80108fe:	4b76      	ldr	r3, [pc, #472]	; (8010ad8 <tcp_input+0x7e8>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d041      	beq.n	801098a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801090a:	2b00      	cmp	r3, #0
 801090c:	d006      	beq.n	801091c <tcp_input+0x62c>
 801090e:	4b73      	ldr	r3, [pc, #460]	; (8010adc <tcp_input+0x7ec>)
 8010910:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010914:	4972      	ldr	r1, [pc, #456]	; (8010ae0 <tcp_input+0x7f0>)
 8010916:	4873      	ldr	r0, [pc, #460]	; (8010ae4 <tcp_input+0x7f4>)
 8010918:	f007 f98c 	bl	8017c34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	8b5b      	ldrh	r3, [r3, #26]
 8010920:	f003 0310 	and.w	r3, r3, #16
 8010924:	2b00      	cmp	r3, #0
 8010926:	d008      	beq.n	801093a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010928:	4b6b      	ldr	r3, [pc, #428]	; (8010ad8 <tcp_input+0x7e8>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	f7fd fbd9 	bl	800e0e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010932:	69f8      	ldr	r0, [r7, #28]
 8010934:	f7fe f9c6 	bl	800ecc4 <tcp_abort>
            goto aborted;
 8010938:	e078      	b.n	8010a2c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00c      	beq.n	801095e <tcp_input+0x66e>
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	6918      	ldr	r0, [r3, #16]
 801094e:	4b62      	ldr	r3, [pc, #392]	; (8010ad8 <tcp_input+0x7e8>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	2300      	movs	r3, #0
 8010954:	69f9      	ldr	r1, [r7, #28]
 8010956:	47a0      	blx	r4
 8010958:	4603      	mov	r3, r0
 801095a:	74fb      	strb	r3, [r7, #19]
 801095c:	e008      	b.n	8010970 <tcp_input+0x680>
 801095e:	4b5e      	ldr	r3, [pc, #376]	; (8010ad8 <tcp_input+0x7e8>)
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	2300      	movs	r3, #0
 8010964:	69f9      	ldr	r1, [r7, #28]
 8010966:	2000      	movs	r0, #0
 8010968:	f7ff f884 	bl	800fa74 <tcp_recv_null>
 801096c:	4603      	mov	r3, r0
 801096e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010974:	f113 0f0d 	cmn.w	r3, #13
 8010978:	d053      	beq.n	8010a22 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801097a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010982:	4b55      	ldr	r3, [pc, #340]	; (8010ad8 <tcp_input+0x7e8>)
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801098a:	4b50      	ldr	r3, [pc, #320]	; (8010acc <tcp_input+0x7dc>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	f003 0320 	and.w	r3, r3, #32
 8010992:	2b00      	cmp	r3, #0
 8010994:	d030      	beq.n	80109f8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801099a:	2b00      	cmp	r3, #0
 801099c:	d009      	beq.n	80109b2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109a2:	7b5a      	ldrb	r2, [r3, #13]
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109a8:	f042 0220 	orr.w	r2, r2, #32
 80109ac:	b2d2      	uxtb	r2, r2
 80109ae:	735a      	strb	r2, [r3, #13]
 80109b0:	e022      	b.n	80109f8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109ba:	d005      	beq.n	80109c8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109c0:	3301      	adds	r3, #1
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00b      	beq.n	80109ea <tcp_input+0x6fa>
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	6918      	ldr	r0, [r3, #16]
 80109dc:	2300      	movs	r3, #0
 80109de:	2200      	movs	r2, #0
 80109e0:	69f9      	ldr	r1, [r7, #28]
 80109e2:	47a0      	blx	r4
 80109e4:	4603      	mov	r3, r0
 80109e6:	74fb      	strb	r3, [r7, #19]
 80109e8:	e001      	b.n	80109ee <tcp_input+0x6fe>
 80109ea:	2300      	movs	r3, #0
 80109ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80109ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80109f2:	f113 0f0d 	cmn.w	r3, #13
 80109f6:	d016      	beq.n	8010a26 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80109f8:	4b33      	ldr	r3, [pc, #204]	; (8010ac8 <tcp_input+0x7d8>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80109fe:	69f8      	ldr	r0, [r7, #28]
 8010a00:	f000 f880 	bl	8010b04 <tcp_input_delayed_close>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10f      	bne.n	8010a2a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010a0a:	69f8      	ldr	r0, [r7, #28]
 8010a0c:	f002 ff10 	bl	8013830 <tcp_output>
 8010a10:	e00c      	b.n	8010a2c <tcp_input+0x73c>
        goto aborted;
 8010a12:	bf00      	nop
 8010a14:	e00a      	b.n	8010a2c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010a16:	bf00      	nop
 8010a18:	e008      	b.n	8010a2c <tcp_input+0x73c>
              goto aborted;
 8010a1a:	bf00      	nop
 8010a1c:	e006      	b.n	8010a2c <tcp_input+0x73c>
          goto aborted;
 8010a1e:	bf00      	nop
 8010a20:	e004      	b.n	8010a2c <tcp_input+0x73c>
            goto aborted;
 8010a22:	bf00      	nop
 8010a24:	e002      	b.n	8010a2c <tcp_input+0x73c>
              goto aborted;
 8010a26:	bf00      	nop
 8010a28:	e000      	b.n	8010a2c <tcp_input+0x73c>
          goto aborted;
 8010a2a:	bf00      	nop
    tcp_input_pcb = NULL;
 8010a2c:	4b26      	ldr	r3, [pc, #152]	; (8010ac8 <tcp_input+0x7d8>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010a32:	4b29      	ldr	r3, [pc, #164]	; (8010ad8 <tcp_input+0x7e8>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010a38:	4b2b      	ldr	r3, [pc, #172]	; (8010ae8 <tcp_input+0x7f8>)
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d03f      	beq.n	8010ac0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010a40:	4b29      	ldr	r3, [pc, #164]	; (8010ae8 <tcp_input+0x7f8>)
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fd fb4d 	bl	800e0e4 <pbuf_free>
      inseg.p = NULL;
 8010a4a:	4b27      	ldr	r3, [pc, #156]	; (8010ae8 <tcp_input+0x7f8>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010a50:	e036      	b.n	8010ac0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010a52:	4b26      	ldr	r3, [pc, #152]	; (8010aec <tcp_input+0x7fc>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	899b      	ldrh	r3, [r3, #12]
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fb ff96 	bl	800c98c <lwip_htons>
 8010a60:	4603      	mov	r3, r0
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	f003 0304 	and.w	r3, r3, #4
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d118      	bne.n	8010a9e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a6c:	4b20      	ldr	r3, [pc, #128]	; (8010af0 <tcp_input+0x800>)
 8010a6e:	6819      	ldr	r1, [r3, #0]
 8010a70:	4b20      	ldr	r3, [pc, #128]	; (8010af4 <tcp_input+0x804>)
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	461a      	mov	r2, r3
 8010a76:	4b20      	ldr	r3, [pc, #128]	; (8010af8 <tcp_input+0x808>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a7c:	4b1b      	ldr	r3, [pc, #108]	; (8010aec <tcp_input+0x7fc>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a80:	885b      	ldrh	r3, [r3, #2]
 8010a82:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a84:	4a19      	ldr	r2, [pc, #100]	; (8010aec <tcp_input+0x7fc>)
 8010a86:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a88:	8812      	ldrh	r2, [r2, #0]
 8010a8a:	b292      	uxth	r2, r2
 8010a8c:	9202      	str	r2, [sp, #8]
 8010a8e:	9301      	str	r3, [sp, #4]
 8010a90:	4b1a      	ldr	r3, [pc, #104]	; (8010afc <tcp_input+0x80c>)
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	4b1a      	ldr	r3, [pc, #104]	; (8010b00 <tcp_input+0x810>)
 8010a96:	4602      	mov	r2, r0
 8010a98:	2000      	movs	r0, #0
 8010a9a:	f003 fc7d 	bl	8014398 <tcp_rst>
    pbuf_free(p);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7fd fb20 	bl	800e0e4 <pbuf_free>
  return;
 8010aa4:	e00c      	b.n	8010ac0 <tcp_input+0x7d0>
    goto dropped;
 8010aa6:	bf00      	nop
 8010aa8:	e006      	b.n	8010ab8 <tcp_input+0x7c8>
    goto dropped;
 8010aaa:	bf00      	nop
 8010aac:	e004      	b.n	8010ab8 <tcp_input+0x7c8>
    goto dropped;
 8010aae:	bf00      	nop
 8010ab0:	e002      	b.n	8010ab8 <tcp_input+0x7c8>
      goto dropped;
 8010ab2:	bf00      	nop
 8010ab4:	e000      	b.n	8010ab8 <tcp_input+0x7c8>
      goto dropped;
 8010ab6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7fd fb13 	bl	800e0e4 <pbuf_free>
 8010abe:	e000      	b.n	8010ac2 <tcp_input+0x7d2>
  return;
 8010ac0:	bf00      	nop
}
 8010ac2:	3724      	adds	r7, #36	; 0x24
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd90      	pop	{r4, r7, pc}
 8010ac8:	2000b728 	.word	0x2000b728
 8010acc:	20004b1d 	.word	0x20004b1d
 8010ad0:	2000b714 	.word	0x2000b714
 8010ad4:	20004b18 	.word	0x20004b18
 8010ad8:	20004b20 	.word	0x20004b20
 8010adc:	0801a938 	.word	0x0801a938
 8010ae0:	0801aaec 	.word	0x0801aaec
 8010ae4:	0801a984 	.word	0x0801a984
 8010ae8:	20004af0 	.word	0x20004af0
 8010aec:	20004b00 	.word	0x20004b00
 8010af0:	20004b14 	.word	0x20004b14
 8010af4:	20004b1a 	.word	0x20004b1a
 8010af8:	20004b10 	.word	0x20004b10
 8010afc:	20008010 	.word	0x20008010
 8010b00:	20008014 	.word	0x20008014

08010b04 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_input_delayed_close+0x1c>
 8010b12:	4b17      	ldr	r3, [pc, #92]	; (8010b70 <tcp_input_delayed_close+0x6c>)
 8010b14:	f240 225a 	movw	r2, #602	; 0x25a
 8010b18:	4916      	ldr	r1, [pc, #88]	; (8010b74 <tcp_input_delayed_close+0x70>)
 8010b1a:	4817      	ldr	r0, [pc, #92]	; (8010b78 <tcp_input_delayed_close+0x74>)
 8010b1c:	f007 f88a 	bl	8017c34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010b20:	4b16      	ldr	r3, [pc, #88]	; (8010b7c <tcp_input_delayed_close+0x78>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	f003 0310 	and.w	r3, r3, #16
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d01c      	beq.n	8010b66 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	8b5b      	ldrh	r3, [r3, #26]
 8010b30:	f003 0310 	and.w	r3, r3, #16
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d10d      	bne.n	8010b54 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d008      	beq.n	8010b54 <tcp_input_delayed_close+0x50>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	6912      	ldr	r2, [r2, #16]
 8010b4c:	f06f 010e 	mvn.w	r1, #14
 8010b50:	4610      	mov	r0, r2
 8010b52:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010b54:	6879      	ldr	r1, [r7, #4]
 8010b56:	480a      	ldr	r0, [pc, #40]	; (8010b80 <tcp_input_delayed_close+0x7c>)
 8010b58:	f7ff fa52 	bl	8010000 <tcp_pcb_remove>
    tcp_free(pcb);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7fd fd6d 	bl	800e63c <tcp_free>
    return 1;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	0801a938 	.word	0x0801a938
 8010b74:	0801ab08 	.word	0x0801ab08
 8010b78:	0801a984 	.word	0x0801a984
 8010b7c:	20004b1d 	.word	0x20004b1d
 8010b80:	2000b714 	.word	0x2000b714

08010b84 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010b84:	b590      	push	{r4, r7, lr}
 8010b86:	b08b      	sub	sp, #44	; 0x2c
 8010b88:	af04      	add	r7, sp, #16
 8010b8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010b8c:	4b6f      	ldr	r3, [pc, #444]	; (8010d4c <tcp_listen_input+0x1c8>)
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	f003 0304 	and.w	r3, r3, #4
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f040 80d2 	bne.w	8010d3e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d106      	bne.n	8010bae <tcp_listen_input+0x2a>
 8010ba0:	4b6b      	ldr	r3, [pc, #428]	; (8010d50 <tcp_listen_input+0x1cc>)
 8010ba2:	f240 2281 	movw	r2, #641	; 0x281
 8010ba6:	496b      	ldr	r1, [pc, #428]	; (8010d54 <tcp_listen_input+0x1d0>)
 8010ba8:	486b      	ldr	r0, [pc, #428]	; (8010d58 <tcp_listen_input+0x1d4>)
 8010baa:	f007 f843 	bl	8017c34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010bae:	4b67      	ldr	r3, [pc, #412]	; (8010d4c <tcp_listen_input+0x1c8>)
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	f003 0310 	and.w	r3, r3, #16
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d019      	beq.n	8010bee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bba:	4b68      	ldr	r3, [pc, #416]	; (8010d5c <tcp_listen_input+0x1d8>)
 8010bbc:	6819      	ldr	r1, [r3, #0]
 8010bbe:	4b68      	ldr	r3, [pc, #416]	; (8010d60 <tcp_listen_input+0x1dc>)
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	4b67      	ldr	r3, [pc, #412]	; (8010d64 <tcp_listen_input+0x1e0>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bca:	4b67      	ldr	r3, [pc, #412]	; (8010d68 <tcp_listen_input+0x1e4>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bce:	885b      	ldrh	r3, [r3, #2]
 8010bd0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bd2:	4a65      	ldr	r2, [pc, #404]	; (8010d68 <tcp_listen_input+0x1e4>)
 8010bd4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bd6:	8812      	ldrh	r2, [r2, #0]
 8010bd8:	b292      	uxth	r2, r2
 8010bda:	9202      	str	r2, [sp, #8]
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	4b63      	ldr	r3, [pc, #396]	; (8010d6c <tcp_listen_input+0x1e8>)
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	4b63      	ldr	r3, [pc, #396]	; (8010d70 <tcp_listen_input+0x1ec>)
 8010be4:	4602      	mov	r2, r0
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f003 fbd6 	bl	8014398 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010bec:	e0a9      	b.n	8010d42 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010bee:	4b57      	ldr	r3, [pc, #348]	; (8010d4c <tcp_listen_input+0x1c8>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 0302 	and.w	r3, r3, #2
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 80a3 	beq.w	8010d42 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7d5b      	ldrb	r3, [r3, #21]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff f85b 	bl	800fcbc <tcp_alloc>
 8010c06:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d111      	bne.n	8010c32 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	699b      	ldr	r3, [r3, #24]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00a      	beq.n	8010c2c <tcp_listen_input+0xa8>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	6910      	ldr	r0, [r2, #16]
 8010c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c22:	2100      	movs	r1, #0
 8010c24:	4798      	blx	r3
 8010c26:	4603      	mov	r3, r0
 8010c28:	73bb      	strb	r3, [r7, #14]
      return;
 8010c2a:	e08b      	b.n	8010d44 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010c2c:	23f0      	movs	r3, #240	; 0xf0
 8010c2e:	73bb      	strb	r3, [r7, #14]
      return;
 8010c30:	e088      	b.n	8010d44 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010c32:	4b50      	ldr	r3, [pc, #320]	; (8010d74 <tcp_listen_input+0x1f0>)
 8010c34:	695a      	ldr	r2, [r3, #20]
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010c3a:	4b4e      	ldr	r3, [pc, #312]	; (8010d74 <tcp_listen_input+0x1f0>)
 8010c3c:	691a      	ldr	r2, [r3, #16]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8ada      	ldrh	r2, [r3, #22]
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010c4a:	4b47      	ldr	r3, [pc, #284]	; (8010d68 <tcp_listen_input+0x1e4>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	881b      	ldrh	r3, [r3, #0]
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	2203      	movs	r2, #3
 8010c5a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010c5c:	4b41      	ldr	r3, [pc, #260]	; (8010d64 <tcp_listen_input+0x1e0>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010c6e:	6978      	ldr	r0, [r7, #20]
 8010c70:	f7ff fa5a 	bl	8010128 <tcp_next_iss>
 8010c74:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	693a      	ldr	r2, [r7, #16]
 8010c7a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	693a      	ldr	r2, [r7, #16]
 8010c86:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010c8e:	4b35      	ldr	r3, [pc, #212]	; (8010d64 <tcp_listen_input+0x1e0>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	1e5a      	subs	r2, r3, #1
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	691a      	ldr	r2, [r3, #16]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7a5b      	ldrb	r3, [r3, #9]
 8010caa:	f003 030c 	and.w	r3, r3, #12
 8010cae:	b2da      	uxtb	r2, r3
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7a1a      	ldrb	r2, [r3, #8]
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010cbc:	4b2e      	ldr	r3, [pc, #184]	; (8010d78 <tcp_listen_input+0x1f4>)
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	60da      	str	r2, [r3, #12]
 8010cc4:	4a2c      	ldr	r2, [pc, #176]	; (8010d78 <tcp_listen_input+0x1f4>)
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	f003 fd27 	bl	801471c <tcp_timer_needed>
 8010cce:	4b2b      	ldr	r3, [pc, #172]	; (8010d7c <tcp_listen_input+0x1f8>)
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010cd4:	6978      	ldr	r0, [r7, #20]
 8010cd6:	f001 fd8d 	bl	80127f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010cda:	4b23      	ldr	r3, [pc, #140]	; (8010d68 <tcp_listen_input+0x1e4>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	89db      	ldrh	r3, [r3, #14]
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	3304      	adds	r3, #4
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f005 fa61 	bl	80161c4 <ip4_route>
 8010d02:	4601      	mov	r1, r0
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	3304      	adds	r3, #4
 8010d08:	461a      	mov	r2, r3
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f7ff fa32 	bl	8010174 <tcp_eff_send_mss_netif>
 8010d10:	4603      	mov	r3, r0
 8010d12:	461a      	mov	r2, r3
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010d18:	2112      	movs	r1, #18
 8010d1a:	6978      	ldr	r0, [r7, #20]
 8010d1c:	f002 fc9a 	bl	8013654 <tcp_enqueue_flags>
 8010d20:	4603      	mov	r3, r0
 8010d22:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d004      	beq.n	8010d36 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	6978      	ldr	r0, [r7, #20]
 8010d30:	f7fd ff0a 	bl	800eb48 <tcp_abandon>
      return;
 8010d34:	e006      	b.n	8010d44 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010d36:	6978      	ldr	r0, [r7, #20]
 8010d38:	f002 fd7a 	bl	8013830 <tcp_output>
  return;
 8010d3c:	e001      	b.n	8010d42 <tcp_listen_input+0x1be>
    return;
 8010d3e:	bf00      	nop
 8010d40:	e000      	b.n	8010d44 <tcp_listen_input+0x1c0>
  return;
 8010d42:	bf00      	nop
}
 8010d44:	371c      	adds	r7, #28
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd90      	pop	{r4, r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20004b1c 	.word	0x20004b1c
 8010d50:	0801a938 	.word	0x0801a938
 8010d54:	0801ab30 	.word	0x0801ab30
 8010d58:	0801a984 	.word	0x0801a984
 8010d5c:	20004b14 	.word	0x20004b14
 8010d60:	20004b1a 	.word	0x20004b1a
 8010d64:	20004b10 	.word	0x20004b10
 8010d68:	20004b00 	.word	0x20004b00
 8010d6c:	20008010 	.word	0x20008010
 8010d70:	20008014 	.word	0x20008014
 8010d74:	20008000 	.word	0x20008000
 8010d78:	2000b714 	.word	0x2000b714
 8010d7c:	2000b710 	.word	0x2000b710

08010d80 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af04      	add	r7, sp, #16
 8010d86:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010d88:	4b2f      	ldr	r3, [pc, #188]	; (8010e48 <tcp_timewait_input+0xc8>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	f003 0304 	and.w	r3, r3, #4
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d153      	bne.n	8010e3c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <tcp_timewait_input+0x28>
 8010d9a:	4b2c      	ldr	r3, [pc, #176]	; (8010e4c <tcp_timewait_input+0xcc>)
 8010d9c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010da0:	492b      	ldr	r1, [pc, #172]	; (8010e50 <tcp_timewait_input+0xd0>)
 8010da2:	482c      	ldr	r0, [pc, #176]	; (8010e54 <tcp_timewait_input+0xd4>)
 8010da4:	f006 ff46 	bl	8017c34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010da8:	4b27      	ldr	r3, [pc, #156]	; (8010e48 <tcp_timewait_input+0xc8>)
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	f003 0302 	and.w	r3, r3, #2
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d02a      	beq.n	8010e0a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010db4:	4b28      	ldr	r3, [pc, #160]	; (8010e58 <tcp_timewait_input+0xd8>)
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	db2d      	blt.n	8010e1e <tcp_timewait_input+0x9e>
 8010dc2:	4b25      	ldr	r3, [pc, #148]	; (8010e58 <tcp_timewait_input+0xd8>)
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dca:	6879      	ldr	r1, [r7, #4]
 8010dcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dce:	440b      	add	r3, r1
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	dc23      	bgt.n	8010e1e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dd6:	4b21      	ldr	r3, [pc, #132]	; (8010e5c <tcp_timewait_input+0xdc>)
 8010dd8:	6819      	ldr	r1, [r3, #0]
 8010dda:	4b21      	ldr	r3, [pc, #132]	; (8010e60 <tcp_timewait_input+0xe0>)
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	4b1d      	ldr	r3, [pc, #116]	; (8010e58 <tcp_timewait_input+0xd8>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010de6:	4b1f      	ldr	r3, [pc, #124]	; (8010e64 <tcp_timewait_input+0xe4>)
 8010de8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dea:	885b      	ldrh	r3, [r3, #2]
 8010dec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dee:	4a1d      	ldr	r2, [pc, #116]	; (8010e64 <tcp_timewait_input+0xe4>)
 8010df0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010df2:	8812      	ldrh	r2, [r2, #0]
 8010df4:	b292      	uxth	r2, r2
 8010df6:	9202      	str	r2, [sp, #8]
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	4b1b      	ldr	r3, [pc, #108]	; (8010e68 <tcp_timewait_input+0xe8>)
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	4b1b      	ldr	r3, [pc, #108]	; (8010e6c <tcp_timewait_input+0xec>)
 8010e00:	4602      	mov	r2, r0
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f003 fac8 	bl	8014398 <tcp_rst>
      return;
 8010e08:	e01b      	b.n	8010e42 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010e0a:	4b0f      	ldr	r3, [pc, #60]	; (8010e48 <tcp_timewait_input+0xc8>)
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	f003 0301 	and.w	r3, r3, #1
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010e16:	4b16      	ldr	r3, [pc, #88]	; (8010e70 <tcp_timewait_input+0xf0>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010e1e:	4b10      	ldr	r3, [pc, #64]	; (8010e60 <tcp_timewait_input+0xe0>)
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00c      	beq.n	8010e40 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	8b5b      	ldrh	r3, [r3, #26]
 8010e2a:	f043 0302 	orr.w	r3, r3, #2
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f002 fcfb 	bl	8013830 <tcp_output>
  }
  return;
 8010e3a:	e001      	b.n	8010e40 <tcp_timewait_input+0xc0>
    return;
 8010e3c:	bf00      	nop
 8010e3e:	e000      	b.n	8010e42 <tcp_timewait_input+0xc2>
  return;
 8010e40:	bf00      	nop
}
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	20004b1c 	.word	0x20004b1c
 8010e4c:	0801a938 	.word	0x0801a938
 8010e50:	0801ab50 	.word	0x0801ab50
 8010e54:	0801a984 	.word	0x0801a984
 8010e58:	20004b10 	.word	0x20004b10
 8010e5c:	20004b14 	.word	0x20004b14
 8010e60:	20004b1a 	.word	0x20004b1a
 8010e64:	20004b00 	.word	0x20004b00
 8010e68:	20008010 	.word	0x20008010
 8010e6c:	20008014 	.word	0x20008014
 8010e70:	2000b718 	.word	0x2000b718

08010e74 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010e74:	b590      	push	{r4, r7, lr}
 8010e76:	b08d      	sub	sp, #52	; 0x34
 8010e78:	af04      	add	r7, sp, #16
 8010e7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010e80:	2300      	movs	r3, #0
 8010e82:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d106      	bne.n	8010e98 <tcp_process+0x24>
 8010e8a:	4ba5      	ldr	r3, [pc, #660]	; (8011120 <tcp_process+0x2ac>)
 8010e8c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e90:	49a4      	ldr	r1, [pc, #656]	; (8011124 <tcp_process+0x2b0>)
 8010e92:	48a5      	ldr	r0, [pc, #660]	; (8011128 <tcp_process+0x2b4>)
 8010e94:	f006 fece 	bl	8017c34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010e98:	4ba4      	ldr	r3, [pc, #656]	; (801112c <tcp_process+0x2b8>)
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	f003 0304 	and.w	r3, r3, #4
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d04e      	beq.n	8010f42 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	7d1b      	ldrb	r3, [r3, #20]
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d108      	bne.n	8010ebe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010eb0:	4b9f      	ldr	r3, [pc, #636]	; (8011130 <tcp_process+0x2bc>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d123      	bne.n	8010f00 <tcp_process+0x8c>
        acceptable = 1;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	76fb      	strb	r3, [r7, #27]
 8010ebc:	e020      	b.n	8010f00 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec2:	4b9c      	ldr	r3, [pc, #624]	; (8011134 <tcp_process+0x2c0>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d102      	bne.n	8010ed0 <tcp_process+0x5c>
        acceptable = 1;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	76fb      	strb	r3, [r7, #27]
 8010ece:	e017      	b.n	8010f00 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ed0:	4b98      	ldr	r3, [pc, #608]	; (8011134 <tcp_process+0x2c0>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	db10      	blt.n	8010f00 <tcp_process+0x8c>
 8010ede:	4b95      	ldr	r3, [pc, #596]	; (8011134 <tcp_process+0x2c0>)
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee6:	6879      	ldr	r1, [r7, #4]
 8010ee8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010eea:	440b      	add	r3, r1
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	dc06      	bgt.n	8010f00 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8b5b      	ldrh	r3, [r3, #26]
 8010ef6:	f043 0302 	orr.w	r3, r3, #2
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010f00:	7efb      	ldrb	r3, [r7, #27]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d01b      	beq.n	8010f3e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	7d1b      	ldrb	r3, [r3, #20]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <tcp_process+0xa8>
 8010f0e:	4b84      	ldr	r3, [pc, #528]	; (8011120 <tcp_process+0x2ac>)
 8010f10:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010f14:	4988      	ldr	r1, [pc, #544]	; (8011138 <tcp_process+0x2c4>)
 8010f16:	4884      	ldr	r0, [pc, #528]	; (8011128 <tcp_process+0x2b4>)
 8010f18:	f006 fe8c 	bl	8017c34 <iprintf>
      recv_flags |= TF_RESET;
 8010f1c:	4b87      	ldr	r3, [pc, #540]	; (801113c <tcp_process+0x2c8>)
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	f043 0308 	orr.w	r3, r3, #8
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	4b85      	ldr	r3, [pc, #532]	; (801113c <tcp_process+0x2c8>)
 8010f28:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	8b5b      	ldrh	r3, [r3, #26]
 8010f2e:	f023 0301 	bic.w	r3, r3, #1
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010f38:	f06f 030d 	mvn.w	r3, #13
 8010f3c:	e37a      	b.n	8011634 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e378      	b.n	8011634 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010f42:	4b7a      	ldr	r3, [pc, #488]	; (801112c <tcp_process+0x2b8>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f003 0302 	and.w	r3, r3, #2
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d010      	beq.n	8010f70 <tcp_process+0xfc>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	7d1b      	ldrb	r3, [r3, #20]
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d00c      	beq.n	8010f70 <tcp_process+0xfc>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	7d1b      	ldrb	r3, [r3, #20]
 8010f5a:	2b03      	cmp	r3, #3
 8010f5c:	d008      	beq.n	8010f70 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8b5b      	ldrh	r3, [r3, #26]
 8010f62:	f043 0302 	orr.w	r3, r3, #2
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	e361      	b.n	8011634 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	8b5b      	ldrh	r3, [r3, #26]
 8010f74:	f003 0310 	and.w	r3, r3, #16
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d103      	bne.n	8010f84 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010f7c:	4b70      	ldr	r3, [pc, #448]	; (8011140 <tcp_process+0x2cc>)
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2200      	movs	r2, #0
 8010f88:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f001 fc2d 	bl	80127f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	7d1b      	ldrb	r3, [r3, #20]
 8010f9e:	3b02      	subs	r3, #2
 8010fa0:	2b07      	cmp	r3, #7
 8010fa2:	f200 8337 	bhi.w	8011614 <tcp_process+0x7a0>
 8010fa6:	a201      	add	r2, pc, #4	; (adr r2, 8010fac <tcp_process+0x138>)
 8010fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fac:	08010fcd 	.word	0x08010fcd
 8010fb0:	080111fd 	.word	0x080111fd
 8010fb4:	08011375 	.word	0x08011375
 8010fb8:	0801139f 	.word	0x0801139f
 8010fbc:	080114c3 	.word	0x080114c3
 8010fc0:	08011375 	.word	0x08011375
 8010fc4:	0801154f 	.word	0x0801154f
 8010fc8:	080115df 	.word	0x080115df
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010fcc:	4b57      	ldr	r3, [pc, #348]	; (801112c <tcp_process+0x2b8>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	f003 0310 	and.w	r3, r3, #16
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 80e4 	beq.w	80111a2 <tcp_process+0x32e>
 8010fda:	4b54      	ldr	r3, [pc, #336]	; (801112c <tcp_process+0x2b8>)
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	f003 0302 	and.w	r3, r3, #2
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 80dd 	beq.w	80111a2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fec:	1c5a      	adds	r2, r3, #1
 8010fee:	4b50      	ldr	r3, [pc, #320]	; (8011130 <tcp_process+0x2bc>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	f040 80d5 	bne.w	80111a2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010ff8:	4b4e      	ldr	r3, [pc, #312]	; (8011134 <tcp_process+0x2c0>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801100a:	4b49      	ldr	r3, [pc, #292]	; (8011130 <tcp_process+0x2bc>)
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011012:	4b4c      	ldr	r3, [pc, #304]	; (8011144 <tcp_process+0x2d0>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	89db      	ldrh	r3, [r3, #14]
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801102c:	4b41      	ldr	r3, [pc, #260]	; (8011134 <tcp_process+0x2c0>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	1e5a      	subs	r2, r3, #1
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2204      	movs	r2, #4
 801103a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3304      	adds	r3, #4
 8011044:	4618      	mov	r0, r3
 8011046:	f005 f8bd 	bl	80161c4 <ip4_route>
 801104a:	4601      	mov	r1, r0
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	3304      	adds	r3, #4
 8011050:	461a      	mov	r2, r3
 8011052:	4620      	mov	r0, r4
 8011054:	f7ff f88e 	bl	8010174 <tcp_eff_send_mss_netif>
 8011058:	4603      	mov	r3, r0
 801105a:	461a      	mov	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011064:	009a      	lsls	r2, r3, #2
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011070:	428b      	cmp	r3, r1
 8011072:	bf38      	it	cc
 8011074:	460b      	movcc	r3, r1
 8011076:	429a      	cmp	r2, r3
 8011078:	d204      	bcs.n	8011084 <tcp_process+0x210>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	b29b      	uxth	r3, r3
 8011082:	e00d      	b.n	80110a0 <tcp_process+0x22c>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011088:	005b      	lsls	r3, r3, #1
 801108a:	f241 121c 	movw	r2, #4380	; 0x111c
 801108e:	4293      	cmp	r3, r2
 8011090:	d904      	bls.n	801109c <tcp_process+0x228>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011096:	005b      	lsls	r3, r3, #1
 8011098:	b29b      	uxth	r3, r3
 801109a:	e001      	b.n	80110a0 <tcp_process+0x22c>
 801109c:	f241 131c 	movw	r3, #4380	; 0x111c
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d106      	bne.n	80110be <tcp_process+0x24a>
 80110b0:	4b1b      	ldr	r3, [pc, #108]	; (8011120 <tcp_process+0x2ac>)
 80110b2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80110b6:	4924      	ldr	r1, [pc, #144]	; (8011148 <tcp_process+0x2d4>)
 80110b8:	481b      	ldr	r0, [pc, #108]	; (8011128 <tcp_process+0x2b4>)
 80110ba:	f006 fdbb 	bl	8017c34 <iprintf>
        --pcb->snd_queuelen;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110c4:	3b01      	subs	r3, #1
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d111      	bne.n	80110fe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110de:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d106      	bne.n	80110f4 <tcp_process+0x280>
 80110e6:	4b0e      	ldr	r3, [pc, #56]	; (8011120 <tcp_process+0x2ac>)
 80110e8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80110ec:	4917      	ldr	r1, [pc, #92]	; (801114c <tcp_process+0x2d8>)
 80110ee:	480e      	ldr	r0, [pc, #56]	; (8011128 <tcp_process+0x2b4>)
 80110f0:	f006 fda0 	bl	8017c34 <iprintf>
          pcb->unsent = rseg->next;
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80110fc:	e003      	b.n	8011106 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011106:	69f8      	ldr	r0, [r7, #28]
 8011108:	f7fe fc6f 	bl	800f9ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011110:	2b00      	cmp	r3, #0
 8011112:	d11d      	bne.n	8011150 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801111a:	861a      	strh	r2, [r3, #48]	; 0x30
 801111c:	e01f      	b.n	801115e <tcp_process+0x2ea>
 801111e:	bf00      	nop
 8011120:	0801a938 	.word	0x0801a938
 8011124:	0801ab70 	.word	0x0801ab70
 8011128:	0801a984 	.word	0x0801a984
 801112c:	20004b1c 	.word	0x20004b1c
 8011130:	20004b14 	.word	0x20004b14
 8011134:	20004b10 	.word	0x20004b10
 8011138:	0801ab8c 	.word	0x0801ab8c
 801113c:	20004b1d 	.word	0x20004b1d
 8011140:	2000b718 	.word	0x2000b718
 8011144:	20004b00 	.word	0x20004b00
 8011148:	0801abac 	.word	0x0801abac
 801114c:	0801abc4 	.word	0x0801abc4
        } else {
          pcb->rtime = 0;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00a      	beq.n	801117e <tcp_process+0x30a>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	6910      	ldr	r0, [r2, #16]
 8011172:	2200      	movs	r2, #0
 8011174:	6879      	ldr	r1, [r7, #4]
 8011176:	4798      	blx	r3
 8011178:	4603      	mov	r3, r0
 801117a:	76bb      	strb	r3, [r7, #26]
 801117c:	e001      	b.n	8011182 <tcp_process+0x30e>
 801117e:	2300      	movs	r3, #0
 8011180:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011182:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011186:	f113 0f0d 	cmn.w	r3, #13
 801118a:	d102      	bne.n	8011192 <tcp_process+0x31e>
          return ERR_ABRT;
 801118c:	f06f 030c 	mvn.w	r3, #12
 8011190:	e250      	b.n	8011634 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	8b5b      	ldrh	r3, [r3, #26]
 8011196:	f043 0302 	orr.w	r3, r3, #2
 801119a:	b29a      	uxth	r2, r3
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80111a0:	e23a      	b.n	8011618 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80111a2:	4b9d      	ldr	r3, [pc, #628]	; (8011418 <tcp_process+0x5a4>)
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	f003 0310 	and.w	r3, r3, #16
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 8234 	beq.w	8011618 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111b0:	4b9a      	ldr	r3, [pc, #616]	; (801141c <tcp_process+0x5a8>)
 80111b2:	6819      	ldr	r1, [r3, #0]
 80111b4:	4b9a      	ldr	r3, [pc, #616]	; (8011420 <tcp_process+0x5ac>)
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	461a      	mov	r2, r3
 80111ba:	4b9a      	ldr	r3, [pc, #616]	; (8011424 <tcp_process+0x5b0>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111c0:	4b99      	ldr	r3, [pc, #612]	; (8011428 <tcp_process+0x5b4>)
 80111c2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111c4:	885b      	ldrh	r3, [r3, #2]
 80111c6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111c8:	4a97      	ldr	r2, [pc, #604]	; (8011428 <tcp_process+0x5b4>)
 80111ca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111cc:	8812      	ldrh	r2, [r2, #0]
 80111ce:	b292      	uxth	r2, r2
 80111d0:	9202      	str	r2, [sp, #8]
 80111d2:	9301      	str	r3, [sp, #4]
 80111d4:	4b95      	ldr	r3, [pc, #596]	; (801142c <tcp_process+0x5b8>)
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	4b95      	ldr	r3, [pc, #596]	; (8011430 <tcp_process+0x5bc>)
 80111da:	4602      	mov	r2, r0
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f003 f8db 	bl	8014398 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111e8:	2b05      	cmp	r3, #5
 80111ea:	f200 8215 	bhi.w	8011618 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2200      	movs	r2, #0
 80111f2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f002 fea5 	bl	8013f44 <tcp_rexmit_rto>
      break;
 80111fa:	e20d      	b.n	8011618 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80111fc:	4b86      	ldr	r3, [pc, #536]	; (8011418 <tcp_process+0x5a4>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f003 0310 	and.w	r3, r3, #16
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 80a1 	beq.w	801134c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801120a:	4b84      	ldr	r3, [pc, #528]	; (801141c <tcp_process+0x5a8>)
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	3b01      	subs	r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	db7e      	blt.n	8011318 <tcp_process+0x4a4>
 801121a:	4b80      	ldr	r3, [pc, #512]	; (801141c <tcp_process+0x5a8>)
 801121c:	681a      	ldr	r2, [r3, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	dc77      	bgt.n	8011318 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2204      	movs	r2, #4
 801122c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011232:	2b00      	cmp	r3, #0
 8011234:	d102      	bne.n	801123c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011236:	23fa      	movs	r3, #250	; 0xfa
 8011238:	76bb      	strb	r3, [r7, #26]
 801123a:	e01d      	b.n	8011278 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <tcp_process+0x3e0>
 8011246:	4b7b      	ldr	r3, [pc, #492]	; (8011434 <tcp_process+0x5c0>)
 8011248:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801124c:	497a      	ldr	r1, [pc, #488]	; (8011438 <tcp_process+0x5c4>)
 801124e:	487b      	ldr	r0, [pc, #492]	; (801143c <tcp_process+0x5c8>)
 8011250:	f006 fcf0 	bl	8017c34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011258:	699b      	ldr	r3, [r3, #24]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00a      	beq.n	8011274 <tcp_process+0x400>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011262:	699b      	ldr	r3, [r3, #24]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	6910      	ldr	r0, [r2, #16]
 8011268:	2200      	movs	r2, #0
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	4798      	blx	r3
 801126e:	4603      	mov	r3, r0
 8011270:	76bb      	strb	r3, [r7, #26]
 8011272:	e001      	b.n	8011278 <tcp_process+0x404>
 8011274:	23f0      	movs	r3, #240	; 0xf0
 8011276:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011278:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d00a      	beq.n	8011296 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011280:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011284:	f113 0f0d 	cmn.w	r3, #13
 8011288:	d002      	beq.n	8011290 <tcp_process+0x41c>
              tcp_abort(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7fd fd1a 	bl	800ecc4 <tcp_abort>
            }
            return ERR_ABRT;
 8011290:	f06f 030c 	mvn.w	r3, #12
 8011294:	e1ce      	b.n	8011634 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 fae0 	bl	801185c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801129c:	4b68      	ldr	r3, [pc, #416]	; (8011440 <tcp_process+0x5cc>)
 801129e:	881b      	ldrh	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d005      	beq.n	80112b0 <tcp_process+0x43c>
            recv_acked--;
 80112a4:	4b66      	ldr	r3, [pc, #408]	; (8011440 <tcp_process+0x5cc>)
 80112a6:	881b      	ldrh	r3, [r3, #0]
 80112a8:	3b01      	subs	r3, #1
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	4b64      	ldr	r3, [pc, #400]	; (8011440 <tcp_process+0x5cc>)
 80112ae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112b4:	009a      	lsls	r2, r3, #2
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80112c0:	428b      	cmp	r3, r1
 80112c2:	bf38      	it	cc
 80112c4:	460b      	movcc	r3, r1
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d204      	bcs.n	80112d4 <tcp_process+0x460>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	e00d      	b.n	80112f0 <tcp_process+0x47c>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112d8:	005b      	lsls	r3, r3, #1
 80112da:	f241 121c 	movw	r2, #4380	; 0x111c
 80112de:	4293      	cmp	r3, r2
 80112e0:	d904      	bls.n	80112ec <tcp_process+0x478>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	e001      	b.n	80112f0 <tcp_process+0x47c>
 80112ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80112f6:	4b53      	ldr	r3, [pc, #332]	; (8011444 <tcp_process+0x5d0>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	f003 0320 	and.w	r3, r3, #32
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d037      	beq.n	8011372 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	8b5b      	ldrh	r3, [r3, #26]
 8011306:	f043 0302 	orr.w	r3, r3, #2
 801130a:	b29a      	uxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2207      	movs	r2, #7
 8011314:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011316:	e02c      	b.n	8011372 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011318:	4b40      	ldr	r3, [pc, #256]	; (801141c <tcp_process+0x5a8>)
 801131a:	6819      	ldr	r1, [r3, #0]
 801131c:	4b40      	ldr	r3, [pc, #256]	; (8011420 <tcp_process+0x5ac>)
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	461a      	mov	r2, r3
 8011322:	4b40      	ldr	r3, [pc, #256]	; (8011424 <tcp_process+0x5b0>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011328:	4b3f      	ldr	r3, [pc, #252]	; (8011428 <tcp_process+0x5b4>)
 801132a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801132c:	885b      	ldrh	r3, [r3, #2]
 801132e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011330:	4a3d      	ldr	r2, [pc, #244]	; (8011428 <tcp_process+0x5b4>)
 8011332:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011334:	8812      	ldrh	r2, [r2, #0]
 8011336:	b292      	uxth	r2, r2
 8011338:	9202      	str	r2, [sp, #8]
 801133a:	9301      	str	r3, [sp, #4]
 801133c:	4b3b      	ldr	r3, [pc, #236]	; (801142c <tcp_process+0x5b8>)
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	4b3b      	ldr	r3, [pc, #236]	; (8011430 <tcp_process+0x5bc>)
 8011342:	4602      	mov	r2, r0
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f003 f827 	bl	8014398 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801134a:	e167      	b.n	801161c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801134c:	4b32      	ldr	r3, [pc, #200]	; (8011418 <tcp_process+0x5a4>)
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 0302 	and.w	r3, r3, #2
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 8161 	beq.w	801161c <tcp_process+0x7a8>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135e:	1e5a      	subs	r2, r3, #1
 8011360:	4b30      	ldr	r3, [pc, #192]	; (8011424 <tcp_process+0x5b0>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	f040 8159 	bne.w	801161c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f002 fe0c 	bl	8013f88 <tcp_rexmit>
      break;
 8011370:	e154      	b.n	801161c <tcp_process+0x7a8>
 8011372:	e153      	b.n	801161c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f000 fa71 	bl	801185c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801137a:	4b32      	ldr	r3, [pc, #200]	; (8011444 <tcp_process+0x5d0>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f003 0320 	and.w	r3, r3, #32
 8011382:	2b00      	cmp	r3, #0
 8011384:	f000 814c 	beq.w	8011620 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	8b5b      	ldrh	r3, [r3, #26]
 801138c:	f043 0302 	orr.w	r3, r3, #2
 8011390:	b29a      	uxth	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2207      	movs	r2, #7
 801139a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801139c:	e140      	b.n	8011620 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 fa5c 	bl	801185c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80113a4:	4b27      	ldr	r3, [pc, #156]	; (8011444 <tcp_process+0x5d0>)
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	f003 0320 	and.w	r3, r3, #32
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d071      	beq.n	8011494 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80113b0:	4b19      	ldr	r3, [pc, #100]	; (8011418 <tcp_process+0x5a4>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	f003 0310 	and.w	r3, r3, #16
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d060      	beq.n	801147e <tcp_process+0x60a>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113c0:	4b16      	ldr	r3, [pc, #88]	; (801141c <tcp_process+0x5a8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d15a      	bne.n	801147e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d156      	bne.n	801147e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8b5b      	ldrh	r3, [r3, #26]
 80113d4:	f043 0302 	orr.w	r3, r3, #2
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7fe fdbe 	bl	800ff60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80113e4:	4b18      	ldr	r3, [pc, #96]	; (8011448 <tcp_process+0x5d4>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d105      	bne.n	80113fa <tcp_process+0x586>
 80113ee:	4b16      	ldr	r3, [pc, #88]	; (8011448 <tcp_process+0x5d4>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	4a14      	ldr	r2, [pc, #80]	; (8011448 <tcp_process+0x5d4>)
 80113f6:	6013      	str	r3, [r2, #0]
 80113f8:	e02e      	b.n	8011458 <tcp_process+0x5e4>
 80113fa:	4b13      	ldr	r3, [pc, #76]	; (8011448 <tcp_process+0x5d4>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	617b      	str	r3, [r7, #20]
 8011400:	e027      	b.n	8011452 <tcp_process+0x5de>
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	429a      	cmp	r2, r3
 801140a:	d11f      	bne.n	801144c <tcp_process+0x5d8>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	68da      	ldr	r2, [r3, #12]
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	60da      	str	r2, [r3, #12]
 8011414:	e020      	b.n	8011458 <tcp_process+0x5e4>
 8011416:	bf00      	nop
 8011418:	20004b1c 	.word	0x20004b1c
 801141c:	20004b14 	.word	0x20004b14
 8011420:	20004b1a 	.word	0x20004b1a
 8011424:	20004b10 	.word	0x20004b10
 8011428:	20004b00 	.word	0x20004b00
 801142c:	20008010 	.word	0x20008010
 8011430:	20008014 	.word	0x20008014
 8011434:	0801a938 	.word	0x0801a938
 8011438:	0801abd8 	.word	0x0801abd8
 801143c:	0801a984 	.word	0x0801a984
 8011440:	20004b18 	.word	0x20004b18
 8011444:	20004b1d 	.word	0x20004b1d
 8011448:	2000b714 	.word	0x2000b714
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	617b      	str	r3, [r7, #20]
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d1d4      	bne.n	8011402 <tcp_process+0x58e>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	60da      	str	r2, [r3, #12]
 801145e:	4b77      	ldr	r3, [pc, #476]	; (801163c <tcp_process+0x7c8>)
 8011460:	2201      	movs	r2, #1
 8011462:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	220a      	movs	r2, #10
 8011468:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801146a:	4b75      	ldr	r3, [pc, #468]	; (8011640 <tcp_process+0x7cc>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	60da      	str	r2, [r3, #12]
 8011472:	4a73      	ldr	r2, [pc, #460]	; (8011640 <tcp_process+0x7cc>)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6013      	str	r3, [r2, #0]
 8011478:	f003 f950 	bl	801471c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801147c:	e0d2      	b.n	8011624 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	8b5b      	ldrh	r3, [r3, #26]
 8011482:	f043 0302 	orr.w	r3, r3, #2
 8011486:	b29a      	uxth	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2208      	movs	r2, #8
 8011490:	751a      	strb	r2, [r3, #20]
      break;
 8011492:	e0c7      	b.n	8011624 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011494:	4b6b      	ldr	r3, [pc, #428]	; (8011644 <tcp_process+0x7d0>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f003 0310 	and.w	r3, r3, #16
 801149c:	2b00      	cmp	r3, #0
 801149e:	f000 80c1 	beq.w	8011624 <tcp_process+0x7b0>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114a6:	4b68      	ldr	r3, [pc, #416]	; (8011648 <tcp_process+0x7d4>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	f040 80ba 	bne.w	8011624 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f040 80b5 	bne.w	8011624 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2206      	movs	r2, #6
 80114be:	751a      	strb	r2, [r3, #20]
      break;
 80114c0:	e0b0      	b.n	8011624 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 f9ca 	bl	801185c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80114c8:	4b60      	ldr	r3, [pc, #384]	; (801164c <tcp_process+0x7d8>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	f003 0320 	and.w	r3, r3, #32
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 80a9 	beq.w	8011628 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	8b5b      	ldrh	r3, [r3, #26]
 80114da:	f043 0302 	orr.w	r3, r3, #2
 80114de:	b29a      	uxth	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7fe fd3b 	bl	800ff60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80114ea:	4b59      	ldr	r3, [pc, #356]	; (8011650 <tcp_process+0x7dc>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d105      	bne.n	8011500 <tcp_process+0x68c>
 80114f4:	4b56      	ldr	r3, [pc, #344]	; (8011650 <tcp_process+0x7dc>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	4a55      	ldr	r2, [pc, #340]	; (8011650 <tcp_process+0x7dc>)
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	e013      	b.n	8011528 <tcp_process+0x6b4>
 8011500:	4b53      	ldr	r3, [pc, #332]	; (8011650 <tcp_process+0x7dc>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	613b      	str	r3, [r7, #16]
 8011506:	e00c      	b.n	8011522 <tcp_process+0x6ae>
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	429a      	cmp	r2, r3
 8011510:	d104      	bne.n	801151c <tcp_process+0x6a8>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	68da      	ldr	r2, [r3, #12]
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	60da      	str	r2, [r3, #12]
 801151a:	e005      	b.n	8011528 <tcp_process+0x6b4>
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	613b      	str	r3, [r7, #16]
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1ef      	bne.n	8011508 <tcp_process+0x694>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	60da      	str	r2, [r3, #12]
 801152e:	4b43      	ldr	r3, [pc, #268]	; (801163c <tcp_process+0x7c8>)
 8011530:	2201      	movs	r2, #1
 8011532:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	220a      	movs	r2, #10
 8011538:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801153a:	4b41      	ldr	r3, [pc, #260]	; (8011640 <tcp_process+0x7cc>)
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60da      	str	r2, [r3, #12]
 8011542:	4a3f      	ldr	r2, [pc, #252]	; (8011640 <tcp_process+0x7cc>)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	f003 f8e8 	bl	801471c <tcp_timer_needed>
      }
      break;
 801154c:	e06c      	b.n	8011628 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f000 f984 	bl	801185c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011554:	4b3b      	ldr	r3, [pc, #236]	; (8011644 <tcp_process+0x7d0>)
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	f003 0310 	and.w	r3, r3, #16
 801155c:	2b00      	cmp	r3, #0
 801155e:	d065      	beq.n	801162c <tcp_process+0x7b8>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011564:	4b38      	ldr	r3, [pc, #224]	; (8011648 <tcp_process+0x7d4>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d15f      	bne.n	801162c <tcp_process+0x7b8>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011570:	2b00      	cmp	r3, #0
 8011572:	d15b      	bne.n	801162c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7fe fcf3 	bl	800ff60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801157a:	4b35      	ldr	r3, [pc, #212]	; (8011650 <tcp_process+0x7dc>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	429a      	cmp	r2, r3
 8011582:	d105      	bne.n	8011590 <tcp_process+0x71c>
 8011584:	4b32      	ldr	r3, [pc, #200]	; (8011650 <tcp_process+0x7dc>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	4a31      	ldr	r2, [pc, #196]	; (8011650 <tcp_process+0x7dc>)
 801158c:	6013      	str	r3, [r2, #0]
 801158e:	e013      	b.n	80115b8 <tcp_process+0x744>
 8011590:	4b2f      	ldr	r3, [pc, #188]	; (8011650 <tcp_process+0x7dc>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	e00c      	b.n	80115b2 <tcp_process+0x73e>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d104      	bne.n	80115ac <tcp_process+0x738>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	68da      	ldr	r2, [r3, #12]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	60da      	str	r2, [r3, #12]
 80115aa:	e005      	b.n	80115b8 <tcp_process+0x744>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1ef      	bne.n	8011598 <tcp_process+0x724>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2200      	movs	r2, #0
 80115bc:	60da      	str	r2, [r3, #12]
 80115be:	4b1f      	ldr	r3, [pc, #124]	; (801163c <tcp_process+0x7c8>)
 80115c0:	2201      	movs	r2, #1
 80115c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	220a      	movs	r2, #10
 80115c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80115ca:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <tcp_process+0x7cc>)
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	60da      	str	r2, [r3, #12]
 80115d2:	4a1b      	ldr	r2, [pc, #108]	; (8011640 <tcp_process+0x7cc>)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6013      	str	r3, [r2, #0]
 80115d8:	f003 f8a0 	bl	801471c <tcp_timer_needed>
      }
      break;
 80115dc:	e026      	b.n	801162c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f93c 	bl	801185c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80115e4:	4b17      	ldr	r3, [pc, #92]	; (8011644 <tcp_process+0x7d0>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f003 0310 	and.w	r3, r3, #16
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d01f      	beq.n	8011630 <tcp_process+0x7bc>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115f4:	4b14      	ldr	r3, [pc, #80]	; (8011648 <tcp_process+0x7d4>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d119      	bne.n	8011630 <tcp_process+0x7bc>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011600:	2b00      	cmp	r3, #0
 8011602:	d115      	bne.n	8011630 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011604:	4b11      	ldr	r3, [pc, #68]	; (801164c <tcp_process+0x7d8>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	f043 0310 	orr.w	r3, r3, #16
 801160c:	b2da      	uxtb	r2, r3
 801160e:	4b0f      	ldr	r3, [pc, #60]	; (801164c <tcp_process+0x7d8>)
 8011610:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011612:	e00d      	b.n	8011630 <tcp_process+0x7bc>
    default:
      break;
 8011614:	bf00      	nop
 8011616:	e00c      	b.n	8011632 <tcp_process+0x7be>
      break;
 8011618:	bf00      	nop
 801161a:	e00a      	b.n	8011632 <tcp_process+0x7be>
      break;
 801161c:	bf00      	nop
 801161e:	e008      	b.n	8011632 <tcp_process+0x7be>
      break;
 8011620:	bf00      	nop
 8011622:	e006      	b.n	8011632 <tcp_process+0x7be>
      break;
 8011624:	bf00      	nop
 8011626:	e004      	b.n	8011632 <tcp_process+0x7be>
      break;
 8011628:	bf00      	nop
 801162a:	e002      	b.n	8011632 <tcp_process+0x7be>
      break;
 801162c:	bf00      	nop
 801162e:	e000      	b.n	8011632 <tcp_process+0x7be>
      break;
 8011630:	bf00      	nop
  }
  return ERR_OK;
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	3724      	adds	r7, #36	; 0x24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}
 801163c:	2000b710 	.word	0x2000b710
 8011640:	2000b724 	.word	0x2000b724
 8011644:	20004b1c 	.word	0x20004b1c
 8011648:	20004b14 	.word	0x20004b14
 801164c:	20004b1d 	.word	0x20004b1d
 8011650:	2000b714 	.word	0x2000b714

08011654 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b085      	sub	sp, #20
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d106      	bne.n	8011672 <tcp_oos_insert_segment+0x1e>
 8011664:	4b3b      	ldr	r3, [pc, #236]	; (8011754 <tcp_oos_insert_segment+0x100>)
 8011666:	f240 421f 	movw	r2, #1055	; 0x41f
 801166a:	493b      	ldr	r1, [pc, #236]	; (8011758 <tcp_oos_insert_segment+0x104>)
 801166c:	483b      	ldr	r0, [pc, #236]	; (801175c <tcp_oos_insert_segment+0x108>)
 801166e:	f006 fae1 	bl	8017c34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	899b      	ldrh	r3, [r3, #12]
 8011678:	b29b      	uxth	r3, r3
 801167a:	4618      	mov	r0, r3
 801167c:	f7fb f986 	bl	800c98c <lwip_htons>
 8011680:	4603      	mov	r3, r0
 8011682:	b2db      	uxtb	r3, r3
 8011684:	f003 0301 	and.w	r3, r3, #1
 8011688:	2b00      	cmp	r3, #0
 801168a:	d028      	beq.n	80116de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801168c:	6838      	ldr	r0, [r7, #0]
 801168e:	f7fe f997 	bl	800f9c0 <tcp_segs_free>
    next = NULL;
 8011692:	2300      	movs	r3, #0
 8011694:	603b      	str	r3, [r7, #0]
 8011696:	e056      	b.n	8011746 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	899b      	ldrh	r3, [r3, #12]
 801169e:	b29b      	uxth	r3, r3
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fb f973 	bl	800c98c <lwip_htons>
 80116a6:	4603      	mov	r3, r0
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00d      	beq.n	80116ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	899b      	ldrh	r3, [r3, #12]
 80116b8:	b29c      	uxth	r4, r3
 80116ba:	2001      	movs	r0, #1
 80116bc:	f7fb f966 	bl	800c98c <lwip_htons>
 80116c0:	4603      	mov	r3, r0
 80116c2:	461a      	mov	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	4322      	orrs	r2, r4
 80116ca:	b292      	uxth	r2, r2
 80116cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f7fe f986 	bl	800f9ea <tcp_seg_free>
    while (next &&
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00e      	beq.n	8011702 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	891b      	ldrh	r3, [r3, #8]
 80116e8:	461a      	mov	r2, r3
 80116ea:	4b1d      	ldr	r3, [pc, #116]	; (8011760 <tcp_oos_insert_segment+0x10c>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	441a      	add	r2, r3
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	8909      	ldrh	r1, [r1, #8]
 80116fa:	440b      	add	r3, r1
 80116fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80116fe:	2b00      	cmp	r3, #0
 8011700:	daca      	bge.n	8011698 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d01e      	beq.n	8011746 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	891b      	ldrh	r3, [r3, #8]
 801170c:	461a      	mov	r2, r3
 801170e:	4b14      	ldr	r3, [pc, #80]	; (8011760 <tcp_oos_insert_segment+0x10c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	441a      	add	r2, r3
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	68db      	ldr	r3, [r3, #12]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801171c:	2b00      	cmp	r3, #0
 801171e:	dd12      	ble.n	8011746 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	b29a      	uxth	r2, r3
 8011728:	4b0d      	ldr	r3, [pc, #52]	; (8011760 <tcp_oos_insert_segment+0x10c>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	b29b      	uxth	r3, r3
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	685a      	ldr	r2, [r3, #4]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	891b      	ldrh	r3, [r3, #8]
 801173e:	4619      	mov	r1, r3
 8011740:	4610      	mov	r0, r2
 8011742:	f7fc fb49 	bl	800ddd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	601a      	str	r2, [r3, #0]
}
 801174c:	bf00      	nop
 801174e:	3714      	adds	r7, #20
 8011750:	46bd      	mov	sp, r7
 8011752:	bd90      	pop	{r4, r7, pc}
 8011754:	0801a938 	.word	0x0801a938
 8011758:	0801abf8 	.word	0x0801abf8
 801175c:	0801a984 	.word	0x0801a984
 8011760:	20004b10 	.word	0x20004b10

08011764 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011764:	b5b0      	push	{r4, r5, r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011772:	e03e      	b.n	80117f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	4618      	mov	r0, r3
 8011784:	f7fc fd3c 	bl	800e200 <pbuf_clen>
 8011788:	4603      	mov	r3, r0
 801178a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011792:	8a7a      	ldrh	r2, [r7, #18]
 8011794:	429a      	cmp	r2, r3
 8011796:	d906      	bls.n	80117a6 <tcp_free_acked_segments+0x42>
 8011798:	4b2a      	ldr	r3, [pc, #168]	; (8011844 <tcp_free_acked_segments+0xe0>)
 801179a:	f240 4257 	movw	r2, #1111	; 0x457
 801179e:	492a      	ldr	r1, [pc, #168]	; (8011848 <tcp_free_acked_segments+0xe4>)
 80117a0:	482a      	ldr	r0, [pc, #168]	; (801184c <tcp_free_acked_segments+0xe8>)
 80117a2:	f006 fa47 	bl	8017c34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80117ac:	8a7b      	ldrh	r3, [r7, #18]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	891a      	ldrh	r2, [r3, #8]
 80117bc:	4b24      	ldr	r3, [pc, #144]	; (8011850 <tcp_free_acked_segments+0xec>)
 80117be:	881b      	ldrh	r3, [r3, #0]
 80117c0:	4413      	add	r3, r2
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	4b22      	ldr	r3, [pc, #136]	; (8011850 <tcp_free_acked_segments+0xec>)
 80117c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80117c8:	6978      	ldr	r0, [r7, #20]
 80117ca:	f7fe f90e 	bl	800f9ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00c      	beq.n	80117f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d109      	bne.n	80117f2 <tcp_free_acked_segments+0x8e>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d106      	bne.n	80117f2 <tcp_free_acked_segments+0x8e>
 80117e4:	4b17      	ldr	r3, [pc, #92]	; (8011844 <tcp_free_acked_segments+0xe0>)
 80117e6:	f240 4261 	movw	r2, #1121	; 0x461
 80117ea:	491a      	ldr	r1, [pc, #104]	; (8011854 <tcp_free_acked_segments+0xf0>)
 80117ec:	4817      	ldr	r0, [pc, #92]	; (801184c <tcp_free_acked_segments+0xe8>)
 80117ee:	f006 fa21 	bl	8017c34 <iprintf>
  while (seg_list != NULL &&
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d020      	beq.n	801183a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fb f8d9 	bl	800c9b6 <lwip_htonl>
 8011804:	4604      	mov	r4, r0
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	891b      	ldrh	r3, [r3, #8]
 801180a:	461d      	mov	r5, r3
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	899b      	ldrh	r3, [r3, #12]
 8011812:	b29b      	uxth	r3, r3
 8011814:	4618      	mov	r0, r3
 8011816:	f7fb f8b9 	bl	800c98c <lwip_htons>
 801181a:	4603      	mov	r3, r0
 801181c:	b2db      	uxtb	r3, r3
 801181e:	f003 0303 	and.w	r3, r3, #3
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <tcp_free_acked_segments+0xc6>
 8011826:	2301      	movs	r3, #1
 8011828:	e000      	b.n	801182c <tcp_free_acked_segments+0xc8>
 801182a:	2300      	movs	r3, #0
 801182c:	442b      	add	r3, r5
 801182e:	18e2      	adds	r2, r4, r3
 8011830:	4b09      	ldr	r3, [pc, #36]	; (8011858 <tcp_free_acked_segments+0xf4>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011836:	2b00      	cmp	r3, #0
 8011838:	dd9c      	ble.n	8011774 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801183a:	68bb      	ldr	r3, [r7, #8]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3718      	adds	r7, #24
 8011840:	46bd      	mov	sp, r7
 8011842:	bdb0      	pop	{r4, r5, r7, pc}
 8011844:	0801a938 	.word	0x0801a938
 8011848:	0801ac20 	.word	0x0801ac20
 801184c:	0801a984 	.word	0x0801a984
 8011850:	20004b18 	.word	0x20004b18
 8011854:	0801ac48 	.word	0x0801ac48
 8011858:	20004b14 	.word	0x20004b14

0801185c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801185c:	b5b0      	push	{r4, r5, r7, lr}
 801185e:	b094      	sub	sp, #80	; 0x50
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011864:	2300      	movs	r3, #0
 8011866:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d106      	bne.n	801187c <tcp_receive+0x20>
 801186e:	4ba6      	ldr	r3, [pc, #664]	; (8011b08 <tcp_receive+0x2ac>)
 8011870:	f240 427b 	movw	r2, #1147	; 0x47b
 8011874:	49a5      	ldr	r1, [pc, #660]	; (8011b0c <tcp_receive+0x2b0>)
 8011876:	48a6      	ldr	r0, [pc, #664]	; (8011b10 <tcp_receive+0x2b4>)
 8011878:	f006 f9dc 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	2b03      	cmp	r3, #3
 8011882:	d806      	bhi.n	8011892 <tcp_receive+0x36>
 8011884:	4ba0      	ldr	r3, [pc, #640]	; (8011b08 <tcp_receive+0x2ac>)
 8011886:	f240 427c 	movw	r2, #1148	; 0x47c
 801188a:	49a2      	ldr	r1, [pc, #648]	; (8011b14 <tcp_receive+0x2b8>)
 801188c:	48a0      	ldr	r0, [pc, #640]	; (8011b10 <tcp_receive+0x2b4>)
 801188e:	f006 f9d1 	bl	8017c34 <iprintf>

  if (flags & TCP_ACK) {
 8011892:	4ba1      	ldr	r3, [pc, #644]	; (8011b18 <tcp_receive+0x2bc>)
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	f003 0310 	and.w	r3, r3, #16
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 8263 	beq.w	8011d66 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118a6:	461a      	mov	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118ac:	4413      	add	r3, r2
 80118ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118b4:	4b99      	ldr	r3, [pc, #612]	; (8011b1c <tcp_receive+0x2c0>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	1ad3      	subs	r3, r2, r3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	db1b      	blt.n	80118f6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118c2:	4b96      	ldr	r3, [pc, #600]	; (8011b1c <tcp_receive+0x2c0>)
 80118c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d106      	bne.n	80118d8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118ce:	4b94      	ldr	r3, [pc, #592]	; (8011b20 <tcp_receive+0x2c4>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	db0e      	blt.n	80118f6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118dc:	4b90      	ldr	r3, [pc, #576]	; (8011b20 <tcp_receive+0x2c4>)
 80118de:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d125      	bne.n	8011930 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80118e4:	4b8f      	ldr	r3, [pc, #572]	; (8011b24 <tcp_receive+0x2c8>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	89db      	ldrh	r3, [r3, #14]
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d91c      	bls.n	8011930 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80118f6:	4b8b      	ldr	r3, [pc, #556]	; (8011b24 <tcp_receive+0x2c8>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	89db      	ldrh	r3, [r3, #14]
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011910:	429a      	cmp	r2, r3
 8011912:	d205      	bcs.n	8011920 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011920:	4b7e      	ldr	r3, [pc, #504]	; (8011b1c <tcp_receive+0x2c0>)
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011928:	4b7d      	ldr	r3, [pc, #500]	; (8011b20 <tcp_receive+0x2c4>)
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011930:	4b7b      	ldr	r3, [pc, #492]	; (8011b20 <tcp_receive+0x2c4>)
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	2b00      	cmp	r3, #0
 801193c:	dc58      	bgt.n	80119f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801193e:	4b7a      	ldr	r3, [pc, #488]	; (8011b28 <tcp_receive+0x2cc>)
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d14b      	bne.n	80119de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011950:	4413      	add	r3, r2
 8011952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011954:	429a      	cmp	r2, r3
 8011956:	d142      	bne.n	80119de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801195e:	2b00      	cmp	r3, #0
 8011960:	db3d      	blt.n	80119de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011966:	4b6e      	ldr	r3, [pc, #440]	; (8011b20 <tcp_receive+0x2c4>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	429a      	cmp	r2, r3
 801196c:	d137      	bne.n	80119de <tcp_receive+0x182>
              found_dupack = 1;
 801196e:	2301      	movs	r3, #1
 8011970:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011978:	2bff      	cmp	r3, #255	; 0xff
 801197a:	d007      	beq.n	801198c <tcp_receive+0x130>
                ++pcb->dupacks;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011982:	3301      	adds	r3, #1
 8011984:	b2da      	uxtb	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011992:	2b03      	cmp	r3, #3
 8011994:	d91b      	bls.n	80119ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119a0:	4413      	add	r3, r2
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d30a      	bcc.n	80119c4 <tcp_receive+0x168>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119b8:	4413      	add	r3, r2
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80119c2:	e004      	b.n	80119ce <tcp_receive+0x172>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d902      	bls.n	80119de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f002 fb41 	bl	8014060 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80119de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f040 8160 	bne.w	8011ca6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80119ee:	e15a      	b.n	8011ca6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119f0:	4b4b      	ldr	r3, [pc, #300]	; (8011b20 <tcp_receive+0x2c4>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	3b01      	subs	r3, #1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f2c0 814d 	blt.w	8011c9c <tcp_receive+0x440>
 8011a02:	4b47      	ldr	r3, [pc, #284]	; (8011b20 <tcp_receive+0x2c4>)
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f300 8145 	bgt.w	8011c9c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8b5b      	ldrh	r3, [r3, #26]
 8011a16:	f003 0304 	and.w	r3, r3, #4
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d010      	beq.n	8011a40 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	8b5b      	ldrh	r3, [r3, #26]
 8011a22:	f023 0304 	bic.w	r3, r3, #4
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a4e:	10db      	asrs	r3, r3, #3
 8011a50:	b21b      	sxth	r3, r3
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	4413      	add	r3, r2
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	b21a      	sxth	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011a68:	4b2d      	ldr	r3, [pc, #180]	; (8011b20 <tcp_receive+0x2c4>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011a80:	4b27      	ldr	r3, [pc, #156]	; (8011b20 <tcp_receive+0x2c4>)
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
 8011a8c:	2b03      	cmp	r3, #3
 8011a8e:	f240 8096 	bls.w	8011bbe <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d244      	bcs.n	8011b2c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8b5b      	ldrh	r3, [r3, #26]
 8011aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d001      	beq.n	8011ab2 <tcp_receive+0x256>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e000      	b.n	8011ab4 <tcp_receive+0x258>
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011ab8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ac2:	fb12 f303 	smulbb	r3, r2, r3
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011aca:	4293      	cmp	r3, r2
 8011acc:	bf28      	it	cs
 8011ace:	4613      	movcs	r3, r2
 8011ad0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ad8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ada:	4413      	add	r3, r2
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d309      	bcc.n	8011afc <tcp_receive+0x2a0>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011af0:	4413      	add	r3, r2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011afa:	e060      	b.n	8011bbe <tcp_receive+0x362>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011b06:	e05a      	b.n	8011bbe <tcp_receive+0x362>
 8011b08:	0801a938 	.word	0x0801a938
 8011b0c:	0801ac68 	.word	0x0801ac68
 8011b10:	0801a984 	.word	0x0801a984
 8011b14:	0801ac84 	.word	0x0801ac84
 8011b18:	20004b1c 	.word	0x20004b1c
 8011b1c:	20004b10 	.word	0x20004b10
 8011b20:	20004b14 	.word	0x20004b14
 8011b24:	20004b00 	.word	0x20004b00
 8011b28:	20004b1a 	.word	0x20004b1a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b34:	4413      	add	r3, r2
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d309      	bcc.n	8011b56 <tcp_receive+0x2fa>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b4a:	4413      	add	r3, r2
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011b54:	e004      	b.n	8011b60 <tcp_receive+0x304>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d326      	bcc.n	8011bbe <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b90:	4413      	add	r3, r2
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d30a      	bcc.n	8011bb4 <tcp_receive+0x358>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ba8:	4413      	add	r3, r2
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011bb2:	e004      	b.n	8011bbe <tcp_receive+0x362>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc6:	4a98      	ldr	r2, [pc, #608]	; (8011e28 <tcp_receive+0x5cc>)
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff fdcb 	bl	8011764 <tcp_free_acked_segments>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bdc:	4a93      	ldr	r2, [pc, #588]	; (8011e2c <tcp_receive+0x5d0>)
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7ff fdc0 	bl	8011764 <tcp_free_acked_segments>
 8011be4:	4602      	mov	r2, r0
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d104      	bne.n	8011bfc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bf8:	861a      	strh	r2, [r3, #48]	; 0x30
 8011bfa:	e002      	b.n	8011c02 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011c1e:	4b84      	ldr	r3, [pc, #528]	; (8011e30 <tcp_receive+0x5d4>)
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	4413      	add	r3, r2
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	8b5b      	ldrh	r3, [r3, #26]
 8011c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d035      	beq.n	8011ca4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d118      	bne.n	8011c72 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00c      	beq.n	8011c62 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fa feae 	bl	800c9b6 <lwip_htonl>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	dc20      	bgt.n	8011ca4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	8b5b      	ldrh	r3, [r3, #26]
 8011c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c70:	e018      	b.n	8011ca4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fa fe99 	bl	800c9b6 <lwip_htonl>
 8011c84:	4603      	mov	r3, r0
 8011c86:	1ae3      	subs	r3, r4, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	dc0b      	bgt.n	8011ca4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	8b5b      	ldrh	r3, [r3, #26]
 8011c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c9a:	e003      	b.n	8011ca4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f002 fbcd 	bl	801443c <tcp_send_empty_ack>
 8011ca2:	e000      	b.n	8011ca6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ca4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d05b      	beq.n	8011d66 <tcp_receive+0x50a>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cb2:	4b60      	ldr	r3, [pc, #384]	; (8011e34 <tcp_receive+0x5d8>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	da54      	bge.n	8011d66 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011cbc:	4b5e      	ldr	r3, [pc, #376]	; (8011e38 <tcp_receive+0x5dc>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011cd0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011cda:	10db      	asrs	r3, r3, #3
 8011cdc:	b21b      	sxth	r3, r3
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011cf4:	4413      	add	r3, r2
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	b21a      	sxth	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011cfe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	da05      	bge.n	8011d12 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011d06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011d0a:	425b      	negs	r3, r3
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011d12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d1c:	109b      	asrs	r3, r3, #2
 8011d1e:	b21b      	sxth	r3, r3
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011d36:	4413      	add	r3, r2
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	b21a      	sxth	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d46:	10db      	asrs	r3, r3, #3
 8011d48:	b21b      	sxth	r3, r3
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	4413      	add	r3, r2
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	b21a      	sxth	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011d66:	4b35      	ldr	r3, [pc, #212]	; (8011e3c <tcp_receive+0x5e0>)
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f000 84e1 	beq.w	8012732 <tcp_receive+0xed6>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
 8011d74:	2b06      	cmp	r3, #6
 8011d76:	f200 84dc 	bhi.w	8012732 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d7e:	4b30      	ldr	r3, [pc, #192]	; (8011e40 <tcp_receive+0x5e4>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	3b01      	subs	r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	f2c0 808e 	blt.w	8011ea8 <tcp_receive+0x64c>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d90:	4b2a      	ldr	r3, [pc, #168]	; (8011e3c <tcp_receive+0x5e0>)
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	4619      	mov	r1, r3
 8011d96:	4b2a      	ldr	r3, [pc, #168]	; (8011e40 <tcp_receive+0x5e4>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	440b      	add	r3, r1
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	3301      	adds	r3, #1
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	f300 8081 	bgt.w	8011ea8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011da6:	4b27      	ldr	r3, [pc, #156]	; (8011e44 <tcp_receive+0x5e8>)
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011db0:	4b23      	ldr	r3, [pc, #140]	; (8011e40 <tcp_receive+0x5e4>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011db8:	4b22      	ldr	r3, [pc, #136]	; (8011e44 <tcp_receive+0x5e8>)
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d106      	bne.n	8011dce <tcp_receive+0x572>
 8011dc0:	4b21      	ldr	r3, [pc, #132]	; (8011e48 <tcp_receive+0x5ec>)
 8011dc2:	f240 5294 	movw	r2, #1428	; 0x594
 8011dc6:	4921      	ldr	r1, [pc, #132]	; (8011e4c <tcp_receive+0x5f0>)
 8011dc8:	4821      	ldr	r0, [pc, #132]	; (8011e50 <tcp_receive+0x5f4>)
 8011dca:	f005 ff33 	bl	8017c34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d906      	bls.n	8011de6 <tcp_receive+0x58a>
 8011dd8:	4b1b      	ldr	r3, [pc, #108]	; (8011e48 <tcp_receive+0x5ec>)
 8011dda:	f240 5295 	movw	r2, #1429	; 0x595
 8011dde:	491d      	ldr	r1, [pc, #116]	; (8011e54 <tcp_receive+0x5f8>)
 8011de0:	481b      	ldr	r0, [pc, #108]	; (8011e50 <tcp_receive+0x5f4>)
 8011de2:	f005 ff27 	bl	8017c34 <iprintf>
      off = (u16_t)off32;
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011dec:	4b15      	ldr	r3, [pc, #84]	; (8011e44 <tcp_receive+0x5e8>)
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	891b      	ldrh	r3, [r3, #8]
 8011df2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d906      	bls.n	8011e08 <tcp_receive+0x5ac>
 8011dfa:	4b13      	ldr	r3, [pc, #76]	; (8011e48 <tcp_receive+0x5ec>)
 8011dfc:	f240 5297 	movw	r2, #1431	; 0x597
 8011e00:	4915      	ldr	r1, [pc, #84]	; (8011e58 <tcp_receive+0x5fc>)
 8011e02:	4813      	ldr	r0, [pc, #76]	; (8011e50 <tcp_receive+0x5f4>)
 8011e04:	f005 ff16 	bl	8017c34 <iprintf>
      inseg.len -= off;
 8011e08:	4b0e      	ldr	r3, [pc, #56]	; (8011e44 <tcp_receive+0x5e8>)
 8011e0a:	891a      	ldrh	r2, [r3, #8]
 8011e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e10:	1ad3      	subs	r3, r2, r3
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	4b0b      	ldr	r3, [pc, #44]	; (8011e44 <tcp_receive+0x5e8>)
 8011e16:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011e18:	4b0a      	ldr	r3, [pc, #40]	; (8011e44 <tcp_receive+0x5e8>)
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	891a      	ldrh	r2, [r3, #8]
 8011e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011e26:	e029      	b.n	8011e7c <tcp_receive+0x620>
 8011e28:	0801aca0 	.word	0x0801aca0
 8011e2c:	0801aca8 	.word	0x0801aca8
 8011e30:	20004b18 	.word	0x20004b18
 8011e34:	20004b14 	.word	0x20004b14
 8011e38:	2000b718 	.word	0x2000b718
 8011e3c:	20004b1a 	.word	0x20004b1a
 8011e40:	20004b10 	.word	0x20004b10
 8011e44:	20004af0 	.word	0x20004af0
 8011e48:	0801a938 	.word	0x0801a938
 8011e4c:	0801acb0 	.word	0x0801acb0
 8011e50:	0801a984 	.word	0x0801a984
 8011e54:	0801acc0 	.word	0x0801acc0
 8011e58:	0801acd0 	.word	0x0801acd0
        off -= p->len;
 8011e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e5e:	895b      	ldrh	r3, [r3, #10]
 8011e60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e6e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e72:	2200      	movs	r2, #0
 8011e74:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e7e:	895b      	ldrh	r3, [r3, #10]
 8011e80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d8e9      	bhi.n	8011e5c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011e90:	f7fc f8a2 	bl	800dfd8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e98:	4a91      	ldr	r2, [pc, #580]	; (80120e0 <tcp_receive+0x884>)
 8011e9a:	6013      	str	r3, [r2, #0]
 8011e9c:	4b91      	ldr	r3, [pc, #580]	; (80120e4 <tcp_receive+0x888>)
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	4a8f      	ldr	r2, [pc, #572]	; (80120e0 <tcp_receive+0x884>)
 8011ea2:	6812      	ldr	r2, [r2, #0]
 8011ea4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011ea6:	e00d      	b.n	8011ec4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011ea8:	4b8d      	ldr	r3, [pc, #564]	; (80120e0 <tcp_receive+0x884>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	da06      	bge.n	8011ec4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	8b5b      	ldrh	r3, [r3, #26]
 8011eba:	f043 0302 	orr.w	r3, r3, #2
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ec4:	4b86      	ldr	r3, [pc, #536]	; (80120e0 <tcp_receive+0x884>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f2c0 842a 	blt.w	8012728 <tcp_receive+0xecc>
 8011ed4:	4b82      	ldr	r3, [pc, #520]	; (80120e0 <tcp_receive+0x884>)
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011edc:	6879      	ldr	r1, [r7, #4]
 8011ede:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ee0:	440b      	add	r3, r1
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f300 841e 	bgt.w	8012728 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ef0:	4b7b      	ldr	r3, [pc, #492]	; (80120e0 <tcp_receive+0x884>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	f040 829a 	bne.w	801242e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011efa:	4b7a      	ldr	r3, [pc, #488]	; (80120e4 <tcp_receive+0x888>)
 8011efc:	891c      	ldrh	r4, [r3, #8]
 8011efe:	4b79      	ldr	r3, [pc, #484]	; (80120e4 <tcp_receive+0x888>)
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fa fd40 	bl	800c98c <lwip_htons>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	f003 0303 	and.w	r3, r3, #3
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d001      	beq.n	8011f1c <tcp_receive+0x6c0>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	e000      	b.n	8011f1e <tcp_receive+0x6c2>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4423      	add	r3, r4
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	4b71      	ldr	r3, [pc, #452]	; (80120e8 <tcp_receive+0x88c>)
 8011f24:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f2a:	4b6f      	ldr	r3, [pc, #444]	; (80120e8 <tcp_receive+0x88c>)
 8011f2c:	881b      	ldrh	r3, [r3, #0]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d275      	bcs.n	801201e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f32:	4b6c      	ldr	r3, [pc, #432]	; (80120e4 <tcp_receive+0x888>)
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	899b      	ldrh	r3, [r3, #12]
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fa fd26 	bl	800c98c <lwip_htons>
 8011f40:	4603      	mov	r3, r0
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d01f      	beq.n	8011f8c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011f4c:	4b65      	ldr	r3, [pc, #404]	; (80120e4 <tcp_receive+0x888>)
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	899b      	ldrh	r3, [r3, #12]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	b21b      	sxth	r3, r3
 8011f56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011f5a:	b21c      	sxth	r4, r3
 8011f5c:	4b61      	ldr	r3, [pc, #388]	; (80120e4 <tcp_receive+0x888>)
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	899b      	ldrh	r3, [r3, #12]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7fa fd11 	bl	800c98c <lwip_htons>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fa fd08 	bl	800c98c <lwip_htons>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	b21b      	sxth	r3, r3
 8011f80:	4323      	orrs	r3, r4
 8011f82:	b21a      	sxth	r2, r3
 8011f84:	4b57      	ldr	r3, [pc, #348]	; (80120e4 <tcp_receive+0x888>)
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	b292      	uxth	r2, r2
 8011f8a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f90:	4b54      	ldr	r3, [pc, #336]	; (80120e4 <tcp_receive+0x888>)
 8011f92:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f94:	4b53      	ldr	r3, [pc, #332]	; (80120e4 <tcp_receive+0x888>)
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	899b      	ldrh	r3, [r3, #12]
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fa fcf5 	bl	800c98c <lwip_htons>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	f003 0302 	and.w	r3, r3, #2
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d005      	beq.n	8011fba <tcp_receive+0x75e>
            inseg.len -= 1;
 8011fae:	4b4d      	ldr	r3, [pc, #308]	; (80120e4 <tcp_receive+0x888>)
 8011fb0:	891b      	ldrh	r3, [r3, #8]
 8011fb2:	3b01      	subs	r3, #1
 8011fb4:	b29a      	uxth	r2, r3
 8011fb6:	4b4b      	ldr	r3, [pc, #300]	; (80120e4 <tcp_receive+0x888>)
 8011fb8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011fba:	4b4a      	ldr	r3, [pc, #296]	; (80120e4 <tcp_receive+0x888>)
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4a49      	ldr	r2, [pc, #292]	; (80120e4 <tcp_receive+0x888>)
 8011fc0:	8912      	ldrh	r2, [r2, #8]
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fb ff07 	bl	800ddd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011fca:	4b46      	ldr	r3, [pc, #280]	; (80120e4 <tcp_receive+0x888>)
 8011fcc:	891c      	ldrh	r4, [r3, #8]
 8011fce:	4b45      	ldr	r3, [pc, #276]	; (80120e4 <tcp_receive+0x888>)
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	899b      	ldrh	r3, [r3, #12]
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fa fcd8 	bl	800c98c <lwip_htons>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <tcp_receive+0x790>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e000      	b.n	8011fee <tcp_receive+0x792>
 8011fec:	2300      	movs	r3, #0
 8011fee:	4423      	add	r3, r4
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	4b3d      	ldr	r3, [pc, #244]	; (80120e8 <tcp_receive+0x88c>)
 8011ff4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ff6:	4b3c      	ldr	r3, [pc, #240]	; (80120e8 <tcp_receive+0x88c>)
 8011ff8:	881b      	ldrh	r3, [r3, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	4b38      	ldr	r3, [pc, #224]	; (80120e0 <tcp_receive+0x884>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	441a      	add	r2, r3
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012006:	6879      	ldr	r1, [r7, #4]
 8012008:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801200a:	440b      	add	r3, r1
 801200c:	429a      	cmp	r2, r3
 801200e:	d006      	beq.n	801201e <tcp_receive+0x7c2>
 8012010:	4b36      	ldr	r3, [pc, #216]	; (80120ec <tcp_receive+0x890>)
 8012012:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012016:	4936      	ldr	r1, [pc, #216]	; (80120f0 <tcp_receive+0x894>)
 8012018:	4836      	ldr	r0, [pc, #216]	; (80120f4 <tcp_receive+0x898>)
 801201a:	f005 fe0b 	bl	8017c34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012022:	2b00      	cmp	r3, #0
 8012024:	f000 80e7 	beq.w	80121f6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012028:	4b2e      	ldr	r3, [pc, #184]	; (80120e4 <tcp_receive+0x888>)
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	899b      	ldrh	r3, [r3, #12]
 801202e:	b29b      	uxth	r3, r3
 8012030:	4618      	mov	r0, r3
 8012032:	f7fa fcab 	bl	800c98c <lwip_htons>
 8012036:	4603      	mov	r3, r0
 8012038:	b2db      	uxtb	r3, r3
 801203a:	f003 0301 	and.w	r3, r3, #1
 801203e:	2b00      	cmp	r3, #0
 8012040:	d010      	beq.n	8012064 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012042:	e00a      	b.n	801205a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012048:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f7fd fcc8 	bl	800f9ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1f0      	bne.n	8012044 <tcp_receive+0x7e8>
 8012062:	e0c8      	b.n	80121f6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012068:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801206a:	e052      	b.n	8012112 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801206c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	899b      	ldrh	r3, [r3, #12]
 8012072:	b29b      	uxth	r3, r3
 8012074:	4618      	mov	r0, r3
 8012076:	f7fa fc89 	bl	800c98c <lwip_htons>
 801207a:	4603      	mov	r3, r0
 801207c:	b2db      	uxtb	r3, r3
 801207e:	f003 0301 	and.w	r3, r3, #1
 8012082:	2b00      	cmp	r3, #0
 8012084:	d03d      	beq.n	8012102 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012086:	4b17      	ldr	r3, [pc, #92]	; (80120e4 <tcp_receive+0x888>)
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	899b      	ldrh	r3, [r3, #12]
 801208c:	b29b      	uxth	r3, r3
 801208e:	4618      	mov	r0, r3
 8012090:	f7fa fc7c 	bl	800c98c <lwip_htons>
 8012094:	4603      	mov	r3, r0
 8012096:	b2db      	uxtb	r3, r3
 8012098:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801209c:	2b00      	cmp	r3, #0
 801209e:	d130      	bne.n	8012102 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80120a0:	4b10      	ldr	r3, [pc, #64]	; (80120e4 <tcp_receive+0x888>)
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	899b      	ldrh	r3, [r3, #12]
 80120a6:	b29c      	uxth	r4, r3
 80120a8:	2001      	movs	r0, #1
 80120aa:	f7fa fc6f 	bl	800c98c <lwip_htons>
 80120ae:	4603      	mov	r3, r0
 80120b0:	461a      	mov	r2, r3
 80120b2:	4b0c      	ldr	r3, [pc, #48]	; (80120e4 <tcp_receive+0x888>)
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	4322      	orrs	r2, r4
 80120b8:	b292      	uxth	r2, r2
 80120ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80120bc:	4b09      	ldr	r3, [pc, #36]	; (80120e4 <tcp_receive+0x888>)
 80120be:	891c      	ldrh	r4, [r3, #8]
 80120c0:	4b08      	ldr	r3, [pc, #32]	; (80120e4 <tcp_receive+0x888>)
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	899b      	ldrh	r3, [r3, #12]
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fa fc5f 	bl	800c98c <lwip_htons>
 80120ce:	4603      	mov	r3, r0
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	f003 0303 	and.w	r3, r3, #3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00e      	beq.n	80120f8 <tcp_receive+0x89c>
 80120da:	2301      	movs	r3, #1
 80120dc:	e00d      	b.n	80120fa <tcp_receive+0x89e>
 80120de:	bf00      	nop
 80120e0:	20004b10 	.word	0x20004b10
 80120e4:	20004af0 	.word	0x20004af0
 80120e8:	20004b1a 	.word	0x20004b1a
 80120ec:	0801a938 	.word	0x0801a938
 80120f0:	0801ace0 	.word	0x0801ace0
 80120f4:	0801a984 	.word	0x0801a984
 80120f8:	2300      	movs	r3, #0
 80120fa:	4423      	add	r3, r4
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	4b98      	ldr	r3, [pc, #608]	; (8012360 <tcp_receive+0xb04>)
 8012100:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012104:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801210c:	6938      	ldr	r0, [r7, #16]
 801210e:	f7fd fc6c 	bl	800f9ea <tcp_seg_free>
            while (next &&
 8012112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00e      	beq.n	8012136 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012118:	4b91      	ldr	r3, [pc, #580]	; (8012360 <tcp_receive+0xb04>)
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	461a      	mov	r2, r3
 801211e:	4b91      	ldr	r3, [pc, #580]	; (8012364 <tcp_receive+0xb08>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	441a      	add	r2, r3
 8012124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801212c:	8909      	ldrh	r1, [r1, #8]
 801212e:	440b      	add	r3, r1
 8012130:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012132:	2b00      	cmp	r3, #0
 8012134:	da9a      	bge.n	801206c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012138:	2b00      	cmp	r3, #0
 801213a:	d059      	beq.n	80121f0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801213c:	4b88      	ldr	r3, [pc, #544]	; (8012360 <tcp_receive+0xb04>)
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	461a      	mov	r2, r3
 8012142:	4b88      	ldr	r3, [pc, #544]	; (8012364 <tcp_receive+0xb08>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	441a      	add	r2, r3
 8012148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012150:	2b00      	cmp	r3, #0
 8012152:	dd4d      	ble.n	80121f0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	b29a      	uxth	r2, r3
 801215c:	4b81      	ldr	r3, [pc, #516]	; (8012364 <tcp_receive+0xb08>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	b29b      	uxth	r3, r3
 8012162:	1ad3      	subs	r3, r2, r3
 8012164:	b29a      	uxth	r2, r3
 8012166:	4b80      	ldr	r3, [pc, #512]	; (8012368 <tcp_receive+0xb0c>)
 8012168:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801216a:	4b7f      	ldr	r3, [pc, #508]	; (8012368 <tcp_receive+0xb0c>)
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	899b      	ldrh	r3, [r3, #12]
 8012170:	b29b      	uxth	r3, r3
 8012172:	4618      	mov	r0, r3
 8012174:	f7fa fc0a 	bl	800c98c <lwip_htons>
 8012178:	4603      	mov	r3, r0
 801217a:	b2db      	uxtb	r3, r3
 801217c:	f003 0302 	and.w	r3, r3, #2
 8012180:	2b00      	cmp	r3, #0
 8012182:	d005      	beq.n	8012190 <tcp_receive+0x934>
                inseg.len -= 1;
 8012184:	4b78      	ldr	r3, [pc, #480]	; (8012368 <tcp_receive+0xb0c>)
 8012186:	891b      	ldrh	r3, [r3, #8]
 8012188:	3b01      	subs	r3, #1
 801218a:	b29a      	uxth	r2, r3
 801218c:	4b76      	ldr	r3, [pc, #472]	; (8012368 <tcp_receive+0xb0c>)
 801218e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012190:	4b75      	ldr	r3, [pc, #468]	; (8012368 <tcp_receive+0xb0c>)
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4a74      	ldr	r2, [pc, #464]	; (8012368 <tcp_receive+0xb0c>)
 8012196:	8912      	ldrh	r2, [r2, #8]
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7fb fe1c 	bl	800ddd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80121a0:	4b71      	ldr	r3, [pc, #452]	; (8012368 <tcp_receive+0xb0c>)
 80121a2:	891c      	ldrh	r4, [r3, #8]
 80121a4:	4b70      	ldr	r3, [pc, #448]	; (8012368 <tcp_receive+0xb0c>)
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	899b      	ldrh	r3, [r3, #12]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fa fbed 	bl	800c98c <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	f003 0303 	and.w	r3, r3, #3
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d001      	beq.n	80121c2 <tcp_receive+0x966>
 80121be:	2301      	movs	r3, #1
 80121c0:	e000      	b.n	80121c4 <tcp_receive+0x968>
 80121c2:	2300      	movs	r3, #0
 80121c4:	4423      	add	r3, r4
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	4b65      	ldr	r3, [pc, #404]	; (8012360 <tcp_receive+0xb04>)
 80121ca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80121cc:	4b64      	ldr	r3, [pc, #400]	; (8012360 <tcp_receive+0xb04>)
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	461a      	mov	r2, r3
 80121d2:	4b64      	ldr	r3, [pc, #400]	; (8012364 <tcp_receive+0xb08>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	441a      	add	r2, r3
 80121d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d006      	beq.n	80121f0 <tcp_receive+0x994>
 80121e2:	4b62      	ldr	r3, [pc, #392]	; (801236c <tcp_receive+0xb10>)
 80121e4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80121e8:	4961      	ldr	r1, [pc, #388]	; (8012370 <tcp_receive+0xb14>)
 80121ea:	4862      	ldr	r0, [pc, #392]	; (8012374 <tcp_receive+0xb18>)
 80121ec:	f005 fd22 	bl	8017c34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121f4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80121f6:	4b5a      	ldr	r3, [pc, #360]	; (8012360 <tcp_receive+0xb04>)
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	461a      	mov	r2, r3
 80121fc:	4b59      	ldr	r3, [pc, #356]	; (8012364 <tcp_receive+0xb08>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	441a      	add	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801220a:	4b55      	ldr	r3, [pc, #340]	; (8012360 <tcp_receive+0xb04>)
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	429a      	cmp	r2, r3
 8012210:	d206      	bcs.n	8012220 <tcp_receive+0x9c4>
 8012212:	4b56      	ldr	r3, [pc, #344]	; (801236c <tcp_receive+0xb10>)
 8012214:	f240 6207 	movw	r2, #1543	; 0x607
 8012218:	4957      	ldr	r1, [pc, #348]	; (8012378 <tcp_receive+0xb1c>)
 801221a:	4856      	ldr	r0, [pc, #344]	; (8012374 <tcp_receive+0xb18>)
 801221c:	f005 fd0a 	bl	8017c34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012224:	4b4e      	ldr	r3, [pc, #312]	; (8012360 <tcp_receive+0xb04>)
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	1ad3      	subs	r3, r2, r3
 801222a:	b29a      	uxth	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7fc feb5 	bl	800efa0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012236:	4b4c      	ldr	r3, [pc, #304]	; (8012368 <tcp_receive+0xb0c>)
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	891b      	ldrh	r3, [r3, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d006      	beq.n	801224e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012240:	4b49      	ldr	r3, [pc, #292]	; (8012368 <tcp_receive+0xb0c>)
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	4a4d      	ldr	r2, [pc, #308]	; (801237c <tcp_receive+0xb20>)
 8012246:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012248:	4b47      	ldr	r3, [pc, #284]	; (8012368 <tcp_receive+0xb0c>)
 801224a:	2200      	movs	r2, #0
 801224c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801224e:	4b46      	ldr	r3, [pc, #280]	; (8012368 <tcp_receive+0xb0c>)
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	899b      	ldrh	r3, [r3, #12]
 8012254:	b29b      	uxth	r3, r3
 8012256:	4618      	mov	r0, r3
 8012258:	f7fa fb98 	bl	800c98c <lwip_htons>
 801225c:	4603      	mov	r3, r0
 801225e:	b2db      	uxtb	r3, r3
 8012260:	f003 0301 	and.w	r3, r3, #1
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 80b8 	beq.w	80123da <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801226a:	4b45      	ldr	r3, [pc, #276]	; (8012380 <tcp_receive+0xb24>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	f043 0320 	orr.w	r3, r3, #32
 8012272:	b2da      	uxtb	r2, r3
 8012274:	4b42      	ldr	r3, [pc, #264]	; (8012380 <tcp_receive+0xb24>)
 8012276:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012278:	e0af      	b.n	80123da <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801227e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4a36      	ldr	r2, [pc, #216]	; (8012364 <tcp_receive+0xb08>)
 801228a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	891b      	ldrh	r3, [r3, #8]
 8012290:	461c      	mov	r4, r3
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	899b      	ldrh	r3, [r3, #12]
 8012298:	b29b      	uxth	r3, r3
 801229a:	4618      	mov	r0, r3
 801229c:	f7fa fb76 	bl	800c98c <lwip_htons>
 80122a0:	4603      	mov	r3, r0
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	f003 0303 	and.w	r3, r3, #3
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <tcp_receive+0xa54>
 80122ac:	2301      	movs	r3, #1
 80122ae:	e000      	b.n	80122b2 <tcp_receive+0xa56>
 80122b0:	2300      	movs	r3, #0
 80122b2:	191a      	adds	r2, r3, r4
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b8:	441a      	add	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122c2:	461c      	mov	r4, r3
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	891b      	ldrh	r3, [r3, #8]
 80122c8:	461d      	mov	r5, r3
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	899b      	ldrh	r3, [r3, #12]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7fa fb5a 	bl	800c98c <lwip_htons>
 80122d8:	4603      	mov	r3, r0
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	f003 0303 	and.w	r3, r3, #3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d001      	beq.n	80122e8 <tcp_receive+0xa8c>
 80122e4:	2301      	movs	r3, #1
 80122e6:	e000      	b.n	80122ea <tcp_receive+0xa8e>
 80122e8:	2300      	movs	r3, #0
 80122ea:	442b      	add	r3, r5
 80122ec:	429c      	cmp	r4, r3
 80122ee:	d206      	bcs.n	80122fe <tcp_receive+0xaa2>
 80122f0:	4b1e      	ldr	r3, [pc, #120]	; (801236c <tcp_receive+0xb10>)
 80122f2:	f240 622b 	movw	r2, #1579	; 0x62b
 80122f6:	4923      	ldr	r1, [pc, #140]	; (8012384 <tcp_receive+0xb28>)
 80122f8:	481e      	ldr	r0, [pc, #120]	; (8012374 <tcp_receive+0xb18>)
 80122fa:	f005 fc9b 	bl	8017c34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	891b      	ldrh	r3, [r3, #8]
 8012302:	461c      	mov	r4, r3
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	b29b      	uxth	r3, r3
 801230c:	4618      	mov	r0, r3
 801230e:	f7fa fb3d 	bl	800c98c <lwip_htons>
 8012312:	4603      	mov	r3, r0
 8012314:	b2db      	uxtb	r3, r3
 8012316:	f003 0303 	and.w	r3, r3, #3
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <tcp_receive+0xac6>
 801231e:	2301      	movs	r3, #1
 8012320:	e000      	b.n	8012324 <tcp_receive+0xac8>
 8012322:	2300      	movs	r3, #0
 8012324:	1919      	adds	r1, r3, r4
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801232a:	b28b      	uxth	r3, r1
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7fc fe33 	bl	800efa0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	891b      	ldrh	r3, [r3, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d028      	beq.n	8012396 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012344:	4b0d      	ldr	r3, [pc, #52]	; (801237c <tcp_receive+0xb20>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d01d      	beq.n	8012388 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801234c:	4b0b      	ldr	r3, [pc, #44]	; (801237c <tcp_receive+0xb20>)
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fb ff92 	bl	800e280 <pbuf_cat>
 801235c:	e018      	b.n	8012390 <tcp_receive+0xb34>
 801235e:	bf00      	nop
 8012360:	20004b1a 	.word	0x20004b1a
 8012364:	20004b10 	.word	0x20004b10
 8012368:	20004af0 	.word	0x20004af0
 801236c:	0801a938 	.word	0x0801a938
 8012370:	0801ad18 	.word	0x0801ad18
 8012374:	0801a984 	.word	0x0801a984
 8012378:	0801ad54 	.word	0x0801ad54
 801237c:	20004b20 	.word	0x20004b20
 8012380:	20004b1d 	.word	0x20004b1d
 8012384:	0801ad74 	.word	0x0801ad74
            } else {
              recv_data = cseg->p;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	4a70      	ldr	r2, [pc, #448]	; (8012550 <tcp_receive+0xcf4>)
 801238e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	2200      	movs	r2, #0
 8012394:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	899b      	ldrh	r3, [r3, #12]
 801239c:	b29b      	uxth	r3, r3
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fa faf4 	bl	800c98c <lwip_htons>
 80123a4:	4603      	mov	r3, r0
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	f003 0301 	and.w	r3, r3, #1
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00d      	beq.n	80123cc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80123b0:	4b68      	ldr	r3, [pc, #416]	; (8012554 <tcp_receive+0xcf8>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	f043 0320 	orr.w	r3, r3, #32
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	4b66      	ldr	r3, [pc, #408]	; (8012554 <tcp_receive+0xcf8>)
 80123bc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	7d1b      	ldrb	r3, [r3, #20]
 80123c2:	2b04      	cmp	r3, #4
 80123c4:	d102      	bne.n	80123cc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2207      	movs	r2, #7
 80123ca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80123d4:	68b8      	ldr	r0, [r7, #8]
 80123d6:	f7fd fb08 	bl	800f9ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d008      	beq.n	80123f4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80123ee:	429a      	cmp	r2, r3
 80123f0:	f43f af43 	beq.w	801227a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	8b5b      	ldrh	r3, [r3, #26]
 80123f8:	f003 0301 	and.w	r3, r3, #1
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d00e      	beq.n	801241e <tcp_receive+0xbc2>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8b5b      	ldrh	r3, [r3, #26]
 8012404:	f023 0301 	bic.w	r3, r3, #1
 8012408:	b29a      	uxth	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	835a      	strh	r2, [r3, #26]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8b5b      	ldrh	r3, [r3, #26]
 8012412:	f043 0302 	orr.w	r3, r3, #2
 8012416:	b29a      	uxth	r2, r3
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801241c:	e188      	b.n	8012730 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f043 0301 	orr.w	r3, r3, #1
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801242c:	e180      	b.n	8012730 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012432:	2b00      	cmp	r3, #0
 8012434:	d106      	bne.n	8012444 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012436:	4848      	ldr	r0, [pc, #288]	; (8012558 <tcp_receive+0xcfc>)
 8012438:	f7fd faf0 	bl	800fa1c <tcp_seg_copy>
 801243c:	4602      	mov	r2, r0
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	675a      	str	r2, [r3, #116]	; 0x74
 8012442:	e16d      	b.n	8012720 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012444:	2300      	movs	r3, #0
 8012446:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801244c:	63bb      	str	r3, [r7, #56]	; 0x38
 801244e:	e157      	b.n	8012700 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	4b41      	ldr	r3, [pc, #260]	; (801255c <tcp_receive+0xd00>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	429a      	cmp	r2, r3
 801245c:	d11d      	bne.n	801249a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801245e:	4b3e      	ldr	r3, [pc, #248]	; (8012558 <tcp_receive+0xcfc>)
 8012460:	891a      	ldrh	r2, [r3, #8]
 8012462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012464:	891b      	ldrh	r3, [r3, #8]
 8012466:	429a      	cmp	r2, r3
 8012468:	f240 814f 	bls.w	801270a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801246c:	483a      	ldr	r0, [pc, #232]	; (8012558 <tcp_receive+0xcfc>)
 801246e:	f7fd fad5 	bl	800fa1c <tcp_seg_copy>
 8012472:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	2b00      	cmp	r3, #0
 8012478:	f000 8149 	beq.w	801270e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801247e:	2b00      	cmp	r3, #0
 8012480:	d003      	beq.n	801248a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012484:	697a      	ldr	r2, [r7, #20]
 8012486:	601a      	str	r2, [r3, #0]
 8012488:	e002      	b.n	8012490 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	697a      	ldr	r2, [r7, #20]
 801248e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012492:	6978      	ldr	r0, [r7, #20]
 8012494:	f7ff f8de 	bl	8011654 <tcp_oos_insert_segment>
                }
                break;
 8012498:	e139      	b.n	801270e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249c:	2b00      	cmp	r3, #0
 801249e:	d117      	bne.n	80124d0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80124a0:	4b2e      	ldr	r3, [pc, #184]	; (801255c <tcp_receive+0xd00>)
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	da57      	bge.n	8012560 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80124b0:	4829      	ldr	r0, [pc, #164]	; (8012558 <tcp_receive+0xcfc>)
 80124b2:	f7fd fab3 	bl	800fa1c <tcp_seg_copy>
 80124b6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 8129 	beq.w	8012712 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80124c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80124c8:	69b8      	ldr	r0, [r7, #24]
 80124ca:	f7ff f8c3 	bl	8011654 <tcp_oos_insert_segment>
                  }
                  break;
 80124ce:	e120      	b.n	8012712 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80124d0:	4b22      	ldr	r3, [pc, #136]	; (801255c <tcp_receive+0xd00>)
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	3b01      	subs	r3, #1
 80124de:	2b00      	cmp	r3, #0
 80124e0:	db3e      	blt.n	8012560 <tcp_receive+0xd04>
 80124e2:	4b1e      	ldr	r3, [pc, #120]	; (801255c <tcp_receive+0xd00>)
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	3301      	adds	r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	dc35      	bgt.n	8012560 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80124f4:	4818      	ldr	r0, [pc, #96]	; (8012558 <tcp_receive+0xcfc>)
 80124f6:	f7fd fa91 	bl	800fa1c <tcp_seg_copy>
 80124fa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f000 8109 	beq.w	8012716 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801250c:	8912      	ldrh	r2, [r2, #8]
 801250e:	441a      	add	r2, r3
 8012510:	4b12      	ldr	r3, [pc, #72]	; (801255c <tcp_receive+0xd00>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	1ad3      	subs	r3, r2, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	dd12      	ble.n	8012540 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801251a:	4b10      	ldr	r3, [pc, #64]	; (801255c <tcp_receive+0xd00>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	b29a      	uxth	r2, r3
 8012520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	b29b      	uxth	r3, r3
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	b29a      	uxth	r2, r3
 801252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801252e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012532:	685a      	ldr	r2, [r3, #4]
 8012534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012536:	891b      	ldrh	r3, [r3, #8]
 8012538:	4619      	mov	r1, r3
 801253a:	4610      	mov	r0, r2
 801253c:	f7fb fc4c 	bl	800ddd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012542:	69fa      	ldr	r2, [r7, #28]
 8012544:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012548:	69f8      	ldr	r0, [r7, #28]
 801254a:	f7ff f883 	bl	8011654 <tcp_oos_insert_segment>
                  }
                  break;
 801254e:	e0e2      	b.n	8012716 <tcp_receive+0xeba>
 8012550:	20004b20 	.word	0x20004b20
 8012554:	20004b1d 	.word	0x20004b1d
 8012558:	20004af0 	.word	0x20004af0
 801255c:	20004b10 	.word	0x20004b10
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012562:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	f040 80c6 	bne.w	80126fa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801256e:	4b80      	ldr	r3, [pc, #512]	; (8012770 <tcp_receive+0xf14>)
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801257a:	2b00      	cmp	r3, #0
 801257c:	f340 80bd 	ble.w	80126fa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	899b      	ldrh	r3, [r3, #12]
 8012586:	b29b      	uxth	r3, r3
 8012588:	4618      	mov	r0, r3
 801258a:	f7fa f9ff 	bl	800c98c <lwip_htons>
 801258e:	4603      	mov	r3, r0
 8012590:	b2db      	uxtb	r3, r3
 8012592:	f003 0301 	and.w	r3, r3, #1
 8012596:	2b00      	cmp	r3, #0
 8012598:	f040 80bf 	bne.w	801271a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801259c:	4875      	ldr	r0, [pc, #468]	; (8012774 <tcp_receive+0xf18>)
 801259e:	f7fd fa3d 	bl	800fa1c <tcp_seg_copy>
 80125a2:	4602      	mov	r2, r0
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 80b6 	beq.w	801271e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125ba:	8912      	ldrh	r2, [r2, #8]
 80125bc:	441a      	add	r2, r3
 80125be:	4b6c      	ldr	r3, [pc, #432]	; (8012770 <tcp_receive+0xf14>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	dd12      	ble.n	80125ee <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80125c8:	4b69      	ldr	r3, [pc, #420]	; (8012770 <tcp_receive+0xf14>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	b29a      	uxth	r2, r3
 80125da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80125de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e0:	685a      	ldr	r2, [r3, #4]
 80125e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e4:	891b      	ldrh	r3, [r3, #8]
 80125e6:	4619      	mov	r1, r3
 80125e8:	4610      	mov	r0, r2
 80125ea:	f7fb fbf5 	bl	800ddd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80125ee:	4b62      	ldr	r3, [pc, #392]	; (8012778 <tcp_receive+0xf1c>)
 80125f0:	881b      	ldrh	r3, [r3, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	4b5e      	ldr	r3, [pc, #376]	; (8012770 <tcp_receive+0xf14>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	441a      	add	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fe:	6879      	ldr	r1, [r7, #4]
 8012600:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012602:	440b      	add	r3, r1
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	2b00      	cmp	r3, #0
 8012608:	f340 8089 	ble.w	801271e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	899b      	ldrh	r3, [r3, #12]
 8012614:	b29b      	uxth	r3, r3
 8012616:	4618      	mov	r0, r3
 8012618:	f7fa f9b8 	bl	800c98c <lwip_htons>
 801261c:	4603      	mov	r3, r0
 801261e:	b2db      	uxtb	r3, r3
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	2b00      	cmp	r3, #0
 8012626:	d022      	beq.n	801266e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	899b      	ldrh	r3, [r3, #12]
 8012630:	b29b      	uxth	r3, r3
 8012632:	b21b      	sxth	r3, r3
 8012634:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012638:	b21c      	sxth	r4, r3
 801263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	899b      	ldrh	r3, [r3, #12]
 8012642:	b29b      	uxth	r3, r3
 8012644:	4618      	mov	r0, r3
 8012646:	f7fa f9a1 	bl	800c98c <lwip_htons>
 801264a:	4603      	mov	r3, r0
 801264c:	b2db      	uxtb	r3, r3
 801264e:	b29b      	uxth	r3, r3
 8012650:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012654:	b29b      	uxth	r3, r3
 8012656:	4618      	mov	r0, r3
 8012658:	f7fa f998 	bl	800c98c <lwip_htons>
 801265c:	4603      	mov	r3, r0
 801265e:	b21b      	sxth	r3, r3
 8012660:	4323      	orrs	r3, r4
 8012662:	b21a      	sxth	r2, r3
 8012664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	b292      	uxth	r2, r2
 801266c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012672:	b29a      	uxth	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012678:	4413      	add	r3, r2
 801267a:	b299      	uxth	r1, r3
 801267c:	4b3c      	ldr	r3, [pc, #240]	; (8012770 <tcp_receive+0xf14>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	b29a      	uxth	r2, r3
 8012682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	1a8a      	subs	r2, r1, r2
 8012688:	b292      	uxth	r2, r2
 801268a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	685a      	ldr	r2, [r3, #4]
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	891b      	ldrh	r3, [r3, #8]
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f7fb fb9c 	bl	800ddd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80126a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	891c      	ldrh	r4, [r3, #8]
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	899b      	ldrh	r3, [r3, #12]
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fa f96b 	bl	800c98c <lwip_htons>
 80126b6:	4603      	mov	r3, r0
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	f003 0303 	and.w	r3, r3, #3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d001      	beq.n	80126c6 <tcp_receive+0xe6a>
 80126c2:	2301      	movs	r3, #1
 80126c4:	e000      	b.n	80126c8 <tcp_receive+0xe6c>
 80126c6:	2300      	movs	r3, #0
 80126c8:	4423      	add	r3, r4
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	4b2a      	ldr	r3, [pc, #168]	; (8012778 <tcp_receive+0xf1c>)
 80126ce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80126d0:	4b29      	ldr	r3, [pc, #164]	; (8012778 <tcp_receive+0xf1c>)
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	461a      	mov	r2, r3
 80126d6:	4b26      	ldr	r3, [pc, #152]	; (8012770 <tcp_receive+0xf14>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	441a      	add	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e0:	6879      	ldr	r1, [r7, #4]
 80126e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126e4:	440b      	add	r3, r1
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d019      	beq.n	801271e <tcp_receive+0xec2>
 80126ea:	4b24      	ldr	r3, [pc, #144]	; (801277c <tcp_receive+0xf20>)
 80126ec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80126f0:	4923      	ldr	r1, [pc, #140]	; (8012780 <tcp_receive+0xf24>)
 80126f2:	4824      	ldr	r0, [pc, #144]	; (8012784 <tcp_receive+0xf28>)
 80126f4:	f005 fa9e 	bl	8017c34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80126f8:	e011      	b.n	801271e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80126fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8012700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012702:	2b00      	cmp	r3, #0
 8012704:	f47f aea4 	bne.w	8012450 <tcp_receive+0xbf4>
 8012708:	e00a      	b.n	8012720 <tcp_receive+0xec4>
                break;
 801270a:	bf00      	nop
 801270c:	e008      	b.n	8012720 <tcp_receive+0xec4>
                break;
 801270e:	bf00      	nop
 8012710:	e006      	b.n	8012720 <tcp_receive+0xec4>
                  break;
 8012712:	bf00      	nop
 8012714:	e004      	b.n	8012720 <tcp_receive+0xec4>
                  break;
 8012716:	bf00      	nop
 8012718:	e002      	b.n	8012720 <tcp_receive+0xec4>
                  break;
 801271a:	bf00      	nop
 801271c:	e000      	b.n	8012720 <tcp_receive+0xec4>
                break;
 801271e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f001 fe8b 	bl	801443c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012726:	e003      	b.n	8012730 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f001 fe87 	bl	801443c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801272e:	e01a      	b.n	8012766 <tcp_receive+0xf0a>
 8012730:	e019      	b.n	8012766 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012732:	4b0f      	ldr	r3, [pc, #60]	; (8012770 <tcp_receive+0xf14>)
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801273a:	1ad3      	subs	r3, r2, r3
 801273c:	2b00      	cmp	r3, #0
 801273e:	db0a      	blt.n	8012756 <tcp_receive+0xefa>
 8012740:	4b0b      	ldr	r3, [pc, #44]	; (8012770 <tcp_receive+0xf14>)
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012748:	6879      	ldr	r1, [r7, #4]
 801274a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801274c:	440b      	add	r3, r1
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	3301      	adds	r3, #1
 8012752:	2b00      	cmp	r3, #0
 8012754:	dd07      	ble.n	8012766 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	8b5b      	ldrh	r3, [r3, #26]
 801275a:	f043 0302 	orr.w	r3, r3, #2
 801275e:	b29a      	uxth	r2, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012764:	e7ff      	b.n	8012766 <tcp_receive+0xf0a>
 8012766:	bf00      	nop
 8012768:	3750      	adds	r7, #80	; 0x50
 801276a:	46bd      	mov	sp, r7
 801276c:	bdb0      	pop	{r4, r5, r7, pc}
 801276e:	bf00      	nop
 8012770:	20004b10 	.word	0x20004b10
 8012774:	20004af0 	.word	0x20004af0
 8012778:	20004b1a 	.word	0x20004b1a
 801277c:	0801a938 	.word	0x0801a938
 8012780:	0801ace0 	.word	0x0801ace0
 8012784:	0801a984 	.word	0x0801a984

08012788 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801278e:	4b15      	ldr	r3, [pc, #84]	; (80127e4 <tcp_get_next_optbyte+0x5c>)
 8012790:	881b      	ldrh	r3, [r3, #0]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	b291      	uxth	r1, r2
 8012796:	4a13      	ldr	r2, [pc, #76]	; (80127e4 <tcp_get_next_optbyte+0x5c>)
 8012798:	8011      	strh	r1, [r2, #0]
 801279a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801279c:	4b12      	ldr	r3, [pc, #72]	; (80127e8 <tcp_get_next_optbyte+0x60>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d004      	beq.n	80127ae <tcp_get_next_optbyte+0x26>
 80127a4:	4b11      	ldr	r3, [pc, #68]	; (80127ec <tcp_get_next_optbyte+0x64>)
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	88fa      	ldrh	r2, [r7, #6]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d208      	bcs.n	80127c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80127ae:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <tcp_get_next_optbyte+0x68>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	3314      	adds	r3, #20
 80127b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80127b6:	88fb      	ldrh	r3, [r7, #6]
 80127b8:	683a      	ldr	r2, [r7, #0]
 80127ba:	4413      	add	r3, r2
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	e00b      	b.n	80127d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80127c0:	88fb      	ldrh	r3, [r7, #6]
 80127c2:	b2da      	uxtb	r2, r3
 80127c4:	4b09      	ldr	r3, [pc, #36]	; (80127ec <tcp_get_next_optbyte+0x64>)
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80127ce:	4b06      	ldr	r3, [pc, #24]	; (80127e8 <tcp_get_next_optbyte+0x60>)
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	797b      	ldrb	r3, [r7, #5]
 80127d4:	4413      	add	r3, r2
 80127d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr
 80127e4:	20004b0c 	.word	0x20004b0c
 80127e8:	20004b08 	.word	0x20004b08
 80127ec:	20004b06 	.word	0x20004b06
 80127f0:	20004b00 	.word	0x20004b00

080127f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d106      	bne.n	8012810 <tcp_parseopt+0x1c>
 8012802:	4b32      	ldr	r3, [pc, #200]	; (80128cc <tcp_parseopt+0xd8>)
 8012804:	f240 727d 	movw	r2, #1917	; 0x77d
 8012808:	4931      	ldr	r1, [pc, #196]	; (80128d0 <tcp_parseopt+0xdc>)
 801280a:	4832      	ldr	r0, [pc, #200]	; (80128d4 <tcp_parseopt+0xe0>)
 801280c:	f005 fa12 	bl	8017c34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012810:	4b31      	ldr	r3, [pc, #196]	; (80128d8 <tcp_parseopt+0xe4>)
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d055      	beq.n	80128c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012818:	4b30      	ldr	r3, [pc, #192]	; (80128dc <tcp_parseopt+0xe8>)
 801281a:	2200      	movs	r2, #0
 801281c:	801a      	strh	r2, [r3, #0]
 801281e:	e045      	b.n	80128ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012820:	f7ff ffb2 	bl	8012788 <tcp_get_next_optbyte>
 8012824:	4603      	mov	r3, r0
 8012826:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012828:	7bfb      	ldrb	r3, [r7, #15]
 801282a:	2b02      	cmp	r3, #2
 801282c:	d006      	beq.n	801283c <tcp_parseopt+0x48>
 801282e:	2b02      	cmp	r3, #2
 8012830:	dc2b      	bgt.n	801288a <tcp_parseopt+0x96>
 8012832:	2b00      	cmp	r3, #0
 8012834:	d041      	beq.n	80128ba <tcp_parseopt+0xc6>
 8012836:	2b01      	cmp	r3, #1
 8012838:	d127      	bne.n	801288a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801283a:	e037      	b.n	80128ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801283c:	f7ff ffa4 	bl	8012788 <tcp_get_next_optbyte>
 8012840:	4603      	mov	r3, r0
 8012842:	2b04      	cmp	r3, #4
 8012844:	d13b      	bne.n	80128be <tcp_parseopt+0xca>
 8012846:	4b25      	ldr	r3, [pc, #148]	; (80128dc <tcp_parseopt+0xe8>)
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	3301      	adds	r3, #1
 801284c:	4a22      	ldr	r2, [pc, #136]	; (80128d8 <tcp_parseopt+0xe4>)
 801284e:	8812      	ldrh	r2, [r2, #0]
 8012850:	4293      	cmp	r3, r2
 8012852:	da34      	bge.n	80128be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012854:	f7ff ff98 	bl	8012788 <tcp_get_next_optbyte>
 8012858:	4603      	mov	r3, r0
 801285a:	b29b      	uxth	r3, r3
 801285c:	021b      	lsls	r3, r3, #8
 801285e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012860:	f7ff ff92 	bl	8012788 <tcp_get_next_optbyte>
 8012864:	4603      	mov	r3, r0
 8012866:	b29a      	uxth	r2, r3
 8012868:	89bb      	ldrh	r3, [r7, #12]
 801286a:	4313      	orrs	r3, r2
 801286c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801286e:	89bb      	ldrh	r3, [r7, #12]
 8012870:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012874:	d804      	bhi.n	8012880 <tcp_parseopt+0x8c>
 8012876:	89bb      	ldrh	r3, [r7, #12]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d001      	beq.n	8012880 <tcp_parseopt+0x8c>
 801287c:	89ba      	ldrh	r2, [r7, #12]
 801287e:	e001      	b.n	8012884 <tcp_parseopt+0x90>
 8012880:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012888:	e010      	b.n	80128ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801288a:	f7ff ff7d 	bl	8012788 <tcp_get_next_optbyte>
 801288e:	4603      	mov	r3, r0
 8012890:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012892:	7afb      	ldrb	r3, [r7, #11]
 8012894:	2b01      	cmp	r3, #1
 8012896:	d914      	bls.n	80128c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012898:	7afb      	ldrb	r3, [r7, #11]
 801289a:	b29a      	uxth	r2, r3
 801289c:	4b0f      	ldr	r3, [pc, #60]	; (80128dc <tcp_parseopt+0xe8>)
 801289e:	881b      	ldrh	r3, [r3, #0]
 80128a0:	4413      	add	r3, r2
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	3b02      	subs	r3, #2
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	4b0c      	ldr	r3, [pc, #48]	; (80128dc <tcp_parseopt+0xe8>)
 80128aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80128ac:	4b0b      	ldr	r3, [pc, #44]	; (80128dc <tcp_parseopt+0xe8>)
 80128ae:	881a      	ldrh	r2, [r3, #0]
 80128b0:	4b09      	ldr	r3, [pc, #36]	; (80128d8 <tcp_parseopt+0xe4>)
 80128b2:	881b      	ldrh	r3, [r3, #0]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d3b3      	bcc.n	8012820 <tcp_parseopt+0x2c>
 80128b8:	e004      	b.n	80128c4 <tcp_parseopt+0xd0>
          return;
 80128ba:	bf00      	nop
 80128bc:	e002      	b.n	80128c4 <tcp_parseopt+0xd0>
            return;
 80128be:	bf00      	nop
 80128c0:	e000      	b.n	80128c4 <tcp_parseopt+0xd0>
            return;
 80128c2:	bf00      	nop
      }
    }
  }
}
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	0801a938 	.word	0x0801a938
 80128d0:	0801ad9c 	.word	0x0801ad9c
 80128d4:	0801a984 	.word	0x0801a984
 80128d8:	20004b04 	.word	0x20004b04
 80128dc:	20004b0c 	.word	0x20004b0c

080128e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80128e0:	b480      	push	{r7}
 80128e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80128e4:	4b05      	ldr	r3, [pc, #20]	; (80128fc <tcp_trigger_input_pcb_close+0x1c>)
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	f043 0310 	orr.w	r3, r3, #16
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	4b03      	ldr	r3, [pc, #12]	; (80128fc <tcp_trigger_input_pcb_close+0x1c>)
 80128f0:	701a      	strb	r2, [r3, #0]
}
 80128f2:	bf00      	nop
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	20004b1d 	.word	0x20004b1d

08012900 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00a      	beq.n	8012928 <tcp_route+0x28>
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	7a1b      	ldrb	r3, [r3, #8]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d006      	beq.n	8012928 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	7a1b      	ldrb	r3, [r3, #8]
 801291e:	4618      	mov	r0, r3
 8012920:	f7fb f852 	bl	800d9c8 <netif_get_by_index>
 8012924:	4603      	mov	r3, r0
 8012926:	e003      	b.n	8012930 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f003 fc4b 	bl	80161c4 <ip4_route>
 801292e:	4603      	mov	r3, r0
  }
}
 8012930:	4618      	mov	r0, r3
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012938:	b590      	push	{r4, r7, lr}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	603b      	str	r3, [r7, #0]
 8012944:	4613      	mov	r3, r2
 8012946:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <tcp_create_segment+0x22>
 801294e:	4b44      	ldr	r3, [pc, #272]	; (8012a60 <tcp_create_segment+0x128>)
 8012950:	22a3      	movs	r2, #163	; 0xa3
 8012952:	4944      	ldr	r1, [pc, #272]	; (8012a64 <tcp_create_segment+0x12c>)
 8012954:	4844      	ldr	r0, [pc, #272]	; (8012a68 <tcp_create_segment+0x130>)
 8012956:	f005 f96d 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d105      	bne.n	801296c <tcp_create_segment+0x34>
 8012960:	4b3f      	ldr	r3, [pc, #252]	; (8012a60 <tcp_create_segment+0x128>)
 8012962:	22a4      	movs	r2, #164	; 0xa4
 8012964:	4941      	ldr	r1, [pc, #260]	; (8012a6c <tcp_create_segment+0x134>)
 8012966:	4840      	ldr	r0, [pc, #256]	; (8012a68 <tcp_create_segment+0x130>)
 8012968:	f005 f964 	bl	8017c34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801296c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	b2db      	uxtb	r3, r3
 8012974:	f003 0304 	and.w	r3, r3, #4
 8012978:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801297a:	2003      	movs	r0, #3
 801297c:	f7fa fcbc 	bl	800d2f8 <memp_malloc>
 8012980:	6138      	str	r0, [r7, #16]
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d104      	bne.n	8012992 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012988:	68b8      	ldr	r0, [r7, #8]
 801298a:	f7fb fbab 	bl	800e0e4 <pbuf_free>
    return NULL;
 801298e:	2300      	movs	r3, #0
 8012990:	e061      	b.n	8012a56 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012998:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	2200      	movs	r2, #0
 801299e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	68ba      	ldr	r2, [r7, #8]
 80129a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	891a      	ldrh	r2, [r3, #8]
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d205      	bcs.n	80129be <tcp_create_segment+0x86>
 80129b2:	4b2b      	ldr	r3, [pc, #172]	; (8012a60 <tcp_create_segment+0x128>)
 80129b4:	22b0      	movs	r2, #176	; 0xb0
 80129b6:	492e      	ldr	r1, [pc, #184]	; (8012a70 <tcp_create_segment+0x138>)
 80129b8:	482b      	ldr	r0, [pc, #172]	; (8012a68 <tcp_create_segment+0x130>)
 80129ba:	f005 f93b 	bl	8017c34 <iprintf>
  seg->len = p->tot_len - optlen;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	891a      	ldrh	r2, [r3, #8]
 80129c2:	7dfb      	ldrb	r3, [r7, #23]
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80129ce:	2114      	movs	r1, #20
 80129d0:	68b8      	ldr	r0, [r7, #8]
 80129d2:	f7fb faf1 	bl	800dfb8 <pbuf_add_header>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d004      	beq.n	80129e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80129dc:	6938      	ldr	r0, [r7, #16]
 80129de:	f7fd f804 	bl	800f9ea <tcp_seg_free>
    return NULL;
 80129e2:	2300      	movs	r3, #0
 80129e4:	e037      	b.n	8012a56 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	8ada      	ldrh	r2, [r3, #22]
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	68dc      	ldr	r4, [r3, #12]
 80129f8:	4610      	mov	r0, r2
 80129fa:	f7f9 ffc7 	bl	800c98c <lwip_htons>
 80129fe:	4603      	mov	r3, r0
 8012a00:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	8b1a      	ldrh	r2, [r3, #24]
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	68dc      	ldr	r4, [r3, #12]
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	f7f9 ffbe 	bl	800c98c <lwip_htons>
 8012a10:	4603      	mov	r3, r0
 8012a12:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	68dc      	ldr	r4, [r3, #12]
 8012a18:	6838      	ldr	r0, [r7, #0]
 8012a1a:	f7f9 ffcc 	bl	800c9b6 <lwip_htonl>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012a22:	7dfb      	ldrb	r3, [r7, #23]
 8012a24:	089b      	lsrs	r3, r3, #2
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	3305      	adds	r3, #5
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	031b      	lsls	r3, r3, #12
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	79fb      	ldrb	r3, [r7, #7]
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	4313      	orrs	r3, r2
 8012a38:	b29a      	uxth	r2, r3
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	68dc      	ldr	r4, [r3, #12]
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f7f9 ffa4 	bl	800c98c <lwip_htons>
 8012a44:	4603      	mov	r3, r0
 8012a46:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	749a      	strb	r2, [r3, #18]
 8012a50:	2200      	movs	r2, #0
 8012a52:	74da      	strb	r2, [r3, #19]
  return seg;
 8012a54:	693b      	ldr	r3, [r7, #16]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	371c      	adds	r7, #28
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd90      	pop	{r4, r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	0801adb8 	.word	0x0801adb8
 8012a64:	0801adec 	.word	0x0801adec
 8012a68:	0801ae0c 	.word	0x0801ae0c
 8012a6c:	0801ae34 	.word	0x0801ae34
 8012a70:	0801ae58 	.word	0x0801ae58

08012a74 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b086      	sub	sp, #24
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	607b      	str	r3, [r7, #4]
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	73fb      	strb	r3, [r7, #15]
 8012a80:	460b      	mov	r3, r1
 8012a82:	81bb      	strh	r3, [r7, #12]
 8012a84:	4613      	mov	r3, r2
 8012a86:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012a88:	89bb      	ldrh	r3, [r7, #12]
 8012a8a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d105      	bne.n	8012a9e <tcp_pbuf_prealloc+0x2a>
 8012a92:	4b30      	ldr	r3, [pc, #192]	; (8012b54 <tcp_pbuf_prealloc+0xe0>)
 8012a94:	22e8      	movs	r2, #232	; 0xe8
 8012a96:	4930      	ldr	r1, [pc, #192]	; (8012b58 <tcp_pbuf_prealloc+0xe4>)
 8012a98:	4830      	ldr	r0, [pc, #192]	; (8012b5c <tcp_pbuf_prealloc+0xe8>)
 8012a9a:	f005 f8cb 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012a9e:	6a3b      	ldr	r3, [r7, #32]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <tcp_pbuf_prealloc+0x3c>
 8012aa4:	4b2b      	ldr	r3, [pc, #172]	; (8012b54 <tcp_pbuf_prealloc+0xe0>)
 8012aa6:	22e9      	movs	r2, #233	; 0xe9
 8012aa8:	492d      	ldr	r1, [pc, #180]	; (8012b60 <tcp_pbuf_prealloc+0xec>)
 8012aaa:	482c      	ldr	r0, [pc, #176]	; (8012b5c <tcp_pbuf_prealloc+0xe8>)
 8012aac:	f005 f8c2 	bl	8017c34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012ab0:	89ba      	ldrh	r2, [r7, #12]
 8012ab2:	897b      	ldrh	r3, [r7, #10]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d221      	bcs.n	8012afc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012abc:	f003 0302 	and.w	r3, r3, #2
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d111      	bne.n	8012ae8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012ac4:	6a3b      	ldr	r3, [r7, #32]
 8012ac6:	8b5b      	ldrh	r3, [r3, #26]
 8012ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d115      	bne.n	8012afc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d007      	beq.n	8012ae8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012ad8:	6a3b      	ldr	r3, [r7, #32]
 8012ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d103      	bne.n	8012ae8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012ae0:	6a3b      	ldr	r3, [r7, #32]
 8012ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d009      	beq.n	8012afc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012ae8:	89bb      	ldrh	r3, [r7, #12]
 8012aea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012aee:	f023 0203 	bic.w	r2, r3, #3
 8012af2:	897b      	ldrh	r3, [r7, #10]
 8012af4:	4293      	cmp	r3, r2
 8012af6:	bf28      	it	cs
 8012af8:	4613      	movcs	r3, r2
 8012afa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012afc:	8af9      	ldrh	r1, [r7, #22]
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
 8012b00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fb f809 	bl	800db1c <pbuf_alloc>
 8012b0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d101      	bne.n	8012b16 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012b12:	2300      	movs	r3, #0
 8012b14:	e019      	b.n	8012b4a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d006      	beq.n	8012b2c <tcp_pbuf_prealloc+0xb8>
 8012b1e:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <tcp_pbuf_prealloc+0xe0>)
 8012b20:	f240 120b 	movw	r2, #267	; 0x10b
 8012b24:	490f      	ldr	r1, [pc, #60]	; (8012b64 <tcp_pbuf_prealloc+0xf0>)
 8012b26:	480d      	ldr	r0, [pc, #52]	; (8012b5c <tcp_pbuf_prealloc+0xe8>)
 8012b28:	f005 f884 	bl	8017c34 <iprintf>
  *oversize = p->len - length;
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	895a      	ldrh	r2, [r3, #10]
 8012b30:	89bb      	ldrh	r3, [r7, #12]
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	89ba      	ldrh	r2, [r7, #12]
 8012b3e:	811a      	strh	r2, [r3, #8]
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	891a      	ldrh	r2, [r3, #8]
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	815a      	strh	r2, [r3, #10]
  return p;
 8012b48:	693b      	ldr	r3, [r7, #16]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3718      	adds	r7, #24
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	0801adb8 	.word	0x0801adb8
 8012b58:	0801ae70 	.word	0x0801ae70
 8012b5c:	0801ae0c 	.word	0x0801ae0c
 8012b60:	0801ae94 	.word	0x0801ae94
 8012b64:	0801aeb4 	.word	0x0801aeb4

08012b68 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	460b      	mov	r3, r1
 8012b72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <tcp_write_checks+0x20>
 8012b7a:	4b33      	ldr	r3, [pc, #204]	; (8012c48 <tcp_write_checks+0xe0>)
 8012b7c:	f240 1233 	movw	r2, #307	; 0x133
 8012b80:	4932      	ldr	r1, [pc, #200]	; (8012c4c <tcp_write_checks+0xe4>)
 8012b82:	4833      	ldr	r0, [pc, #204]	; (8012c50 <tcp_write_checks+0xe8>)
 8012b84:	f005 f856 	bl	8017c34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	7d1b      	ldrb	r3, [r3, #20]
 8012b8c:	2b04      	cmp	r3, #4
 8012b8e:	d00e      	beq.n	8012bae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012b94:	2b07      	cmp	r3, #7
 8012b96:	d00a      	beq.n	8012bae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d006      	beq.n	8012bae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012ba4:	2b03      	cmp	r3, #3
 8012ba6:	d002      	beq.n	8012bae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012ba8:	f06f 030a 	mvn.w	r3, #10
 8012bac:	e048      	b.n	8012c40 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012bae:	887b      	ldrh	r3, [r7, #2]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <tcp_write_checks+0x50>
    return ERR_OK;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	e043      	b.n	8012c40 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012bbe:	887a      	ldrh	r2, [r7, #2]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d909      	bls.n	8012bd8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	8b5b      	ldrh	r3, [r3, #26]
 8012bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8012bd6:	e033      	b.n	8012c40 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bde:	2b08      	cmp	r3, #8
 8012be0:	d909      	bls.n	8012bf6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	8b5b      	ldrh	r3, [r3, #26]
 8012be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf4:	e024      	b.n	8012c40 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00f      	beq.n	8012c20 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d11a      	bne.n	8012c3e <tcp_write_checks+0xd6>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d116      	bne.n	8012c3e <tcp_write_checks+0xd6>
 8012c10:	4b0d      	ldr	r3, [pc, #52]	; (8012c48 <tcp_write_checks+0xe0>)
 8012c12:	f240 1255 	movw	r2, #341	; 0x155
 8012c16:	490f      	ldr	r1, [pc, #60]	; (8012c54 <tcp_write_checks+0xec>)
 8012c18:	480d      	ldr	r0, [pc, #52]	; (8012c50 <tcp_write_checks+0xe8>)
 8012c1a:	f005 f80b 	bl	8017c34 <iprintf>
 8012c1e:	e00e      	b.n	8012c3e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d103      	bne.n	8012c30 <tcp_write_checks+0xc8>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d006      	beq.n	8012c3e <tcp_write_checks+0xd6>
 8012c30:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <tcp_write_checks+0xe0>)
 8012c32:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012c36:	4908      	ldr	r1, [pc, #32]	; (8012c58 <tcp_write_checks+0xf0>)
 8012c38:	4805      	ldr	r0, [pc, #20]	; (8012c50 <tcp_write_checks+0xe8>)
 8012c3a:	f004 fffb 	bl	8017c34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	0801adb8 	.word	0x0801adb8
 8012c4c:	0801aec8 	.word	0x0801aec8
 8012c50:	0801ae0c 	.word	0x0801ae0c
 8012c54:	0801aee8 	.word	0x0801aee8
 8012c58:	0801af24 	.word	0x0801af24

08012c5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012c5c:	b590      	push	{r4, r7, lr}
 8012c5e:	b09b      	sub	sp, #108	; 0x6c
 8012c60:	af04      	add	r7, sp, #16
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	4611      	mov	r1, r2
 8012c68:	461a      	mov	r2, r3
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	80fb      	strh	r3, [r7, #6]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012c72:	2300      	movs	r3, #0
 8012c74:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012c76:	2300      	movs	r3, #0
 8012c78:	653b      	str	r3, [r7, #80]	; 0x50
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c7e:	2300      	movs	r3, #0
 8012c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c82:	2300      	movs	r3, #0
 8012c84:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012c86:	2300      	movs	r3, #0
 8012c88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d109      	bne.n	8012cb8 <tcp_write+0x5c>
 8012ca4:	4ba4      	ldr	r3, [pc, #656]	; (8012f38 <tcp_write+0x2dc>)
 8012ca6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012caa:	49a4      	ldr	r1, [pc, #656]	; (8012f3c <tcp_write+0x2e0>)
 8012cac:	48a4      	ldr	r0, [pc, #656]	; (8012f40 <tcp_write+0x2e4>)
 8012cae:	f004 ffc1 	bl	8017c34 <iprintf>
 8012cb2:	f06f 030f 	mvn.w	r3, #15
 8012cb6:	e32a      	b.n	801330e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012cbe:	085b      	lsrs	r3, r3, #1
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	bf28      	it	cs
 8012cca:	4613      	movcs	r3, r2
 8012ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d102      	bne.n	8012cda <tcp_write+0x7e>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cd8:	e000      	b.n	8012cdc <tcp_write+0x80>
 8012cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d109      	bne.n	8012cf8 <tcp_write+0x9c>
 8012ce4:	4b94      	ldr	r3, [pc, #592]	; (8012f38 <tcp_write+0x2dc>)
 8012ce6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012cea:	4996      	ldr	r1, [pc, #600]	; (8012f44 <tcp_write+0x2e8>)
 8012cec:	4894      	ldr	r0, [pc, #592]	; (8012f40 <tcp_write+0x2e4>)
 8012cee:	f004 ffa1 	bl	8017c34 <iprintf>
 8012cf2:	f06f 030f 	mvn.w	r3, #15
 8012cf6:	e30a      	b.n	801330e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012cf8:	88fb      	ldrh	r3, [r7, #6]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f7ff ff33 	bl	8012b68 <tcp_write_checks>
 8012d02:	4603      	mov	r3, r0
 8012d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012d08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d002      	beq.n	8012d16 <tcp_write+0xba>
    return err;
 8012d10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012d14:	e2fb      	b.n	801330e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d20:	2300      	movs	r3, #0
 8012d22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 80f6 	beq.w	8012f1c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d34:	653b      	str	r3, [r7, #80]	; 0x50
 8012d36:	e002      	b.n	8012d3e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d1f8      	bne.n	8012d38 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d48:	7a9b      	ldrb	r3, [r3, #10]
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	f003 0304 	and.w	r3, r3, #4
 8012d52:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012d54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d58:	891b      	ldrh	r3, [r3, #8]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	8c3b      	ldrh	r3, [r7, #32]
 8012d5e:	440b      	add	r3, r1
 8012d60:	429a      	cmp	r2, r3
 8012d62:	da06      	bge.n	8012d72 <tcp_write+0x116>
 8012d64:	4b74      	ldr	r3, [pc, #464]	; (8012f38 <tcp_write+0x2dc>)
 8012d66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012d6a:	4977      	ldr	r1, [pc, #476]	; (8012f48 <tcp_write+0x2ec>)
 8012d6c:	4874      	ldr	r0, [pc, #464]	; (8012f40 <tcp_write+0x2e4>)
 8012d6e:	f004 ff61 	bl	8017c34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d74:	891a      	ldrh	r2, [r3, #8]
 8012d76:	8c3b      	ldrh	r3, [r7, #32]
 8012d78:	4413      	add	r3, r2
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d88:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012d8a:	8a7b      	ldrh	r3, [r7, #18]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d026      	beq.n	8012dde <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012d90:	8a7b      	ldrh	r3, [r7, #18]
 8012d92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d206      	bcs.n	8012da6 <tcp_write+0x14a>
 8012d98:	4b67      	ldr	r3, [pc, #412]	; (8012f38 <tcp_write+0x2dc>)
 8012d9a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012d9e:	496b      	ldr	r1, [pc, #428]	; (8012f4c <tcp_write+0x2f0>)
 8012da0:	4867      	ldr	r0, [pc, #412]	; (8012f40 <tcp_write+0x2e4>)
 8012da2:	f004 ff47 	bl	8017c34 <iprintf>
      seg = last_unsent;
 8012da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012daa:	8a7b      	ldrh	r3, [r7, #18]
 8012dac:	88fa      	ldrh	r2, [r7, #6]
 8012dae:	4293      	cmp	r3, r2
 8012db0:	bf28      	it	cs
 8012db2:	4613      	movcs	r3, r2
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012db8:	4293      	cmp	r3, r2
 8012dba:	bf28      	it	cs
 8012dbc:	4613      	movcs	r3, r2
 8012dbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012dc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012dcc:	8a7a      	ldrh	r2, [r7, #18]
 8012dce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012dd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012dd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012dde:	8a7b      	ldrh	r3, [r7, #18]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00b      	beq.n	8012dfc <tcp_write+0x1a0>
 8012de4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012de8:	88fb      	ldrh	r3, [r7, #6]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d006      	beq.n	8012dfc <tcp_write+0x1a0>
 8012dee:	4b52      	ldr	r3, [pc, #328]	; (8012f38 <tcp_write+0x2dc>)
 8012df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012df4:	4956      	ldr	r1, [pc, #344]	; (8012f50 <tcp_write+0x2f4>)
 8012df6:	4852      	ldr	r0, [pc, #328]	; (8012f40 <tcp_write+0x2e4>)
 8012df8:	f004 ff1c 	bl	8017c34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012dfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e00:	88fb      	ldrh	r3, [r7, #6]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	f080 8167 	bcs.w	80130d6 <tcp_write+0x47a>
 8012e08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f000 8163 	beq.w	80130d6 <tcp_write+0x47a>
 8012e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e12:	891b      	ldrh	r3, [r3, #8]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	f000 815e 	beq.w	80130d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012e1a:	88fa      	ldrh	r2, [r7, #6]
 8012e1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e20:	1ad2      	subs	r2, r2, r3
 8012e22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e24:	4293      	cmp	r3, r2
 8012e26:	bfa8      	it	ge
 8012e28:	4613      	movge	r3, r2
 8012e2a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e2e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012e30:	797b      	ldrb	r3, [r7, #5]
 8012e32:	f003 0301 	and.w	r3, r3, #1
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d027      	beq.n	8012e8a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012e3a:	f107 0012 	add.w	r0, r7, #18
 8012e3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e40:	8bf9      	ldrh	r1, [r7, #30]
 8012e42:	2301      	movs	r3, #1
 8012e44:	9302      	str	r3, [sp, #8]
 8012e46:	797b      	ldrb	r3, [r7, #5]
 8012e48:	9301      	str	r3, [sp, #4]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2000      	movs	r0, #0
 8012e52:	f7ff fe0f 	bl	8012a74 <tcp_pbuf_prealloc>
 8012e56:	6578      	str	r0, [r7, #84]	; 0x54
 8012e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	f000 8225 	beq.w	80132aa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e62:	6858      	ldr	r0, [r3, #4]
 8012e64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	8bfa      	ldrh	r2, [r7, #30]
 8012e6e:	4619      	mov	r1, r3
 8012e70:	f004 fe6f 	bl	8017b52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012e74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012e76:	f7fb f9c3 	bl	800e200 <pbuf_clen>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e82:	4413      	add	r3, r2
 8012e84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012e88:	e041      	b.n	8012f0e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8012e90:	e002      	b.n	8012e98 <tcp_write+0x23c>
 8012e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	637b      	str	r3, [r7, #52]	; 0x34
 8012e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1f8      	bne.n	8012e92 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea2:	7b1b      	ldrb	r3, [r3, #12]
 8012ea4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d115      	bne.n	8012ed8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012eb2:	8952      	ldrh	r2, [r2, #10]
 8012eb4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012eb6:	68ba      	ldr	r2, [r7, #8]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d10d      	bne.n	8012ed8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012ebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d006      	beq.n	8012ed2 <tcp_write+0x276>
 8012ec4:	4b1c      	ldr	r3, [pc, #112]	; (8012f38 <tcp_write+0x2dc>)
 8012ec6:	f240 2231 	movw	r2, #561	; 0x231
 8012eca:	4922      	ldr	r1, [pc, #136]	; (8012f54 <tcp_write+0x2f8>)
 8012ecc:	481c      	ldr	r0, [pc, #112]	; (8012f40 <tcp_write+0x2e4>)
 8012ece:	f004 feb1 	bl	8017c34 <iprintf>
          extendlen = seglen;
 8012ed2:	8bfb      	ldrh	r3, [r7, #30]
 8012ed4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012ed6:	e01a      	b.n	8012f0e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012ed8:	8bfb      	ldrh	r3, [r7, #30]
 8012eda:	2201      	movs	r2, #1
 8012edc:	4619      	mov	r1, r3
 8012ede:	2000      	movs	r0, #0
 8012ee0:	f7fa fe1c 	bl	800db1c <pbuf_alloc>
 8012ee4:	6578      	str	r0, [r7, #84]	; 0x54
 8012ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f000 81e0 	beq.w	80132ae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	441a      	add	r2, r3
 8012ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ef8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012efa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012efc:	f7fb f980 	bl	800e200 <pbuf_clen>
 8012f00:	4603      	mov	r3, r0
 8012f02:	461a      	mov	r2, r3
 8012f04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012f08:	4413      	add	r3, r2
 8012f0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012f0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f12:	8bfb      	ldrh	r3, [r7, #30]
 8012f14:	4413      	add	r3, r2
 8012f16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012f1a:	e0dc      	b.n	80130d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f000 80d7 	beq.w	80130d6 <tcp_write+0x47a>
 8012f28:	4b03      	ldr	r3, [pc, #12]	; (8012f38 <tcp_write+0x2dc>)
 8012f2a:	f240 224a 	movw	r2, #586	; 0x24a
 8012f2e:	490a      	ldr	r1, [pc, #40]	; (8012f58 <tcp_write+0x2fc>)
 8012f30:	4803      	ldr	r0, [pc, #12]	; (8012f40 <tcp_write+0x2e4>)
 8012f32:	f004 fe7f 	bl	8017c34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012f36:	e0ce      	b.n	80130d6 <tcp_write+0x47a>
 8012f38:	0801adb8 	.word	0x0801adb8
 8012f3c:	0801af58 	.word	0x0801af58
 8012f40:	0801ae0c 	.word	0x0801ae0c
 8012f44:	0801af70 	.word	0x0801af70
 8012f48:	0801afa4 	.word	0x0801afa4
 8012f4c:	0801afbc 	.word	0x0801afbc
 8012f50:	0801afdc 	.word	0x0801afdc
 8012f54:	0801affc 	.word	0x0801affc
 8012f58:	0801b028 	.word	0x0801b028
    struct pbuf *p;
    u16_t left = len - pos;
 8012f5c:	88fa      	ldrh	r2, [r7, #6]
 8012f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f62:	1ad3      	subs	r3, r2, r3
 8012f64:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012f66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012f72:	8b7a      	ldrh	r2, [r7, #26]
 8012f74:	8bbb      	ldrh	r3, [r7, #28]
 8012f76:	4293      	cmp	r3, r2
 8012f78:	bf28      	it	cs
 8012f7a:	4613      	movcs	r3, r2
 8012f7c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012f7e:	797b      	ldrb	r3, [r7, #5]
 8012f80:	f003 0301 	and.w	r3, r3, #1
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d036      	beq.n	8012ff6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012f88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	8b3b      	ldrh	r3, [r7, #24]
 8012f90:	4413      	add	r3, r2
 8012f92:	b299      	uxth	r1, r3
 8012f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	bf0c      	ite	eq
 8012f9a:	2301      	moveq	r3, #1
 8012f9c:	2300      	movne	r3, #0
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	f107 0012 	add.w	r0, r7, #18
 8012fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012fa6:	9302      	str	r3, [sp, #8]
 8012fa8:	797b      	ldrb	r3, [r7, #5]
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2036      	movs	r0, #54	; 0x36
 8012fb4:	f7ff fd5e 	bl	8012a74 <tcp_pbuf_prealloc>
 8012fb8:	6338      	str	r0, [r7, #48]	; 0x30
 8012fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	f000 8178 	beq.w	80132b2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc4:	895b      	ldrh	r3, [r3, #10]
 8012fc6:	8b3a      	ldrh	r2, [r7, #24]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d906      	bls.n	8012fda <tcp_write+0x37e>
 8012fcc:	4b8c      	ldr	r3, [pc, #560]	; (8013200 <tcp_write+0x5a4>)
 8012fce:	f240 2266 	movw	r2, #614	; 0x266
 8012fd2:	498c      	ldr	r1, [pc, #560]	; (8013204 <tcp_write+0x5a8>)
 8012fd4:	488c      	ldr	r0, [pc, #560]	; (8013208 <tcp_write+0x5ac>)
 8012fd6:	f004 fe2d 	bl	8017c34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	685a      	ldr	r2, [r3, #4]
 8012fde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012fe2:	18d0      	adds	r0, r2, r3
 8012fe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	4413      	add	r3, r2
 8012fec:	8b3a      	ldrh	r2, [r7, #24]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	f004 fdaf 	bl	8017b52 <memcpy>
 8012ff4:	e02f      	b.n	8013056 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012ff6:	8a7b      	ldrh	r3, [r7, #18]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d006      	beq.n	801300a <tcp_write+0x3ae>
 8012ffc:	4b80      	ldr	r3, [pc, #512]	; (8013200 <tcp_write+0x5a4>)
 8012ffe:	f240 2271 	movw	r2, #625	; 0x271
 8013002:	4982      	ldr	r1, [pc, #520]	; (801320c <tcp_write+0x5b0>)
 8013004:	4880      	ldr	r0, [pc, #512]	; (8013208 <tcp_write+0x5ac>)
 8013006:	f004 fe15 	bl	8017c34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801300a:	8b3b      	ldrh	r3, [r7, #24]
 801300c:	2201      	movs	r2, #1
 801300e:	4619      	mov	r1, r3
 8013010:	2036      	movs	r0, #54	; 0x36
 8013012:	f7fa fd83 	bl	800db1c <pbuf_alloc>
 8013016:	6178      	str	r0, [r7, #20]
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	f000 814b 	beq.w	80132b6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013024:	68ba      	ldr	r2, [r7, #8]
 8013026:	441a      	add	r2, r3
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801302c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013030:	b29b      	uxth	r3, r3
 8013032:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013036:	4619      	mov	r1, r3
 8013038:	2036      	movs	r0, #54	; 0x36
 801303a:	f7fa fd6f 	bl	800db1c <pbuf_alloc>
 801303e:	6338      	str	r0, [r7, #48]	; 0x30
 8013040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013042:	2b00      	cmp	r3, #0
 8013044:	d103      	bne.n	801304e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013046:	6978      	ldr	r0, [r7, #20]
 8013048:	f7fb f84c 	bl	800e0e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801304c:	e136      	b.n	80132bc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801304e:	6979      	ldr	r1, [r7, #20]
 8013050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013052:	f7fb f915 	bl	800e280 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013058:	f7fb f8d2 	bl	800e200 <pbuf_clen>
 801305c:	4603      	mov	r3, r0
 801305e:	461a      	mov	r2, r3
 8013060:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013064:	4413      	add	r3, r2
 8013066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801306a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801306e:	2b09      	cmp	r3, #9
 8013070:	d903      	bls.n	801307a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013074:	f7fb f836 	bl	800e0e4 <pbuf_free>
      goto memerr;
 8013078:	e120      	b.n	80132bc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801307e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013082:	441a      	add	r2, r3
 8013084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	4613      	mov	r3, r2
 801308c:	2200      	movs	r2, #0
 801308e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f7ff fc51 	bl	8012938 <tcp_create_segment>
 8013096:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801309a:	2b00      	cmp	r3, #0
 801309c:	f000 810d 	beq.w	80132ba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80130a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d102      	bne.n	80130ac <tcp_write+0x450>
      queue = seg;
 80130a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130a8:	647b      	str	r3, [r7, #68]	; 0x44
 80130aa:	e00c      	b.n	80130c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80130ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d106      	bne.n	80130c0 <tcp_write+0x464>
 80130b2:	4b53      	ldr	r3, [pc, #332]	; (8013200 <tcp_write+0x5a4>)
 80130b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80130b8:	4955      	ldr	r1, [pc, #340]	; (8013210 <tcp_write+0x5b4>)
 80130ba:	4853      	ldr	r0, [pc, #332]	; (8013208 <tcp_write+0x5ac>)
 80130bc:	f004 fdba 	bl	8017c34 <iprintf>
      prev_seg->next = seg;
 80130c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80130c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130c8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80130ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130ce:	8b3b      	ldrh	r3, [r7, #24]
 80130d0:	4413      	add	r3, r2
 80130d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80130d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130da:	88fb      	ldrh	r3, [r7, #6]
 80130dc:	429a      	cmp	r2, r3
 80130de:	f4ff af3d 	bcc.w	8012f5c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80130e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d02c      	beq.n	8013142 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80130e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80130ee:	e01e      	b.n	801312e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80130f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f2:	891a      	ldrh	r2, [r3, #8]
 80130f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130f6:	4413      	add	r3, r2
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80130fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d110      	bne.n	8013128 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801310c:	8952      	ldrh	r2, [r2, #10]
 801310e:	4413      	add	r3, r2
 8013110:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013112:	68b9      	ldr	r1, [r7, #8]
 8013114:	4618      	mov	r0, r3
 8013116:	f004 fd1c 	bl	8017b52 <memcpy>
        p->len += oversize_used;
 801311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311c:	895a      	ldrh	r2, [r3, #10]
 801311e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013120:	4413      	add	r3, r2
 8013122:	b29a      	uxth	r2, r3
 8013124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013126:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013130:	2b00      	cmp	r3, #0
 8013132:	d1dd      	bne.n	80130f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013136:	891a      	ldrh	r2, [r3, #8]
 8013138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801313a:	4413      	add	r3, r2
 801313c:	b29a      	uxth	r2, r3
 801313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013140:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013142:	8a7a      	ldrh	r2, [r7, #18]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801314c:	2b00      	cmp	r3, #0
 801314e:	d018      	beq.n	8013182 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013152:	2b00      	cmp	r3, #0
 8013154:	d106      	bne.n	8013164 <tcp_write+0x508>
 8013156:	4b2a      	ldr	r3, [pc, #168]	; (8013200 <tcp_write+0x5a4>)
 8013158:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801315c:	492d      	ldr	r1, [pc, #180]	; (8013214 <tcp_write+0x5b8>)
 801315e:	482a      	ldr	r0, [pc, #168]	; (8013208 <tcp_write+0x5ac>)
 8013160:	f004 fd68 	bl	8017c34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801316a:	4618      	mov	r0, r3
 801316c:	f7fb f888 	bl	800e280 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013172:	891a      	ldrh	r2, [r3, #8]
 8013174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013176:	891b      	ldrh	r3, [r3, #8]
 8013178:	4413      	add	r3, r2
 801317a:	b29a      	uxth	r2, r3
 801317c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801317e:	811a      	strh	r2, [r3, #8]
 8013180:	e037      	b.n	80131f2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013182:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013184:	2b00      	cmp	r3, #0
 8013186:	d034      	beq.n	80131f2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801318a:	2b00      	cmp	r3, #0
 801318c:	d003      	beq.n	8013196 <tcp_write+0x53a>
 801318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d106      	bne.n	80131a4 <tcp_write+0x548>
 8013196:	4b1a      	ldr	r3, [pc, #104]	; (8013200 <tcp_write+0x5a4>)
 8013198:	f240 22e6 	movw	r2, #742	; 0x2e6
 801319c:	491e      	ldr	r1, [pc, #120]	; (8013218 <tcp_write+0x5bc>)
 801319e:	481a      	ldr	r0, [pc, #104]	; (8013208 <tcp_write+0x5ac>)
 80131a0:	f004 fd48 	bl	8017c34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80131a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a6:	685b      	ldr	r3, [r3, #4]
 80131a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80131aa:	e009      	b.n	80131c0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80131ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ae:	891a      	ldrh	r2, [r3, #8]
 80131b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131b2:	4413      	add	r3, r2
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80131ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	62bb      	str	r3, [r7, #40]	; 0x28
 80131c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d1f1      	bne.n	80131ac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80131c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ca:	891a      	ldrh	r2, [r3, #8]
 80131cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131ce:	4413      	add	r3, r2
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80131d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d8:	895a      	ldrh	r2, [r3, #10]
 80131da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131dc:	4413      	add	r3, r2
 80131de:	b29a      	uxth	r2, r3
 80131e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80131e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e6:	891a      	ldrh	r2, [r3, #8]
 80131e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131ea:	4413      	add	r3, r2
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80131f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d111      	bne.n	801321c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80131fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80131fe:	e010      	b.n	8013222 <tcp_write+0x5c6>
 8013200:	0801adb8 	.word	0x0801adb8
 8013204:	0801b058 	.word	0x0801b058
 8013208:	0801ae0c 	.word	0x0801ae0c
 801320c:	0801b098 	.word	0x0801b098
 8013210:	0801b0a8 	.word	0x0801b0a8
 8013214:	0801b0bc 	.word	0x0801b0bc
 8013218:	0801b0f4 	.word	0x0801b0f4
  } else {
    last_unsent->next = queue;
 801321c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801321e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013220:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013226:	88fb      	ldrh	r3, [r7, #6]
 8013228:	441a      	add	r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013234:	88fb      	ldrh	r3, [r7, #6]
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	b29a      	uxth	r2, r3
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013246:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00e      	beq.n	8013272 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013258:	2b00      	cmp	r3, #0
 801325a:	d10a      	bne.n	8013272 <tcp_write+0x616>
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013260:	2b00      	cmp	r3, #0
 8013262:	d106      	bne.n	8013272 <tcp_write+0x616>
 8013264:	4b2c      	ldr	r3, [pc, #176]	; (8013318 <tcp_write+0x6bc>)
 8013266:	f240 3212 	movw	r2, #786	; 0x312
 801326a:	492c      	ldr	r1, [pc, #176]	; (801331c <tcp_write+0x6c0>)
 801326c:	482c      	ldr	r0, [pc, #176]	; (8013320 <tcp_write+0x6c4>)
 801326e:	f004 fce1 	bl	8017c34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013274:	2b00      	cmp	r3, #0
 8013276:	d016      	beq.n	80132a6 <tcp_write+0x64a>
 8013278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d012      	beq.n	80132a6 <tcp_write+0x64a>
 8013280:	797b      	ldrb	r3, [r7, #5]
 8013282:	f003 0302 	and.w	r3, r3, #2
 8013286:	2b00      	cmp	r3, #0
 8013288:	d10d      	bne.n	80132a6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801328a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	899b      	ldrh	r3, [r3, #12]
 8013290:	b29c      	uxth	r4, r3
 8013292:	2008      	movs	r0, #8
 8013294:	f7f9 fb7a 	bl	800c98c <lwip_htons>
 8013298:	4603      	mov	r3, r0
 801329a:	461a      	mov	r2, r3
 801329c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	4322      	orrs	r2, r4
 80132a2:	b292      	uxth	r2, r2
 80132a4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	e031      	b.n	801330e <tcp_write+0x6b2>
          goto memerr;
 80132aa:	bf00      	nop
 80132ac:	e006      	b.n	80132bc <tcp_write+0x660>
            goto memerr;
 80132ae:	bf00      	nop
 80132b0:	e004      	b.n	80132bc <tcp_write+0x660>
        goto memerr;
 80132b2:	bf00      	nop
 80132b4:	e002      	b.n	80132bc <tcp_write+0x660>
        goto memerr;
 80132b6:	bf00      	nop
 80132b8:	e000      	b.n	80132bc <tcp_write+0x660>
      goto memerr;
 80132ba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	8b5b      	ldrh	r3, [r3, #26]
 80132c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80132ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80132d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80132d2:	f7fa ff07 	bl	800e0e4 <pbuf_free>
  }
  if (queue != NULL) {
 80132d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80132dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80132de:	f7fc fb6f 	bl	800f9c0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00e      	beq.n	801330a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10a      	bne.n	801330a <tcp_write+0x6ae>
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d106      	bne.n	801330a <tcp_write+0x6ae>
 80132fc:	4b06      	ldr	r3, [pc, #24]	; (8013318 <tcp_write+0x6bc>)
 80132fe:	f240 3227 	movw	r2, #807	; 0x327
 8013302:	4906      	ldr	r1, [pc, #24]	; (801331c <tcp_write+0x6c0>)
 8013304:	4806      	ldr	r0, [pc, #24]	; (8013320 <tcp_write+0x6c4>)
 8013306:	f004 fc95 	bl	8017c34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801330a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801330e:	4618      	mov	r0, r3
 8013310:	375c      	adds	r7, #92	; 0x5c
 8013312:	46bd      	mov	sp, r7
 8013314:	bd90      	pop	{r4, r7, pc}
 8013316:	bf00      	nop
 8013318:	0801adb8 	.word	0x0801adb8
 801331c:	0801b12c 	.word	0x0801b12c
 8013320:	0801ae0c 	.word	0x0801ae0c

08013324 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013324:	b590      	push	{r4, r7, lr}
 8013326:	b08b      	sub	sp, #44	; 0x2c
 8013328:	af02      	add	r7, sp, #8
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	460b      	mov	r3, r1
 801332e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013330:	2300      	movs	r3, #0
 8013332:	61fb      	str	r3, [r7, #28]
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013338:	2300      	movs	r3, #0
 801333a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <tcp_split_unsent_seg+0x2c>
 8013342:	4b95      	ldr	r3, [pc, #596]	; (8013598 <tcp_split_unsent_seg+0x274>)
 8013344:	f240 324b 	movw	r2, #843	; 0x34b
 8013348:	4994      	ldr	r1, [pc, #592]	; (801359c <tcp_split_unsent_seg+0x278>)
 801334a:	4895      	ldr	r0, [pc, #596]	; (80135a0 <tcp_split_unsent_seg+0x27c>)
 801334c:	f004 fc72 	bl	8017c34 <iprintf>

  useg = pcb->unsent;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013354:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d102      	bne.n	8013362 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801335c:	f04f 33ff 	mov.w	r3, #4294967295
 8013360:	e116      	b.n	8013590 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013362:	887b      	ldrh	r3, [r7, #2]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d109      	bne.n	801337c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013368:	4b8b      	ldr	r3, [pc, #556]	; (8013598 <tcp_split_unsent_seg+0x274>)
 801336a:	f240 3253 	movw	r2, #851	; 0x353
 801336e:	498d      	ldr	r1, [pc, #564]	; (80135a4 <tcp_split_unsent_seg+0x280>)
 8013370:	488b      	ldr	r0, [pc, #556]	; (80135a0 <tcp_split_unsent_seg+0x27c>)
 8013372:	f004 fc5f 	bl	8017c34 <iprintf>
    return ERR_VAL;
 8013376:	f06f 0305 	mvn.w	r3, #5
 801337a:	e109      	b.n	8013590 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	891b      	ldrh	r3, [r3, #8]
 8013380:	887a      	ldrh	r2, [r7, #2]
 8013382:	429a      	cmp	r2, r3
 8013384:	d301      	bcc.n	801338a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013386:	2300      	movs	r3, #0
 8013388:	e102      	b.n	8013590 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801338e:	887a      	ldrh	r2, [r7, #2]
 8013390:	429a      	cmp	r2, r3
 8013392:	d906      	bls.n	80133a2 <tcp_split_unsent_seg+0x7e>
 8013394:	4b80      	ldr	r3, [pc, #512]	; (8013598 <tcp_split_unsent_seg+0x274>)
 8013396:	f240 325b 	movw	r2, #859	; 0x35b
 801339a:	4983      	ldr	r1, [pc, #524]	; (80135a8 <tcp_split_unsent_seg+0x284>)
 801339c:	4880      	ldr	r0, [pc, #512]	; (80135a0 <tcp_split_unsent_seg+0x27c>)
 801339e:	f004 fc49 	bl	8017c34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	891b      	ldrh	r3, [r3, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d106      	bne.n	80133b8 <tcp_split_unsent_seg+0x94>
 80133aa:	4b7b      	ldr	r3, [pc, #492]	; (8013598 <tcp_split_unsent_seg+0x274>)
 80133ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80133b0:	497e      	ldr	r1, [pc, #504]	; (80135ac <tcp_split_unsent_seg+0x288>)
 80133b2:	487b      	ldr	r0, [pc, #492]	; (80135a0 <tcp_split_unsent_seg+0x27c>)
 80133b4:	f004 fc3e 	bl	8017c34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	7a9b      	ldrb	r3, [r3, #10]
 80133bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80133be:	7bfb      	ldrb	r3, [r7, #15]
 80133c0:	009b      	lsls	r3, r3, #2
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	f003 0304 	and.w	r3, r3, #4
 80133c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	891a      	ldrh	r2, [r3, #8]
 80133ce:	887b      	ldrh	r3, [r7, #2]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80133d4:	7bbb      	ldrb	r3, [r7, #14]
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	89bb      	ldrh	r3, [r7, #12]
 80133da:	4413      	add	r3, r2
 80133dc:	b29b      	uxth	r3, r3
 80133de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133e2:	4619      	mov	r1, r3
 80133e4:	2036      	movs	r0, #54	; 0x36
 80133e6:	f7fa fb99 	bl	800db1c <pbuf_alloc>
 80133ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	f000 80b7 	beq.w	8013562 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	891a      	ldrh	r2, [r3, #8]
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	891b      	ldrh	r3, [r3, #8]
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	b29a      	uxth	r2, r3
 8013402:	887b      	ldrh	r3, [r7, #2]
 8013404:	4413      	add	r3, r2
 8013406:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	6858      	ldr	r0, [r3, #4]
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	685a      	ldr	r2, [r3, #4]
 8013410:	7bbb      	ldrb	r3, [r7, #14]
 8013412:	18d1      	adds	r1, r2, r3
 8013414:	897b      	ldrh	r3, [r7, #10]
 8013416:	89ba      	ldrh	r2, [r7, #12]
 8013418:	f7fb f85a 	bl	800e4d0 <pbuf_copy_partial>
 801341c:	4603      	mov	r3, r0
 801341e:	461a      	mov	r2, r3
 8013420:	89bb      	ldrh	r3, [r7, #12]
 8013422:	4293      	cmp	r3, r2
 8013424:	f040 809f 	bne.w	8013566 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	899b      	ldrh	r3, [r3, #12]
 801342e:	b29b      	uxth	r3, r3
 8013430:	4618      	mov	r0, r3
 8013432:	f7f9 faab 	bl	800c98c <lwip_htons>
 8013436:	4603      	mov	r3, r0
 8013438:	b2db      	uxtb	r3, r3
 801343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801343e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013440:	2300      	movs	r3, #0
 8013442:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013444:	7efb      	ldrb	r3, [r7, #27]
 8013446:	f003 0308 	and.w	r3, r3, #8
 801344a:	2b00      	cmp	r3, #0
 801344c:	d007      	beq.n	801345e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801344e:	7efb      	ldrb	r3, [r7, #27]
 8013450:	f023 0308 	bic.w	r3, r3, #8
 8013454:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013456:	7ebb      	ldrb	r3, [r7, #26]
 8013458:	f043 0308 	orr.w	r3, r3, #8
 801345c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801345e:	7efb      	ldrb	r3, [r7, #27]
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	d007      	beq.n	8013478 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013468:	7efb      	ldrb	r3, [r7, #27]
 801346a:	f023 0301 	bic.w	r3, r3, #1
 801346e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013470:	7ebb      	ldrb	r3, [r7, #26]
 8013472:	f043 0301 	orr.w	r3, r3, #1
 8013476:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	4618      	mov	r0, r3
 8013480:	f7f9 fa99 	bl	800c9b6 <lwip_htonl>
 8013484:	4602      	mov	r2, r0
 8013486:	887b      	ldrh	r3, [r7, #2]
 8013488:	18d1      	adds	r1, r2, r3
 801348a:	7eba      	ldrb	r2, [r7, #26]
 801348c:	7bfb      	ldrb	r3, [r7, #15]
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	460b      	mov	r3, r1
 8013492:	6939      	ldr	r1, [r7, #16]
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7ff fa4f 	bl	8012938 <tcp_create_segment>
 801349a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d063      	beq.n	801356a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fa feaa 	bl	800e200 <pbuf_clen>
 80134ac:	4603      	mov	r3, r0
 80134ae:	461a      	mov	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	6858      	ldr	r0, [r3, #4]
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	685b      	ldr	r3, [r3, #4]
 80134c8:	891a      	ldrh	r2, [r3, #8]
 80134ca:	89bb      	ldrh	r3, [r7, #12]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4619      	mov	r1, r3
 80134d2:	f7fa fc81 	bl	800ddd8 <pbuf_realloc>
  useg->len -= remainder;
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	891a      	ldrh	r2, [r3, #8]
 80134da:	89bb      	ldrh	r3, [r7, #12]
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	b29a      	uxth	r2, r3
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	899b      	ldrh	r3, [r3, #12]
 80134ea:	b29c      	uxth	r4, r3
 80134ec:	7efb      	ldrb	r3, [r7, #27]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7f9 fa4b 	bl	800c98c <lwip_htons>
 80134f6:	4603      	mov	r3, r0
 80134f8:	461a      	mov	r2, r3
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	4322      	orrs	r2, r4
 8013500:	b292      	uxth	r2, r2
 8013502:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	4618      	mov	r0, r3
 801350a:	f7fa fe79 	bl	800e200 <pbuf_clen>
 801350e:	4603      	mov	r3, r0
 8013510:	461a      	mov	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013518:	4413      	add	r3, r2
 801351a:	b29a      	uxth	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	f7fa fe6a 	bl	800e200 <pbuf_clen>
 801352c:	4603      	mov	r3, r0
 801352e:	461a      	mov	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013536:	4413      	add	r3, r2
 8013538:	b29a      	uxth	r2, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	681a      	ldr	r2, [r3, #0]
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	69fa      	ldr	r2, [r7, #28]
 801354c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d103      	bne.n	801355e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2200      	movs	r2, #0
 801355a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801355e:	2300      	movs	r3, #0
 8013560:	e016      	b.n	8013590 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013562:	bf00      	nop
 8013564:	e002      	b.n	801356c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013566:	bf00      	nop
 8013568:	e000      	b.n	801356c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801356a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d006      	beq.n	8013580 <tcp_split_unsent_seg+0x25c>
 8013572:	4b09      	ldr	r3, [pc, #36]	; (8013598 <tcp_split_unsent_seg+0x274>)
 8013574:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013578:	490d      	ldr	r1, [pc, #52]	; (80135b0 <tcp_split_unsent_seg+0x28c>)
 801357a:	4809      	ldr	r0, [pc, #36]	; (80135a0 <tcp_split_unsent_seg+0x27c>)
 801357c:	f004 fb5a 	bl	8017c34 <iprintf>
  if (p != NULL) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d002      	beq.n	801358c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013586:	6938      	ldr	r0, [r7, #16]
 8013588:	f7fa fdac 	bl	800e0e4 <pbuf_free>
  }

  return ERR_MEM;
 801358c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013590:	4618      	mov	r0, r3
 8013592:	3724      	adds	r7, #36	; 0x24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd90      	pop	{r4, r7, pc}
 8013598:	0801adb8 	.word	0x0801adb8
 801359c:	0801b14c 	.word	0x0801b14c
 80135a0:	0801ae0c 	.word	0x0801ae0c
 80135a4:	0801b170 	.word	0x0801b170
 80135a8:	0801b194 	.word	0x0801b194
 80135ac:	0801b1a4 	.word	0x0801b1a4
 80135b0:	0801b1b4 	.word	0x0801b1b4

080135b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80135b4:	b590      	push	{r4, r7, lr}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d106      	bne.n	80135d0 <tcp_send_fin+0x1c>
 80135c2:	4b21      	ldr	r3, [pc, #132]	; (8013648 <tcp_send_fin+0x94>)
 80135c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80135c8:	4920      	ldr	r1, [pc, #128]	; (801364c <tcp_send_fin+0x98>)
 80135ca:	4821      	ldr	r0, [pc, #132]	; (8013650 <tcp_send_fin+0x9c>)
 80135cc:	f004 fb32 	bl	8017c34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d02e      	beq.n	8013636 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135dc:	60fb      	str	r3, [r7, #12]
 80135de:	e002      	b.n	80135e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d1f8      	bne.n	80135e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	899b      	ldrh	r3, [r3, #12]
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f9 f9c8 	bl	800c98c <lwip_htons>
 80135fc:	4603      	mov	r3, r0
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	f003 0307 	and.w	r3, r3, #7
 8013604:	2b00      	cmp	r3, #0
 8013606:	d116      	bne.n	8013636 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	899b      	ldrh	r3, [r3, #12]
 801360e:	b29c      	uxth	r4, r3
 8013610:	2001      	movs	r0, #1
 8013612:	f7f9 f9bb 	bl	800c98c <lwip_htons>
 8013616:	4603      	mov	r3, r0
 8013618:	461a      	mov	r2, r3
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	4322      	orrs	r2, r4
 8013620:	b292      	uxth	r2, r2
 8013622:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	8b5b      	ldrh	r3, [r3, #26]
 8013628:	f043 0320 	orr.w	r3, r3, #32
 801362c:	b29a      	uxth	r2, r3
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013632:	2300      	movs	r3, #0
 8013634:	e004      	b.n	8013640 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013636:	2101      	movs	r1, #1
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f000 f80b 	bl	8013654 <tcp_enqueue_flags>
 801363e:	4603      	mov	r3, r0
}
 8013640:	4618      	mov	r0, r3
 8013642:	3714      	adds	r7, #20
 8013644:	46bd      	mov	sp, r7
 8013646:	bd90      	pop	{r4, r7, pc}
 8013648:	0801adb8 	.word	0x0801adb8
 801364c:	0801b1c0 	.word	0x0801b1c0
 8013650:	0801ae0c 	.word	0x0801ae0c

08013654 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08a      	sub	sp, #40	; 0x28
 8013658:	af02      	add	r7, sp, #8
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	460b      	mov	r3, r1
 801365e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013660:	2300      	movs	r3, #0
 8013662:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013664:	2300      	movs	r3, #0
 8013666:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013668:	78fb      	ldrb	r3, [r7, #3]
 801366a:	f003 0303 	and.w	r3, r3, #3
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <tcp_enqueue_flags+0x2c>
 8013672:	4b67      	ldr	r3, [pc, #412]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 8013674:	f240 4211 	movw	r2, #1041	; 0x411
 8013678:	4966      	ldr	r1, [pc, #408]	; (8013814 <tcp_enqueue_flags+0x1c0>)
 801367a:	4867      	ldr	r0, [pc, #412]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 801367c:	f004 fada 	bl	8017c34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d106      	bne.n	8013694 <tcp_enqueue_flags+0x40>
 8013686:	4b62      	ldr	r3, [pc, #392]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 8013688:	f240 4213 	movw	r2, #1043	; 0x413
 801368c:	4963      	ldr	r1, [pc, #396]	; (801381c <tcp_enqueue_flags+0x1c8>)
 801368e:	4862      	ldr	r0, [pc, #392]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 8013690:	f004 fad0 	bl	8017c34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013694:	78fb      	ldrb	r3, [r7, #3]
 8013696:	f003 0302 	and.w	r3, r3, #2
 801369a:	2b00      	cmp	r3, #0
 801369c:	d001      	beq.n	80136a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801369e:	2301      	movs	r3, #1
 80136a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136a2:	7ffb      	ldrb	r3, [r7, #31]
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	b2db      	uxtb	r3, r3
 80136a8:	f003 0304 	and.w	r3, r3, #4
 80136ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80136ae:	7dfb      	ldrb	r3, [r7, #23]
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b6:	4619      	mov	r1, r3
 80136b8:	2036      	movs	r0, #54	; 0x36
 80136ba:	f7fa fa2f 	bl	800db1c <pbuf_alloc>
 80136be:	6138      	str	r0, [r7, #16]
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d109      	bne.n	80136da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	8b5b      	ldrh	r3, [r3, #26]
 80136ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80136d4:	f04f 33ff 	mov.w	r3, #4294967295
 80136d8:	e095      	b.n	8013806 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	895a      	ldrh	r2, [r3, #10]
 80136de:	7dfb      	ldrb	r3, [r7, #23]
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d206      	bcs.n	80136f4 <tcp_enqueue_flags+0xa0>
 80136e6:	4b4a      	ldr	r3, [pc, #296]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 80136e8:	f240 4239 	movw	r2, #1081	; 0x439
 80136ec:	494c      	ldr	r1, [pc, #304]	; (8013820 <tcp_enqueue_flags+0x1cc>)
 80136ee:	484a      	ldr	r0, [pc, #296]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 80136f0:	f004 faa0 	bl	8017c34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80136f8:	78fa      	ldrb	r2, [r7, #3]
 80136fa:	7ffb      	ldrb	r3, [r7, #31]
 80136fc:	9300      	str	r3, [sp, #0]
 80136fe:	460b      	mov	r3, r1
 8013700:	6939      	ldr	r1, [r7, #16]
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7ff f918 	bl	8012938 <tcp_create_segment>
 8013708:	60f8      	str	r0, [r7, #12]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d109      	bne.n	8013724 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	8b5b      	ldrh	r3, [r3, #26]
 8013714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013718:	b29a      	uxth	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801371e:	f04f 33ff 	mov.w	r3, #4294967295
 8013722:	e070      	b.n	8013806 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	68db      	ldr	r3, [r3, #12]
 8013728:	f003 0303 	and.w	r3, r3, #3
 801372c:	2b00      	cmp	r3, #0
 801372e:	d006      	beq.n	801373e <tcp_enqueue_flags+0xea>
 8013730:	4b37      	ldr	r3, [pc, #220]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 8013732:	f240 4242 	movw	r2, #1090	; 0x442
 8013736:	493b      	ldr	r1, [pc, #236]	; (8013824 <tcp_enqueue_flags+0x1d0>)
 8013738:	4837      	ldr	r0, [pc, #220]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 801373a:	f004 fa7b 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	891b      	ldrh	r3, [r3, #8]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d006      	beq.n	8013754 <tcp_enqueue_flags+0x100>
 8013746:	4b32      	ldr	r3, [pc, #200]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 8013748:	f240 4243 	movw	r2, #1091	; 0x443
 801374c:	4936      	ldr	r1, [pc, #216]	; (8013828 <tcp_enqueue_flags+0x1d4>)
 801374e:	4832      	ldr	r0, [pc, #200]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 8013750:	f004 fa70 	bl	8017c34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013758:	2b00      	cmp	r3, #0
 801375a:	d103      	bne.n	8013764 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	68fa      	ldr	r2, [r7, #12]
 8013760:	66da      	str	r2, [r3, #108]	; 0x6c
 8013762:	e00d      	b.n	8013780 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013768:	61bb      	str	r3, [r7, #24]
 801376a:	e002      	b.n	8013772 <tcp_enqueue_flags+0x11e>
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	61bb      	str	r3, [r7, #24]
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d1f8      	bne.n	801376c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	68fa      	ldr	r2, [r7, #12]
 801377e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2200      	movs	r2, #0
 8013784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013788:	78fb      	ldrb	r3, [r7, #3]
 801378a:	f003 0302 	and.w	r3, r3, #2
 801378e:	2b00      	cmp	r3, #0
 8013790:	d104      	bne.n	801379c <tcp_enqueue_flags+0x148>
 8013792:	78fb      	ldrb	r3, [r7, #3]
 8013794:	f003 0301 	and.w	r3, r3, #1
 8013798:	2b00      	cmp	r3, #0
 801379a:	d004      	beq.n	80137a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80137a6:	78fb      	ldrb	r3, [r7, #3]
 80137a8:	f003 0301 	and.w	r3, r3, #1
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d006      	beq.n	80137be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	8b5b      	ldrh	r3, [r3, #26]
 80137b4:	f043 0320 	orr.w	r3, r3, #32
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fa fd1c 	bl	800e200 <pbuf_clen>
 80137c8:	4603      	mov	r3, r0
 80137ca:	461a      	mov	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137d2:	4413      	add	r3, r2
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d00e      	beq.n	8013804 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d10a      	bne.n	8013804 <tcp_enqueue_flags+0x1b0>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d106      	bne.n	8013804 <tcp_enqueue_flags+0x1b0>
 80137f6:	4b06      	ldr	r3, [pc, #24]	; (8013810 <tcp_enqueue_flags+0x1bc>)
 80137f8:	f240 4265 	movw	r2, #1125	; 0x465
 80137fc:	490b      	ldr	r1, [pc, #44]	; (801382c <tcp_enqueue_flags+0x1d8>)
 80137fe:	4806      	ldr	r0, [pc, #24]	; (8013818 <tcp_enqueue_flags+0x1c4>)
 8013800:	f004 fa18 	bl	8017c34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3720      	adds	r7, #32
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	0801adb8 	.word	0x0801adb8
 8013814:	0801b1dc 	.word	0x0801b1dc
 8013818:	0801ae0c 	.word	0x0801ae0c
 801381c:	0801b234 	.word	0x0801b234
 8013820:	0801b254 	.word	0x0801b254
 8013824:	0801b290 	.word	0x0801b290
 8013828:	0801b2a8 	.word	0x0801b2a8
 801382c:	0801b2d4 	.word	0x0801b2d4

08013830 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013830:	b5b0      	push	{r4, r5, r7, lr}
 8013832:	b08a      	sub	sp, #40	; 0x28
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d106      	bne.n	801384c <tcp_output+0x1c>
 801383e:	4b9e      	ldr	r3, [pc, #632]	; (8013ab8 <tcp_output+0x288>)
 8013840:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013844:	499d      	ldr	r1, [pc, #628]	; (8013abc <tcp_output+0x28c>)
 8013846:	489e      	ldr	r0, [pc, #632]	; (8013ac0 <tcp_output+0x290>)
 8013848:	f004 f9f4 	bl	8017c34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	7d1b      	ldrb	r3, [r3, #20]
 8013850:	2b01      	cmp	r3, #1
 8013852:	d106      	bne.n	8013862 <tcp_output+0x32>
 8013854:	4b98      	ldr	r3, [pc, #608]	; (8013ab8 <tcp_output+0x288>)
 8013856:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801385a:	499a      	ldr	r1, [pc, #616]	; (8013ac4 <tcp_output+0x294>)
 801385c:	4898      	ldr	r0, [pc, #608]	; (8013ac0 <tcp_output+0x290>)
 801385e:	f004 f9e9 	bl	8017c34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013862:	4b99      	ldr	r3, [pc, #612]	; (8013ac8 <tcp_output+0x298>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	429a      	cmp	r2, r3
 801386a:	d101      	bne.n	8013870 <tcp_output+0x40>
    return ERR_OK;
 801386c:	2300      	movs	r3, #0
 801386e:	e1ce      	b.n	8013c0e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801387c:	4293      	cmp	r3, r2
 801387e:	bf28      	it	cs
 8013880:	4613      	movcs	r3, r2
 8013882:	b29b      	uxth	r3, r3
 8013884:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801388a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	2b00      	cmp	r3, #0
 8013890:	d10b      	bne.n	80138aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	8b5b      	ldrh	r3, [r3, #26]
 8013896:	f003 0302 	and.w	r3, r3, #2
 801389a:	2b00      	cmp	r3, #0
 801389c:	f000 81aa 	beq.w	8013bf4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f000 fdcb 	bl	801443c <tcp_send_empty_ack>
 80138a6:	4603      	mov	r3, r0
 80138a8:	e1b1      	b.n	8013c0e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80138aa:	6879      	ldr	r1, [r7, #4]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	3304      	adds	r3, #4
 80138b0:	461a      	mov	r2, r3
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f7ff f824 	bl	8012900 <tcp_route>
 80138b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d102      	bne.n	80138c6 <tcp_output+0x96>
    return ERR_RTE;
 80138c0:	f06f 0303 	mvn.w	r3, #3
 80138c4:	e1a3      	b.n	8013c0e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d003      	beq.n	80138d4 <tcp_output+0xa4>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d111      	bne.n	80138f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d002      	beq.n	80138e0 <tcp_output+0xb0>
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	3304      	adds	r3, #4
 80138de:	e000      	b.n	80138e2 <tcp_output+0xb2>
 80138e0:	2300      	movs	r3, #0
 80138e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d102      	bne.n	80138f0 <tcp_output+0xc0>
      return ERR_RTE;
 80138ea:	f06f 0303 	mvn.w	r3, #3
 80138ee:	e18e      	b.n	8013c0e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	f7f9 f859 	bl	800c9b6 <lwip_htonl>
 8013904:	4602      	mov	r2, r0
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801390e:	8912      	ldrh	r2, [r2, #8]
 8013910:	4413      	add	r3, r2
 8013912:	69ba      	ldr	r2, [r7, #24]
 8013914:	429a      	cmp	r2, r3
 8013916:	d227      	bcs.n	8013968 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801391e:	461a      	mov	r2, r3
 8013920:	69bb      	ldr	r3, [r7, #24]
 8013922:	4293      	cmp	r3, r2
 8013924:	d114      	bne.n	8013950 <tcp_output+0x120>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801392a:	2b00      	cmp	r3, #0
 801392c:	d110      	bne.n	8013950 <tcp_output+0x120>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10b      	bne.n	8013950 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2200      	movs	r2, #0
 801393c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2201      	movs	r2, #1
 8013944:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	8b5b      	ldrh	r3, [r3, #26]
 8013954:	f003 0302 	and.w	r3, r3, #2
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 814d 	beq.w	8013bf8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 fd6c 	bl	801443c <tcp_send_empty_ack>
 8013964:	4603      	mov	r3, r0
 8013966:	e152      	b.n	8013c0e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013974:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013976:	6a3b      	ldr	r3, [r7, #32]
 8013978:	2b00      	cmp	r3, #0
 801397a:	f000 811c 	beq.w	8013bb6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801397e:	e002      	b.n	8013986 <tcp_output+0x156>
 8013980:	6a3b      	ldr	r3, [r7, #32]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	623b      	str	r3, [r7, #32]
 8013986:	6a3b      	ldr	r3, [r7, #32]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1f8      	bne.n	8013980 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801398e:	e112      	b.n	8013bb6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	899b      	ldrh	r3, [r3, #12]
 8013996:	b29b      	uxth	r3, r3
 8013998:	4618      	mov	r0, r3
 801399a:	f7f8 fff7 	bl	800c98c <lwip_htons>
 801399e:	4603      	mov	r3, r0
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	f003 0304 	and.w	r3, r3, #4
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d006      	beq.n	80139b8 <tcp_output+0x188>
 80139aa:	4b43      	ldr	r3, [pc, #268]	; (8013ab8 <tcp_output+0x288>)
 80139ac:	f240 5236 	movw	r2, #1334	; 0x536
 80139b0:	4946      	ldr	r1, [pc, #280]	; (8013acc <tcp_output+0x29c>)
 80139b2:	4843      	ldr	r0, [pc, #268]	; (8013ac0 <tcp_output+0x290>)
 80139b4:	f004 f93e 	bl	8017c34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d01f      	beq.n	8013a00 <tcp_output+0x1d0>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8b5b      	ldrh	r3, [r3, #26]
 80139c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d119      	bne.n	8013a00 <tcp_output+0x1d0>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d00b      	beq.n	80139ec <tcp_output+0x1bc>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d110      	bne.n	8013a00 <tcp_output+0x1d0>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139e2:	891a      	ldrh	r2, [r3, #8]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d209      	bcs.n	8013a00 <tcp_output+0x1d0>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d004      	beq.n	8013a00 <tcp_output+0x1d0>
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139fc:	2b08      	cmp	r3, #8
 80139fe:	d901      	bls.n	8013a04 <tcp_output+0x1d4>
 8013a00:	2301      	movs	r3, #1
 8013a02:	e000      	b.n	8013a06 <tcp_output+0x1d6>
 8013a04:	2300      	movs	r3, #0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d106      	bne.n	8013a18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	8b5b      	ldrh	r3, [r3, #26]
 8013a0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f000 80e4 	beq.w	8013be0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	7d1b      	ldrb	r3, [r3, #20]
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d00d      	beq.n	8013a3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	899b      	ldrh	r3, [r3, #12]
 8013a26:	b29c      	uxth	r4, r3
 8013a28:	2010      	movs	r0, #16
 8013a2a:	f7f8 ffaf 	bl	800c98c <lwip_htons>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	461a      	mov	r2, r3
 8013a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	4322      	orrs	r2, r4
 8013a38:	b292      	uxth	r2, r2
 8013a3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013a3c:	697a      	ldr	r2, [r7, #20]
 8013a3e:	6879      	ldr	r1, [r7, #4]
 8013a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a42:	f000 f909 	bl	8013c58 <tcp_output_segment>
 8013a46:	4603      	mov	r3, r0
 8013a48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	8b5b      	ldrh	r3, [r3, #26]
 8013a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	835a      	strh	r2, [r3, #26]
      return err;
 8013a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a64:	e0d3      	b.n	8013c0e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	7d1b      	ldrb	r3, [r3, #20]
 8013a72:	2b02      	cmp	r3, #2
 8013a74:	d006      	beq.n	8013a84 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	8b5b      	ldrh	r3, [r3, #26]
 8013a7a:	f023 0303 	bic.w	r3, r3, #3
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7f8 ff93 	bl	800c9b6 <lwip_htonl>
 8013a90:	4604      	mov	r4, r0
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	891b      	ldrh	r3, [r3, #8]
 8013a96:	461d      	mov	r5, r3
 8013a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	899b      	ldrh	r3, [r3, #12]
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7f8 ff73 	bl	800c98c <lwip_htons>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	f003 0303 	and.w	r3, r3, #3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00e      	beq.n	8013ad0 <tcp_output+0x2a0>
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	e00d      	b.n	8013ad2 <tcp_output+0x2a2>
 8013ab6:	bf00      	nop
 8013ab8:	0801adb8 	.word	0x0801adb8
 8013abc:	0801b2fc 	.word	0x0801b2fc
 8013ac0:	0801ae0c 	.word	0x0801ae0c
 8013ac4:	0801b314 	.word	0x0801b314
 8013ac8:	2000b728 	.word	0x2000b728
 8013acc:	0801b33c 	.word	0x0801b33c
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	442b      	add	r3, r5
 8013ad4:	4423      	add	r3, r4
 8013ad6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	da02      	bge.n	8013aea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	68ba      	ldr	r2, [r7, #8]
 8013ae8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	891b      	ldrh	r3, [r3, #8]
 8013aee:	461c      	mov	r4, r3
 8013af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	899b      	ldrh	r3, [r3, #12]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f8 ff47 	bl	800c98c <lwip_htons>
 8013afe:	4603      	mov	r3, r0
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	f003 0303 	and.w	r3, r3, #3
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <tcp_output+0x2de>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <tcp_output+0x2e0>
 8013b0e:	2300      	movs	r3, #0
 8013b10:	4423      	add	r3, r4
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d049      	beq.n	8013baa <tcp_output+0x37a>
      seg->next = NULL;
 8013b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b18:	2200      	movs	r2, #0
 8013b1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d105      	bne.n	8013b30 <tcp_output+0x300>
        pcb->unacked = seg;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2c:	623b      	str	r3, [r7, #32]
 8013b2e:	e03f      	b.n	8013bb0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f8 ff3d 	bl	800c9b6 <lwip_htonl>
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	6a3b      	ldr	r3, [r7, #32]
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7f8 ff36 	bl	800c9b6 <lwip_htonl>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	1ae3      	subs	r3, r4, r3
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	da24      	bge.n	8013b9c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	3370      	adds	r3, #112	; 0x70
 8013b56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013b58:	e002      	b.n	8013b60 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d011      	beq.n	8013b8c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7f8 ff20 	bl	800c9b6 <lwip_htonl>
 8013b76:	4604      	mov	r4, r0
 8013b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7f8 ff19 	bl	800c9b6 <lwip_htonl>
 8013b84:	4603      	mov	r3, r0
 8013b86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	dbe6      	blt.n	8013b5a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b98:	601a      	str	r2, [r3, #0]
 8013b9a:	e009      	b.n	8013bb0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013b9c:	6a3b      	ldr	r3, [r7, #32]
 8013b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ba0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013ba2:	6a3b      	ldr	r3, [r7, #32]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	623b      	str	r3, [r7, #32]
 8013ba8:	e002      	b.n	8013bb0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bac:	f7fb ff1d 	bl	800f9ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d012      	beq.n	8013be2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7f8 fef7 	bl	800c9b6 <lwip_htonl>
 8013bc8:	4602      	mov	r2, r0
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bd2:	8912      	ldrh	r2, [r2, #8]
 8013bd4:	4413      	add	r3, r2
  while (seg != NULL &&
 8013bd6:	69ba      	ldr	r2, [r7, #24]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	f4bf aed9 	bcs.w	8013990 <tcp_output+0x160>
 8013bde:	e000      	b.n	8013be2 <tcp_output+0x3b2>
      break;
 8013be0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d108      	bne.n	8013bfc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2200      	movs	r2, #0
 8013bee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013bf2:	e004      	b.n	8013bfe <tcp_output+0x3ce>
    goto output_done;
 8013bf4:	bf00      	nop
 8013bf6:	e002      	b.n	8013bfe <tcp_output+0x3ce>
    goto output_done;
 8013bf8:	bf00      	nop
 8013bfa:	e000      	b.n	8013bfe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013bfc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	8b5b      	ldrh	r3, [r3, #26]
 8013c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013c0c:	2300      	movs	r3, #0
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3728      	adds	r7, #40	; 0x28
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bdb0      	pop	{r4, r5, r7, pc}
 8013c16:	bf00      	nop

08013c18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <tcp_output_segment_busy+0x1c>
 8013c26:	4b09      	ldr	r3, [pc, #36]	; (8013c4c <tcp_output_segment_busy+0x34>)
 8013c28:	f240 529a 	movw	r2, #1434	; 0x59a
 8013c2c:	4908      	ldr	r1, [pc, #32]	; (8013c50 <tcp_output_segment_busy+0x38>)
 8013c2e:	4809      	ldr	r0, [pc, #36]	; (8013c54 <tcp_output_segment_busy+0x3c>)
 8013c30:	f004 f800 	bl	8017c34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	7b9b      	ldrb	r3, [r3, #14]
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d001      	beq.n	8013c42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e000      	b.n	8013c44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013c42:	2300      	movs	r3, #0
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	0801adb8 	.word	0x0801adb8
 8013c50:	0801b354 	.word	0x0801b354
 8013c54:	0801ae0c 	.word	0x0801ae0c

08013c58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013c58:	b5b0      	push	{r4, r5, r7, lr}
 8013c5a:	b08c      	sub	sp, #48	; 0x30
 8013c5c:	af04      	add	r7, sp, #16
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <tcp_output_segment+0x20>
 8013c6a:	4b63      	ldr	r3, [pc, #396]	; (8013df8 <tcp_output_segment+0x1a0>)
 8013c6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013c70:	4962      	ldr	r1, [pc, #392]	; (8013dfc <tcp_output_segment+0x1a4>)
 8013c72:	4863      	ldr	r0, [pc, #396]	; (8013e00 <tcp_output_segment+0x1a8>)
 8013c74:	f003 ffde 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d106      	bne.n	8013c8c <tcp_output_segment+0x34>
 8013c7e:	4b5e      	ldr	r3, [pc, #376]	; (8013df8 <tcp_output_segment+0x1a0>)
 8013c80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013c84:	495f      	ldr	r1, [pc, #380]	; (8013e04 <tcp_output_segment+0x1ac>)
 8013c86:	485e      	ldr	r0, [pc, #376]	; (8013e00 <tcp_output_segment+0x1a8>)
 8013c88:	f003 ffd4 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d106      	bne.n	8013ca0 <tcp_output_segment+0x48>
 8013c92:	4b59      	ldr	r3, [pc, #356]	; (8013df8 <tcp_output_segment+0x1a0>)
 8013c94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013c98:	495b      	ldr	r1, [pc, #364]	; (8013e08 <tcp_output_segment+0x1b0>)
 8013c9a:	4859      	ldr	r0, [pc, #356]	; (8013e00 <tcp_output_segment+0x1a8>)
 8013c9c:	f003 ffca 	bl	8017c34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013ca0:	68f8      	ldr	r0, [r7, #12]
 8013ca2:	f7ff ffb9 	bl	8013c18 <tcp_output_segment_busy>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d001      	beq.n	8013cb0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013cac:	2300      	movs	r3, #0
 8013cae:	e09f      	b.n	8013df0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	68dc      	ldr	r4, [r3, #12]
 8013cb8:	4610      	mov	r0, r2
 8013cba:	f7f8 fe7c 	bl	800c9b6 <lwip_htonl>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	68dc      	ldr	r4, [r3, #12]
 8013cca:	4610      	mov	r0, r2
 8013ccc:	f7f8 fe5e 	bl	800c98c <lwip_htons>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013cdc:	441a      	add	r2, r3
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	68db      	ldr	r3, [r3, #12]
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	7a9b      	ldrb	r3, [r3, #10]
 8013cee:	f003 0301 	and.w	r3, r3, #1
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d015      	beq.n	8013d22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	3304      	adds	r3, #4
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	6879      	ldr	r1, [r7, #4]
 8013cfe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013d02:	f7fc fa37 	bl	8010174 <tcp_eff_send_mss_netif>
 8013d06:	4603      	mov	r3, r0
 8013d08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013d0a:	8b7b      	ldrh	r3, [r7, #26]
 8013d0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f8 fe50 	bl	800c9b6 <lwip_htonl>
 8013d16:	4602      	mov	r2, r0
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	3304      	adds	r3, #4
 8013d20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	da02      	bge.n	8013d32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10c      	bne.n	8013d54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013d3a:	4b34      	ldr	r3, [pc, #208]	; (8013e0c <tcp_output_segment+0x1b4>)
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f8 fe34 	bl	800c9b6 <lwip_htonl>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	68da      	ldr	r2, [r3, #12]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	1ad3      	subs	r3, r2, r3
 8013d60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	8959      	ldrh	r1, [r3, #10]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	8b3a      	ldrh	r2, [r7, #24]
 8013d6e:	1a8a      	subs	r2, r1, r2
 8013d70:	b292      	uxth	r2, r2
 8013d72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	8919      	ldrh	r1, [r3, #8]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	8b3a      	ldrh	r2, [r7, #24]
 8013d80:	1a8a      	subs	r2, r1, r2
 8013d82:	b292      	uxth	r2, r2
 8013d84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	68d2      	ldr	r2, [r2, #12]
 8013d8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	2200      	movs	r2, #0
 8013d96:	741a      	strb	r2, [r3, #16]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	f103 0214 	add.w	r2, r3, #20
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	7a9b      	ldrb	r3, [r3, #10]
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	f003 0304 	and.w	r3, r3, #4
 8013dae:	4413      	add	r3, r2
 8013db0:	69fa      	ldr	r2, [r7, #28]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d006      	beq.n	8013dc4 <tcp_output_segment+0x16c>
 8013db6:	4b10      	ldr	r3, [pc, #64]	; (8013df8 <tcp_output_segment+0x1a0>)
 8013db8:	f240 621c 	movw	r2, #1564	; 0x61c
 8013dbc:	4914      	ldr	r1, [pc, #80]	; (8013e10 <tcp_output_segment+0x1b8>)
 8013dbe:	4810      	ldr	r0, [pc, #64]	; (8013e00 <tcp_output_segment+0x1a8>)
 8013dc0:	f003 ff38 	bl	8017c34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6858      	ldr	r0, [r3, #4]
 8013dc8:	68b9      	ldr	r1, [r7, #8]
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	1d1c      	adds	r4, r3, #4
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	7add      	ldrb	r5, [r3, #11]
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	7a9b      	ldrb	r3, [r3, #10]
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	9202      	str	r2, [sp, #8]
 8013dda:	2206      	movs	r2, #6
 8013ddc:	9201      	str	r2, [sp, #4]
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	462b      	mov	r3, r5
 8013de2:	4622      	mov	r2, r4
 8013de4:	f002 fbac 	bl	8016540 <ip4_output_if>
 8013de8:	4603      	mov	r3, r0
 8013dea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3720      	adds	r7, #32
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bdb0      	pop	{r4, r5, r7, pc}
 8013df8:	0801adb8 	.word	0x0801adb8
 8013dfc:	0801b37c 	.word	0x0801b37c
 8013e00:	0801ae0c 	.word	0x0801ae0c
 8013e04:	0801b39c 	.word	0x0801b39c
 8013e08:	0801b3bc 	.word	0x0801b3bc
 8013e0c:	2000b718 	.word	0x2000b718
 8013e10:	0801b3e0 	.word	0x0801b3e0

08013e14 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013e14:	b5b0      	push	{r4, r5, r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <tcp_rexmit_rto_prepare+0x1c>
 8013e22:	4b31      	ldr	r3, [pc, #196]	; (8013ee8 <tcp_rexmit_rto_prepare+0xd4>)
 8013e24:	f240 6263 	movw	r2, #1635	; 0x663
 8013e28:	4930      	ldr	r1, [pc, #192]	; (8013eec <tcp_rexmit_rto_prepare+0xd8>)
 8013e2a:	4831      	ldr	r0, [pc, #196]	; (8013ef0 <tcp_rexmit_rto_prepare+0xdc>)
 8013e2c:	f003 ff02 	bl	8017c34 <iprintf>

  if (pcb->unacked == NULL) {
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d102      	bne.n	8013e3e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013e38:	f06f 0305 	mvn.w	r3, #5
 8013e3c:	e050      	b.n	8013ee0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e42:	60fb      	str	r3, [r7, #12]
 8013e44:	e00b      	b.n	8013e5e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f7ff fee6 	bl	8013c18 <tcp_output_segment_busy>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d002      	beq.n	8013e58 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013e52:	f06f 0305 	mvn.w	r3, #5
 8013e56:	e043      	b.n	8013ee0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	60fb      	str	r3, [r7, #12]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d1ef      	bne.n	8013e46 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	f7ff fed6 	bl	8013c18 <tcp_output_segment_busy>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d002      	beq.n	8013e78 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013e72:	f06f 0305 	mvn.w	r3, #5
 8013e76:	e033      	b.n	8013ee0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	8b5b      	ldrh	r3, [r3, #26]
 8013e92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7f8 fd87 	bl	800c9b6 <lwip_htonl>
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	891b      	ldrh	r3, [r3, #8]
 8013eae:	461d      	mov	r5, r3
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	899b      	ldrh	r3, [r3, #12]
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f8 fd67 	bl	800c98c <lwip_htons>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	f003 0303 	and.w	r3, r3, #3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <tcp_rexmit_rto_prepare+0xba>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	e000      	b.n	8013ed0 <tcp_rexmit_rto_prepare+0xbc>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	442b      	add	r3, r5
 8013ed2:	18e2      	adds	r2, r4, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2200      	movs	r2, #0
 8013edc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ee8:	0801adb8 	.word	0x0801adb8
 8013eec:	0801b3f4 	.word	0x0801b3f4
 8013ef0:	0801ae0c 	.word	0x0801ae0c

08013ef4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <tcp_rexmit_rto_commit+0x1c>
 8013f02:	4b0d      	ldr	r3, [pc, #52]	; (8013f38 <tcp_rexmit_rto_commit+0x44>)
 8013f04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013f08:	490c      	ldr	r1, [pc, #48]	; (8013f3c <tcp_rexmit_rto_commit+0x48>)
 8013f0a:	480d      	ldr	r0, [pc, #52]	; (8013f40 <tcp_rexmit_rto_commit+0x4c>)
 8013f0c:	f003 fe92 	bl	8017c34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f16:	2bff      	cmp	r3, #255	; 0xff
 8013f18:	d007      	beq.n	8013f2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f20:	3301      	adds	r3, #1
 8013f22:	b2da      	uxtb	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7ff fc80 	bl	8013830 <tcp_output>
}
 8013f30:	bf00      	nop
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	0801adb8 	.word	0x0801adb8
 8013f3c:	0801b418 	.word	0x0801b418
 8013f40:	0801ae0c 	.word	0x0801ae0c

08013f44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d106      	bne.n	8013f60 <tcp_rexmit_rto+0x1c>
 8013f52:	4b0a      	ldr	r3, [pc, #40]	; (8013f7c <tcp_rexmit_rto+0x38>)
 8013f54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013f58:	4909      	ldr	r1, [pc, #36]	; (8013f80 <tcp_rexmit_rto+0x3c>)
 8013f5a:	480a      	ldr	r0, [pc, #40]	; (8013f84 <tcp_rexmit_rto+0x40>)
 8013f5c:	f003 fe6a 	bl	8017c34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f7ff ff57 	bl	8013e14 <tcp_rexmit_rto_prepare>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d102      	bne.n	8013f72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f7ff ffc1 	bl	8013ef4 <tcp_rexmit_rto_commit>
  }
}
 8013f72:	bf00      	nop
 8013f74:	3708      	adds	r7, #8
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop
 8013f7c:	0801adb8 	.word	0x0801adb8
 8013f80:	0801b43c 	.word	0x0801b43c
 8013f84:	0801ae0c 	.word	0x0801ae0c

08013f88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013f88:	b590      	push	{r4, r7, lr}
 8013f8a:	b085      	sub	sp, #20
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d106      	bne.n	8013fa4 <tcp_rexmit+0x1c>
 8013f96:	4b2f      	ldr	r3, [pc, #188]	; (8014054 <tcp_rexmit+0xcc>)
 8013f98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013f9c:	492e      	ldr	r1, [pc, #184]	; (8014058 <tcp_rexmit+0xd0>)
 8013f9e:	482f      	ldr	r0, [pc, #188]	; (801405c <tcp_rexmit+0xd4>)
 8013fa0:	f003 fe48 	bl	8017c34 <iprintf>

  if (pcb->unacked == NULL) {
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d102      	bne.n	8013fb2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013fac:	f06f 0305 	mvn.w	r3, #5
 8013fb0:	e04c      	b.n	801404c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013fb8:	68b8      	ldr	r0, [r7, #8]
 8013fba:	f7ff fe2d 	bl	8013c18 <tcp_output_segment_busy>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d002      	beq.n	8013fca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013fc4:	f06f 0305 	mvn.w	r3, #5
 8013fc8:	e040      	b.n	801404c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	336c      	adds	r3, #108	; 0x6c
 8013fd6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013fd8:	e002      	b.n	8013fe0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d011      	beq.n	801400c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7f8 fce0 	bl	800c9b6 <lwip_htonl>
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7f8 fcd9 	bl	800c9b6 <lwip_htonl>
 8014004:	4603      	mov	r3, r0
 8014006:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014008:	2b00      	cmp	r3, #0
 801400a:	dbe6      	blt.n	8013fda <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	68ba      	ldr	r2, [r7, #8]
 8014018:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d103      	bne.n	801402a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2200      	movs	r2, #0
 8014026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014030:	2bff      	cmp	r3, #255	; 0xff
 8014032:	d007      	beq.n	8014044 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801403a:	3301      	adds	r3, #1
 801403c:	b2da      	uxtb	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801404a:	2300      	movs	r3, #0
}
 801404c:	4618      	mov	r0, r3
 801404e:	3714      	adds	r7, #20
 8014050:	46bd      	mov	sp, r7
 8014052:	bd90      	pop	{r4, r7, pc}
 8014054:	0801adb8 	.word	0x0801adb8
 8014058:	0801b458 	.word	0x0801b458
 801405c:	0801ae0c 	.word	0x0801ae0c

08014060 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d106      	bne.n	801407c <tcp_rexmit_fast+0x1c>
 801406e:	4b2a      	ldr	r3, [pc, #168]	; (8014118 <tcp_rexmit_fast+0xb8>)
 8014070:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014074:	4929      	ldr	r1, [pc, #164]	; (801411c <tcp_rexmit_fast+0xbc>)
 8014076:	482a      	ldr	r0, [pc, #168]	; (8014120 <tcp_rexmit_fast+0xc0>)
 8014078:	f003 fddc 	bl	8017c34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014080:	2b00      	cmp	r3, #0
 8014082:	d044      	beq.n	801410e <tcp_rexmit_fast+0xae>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	8b5b      	ldrh	r3, [r3, #26]
 8014088:	f003 0304 	and.w	r3, r3, #4
 801408c:	2b00      	cmp	r3, #0
 801408e:	d13e      	bne.n	801410e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f7ff ff79 	bl	8013f88 <tcp_rexmit>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d138      	bne.n	801410e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140a8:	4293      	cmp	r3, r2
 80140aa:	bf28      	it	cs
 80140ac:	4613      	movcs	r3, r2
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	0fda      	lsrs	r2, r3, #31
 80140b2:	4413      	add	r3, r2
 80140b4:	105b      	asrs	r3, r3, #1
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80140c4:	461a      	mov	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d206      	bcs.n	80140de <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140d4:	005b      	lsls	r3, r3, #1
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140e8:	4619      	mov	r1, r3
 80140ea:	0049      	lsls	r1, r1, #1
 80140ec:	440b      	add	r3, r1
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	4413      	add	r3, r2
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	8b5b      	ldrh	r3, [r3, #26]
 80140fe:	f043 0304 	orr.w	r3, r3, #4
 8014102:	b29a      	uxth	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2200      	movs	r2, #0
 801410c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801410e:	bf00      	nop
 8014110:	3708      	adds	r7, #8
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	0801adb8 	.word	0x0801adb8
 801411c:	0801b470 	.word	0x0801b470
 8014120:	0801ae0c 	.word	0x0801ae0c

08014124 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	607b      	str	r3, [r7, #4]
 801412e:	460b      	mov	r3, r1
 8014130:	817b      	strh	r3, [r7, #10]
 8014132:	4613      	mov	r3, r2
 8014134:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014136:	897a      	ldrh	r2, [r7, #10]
 8014138:	893b      	ldrh	r3, [r7, #8]
 801413a:	4413      	add	r3, r2
 801413c:	b29b      	uxth	r3, r3
 801413e:	3314      	adds	r3, #20
 8014140:	b29b      	uxth	r3, r3
 8014142:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014146:	4619      	mov	r1, r3
 8014148:	2022      	movs	r0, #34	; 0x22
 801414a:	f7f9 fce7 	bl	800db1c <pbuf_alloc>
 801414e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d04d      	beq.n	80141f2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014156:	897b      	ldrh	r3, [r7, #10]
 8014158:	3313      	adds	r3, #19
 801415a:	697a      	ldr	r2, [r7, #20]
 801415c:	8952      	ldrh	r2, [r2, #10]
 801415e:	4293      	cmp	r3, r2
 8014160:	db06      	blt.n	8014170 <tcp_output_alloc_header_common+0x4c>
 8014162:	4b26      	ldr	r3, [pc, #152]	; (80141fc <tcp_output_alloc_header_common+0xd8>)
 8014164:	f240 7223 	movw	r2, #1827	; 0x723
 8014168:	4925      	ldr	r1, [pc, #148]	; (8014200 <tcp_output_alloc_header_common+0xdc>)
 801416a:	4826      	ldr	r0, [pc, #152]	; (8014204 <tcp_output_alloc_header_common+0xe0>)
 801416c:	f003 fd62 	bl	8017c34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014176:	8c3b      	ldrh	r3, [r7, #32]
 8014178:	4618      	mov	r0, r3
 801417a:	f7f8 fc07 	bl	800c98c <lwip_htons>
 801417e:	4603      	mov	r3, r0
 8014180:	461a      	mov	r2, r3
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014188:	4618      	mov	r0, r3
 801418a:	f7f8 fbff 	bl	800c98c <lwip_htons>
 801418e:	4603      	mov	r3, r0
 8014190:	461a      	mov	r2, r3
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f7f8 fc0a 	bl	800c9b6 <lwip_htonl>
 80141a2:	4602      	mov	r2, r0
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80141a8:	897b      	ldrh	r3, [r7, #10]
 80141aa:	089b      	lsrs	r3, r3, #2
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	3305      	adds	r3, #5
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	031b      	lsls	r3, r3, #12
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	4313      	orrs	r3, r2
 80141be:	b29b      	uxth	r3, r3
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7f8 fbe3 	bl	800c98c <lwip_htons>
 80141c6:	4603      	mov	r3, r0
 80141c8:	461a      	mov	r2, r3
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80141ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7f8 fbdb 	bl	800c98c <lwip_htons>
 80141d6:	4603      	mov	r3, r0
 80141d8:	461a      	mov	r2, r3
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80141de:	693b      	ldr	r3, [r7, #16]
 80141e0:	2200      	movs	r2, #0
 80141e2:	741a      	strb	r2, [r3, #16]
 80141e4:	2200      	movs	r2, #0
 80141e6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80141e8:	693b      	ldr	r3, [r7, #16]
 80141ea:	2200      	movs	r2, #0
 80141ec:	749a      	strb	r2, [r3, #18]
 80141ee:	2200      	movs	r2, #0
 80141f0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80141f2:	697b      	ldr	r3, [r7, #20]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3718      	adds	r7, #24
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	0801adb8 	.word	0x0801adb8
 8014200:	0801b490 	.word	0x0801b490
 8014204:	0801ae0c 	.word	0x0801ae0c

08014208 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014208:	b5b0      	push	{r4, r5, r7, lr}
 801420a:	b08a      	sub	sp, #40	; 0x28
 801420c:	af04      	add	r7, sp, #16
 801420e:	60f8      	str	r0, [r7, #12]
 8014210:	607b      	str	r3, [r7, #4]
 8014212:	460b      	mov	r3, r1
 8014214:	817b      	strh	r3, [r7, #10]
 8014216:	4613      	mov	r3, r2
 8014218:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d106      	bne.n	801422e <tcp_output_alloc_header+0x26>
 8014220:	4b15      	ldr	r3, [pc, #84]	; (8014278 <tcp_output_alloc_header+0x70>)
 8014222:	f240 7242 	movw	r2, #1858	; 0x742
 8014226:	4915      	ldr	r1, [pc, #84]	; (801427c <tcp_output_alloc_header+0x74>)
 8014228:	4815      	ldr	r0, [pc, #84]	; (8014280 <tcp_output_alloc_header+0x78>)
 801422a:	f003 fd03 	bl	8017c34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	8adb      	ldrh	r3, [r3, #22]
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	8b12      	ldrh	r2, [r2, #24]
 801423a:	68f9      	ldr	r1, [r7, #12]
 801423c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801423e:	893d      	ldrh	r5, [r7, #8]
 8014240:	897c      	ldrh	r4, [r7, #10]
 8014242:	9103      	str	r1, [sp, #12]
 8014244:	2110      	movs	r1, #16
 8014246:	9102      	str	r1, [sp, #8]
 8014248:	9201      	str	r2, [sp, #4]
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	462a      	mov	r2, r5
 8014250:	4621      	mov	r1, r4
 8014252:	f7ff ff67 	bl	8014124 <tcp_output_alloc_header_common>
 8014256:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d006      	beq.n	801426c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014262:	68fa      	ldr	r2, [r7, #12]
 8014264:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014266:	441a      	add	r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801426c:	697b      	ldr	r3, [r7, #20]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bdb0      	pop	{r4, r5, r7, pc}
 8014276:	bf00      	nop
 8014278:	0801adb8 	.word	0x0801adb8
 801427c:	0801b4c0 	.word	0x0801b4c0
 8014280:	0801ae0c 	.word	0x0801ae0c

08014284 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b088      	sub	sp, #32
 8014288:	af00      	add	r7, sp, #0
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	4611      	mov	r1, r2
 8014290:	461a      	mov	r2, r3
 8014292:	460b      	mov	r3, r1
 8014294:	71fb      	strb	r3, [r7, #7]
 8014296:	4613      	mov	r3, r2
 8014298:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d106      	bne.n	80142b2 <tcp_output_fill_options+0x2e>
 80142a4:	4b13      	ldr	r3, [pc, #76]	; (80142f4 <tcp_output_fill_options+0x70>)
 80142a6:	f240 7256 	movw	r2, #1878	; 0x756
 80142aa:	4913      	ldr	r1, [pc, #76]	; (80142f8 <tcp_output_fill_options+0x74>)
 80142ac:	4813      	ldr	r0, [pc, #76]	; (80142fc <tcp_output_fill_options+0x78>)
 80142ae:	f003 fcc1 	bl	8017c34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	3314      	adds	r3, #20
 80142bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80142be:	69bb      	ldr	r3, [r7, #24]
 80142c0:	f103 0214 	add.w	r2, r3, #20
 80142c4:	8bfb      	ldrh	r3, [r7, #30]
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4619      	mov	r1, r3
 80142ca:	79fb      	ldrb	r3, [r7, #7]
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	f003 0304 	and.w	r3, r3, #4
 80142d2:	440b      	add	r3, r1
 80142d4:	4413      	add	r3, r2
 80142d6:	697a      	ldr	r2, [r7, #20]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d006      	beq.n	80142ea <tcp_output_fill_options+0x66>
 80142dc:	4b05      	ldr	r3, [pc, #20]	; (80142f4 <tcp_output_fill_options+0x70>)
 80142de:	f240 7275 	movw	r2, #1909	; 0x775
 80142e2:	4907      	ldr	r1, [pc, #28]	; (8014300 <tcp_output_fill_options+0x7c>)
 80142e4:	4805      	ldr	r0, [pc, #20]	; (80142fc <tcp_output_fill_options+0x78>)
 80142e6:	f003 fca5 	bl	8017c34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80142ea:	bf00      	nop
 80142ec:	3720      	adds	r7, #32
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	0801adb8 	.word	0x0801adb8
 80142f8:	0801b4e8 	.word	0x0801b4e8
 80142fc:	0801ae0c 	.word	0x0801ae0c
 8014300:	0801b3e0 	.word	0x0801b3e0

08014304 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b08a      	sub	sp, #40	; 0x28
 8014308:	af04      	add	r7, sp, #16
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
 8014310:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d106      	bne.n	8014326 <tcp_output_control_segment+0x22>
 8014318:	4b1c      	ldr	r3, [pc, #112]	; (801438c <tcp_output_control_segment+0x88>)
 801431a:	f240 7287 	movw	r2, #1927	; 0x787
 801431e:	491c      	ldr	r1, [pc, #112]	; (8014390 <tcp_output_control_segment+0x8c>)
 8014320:	481c      	ldr	r0, [pc, #112]	; (8014394 <tcp_output_control_segment+0x90>)
 8014322:	f003 fc87 	bl	8017c34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014326:	683a      	ldr	r2, [r7, #0]
 8014328:	6879      	ldr	r1, [r7, #4]
 801432a:	68f8      	ldr	r0, [r7, #12]
 801432c:	f7fe fae8 	bl	8012900 <tcp_route>
 8014330:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d102      	bne.n	801433e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014338:	23fc      	movs	r3, #252	; 0xfc
 801433a:	75fb      	strb	r3, [r7, #23]
 801433c:	e01c      	b.n	8014378 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d006      	beq.n	8014352 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	7adb      	ldrb	r3, [r3, #11]
 8014348:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	7a9b      	ldrb	r3, [r3, #10]
 801434e:	757b      	strb	r3, [r7, #21]
 8014350:	e003      	b.n	801435a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014352:	23ff      	movs	r3, #255	; 0xff
 8014354:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014356:	2300      	movs	r3, #0
 8014358:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801435a:	7dba      	ldrb	r2, [r7, #22]
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	9302      	str	r3, [sp, #8]
 8014360:	2306      	movs	r3, #6
 8014362:	9301      	str	r3, [sp, #4]
 8014364:	7d7b      	ldrb	r3, [r7, #21]
 8014366:	9300      	str	r3, [sp, #0]
 8014368:	4613      	mov	r3, r2
 801436a:	683a      	ldr	r2, [r7, #0]
 801436c:	6879      	ldr	r1, [r7, #4]
 801436e:	68b8      	ldr	r0, [r7, #8]
 8014370:	f002 f8e6 	bl	8016540 <ip4_output_if>
 8014374:	4603      	mov	r3, r0
 8014376:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014378:	68b8      	ldr	r0, [r7, #8]
 801437a:	f7f9 feb3 	bl	800e0e4 <pbuf_free>
  return err;
 801437e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014382:	4618      	mov	r0, r3
 8014384:	3718      	adds	r7, #24
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	0801adb8 	.word	0x0801adb8
 8014390:	0801b510 	.word	0x0801b510
 8014394:	0801ae0c 	.word	0x0801ae0c

08014398 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014398:	b590      	push	{r4, r7, lr}
 801439a:	b08b      	sub	sp, #44	; 0x2c
 801439c:	af04      	add	r7, sp, #16
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d106      	bne.n	80143ba <tcp_rst+0x22>
 80143ac:	4b1f      	ldr	r3, [pc, #124]	; (801442c <tcp_rst+0x94>)
 80143ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80143b2:	491f      	ldr	r1, [pc, #124]	; (8014430 <tcp_rst+0x98>)
 80143b4:	481f      	ldr	r0, [pc, #124]	; (8014434 <tcp_rst+0x9c>)
 80143b6:	f003 fc3d 	bl	8017c34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80143ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d106      	bne.n	80143ce <tcp_rst+0x36>
 80143c0:	4b1a      	ldr	r3, [pc, #104]	; (801442c <tcp_rst+0x94>)
 80143c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80143c6:	491c      	ldr	r1, [pc, #112]	; (8014438 <tcp_rst+0xa0>)
 80143c8:	481a      	ldr	r0, [pc, #104]	; (8014434 <tcp_rst+0x9c>)
 80143ca:	f003 fc33 	bl	8017c34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80143ce:	2300      	movs	r3, #0
 80143d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80143d2:	f246 0308 	movw	r3, #24584	; 0x6008
 80143d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80143d8:	7dfb      	ldrb	r3, [r7, #23]
 80143da:	b29c      	uxth	r4, r3
 80143dc:	68b8      	ldr	r0, [r7, #8]
 80143de:	f7f8 faea 	bl	800c9b6 <lwip_htonl>
 80143e2:	4602      	mov	r2, r0
 80143e4:	8abb      	ldrh	r3, [r7, #20]
 80143e6:	9303      	str	r3, [sp, #12]
 80143e8:	2314      	movs	r3, #20
 80143ea:	9302      	str	r3, [sp, #8]
 80143ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	4613      	mov	r3, r2
 80143f6:	2200      	movs	r2, #0
 80143f8:	4621      	mov	r1, r4
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f7ff fe92 	bl	8014124 <tcp_output_alloc_header_common>
 8014400:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d00c      	beq.n	8014422 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014408:	7dfb      	ldrb	r3, [r7, #23]
 801440a:	2200      	movs	r2, #0
 801440c:	6939      	ldr	r1, [r7, #16]
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f7ff ff38 	bl	8014284 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	6939      	ldr	r1, [r7, #16]
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f7ff ff72 	bl	8014304 <tcp_output_control_segment>
 8014420:	e000      	b.n	8014424 <tcp_rst+0x8c>
    return;
 8014422:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014424:	371c      	adds	r7, #28
 8014426:	46bd      	mov	sp, r7
 8014428:	bd90      	pop	{r4, r7, pc}
 801442a:	bf00      	nop
 801442c:	0801adb8 	.word	0x0801adb8
 8014430:	0801b53c 	.word	0x0801b53c
 8014434:	0801ae0c 	.word	0x0801ae0c
 8014438:	0801b558 	.word	0x0801b558

0801443c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801443c:	b590      	push	{r4, r7, lr}
 801443e:	b087      	sub	sp, #28
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014444:	2300      	movs	r3, #0
 8014446:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014448:	2300      	movs	r3, #0
 801444a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <tcp_send_empty_ack+0x24>
 8014452:	4b28      	ldr	r3, [pc, #160]	; (80144f4 <tcp_send_empty_ack+0xb8>)
 8014454:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014458:	4927      	ldr	r1, [pc, #156]	; (80144f8 <tcp_send_empty_ack+0xbc>)
 801445a:	4828      	ldr	r0, [pc, #160]	; (80144fc <tcp_send_empty_ack+0xc0>)
 801445c:	f003 fbea 	bl	8017c34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014460:	7dfb      	ldrb	r3, [r7, #23]
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	b2db      	uxtb	r3, r3
 8014466:	f003 0304 	and.w	r3, r3, #4
 801446a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801446c:	7d7b      	ldrb	r3, [r7, #21]
 801446e:	b29c      	uxth	r4, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014474:	4618      	mov	r0, r3
 8014476:	f7f8 fa9e 	bl	800c9b6 <lwip_htonl>
 801447a:	4603      	mov	r3, r0
 801447c:	2200      	movs	r2, #0
 801447e:	4621      	mov	r1, r4
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7ff fec1 	bl	8014208 <tcp_output_alloc_header>
 8014486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d109      	bne.n	80144a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	8b5b      	ldrh	r3, [r3, #26]
 8014492:	f043 0303 	orr.w	r3, r3, #3
 8014496:	b29a      	uxth	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801449c:	f06f 0301 	mvn.w	r3, #1
 80144a0:	e023      	b.n	80144ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80144a2:	7dbb      	ldrb	r3, [r7, #22]
 80144a4:	7dfa      	ldrb	r2, [r7, #23]
 80144a6:	6939      	ldr	r1, [r7, #16]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff feeb 	bl	8014284 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	3304      	adds	r3, #4
 80144b4:	6939      	ldr	r1, [r7, #16]
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7ff ff24 	bl	8014304 <tcp_output_control_segment>
 80144bc:	4603      	mov	r3, r0
 80144be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80144c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d007      	beq.n	80144d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	8b5b      	ldrh	r3, [r3, #26]
 80144cc:	f043 0303 	orr.w	r3, r3, #3
 80144d0:	b29a      	uxth	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	835a      	strh	r2, [r3, #26]
 80144d6:	e006      	b.n	80144e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8b5b      	ldrh	r3, [r3, #26]
 80144dc:	f023 0303 	bic.w	r3, r3, #3
 80144e0:	b29a      	uxth	r2, r3
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80144e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	371c      	adds	r7, #28
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd90      	pop	{r4, r7, pc}
 80144f2:	bf00      	nop
 80144f4:	0801adb8 	.word	0x0801adb8
 80144f8:	0801b574 	.word	0x0801b574
 80144fc:	0801ae0c 	.word	0x0801ae0c

08014500 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014500:	b590      	push	{r4, r7, lr}
 8014502:	b087      	sub	sp, #28
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014508:	2300      	movs	r3, #0
 801450a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d106      	bne.n	8014520 <tcp_keepalive+0x20>
 8014512:	4b18      	ldr	r3, [pc, #96]	; (8014574 <tcp_keepalive+0x74>)
 8014514:	f640 0224 	movw	r2, #2084	; 0x824
 8014518:	4917      	ldr	r1, [pc, #92]	; (8014578 <tcp_keepalive+0x78>)
 801451a:	4818      	ldr	r0, [pc, #96]	; (801457c <tcp_keepalive+0x7c>)
 801451c:	f003 fb8a 	bl	8017c34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014520:	7dfb      	ldrb	r3, [r7, #23]
 8014522:	b29c      	uxth	r4, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014528:	3b01      	subs	r3, #1
 801452a:	4618      	mov	r0, r3
 801452c:	f7f8 fa43 	bl	800c9b6 <lwip_htonl>
 8014530:	4603      	mov	r3, r0
 8014532:	2200      	movs	r2, #0
 8014534:	4621      	mov	r1, r4
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff fe66 	bl	8014208 <tcp_output_alloc_header>
 801453c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d102      	bne.n	801454a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014544:	f04f 33ff 	mov.w	r3, #4294967295
 8014548:	e010      	b.n	801456c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801454a:	7dfb      	ldrb	r3, [r7, #23]
 801454c:	2200      	movs	r2, #0
 801454e:	6939      	ldr	r1, [r7, #16]
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f7ff fe97 	bl	8014284 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	3304      	adds	r3, #4
 801455c:	6939      	ldr	r1, [r7, #16]
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f7ff fed0 	bl	8014304 <tcp_output_control_segment>
 8014564:	4603      	mov	r3, r0
 8014566:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801456c:	4618      	mov	r0, r3
 801456e:	371c      	adds	r7, #28
 8014570:	46bd      	mov	sp, r7
 8014572:	bd90      	pop	{r4, r7, pc}
 8014574:	0801adb8 	.word	0x0801adb8
 8014578:	0801b594 	.word	0x0801b594
 801457c:	0801ae0c 	.word	0x0801ae0c

08014580 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014580:	b590      	push	{r4, r7, lr}
 8014582:	b08b      	sub	sp, #44	; 0x2c
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014588:	2300      	movs	r3, #0
 801458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d106      	bne.n	80145a2 <tcp_zero_window_probe+0x22>
 8014594:	4b4c      	ldr	r3, [pc, #304]	; (80146c8 <tcp_zero_window_probe+0x148>)
 8014596:	f640 024f 	movw	r2, #2127	; 0x84f
 801459a:	494c      	ldr	r1, [pc, #304]	; (80146cc <tcp_zero_window_probe+0x14c>)
 801459c:	484c      	ldr	r0, [pc, #304]	; (80146d0 <tcp_zero_window_probe+0x150>)
 801459e:	f003 fb49 	bl	8017c34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80145a8:	6a3b      	ldr	r3, [r7, #32]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d101      	bne.n	80145b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80145ae:	2300      	movs	r3, #0
 80145b0:	e086      	b.n	80146c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80145b8:	2bff      	cmp	r3, #255	; 0xff
 80145ba:	d007      	beq.n	80145cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80145c2:	3301      	adds	r3, #1
 80145c4:	b2da      	uxtb	r2, r3
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80145cc:	6a3b      	ldr	r3, [r7, #32]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	899b      	ldrh	r3, [r3, #12]
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f8 f9d9 	bl	800c98c <lwip_htons>
 80145da:	4603      	mov	r3, r0
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	f003 0301 	and.w	r3, r3, #1
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d005      	beq.n	80145f2 <tcp_zero_window_probe+0x72>
 80145e6:	6a3b      	ldr	r3, [r7, #32]
 80145e8:	891b      	ldrh	r3, [r3, #8]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d101      	bne.n	80145f2 <tcp_zero_window_probe+0x72>
 80145ee:	2301      	movs	r3, #1
 80145f0:	e000      	b.n	80145f4 <tcp_zero_window_probe+0x74>
 80145f2:	2300      	movs	r3, #0
 80145f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80145f6:	7ffb      	ldrb	r3, [r7, #31]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	bf0c      	ite	eq
 80145fc:	2301      	moveq	r3, #1
 80145fe:	2300      	movne	r3, #0
 8014600:	b2db      	uxtb	r3, r3
 8014602:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014608:	b299      	uxth	r1, r3
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	8bba      	ldrh	r2, [r7, #28]
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7ff fdf8 	bl	8014208 <tcp_output_alloc_header>
 8014618:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d102      	bne.n	8014626 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014620:	f04f 33ff 	mov.w	r3, #4294967295
 8014624:	e04c      	b.n	80146c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801462c:	7ffb      	ldrb	r3, [r7, #31]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d011      	beq.n	8014656 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	899b      	ldrh	r3, [r3, #12]
 8014636:	b29b      	uxth	r3, r3
 8014638:	b21b      	sxth	r3, r3
 801463a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801463e:	b21c      	sxth	r4, r3
 8014640:	2011      	movs	r0, #17
 8014642:	f7f8 f9a3 	bl	800c98c <lwip_htons>
 8014646:	4603      	mov	r3, r0
 8014648:	b21b      	sxth	r3, r3
 801464a:	4323      	orrs	r3, r4
 801464c:	b21b      	sxth	r3, r3
 801464e:	b29a      	uxth	r2, r3
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	819a      	strh	r2, [r3, #12]
 8014654:	e010      	b.n	8014678 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	3314      	adds	r3, #20
 801465c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801465e:	6a3b      	ldr	r3, [r7, #32]
 8014660:	6858      	ldr	r0, [r3, #4]
 8014662:	6a3b      	ldr	r3, [r7, #32]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	891a      	ldrh	r2, [r3, #8]
 8014668:	6a3b      	ldr	r3, [r7, #32]
 801466a:	891b      	ldrh	r3, [r3, #8]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	b29b      	uxth	r3, r3
 8014670:	2201      	movs	r2, #1
 8014672:	6939      	ldr	r1, [r7, #16]
 8014674:	f7f9 ff2c 	bl	800e4d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014678:	6a3b      	ldr	r3, [r7, #32]
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	4618      	mov	r0, r3
 8014680:	f7f8 f999 	bl	800c9b6 <lwip_htonl>
 8014684:	4603      	mov	r3, r0
 8014686:	3301      	adds	r3, #1
 8014688:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	1ad3      	subs	r3, r2, r3
 8014692:	2b00      	cmp	r3, #0
 8014694:	da02      	bge.n	801469c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801469c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146a0:	2200      	movs	r2, #0
 80146a2:	69b9      	ldr	r1, [r7, #24]
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7ff fded 	bl	8014284 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	3304      	adds	r3, #4
 80146b0:	69b9      	ldr	r1, [r7, #24]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fe26 	bl	8014304 <tcp_output_control_segment>
 80146b8:	4603      	mov	r3, r0
 80146ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80146bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	372c      	adds	r7, #44	; 0x2c
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd90      	pop	{r4, r7, pc}
 80146c8:	0801adb8 	.word	0x0801adb8
 80146cc:	0801b5b0 	.word	0x0801b5b0
 80146d0:	0801ae0c 	.word	0x0801ae0c

080146d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80146dc:	f7f9 ffe6 	bl	800e6ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80146e0:	4b0a      	ldr	r3, [pc, #40]	; (801470c <tcpip_tcp_timer+0x38>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d103      	bne.n	80146f0 <tcpip_tcp_timer+0x1c>
 80146e8:	4b09      	ldr	r3, [pc, #36]	; (8014710 <tcpip_tcp_timer+0x3c>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d005      	beq.n	80146fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80146f0:	2200      	movs	r2, #0
 80146f2:	4908      	ldr	r1, [pc, #32]	; (8014714 <tcpip_tcp_timer+0x40>)
 80146f4:	20fa      	movs	r0, #250	; 0xfa
 80146f6:	f000 f8f3 	bl	80148e0 <sys_timeout>
 80146fa:	e003      	b.n	8014704 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80146fc:	4b06      	ldr	r3, [pc, #24]	; (8014718 <tcpip_tcp_timer+0x44>)
 80146fe:	2200      	movs	r2, #0
 8014700:	601a      	str	r2, [r3, #0]
  }
}
 8014702:	bf00      	nop
 8014704:	bf00      	nop
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	2000b714 	.word	0x2000b714
 8014710:	2000b724 	.word	0x2000b724
 8014714:	080146d5 	.word	0x080146d5
 8014718:	20004b2c 	.word	0x20004b2c

0801471c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014720:	4b0a      	ldr	r3, [pc, #40]	; (801474c <tcp_timer_needed+0x30>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10f      	bne.n	8014748 <tcp_timer_needed+0x2c>
 8014728:	4b09      	ldr	r3, [pc, #36]	; (8014750 <tcp_timer_needed+0x34>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d103      	bne.n	8014738 <tcp_timer_needed+0x1c>
 8014730:	4b08      	ldr	r3, [pc, #32]	; (8014754 <tcp_timer_needed+0x38>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d007      	beq.n	8014748 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014738:	4b04      	ldr	r3, [pc, #16]	; (801474c <tcp_timer_needed+0x30>)
 801473a:	2201      	movs	r2, #1
 801473c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801473e:	2200      	movs	r2, #0
 8014740:	4905      	ldr	r1, [pc, #20]	; (8014758 <tcp_timer_needed+0x3c>)
 8014742:	20fa      	movs	r0, #250	; 0xfa
 8014744:	f000 f8cc 	bl	80148e0 <sys_timeout>
  }
}
 8014748:	bf00      	nop
 801474a:	bd80      	pop	{r7, pc}
 801474c:	20004b2c 	.word	0x20004b2c
 8014750:	2000b714 	.word	0x2000b714
 8014754:	2000b724 	.word	0x2000b724
 8014758:	080146d5 	.word	0x080146d5

0801475c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b086      	sub	sp, #24
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014768:	200a      	movs	r0, #10
 801476a:	f7f8 fdc5 	bl	800d2f8 <memp_malloc>
 801476e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d109      	bne.n	801478a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d151      	bne.n	8014820 <sys_timeout_abs+0xc4>
 801477c:	4b2a      	ldr	r3, [pc, #168]	; (8014828 <sys_timeout_abs+0xcc>)
 801477e:	22be      	movs	r2, #190	; 0xbe
 8014780:	492a      	ldr	r1, [pc, #168]	; (801482c <sys_timeout_abs+0xd0>)
 8014782:	482b      	ldr	r0, [pc, #172]	; (8014830 <sys_timeout_abs+0xd4>)
 8014784:	f003 fa56 	bl	8017c34 <iprintf>
    return;
 8014788:	e04a      	b.n	8014820 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	2200      	movs	r2, #0
 801478e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	68ba      	ldr	r2, [r7, #8]
 8014794:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80147a2:	4b24      	ldr	r3, [pc, #144]	; (8014834 <sys_timeout_abs+0xd8>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d103      	bne.n	80147b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80147aa:	4a22      	ldr	r2, [pc, #136]	; (8014834 <sys_timeout_abs+0xd8>)
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	6013      	str	r3, [r2, #0]
    return;
 80147b0:	e037      	b.n	8014822 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	685a      	ldr	r2, [r3, #4]
 80147b6:	4b1f      	ldr	r3, [pc, #124]	; (8014834 <sys_timeout_abs+0xd8>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	1ad3      	subs	r3, r2, r3
 80147be:	0fdb      	lsrs	r3, r3, #31
 80147c0:	f003 0301 	and.w	r3, r3, #1
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d007      	beq.n	80147da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80147ca:	4b1a      	ldr	r3, [pc, #104]	; (8014834 <sys_timeout_abs+0xd8>)
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80147d2:	4a18      	ldr	r2, [pc, #96]	; (8014834 <sys_timeout_abs+0xd8>)
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	6013      	str	r3, [r2, #0]
 80147d8:	e023      	b.n	8014822 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80147da:	4b16      	ldr	r3, [pc, #88]	; (8014834 <sys_timeout_abs+0xd8>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	e01a      	b.n	8014818 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d00b      	beq.n	8014802 <sys_timeout_abs+0xa6>
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	685a      	ldr	r2, [r3, #4]
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	1ad3      	subs	r3, r2, r3
 80147f6:	0fdb      	lsrs	r3, r3, #31
 80147f8:	f003 0301 	and.w	r3, r3, #1
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d007      	beq.n	8014812 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	693a      	ldr	r2, [r7, #16]
 801480e:	601a      	str	r2, [r3, #0]
        break;
 8014810:	e007      	b.n	8014822 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	617b      	str	r3, [r7, #20]
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1e1      	bne.n	80147e2 <sys_timeout_abs+0x86>
 801481e:	e000      	b.n	8014822 <sys_timeout_abs+0xc6>
    return;
 8014820:	bf00      	nop
      }
    }
  }
}
 8014822:	3718      	adds	r7, #24
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	0801b5d4 	.word	0x0801b5d4
 801482c:	0801b608 	.word	0x0801b608
 8014830:	0801b648 	.word	0x0801b648
 8014834:	20004b24 	.word	0x20004b24

08014838 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	4798      	blx	r3

  now = sys_now();
 801484a:	f7f1 fd63 	bl	8006314 <sys_now>
 801484e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	4b0f      	ldr	r3, [pc, #60]	; (8014894 <lwip_cyclic_timer+0x5c>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4413      	add	r3, r2
 801485a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801485c:	68fa      	ldr	r2, [r7, #12]
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	0fdb      	lsrs	r3, r3, #31
 8014864:	f003 0301 	and.w	r3, r3, #1
 8014868:	b2db      	uxtb	r3, r3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d009      	beq.n	8014882 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	4413      	add	r3, r2
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4907      	ldr	r1, [pc, #28]	; (8014898 <lwip_cyclic_timer+0x60>)
 801487a:	4618      	mov	r0, r3
 801487c:	f7ff ff6e 	bl	801475c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014880:	e004      	b.n	801488c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	4904      	ldr	r1, [pc, #16]	; (8014898 <lwip_cyclic_timer+0x60>)
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff ff68 	bl	801475c <sys_timeout_abs>
}
 801488c:	bf00      	nop
 801488e:	3718      	adds	r7, #24
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	20004b28 	.word	0x20004b28
 8014898:	08014839 	.word	0x08014839

0801489c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80148a2:	2301      	movs	r3, #1
 80148a4:	607b      	str	r3, [r7, #4]
 80148a6:	e00e      	b.n	80148c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80148a8:	4a0b      	ldr	r2, [pc, #44]	; (80148d8 <sys_timeouts_init+0x3c>)
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	00db      	lsls	r3, r3, #3
 80148b4:	4a08      	ldr	r2, [pc, #32]	; (80148d8 <sys_timeouts_init+0x3c>)
 80148b6:	4413      	add	r3, r2
 80148b8:	461a      	mov	r2, r3
 80148ba:	4908      	ldr	r1, [pc, #32]	; (80148dc <sys_timeouts_init+0x40>)
 80148bc:	f000 f810 	bl	80148e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	3301      	adds	r3, #1
 80148c4:	607b      	str	r3, [r7, #4]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2b02      	cmp	r3, #2
 80148ca:	d9ed      	bls.n	80148a8 <sys_timeouts_init+0xc>
  }
}
 80148cc:	bf00      	nop
 80148ce:	bf00      	nop
 80148d0:	3708      	adds	r7, #8
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	0801c230 	.word	0x0801c230
 80148dc:	08014839 	.word	0x08014839

080148e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148f2:	d306      	bcc.n	8014902 <sys_timeout+0x22>
 80148f4:	4b0a      	ldr	r3, [pc, #40]	; (8014920 <sys_timeout+0x40>)
 80148f6:	f240 1229 	movw	r2, #297	; 0x129
 80148fa:	490a      	ldr	r1, [pc, #40]	; (8014924 <sys_timeout+0x44>)
 80148fc:	480a      	ldr	r0, [pc, #40]	; (8014928 <sys_timeout+0x48>)
 80148fe:	f003 f999 	bl	8017c34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014902:	f7f1 fd07 	bl	8006314 <sys_now>
 8014906:	4602      	mov	r2, r0
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	4413      	add	r3, r2
 801490c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	68b9      	ldr	r1, [r7, #8]
 8014912:	6978      	ldr	r0, [r7, #20]
 8014914:	f7ff ff22 	bl	801475c <sys_timeout_abs>
#endif
}
 8014918:	bf00      	nop
 801491a:	3718      	adds	r7, #24
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	0801b5d4 	.word	0x0801b5d4
 8014924:	0801b670 	.word	0x0801b670
 8014928:	0801b648 	.word	0x0801b648

0801492c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014932:	f7f1 fcef 	bl	8006314 <sys_now>
 8014936:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014938:	4b17      	ldr	r3, [pc, #92]	; (8014998 <sys_check_timeouts+0x6c>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d022      	beq.n	801498a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	0fdb      	lsrs	r3, r3, #31
 801494e:	f003 0301 	and.w	r3, r3, #1
 8014952:	b2db      	uxtb	r3, r3
 8014954:	2b00      	cmp	r3, #0
 8014956:	d11a      	bne.n	801498e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4a0e      	ldr	r2, [pc, #56]	; (8014998 <sys_check_timeouts+0x6c>)
 801495e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	689b      	ldr	r3, [r3, #8]
 8014964:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	4a0a      	ldr	r2, [pc, #40]	; (801499c <sys_check_timeouts+0x70>)
 8014972:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014974:	68b9      	ldr	r1, [r7, #8]
 8014976:	200a      	movs	r0, #10
 8014978:	f7f8 fd10 	bl	800d39c <memp_free>
    if (handler != NULL) {
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d0da      	beq.n	8014938 <sys_check_timeouts+0xc>
      handler(arg);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6838      	ldr	r0, [r7, #0]
 8014986:	4798      	blx	r3
  do {
 8014988:	e7d6      	b.n	8014938 <sys_check_timeouts+0xc>
      return;
 801498a:	bf00      	nop
 801498c:	e000      	b.n	8014990 <sys_check_timeouts+0x64>
      return;
 801498e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	20004b24 	.word	0x20004b24
 801499c:	20004b28 	.word	0x20004b28

080149a0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80149a6:	4b16      	ldr	r3, [pc, #88]	; (8014a00 <sys_timeouts_sleeptime+0x60>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d102      	bne.n	80149b4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80149ae:	f04f 33ff 	mov.w	r3, #4294967295
 80149b2:	e020      	b.n	80149f6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80149b4:	f7f1 fcae 	bl	8006314 <sys_now>
 80149b8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80149ba:	4b11      	ldr	r3, [pc, #68]	; (8014a00 <sys_timeouts_sleeptime+0x60>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	685a      	ldr	r2, [r3, #4]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	1ad3      	subs	r3, r2, r3
 80149c4:	0fdb      	lsrs	r3, r3, #31
 80149c6:	f003 0301 	and.w	r3, r3, #1
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d001      	beq.n	80149d4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80149d0:	2300      	movs	r3, #0
 80149d2:	e010      	b.n	80149f6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80149d4:	4b0a      	ldr	r3, [pc, #40]	; (8014a00 <sys_timeouts_sleeptime+0x60>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	685a      	ldr	r2, [r3, #4]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	1ad3      	subs	r3, r2, r3
 80149de:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	da06      	bge.n	80149f4 <sys_timeouts_sleeptime+0x54>
 80149e6:	4b07      	ldr	r3, [pc, #28]	; (8014a04 <sys_timeouts_sleeptime+0x64>)
 80149e8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80149ec:	4906      	ldr	r1, [pc, #24]	; (8014a08 <sys_timeouts_sleeptime+0x68>)
 80149ee:	4807      	ldr	r0, [pc, #28]	; (8014a0c <sys_timeouts_sleeptime+0x6c>)
 80149f0:	f003 f920 	bl	8017c34 <iprintf>
    return ret;
 80149f4:	683b      	ldr	r3, [r7, #0]
  }
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3708      	adds	r7, #8
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	20004b24 	.word	0x20004b24
 8014a04:	0801b5d4 	.word	0x0801b5d4
 8014a08:	0801b6a8 	.word	0x0801b6a8
 8014a0c:	0801b648 	.word	0x0801b648

08014a10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a14:	f003 f926 	bl	8017c64 <rand>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	4b01      	ldr	r3, [pc, #4]	; (8014a30 <udp_init+0x20>)
 8014a2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a2c:	bf00      	nop
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	2000001c 	.word	0x2000001c

08014a34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014a3e:	4b17      	ldr	r3, [pc, #92]	; (8014a9c <udp_new_port+0x68>)
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	1c5a      	adds	r2, r3, #1
 8014a44:	b291      	uxth	r1, r2
 8014a46:	4a15      	ldr	r2, [pc, #84]	; (8014a9c <udp_new_port+0x68>)
 8014a48:	8011      	strh	r1, [r2, #0]
 8014a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a4e:	4293      	cmp	r3, r2
 8014a50:	d103      	bne.n	8014a5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014a52:	4b12      	ldr	r3, [pc, #72]	; (8014a9c <udp_new_port+0x68>)
 8014a54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014a58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a5a:	4b11      	ldr	r3, [pc, #68]	; (8014aa0 <udp_new_port+0x6c>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	603b      	str	r3, [r7, #0]
 8014a60:	e011      	b.n	8014a86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	8a5a      	ldrh	r2, [r3, #18]
 8014a66:	4b0d      	ldr	r3, [pc, #52]	; (8014a9c <udp_new_port+0x68>)
 8014a68:	881b      	ldrh	r3, [r3, #0]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d108      	bne.n	8014a80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014a6e:	88fb      	ldrh	r3, [r7, #6]
 8014a70:	3301      	adds	r3, #1
 8014a72:	80fb      	strh	r3, [r7, #6]
 8014a74:	88fb      	ldrh	r3, [r7, #6]
 8014a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014a7a:	d3e0      	bcc.n	8014a3e <udp_new_port+0xa>
        return 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	e007      	b.n	8014a90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	603b      	str	r3, [r7, #0]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1ea      	bne.n	8014a62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014a8c:	4b03      	ldr	r3, [pc, #12]	; (8014a9c <udp_new_port+0x68>)
 8014a8e:	881b      	ldrh	r3, [r3, #0]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	370c      	adds	r7, #12
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr
 8014a9c:	2000001c 	.word	0x2000001c
 8014aa0:	2000b72c 	.word	0x2000b72c

08014aa4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d105      	bne.n	8014ac4 <udp_input_local_match+0x20>
 8014ab8:	4b27      	ldr	r3, [pc, #156]	; (8014b58 <udp_input_local_match+0xb4>)
 8014aba:	2287      	movs	r2, #135	; 0x87
 8014abc:	4927      	ldr	r1, [pc, #156]	; (8014b5c <udp_input_local_match+0xb8>)
 8014abe:	4828      	ldr	r0, [pc, #160]	; (8014b60 <udp_input_local_match+0xbc>)
 8014ac0:	f003 f8b8 	bl	8017c34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d105      	bne.n	8014ad6 <udp_input_local_match+0x32>
 8014aca:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <udp_input_local_match+0xb4>)
 8014acc:	2288      	movs	r2, #136	; 0x88
 8014ace:	4925      	ldr	r1, [pc, #148]	; (8014b64 <udp_input_local_match+0xc0>)
 8014ad0:	4823      	ldr	r0, [pc, #140]	; (8014b60 <udp_input_local_match+0xbc>)
 8014ad2:	f003 f8af 	bl	8017c34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	7a1b      	ldrb	r3, [r3, #8]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00b      	beq.n	8014af6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	7a1a      	ldrb	r2, [r3, #8]
 8014ae2:	4b21      	ldr	r3, [pc, #132]	; (8014b68 <udp_input_local_match+0xc4>)
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014aea:	3301      	adds	r3, #1
 8014aec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d001      	beq.n	8014af6 <udp_input_local_match+0x52>
    return 0;
 8014af2:	2300      	movs	r3, #0
 8014af4:	e02b      	b.n	8014b4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014af6:	79fb      	ldrb	r3, [r7, #7]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d018      	beq.n	8014b2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d013      	beq.n	8014b2a <udp_input_local_match+0x86>
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d00f      	beq.n	8014b2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014b0a:	4b17      	ldr	r3, [pc, #92]	; (8014b68 <udp_input_local_match+0xc4>)
 8014b0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b12:	d00a      	beq.n	8014b2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	4b13      	ldr	r3, [pc, #76]	; (8014b68 <udp_input_local_match+0xc4>)
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	405a      	eors	r2, r3
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	3308      	adds	r3, #8
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d110      	bne.n	8014b4c <udp_input_local_match+0xa8>
          return 1;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e00f      	b.n	8014b4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d009      	beq.n	8014b48 <udp_input_local_match+0xa4>
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d005      	beq.n	8014b48 <udp_input_local_match+0xa4>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	4b09      	ldr	r3, [pc, #36]	; (8014b68 <udp_input_local_match+0xc4>)
 8014b42:	695b      	ldr	r3, [r3, #20]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d101      	bne.n	8014b4c <udp_input_local_match+0xa8>
        return 1;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e000      	b.n	8014b4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014b4c:	2300      	movs	r3, #0
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3710      	adds	r7, #16
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	0801b6bc 	.word	0x0801b6bc
 8014b5c:	0801b6ec 	.word	0x0801b6ec
 8014b60:	0801b710 	.word	0x0801b710
 8014b64:	0801b738 	.word	0x0801b738
 8014b68:	20008000 	.word	0x20008000

08014b6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014b6c:	b590      	push	{r4, r7, lr}
 8014b6e:	b08d      	sub	sp, #52	; 0x34
 8014b70:	af02      	add	r7, sp, #8
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d105      	bne.n	8014b8c <udp_input+0x20>
 8014b80:	4b7c      	ldr	r3, [pc, #496]	; (8014d74 <udp_input+0x208>)
 8014b82:	22cf      	movs	r2, #207	; 0xcf
 8014b84:	497c      	ldr	r1, [pc, #496]	; (8014d78 <udp_input+0x20c>)
 8014b86:	487d      	ldr	r0, [pc, #500]	; (8014d7c <udp_input+0x210>)
 8014b88:	f003 f854 	bl	8017c34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d105      	bne.n	8014b9e <udp_input+0x32>
 8014b92:	4b78      	ldr	r3, [pc, #480]	; (8014d74 <udp_input+0x208>)
 8014b94:	22d0      	movs	r2, #208	; 0xd0
 8014b96:	497a      	ldr	r1, [pc, #488]	; (8014d80 <udp_input+0x214>)
 8014b98:	4878      	ldr	r0, [pc, #480]	; (8014d7c <udp_input+0x210>)
 8014b9a:	f003 f84b 	bl	8017c34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	895b      	ldrh	r3, [r3, #10]
 8014ba2:	2b07      	cmp	r3, #7
 8014ba4:	d803      	bhi.n	8014bae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f7f9 fa9c 	bl	800e0e4 <pbuf_free>
    goto end;
 8014bac:	e0de      	b.n	8014d6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014bb4:	4b73      	ldr	r3, [pc, #460]	; (8014d84 <udp_input+0x218>)
 8014bb6:	695b      	ldr	r3, [r3, #20]
 8014bb8:	4a72      	ldr	r2, [pc, #456]	; (8014d84 <udp_input+0x218>)
 8014bba:	6812      	ldr	r2, [r2, #0]
 8014bbc:	4611      	mov	r1, r2
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f001 fd96 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	881b      	ldrh	r3, [r3, #0]
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7f7 fedc 	bl	800c98c <lwip_htons>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	885b      	ldrh	r3, [r3, #2]
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7f7 fed4 	bl	800c98c <lwip_htons>
 8014be4:	4603      	mov	r3, r0
 8014be6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014be8:	2300      	movs	r3, #0
 8014bea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014bec:	2300      	movs	r3, #0
 8014bee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bf4:	4b64      	ldr	r3, [pc, #400]	; (8014d88 <udp_input+0x21c>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8014bfa:	e054      	b.n	8014ca6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfe:	8a5b      	ldrh	r3, [r3, #18]
 8014c00:	89fa      	ldrh	r2, [r7, #14]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d14a      	bne.n	8014c9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014c06:	7cfb      	ldrb	r3, [r7, #19]
 8014c08:	461a      	mov	r2, r3
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c0e:	f7ff ff49 	bl	8014aa4 <udp_input_local_match>
 8014c12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d041      	beq.n	8014c9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	7c1b      	ldrb	r3, [r3, #16]
 8014c1c:	f003 0304 	and.w	r3, r3, #4
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d11d      	bne.n	8014c60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d102      	bne.n	8014c30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	61fb      	str	r3, [r7, #28]
 8014c2e:	e017      	b.n	8014c60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014c30:	7cfb      	ldrb	r3, [r7, #19]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d014      	beq.n	8014c60 <udp_input+0xf4>
 8014c36:	4b53      	ldr	r3, [pc, #332]	; (8014d84 <udp_input+0x218>)
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c3e:	d10f      	bne.n	8014c60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	3304      	adds	r3, #4
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	d008      	beq.n	8014c60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	3304      	adds	r3, #4
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d101      	bne.n	8014c60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c62:	8a9b      	ldrh	r3, [r3, #20]
 8014c64:	8a3a      	ldrh	r2, [r7, #16]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d118      	bne.n	8014c9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d005      	beq.n	8014c7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c74:	685a      	ldr	r2, [r3, #4]
 8014c76:	4b43      	ldr	r3, [pc, #268]	; (8014d84 <udp_input+0x218>)
 8014c78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d10e      	bne.n	8014c9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014c7e:	6a3b      	ldr	r3, [r7, #32]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d014      	beq.n	8014cae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c86:	68da      	ldr	r2, [r3, #12]
 8014c88:	6a3b      	ldr	r3, [r7, #32]
 8014c8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014c8c:	4b3e      	ldr	r3, [pc, #248]	; (8014d88 <udp_input+0x21c>)
 8014c8e:	681a      	ldr	r2, [r3, #0]
 8014c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014c94:	4a3c      	ldr	r2, [pc, #240]	; (8014d88 <udp_input+0x21c>)
 8014c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014c9a:	e008      	b.n	8014cae <udp_input+0x142>
      }
    }

    prev = pcb;
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8014ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d1a7      	bne.n	8014bfc <udp_input+0x90>
 8014cac:	e000      	b.n	8014cb0 <udp_input+0x144>
        break;
 8014cae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d101      	bne.n	8014cba <udp_input+0x14e>
    pcb = uncon_pcb;
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <udp_input+0x15a>
    for_us = 1;
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	76fb      	strb	r3, [r7, #27]
 8014cc4:	e00a      	b.n	8014cdc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	4b2d      	ldr	r3, [pc, #180]	; (8014d84 <udp_input+0x218>)
 8014cce:	695b      	ldr	r3, [r3, #20]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	bf0c      	ite	eq
 8014cd4:	2301      	moveq	r3, #1
 8014cd6:	2300      	movne	r3, #0
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014cdc:	7efb      	ldrb	r3, [r7, #27]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d041      	beq.n	8014d66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014ce2:	2108      	movs	r1, #8
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f7f9 f977 	bl	800dfd8 <pbuf_remove_header>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00a      	beq.n	8014d06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014cf0:	4b20      	ldr	r3, [pc, #128]	; (8014d74 <udp_input+0x208>)
 8014cf2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014cf6:	4925      	ldr	r1, [pc, #148]	; (8014d8c <udp_input+0x220>)
 8014cf8:	4820      	ldr	r0, [pc, #128]	; (8014d7c <udp_input+0x210>)
 8014cfa:	f002 ff9b 	bl	8017c34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7f9 f9f0 	bl	800e0e4 <pbuf_free>
      goto end;
 8014d04:	e032      	b.n	8014d6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d012      	beq.n	8014d32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0e:	699b      	ldr	r3, [r3, #24]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00a      	beq.n	8014d2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	699c      	ldr	r4, [r3, #24]
 8014d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1a:	69d8      	ldr	r0, [r3, #28]
 8014d1c:	8a3b      	ldrh	r3, [r7, #16]
 8014d1e:	9300      	str	r3, [sp, #0]
 8014d20:	4b1b      	ldr	r3, [pc, #108]	; (8014d90 <udp_input+0x224>)
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014d28:	e021      	b.n	8014d6e <udp_input+0x202>
        pbuf_free(p);
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f7f9 f9da 	bl	800e0e4 <pbuf_free>
        goto end;
 8014d30:	e01c      	b.n	8014d6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014d32:	7cfb      	ldrb	r3, [r7, #19]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d112      	bne.n	8014d5e <udp_input+0x1f2>
 8014d38:	4b12      	ldr	r3, [pc, #72]	; (8014d84 <udp_input+0x218>)
 8014d3a:	695b      	ldr	r3, [r3, #20]
 8014d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d40:	2be0      	cmp	r3, #224	; 0xe0
 8014d42:	d00c      	beq.n	8014d5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014d44:	4b0f      	ldr	r3, [pc, #60]	; (8014d84 <udp_input+0x218>)
 8014d46:	899b      	ldrh	r3, [r3, #12]
 8014d48:	3308      	adds	r3, #8
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	b21b      	sxth	r3, r3
 8014d4e:	4619      	mov	r1, r3
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f7f9 f9b4 	bl	800e0be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014d56:	2103      	movs	r1, #3
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f001 f9a9 	bl	80160b0 <icmp_dest_unreach>
      pbuf_free(p);
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7f9 f9c0 	bl	800e0e4 <pbuf_free>
  return;
 8014d64:	e003      	b.n	8014d6e <udp_input+0x202>
    pbuf_free(p);
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7f9 f9bc 	bl	800e0e4 <pbuf_free>
  return;
 8014d6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014d6e:	372c      	adds	r7, #44	; 0x2c
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd90      	pop	{r4, r7, pc}
 8014d74:	0801b6bc 	.word	0x0801b6bc
 8014d78:	0801b760 	.word	0x0801b760
 8014d7c:	0801b710 	.word	0x0801b710
 8014d80:	0801b778 	.word	0x0801b778
 8014d84:	20008000 	.word	0x20008000
 8014d88:	2000b72c 	.word	0x2000b72c
 8014d8c:	0801b794 	.word	0x0801b794
 8014d90:	20008010 	.word	0x20008010

08014d94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d101      	bne.n	8014dac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014da8:	4b39      	ldr	r3, [pc, #228]	; (8014e90 <udp_bind+0xfc>)
 8014daa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d109      	bne.n	8014dc6 <udp_bind+0x32>
 8014db2:	4b38      	ldr	r3, [pc, #224]	; (8014e94 <udp_bind+0x100>)
 8014db4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014db8:	4937      	ldr	r1, [pc, #220]	; (8014e98 <udp_bind+0x104>)
 8014dba:	4838      	ldr	r0, [pc, #224]	; (8014e9c <udp_bind+0x108>)
 8014dbc:	f002 ff3a 	bl	8017c34 <iprintf>
 8014dc0:	f06f 030f 	mvn.w	r3, #15
 8014dc4:	e060      	b.n	8014e88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014dca:	4b35      	ldr	r3, [pc, #212]	; (8014ea0 <udp_bind+0x10c>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	617b      	str	r3, [r7, #20]
 8014dd0:	e009      	b.n	8014de6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014dd2:	68fa      	ldr	r2, [r7, #12]
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d102      	bne.n	8014de0 <udp_bind+0x4c>
      rebind = 1;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8014dde:	e005      	b.n	8014dec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	617b      	str	r3, [r7, #20]
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d1f2      	bne.n	8014dd2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014dec:	88fb      	ldrh	r3, [r7, #6]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d109      	bne.n	8014e06 <udp_bind+0x72>
    port = udp_new_port();
 8014df2:	f7ff fe1f 	bl	8014a34 <udp_new_port>
 8014df6:	4603      	mov	r3, r0
 8014df8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014dfa:	88fb      	ldrh	r3, [r7, #6]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d12c      	bne.n	8014e5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014e00:	f06f 0307 	mvn.w	r3, #7
 8014e04:	e040      	b.n	8014e88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e06:	4b26      	ldr	r3, [pc, #152]	; (8014ea0 <udp_bind+0x10c>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	617b      	str	r3, [r7, #20]
 8014e0c:	e022      	b.n	8014e54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014e0e:	68fa      	ldr	r2, [r7, #12]
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d01b      	beq.n	8014e4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	8a5b      	ldrh	r3, [r3, #18]
 8014e1a:	88fa      	ldrh	r2, [r7, #6]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d116      	bne.n	8014e4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d00d      	beq.n	8014e48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d00a      	beq.n	8014e48 <udp_bind+0xb4>
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d006      	beq.n	8014e48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d003      	beq.n	8014e48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d102      	bne.n	8014e4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014e48:	f06f 0307 	mvn.w	r3, #7
 8014e4c:	e01c      	b.n	8014e88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	68db      	ldr	r3, [r3, #12]
 8014e52:	617b      	str	r3, [r7, #20]
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1d9      	bne.n	8014e0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d002      	beq.n	8014e66 <udp_bind+0xd2>
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	e000      	b.n	8014e68 <udp_bind+0xd4>
 8014e66:	2300      	movs	r3, #0
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	88fa      	ldrh	r2, [r7, #6]
 8014e70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014e72:	7cfb      	ldrb	r3, [r7, #19]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014e78:	4b09      	ldr	r3, [pc, #36]	; (8014ea0 <udp_bind+0x10c>)
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014e80:	4a07      	ldr	r2, [pc, #28]	; (8014ea0 <udp_bind+0x10c>)
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014e86:	2300      	movs	r3, #0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3718      	adds	r7, #24
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	0801c248 	.word	0x0801c248
 8014e94:	0801b6bc 	.word	0x0801b6bc
 8014e98:	0801b984 	.word	0x0801b984
 8014e9c:	0801b710 	.word	0x0801b710
 8014ea0:	2000b72c 	.word	0x2000b72c

08014ea4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d107      	bne.n	8014ec6 <udp_recv+0x22>
 8014eb6:	4b08      	ldr	r3, [pc, #32]	; (8014ed8 <udp_recv+0x34>)
 8014eb8:	f240 428a 	movw	r2, #1162	; 0x48a
 8014ebc:	4907      	ldr	r1, [pc, #28]	; (8014edc <udp_recv+0x38>)
 8014ebe:	4808      	ldr	r0, [pc, #32]	; (8014ee0 <udp_recv+0x3c>)
 8014ec0:	f002 feb8 	bl	8017c34 <iprintf>
 8014ec4:	e005      	b.n	8014ed2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	68ba      	ldr	r2, [r7, #8]
 8014eca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	61da      	str	r2, [r3, #28]
}
 8014ed2:	3710      	adds	r7, #16
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	0801b6bc 	.word	0x0801b6bc
 8014edc:	0801b9f0 	.word	0x0801b9f0
 8014ee0:	0801b710 	.word	0x0801b710

08014ee4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d107      	bne.n	8014f02 <udp_remove+0x1e>
 8014ef2:	4b19      	ldr	r3, [pc, #100]	; (8014f58 <udp_remove+0x74>)
 8014ef4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014ef8:	4918      	ldr	r1, [pc, #96]	; (8014f5c <udp_remove+0x78>)
 8014efa:	4819      	ldr	r0, [pc, #100]	; (8014f60 <udp_remove+0x7c>)
 8014efc:	f002 fe9a 	bl	8017c34 <iprintf>
 8014f00:	e026      	b.n	8014f50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014f02:	4b18      	ldr	r3, [pc, #96]	; (8014f64 <udp_remove+0x80>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d105      	bne.n	8014f18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014f0c:	4b15      	ldr	r3, [pc, #84]	; (8014f64 <udp_remove+0x80>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	68db      	ldr	r3, [r3, #12]
 8014f12:	4a14      	ldr	r2, [pc, #80]	; (8014f64 <udp_remove+0x80>)
 8014f14:	6013      	str	r3, [r2, #0]
 8014f16:	e017      	b.n	8014f48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f18:	4b12      	ldr	r3, [pc, #72]	; (8014f64 <udp_remove+0x80>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	60fb      	str	r3, [r7, #12]
 8014f1e:	e010      	b.n	8014f42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d009      	beq.n	8014f3c <udp_remove+0x58>
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	68db      	ldr	r3, [r3, #12]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d104      	bne.n	8014f3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	68da      	ldr	r2, [r3, #12]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	60da      	str	r2, [r3, #12]
        break;
 8014f3a:	e005      	b.n	8014f48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	68db      	ldr	r3, [r3, #12]
 8014f40:	60fb      	str	r3, [r7, #12]
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d1eb      	bne.n	8014f20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014f48:	6879      	ldr	r1, [r7, #4]
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	f7f8 fa26 	bl	800d39c <memp_free>
}
 8014f50:	3710      	adds	r7, #16
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}
 8014f56:	bf00      	nop
 8014f58:	0801b6bc 	.word	0x0801b6bc
 8014f5c:	0801ba08 	.word	0x0801ba08
 8014f60:	0801b710 	.word	0x0801b710
 8014f64:	2000b72c 	.word	0x2000b72c

08014f68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014f6e:	2000      	movs	r0, #0
 8014f70:	f7f8 f9c2 	bl	800d2f8 <memp_malloc>
 8014f74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d007      	beq.n	8014f8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014f7c:	2220      	movs	r2, #32
 8014f7e:	2100      	movs	r1, #0
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f002 fdf4 	bl	8017b6e <memset>
    pcb->ttl = UDP_TTL;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	22ff      	movs	r2, #255	; 0xff
 8014f8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014f8c:	687b      	ldr	r3, [r7, #4]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3708      	adds	r7, #8
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}

08014f96 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014f96:	b580      	push	{r7, lr}
 8014f98:	b084      	sub	sp, #16
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014fa0:	f7ff ffe2 	bl	8014f68 <udp_new>
 8014fa4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3710      	adds	r7, #16
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d01e      	beq.n	8014ffe <udp_netif_ip_addr_changed+0x4e>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d01a      	beq.n	8014ffe <udp_netif_ip_addr_changed+0x4e>
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d017      	beq.n	8014ffe <udp_netif_ip_addr_changed+0x4e>
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d013      	beq.n	8014ffe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014fd6:	4b0d      	ldr	r3, [pc, #52]	; (801500c <udp_netif_ip_addr_changed+0x5c>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	60fb      	str	r3, [r7, #12]
 8014fdc:	e00c      	b.n	8014ff8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	681a      	ldr	r2, [r3, #0]
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d103      	bne.n	8014ff2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	60fb      	str	r3, [r7, #12]
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d1ef      	bne.n	8014fde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014ffe:	bf00      	nop
 8015000:	3714      	adds	r7, #20
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	2000b72c 	.word	0x2000b72c

08015010 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015018:	4915      	ldr	r1, [pc, #84]	; (8015070 <etharp_free_entry+0x60>)
 801501a:	687a      	ldr	r2, [r7, #4]
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d013      	beq.n	8015054 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801502c:	4910      	ldr	r1, [pc, #64]	; (8015070 <etharp_free_entry+0x60>)
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	440b      	add	r3, r1
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	4618      	mov	r0, r3
 801503e:	f7f9 f851 	bl	800e0e4 <pbuf_free>
    arp_table[i].q = NULL;
 8015042:	490b      	ldr	r1, [pc, #44]	; (8015070 <etharp_free_entry+0x60>)
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	4613      	mov	r3, r2
 8015048:	005b      	lsls	r3, r3, #1
 801504a:	4413      	add	r3, r2
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	440b      	add	r3, r1
 8015050:	2200      	movs	r2, #0
 8015052:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015054:	4906      	ldr	r1, [pc, #24]	; (8015070 <etharp_free_entry+0x60>)
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	4613      	mov	r3, r2
 801505a:	005b      	lsls	r3, r3, #1
 801505c:	4413      	add	r3, r2
 801505e:	00db      	lsls	r3, r3, #3
 8015060:	440b      	add	r3, r1
 8015062:	3314      	adds	r3, #20
 8015064:	2200      	movs	r2, #0
 8015066:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015068:	bf00      	nop
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	20004b30 	.word	0x20004b30

08015074 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801507a:	2300      	movs	r3, #0
 801507c:	607b      	str	r3, [r7, #4]
 801507e:	e096      	b.n	80151ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015080:	494f      	ldr	r1, [pc, #316]	; (80151c0 <etharp_tmr+0x14c>)
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	4613      	mov	r3, r2
 8015086:	005b      	lsls	r3, r3, #1
 8015088:	4413      	add	r3, r2
 801508a:	00db      	lsls	r3, r3, #3
 801508c:	440b      	add	r3, r1
 801508e:	3314      	adds	r3, #20
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015094:	78fb      	ldrb	r3, [r7, #3]
 8015096:	2b00      	cmp	r3, #0
 8015098:	f000 8086 	beq.w	80151a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801509c:	4948      	ldr	r1, [pc, #288]	; (80151c0 <etharp_tmr+0x14c>)
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	4613      	mov	r3, r2
 80150a2:	005b      	lsls	r3, r3, #1
 80150a4:	4413      	add	r3, r2
 80150a6:	00db      	lsls	r3, r3, #3
 80150a8:	440b      	add	r3, r1
 80150aa:	3312      	adds	r3, #18
 80150ac:	881b      	ldrh	r3, [r3, #0]
 80150ae:	3301      	adds	r3, #1
 80150b0:	b298      	uxth	r0, r3
 80150b2:	4943      	ldr	r1, [pc, #268]	; (80151c0 <etharp_tmr+0x14c>)
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	4613      	mov	r3, r2
 80150b8:	005b      	lsls	r3, r3, #1
 80150ba:	4413      	add	r3, r2
 80150bc:	00db      	lsls	r3, r3, #3
 80150be:	440b      	add	r3, r1
 80150c0:	3312      	adds	r3, #18
 80150c2:	4602      	mov	r2, r0
 80150c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80150c6:	493e      	ldr	r1, [pc, #248]	; (80151c0 <etharp_tmr+0x14c>)
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	4613      	mov	r3, r2
 80150cc:	005b      	lsls	r3, r3, #1
 80150ce:	4413      	add	r3, r2
 80150d0:	00db      	lsls	r3, r3, #3
 80150d2:	440b      	add	r3, r1
 80150d4:	3312      	adds	r3, #18
 80150d6:	881b      	ldrh	r3, [r3, #0]
 80150d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80150dc:	d215      	bcs.n	801510a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80150de:	4938      	ldr	r1, [pc, #224]	; (80151c0 <etharp_tmr+0x14c>)
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	440b      	add	r3, r1
 80150ec:	3314      	adds	r3, #20
 80150ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d10e      	bne.n	8015112 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80150f4:	4932      	ldr	r1, [pc, #200]	; (80151c0 <etharp_tmr+0x14c>)
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	4613      	mov	r3, r2
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	4413      	add	r3, r2
 80150fe:	00db      	lsls	r3, r3, #3
 8015100:	440b      	add	r3, r1
 8015102:	3312      	adds	r3, #18
 8015104:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015106:	2b04      	cmp	r3, #4
 8015108:	d903      	bls.n	8015112 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff ff80 	bl	8015010 <etharp_free_entry>
 8015110:	e04a      	b.n	80151a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015112:	492b      	ldr	r1, [pc, #172]	; (80151c0 <etharp_tmr+0x14c>)
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	4613      	mov	r3, r2
 8015118:	005b      	lsls	r3, r3, #1
 801511a:	4413      	add	r3, r2
 801511c:	00db      	lsls	r3, r3, #3
 801511e:	440b      	add	r3, r1
 8015120:	3314      	adds	r3, #20
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	2b03      	cmp	r3, #3
 8015126:	d10a      	bne.n	801513e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015128:	4925      	ldr	r1, [pc, #148]	; (80151c0 <etharp_tmr+0x14c>)
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	4613      	mov	r3, r2
 801512e:	005b      	lsls	r3, r3, #1
 8015130:	4413      	add	r3, r2
 8015132:	00db      	lsls	r3, r3, #3
 8015134:	440b      	add	r3, r1
 8015136:	3314      	adds	r3, #20
 8015138:	2204      	movs	r2, #4
 801513a:	701a      	strb	r2, [r3, #0]
 801513c:	e034      	b.n	80151a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801513e:	4920      	ldr	r1, [pc, #128]	; (80151c0 <etharp_tmr+0x14c>)
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	4613      	mov	r3, r2
 8015144:	005b      	lsls	r3, r3, #1
 8015146:	4413      	add	r3, r2
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	440b      	add	r3, r1
 801514c:	3314      	adds	r3, #20
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	2b04      	cmp	r3, #4
 8015152:	d10a      	bne.n	801516a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015154:	491a      	ldr	r1, [pc, #104]	; (80151c0 <etharp_tmr+0x14c>)
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	4613      	mov	r3, r2
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	3314      	adds	r3, #20
 8015164:	2202      	movs	r2, #2
 8015166:	701a      	strb	r2, [r3, #0]
 8015168:	e01e      	b.n	80151a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801516a:	4915      	ldr	r1, [pc, #84]	; (80151c0 <etharp_tmr+0x14c>)
 801516c:	687a      	ldr	r2, [r7, #4]
 801516e:	4613      	mov	r3, r2
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	4413      	add	r3, r2
 8015174:	00db      	lsls	r3, r3, #3
 8015176:	440b      	add	r3, r1
 8015178:	3314      	adds	r3, #20
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	2b01      	cmp	r3, #1
 801517e:	d113      	bne.n	80151a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015180:	490f      	ldr	r1, [pc, #60]	; (80151c0 <etharp_tmr+0x14c>)
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	440b      	add	r3, r1
 801518e:	3308      	adds	r3, #8
 8015190:	6818      	ldr	r0, [r3, #0]
 8015192:	687a      	ldr	r2, [r7, #4]
 8015194:	4613      	mov	r3, r2
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	4413      	add	r3, r2
 801519a:	00db      	lsls	r3, r3, #3
 801519c:	4a08      	ldr	r2, [pc, #32]	; (80151c0 <etharp_tmr+0x14c>)
 801519e:	4413      	add	r3, r2
 80151a0:	3304      	adds	r3, #4
 80151a2:	4619      	mov	r1, r3
 80151a4:	f000 fe6e 	bl	8015e84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	3301      	adds	r3, #1
 80151ac:	607b      	str	r3, [r7, #4]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2b09      	cmp	r3, #9
 80151b2:	f77f af65 	ble.w	8015080 <etharp_tmr+0xc>
      }
    }
  }
}
 80151b6:	bf00      	nop
 80151b8:	bf00      	nop
 80151ba:	3708      	adds	r7, #8
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	20004b30 	.word	0x20004b30

080151c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b08a      	sub	sp, #40	; 0x28
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	460b      	mov	r3, r1
 80151ce:	607a      	str	r2, [r7, #4]
 80151d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80151d2:	230a      	movs	r3, #10
 80151d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80151d6:	230a      	movs	r3, #10
 80151d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80151da:	230a      	movs	r3, #10
 80151dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80151de:	2300      	movs	r3, #0
 80151e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80151e2:	230a      	movs	r3, #10
 80151e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80151e6:	2300      	movs	r3, #0
 80151e8:	83bb      	strh	r3, [r7, #28]
 80151ea:	2300      	movs	r3, #0
 80151ec:	837b      	strh	r3, [r7, #26]
 80151ee:	2300      	movs	r3, #0
 80151f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151f2:	2300      	movs	r3, #0
 80151f4:	843b      	strh	r3, [r7, #32]
 80151f6:	e0ae      	b.n	8015356 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80151f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151fc:	49a6      	ldr	r1, [pc, #664]	; (8015498 <etharp_find_entry+0x2d4>)
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	440b      	add	r3, r1
 8015208:	3314      	adds	r3, #20
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801520e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015212:	2b0a      	cmp	r3, #10
 8015214:	d105      	bne.n	8015222 <etharp_find_entry+0x5e>
 8015216:	7dfb      	ldrb	r3, [r7, #23]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d102      	bne.n	8015222 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801521c:	8c3b      	ldrh	r3, [r7, #32]
 801521e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015220:	e095      	b.n	801534e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015222:	7dfb      	ldrb	r3, [r7, #23]
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 8092 	beq.w	801534e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801522a:	7dfb      	ldrb	r3, [r7, #23]
 801522c:	2b01      	cmp	r3, #1
 801522e:	d009      	beq.n	8015244 <etharp_find_entry+0x80>
 8015230:	7dfb      	ldrb	r3, [r7, #23]
 8015232:	2b01      	cmp	r3, #1
 8015234:	d806      	bhi.n	8015244 <etharp_find_entry+0x80>
 8015236:	4b99      	ldr	r3, [pc, #612]	; (801549c <etharp_find_entry+0x2d8>)
 8015238:	f240 1223 	movw	r2, #291	; 0x123
 801523c:	4998      	ldr	r1, [pc, #608]	; (80154a0 <etharp_find_entry+0x2dc>)
 801523e:	4899      	ldr	r0, [pc, #612]	; (80154a4 <etharp_find_entry+0x2e0>)
 8015240:	f002 fcf8 	bl	8017c34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d020      	beq.n	801528c <etharp_find_entry+0xc8>
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	6819      	ldr	r1, [r3, #0]
 801524e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015252:	4891      	ldr	r0, [pc, #580]	; (8015498 <etharp_find_entry+0x2d4>)
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	4403      	add	r3, r0
 801525e:	3304      	adds	r3, #4
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	4299      	cmp	r1, r3
 8015264:	d112      	bne.n	801528c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d00c      	beq.n	8015286 <etharp_find_entry+0xc2>
 801526c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015270:	4989      	ldr	r1, [pc, #548]	; (8015498 <etharp_find_entry+0x2d4>)
 8015272:	4613      	mov	r3, r2
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	00db      	lsls	r3, r3, #3
 801527a:	440b      	add	r3, r1
 801527c:	3308      	adds	r3, #8
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	429a      	cmp	r2, r3
 8015284:	d102      	bne.n	801528c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015286:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801528a:	e100      	b.n	801548e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801528c:	7dfb      	ldrb	r3, [r7, #23]
 801528e:	2b01      	cmp	r3, #1
 8015290:	d140      	bne.n	8015314 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015296:	4980      	ldr	r1, [pc, #512]	; (8015498 <etharp_find_entry+0x2d4>)
 8015298:	4613      	mov	r3, r2
 801529a:	005b      	lsls	r3, r3, #1
 801529c:	4413      	add	r3, r2
 801529e:	00db      	lsls	r3, r3, #3
 80152a0:	440b      	add	r3, r1
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d01a      	beq.n	80152de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80152a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ac:	497a      	ldr	r1, [pc, #488]	; (8015498 <etharp_find_entry+0x2d4>)
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	440b      	add	r3, r1
 80152b8:	3312      	adds	r3, #18
 80152ba:	881b      	ldrh	r3, [r3, #0]
 80152bc:	8bba      	ldrh	r2, [r7, #28]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d845      	bhi.n	801534e <etharp_find_entry+0x18a>
            old_queue = i;
 80152c2:	8c3b      	ldrh	r3, [r7, #32]
 80152c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80152c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ca:	4973      	ldr	r1, [pc, #460]	; (8015498 <etharp_find_entry+0x2d4>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4413      	add	r3, r2
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	440b      	add	r3, r1
 80152d6:	3312      	adds	r3, #18
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	83bb      	strh	r3, [r7, #28]
 80152dc:	e037      	b.n	801534e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80152de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152e2:	496d      	ldr	r1, [pc, #436]	; (8015498 <etharp_find_entry+0x2d4>)
 80152e4:	4613      	mov	r3, r2
 80152e6:	005b      	lsls	r3, r3, #1
 80152e8:	4413      	add	r3, r2
 80152ea:	00db      	lsls	r3, r3, #3
 80152ec:	440b      	add	r3, r1
 80152ee:	3312      	adds	r3, #18
 80152f0:	881b      	ldrh	r3, [r3, #0]
 80152f2:	8b7a      	ldrh	r2, [r7, #26]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d82a      	bhi.n	801534e <etharp_find_entry+0x18a>
            old_pending = i;
 80152f8:	8c3b      	ldrh	r3, [r7, #32]
 80152fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80152fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015300:	4965      	ldr	r1, [pc, #404]	; (8015498 <etharp_find_entry+0x2d4>)
 8015302:	4613      	mov	r3, r2
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	4413      	add	r3, r2
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	440b      	add	r3, r1
 801530c:	3312      	adds	r3, #18
 801530e:	881b      	ldrh	r3, [r3, #0]
 8015310:	837b      	strh	r3, [r7, #26]
 8015312:	e01c      	b.n	801534e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015314:	7dfb      	ldrb	r3, [r7, #23]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d919      	bls.n	801534e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801531a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801531e:	495e      	ldr	r1, [pc, #376]	; (8015498 <etharp_find_entry+0x2d4>)
 8015320:	4613      	mov	r3, r2
 8015322:	005b      	lsls	r3, r3, #1
 8015324:	4413      	add	r3, r2
 8015326:	00db      	lsls	r3, r3, #3
 8015328:	440b      	add	r3, r1
 801532a:	3312      	adds	r3, #18
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	8b3a      	ldrh	r2, [r7, #24]
 8015330:	429a      	cmp	r2, r3
 8015332:	d80c      	bhi.n	801534e <etharp_find_entry+0x18a>
            old_stable = i;
 8015334:	8c3b      	ldrh	r3, [r7, #32]
 8015336:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015338:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801533c:	4956      	ldr	r1, [pc, #344]	; (8015498 <etharp_find_entry+0x2d4>)
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3312      	adds	r3, #18
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801534e:	8c3b      	ldrh	r3, [r7, #32]
 8015350:	3301      	adds	r3, #1
 8015352:	b29b      	uxth	r3, r3
 8015354:	843b      	strh	r3, [r7, #32]
 8015356:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801535a:	2b09      	cmp	r3, #9
 801535c:	f77f af4c 	ble.w	80151f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015360:	7afb      	ldrb	r3, [r7, #11]
 8015362:	f003 0302 	and.w	r3, r3, #2
 8015366:	2b00      	cmp	r3, #0
 8015368:	d108      	bne.n	801537c <etharp_find_entry+0x1b8>
 801536a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801536e:	2b0a      	cmp	r3, #10
 8015370:	d107      	bne.n	8015382 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015372:	7afb      	ldrb	r3, [r7, #11]
 8015374:	f003 0301 	and.w	r3, r3, #1
 8015378:	2b00      	cmp	r3, #0
 801537a:	d102      	bne.n	8015382 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801537c:	f04f 33ff 	mov.w	r3, #4294967295
 8015380:	e085      	b.n	801548e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015386:	2b09      	cmp	r3, #9
 8015388:	dc02      	bgt.n	8015390 <etharp_find_entry+0x1cc>
    i = empty;
 801538a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801538c:	843b      	strh	r3, [r7, #32]
 801538e:	e039      	b.n	8015404 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015390:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015394:	2b09      	cmp	r3, #9
 8015396:	dc14      	bgt.n	80153c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801539a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801539c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153a0:	493d      	ldr	r1, [pc, #244]	; (8015498 <etharp_find_entry+0x2d4>)
 80153a2:	4613      	mov	r3, r2
 80153a4:	005b      	lsls	r3, r3, #1
 80153a6:	4413      	add	r3, r2
 80153a8:	00db      	lsls	r3, r3, #3
 80153aa:	440b      	add	r3, r1
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d018      	beq.n	80153e4 <etharp_find_entry+0x220>
 80153b2:	4b3a      	ldr	r3, [pc, #232]	; (801549c <etharp_find_entry+0x2d8>)
 80153b4:	f240 126d 	movw	r2, #365	; 0x16d
 80153b8:	493b      	ldr	r1, [pc, #236]	; (80154a8 <etharp_find_entry+0x2e4>)
 80153ba:	483a      	ldr	r0, [pc, #232]	; (80154a4 <etharp_find_entry+0x2e0>)
 80153bc:	f002 fc3a 	bl	8017c34 <iprintf>
 80153c0:	e010      	b.n	80153e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80153c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80153c6:	2b09      	cmp	r3, #9
 80153c8:	dc02      	bgt.n	80153d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80153ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80153cc:	843b      	strh	r3, [r7, #32]
 80153ce:	e009      	b.n	80153e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80153d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80153d4:	2b09      	cmp	r3, #9
 80153d6:	dc02      	bgt.n	80153de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80153d8:	8bfb      	ldrh	r3, [r7, #30]
 80153da:	843b      	strh	r3, [r7, #32]
 80153dc:	e002      	b.n	80153e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80153de:	f04f 33ff 	mov.w	r3, #4294967295
 80153e2:	e054      	b.n	801548e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80153e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153e8:	2b09      	cmp	r3, #9
 80153ea:	dd06      	ble.n	80153fa <etharp_find_entry+0x236>
 80153ec:	4b2b      	ldr	r3, [pc, #172]	; (801549c <etharp_find_entry+0x2d8>)
 80153ee:	f240 127f 	movw	r2, #383	; 0x17f
 80153f2:	492e      	ldr	r1, [pc, #184]	; (80154ac <etharp_find_entry+0x2e8>)
 80153f4:	482b      	ldr	r0, [pc, #172]	; (80154a4 <etharp_find_entry+0x2e0>)
 80153f6:	f002 fc1d 	bl	8017c34 <iprintf>
    etharp_free_entry(i);
 80153fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153fe:	4618      	mov	r0, r3
 8015400:	f7ff fe06 	bl	8015010 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015408:	2b09      	cmp	r3, #9
 801540a:	dd06      	ble.n	801541a <etharp_find_entry+0x256>
 801540c:	4b23      	ldr	r3, [pc, #140]	; (801549c <etharp_find_entry+0x2d8>)
 801540e:	f240 1283 	movw	r2, #387	; 0x183
 8015412:	4926      	ldr	r1, [pc, #152]	; (80154ac <etharp_find_entry+0x2e8>)
 8015414:	4823      	ldr	r0, [pc, #140]	; (80154a4 <etharp_find_entry+0x2e0>)
 8015416:	f002 fc0d 	bl	8017c34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801541a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801541e:	491e      	ldr	r1, [pc, #120]	; (8015498 <etharp_find_entry+0x2d4>)
 8015420:	4613      	mov	r3, r2
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	3314      	adds	r3, #20
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d006      	beq.n	8015440 <etharp_find_entry+0x27c>
 8015432:	4b1a      	ldr	r3, [pc, #104]	; (801549c <etharp_find_entry+0x2d8>)
 8015434:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015438:	491d      	ldr	r1, [pc, #116]	; (80154b0 <etharp_find_entry+0x2ec>)
 801543a:	481a      	ldr	r0, [pc, #104]	; (80154a4 <etharp_find_entry+0x2e0>)
 801543c:	f002 fbfa 	bl	8017c34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d00b      	beq.n	801545e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	6819      	ldr	r1, [r3, #0]
 801544e:	4812      	ldr	r0, [pc, #72]	; (8015498 <etharp_find_entry+0x2d4>)
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	4403      	add	r3, r0
 801545a:	3304      	adds	r3, #4
 801545c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801545e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015462:	490d      	ldr	r1, [pc, #52]	; (8015498 <etharp_find_entry+0x2d4>)
 8015464:	4613      	mov	r3, r2
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	4413      	add	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	440b      	add	r3, r1
 801546e:	3312      	adds	r3, #18
 8015470:	2200      	movs	r2, #0
 8015472:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015478:	4907      	ldr	r1, [pc, #28]	; (8015498 <etharp_find_entry+0x2d4>)
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	440b      	add	r3, r1
 8015484:	3308      	adds	r3, #8
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801548a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3728      	adds	r7, #40	; 0x28
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	20004b30 	.word	0x20004b30
 801549c:	0801ba20 	.word	0x0801ba20
 80154a0:	0801ba58 	.word	0x0801ba58
 80154a4:	0801ba98 	.word	0x0801ba98
 80154a8:	0801bac0 	.word	0x0801bac0
 80154ac:	0801bad8 	.word	0x0801bad8
 80154b0:	0801baec 	.word	0x0801baec

080154b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b088      	sub	sp, #32
 80154b8:	af02      	add	r7, sp, #8
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
 80154c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80154c8:	2b06      	cmp	r3, #6
 80154ca:	d006      	beq.n	80154da <etharp_update_arp_entry+0x26>
 80154cc:	4b48      	ldr	r3, [pc, #288]	; (80155f0 <etharp_update_arp_entry+0x13c>)
 80154ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80154d2:	4948      	ldr	r1, [pc, #288]	; (80155f4 <etharp_update_arp_entry+0x140>)
 80154d4:	4848      	ldr	r0, [pc, #288]	; (80155f8 <etharp_update_arp_entry+0x144>)
 80154d6:	f002 fbad 	bl	8017c34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d012      	beq.n	8015506 <etharp_update_arp_entry+0x52>
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d00e      	beq.n	8015506 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	68f9      	ldr	r1, [r7, #12]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f001 f8fe 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 80154f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d105      	bne.n	8015506 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015502:	2be0      	cmp	r3, #224	; 0xe0
 8015504:	d102      	bne.n	801550c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015506:	f06f 030f 	mvn.w	r3, #15
 801550a:	e06c      	b.n	80155e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801550c:	78fb      	ldrb	r3, [r7, #3]
 801550e:	68fa      	ldr	r2, [r7, #12]
 8015510:	4619      	mov	r1, r3
 8015512:	68b8      	ldr	r0, [r7, #8]
 8015514:	f7ff fe56 	bl	80151c4 <etharp_find_entry>
 8015518:	4603      	mov	r3, r0
 801551a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801551c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015520:	2b00      	cmp	r3, #0
 8015522:	da02      	bge.n	801552a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015524:	8afb      	ldrh	r3, [r7, #22]
 8015526:	b25b      	sxtb	r3, r3
 8015528:	e05d      	b.n	80155e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801552a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801552e:	4933      	ldr	r1, [pc, #204]	; (80155fc <etharp_update_arp_entry+0x148>)
 8015530:	4613      	mov	r3, r2
 8015532:	005b      	lsls	r3, r3, #1
 8015534:	4413      	add	r3, r2
 8015536:	00db      	lsls	r3, r3, #3
 8015538:	440b      	add	r3, r1
 801553a:	3314      	adds	r3, #20
 801553c:	2202      	movs	r2, #2
 801553e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015544:	492d      	ldr	r1, [pc, #180]	; (80155fc <etharp_update_arp_entry+0x148>)
 8015546:	4613      	mov	r3, r2
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	4413      	add	r3, r2
 801554c:	00db      	lsls	r3, r3, #3
 801554e:	440b      	add	r3, r1
 8015550:	3308      	adds	r3, #8
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	3308      	adds	r3, #8
 8015564:	4a25      	ldr	r2, [pc, #148]	; (80155fc <etharp_update_arp_entry+0x148>)
 8015566:	4413      	add	r3, r2
 8015568:	3304      	adds	r3, #4
 801556a:	2206      	movs	r2, #6
 801556c:	6879      	ldr	r1, [r7, #4]
 801556e:	4618      	mov	r0, r3
 8015570:	f002 faef 	bl	8017b52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015578:	4920      	ldr	r1, [pc, #128]	; (80155fc <etharp_update_arp_entry+0x148>)
 801557a:	4613      	mov	r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	4413      	add	r3, r2
 8015580:	00db      	lsls	r3, r3, #3
 8015582:	440b      	add	r3, r1
 8015584:	3312      	adds	r3, #18
 8015586:	2200      	movs	r2, #0
 8015588:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801558a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801558e:	491b      	ldr	r1, [pc, #108]	; (80155fc <etharp_update_arp_entry+0x148>)
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	440b      	add	r3, r1
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d021      	beq.n	80155e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80155a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155a4:	4915      	ldr	r1, [pc, #84]	; (80155fc <etharp_update_arp_entry+0x148>)
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	440b      	add	r3, r1
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80155b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155b8:	4910      	ldr	r1, [pc, #64]	; (80155fc <etharp_update_arp_entry+0x148>)
 80155ba:	4613      	mov	r3, r2
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	4413      	add	r3, r2
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	440b      	add	r3, r1
 80155c4:	2200      	movs	r2, #0
 80155c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80155ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80155d2:	9300      	str	r3, [sp, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6939      	ldr	r1, [r7, #16]
 80155d8:	68f8      	ldr	r0, [r7, #12]
 80155da:	f001 ff91 	bl	8017500 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80155de:	6938      	ldr	r0, [r7, #16]
 80155e0:	f7f8 fd80 	bl	800e0e4 <pbuf_free>
  }
  return ERR_OK;
 80155e4:	2300      	movs	r3, #0
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3718      	adds	r7, #24
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	0801ba20 	.word	0x0801ba20
 80155f4:	0801bb18 	.word	0x0801bb18
 80155f8:	0801ba98 	.word	0x0801ba98
 80155fc:	20004b30 	.word	0x20004b30

08015600 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015608:	2300      	movs	r3, #0
 801560a:	60fb      	str	r3, [r7, #12]
 801560c:	e01e      	b.n	801564c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801560e:	4913      	ldr	r1, [pc, #76]	; (801565c <etharp_cleanup_netif+0x5c>)
 8015610:	68fa      	ldr	r2, [r7, #12]
 8015612:	4613      	mov	r3, r2
 8015614:	005b      	lsls	r3, r3, #1
 8015616:	4413      	add	r3, r2
 8015618:	00db      	lsls	r3, r3, #3
 801561a:	440b      	add	r3, r1
 801561c:	3314      	adds	r3, #20
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015622:	7afb      	ldrb	r3, [r7, #11]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d00e      	beq.n	8015646 <etharp_cleanup_netif+0x46>
 8015628:	490c      	ldr	r1, [pc, #48]	; (801565c <etharp_cleanup_netif+0x5c>)
 801562a:	68fa      	ldr	r2, [r7, #12]
 801562c:	4613      	mov	r3, r2
 801562e:	005b      	lsls	r3, r3, #1
 8015630:	4413      	add	r3, r2
 8015632:	00db      	lsls	r3, r3, #3
 8015634:	440b      	add	r3, r1
 8015636:	3308      	adds	r3, #8
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	429a      	cmp	r2, r3
 801563e:	d102      	bne.n	8015646 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f7ff fce5 	bl	8015010 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	3301      	adds	r3, #1
 801564a:	60fb      	str	r3, [r7, #12]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2b09      	cmp	r3, #9
 8015650:	dddd      	ble.n	801560e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015652:	bf00      	nop
 8015654:	bf00      	nop
 8015656:	3710      	adds	r7, #16
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	20004b30 	.word	0x20004b30

08015660 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015660:	b5b0      	push	{r4, r5, r7, lr}
 8015662:	b08a      	sub	sp, #40	; 0x28
 8015664:	af04      	add	r7, sp, #16
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d107      	bne.n	8015680 <etharp_input+0x20>
 8015670:	4b3d      	ldr	r3, [pc, #244]	; (8015768 <etharp_input+0x108>)
 8015672:	f240 228a 	movw	r2, #650	; 0x28a
 8015676:	493d      	ldr	r1, [pc, #244]	; (801576c <etharp_input+0x10c>)
 8015678:	483d      	ldr	r0, [pc, #244]	; (8015770 <etharp_input+0x110>)
 801567a:	f002 fadb 	bl	8017c34 <iprintf>
 801567e:	e06f      	b.n	8015760 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	b29b      	uxth	r3, r3
 801568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015690:	d10c      	bne.n	80156ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015696:	2b06      	cmp	r3, #6
 8015698:	d108      	bne.n	80156ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801569e:	2b04      	cmp	r3, #4
 80156a0:	d104      	bne.n	80156ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	885b      	ldrh	r3, [r3, #2]
 80156a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80156a8:	2b08      	cmp	r3, #8
 80156aa:	d003      	beq.n	80156b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7f8 fd19 	bl	800e0e4 <pbuf_free>
    return;
 80156b2:	e055      	b.n	8015760 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	330e      	adds	r3, #14
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	3318      	adds	r3, #24
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	3304      	adds	r3, #4
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d102      	bne.n	80156d4 <etharp_input+0x74>
    for_us = 0;
 80156ce:	2300      	movs	r3, #0
 80156d0:	75fb      	strb	r3, [r7, #23]
 80156d2:	e009      	b.n	80156e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	3304      	adds	r3, #4
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	429a      	cmp	r2, r3
 80156de:	bf0c      	ite	eq
 80156e0:	2301      	moveq	r3, #1
 80156e2:	2300      	movne	r3, #0
 80156e4:	b2db      	uxtb	r3, r3
 80156e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	f103 0208 	add.w	r2, r3, #8
 80156ee:	7dfb      	ldrb	r3, [r7, #23]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d001      	beq.n	80156f8 <etharp_input+0x98>
 80156f4:	2301      	movs	r3, #1
 80156f6:	e000      	b.n	80156fa <etharp_input+0x9a>
 80156f8:	2302      	movs	r3, #2
 80156fa:	f107 010c 	add.w	r1, r7, #12
 80156fe:	6838      	ldr	r0, [r7, #0]
 8015700:	f7ff fed8 	bl	80154b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	88db      	ldrh	r3, [r3, #6]
 8015708:	b29b      	uxth	r3, r3
 801570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801570e:	d003      	beq.n	8015718 <etharp_input+0xb8>
 8015710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015714:	d01e      	beq.n	8015754 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015716:	e020      	b.n	801575a <etharp_input+0xfa>
      if (for_us) {
 8015718:	7dfb      	ldrb	r3, [r7, #23]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d01c      	beq.n	8015758 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015734:	693a      	ldr	r2, [r7, #16]
 8015736:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015738:	2102      	movs	r1, #2
 801573a:	9103      	str	r1, [sp, #12]
 801573c:	f107 010c 	add.w	r1, r7, #12
 8015740:	9102      	str	r1, [sp, #8]
 8015742:	9201      	str	r2, [sp, #4]
 8015744:	9300      	str	r3, [sp, #0]
 8015746:	462b      	mov	r3, r5
 8015748:	4622      	mov	r2, r4
 801574a:	4601      	mov	r1, r0
 801574c:	6838      	ldr	r0, [r7, #0]
 801574e:	f000 faeb 	bl	8015d28 <etharp_raw>
      break;
 8015752:	e001      	b.n	8015758 <etharp_input+0xf8>
      break;
 8015754:	bf00      	nop
 8015756:	e000      	b.n	801575a <etharp_input+0xfa>
      break;
 8015758:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f7f8 fcc2 	bl	800e0e4 <pbuf_free>
}
 8015760:	3718      	adds	r7, #24
 8015762:	46bd      	mov	sp, r7
 8015764:	bdb0      	pop	{r4, r5, r7, pc}
 8015766:	bf00      	nop
 8015768:	0801ba20 	.word	0x0801ba20
 801576c:	0801bb70 	.word	0x0801bb70
 8015770:	0801ba98 	.word	0x0801ba98

08015774 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b086      	sub	sp, #24
 8015778:	af02      	add	r7, sp, #8
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	4613      	mov	r3, r2
 8015780:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015782:	79fa      	ldrb	r2, [r7, #7]
 8015784:	4944      	ldr	r1, [pc, #272]	; (8015898 <etharp_output_to_arp_index+0x124>)
 8015786:	4613      	mov	r3, r2
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	3314      	adds	r3, #20
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	2b01      	cmp	r3, #1
 8015796:	d806      	bhi.n	80157a6 <etharp_output_to_arp_index+0x32>
 8015798:	4b40      	ldr	r3, [pc, #256]	; (801589c <etharp_output_to_arp_index+0x128>)
 801579a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801579e:	4940      	ldr	r1, [pc, #256]	; (80158a0 <etharp_output_to_arp_index+0x12c>)
 80157a0:	4840      	ldr	r0, [pc, #256]	; (80158a4 <etharp_output_to_arp_index+0x130>)
 80157a2:	f002 fa47 	bl	8017c34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80157a6:	79fa      	ldrb	r2, [r7, #7]
 80157a8:	493b      	ldr	r1, [pc, #236]	; (8015898 <etharp_output_to_arp_index+0x124>)
 80157aa:	4613      	mov	r3, r2
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	4413      	add	r3, r2
 80157b0:	00db      	lsls	r3, r3, #3
 80157b2:	440b      	add	r3, r1
 80157b4:	3314      	adds	r3, #20
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	2b02      	cmp	r3, #2
 80157ba:	d153      	bne.n	8015864 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80157bc:	79fa      	ldrb	r2, [r7, #7]
 80157be:	4936      	ldr	r1, [pc, #216]	; (8015898 <etharp_output_to_arp_index+0x124>)
 80157c0:	4613      	mov	r3, r2
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	4413      	add	r3, r2
 80157c6:	00db      	lsls	r3, r3, #3
 80157c8:	440b      	add	r3, r1
 80157ca:	3312      	adds	r3, #18
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80157d2:	d919      	bls.n	8015808 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80157d4:	79fa      	ldrb	r2, [r7, #7]
 80157d6:	4613      	mov	r3, r2
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	4413      	add	r3, r2
 80157dc:	00db      	lsls	r3, r3, #3
 80157de:	4a2e      	ldr	r2, [pc, #184]	; (8015898 <etharp_output_to_arp_index+0x124>)
 80157e0:	4413      	add	r3, r2
 80157e2:	3304      	adds	r3, #4
 80157e4:	4619      	mov	r1, r3
 80157e6:	68f8      	ldr	r0, [r7, #12]
 80157e8:	f000 fb4c 	bl	8015e84 <etharp_request>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d138      	bne.n	8015864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80157f2:	79fa      	ldrb	r2, [r7, #7]
 80157f4:	4928      	ldr	r1, [pc, #160]	; (8015898 <etharp_output_to_arp_index+0x124>)
 80157f6:	4613      	mov	r3, r2
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4413      	add	r3, r2
 80157fc:	00db      	lsls	r3, r3, #3
 80157fe:	440b      	add	r3, r1
 8015800:	3314      	adds	r3, #20
 8015802:	2203      	movs	r2, #3
 8015804:	701a      	strb	r2, [r3, #0]
 8015806:	e02d      	b.n	8015864 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015808:	79fa      	ldrb	r2, [r7, #7]
 801580a:	4923      	ldr	r1, [pc, #140]	; (8015898 <etharp_output_to_arp_index+0x124>)
 801580c:	4613      	mov	r3, r2
 801580e:	005b      	lsls	r3, r3, #1
 8015810:	4413      	add	r3, r2
 8015812:	00db      	lsls	r3, r3, #3
 8015814:	440b      	add	r3, r1
 8015816:	3312      	adds	r3, #18
 8015818:	881b      	ldrh	r3, [r3, #0]
 801581a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801581e:	d321      	bcc.n	8015864 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015820:	79fa      	ldrb	r2, [r7, #7]
 8015822:	4613      	mov	r3, r2
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	4413      	add	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	4a1b      	ldr	r2, [pc, #108]	; (8015898 <etharp_output_to_arp_index+0x124>)
 801582c:	4413      	add	r3, r2
 801582e:	1d19      	adds	r1, r3, #4
 8015830:	79fa      	ldrb	r2, [r7, #7]
 8015832:	4613      	mov	r3, r2
 8015834:	005b      	lsls	r3, r3, #1
 8015836:	4413      	add	r3, r2
 8015838:	00db      	lsls	r3, r3, #3
 801583a:	3308      	adds	r3, #8
 801583c:	4a16      	ldr	r2, [pc, #88]	; (8015898 <etharp_output_to_arp_index+0x124>)
 801583e:	4413      	add	r3, r2
 8015840:	3304      	adds	r3, #4
 8015842:	461a      	mov	r2, r3
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f000 fafb 	bl	8015e40 <etharp_request_dst>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d109      	bne.n	8015864 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015850:	79fa      	ldrb	r2, [r7, #7]
 8015852:	4911      	ldr	r1, [pc, #68]	; (8015898 <etharp_output_to_arp_index+0x124>)
 8015854:	4613      	mov	r3, r2
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	4413      	add	r3, r2
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	440b      	add	r3, r1
 801585e:	3314      	adds	r3, #20
 8015860:	2203      	movs	r2, #3
 8015862:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801586a:	79fa      	ldrb	r2, [r7, #7]
 801586c:	4613      	mov	r3, r2
 801586e:	005b      	lsls	r3, r3, #1
 8015870:	4413      	add	r3, r2
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	3308      	adds	r3, #8
 8015876:	4a08      	ldr	r2, [pc, #32]	; (8015898 <etharp_output_to_arp_index+0x124>)
 8015878:	4413      	add	r3, r2
 801587a:	3304      	adds	r3, #4
 801587c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015880:	9200      	str	r2, [sp, #0]
 8015882:	460a      	mov	r2, r1
 8015884:	68b9      	ldr	r1, [r7, #8]
 8015886:	68f8      	ldr	r0, [r7, #12]
 8015888:	f001 fe3a 	bl	8017500 <ethernet_output>
 801588c:	4603      	mov	r3, r0
}
 801588e:	4618      	mov	r0, r3
 8015890:	3710      	adds	r7, #16
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	20004b30 	.word	0x20004b30
 801589c:	0801ba20 	.word	0x0801ba20
 80158a0:	0801bb90 	.word	0x0801bb90
 80158a4:	0801ba98 	.word	0x0801ba98

080158a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b08a      	sub	sp, #40	; 0x28
 80158ac:	af02      	add	r7, sp, #8
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d106      	bne.n	80158cc <etharp_output+0x24>
 80158be:	4b73      	ldr	r3, [pc, #460]	; (8015a8c <etharp_output+0x1e4>)
 80158c0:	f240 321e 	movw	r2, #798	; 0x31e
 80158c4:	4972      	ldr	r1, [pc, #456]	; (8015a90 <etharp_output+0x1e8>)
 80158c6:	4873      	ldr	r0, [pc, #460]	; (8015a94 <etharp_output+0x1ec>)
 80158c8:	f002 f9b4 	bl	8017c34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d106      	bne.n	80158e0 <etharp_output+0x38>
 80158d2:	4b6e      	ldr	r3, [pc, #440]	; (8015a8c <etharp_output+0x1e4>)
 80158d4:	f240 321f 	movw	r2, #799	; 0x31f
 80158d8:	496f      	ldr	r1, [pc, #444]	; (8015a98 <etharp_output+0x1f0>)
 80158da:	486e      	ldr	r0, [pc, #440]	; (8015a94 <etharp_output+0x1ec>)
 80158dc:	f002 f9aa 	bl	8017c34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d106      	bne.n	80158f4 <etharp_output+0x4c>
 80158e6:	4b69      	ldr	r3, [pc, #420]	; (8015a8c <etharp_output+0x1e4>)
 80158e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80158ec:	496b      	ldr	r1, [pc, #428]	; (8015a9c <etharp_output+0x1f4>)
 80158ee:	4869      	ldr	r0, [pc, #420]	; (8015a94 <etharp_output+0x1ec>)
 80158f0:	f002 f9a0 	bl	8017c34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68f9      	ldr	r1, [r7, #12]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f000 fef8 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 8015900:	4603      	mov	r3, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	d002      	beq.n	801590c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015906:	4b66      	ldr	r3, [pc, #408]	; (8015aa0 <etharp_output+0x1f8>)
 8015908:	61fb      	str	r3, [r7, #28]
 801590a:	e0af      	b.n	8015a6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015914:	2be0      	cmp	r3, #224	; 0xe0
 8015916:	d118      	bne.n	801594a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015918:	2301      	movs	r3, #1
 801591a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801591c:	2300      	movs	r3, #0
 801591e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015920:	235e      	movs	r3, #94	; 0x5e
 8015922:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	3301      	adds	r3, #1
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801592e:	b2db      	uxtb	r3, r3
 8015930:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	3302      	adds	r3, #2
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	3303      	adds	r3, #3
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015942:	f107 0310 	add.w	r3, r7, #16
 8015946:	61fb      	str	r3, [r7, #28]
 8015948:	e090      	b.n	8015a6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	3304      	adds	r3, #4
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	405a      	eors	r2, r3
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	3308      	adds	r3, #8
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4013      	ands	r3, r2
 801595e:	2b00      	cmp	r3, #0
 8015960:	d012      	beq.n	8015988 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015968:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801596c:	4293      	cmp	r3, r2
 801596e:	d00b      	beq.n	8015988 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	330c      	adds	r3, #12
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d003      	beq.n	8015982 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	330c      	adds	r3, #12
 801597e:	61bb      	str	r3, [r7, #24]
 8015980:	e002      	b.n	8015988 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015982:	f06f 0303 	mvn.w	r3, #3
 8015986:	e07d      	b.n	8015a84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015988:	4b46      	ldr	r3, [pc, #280]	; (8015aa4 <etharp_output+0x1fc>)
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	4619      	mov	r1, r3
 801598e:	4a46      	ldr	r2, [pc, #280]	; (8015aa8 <etharp_output+0x200>)
 8015990:	460b      	mov	r3, r1
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	440b      	add	r3, r1
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	4413      	add	r3, r2
 801599a:	3314      	adds	r3, #20
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d925      	bls.n	80159ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80159a2:	4b40      	ldr	r3, [pc, #256]	; (8015aa4 <etharp_output+0x1fc>)
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	4619      	mov	r1, r3
 80159a8:	4a3f      	ldr	r2, [pc, #252]	; (8015aa8 <etharp_output+0x200>)
 80159aa:	460b      	mov	r3, r1
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	440b      	add	r3, r1
 80159b0:	00db      	lsls	r3, r3, #3
 80159b2:	4413      	add	r3, r2
 80159b4:	3308      	adds	r3, #8
 80159b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80159b8:	68fa      	ldr	r2, [r7, #12]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d117      	bne.n	80159ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	4b38      	ldr	r3, [pc, #224]	; (8015aa4 <etharp_output+0x1fc>)
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	4618      	mov	r0, r3
 80159c8:	4937      	ldr	r1, [pc, #220]	; (8015aa8 <etharp_output+0x200>)
 80159ca:	4603      	mov	r3, r0
 80159cc:	005b      	lsls	r3, r3, #1
 80159ce:	4403      	add	r3, r0
 80159d0:	00db      	lsls	r3, r3, #3
 80159d2:	440b      	add	r3, r1
 80159d4:	3304      	adds	r3, #4
 80159d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80159d8:	429a      	cmp	r2, r3
 80159da:	d108      	bne.n	80159ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80159dc:	4b31      	ldr	r3, [pc, #196]	; (8015aa4 <etharp_output+0x1fc>)
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	461a      	mov	r2, r3
 80159e2:	68b9      	ldr	r1, [r7, #8]
 80159e4:	68f8      	ldr	r0, [r7, #12]
 80159e6:	f7ff fec5 	bl	8015774 <etharp_output_to_arp_index>
 80159ea:	4603      	mov	r3, r0
 80159ec:	e04a      	b.n	8015a84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80159ee:	2300      	movs	r3, #0
 80159f0:	75fb      	strb	r3, [r7, #23]
 80159f2:	e031      	b.n	8015a58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80159f4:	7dfa      	ldrb	r2, [r7, #23]
 80159f6:	492c      	ldr	r1, [pc, #176]	; (8015aa8 <etharp_output+0x200>)
 80159f8:	4613      	mov	r3, r2
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	4413      	add	r3, r2
 80159fe:	00db      	lsls	r3, r3, #3
 8015a00:	440b      	add	r3, r1
 8015a02:	3314      	adds	r3, #20
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	2b01      	cmp	r3, #1
 8015a08:	d923      	bls.n	8015a52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015a0a:	7dfa      	ldrb	r2, [r7, #23]
 8015a0c:	4926      	ldr	r1, [pc, #152]	; (8015aa8 <etharp_output+0x200>)
 8015a0e:	4613      	mov	r3, r2
 8015a10:	005b      	lsls	r3, r3, #1
 8015a12:	4413      	add	r3, r2
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	440b      	add	r3, r1
 8015a18:	3308      	adds	r3, #8
 8015a1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d117      	bne.n	8015a52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	6819      	ldr	r1, [r3, #0]
 8015a26:	7dfa      	ldrb	r2, [r7, #23]
 8015a28:	481f      	ldr	r0, [pc, #124]	; (8015aa8 <etharp_output+0x200>)
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	005b      	lsls	r3, r3, #1
 8015a2e:	4413      	add	r3, r2
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	4403      	add	r3, r0
 8015a34:	3304      	adds	r3, #4
 8015a36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015a38:	4299      	cmp	r1, r3
 8015a3a:	d10a      	bne.n	8015a52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015a3c:	4a19      	ldr	r2, [pc, #100]	; (8015aa4 <etharp_output+0x1fc>)
 8015a3e:	7dfb      	ldrb	r3, [r7, #23]
 8015a40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015a42:	7dfb      	ldrb	r3, [r7, #23]
 8015a44:	461a      	mov	r2, r3
 8015a46:	68b9      	ldr	r1, [r7, #8]
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f7ff fe93 	bl	8015774 <etharp_output_to_arp_index>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	e018      	b.n	8015a84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a52:	7dfb      	ldrb	r3, [r7, #23]
 8015a54:	3301      	adds	r3, #1
 8015a56:	75fb      	strb	r3, [r7, #23]
 8015a58:	7dfb      	ldrb	r3, [r7, #23]
 8015a5a:	2b09      	cmp	r3, #9
 8015a5c:	d9ca      	bls.n	80159f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015a5e:	68ba      	ldr	r2, [r7, #8]
 8015a60:	69b9      	ldr	r1, [r7, #24]
 8015a62:	68f8      	ldr	r0, [r7, #12]
 8015a64:	f000 f822 	bl	8015aac <etharp_query>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	e00b      	b.n	8015a84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a76:	9300      	str	r3, [sp, #0]
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	68b9      	ldr	r1, [r7, #8]
 8015a7c:	68f8      	ldr	r0, [r7, #12]
 8015a7e:	f001 fd3f 	bl	8017500 <ethernet_output>
 8015a82:	4603      	mov	r3, r0
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3720      	adds	r7, #32
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	0801ba20 	.word	0x0801ba20
 8015a90:	0801bb70 	.word	0x0801bb70
 8015a94:	0801ba98 	.word	0x0801ba98
 8015a98:	0801bbc0 	.word	0x0801bbc0
 8015a9c:	0801bb60 	.word	0x0801bb60
 8015aa0:	0801c24c 	.word	0x0801c24c
 8015aa4:	20004c20 	.word	0x20004c20
 8015aa8:	20004b30 	.word	0x20004b30

08015aac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b08c      	sub	sp, #48	; 0x30
 8015ab0:	af02      	add	r7, sp, #8
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	3326      	adds	r3, #38	; 0x26
 8015abc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015abe:	23ff      	movs	r3, #255	; 0xff
 8015ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	68f9      	ldr	r1, [r7, #12]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 fe0e 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10c      	bne.n	8015af4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ae2:	2be0      	cmp	r3, #224	; 0xe0
 8015ae4:	d006      	beq.n	8015af4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d003      	beq.n	8015af4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d102      	bne.n	8015afa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015af4:	f06f 030f 	mvn.w	r3, #15
 8015af8:	e101      	b.n	8015cfe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015afa:	68fa      	ldr	r2, [r7, #12]
 8015afc:	2101      	movs	r1, #1
 8015afe:	68b8      	ldr	r0, [r7, #8]
 8015b00:	f7ff fb60 	bl	80151c4 <etharp_find_entry>
 8015b04:	4603      	mov	r3, r0
 8015b06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015b08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	da02      	bge.n	8015b16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015b10:	8a7b      	ldrh	r3, [r7, #18]
 8015b12:	b25b      	sxtb	r3, r3
 8015b14:	e0f3      	b.n	8015cfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015b16:	8a7b      	ldrh	r3, [r7, #18]
 8015b18:	2b7e      	cmp	r3, #126	; 0x7e
 8015b1a:	d906      	bls.n	8015b2a <etharp_query+0x7e>
 8015b1c:	4b7a      	ldr	r3, [pc, #488]	; (8015d08 <etharp_query+0x25c>)
 8015b1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015b22:	497a      	ldr	r1, [pc, #488]	; (8015d0c <etharp_query+0x260>)
 8015b24:	487a      	ldr	r0, [pc, #488]	; (8015d10 <etharp_query+0x264>)
 8015b26:	f002 f885 	bl	8017c34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015b2a:	8a7b      	ldrh	r3, [r7, #18]
 8015b2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015b2e:	7c7a      	ldrb	r2, [r7, #17]
 8015b30:	4978      	ldr	r1, [pc, #480]	; (8015d14 <etharp_query+0x268>)
 8015b32:	4613      	mov	r3, r2
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	4413      	add	r3, r2
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	440b      	add	r3, r1
 8015b3c:	3314      	adds	r3, #20
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d115      	bne.n	8015b70 <etharp_query+0xc4>
    is_new_entry = 1;
 8015b44:	2301      	movs	r3, #1
 8015b46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015b48:	7c7a      	ldrb	r2, [r7, #17]
 8015b4a:	4972      	ldr	r1, [pc, #456]	; (8015d14 <etharp_query+0x268>)
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	005b      	lsls	r3, r3, #1
 8015b50:	4413      	add	r3, r2
 8015b52:	00db      	lsls	r3, r3, #3
 8015b54:	440b      	add	r3, r1
 8015b56:	3314      	adds	r3, #20
 8015b58:	2201      	movs	r2, #1
 8015b5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015b5c:	7c7a      	ldrb	r2, [r7, #17]
 8015b5e:	496d      	ldr	r1, [pc, #436]	; (8015d14 <etharp_query+0x268>)
 8015b60:	4613      	mov	r3, r2
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	4413      	add	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	440b      	add	r3, r1
 8015b6a:	3308      	adds	r3, #8
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015b70:	7c7a      	ldrb	r2, [r7, #17]
 8015b72:	4968      	ldr	r1, [pc, #416]	; (8015d14 <etharp_query+0x268>)
 8015b74:	4613      	mov	r3, r2
 8015b76:	005b      	lsls	r3, r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	00db      	lsls	r3, r3, #3
 8015b7c:	440b      	add	r3, r1
 8015b7e:	3314      	adds	r3, #20
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	2b01      	cmp	r3, #1
 8015b84:	d011      	beq.n	8015baa <etharp_query+0xfe>
 8015b86:	7c7a      	ldrb	r2, [r7, #17]
 8015b88:	4962      	ldr	r1, [pc, #392]	; (8015d14 <etharp_query+0x268>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3314      	adds	r3, #20
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d806      	bhi.n	8015baa <etharp_query+0xfe>
 8015b9c:	4b5a      	ldr	r3, [pc, #360]	; (8015d08 <etharp_query+0x25c>)
 8015b9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015ba2:	495d      	ldr	r1, [pc, #372]	; (8015d18 <etharp_query+0x26c>)
 8015ba4:	485a      	ldr	r0, [pc, #360]	; (8015d10 <etharp_query+0x264>)
 8015ba6:	f002 f845 	bl	8017c34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015baa:	6a3b      	ldr	r3, [r7, #32]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d102      	bne.n	8015bb6 <etharp_query+0x10a>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d10c      	bne.n	8015bd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015bb6:	68b9      	ldr	r1, [r7, #8]
 8015bb8:	68f8      	ldr	r0, [r7, #12]
 8015bba:	f000 f963 	bl	8015e84 <etharp_request>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d102      	bne.n	8015bd0 <etharp_query+0x124>
      return result;
 8015bca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015bce:	e096      	b.n	8015cfe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <etharp_query+0x138>
 8015bd6:	4b4c      	ldr	r3, [pc, #304]	; (8015d08 <etharp_query+0x25c>)
 8015bd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015bdc:	494f      	ldr	r1, [pc, #316]	; (8015d1c <etharp_query+0x270>)
 8015bde:	484c      	ldr	r0, [pc, #304]	; (8015d10 <etharp_query+0x264>)
 8015be0:	f002 f828 	bl	8017c34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015be4:	7c7a      	ldrb	r2, [r7, #17]
 8015be6:	494b      	ldr	r1, [pc, #300]	; (8015d14 <etharp_query+0x268>)
 8015be8:	4613      	mov	r3, r2
 8015bea:	005b      	lsls	r3, r3, #1
 8015bec:	4413      	add	r3, r2
 8015bee:	00db      	lsls	r3, r3, #3
 8015bf0:	440b      	add	r3, r1
 8015bf2:	3314      	adds	r3, #20
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d917      	bls.n	8015c2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015bfa:	4a49      	ldr	r2, [pc, #292]	; (8015d20 <etharp_query+0x274>)
 8015bfc:	7c7b      	ldrb	r3, [r7, #17]
 8015bfe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015c00:	7c7a      	ldrb	r2, [r7, #17]
 8015c02:	4613      	mov	r3, r2
 8015c04:	005b      	lsls	r3, r3, #1
 8015c06:	4413      	add	r3, r2
 8015c08:	00db      	lsls	r3, r3, #3
 8015c0a:	3308      	adds	r3, #8
 8015c0c:	4a41      	ldr	r2, [pc, #260]	; (8015d14 <etharp_query+0x268>)
 8015c0e:	4413      	add	r3, r2
 8015c10:	3304      	adds	r3, #4
 8015c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c16:	9200      	str	r2, [sp, #0]
 8015c18:	697a      	ldr	r2, [r7, #20]
 8015c1a:	6879      	ldr	r1, [r7, #4]
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	f001 fc6f 	bl	8017500 <ethernet_output>
 8015c22:	4603      	mov	r3, r0
 8015c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c28:	e067      	b.n	8015cfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015c2a:	7c7a      	ldrb	r2, [r7, #17]
 8015c2c:	4939      	ldr	r1, [pc, #228]	; (8015d14 <etharp_query+0x268>)
 8015c2e:	4613      	mov	r3, r2
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4413      	add	r3, r2
 8015c34:	00db      	lsls	r3, r3, #3
 8015c36:	440b      	add	r3, r1
 8015c38:	3314      	adds	r3, #20
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d15c      	bne.n	8015cfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015c40:	2300      	movs	r3, #0
 8015c42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c48:	e01c      	b.n	8015c84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	895a      	ldrh	r2, [r3, #10]
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	891b      	ldrh	r3, [r3, #8]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d10a      	bne.n	8015c6c <etharp_query+0x1c0>
 8015c56:	69fb      	ldr	r3, [r7, #28]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d006      	beq.n	8015c6c <etharp_query+0x1c0>
 8015c5e:	4b2a      	ldr	r3, [pc, #168]	; (8015d08 <etharp_query+0x25c>)
 8015c60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015c64:	492f      	ldr	r1, [pc, #188]	; (8015d24 <etharp_query+0x278>)
 8015c66:	482a      	ldr	r0, [pc, #168]	; (8015d10 <etharp_query+0x264>)
 8015c68:	f001 ffe4 	bl	8017c34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	7b1b      	ldrb	r3, [r3, #12]
 8015c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d002      	beq.n	8015c7e <etharp_query+0x1d2>
        copy_needed = 1;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	61bb      	str	r3, [r7, #24]
        break;
 8015c7c:	e005      	b.n	8015c8a <etharp_query+0x1de>
      }
      p = p->next;
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d1df      	bne.n	8015c4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d007      	beq.n	8015ca0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015c96:	200e      	movs	r0, #14
 8015c98:	f7f8 fc8c 	bl	800e5b4 <pbuf_clone>
 8015c9c:	61f8      	str	r0, [r7, #28]
 8015c9e:	e004      	b.n	8015caa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015ca4:	69f8      	ldr	r0, [r7, #28]
 8015ca6:	f7f8 fac3 	bl	800e230 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d021      	beq.n	8015cf4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015cb0:	7c7a      	ldrb	r2, [r7, #17]
 8015cb2:	4918      	ldr	r1, [pc, #96]	; (8015d14 <etharp_query+0x268>)
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	005b      	lsls	r3, r3, #1
 8015cb8:	4413      	add	r3, r2
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	440b      	add	r3, r1
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00a      	beq.n	8015cda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015cc4:	7c7a      	ldrb	r2, [r7, #17]
 8015cc6:	4913      	ldr	r1, [pc, #76]	; (8015d14 <etharp_query+0x268>)
 8015cc8:	4613      	mov	r3, r2
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	4413      	add	r3, r2
 8015cce:	00db      	lsls	r3, r3, #3
 8015cd0:	440b      	add	r3, r1
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7f8 fa05 	bl	800e0e4 <pbuf_free>
      }
      arp_table[i].q = p;
 8015cda:	7c7a      	ldrb	r2, [r7, #17]
 8015cdc:	490d      	ldr	r1, [pc, #52]	; (8015d14 <etharp_query+0x268>)
 8015cde:	4613      	mov	r3, r2
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	4413      	add	r3, r2
 8015ce4:	00db      	lsls	r3, r3, #3
 8015ce6:	440b      	add	r3, r1
 8015ce8:	69fa      	ldr	r2, [r7, #28]
 8015cea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015cec:	2300      	movs	r3, #0
 8015cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cf2:	e002      	b.n	8015cfa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015cf4:	23ff      	movs	r3, #255	; 0xff
 8015cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015cfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3728      	adds	r7, #40	; 0x28
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	0801ba20 	.word	0x0801ba20
 8015d0c:	0801bbcc 	.word	0x0801bbcc
 8015d10:	0801ba98 	.word	0x0801ba98
 8015d14:	20004b30 	.word	0x20004b30
 8015d18:	0801bbdc 	.word	0x0801bbdc
 8015d1c:	0801bbc0 	.word	0x0801bbc0
 8015d20:	20004c20 	.word	0x20004c20
 8015d24:	0801bc04 	.word	0x0801bc04

08015d28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08a      	sub	sp, #40	; 0x28
 8015d2c:	af02      	add	r7, sp, #8
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
 8015d34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015d36:	2300      	movs	r3, #0
 8015d38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d106      	bne.n	8015d4e <etharp_raw+0x26>
 8015d40:	4b3a      	ldr	r3, [pc, #232]	; (8015e2c <etharp_raw+0x104>)
 8015d42:	f240 4257 	movw	r2, #1111	; 0x457
 8015d46:	493a      	ldr	r1, [pc, #232]	; (8015e30 <etharp_raw+0x108>)
 8015d48:	483a      	ldr	r0, [pc, #232]	; (8015e34 <etharp_raw+0x10c>)
 8015d4a:	f001 ff73 	bl	8017c34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015d4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d52:	211c      	movs	r1, #28
 8015d54:	200e      	movs	r0, #14
 8015d56:	f7f7 fee1 	bl	800db1c <pbuf_alloc>
 8015d5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015d5c:	69bb      	ldr	r3, [r7, #24]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d102      	bne.n	8015d68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015d62:	f04f 33ff 	mov.w	r3, #4294967295
 8015d66:	e05d      	b.n	8015e24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015d68:	69bb      	ldr	r3, [r7, #24]
 8015d6a:	895b      	ldrh	r3, [r3, #10]
 8015d6c:	2b1b      	cmp	r3, #27
 8015d6e:	d806      	bhi.n	8015d7e <etharp_raw+0x56>
 8015d70:	4b2e      	ldr	r3, [pc, #184]	; (8015e2c <etharp_raw+0x104>)
 8015d72:	f240 4262 	movw	r2, #1122	; 0x462
 8015d76:	4930      	ldr	r1, [pc, #192]	; (8015e38 <etharp_raw+0x110>)
 8015d78:	482e      	ldr	r0, [pc, #184]	; (8015e34 <etharp_raw+0x10c>)
 8015d7a:	f001 ff5b 	bl	8017c34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015d84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7f6 fe00 	bl	800c98c <lwip_htons>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	461a      	mov	r2, r3
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d9a:	2b06      	cmp	r3, #6
 8015d9c:	d006      	beq.n	8015dac <etharp_raw+0x84>
 8015d9e:	4b23      	ldr	r3, [pc, #140]	; (8015e2c <etharp_raw+0x104>)
 8015da0:	f240 4269 	movw	r2, #1129	; 0x469
 8015da4:	4925      	ldr	r1, [pc, #148]	; (8015e3c <etharp_raw+0x114>)
 8015da6:	4823      	ldr	r0, [pc, #140]	; (8015e34 <etharp_raw+0x10c>)
 8015da8:	f001 ff44 	bl	8017c34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	3308      	adds	r3, #8
 8015db0:	2206      	movs	r2, #6
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f001 fecc 	bl	8017b52 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	3312      	adds	r3, #18
 8015dbe:	2206      	movs	r2, #6
 8015dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f001 fec5 	bl	8017b52 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	330e      	adds	r3, #14
 8015dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dce:	6812      	ldr	r2, [r2, #0]
 8015dd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	3318      	adds	r3, #24
 8015dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dd8:	6812      	ldr	r2, [r2, #0]
 8015dda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	2200      	movs	r2, #0
 8015de0:	701a      	strb	r2, [r3, #0]
 8015de2:	2200      	movs	r2, #0
 8015de4:	f042 0201 	orr.w	r2, r2, #1
 8015de8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	2200      	movs	r2, #0
 8015dee:	f042 0208 	orr.w	r2, r2, #8
 8015df2:	709a      	strb	r2, [r3, #2]
 8015df4:	2200      	movs	r2, #0
 8015df6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	2206      	movs	r2, #6
 8015dfc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	2204      	movs	r2, #4
 8015e02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015e04:	f640 0306 	movw	r3, #2054	; 0x806
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	68ba      	ldr	r2, [r7, #8]
 8015e0e:	69b9      	ldr	r1, [r7, #24]
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f001 fb75 	bl	8017500 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015e16:	69b8      	ldr	r0, [r7, #24]
 8015e18:	f7f8 f964 	bl	800e0e4 <pbuf_free>
  p = NULL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015e20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3720      	adds	r7, #32
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	0801ba20 	.word	0x0801ba20
 8015e30:	0801bb70 	.word	0x0801bb70
 8015e34:	0801ba98 	.word	0x0801ba98
 8015e38:	0801bc20 	.word	0x0801bc20
 8015e3c:	0801bc54 	.word	0x0801bc54

08015e40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af04      	add	r7, sp, #16
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	9203      	str	r2, [sp, #12]
 8015e60:	68ba      	ldr	r2, [r7, #8]
 8015e62:	9202      	str	r2, [sp, #8]
 8015e64:	4a06      	ldr	r2, [pc, #24]	; (8015e80 <etharp_request_dst+0x40>)
 8015e66:	9201      	str	r2, [sp, #4]
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	68f8      	ldr	r0, [r7, #12]
 8015e70:	f7ff ff5a 	bl	8015d28 <etharp_raw>
 8015e74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	0801c254 	.word	0x0801c254

08015e84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015e8e:	4a05      	ldr	r2, [pc, #20]	; (8015ea4 <etharp_request+0x20>)
 8015e90:	6839      	ldr	r1, [r7, #0]
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff ffd4 	bl	8015e40 <etharp_request_dst>
 8015e98:	4603      	mov	r3, r0
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3708      	adds	r7, #8
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	0801c24c 	.word	0x0801c24c

08015ea8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b08e      	sub	sp, #56	; 0x38
 8015eac:	af04      	add	r7, sp, #16
 8015eae:	6078      	str	r0, [r7, #4]
 8015eb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015eb2:	4b79      	ldr	r3, [pc, #484]	; (8016098 <icmp_input+0x1f0>)
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	f003 030f 	and.w	r3, r3, #15
 8015ec0:	b2db      	uxtb	r3, r3
 8015ec2:	009b      	lsls	r3, r3, #2
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015eca:	2b13      	cmp	r3, #19
 8015ecc:	f240 80cd 	bls.w	801606a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	895b      	ldrh	r3, [r3, #10]
 8015ed4:	2b03      	cmp	r3, #3
 8015ed6:	f240 80ca 	bls.w	801606e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015ee4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	f000 80b7 	beq.w	801605c <icmp_input+0x1b4>
 8015eee:	2b08      	cmp	r3, #8
 8015ef0:	f040 80b7 	bne.w	8016062 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015ef4:	4b69      	ldr	r3, [pc, #420]	; (801609c <icmp_input+0x1f4>)
 8015ef6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ef8:	4b67      	ldr	r3, [pc, #412]	; (8016098 <icmp_input+0x1f0>)
 8015efa:	695b      	ldr	r3, [r3, #20]
 8015efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f00:	2be0      	cmp	r3, #224	; 0xe0
 8015f02:	f000 80bb 	beq.w	801607c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015f06:	4b64      	ldr	r3, [pc, #400]	; (8016098 <icmp_input+0x1f0>)
 8015f08:	695b      	ldr	r3, [r3, #20]
 8015f0a:	4a63      	ldr	r2, [pc, #396]	; (8016098 <icmp_input+0x1f0>)
 8015f0c:	6812      	ldr	r2, [r2, #0]
 8015f0e:	4611      	mov	r1, r2
 8015f10:	4618      	mov	r0, r3
 8015f12:	f000 fbed 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f040 80b1 	bne.w	8016080 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	891b      	ldrh	r3, [r3, #8]
 8015f22:	2b07      	cmp	r3, #7
 8015f24:	f240 80a5 	bls.w	8016072 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f2a:	330e      	adds	r3, #14
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7f8 f842 	bl	800dfb8 <pbuf_add_header>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d04b      	beq.n	8015fd2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	891a      	ldrh	r2, [r3, #8]
 8015f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f40:	4413      	add	r3, r2
 8015f42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	891b      	ldrh	r3, [r3, #8]
 8015f48:	8b7a      	ldrh	r2, [r7, #26]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	f0c0 809a 	bcc.w	8016084 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015f50:	8b7b      	ldrh	r3, [r7, #26]
 8015f52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f56:	4619      	mov	r1, r3
 8015f58:	200e      	movs	r0, #14
 8015f5a:	f7f7 fddf 	bl	800db1c <pbuf_alloc>
 8015f5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f000 8090 	beq.w	8016088 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	895b      	ldrh	r3, [r3, #10]
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f70:	3308      	adds	r3, #8
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d203      	bcs.n	8015f7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015f76:	6978      	ldr	r0, [r7, #20]
 8015f78:	f7f8 f8b4 	bl	800e0e4 <pbuf_free>
          goto icmperr;
 8015f7c:	e085      	b.n	801608a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f86:	4618      	mov	r0, r3
 8015f88:	f001 fde3 	bl	8017b52 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015f8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f8e:	4619      	mov	r1, r3
 8015f90:	6978      	ldr	r0, [r7, #20]
 8015f92:	f7f8 f821 	bl	800dfd8 <pbuf_remove_header>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d009      	beq.n	8015fb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015f9c:	4b40      	ldr	r3, [pc, #256]	; (80160a0 <icmp_input+0x1f8>)
 8015f9e:	22b6      	movs	r2, #182	; 0xb6
 8015fa0:	4940      	ldr	r1, [pc, #256]	; (80160a4 <icmp_input+0x1fc>)
 8015fa2:	4841      	ldr	r0, [pc, #260]	; (80160a8 <icmp_input+0x200>)
 8015fa4:	f001 fe46 	bl	8017c34 <iprintf>
          pbuf_free(r);
 8015fa8:	6978      	ldr	r0, [r7, #20]
 8015faa:	f7f8 f89b 	bl	800e0e4 <pbuf_free>
          goto icmperr;
 8015fae:	e06c      	b.n	801608a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015fb0:	6879      	ldr	r1, [r7, #4]
 8015fb2:	6978      	ldr	r0, [r7, #20]
 8015fb4:	f7f8 f9ba 	bl	800e32c <pbuf_copy>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d003      	beq.n	8015fc6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015fbe:	6978      	ldr	r0, [r7, #20]
 8015fc0:	f7f8 f890 	bl	800e0e4 <pbuf_free>
          goto icmperr;
 8015fc4:	e061      	b.n	801608a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f7f8 f88c 	bl	800e0e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	607b      	str	r3, [r7, #4]
 8015fd0:	e00f      	b.n	8015ff2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fd4:	330e      	adds	r3, #14
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7f7 fffd 	bl	800dfd8 <pbuf_remove_header>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d006      	beq.n	8015ff2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015fe4:	4b2e      	ldr	r3, [pc, #184]	; (80160a0 <icmp_input+0x1f8>)
 8015fe6:	22c7      	movs	r2, #199	; 0xc7
 8015fe8:	4930      	ldr	r1, [pc, #192]	; (80160ac <icmp_input+0x204>)
 8015fea:	482f      	ldr	r0, [pc, #188]	; (80160a8 <icmp_input+0x200>)
 8015fec:	f001 fe22 	bl	8017c34 <iprintf>
          goto icmperr;
 8015ff0:	e04b      	b.n	801608a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7f7 ffdb 	bl	800dfb8 <pbuf_add_header>
 8016002:	4603      	mov	r3, r0
 8016004:	2b00      	cmp	r3, #0
 8016006:	d12b      	bne.n	8016060 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	681a      	ldr	r2, [r3, #0]
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016016:	4b20      	ldr	r3, [pc, #128]	; (8016098 <icmp_input+0x1f0>)
 8016018:	691a      	ldr	r2, [r3, #16]
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	2200      	movs	r2, #0
 8016022:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	2200      	movs	r2, #0
 8016028:	709a      	strb	r2, [r3, #2]
 801602a:	2200      	movs	r2, #0
 801602c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	22ff      	movs	r2, #255	; 0xff
 8016032:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2200      	movs	r2, #0
 8016038:	729a      	strb	r2, [r3, #10]
 801603a:	2200      	movs	r2, #0
 801603c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	9302      	str	r3, [sp, #8]
 8016042:	2301      	movs	r3, #1
 8016044:	9301      	str	r3, [sp, #4]
 8016046:	2300      	movs	r3, #0
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	23ff      	movs	r3, #255	; 0xff
 801604c:	2200      	movs	r2, #0
 801604e:	69f9      	ldr	r1, [r7, #28]
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 fa75 	bl	8016540 <ip4_output_if>
 8016056:	4603      	mov	r3, r0
 8016058:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801605a:	e001      	b.n	8016060 <icmp_input+0x1b8>
      break;
 801605c:	bf00      	nop
 801605e:	e000      	b.n	8016062 <icmp_input+0x1ba>
      break;
 8016060:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7f8 f83e 	bl	800e0e4 <pbuf_free>
  return;
 8016068:	e013      	b.n	8016092 <icmp_input+0x1ea>
    goto lenerr;
 801606a:	bf00      	nop
 801606c:	e002      	b.n	8016074 <icmp_input+0x1cc>
    goto lenerr;
 801606e:	bf00      	nop
 8016070:	e000      	b.n	8016074 <icmp_input+0x1cc>
        goto lenerr;
 8016072:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7f8 f835 	bl	800e0e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801607a:	e00a      	b.n	8016092 <icmp_input+0x1ea>
        goto icmperr;
 801607c:	bf00      	nop
 801607e:	e004      	b.n	801608a <icmp_input+0x1e2>
        goto icmperr;
 8016080:	bf00      	nop
 8016082:	e002      	b.n	801608a <icmp_input+0x1e2>
          goto icmperr;
 8016084:	bf00      	nop
 8016086:	e000      	b.n	801608a <icmp_input+0x1e2>
          goto icmperr;
 8016088:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7f8 f82a 	bl	800e0e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016090:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016092:	3728      	adds	r7, #40	; 0x28
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	20008000 	.word	0x20008000
 801609c:	20008014 	.word	0x20008014
 80160a0:	0801bc98 	.word	0x0801bc98
 80160a4:	0801bcd0 	.word	0x0801bcd0
 80160a8:	0801bd08 	.word	0x0801bd08
 80160ac:	0801bd30 	.word	0x0801bd30

080160b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
 80160b8:	460b      	mov	r3, r1
 80160ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80160bc:	78fb      	ldrb	r3, [r7, #3]
 80160be:	461a      	mov	r2, r3
 80160c0:	2103      	movs	r1, #3
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f000 f814 	bl	80160f0 <icmp_send_response>
}
 80160c8:	bf00      	nop
 80160ca:	3708      	adds	r7, #8
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	460b      	mov	r3, r1
 80160da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80160dc:	78fb      	ldrb	r3, [r7, #3]
 80160de:	461a      	mov	r2, r3
 80160e0:	210b      	movs	r1, #11
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f000 f804 	bl	80160f0 <icmp_send_response>
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b08c      	sub	sp, #48	; 0x30
 80160f4:	af04      	add	r7, sp, #16
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	460b      	mov	r3, r1
 80160fa:	70fb      	strb	r3, [r7, #3]
 80160fc:	4613      	mov	r3, r2
 80160fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016100:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016104:	2124      	movs	r1, #36	; 0x24
 8016106:	2022      	movs	r0, #34	; 0x22
 8016108:	f7f7 fd08 	bl	800db1c <pbuf_alloc>
 801610c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801610e:	69fb      	ldr	r3, [r7, #28]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d04c      	beq.n	80161ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	895b      	ldrh	r3, [r3, #10]
 8016118:	2b23      	cmp	r3, #35	; 0x23
 801611a:	d806      	bhi.n	801612a <icmp_send_response+0x3a>
 801611c:	4b26      	ldr	r3, [pc, #152]	; (80161b8 <icmp_send_response+0xc8>)
 801611e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016122:	4926      	ldr	r1, [pc, #152]	; (80161bc <icmp_send_response+0xcc>)
 8016124:	4826      	ldr	r0, [pc, #152]	; (80161c0 <icmp_send_response+0xd0>)
 8016126:	f001 fd85 	bl	8017c34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	78fa      	ldrb	r2, [r7, #3]
 801613a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	78ba      	ldrb	r2, [r7, #2]
 8016140:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	2200      	movs	r2, #0
 8016146:	711a      	strb	r2, [r3, #4]
 8016148:	2200      	movs	r2, #0
 801614a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	2200      	movs	r2, #0
 8016150:	719a      	strb	r2, [r3, #6]
 8016152:	2200      	movs	r2, #0
 8016154:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016156:	69fb      	ldr	r3, [r7, #28]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	f103 0008 	add.w	r0, r3, #8
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	221c      	movs	r2, #28
 8016164:	4619      	mov	r1, r3
 8016166:	f001 fcf4 	bl	8017b52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801616a:	69bb      	ldr	r3, [r7, #24]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016170:	f107 030c 	add.w	r3, r7, #12
 8016174:	4618      	mov	r0, r3
 8016176:	f000 f825 	bl	80161c4 <ip4_route>
 801617a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d011      	beq.n	80161a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2200      	movs	r2, #0
 8016186:	709a      	strb	r2, [r3, #2]
 8016188:	2200      	movs	r2, #0
 801618a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801618c:	f107 020c 	add.w	r2, r7, #12
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	9302      	str	r3, [sp, #8]
 8016194:	2301      	movs	r3, #1
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	2300      	movs	r3, #0
 801619a:	9300      	str	r3, [sp, #0]
 801619c:	23ff      	movs	r3, #255	; 0xff
 801619e:	2100      	movs	r1, #0
 80161a0:	69f8      	ldr	r0, [r7, #28]
 80161a2:	f000 f9cd 	bl	8016540 <ip4_output_if>
  }
  pbuf_free(q);
 80161a6:	69f8      	ldr	r0, [r7, #28]
 80161a8:	f7f7 ff9c 	bl	800e0e4 <pbuf_free>
 80161ac:	e000      	b.n	80161b0 <icmp_send_response+0xc0>
    return;
 80161ae:	bf00      	nop
}
 80161b0:	3720      	adds	r7, #32
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
 80161b6:	bf00      	nop
 80161b8:	0801bc98 	.word	0x0801bc98
 80161bc:	0801bd64 	.word	0x0801bd64
 80161c0:	0801bd08 	.word	0x0801bd08

080161c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80161c4:	b480      	push	{r7}
 80161c6:	b085      	sub	sp, #20
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80161cc:	4b33      	ldr	r3, [pc, #204]	; (801629c <ip4_route+0xd8>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	60fb      	str	r3, [r7, #12]
 80161d2:	e036      	b.n	8016242 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161da:	f003 0301 	and.w	r3, r3, #1
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d02b      	beq.n	801623c <ip4_route+0x78>
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161ea:	089b      	lsrs	r3, r3, #2
 80161ec:	f003 0301 	and.w	r3, r3, #1
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d022      	beq.n	801623c <ip4_route+0x78>
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	3304      	adds	r3, #4
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d01d      	beq.n	801623c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681a      	ldr	r2, [r3, #0]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	3304      	adds	r3, #4
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	405a      	eors	r2, r3
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	3308      	adds	r3, #8
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	4013      	ands	r3, r2
 8016214:	2b00      	cmp	r3, #0
 8016216:	d101      	bne.n	801621c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	e038      	b.n	801628e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016222:	f003 0302 	and.w	r3, r3, #2
 8016226:	2b00      	cmp	r3, #0
 8016228:	d108      	bne.n	801623c <ip4_route+0x78>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	330c      	adds	r3, #12
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	429a      	cmp	r2, r3
 8016236:	d101      	bne.n	801623c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	e028      	b.n	801628e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	60fb      	str	r3, [r7, #12]
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1c5      	bne.n	80161d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016248:	4b15      	ldr	r3, [pc, #84]	; (80162a0 <ip4_route+0xdc>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d01a      	beq.n	8016286 <ip4_route+0xc2>
 8016250:	4b13      	ldr	r3, [pc, #76]	; (80162a0 <ip4_route+0xdc>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016258:	f003 0301 	and.w	r3, r3, #1
 801625c:	2b00      	cmp	r3, #0
 801625e:	d012      	beq.n	8016286 <ip4_route+0xc2>
 8016260:	4b0f      	ldr	r3, [pc, #60]	; (80162a0 <ip4_route+0xdc>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016268:	f003 0304 	and.w	r3, r3, #4
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00a      	beq.n	8016286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016270:	4b0b      	ldr	r3, [pc, #44]	; (80162a0 <ip4_route+0xdc>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	3304      	adds	r3, #4
 8016276:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016278:	2b00      	cmp	r3, #0
 801627a:	d004      	beq.n	8016286 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	b2db      	uxtb	r3, r3
 8016282:	2b7f      	cmp	r3, #127	; 0x7f
 8016284:	d101      	bne.n	801628a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016286:	2300      	movs	r3, #0
 8016288:	e001      	b.n	801628e <ip4_route+0xca>
  }

  return netif_default;
 801628a:	4b05      	ldr	r3, [pc, #20]	; (80162a0 <ip4_route+0xdc>)
 801628c:	681b      	ldr	r3, [r3, #0]
}
 801628e:	4618      	mov	r0, r3
 8016290:	3714      	adds	r7, #20
 8016292:	46bd      	mov	sp, r7
 8016294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016298:	4770      	bx	lr
 801629a:	bf00      	nop
 801629c:	2000b704 	.word	0x2000b704
 80162a0:	2000b708 	.word	0x2000b708

080162a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162b2:	f003 0301 	and.w	r3, r3, #1
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d016      	beq.n	80162ea <ip4_input_accept+0x46>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	3304      	adds	r3, #4
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d011      	beq.n	80162ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80162c6:	4b0b      	ldr	r3, [pc, #44]	; (80162f4 <ip4_input_accept+0x50>)
 80162c8:	695a      	ldr	r2, [r3, #20]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	3304      	adds	r3, #4
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d008      	beq.n	80162e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80162d4:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <ip4_input_accept+0x50>)
 80162d6:	695b      	ldr	r3, [r3, #20]
 80162d8:	6879      	ldr	r1, [r7, #4]
 80162da:	4618      	mov	r0, r3
 80162dc:	f000 fa08 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 80162e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80162e6:	2301      	movs	r3, #1
 80162e8:	e000      	b.n	80162ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80162ea:	2300      	movs	r3, #0
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	20008000 	.word	0x20008000

080162f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b086      	sub	sp, #24
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	091b      	lsrs	r3, r3, #4
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b04      	cmp	r3, #4
 8016312:	d004      	beq.n	801631e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7f7 fee5 	bl	800e0e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801631a:	2300      	movs	r3, #0
 801631c:	e107      	b.n	801652e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	f003 030f 	and.w	r3, r3, #15
 8016326:	b2db      	uxtb	r3, r3
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	b2db      	uxtb	r3, r3
 801632c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	885b      	ldrh	r3, [r3, #2]
 8016332:	b29b      	uxth	r3, r3
 8016334:	4618      	mov	r0, r3
 8016336:	f7f6 fb29 	bl	800c98c <lwip_htons>
 801633a:	4603      	mov	r3, r0
 801633c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	891b      	ldrh	r3, [r3, #8]
 8016342:	89ba      	ldrh	r2, [r7, #12]
 8016344:	429a      	cmp	r2, r3
 8016346:	d204      	bcs.n	8016352 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016348:	89bb      	ldrh	r3, [r7, #12]
 801634a:	4619      	mov	r1, r3
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7f7 fd43 	bl	800ddd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	895b      	ldrh	r3, [r3, #10]
 8016356:	89fa      	ldrh	r2, [r7, #14]
 8016358:	429a      	cmp	r2, r3
 801635a:	d807      	bhi.n	801636c <ip4_input+0x74>
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	891b      	ldrh	r3, [r3, #8]
 8016360:	89ba      	ldrh	r2, [r7, #12]
 8016362:	429a      	cmp	r2, r3
 8016364:	d802      	bhi.n	801636c <ip4_input+0x74>
 8016366:	89fb      	ldrh	r3, [r7, #14]
 8016368:	2b13      	cmp	r3, #19
 801636a:	d804      	bhi.n	8016376 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7f7 feb9 	bl	800e0e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016372:	2300      	movs	r3, #0
 8016374:	e0db      	b.n	801652e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	691b      	ldr	r3, [r3, #16]
 801637a:	4a6f      	ldr	r2, [pc, #444]	; (8016538 <ip4_input+0x240>)
 801637c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	68db      	ldr	r3, [r3, #12]
 8016382:	4a6d      	ldr	r2, [pc, #436]	; (8016538 <ip4_input+0x240>)
 8016384:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016386:	4b6c      	ldr	r3, [pc, #432]	; (8016538 <ip4_input+0x240>)
 8016388:	695b      	ldr	r3, [r3, #20]
 801638a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801638e:	2be0      	cmp	r3, #224	; 0xe0
 8016390:	d112      	bne.n	80163b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016398:	f003 0301 	and.w	r3, r3, #1
 801639c:	b2db      	uxtb	r3, r3
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d007      	beq.n	80163b2 <ip4_input+0xba>
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	3304      	adds	r3, #4
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d002      	beq.n	80163b2 <ip4_input+0xba>
      netif = inp;
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	613b      	str	r3, [r7, #16]
 80163b0:	e02a      	b.n	8016408 <ip4_input+0x110>
    } else {
      netif = NULL;
 80163b2:	2300      	movs	r3, #0
 80163b4:	613b      	str	r3, [r7, #16]
 80163b6:	e027      	b.n	8016408 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80163b8:	6838      	ldr	r0, [r7, #0]
 80163ba:	f7ff ff73 	bl	80162a4 <ip4_input_accept>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d002      	beq.n	80163ca <ip4_input+0xd2>
      netif = inp;
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	613b      	str	r3, [r7, #16]
 80163c8:	e01e      	b.n	8016408 <ip4_input+0x110>
    } else {
      netif = NULL;
 80163ca:	2300      	movs	r3, #0
 80163cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80163ce:	4b5a      	ldr	r3, [pc, #360]	; (8016538 <ip4_input+0x240>)
 80163d0:	695b      	ldr	r3, [r3, #20]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	2b7f      	cmp	r3, #127	; 0x7f
 80163d6:	d017      	beq.n	8016408 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80163d8:	4b58      	ldr	r3, [pc, #352]	; (801653c <ip4_input+0x244>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	613b      	str	r3, [r7, #16]
 80163de:	e00e      	b.n	80163fe <ip4_input+0x106>
          if (netif == inp) {
 80163e0:	693a      	ldr	r2, [r7, #16]
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d006      	beq.n	80163f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80163e8:	6938      	ldr	r0, [r7, #16]
 80163ea:	f7ff ff5b 	bl	80162a4 <ip4_input_accept>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d108      	bne.n	8016406 <ip4_input+0x10e>
 80163f4:	e000      	b.n	80163f8 <ip4_input+0x100>
            continue;
 80163f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	613b      	str	r3, [r7, #16]
 80163fe:	693b      	ldr	r3, [r7, #16]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d1ed      	bne.n	80163e0 <ip4_input+0xe8>
 8016404:	e000      	b.n	8016408 <ip4_input+0x110>
            break;
 8016406:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016408:	4b4b      	ldr	r3, [pc, #300]	; (8016538 <ip4_input+0x240>)
 801640a:	691b      	ldr	r3, [r3, #16]
 801640c:	6839      	ldr	r1, [r7, #0]
 801640e:	4618      	mov	r0, r3
 8016410:	f000 f96e 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 8016414:	4603      	mov	r3, r0
 8016416:	2b00      	cmp	r3, #0
 8016418:	d105      	bne.n	8016426 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801641a:	4b47      	ldr	r3, [pc, #284]	; (8016538 <ip4_input+0x240>)
 801641c:	691b      	ldr	r3, [r3, #16]
 801641e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016422:	2be0      	cmp	r3, #224	; 0xe0
 8016424:	d104      	bne.n	8016430 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f7f7 fe5c 	bl	800e0e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801642c:	2300      	movs	r3, #0
 801642e:	e07e      	b.n	801652e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016430:	693b      	ldr	r3, [r7, #16]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d104      	bne.n	8016440 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f7f7 fe54 	bl	800e0e4 <pbuf_free>
    return ERR_OK;
 801643c:	2300      	movs	r3, #0
 801643e:	e076      	b.n	801652e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	88db      	ldrh	r3, [r3, #6]
 8016444:	b29b      	uxth	r3, r3
 8016446:	461a      	mov	r2, r3
 8016448:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801644c:	4013      	ands	r3, r2
 801644e:	2b00      	cmp	r3, #0
 8016450:	d00b      	beq.n	801646a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 fc92 	bl	8016d7c <ip4_reass>
 8016458:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d101      	bne.n	8016464 <ip4_input+0x16c>
      return ERR_OK;
 8016460:	2300      	movs	r3, #0
 8016462:	e064      	b.n	801652e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801646a:	4a33      	ldr	r2, [pc, #204]	; (8016538 <ip4_input+0x240>)
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016470:	4a31      	ldr	r2, [pc, #196]	; (8016538 <ip4_input+0x240>)
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016476:	4a30      	ldr	r2, [pc, #192]	; (8016538 <ip4_input+0x240>)
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	f003 030f 	and.w	r3, r3, #15
 8016484:	b2db      	uxtb	r3, r3
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	b2db      	uxtb	r3, r3
 801648a:	b29a      	uxth	r2, r3
 801648c:	4b2a      	ldr	r3, [pc, #168]	; (8016538 <ip4_input+0x240>)
 801648e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016490:	89fb      	ldrh	r3, [r7, #14]
 8016492:	4619      	mov	r1, r3
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7f7 fd9f 	bl	800dfd8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	7a5b      	ldrb	r3, [r3, #9]
 801649e:	2b11      	cmp	r3, #17
 80164a0:	d006      	beq.n	80164b0 <ip4_input+0x1b8>
 80164a2:	2b11      	cmp	r3, #17
 80164a4:	dc13      	bgt.n	80164ce <ip4_input+0x1d6>
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	d00c      	beq.n	80164c4 <ip4_input+0x1cc>
 80164aa:	2b06      	cmp	r3, #6
 80164ac:	d005      	beq.n	80164ba <ip4_input+0x1c2>
 80164ae:	e00e      	b.n	80164ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80164b0:	6839      	ldr	r1, [r7, #0]
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7fe fb5a 	bl	8014b6c <udp_input>
        break;
 80164b8:	e026      	b.n	8016508 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80164ba:	6839      	ldr	r1, [r7, #0]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7f9 ff17 	bl	80102f0 <tcp_input>
        break;
 80164c2:	e021      	b.n	8016508 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80164c4:	6839      	ldr	r1, [r7, #0]
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f7ff fcee 	bl	8015ea8 <icmp_input>
        break;
 80164cc:	e01c      	b.n	8016508 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80164ce:	4b1a      	ldr	r3, [pc, #104]	; (8016538 <ip4_input+0x240>)
 80164d0:	695b      	ldr	r3, [r3, #20]
 80164d2:	6939      	ldr	r1, [r7, #16]
 80164d4:	4618      	mov	r0, r3
 80164d6:	f000 f90b 	bl	80166f0 <ip4_addr_isbroadcast_u32>
 80164da:	4603      	mov	r3, r0
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d10f      	bne.n	8016500 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164e0:	4b15      	ldr	r3, [pc, #84]	; (8016538 <ip4_input+0x240>)
 80164e2:	695b      	ldr	r3, [r3, #20]
 80164e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80164e8:	2be0      	cmp	r3, #224	; 0xe0
 80164ea:	d009      	beq.n	8016500 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80164ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80164f0:	4619      	mov	r1, r3
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f7f7 fde3 	bl	800e0be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80164f8:	2102      	movs	r1, #2
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f7ff fdd8 	bl	80160b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f7f7 fdef 	bl	800e0e4 <pbuf_free>
        break;
 8016506:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016508:	4b0b      	ldr	r3, [pc, #44]	; (8016538 <ip4_input+0x240>)
 801650a:	2200      	movs	r2, #0
 801650c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801650e:	4b0a      	ldr	r3, [pc, #40]	; (8016538 <ip4_input+0x240>)
 8016510:	2200      	movs	r2, #0
 8016512:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016514:	4b08      	ldr	r3, [pc, #32]	; (8016538 <ip4_input+0x240>)
 8016516:	2200      	movs	r2, #0
 8016518:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801651a:	4b07      	ldr	r3, [pc, #28]	; (8016538 <ip4_input+0x240>)
 801651c:	2200      	movs	r2, #0
 801651e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016520:	4b05      	ldr	r3, [pc, #20]	; (8016538 <ip4_input+0x240>)
 8016522:	2200      	movs	r2, #0
 8016524:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016526:	4b04      	ldr	r3, [pc, #16]	; (8016538 <ip4_input+0x240>)
 8016528:	2200      	movs	r2, #0
 801652a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801652c:	2300      	movs	r3, #0
}
 801652e:	4618      	mov	r0, r3
 8016530:	3718      	adds	r7, #24
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	20008000 	.word	0x20008000
 801653c:	2000b704 	.word	0x2000b704

08016540 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b08a      	sub	sp, #40	; 0x28
 8016544:	af04      	add	r7, sp, #16
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
 801654c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d009      	beq.n	801656c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d003      	beq.n	8016566 <ip4_output_if+0x26>
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d102      	bne.n	801656c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	3304      	adds	r3, #4
 801656a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801656c:	78fa      	ldrb	r2, [r7, #3]
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	9302      	str	r3, [sp, #8]
 8016572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	f897 3020 	ldrb.w	r3, [r7, #32]
 801657c:	9300      	str	r3, [sp, #0]
 801657e:	4613      	mov	r3, r2
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	6979      	ldr	r1, [r7, #20]
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f000 f805 	bl	8016594 <ip4_output_if_src>
 801658a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801658c:	4618      	mov	r0, r3
 801658e:	3718      	adds	r7, #24
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b088      	sub	sp, #32
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
 80165a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	7b9b      	ldrb	r3, [r3, #14]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d006      	beq.n	80165b8 <ip4_output_if_src+0x24>
 80165aa:	4b4b      	ldr	r3, [pc, #300]	; (80166d8 <ip4_output_if_src+0x144>)
 80165ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80165b0:	494a      	ldr	r1, [pc, #296]	; (80166dc <ip4_output_if_src+0x148>)
 80165b2:	484b      	ldr	r0, [pc, #300]	; (80166e0 <ip4_output_if_src+0x14c>)
 80165b4:	f001 fb3e 	bl	8017c34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d060      	beq.n	8016680 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80165be:	2314      	movs	r3, #20
 80165c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80165c2:	2114      	movs	r1, #20
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7f7 fcf7 	bl	800dfb8 <pbuf_add_header>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d002      	beq.n	80165d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80165d0:	f06f 0301 	mvn.w	r3, #1
 80165d4:	e07c      	b.n	80166d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	895b      	ldrh	r3, [r3, #10]
 80165e0:	2b13      	cmp	r3, #19
 80165e2:	d806      	bhi.n	80165f2 <ip4_output_if_src+0x5e>
 80165e4:	4b3c      	ldr	r3, [pc, #240]	; (80166d8 <ip4_output_if_src+0x144>)
 80165e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80165ea:	493e      	ldr	r1, [pc, #248]	; (80166e4 <ip4_output_if_src+0x150>)
 80165ec:	483c      	ldr	r0, [pc, #240]	; (80166e0 <ip4_output_if_src+0x14c>)
 80165ee:	f001 fb21 	bl	8017c34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	78fa      	ldrb	r2, [r7, #3]
 80165f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80165fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016608:	8b7b      	ldrh	r3, [r7, #26]
 801660a:	089b      	lsrs	r3, r3, #2
 801660c:	b29b      	uxth	r3, r3
 801660e:	b2db      	uxtb	r3, r3
 8016610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016614:	b2da      	uxtb	r2, r3
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801661a:	69fb      	ldr	r3, [r7, #28]
 801661c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016620:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	891b      	ldrh	r3, [r3, #8]
 8016626:	4618      	mov	r0, r3
 8016628:	f7f6 f9b0 	bl	800c98c <lwip_htons>
 801662c:	4603      	mov	r3, r0
 801662e:	461a      	mov	r2, r3
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	2200      	movs	r2, #0
 8016638:	719a      	strb	r2, [r3, #6]
 801663a:	2200      	movs	r2, #0
 801663c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801663e:	4b2a      	ldr	r3, [pc, #168]	; (80166e8 <ip4_output_if_src+0x154>)
 8016640:	881b      	ldrh	r3, [r3, #0]
 8016642:	4618      	mov	r0, r3
 8016644:	f7f6 f9a2 	bl	800c98c <lwip_htons>
 8016648:	4603      	mov	r3, r0
 801664a:	461a      	mov	r2, r3
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016650:	4b25      	ldr	r3, [pc, #148]	; (80166e8 <ip4_output_if_src+0x154>)
 8016652:	881b      	ldrh	r3, [r3, #0]
 8016654:	3301      	adds	r3, #1
 8016656:	b29a      	uxth	r2, r3
 8016658:	4b23      	ldr	r3, [pc, #140]	; (80166e8 <ip4_output_if_src+0x154>)
 801665a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d104      	bne.n	801666c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016662:	4b22      	ldr	r3, [pc, #136]	; (80166ec <ip4_output_if_src+0x158>)
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	60da      	str	r2, [r3, #12]
 801666a:	e003      	b.n	8016674 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	69fb      	ldr	r3, [r7, #28]
 8016672:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016674:	69fb      	ldr	r3, [r7, #28]
 8016676:	2200      	movs	r2, #0
 8016678:	729a      	strb	r2, [r3, #10]
 801667a:	2200      	movs	r2, #0
 801667c:	72da      	strb	r2, [r3, #11]
 801667e:	e00f      	b.n	80166a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	895b      	ldrh	r3, [r3, #10]
 8016684:	2b13      	cmp	r3, #19
 8016686:	d802      	bhi.n	801668e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016688:	f06f 0301 	mvn.w	r3, #1
 801668c:	e020      	b.n	80166d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	691b      	ldr	r3, [r3, #16]
 8016698:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801669a:	f107 0314 	add.w	r3, r7, #20
 801669e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80166a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d00c      	beq.n	80166c2 <ip4_output_if_src+0x12e>
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	891a      	ldrh	r2, [r3, #8]
 80166ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d906      	bls.n	80166c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80166b4:	687a      	ldr	r2, [r7, #4]
 80166b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80166b8:	68f8      	ldr	r0, [r7, #12]
 80166ba:	f000 fd4d 	bl	8017158 <ip4_frag>
 80166be:	4603      	mov	r3, r0
 80166c0:	e006      	b.n	80166d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80166c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c4:	695b      	ldr	r3, [r3, #20]
 80166c6:	687a      	ldr	r2, [r7, #4]
 80166c8:	68f9      	ldr	r1, [r7, #12]
 80166ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166cc:	4798      	blx	r3
 80166ce:	4603      	mov	r3, r0
}
 80166d0:	4618      	mov	r0, r3
 80166d2:	3720      	adds	r7, #32
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	0801bd90 	.word	0x0801bd90
 80166dc:	0801bdc4 	.word	0x0801bdc4
 80166e0:	0801bdd0 	.word	0x0801bdd0
 80166e4:	0801bdf8 	.word	0x0801bdf8
 80166e8:	20004c22 	.word	0x20004c22
 80166ec:	0801c248 	.word	0x0801c248

080166f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80166f0:	b480      	push	{r7}
 80166f2:	b085      	sub	sp, #20
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016704:	d002      	beq.n	801670c <ip4_addr_isbroadcast_u32+0x1c>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d101      	bne.n	8016710 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801670c:	2301      	movs	r3, #1
 801670e:	e02a      	b.n	8016766 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016716:	f003 0302 	and.w	r3, r3, #2
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801671e:	2300      	movs	r3, #0
 8016720:	e021      	b.n	8016766 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	3304      	adds	r3, #4
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	429a      	cmp	r2, r3
 801672c:	d101      	bne.n	8016732 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801672e:	2300      	movs	r3, #0
 8016730:	e019      	b.n	8016766 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	3304      	adds	r3, #4
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	405a      	eors	r2, r3
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	3308      	adds	r3, #8
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	4013      	ands	r3, r2
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10d      	bne.n	8016764 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	3308      	adds	r3, #8
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	43da      	mvns	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	3308      	adds	r3, #8
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801675c:	429a      	cmp	r2, r3
 801675e:	d101      	bne.n	8016764 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016760:	2301      	movs	r3, #1
 8016762:	e000      	b.n	8016766 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016764:	2300      	movs	r3, #0
  }
}
 8016766:	4618      	mov	r0, r3
 8016768:	3714      	adds	r7, #20
 801676a:	46bd      	mov	sp, r7
 801676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016770:	4770      	bx	lr
	...

08016774 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b084      	sub	sp, #16
 8016778:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801677a:	2300      	movs	r3, #0
 801677c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801677e:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <ip_reass_tmr+0x54>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016784:	e018      	b.n	80167b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	7fdb      	ldrb	r3, [r3, #31]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d00b      	beq.n	80167a6 <ip_reass_tmr+0x32>
      r->timer--;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	7fdb      	ldrb	r3, [r3, #31]
 8016792:	3b01      	subs	r3, #1
 8016794:	b2da      	uxtb	r2, r3
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	60fb      	str	r3, [r7, #12]
 80167a4:	e008      	b.n	80167b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80167b0:	68b9      	ldr	r1, [r7, #8]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f000 f80a 	bl	80167cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d1e3      	bne.n	8016786 <ip_reass_tmr+0x12>
    }
  }
}
 80167be:	bf00      	nop
 80167c0:	bf00      	nop
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	20004c24 	.word	0x20004c24

080167cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b088      	sub	sp, #32
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80167d6:	2300      	movs	r3, #0
 80167d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80167da:	683a      	ldr	r2, [r7, #0]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d105      	bne.n	80167ee <ip_reass_free_complete_datagram+0x22>
 80167e2:	4b45      	ldr	r3, [pc, #276]	; (80168f8 <ip_reass_free_complete_datagram+0x12c>)
 80167e4:	22ab      	movs	r2, #171	; 0xab
 80167e6:	4945      	ldr	r1, [pc, #276]	; (80168fc <ip_reass_free_complete_datagram+0x130>)
 80167e8:	4845      	ldr	r0, [pc, #276]	; (8016900 <ip_reass_free_complete_datagram+0x134>)
 80167ea:	f001 fa23 	bl	8017c34 <iprintf>
  if (prev != NULL) {
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d00a      	beq.n	801680a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d005      	beq.n	801680a <ip_reass_free_complete_datagram+0x3e>
 80167fe:	4b3e      	ldr	r3, [pc, #248]	; (80168f8 <ip_reass_free_complete_datagram+0x12c>)
 8016800:	22ad      	movs	r2, #173	; 0xad
 8016802:	4940      	ldr	r1, [pc, #256]	; (8016904 <ip_reass_free_complete_datagram+0x138>)
 8016804:	483e      	ldr	r0, [pc, #248]	; (8016900 <ip_reass_free_complete_datagram+0x134>)
 8016806:	f001 fa15 	bl	8017c34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	889b      	ldrh	r3, [r3, #4]
 8016816:	b29b      	uxth	r3, r3
 8016818:	2b00      	cmp	r3, #0
 801681a:	d12a      	bne.n	8016872 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	6858      	ldr	r0, [r3, #4]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	3308      	adds	r3, #8
 8016832:	2214      	movs	r2, #20
 8016834:	4619      	mov	r1, r3
 8016836:	f001 f98c 	bl	8017b52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801683a:	2101      	movs	r1, #1
 801683c:	69b8      	ldr	r0, [r7, #24]
 801683e:	f7ff fc47 	bl	80160d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016842:	69b8      	ldr	r0, [r7, #24]
 8016844:	f7f7 fcdc 	bl	800e200 <pbuf_clen>
 8016848:	4603      	mov	r3, r0
 801684a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801684c:	8bfa      	ldrh	r2, [r7, #30]
 801684e:	8a7b      	ldrh	r3, [r7, #18]
 8016850:	4413      	add	r3, r2
 8016852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016856:	db05      	blt.n	8016864 <ip_reass_free_complete_datagram+0x98>
 8016858:	4b27      	ldr	r3, [pc, #156]	; (80168f8 <ip_reass_free_complete_datagram+0x12c>)
 801685a:	22bc      	movs	r2, #188	; 0xbc
 801685c:	492a      	ldr	r1, [pc, #168]	; (8016908 <ip_reass_free_complete_datagram+0x13c>)
 801685e:	4828      	ldr	r0, [pc, #160]	; (8016900 <ip_reass_free_complete_datagram+0x134>)
 8016860:	f001 f9e8 	bl	8017c34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016864:	8bfa      	ldrh	r2, [r7, #30]
 8016866:	8a7b      	ldrh	r3, [r7, #18]
 8016868:	4413      	add	r3, r2
 801686a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801686c:	69b8      	ldr	r0, [r7, #24]
 801686e:	f7f7 fc39 	bl	800e0e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016878:	e01f      	b.n	80168ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016880:	69bb      	ldr	r3, [r7, #24]
 8016882:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801688a:	68f8      	ldr	r0, [r7, #12]
 801688c:	f7f7 fcb8 	bl	800e200 <pbuf_clen>
 8016890:	4603      	mov	r3, r0
 8016892:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016894:	8bfa      	ldrh	r2, [r7, #30]
 8016896:	8a7b      	ldrh	r3, [r7, #18]
 8016898:	4413      	add	r3, r2
 801689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801689e:	db05      	blt.n	80168ac <ip_reass_free_complete_datagram+0xe0>
 80168a0:	4b15      	ldr	r3, [pc, #84]	; (80168f8 <ip_reass_free_complete_datagram+0x12c>)
 80168a2:	22cc      	movs	r2, #204	; 0xcc
 80168a4:	4918      	ldr	r1, [pc, #96]	; (8016908 <ip_reass_free_complete_datagram+0x13c>)
 80168a6:	4816      	ldr	r0, [pc, #88]	; (8016900 <ip_reass_free_complete_datagram+0x134>)
 80168a8:	f001 f9c4 	bl	8017c34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80168ac:	8bfa      	ldrh	r2, [r7, #30]
 80168ae:	8a7b      	ldrh	r3, [r7, #18]
 80168b0:	4413      	add	r3, r2
 80168b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f7f7 fc15 	bl	800e0e4 <pbuf_free>
  while (p != NULL) {
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d1dc      	bne.n	801687a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f000 f8c2 	bl	8016a4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80168c8:	4b10      	ldr	r3, [pc, #64]	; (801690c <ip_reass_free_complete_datagram+0x140>)
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	8bfa      	ldrh	r2, [r7, #30]
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d905      	bls.n	80168de <ip_reass_free_complete_datagram+0x112>
 80168d2:	4b09      	ldr	r3, [pc, #36]	; (80168f8 <ip_reass_free_complete_datagram+0x12c>)
 80168d4:	22d2      	movs	r2, #210	; 0xd2
 80168d6:	490e      	ldr	r1, [pc, #56]	; (8016910 <ip_reass_free_complete_datagram+0x144>)
 80168d8:	4809      	ldr	r0, [pc, #36]	; (8016900 <ip_reass_free_complete_datagram+0x134>)
 80168da:	f001 f9ab 	bl	8017c34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80168de:	4b0b      	ldr	r3, [pc, #44]	; (801690c <ip_reass_free_complete_datagram+0x140>)
 80168e0:	881a      	ldrh	r2, [r3, #0]
 80168e2:	8bfb      	ldrh	r3, [r7, #30]
 80168e4:	1ad3      	subs	r3, r2, r3
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	4b08      	ldr	r3, [pc, #32]	; (801690c <ip_reass_free_complete_datagram+0x140>)
 80168ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80168ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3720      	adds	r7, #32
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	0801be28 	.word	0x0801be28
 80168fc:	0801be64 	.word	0x0801be64
 8016900:	0801be70 	.word	0x0801be70
 8016904:	0801be98 	.word	0x0801be98
 8016908:	0801beac 	.word	0x0801beac
 801690c:	20004c28 	.word	0x20004c28
 8016910:	0801becc 	.word	0x0801becc

08016914 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b08a      	sub	sp, #40	; 0x28
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801691e:	2300      	movs	r3, #0
 8016920:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016922:	2300      	movs	r3, #0
 8016924:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016926:	2300      	movs	r3, #0
 8016928:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801692a:	2300      	movs	r3, #0
 801692c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801692e:	2300      	movs	r3, #0
 8016930:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016932:	4b28      	ldr	r3, [pc, #160]	; (80169d4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016938:	e030      	b.n	801699c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693c:	695a      	ldr	r2, [r3, #20]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	429a      	cmp	r2, r3
 8016944:	d10c      	bne.n	8016960 <ip_reass_remove_oldest_datagram+0x4c>
 8016946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016948:	699a      	ldr	r2, [r3, #24]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	691b      	ldr	r3, [r3, #16]
 801694e:	429a      	cmp	r2, r3
 8016950:	d106      	bne.n	8016960 <ip_reass_remove_oldest_datagram+0x4c>
 8016952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016954:	899a      	ldrh	r2, [r3, #12]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	889b      	ldrh	r3, [r3, #4]
 801695a:	b29b      	uxth	r3, r3
 801695c:	429a      	cmp	r2, r3
 801695e:	d014      	beq.n	801698a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	3301      	adds	r3, #1
 8016964:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016966:	6a3b      	ldr	r3, [r7, #32]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d104      	bne.n	8016976 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	61bb      	str	r3, [r7, #24]
 8016974:	e009      	b.n	801698a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	7fda      	ldrb	r2, [r3, #31]
 801697a:	6a3b      	ldr	r3, [r7, #32]
 801697c:	7fdb      	ldrb	r3, [r3, #31]
 801697e:	429a      	cmp	r2, r3
 8016980:	d803      	bhi.n	801698a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016984:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d001      	beq.n	8016996 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016994:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d1cb      	bne.n	801693a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80169a2:	6a3b      	ldr	r3, [r7, #32]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d008      	beq.n	80169ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80169a8:	69b9      	ldr	r1, [r7, #24]
 80169aa:	6a38      	ldr	r0, [r7, #32]
 80169ac:	f7ff ff0e 	bl	80167cc <ip_reass_free_complete_datagram>
 80169b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80169b2:	697a      	ldr	r2, [r7, #20]
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	4413      	add	r3, r2
 80169b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80169ba:	697a      	ldr	r2, [r7, #20]
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	429a      	cmp	r2, r3
 80169c0:	da02      	bge.n	80169c8 <ip_reass_remove_oldest_datagram+0xb4>
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	dcac      	bgt.n	8016922 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80169c8:	697b      	ldr	r3, [r7, #20]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3728      	adds	r7, #40	; 0x28
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	20004c24 	.word	0x20004c24

080169d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b084      	sub	sp, #16
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80169e2:	2004      	movs	r0, #4
 80169e4:	f7f6 fc88 	bl	800d2f8 <memp_malloc>
 80169e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d110      	bne.n	8016a12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80169f0:	6839      	ldr	r1, [r7, #0]
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7ff ff8e 	bl	8016914 <ip_reass_remove_oldest_datagram>
 80169f8:	4602      	mov	r2, r0
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	4293      	cmp	r3, r2
 80169fe:	dc03      	bgt.n	8016a08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016a00:	2004      	movs	r0, #4
 8016a02:	f7f6 fc79 	bl	800d2f8 <memp_malloc>
 8016a06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	e016      	b.n	8016a40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016a12:	2220      	movs	r2, #32
 8016a14:	2100      	movs	r1, #0
 8016a16:	68f8      	ldr	r0, [r7, #12]
 8016a18:	f001 f8a9 	bl	8017b6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	220f      	movs	r2, #15
 8016a20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016a22:	4b09      	ldr	r3, [pc, #36]	; (8016a48 <ip_reass_enqueue_new_datagram+0x70>)
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016a2a:	4a07      	ldr	r2, [pc, #28]	; (8016a48 <ip_reass_enqueue_new_datagram+0x70>)
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	3308      	adds	r3, #8
 8016a34:	2214      	movs	r2, #20
 8016a36:	6879      	ldr	r1, [r7, #4]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f001 f88a 	bl	8017b52 <memcpy>
  return ipr;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3710      	adds	r7, #16
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	20004c24 	.word	0x20004c24

08016a4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016a56:	4b10      	ldr	r3, [pc, #64]	; (8016a98 <ip_reass_dequeue_datagram+0x4c>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	687a      	ldr	r2, [r7, #4]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d104      	bne.n	8016a6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	4a0c      	ldr	r2, [pc, #48]	; (8016a98 <ip_reass_dequeue_datagram+0x4c>)
 8016a66:	6013      	str	r3, [r2, #0]
 8016a68:	e00d      	b.n	8016a86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d106      	bne.n	8016a7e <ip_reass_dequeue_datagram+0x32>
 8016a70:	4b0a      	ldr	r3, [pc, #40]	; (8016a9c <ip_reass_dequeue_datagram+0x50>)
 8016a72:	f240 1245 	movw	r2, #325	; 0x145
 8016a76:	490a      	ldr	r1, [pc, #40]	; (8016aa0 <ip_reass_dequeue_datagram+0x54>)
 8016a78:	480a      	ldr	r0, [pc, #40]	; (8016aa4 <ip_reass_dequeue_datagram+0x58>)
 8016a7a:	f001 f8db 	bl	8017c34 <iprintf>
    prev->next = ipr->next;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016a86:	6879      	ldr	r1, [r7, #4]
 8016a88:	2004      	movs	r0, #4
 8016a8a:	f7f6 fc87 	bl	800d39c <memp_free>
}
 8016a8e:	bf00      	nop
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	20004c24 	.word	0x20004c24
 8016a9c:	0801be28 	.word	0x0801be28
 8016aa0:	0801bef0 	.word	0x0801bef0
 8016aa4:	0801be70 	.word	0x0801be70

08016aa8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b08c      	sub	sp, #48	; 0x30
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016ab8:	2301      	movs	r3, #1
 8016aba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	885b      	ldrh	r3, [r3, #2]
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7f5 ff5f 	bl	800c98c <lwip_htons>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016ad2:	69fb      	ldr	r3, [r7, #28]
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	f003 030f 	and.w	r3, r3, #15
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016ae0:	7e7b      	ldrb	r3, [r7, #25]
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	8b7a      	ldrh	r2, [r7, #26]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d202      	bcs.n	8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016aea:	f04f 33ff 	mov.w	r3, #4294967295
 8016aee:	e135      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016af0:	7e7b      	ldrb	r3, [r7, #25]
 8016af2:	b29b      	uxth	r3, r3
 8016af4:	8b7a      	ldrh	r2, [r7, #26]
 8016af6:	1ad3      	subs	r3, r2, r3
 8016af8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016afa:	69fb      	ldr	r3, [r7, #28]
 8016afc:	88db      	ldrh	r3, [r3, #6]
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7f5 ff43 	bl	800c98c <lwip_htons>
 8016b06:	4603      	mov	r3, r0
 8016b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	00db      	lsls	r3, r3, #3
 8016b10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	701a      	strb	r2, [r3, #0]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	705a      	strb	r2, [r3, #1]
 8016b22:	2200      	movs	r2, #0
 8016b24:	709a      	strb	r2, [r3, #2]
 8016b26:	2200      	movs	r2, #0
 8016b28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2c:	8afa      	ldrh	r2, [r7, #22]
 8016b2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016b30:	8afa      	ldrh	r2, [r7, #22]
 8016b32:	8b7b      	ldrh	r3, [r7, #26]
 8016b34:	4413      	add	r3, r2
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3e:	88db      	ldrh	r3, [r3, #6]
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	8afa      	ldrh	r2, [r7, #22]
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d902      	bls.n	8016b4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b48:	f04f 33ff 	mov.w	r3, #4294967295
 8016b4c:	e106      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	627b      	str	r3, [r7, #36]	; 0x24
 8016b54:	e068      	b.n	8016c28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5e:	889b      	ldrh	r3, [r3, #4]
 8016b60:	b29a      	uxth	r2, r3
 8016b62:	693b      	ldr	r3, [r7, #16]
 8016b64:	889b      	ldrh	r3, [r3, #4]
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d235      	bcs.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d020      	beq.n	8016bba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	889b      	ldrh	r3, [r3, #4]
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b80:	88db      	ldrh	r3, [r3, #6]
 8016b82:	b29b      	uxth	r3, r3
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d307      	bcc.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8a:	88db      	ldrh	r3, [r3, #6]
 8016b8c:	b29a      	uxth	r2, r3
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	889b      	ldrh	r3, [r3, #4]
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d902      	bls.n	8016b9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b98:	f04f 33ff 	mov.w	r3, #4294967295
 8016b9c:	e0de      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ba0:	68ba      	ldr	r2, [r7, #8]
 8016ba2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ba6:	88db      	ldrh	r3, [r3, #6]
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bac:	889b      	ldrh	r3, [r3, #4]
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d03d      	beq.n	8016c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016bb8:	e03a      	b.n	8016c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bbc:	88db      	ldrh	r3, [r3, #6]
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	889b      	ldrh	r3, [r3, #4]
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d902      	bls.n	8016bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016bca:	f04f 33ff 	mov.w	r3, #4294967295
 8016bce:	e0c5      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	68ba      	ldr	r2, [r7, #8]
 8016bd4:	605a      	str	r2, [r3, #4]
      break;
 8016bd6:	e02b      	b.n	8016c30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bda:	889b      	ldrh	r3, [r3, #4]
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	889b      	ldrh	r3, [r3, #4]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d102      	bne.n	8016bee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016be8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bec:	e0b6      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf0:	889b      	ldrh	r3, [r3, #4]
 8016bf2:	b29a      	uxth	r2, r3
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	88db      	ldrh	r3, [r3, #6]
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d202      	bcs.n	8016c04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8016c02:	e0ab      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d009      	beq.n	8016c1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c0c:	88db      	ldrh	r3, [r3, #6]
 8016c0e:	b29a      	uxth	r2, r3
 8016c10:	693b      	ldr	r3, [r7, #16]
 8016c12:	889b      	ldrh	r3, [r3, #4]
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d001      	beq.n	8016c1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d193      	bne.n	8016b56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016c2e:	e000      	b.n	8016c32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016c30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d12d      	bne.n	8016c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d01c      	beq.n	8016c78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c40:	88db      	ldrh	r3, [r3, #6]
 8016c42:	b29a      	uxth	r2, r3
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	889b      	ldrh	r3, [r3, #4]
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d906      	bls.n	8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016c4e:	4b45      	ldr	r3, [pc, #276]	; (8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016c54:	4944      	ldr	r1, [pc, #272]	; (8016d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016c56:	4845      	ldr	r0, [pc, #276]	; (8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c58:	f000 ffec 	bl	8017c34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c5e:	68ba      	ldr	r2, [r7, #8]
 8016c60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c64:	88db      	ldrh	r3, [r3, #6]
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c6a:	889b      	ldrh	r3, [r3, #4]
 8016c6c:	b29b      	uxth	r3, r3
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d010      	beq.n	8016c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016c72:	2300      	movs	r3, #0
 8016c74:	623b      	str	r3, [r7, #32]
 8016c76:	e00d      	b.n	8016c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	685b      	ldr	r3, [r3, #4]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d006      	beq.n	8016c8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016c80:	4b38      	ldr	r3, [pc, #224]	; (8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c82:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016c86:	493a      	ldr	r1, [pc, #232]	; (8016d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016c88:	4838      	ldr	r0, [pc, #224]	; (8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c8a:	f000 ffd3 	bl	8017c34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	68ba      	ldr	r2, [r7, #8]
 8016c92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d105      	bne.n	8016ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	7f9b      	ldrb	r3, [r3, #30]
 8016c9e:	f003 0301 	and.w	r3, r3, #1
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d059      	beq.n	8016d5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016ca6:	6a3b      	ldr	r3, [r7, #32]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d04f      	beq.n	8016d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d006      	beq.n	8016cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	889b      	ldrh	r3, [r3, #4]
 8016cbc:	b29b      	uxth	r3, r3
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d002      	beq.n	8016cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	623b      	str	r3, [r7, #32]
 8016cc6:	e041      	b.n	8016d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016cd2:	e012      	b.n	8016cfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cdc:	88db      	ldrh	r3, [r3, #6]
 8016cde:	b29a      	uxth	r2, r3
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	889b      	ldrh	r3, [r3, #4]
 8016ce4:	b29b      	uxth	r3, r3
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d002      	beq.n	8016cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016cea:	2300      	movs	r3, #0
 8016cec:	623b      	str	r3, [r7, #32]
            break;
 8016cee:	e007      	b.n	8016d00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d1e9      	bne.n	8016cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016d00:	6a3b      	ldr	r3, [r7, #32]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d022      	beq.n	8016d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d106      	bne.n	8016d1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016d0e:	4b15      	ldr	r3, [pc, #84]	; (8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d10:	f240 12df 	movw	r2, #479	; 0x1df
 8016d14:	4917      	ldr	r1, [pc, #92]	; (8016d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016d16:	4815      	ldr	r0, [pc, #84]	; (8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d18:	f000 ff8c 	bl	8017c34 <iprintf>
          LWIP_ASSERT("sanity check",
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	685b      	ldr	r3, [r3, #4]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d106      	bne.n	8016d36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016d28:	4b0e      	ldr	r3, [pc, #56]	; (8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016d2e:	4911      	ldr	r1, [pc, #68]	; (8016d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016d30:	480e      	ldr	r0, [pc, #56]	; (8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d32:	f000 ff7f 	bl	8017c34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d006      	beq.n	8016d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016d3e:	4b09      	ldr	r3, [pc, #36]	; (8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d40:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016d44:	490c      	ldr	r1, [pc, #48]	; (8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016d46:	4809      	ldr	r0, [pc, #36]	; (8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d48:	f000 ff74 	bl	8017c34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016d4c:	6a3b      	ldr	r3, [r7, #32]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	bf14      	ite	ne
 8016d52:	2301      	movne	r3, #1
 8016d54:	2300      	moveq	r3, #0
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	e000      	b.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016d5a:	2300      	movs	r3, #0
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3730      	adds	r7, #48	; 0x30
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}
 8016d64:	0801be28 	.word	0x0801be28
 8016d68:	0801bf0c 	.word	0x0801bf0c
 8016d6c:	0801be70 	.word	0x0801be70
 8016d70:	0801bf2c 	.word	0x0801bf2c
 8016d74:	0801bf64 	.word	0x0801bf64
 8016d78:	0801bf74 	.word	0x0801bf74

08016d7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b08e      	sub	sp, #56	; 0x38
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	f003 030f 	and.w	r3, r3, #15
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	2b14      	cmp	r3, #20
 8016d9a:	f040 8167 	bne.w	801706c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da0:	88db      	ldrh	r3, [r3, #6]
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7f5 fdf1 	bl	800c98c <lwip_htons>
 8016daa:	4603      	mov	r3, r0
 8016dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	00db      	lsls	r3, r3, #3
 8016db4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db8:	885b      	ldrh	r3, [r3, #2]
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7f5 fde5 	bl	800c98c <lwip_htons>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	f003 030f 	and.w	r3, r3, #15
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	009b      	lsls	r3, r3, #2
 8016dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016dde:	429a      	cmp	r2, r3
 8016de0:	f0c0 8146 	bcc.w	8017070 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016de8:	b29b      	uxth	r3, r3
 8016dea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f7f7 fa05 	bl	800e200 <pbuf_clen>
 8016df6:	4603      	mov	r3, r0
 8016df8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016dfa:	4b9f      	ldr	r3, [pc, #636]	; (8017078 <ip4_reass+0x2fc>)
 8016dfc:	881b      	ldrh	r3, [r3, #0]
 8016dfe:	461a      	mov	r2, r3
 8016e00:	8c3b      	ldrh	r3, [r7, #32]
 8016e02:	4413      	add	r3, r2
 8016e04:	2b0a      	cmp	r3, #10
 8016e06:	dd10      	ble.n	8016e2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e08:	8c3b      	ldrh	r3, [r7, #32]
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e0e:	f7ff fd81 	bl	8016914 <ip_reass_remove_oldest_datagram>
 8016e12:	4603      	mov	r3, r0
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	f000 812d 	beq.w	8017074 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016e1a:	4b97      	ldr	r3, [pc, #604]	; (8017078 <ip4_reass+0x2fc>)
 8016e1c:	881b      	ldrh	r3, [r3, #0]
 8016e1e:	461a      	mov	r2, r3
 8016e20:	8c3b      	ldrh	r3, [r7, #32]
 8016e22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e24:	2b0a      	cmp	r3, #10
 8016e26:	f300 8125 	bgt.w	8017074 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e2a:	4b94      	ldr	r3, [pc, #592]	; (801707c <ip4_reass+0x300>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8016e30:	e015      	b.n	8016e5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e34:	695a      	ldr	r2, [r3, #20]
 8016e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d10c      	bne.n	8016e58 <ip4_reass+0xdc>
 8016e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e40:	699a      	ldr	r2, [r3, #24]
 8016e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e44:	691b      	ldr	r3, [r3, #16]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d106      	bne.n	8016e58 <ip4_reass+0xdc>
 8016e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4c:	899a      	ldrh	r2, [r3, #12]
 8016e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e50:	889b      	ldrh	r3, [r3, #4]
 8016e52:	b29b      	uxth	r3, r3
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d006      	beq.n	8016e66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8016e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d1e6      	bne.n	8016e32 <ip4_reass+0xb6>
 8016e64:	e000      	b.n	8016e68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016e66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d109      	bne.n	8016e82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016e6e:	8c3b      	ldrh	r3, [r7, #32]
 8016e70:	4619      	mov	r1, r3
 8016e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e74:	f7ff fdb0 	bl	80169d8 <ip_reass_enqueue_new_datagram>
 8016e78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d11c      	bne.n	8016eba <ip4_reass+0x13e>
      goto nullreturn;
 8016e80:	e109      	b.n	8017096 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e84:	88db      	ldrh	r3, [r3, #6]
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7f5 fd7f 	bl	800c98c <lwip_htons>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d110      	bne.n	8016eba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9a:	89db      	ldrh	r3, [r3, #14]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7f5 fd75 	bl	800c98c <lwip_htons>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d006      	beq.n	8016eba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eae:	3308      	adds	r3, #8
 8016eb0:	2214      	movs	r2, #20
 8016eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 fe4c 	bl	8017b52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ebc:	88db      	ldrh	r3, [r3, #6]
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	f003 0320 	and.w	r3, r3, #32
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	bf0c      	ite	eq
 8016ec8:	2301      	moveq	r3, #1
 8016eca:	2300      	movne	r3, #0
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00e      	beq.n	8016ef4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016ed6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016eda:	4413      	add	r3, r2
 8016edc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016ede:	8b7a      	ldrh	r2, [r7, #26]
 8016ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	f0c0 80a0 	bcc.w	8017028 <ip4_reass+0x2ac>
 8016ee8:	8b7b      	ldrh	r3, [r7, #26]
 8016eea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016eee:	4293      	cmp	r3, r2
 8016ef0:	f200 809a 	bhi.w	8017028 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016ef4:	69fa      	ldr	r2, [r7, #28]
 8016ef6:	6879      	ldr	r1, [r7, #4]
 8016ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016efa:	f7ff fdd5 	bl	8016aa8 <ip_reass_chain_frag_into_datagram_and_validate>
 8016efe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f06:	f000 8091 	beq.w	801702c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016f0a:	4b5b      	ldr	r3, [pc, #364]	; (8017078 <ip4_reass+0x2fc>)
 8016f0c:	881a      	ldrh	r2, [r3, #0]
 8016f0e:	8c3b      	ldrh	r3, [r7, #32]
 8016f10:	4413      	add	r3, r2
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	4b58      	ldr	r3, [pc, #352]	; (8017078 <ip4_reass+0x2fc>)
 8016f16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d00d      	beq.n	8016f3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016f1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f22:	4413      	add	r3, r2
 8016f24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f28:	8a7a      	ldrh	r2, [r7, #18]
 8016f2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2e:	7f9b      	ldrb	r3, [r3, #30]
 8016f30:	f043 0301 	orr.w	r3, r3, #1
 8016f34:	b2da      	uxtb	r2, r3
 8016f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	2b01      	cmp	r3, #1
 8016f3e:	d171      	bne.n	8017024 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f42:	8b9b      	ldrh	r3, [r3, #28]
 8016f44:	3314      	adds	r3, #20
 8016f46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5c:	3308      	adds	r3, #8
 8016f5e:	2214      	movs	r2, #20
 8016f60:	4619      	mov	r1, r3
 8016f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f64:	f000 fdf5 	bl	8017b52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016f68:	8a3b      	ldrh	r3, [r7, #16]
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7f5 fd0e 	bl	800c98c <lwip_htons>
 8016f70:	4603      	mov	r3, r0
 8016f72:	461a      	mov	r2, r3
 8016f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	719a      	strb	r2, [r3, #6]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f84:	2200      	movs	r2, #0
 8016f86:	729a      	strb	r2, [r3, #10]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016f92:	e00d      	b.n	8016fb0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016f9a:	2114      	movs	r1, #20
 8016f9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016f9e:	f7f7 f81b 	bl	800dfd8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f7f7 f96b 	bl	800e280 <pbuf_cat>
      r = iprh->next_pbuf;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d1ee      	bne.n	8016f94 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016fb6:	4b31      	ldr	r3, [pc, #196]	; (801707c <ip4_reass+0x300>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d102      	bne.n	8016fc6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016fc4:	e010      	b.n	8016fe8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016fc6:	4b2d      	ldr	r3, [pc, #180]	; (801707c <ip4_reass+0x300>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016fcc:	e007      	b.n	8016fde <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d006      	beq.n	8016fe6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d1f4      	bne.n	8016fce <ip4_reass+0x252>
 8016fe4:	e000      	b.n	8016fe8 <ip4_reass+0x26c>
          break;
 8016fe6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fec:	f7ff fd2e 	bl	8016a4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f7f7 f905 	bl	800e200 <pbuf_clen>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016ffa:	4b1f      	ldr	r3, [pc, #124]	; (8017078 <ip4_reass+0x2fc>)
 8016ffc:	881b      	ldrh	r3, [r3, #0]
 8016ffe:	8c3a      	ldrh	r2, [r7, #32]
 8017000:	429a      	cmp	r2, r3
 8017002:	d906      	bls.n	8017012 <ip4_reass+0x296>
 8017004:	4b1e      	ldr	r3, [pc, #120]	; (8017080 <ip4_reass+0x304>)
 8017006:	f240 229b 	movw	r2, #667	; 0x29b
 801700a:	491e      	ldr	r1, [pc, #120]	; (8017084 <ip4_reass+0x308>)
 801700c:	481e      	ldr	r0, [pc, #120]	; (8017088 <ip4_reass+0x30c>)
 801700e:	f000 fe11 	bl	8017c34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017012:	4b19      	ldr	r3, [pc, #100]	; (8017078 <ip4_reass+0x2fc>)
 8017014:	881a      	ldrh	r2, [r3, #0]
 8017016:	8c3b      	ldrh	r3, [r7, #32]
 8017018:	1ad3      	subs	r3, r2, r3
 801701a:	b29a      	uxth	r2, r3
 801701c:	4b16      	ldr	r3, [pc, #88]	; (8017078 <ip4_reass+0x2fc>)
 801701e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	e03c      	b.n	801709e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017024:	2300      	movs	r3, #0
 8017026:	e03a      	b.n	801709e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017028:	bf00      	nop
 801702a:	e000      	b.n	801702e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801702c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017030:	2b00      	cmp	r3, #0
 8017032:	d106      	bne.n	8017042 <ip4_reass+0x2c6>
 8017034:	4b12      	ldr	r3, [pc, #72]	; (8017080 <ip4_reass+0x304>)
 8017036:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801703a:	4914      	ldr	r1, [pc, #80]	; (801708c <ip4_reass+0x310>)
 801703c:	4812      	ldr	r0, [pc, #72]	; (8017088 <ip4_reass+0x30c>)
 801703e:	f000 fdf9 	bl	8017c34 <iprintf>
  if (ipr->p == NULL) {
 8017042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d124      	bne.n	8017094 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801704a:	4b0c      	ldr	r3, [pc, #48]	; (801707c <ip4_reass+0x300>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017050:	429a      	cmp	r2, r3
 8017052:	d006      	beq.n	8017062 <ip4_reass+0x2e6>
 8017054:	4b0a      	ldr	r3, [pc, #40]	; (8017080 <ip4_reass+0x304>)
 8017056:	f240 22ab 	movw	r2, #683	; 0x2ab
 801705a:	490d      	ldr	r1, [pc, #52]	; (8017090 <ip4_reass+0x314>)
 801705c:	480a      	ldr	r0, [pc, #40]	; (8017088 <ip4_reass+0x30c>)
 801705e:	f000 fde9 	bl	8017c34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017062:	2100      	movs	r1, #0
 8017064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017066:	f7ff fcf1 	bl	8016a4c <ip_reass_dequeue_datagram>
 801706a:	e014      	b.n	8017096 <ip4_reass+0x31a>
    goto nullreturn;
 801706c:	bf00      	nop
 801706e:	e012      	b.n	8017096 <ip4_reass+0x31a>
    goto nullreturn;
 8017070:	bf00      	nop
 8017072:	e010      	b.n	8017096 <ip4_reass+0x31a>
      goto nullreturn;
 8017074:	bf00      	nop
 8017076:	e00e      	b.n	8017096 <ip4_reass+0x31a>
 8017078:	20004c28 	.word	0x20004c28
 801707c:	20004c24 	.word	0x20004c24
 8017080:	0801be28 	.word	0x0801be28
 8017084:	0801bf98 	.word	0x0801bf98
 8017088:	0801be70 	.word	0x0801be70
 801708c:	0801bfb4 	.word	0x0801bfb4
 8017090:	0801bfc0 	.word	0x0801bfc0
  }

nullreturn:
 8017094:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7f7 f824 	bl	800e0e4 <pbuf_free>
  return NULL;
 801709c:	2300      	movs	r3, #0
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3738      	adds	r7, #56	; 0x38
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	bf00      	nop

080170a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80170ac:	2005      	movs	r0, #5
 80170ae:	f7f6 f923 	bl	800d2f8 <memp_malloc>
 80170b2:	4603      	mov	r3, r0
}
 80170b4:	4618      	mov	r0, r3
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d106      	bne.n	80170d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80170c6:	4b07      	ldr	r3, [pc, #28]	; (80170e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80170c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80170cc:	4906      	ldr	r1, [pc, #24]	; (80170e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80170ce:	4807      	ldr	r0, [pc, #28]	; (80170ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80170d0:	f000 fdb0 	bl	8017c34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80170d4:	6879      	ldr	r1, [r7, #4]
 80170d6:	2005      	movs	r0, #5
 80170d8:	f7f6 f960 	bl	800d39c <memp_free>
}
 80170dc:	bf00      	nop
 80170de:	3708      	adds	r7, #8
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	0801be28 	.word	0x0801be28
 80170e8:	0801bfe0 	.word	0x0801bfe0
 80170ec:	0801be70 	.word	0x0801be70

080170f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b084      	sub	sp, #16
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d106      	bne.n	8017110 <ipfrag_free_pbuf_custom+0x20>
 8017102:	4b11      	ldr	r3, [pc, #68]	; (8017148 <ipfrag_free_pbuf_custom+0x58>)
 8017104:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017108:	4910      	ldr	r1, [pc, #64]	; (801714c <ipfrag_free_pbuf_custom+0x5c>)
 801710a:	4811      	ldr	r0, [pc, #68]	; (8017150 <ipfrag_free_pbuf_custom+0x60>)
 801710c:	f000 fd92 	bl	8017c34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017110:	68fa      	ldr	r2, [r7, #12]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	429a      	cmp	r2, r3
 8017116:	d006      	beq.n	8017126 <ipfrag_free_pbuf_custom+0x36>
 8017118:	4b0b      	ldr	r3, [pc, #44]	; (8017148 <ipfrag_free_pbuf_custom+0x58>)
 801711a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801711e:	490d      	ldr	r1, [pc, #52]	; (8017154 <ipfrag_free_pbuf_custom+0x64>)
 8017120:	480b      	ldr	r0, [pc, #44]	; (8017150 <ipfrag_free_pbuf_custom+0x60>)
 8017122:	f000 fd87 	bl	8017c34 <iprintf>
  if (pcr->original != NULL) {
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	695b      	ldr	r3, [r3, #20]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d004      	beq.n	8017138 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	695b      	ldr	r3, [r3, #20]
 8017132:	4618      	mov	r0, r3
 8017134:	f7f6 ffd6 	bl	800e0e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017138:	68f8      	ldr	r0, [r7, #12]
 801713a:	f7ff ffbd 	bl	80170b8 <ip_frag_free_pbuf_custom_ref>
}
 801713e:	bf00      	nop
 8017140:	3710      	adds	r7, #16
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	0801be28 	.word	0x0801be28
 801714c:	0801bfec 	.word	0x0801bfec
 8017150:	0801be70 	.word	0x0801be70
 8017154:	0801bff8 	.word	0x0801bff8

08017158 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b094      	sub	sp, #80	; 0x50
 801715c:	af02      	add	r7, sp, #8
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017164:	2300      	movs	r3, #0
 8017166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801716e:	3b14      	subs	r3, #20
 8017170:	2b00      	cmp	r3, #0
 8017172:	da00      	bge.n	8017176 <ip4_frag+0x1e>
 8017174:	3307      	adds	r3, #7
 8017176:	10db      	asrs	r3, r3, #3
 8017178:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801717a:	2314      	movs	r3, #20
 801717c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017186:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	f003 030f 	and.w	r3, r3, #15
 8017190:	b2db      	uxtb	r3, r3
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b14      	cmp	r3, #20
 8017198:	d002      	beq.n	80171a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801719a:	f06f 0305 	mvn.w	r3, #5
 801719e:	e110      	b.n	80173c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	895b      	ldrh	r3, [r3, #10]
 80171a4:	2b13      	cmp	r3, #19
 80171a6:	d809      	bhi.n	80171bc <ip4_frag+0x64>
 80171a8:	4b88      	ldr	r3, [pc, #544]	; (80173cc <ip4_frag+0x274>)
 80171aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80171ae:	4988      	ldr	r1, [pc, #544]	; (80173d0 <ip4_frag+0x278>)
 80171b0:	4888      	ldr	r0, [pc, #544]	; (80173d4 <ip4_frag+0x27c>)
 80171b2:	f000 fd3f 	bl	8017c34 <iprintf>
 80171b6:	f06f 0305 	mvn.w	r3, #5
 80171ba:	e102      	b.n	80173c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80171bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171be:	88db      	ldrh	r3, [r3, #6]
 80171c0:	b29b      	uxth	r3, r3
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7f5 fbe2 	bl	800c98c <lwip_htons>
 80171c8:	4603      	mov	r3, r0
 80171ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80171cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80171d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80171dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	891b      	ldrh	r3, [r3, #8]
 80171e2:	3b14      	subs	r3, #20
 80171e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80171e8:	e0e1      	b.n	80173ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80171ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80171f4:	4293      	cmp	r3, r2
 80171f6:	bf28      	it	cs
 80171f8:	4613      	movcs	r3, r2
 80171fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80171fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017200:	2114      	movs	r1, #20
 8017202:	200e      	movs	r0, #14
 8017204:	f7f6 fc8a 	bl	800db1c <pbuf_alloc>
 8017208:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	2b00      	cmp	r3, #0
 801720e:	f000 80d5 	beq.w	80173bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017214:	895b      	ldrh	r3, [r3, #10]
 8017216:	2b13      	cmp	r3, #19
 8017218:	d806      	bhi.n	8017228 <ip4_frag+0xd0>
 801721a:	4b6c      	ldr	r3, [pc, #432]	; (80173cc <ip4_frag+0x274>)
 801721c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017220:	496d      	ldr	r1, [pc, #436]	; (80173d8 <ip4_frag+0x280>)
 8017222:	486c      	ldr	r0, [pc, #432]	; (80173d4 <ip4_frag+0x27c>)
 8017224:	f000 fd06 	bl	8017c34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	2214      	movs	r2, #20
 801722e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017230:	4618      	mov	r0, r3
 8017232:	f000 fc8e 	bl	8017b52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801723c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801723e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017242:	e064      	b.n	801730e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	895a      	ldrh	r2, [r3, #10]
 8017248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801724a:	1ad3      	subs	r3, r2, r3
 801724c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	895b      	ldrh	r3, [r3, #10]
 8017252:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017254:	429a      	cmp	r2, r3
 8017256:	d906      	bls.n	8017266 <ip4_frag+0x10e>
 8017258:	4b5c      	ldr	r3, [pc, #368]	; (80173cc <ip4_frag+0x274>)
 801725a:	f240 322d 	movw	r2, #813	; 0x32d
 801725e:	495f      	ldr	r1, [pc, #380]	; (80173dc <ip4_frag+0x284>)
 8017260:	485c      	ldr	r0, [pc, #368]	; (80173d4 <ip4_frag+0x27c>)
 8017262:	f000 fce7 	bl	8017c34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017266:	8bfa      	ldrh	r2, [r7, #30]
 8017268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801726c:	4293      	cmp	r3, r2
 801726e:	bf28      	it	cs
 8017270:	4613      	movcs	r3, r2
 8017272:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801727a:	2b00      	cmp	r3, #0
 801727c:	d105      	bne.n	801728a <ip4_frag+0x132>
        poff = 0;
 801727e:	2300      	movs	r3, #0
 8017280:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	60fb      	str	r3, [r7, #12]
        continue;
 8017288:	e041      	b.n	801730e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801728a:	f7ff ff0d 	bl	80170a8 <ip_frag_alloc_pbuf_custom_ref>
 801728e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017290:	69bb      	ldr	r3, [r7, #24]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d103      	bne.n	801729e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017298:	f7f6 ff24 	bl	800e0e4 <pbuf_free>
        goto memerr;
 801729c:	e08f      	b.n	80173be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801729e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80172a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80172a6:	4413      	add	r3, r2
 80172a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80172ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80172b0:	9201      	str	r2, [sp, #4]
 80172b2:	9300      	str	r3, [sp, #0]
 80172b4:	4603      	mov	r3, r0
 80172b6:	2241      	movs	r2, #65	; 0x41
 80172b8:	2000      	movs	r0, #0
 80172ba:	f7f6 fd59 	bl	800dd70 <pbuf_alloced_custom>
 80172be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d106      	bne.n	80172d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80172c6:	69b8      	ldr	r0, [r7, #24]
 80172c8:	f7ff fef6 	bl	80170b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80172cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ce:	f7f6 ff09 	bl	800e0e4 <pbuf_free>
        goto memerr;
 80172d2:	e074      	b.n	80173be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f7f6 ffab 	bl	800e230 <pbuf_ref>
      pcr->original = p;
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	68fa      	ldr	r2, [r7, #12]
 80172de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	4a3f      	ldr	r2, [pc, #252]	; (80173e0 <ip4_frag+0x288>)
 80172e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80172e6:	6979      	ldr	r1, [r7, #20]
 80172e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ea:	f7f6 ffc9 	bl	800e280 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80172ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80172f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80172f6:	1ad3      	subs	r3, r2, r3
 80172f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80172fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017300:	2b00      	cmp	r3, #0
 8017302:	d004      	beq.n	801730e <ip4_frag+0x1b6>
        poff = 0;
 8017304:	2300      	movs	r3, #0
 8017306:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801730e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017312:	2b00      	cmp	r3, #0
 8017314:	d196      	bne.n	8017244 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017316:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801731c:	4413      	add	r3, r2
 801731e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017324:	f1a3 0213 	sub.w	r2, r3, #19
 8017328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801732c:	429a      	cmp	r2, r3
 801732e:	bfcc      	ite	gt
 8017330:	2301      	movgt	r3, #1
 8017332:	2300      	movle	r3, #0
 8017334:	b2db      	uxtb	r3, r3
 8017336:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801733c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017340:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017342:	6a3b      	ldr	r3, [r7, #32]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d002      	beq.n	801734e <ip4_frag+0x1f6>
 8017348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734a:	2b00      	cmp	r3, #0
 801734c:	d003      	beq.n	8017356 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801734e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017354:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017358:	4618      	mov	r0, r3
 801735a:	f7f5 fb17 	bl	800c98c <lwip_htons>
 801735e:	4603      	mov	r3, r0
 8017360:	461a      	mov	r2, r3
 8017362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017364:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017368:	3314      	adds	r3, #20
 801736a:	b29b      	uxth	r3, r3
 801736c:	4618      	mov	r0, r3
 801736e:	f7f5 fb0d 	bl	800c98c <lwip_htons>
 8017372:	4603      	mov	r3, r0
 8017374:	461a      	mov	r2, r3
 8017376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017378:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801737c:	2200      	movs	r2, #0
 801737e:	729a      	strb	r2, [r3, #10]
 8017380:	2200      	movs	r2, #0
 8017382:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	695b      	ldr	r3, [r3, #20]
 8017388:	687a      	ldr	r2, [r7, #4]
 801738a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801738c:	68b8      	ldr	r0, [r7, #8]
 801738e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017392:	f7f6 fea7 	bl	800e0e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017396:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801739a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801739c:	1ad3      	subs	r3, r2, r3
 801739e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80173a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80173a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173a8:	4413      	add	r3, r2
 80173aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80173ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f47f af19 	bne.w	80171ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80173b8:	2300      	movs	r3, #0
 80173ba:	e002      	b.n	80173c2 <ip4_frag+0x26a>
      goto memerr;
 80173bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80173be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3748      	adds	r7, #72	; 0x48
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	0801be28 	.word	0x0801be28
 80173d0:	0801c004 	.word	0x0801c004
 80173d4:	0801be70 	.word	0x0801be70
 80173d8:	0801c020 	.word	0x0801c020
 80173dc:	0801c040 	.word	0x0801c040
 80173e0:	080170f1 	.word	0x080170f1

080173e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b086      	sub	sp, #24
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
 80173ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80173ee:	230e      	movs	r3, #14
 80173f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	895b      	ldrh	r3, [r3, #10]
 80173f6:	2b0e      	cmp	r3, #14
 80173f8:	d96e      	bls.n	80174d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	7bdb      	ldrb	r3, [r3, #15]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d106      	bne.n	8017410 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017408:	3301      	adds	r3, #1
 801740a:	b2da      	uxtb	r2, r3
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	685b      	ldr	r3, [r3, #4]
 8017414:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017416:	693b      	ldr	r3, [r7, #16]
 8017418:	7b1a      	ldrb	r2, [r3, #12]
 801741a:	7b5b      	ldrb	r3, [r3, #13]
 801741c:	021b      	lsls	r3, r3, #8
 801741e:	4313      	orrs	r3, r2
 8017420:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017422:	693b      	ldr	r3, [r7, #16]
 8017424:	781b      	ldrb	r3, [r3, #0]
 8017426:	f003 0301 	and.w	r3, r3, #1
 801742a:	2b00      	cmp	r3, #0
 801742c:	d023      	beq.n	8017476 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	2b01      	cmp	r3, #1
 8017434:	d10f      	bne.n	8017456 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	785b      	ldrb	r3, [r3, #1]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d11b      	bne.n	8017476 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801743e:	693b      	ldr	r3, [r7, #16]
 8017440:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017442:	2b5e      	cmp	r3, #94	; 0x5e
 8017444:	d117      	bne.n	8017476 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	7b5b      	ldrb	r3, [r3, #13]
 801744a:	f043 0310 	orr.w	r3, r3, #16
 801744e:	b2da      	uxtb	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	735a      	strb	r2, [r3, #13]
 8017454:	e00f      	b.n	8017476 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	2206      	movs	r2, #6
 801745a:	4928      	ldr	r1, [pc, #160]	; (80174fc <ethernet_input+0x118>)
 801745c:	4618      	mov	r0, r3
 801745e:	f000 fb6a 	bl	8017b36 <memcmp>
 8017462:	4603      	mov	r3, r0
 8017464:	2b00      	cmp	r3, #0
 8017466:	d106      	bne.n	8017476 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	7b5b      	ldrb	r3, [r3, #13]
 801746c:	f043 0308 	orr.w	r3, r3, #8
 8017470:	b2da      	uxtb	r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017476:	89fb      	ldrh	r3, [r7, #14]
 8017478:	2b08      	cmp	r3, #8
 801747a:	d003      	beq.n	8017484 <ethernet_input+0xa0>
 801747c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017480:	d014      	beq.n	80174ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017482:	e032      	b.n	80174ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801748a:	f003 0308 	and.w	r3, r3, #8
 801748e:	2b00      	cmp	r3, #0
 8017490:	d024      	beq.n	80174dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017492:	8afb      	ldrh	r3, [r7, #22]
 8017494:	4619      	mov	r1, r3
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f7f6 fd9e 	bl	800dfd8 <pbuf_remove_header>
 801749c:	4603      	mov	r3, r0
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d11e      	bne.n	80174e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80174a2:	6839      	ldr	r1, [r7, #0]
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f7fe ff27 	bl	80162f8 <ip4_input>
      break;
 80174aa:	e013      	b.n	80174d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174b2:	f003 0308 	and.w	r3, r3, #8
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d014      	beq.n	80174e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80174ba:	8afb      	ldrh	r3, [r7, #22]
 80174bc:	4619      	mov	r1, r3
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f7f6 fd8a 	bl	800dfd8 <pbuf_remove_header>
 80174c4:	4603      	mov	r3, r0
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d10e      	bne.n	80174e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80174ca:	6839      	ldr	r1, [r7, #0]
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7fe f8c7 	bl	8015660 <etharp_input>
      break;
 80174d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80174d4:	2300      	movs	r3, #0
 80174d6:	e00c      	b.n	80174f2 <ethernet_input+0x10e>
    goto free_and_return;
 80174d8:	bf00      	nop
 80174da:	e006      	b.n	80174ea <ethernet_input+0x106>
        goto free_and_return;
 80174dc:	bf00      	nop
 80174de:	e004      	b.n	80174ea <ethernet_input+0x106>
        goto free_and_return;
 80174e0:	bf00      	nop
 80174e2:	e002      	b.n	80174ea <ethernet_input+0x106>
        goto free_and_return;
 80174e4:	bf00      	nop
 80174e6:	e000      	b.n	80174ea <ethernet_input+0x106>
        goto free_and_return;
 80174e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f7f6 fdfa 	bl	800e0e4 <pbuf_free>
  return ERR_OK;
 80174f0:	2300      	movs	r3, #0
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3718      	adds	r7, #24
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	0801c24c 	.word	0x0801c24c

08017500 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017500:	b580      	push	{r7, lr}
 8017502:	b086      	sub	sp, #24
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801750e:	8c3b      	ldrh	r3, [r7, #32]
 8017510:	4618      	mov	r0, r3
 8017512:	f7f5 fa3b 	bl	800c98c <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801751a:	210e      	movs	r1, #14
 801751c:	68b8      	ldr	r0, [r7, #8]
 801751e:	f7f6 fd4b 	bl	800dfb8 <pbuf_add_header>
 8017522:	4603      	mov	r3, r0
 8017524:	2b00      	cmp	r3, #0
 8017526:	d125      	bne.n	8017574 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	685b      	ldr	r3, [r3, #4]
 801752c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	8afa      	ldrh	r2, [r7, #22]
 8017532:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017534:	693b      	ldr	r3, [r7, #16]
 8017536:	2206      	movs	r2, #6
 8017538:	6839      	ldr	r1, [r7, #0]
 801753a:	4618      	mov	r0, r3
 801753c:	f000 fb09 	bl	8017b52 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017540:	693b      	ldr	r3, [r7, #16]
 8017542:	3306      	adds	r3, #6
 8017544:	2206      	movs	r2, #6
 8017546:	6879      	ldr	r1, [r7, #4]
 8017548:	4618      	mov	r0, r3
 801754a:	f000 fb02 	bl	8017b52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017554:	2b06      	cmp	r3, #6
 8017556:	d006      	beq.n	8017566 <ethernet_output+0x66>
 8017558:	4b0a      	ldr	r3, [pc, #40]	; (8017584 <ethernet_output+0x84>)
 801755a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801755e:	490a      	ldr	r1, [pc, #40]	; (8017588 <ethernet_output+0x88>)
 8017560:	480a      	ldr	r0, [pc, #40]	; (801758c <ethernet_output+0x8c>)
 8017562:	f000 fb67 	bl	8017c34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	699b      	ldr	r3, [r3, #24]
 801756a:	68b9      	ldr	r1, [r7, #8]
 801756c:	68f8      	ldr	r0, [r7, #12]
 801756e:	4798      	blx	r3
 8017570:	4603      	mov	r3, r0
 8017572:	e002      	b.n	801757a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017574:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017576:	f06f 0301 	mvn.w	r3, #1
}
 801757a:	4618      	mov	r0, r3
 801757c:	3718      	adds	r7, #24
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	0801c050 	.word	0x0801c050
 8017588:	0801c088 	.word	0x0801c088
 801758c:	0801c0bc 	.word	0x0801c0bc

08017590 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	2200      	movs	r2, #0
 801759e:	2104      	movs	r1, #4
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7ef fbc7 	bl	8006d34 <osMessageQueueNew>
 80175a6:	4602      	mov	r2, r0
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d102      	bne.n	80175ba <sys_mbox_new+0x2a>
    return ERR_MEM;
 80175b4:	f04f 33ff 	mov.w	r3, #4294967295
 80175b8:	e000      	b.n	80175bc <sys_mbox_new+0x2c>

  return ERR_OK;
 80175ba:	2300      	movs	r3, #0
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3708      	adds	r7, #8
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}

080175c4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b082      	sub	sp, #8
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7ef fd1b 	bl	800700c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	4618      	mov	r0, r3
 80175dc:	f7ef fd48 	bl	8007070 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80175e0:	bf00      	nop
 80175e2:	3708      	adds	r7, #8
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}

080175e8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6818      	ldr	r0, [r3, #0]
 80175f6:	4639      	mov	r1, r7
 80175f8:	2300      	movs	r3, #0
 80175fa:	2200      	movs	r2, #0
 80175fc:	f7ef fc20 	bl	8006e40 <osMessageQueuePut>
 8017600:	4603      	mov	r3, r0
 8017602:	2b00      	cmp	r3, #0
 8017604:	d102      	bne.n	801760c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017606:	2300      	movs	r3, #0
 8017608:	73fb      	strb	r3, [r7, #15]
 801760a:	e001      	b.n	8017610 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801760c:	23ff      	movs	r3, #255	; 0xff
 801760e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017614:	4618      	mov	r0, r3
 8017616:	3710      	adds	r7, #16
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}

0801761c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b086      	sub	sp, #24
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017628:	f7ee ffb0 	bl	800658c <osKernelGetTickCount>
 801762c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d013      	beq.n	801765c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	6818      	ldr	r0, [r3, #0]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2200      	movs	r2, #0
 801763c:	68b9      	ldr	r1, [r7, #8]
 801763e:	f7ef fc73 	bl	8006f28 <osMessageQueueGet>
 8017642:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d105      	bne.n	8017656 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801764a:	f7ee ff9f 	bl	800658c <osKernelGetTickCount>
 801764e:	4602      	mov	r2, r0
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	e00f      	b.n	8017676 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017656:	f04f 33ff 	mov.w	r3, #4294967295
 801765a:	e00c      	b.n	8017676 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	6818      	ldr	r0, [r3, #0]
 8017660:	f04f 33ff 	mov.w	r3, #4294967295
 8017664:	2200      	movs	r2, #0
 8017666:	68b9      	ldr	r1, [r7, #8]
 8017668:	f7ef fc5e 	bl	8006f28 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801766c:	f7ee ff8e 	bl	800658c <osKernelGetTickCount>
 8017670:	4602      	mov	r2, r0
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017676:	4618      	mov	r0, r3
 8017678:	3718      	adds	r7, #24
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}

0801767e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801767e:	b580      	push	{r7, lr}
 8017680:	b082      	sub	sp, #8
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
 8017686:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6818      	ldr	r0, [r3, #0]
 801768c:	2300      	movs	r3, #0
 801768e:	2200      	movs	r2, #0
 8017690:	6839      	ldr	r1, [r7, #0]
 8017692:	f7ef fc49 	bl	8006f28 <osMessageQueueGet>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d101      	bne.n	80176a0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801769c:	2300      	movs	r3, #0
 801769e:	e001      	b.n	80176a4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80176a0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d101      	bne.n	80176c0 <sys_mbox_valid+0x14>
    return 0;
 80176bc:	2300      	movs	r3, #0
 80176be:	e000      	b.n	80176c2 <sys_mbox_valid+0x16>
  else
    return 1;
 80176c0:	2301      	movs	r3, #1
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	370c      	adds	r7, #12
 80176c6:	46bd      	mov	sp, r7
 80176c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176cc:	4770      	bx	lr

080176ce <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80176ce:	b480      	push	{r7}
 80176d0:	b083      	sub	sp, #12
 80176d2:	af00      	add	r7, sp, #0
 80176d4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2200      	movs	r2, #0
 80176da:	601a      	str	r2, [r3, #0]
}
 80176dc:	bf00      	nop
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b082      	sub	sp, #8
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	460b      	mov	r3, r1
 80176f2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80176f4:	78fb      	ldrb	r3, [r7, #3]
 80176f6:	2200      	movs	r2, #0
 80176f8:	4619      	mov	r1, r3
 80176fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80176fe:	f7ef f989 	bl	8006a14 <osSemaphoreNew>
 8017702:	4602      	mov	r2, r0
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d102      	bne.n	8017716 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017710:	f04f 33ff 	mov.w	r3, #4294967295
 8017714:	e009      	b.n	801772a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017716:	78fb      	ldrb	r3, [r7, #3]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d105      	bne.n	8017728 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2100      	movs	r1, #0
 8017722:	4618      	mov	r0, r3
 8017724:	f7ef fa12 	bl	8006b4c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017728:	2300      	movs	r3, #0
}
 801772a:	4618      	mov	r0, r3
 801772c:	3708      	adds	r7, #8
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}

08017732 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017732:	b580      	push	{r7, lr}
 8017734:	b084      	sub	sp, #16
 8017736:	af00      	add	r7, sp, #0
 8017738:	6078      	str	r0, [r7, #4]
 801773a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801773c:	f7ee ff26 	bl	800658c <osKernelGetTickCount>
 8017740:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d011      	beq.n	801776c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	6839      	ldr	r1, [r7, #0]
 801774e:	4618      	mov	r0, r3
 8017750:	f7ef f9fc 	bl	8006b4c <osSemaphoreAcquire>
 8017754:	4603      	mov	r3, r0
 8017756:	2b00      	cmp	r3, #0
 8017758:	d105      	bne.n	8017766 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801775a:	f7ee ff17 	bl	800658c <osKernelGetTickCount>
 801775e:	4602      	mov	r2, r0
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	1ad3      	subs	r3, r2, r3
 8017764:	e012      	b.n	801778c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017766:	f04f 33ff 	mov.w	r3, #4294967295
 801776a:	e00f      	b.n	801778c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801776c:	bf00      	nop
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	f04f 31ff 	mov.w	r1, #4294967295
 8017776:	4618      	mov	r0, r3
 8017778:	f7ef f9e8 	bl	8006b4c <osSemaphoreAcquire>
 801777c:	4603      	mov	r3, r0
 801777e:	2b00      	cmp	r3, #0
 8017780:	d1f5      	bne.n	801776e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8017782:	f7ee ff03 	bl	800658c <osKernelGetTickCount>
 8017786:	4602      	mov	r2, r0
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801778c:	4618      	mov	r0, r3
 801778e:	3710      	adds	r7, #16
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7ef fa39 	bl	8006c18 <osSemaphoreRelease>
}
 80177a6:	bf00      	nop
 80177a8:	3708      	adds	r7, #8
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}

080177ae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80177ae:	b580      	push	{r7, lr}
 80177b0:	b082      	sub	sp, #8
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7ef fa84 	bl	8006cc8 <osSemaphoreDelete>
}
 80177c0:	bf00      	nop
 80177c2:	3708      	adds	r7, #8
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80177c8:	b480      	push	{r7}
 80177ca:	b083      	sub	sp, #12
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d101      	bne.n	80177dc <sys_sem_valid+0x14>
    return 0;
 80177d8:	2300      	movs	r3, #0
 80177da:	e000      	b.n	80177de <sys_sem_valid+0x16>
  else
    return 1;
 80177dc:	2301      	movs	r3, #1
}
 80177de:	4618      	mov	r0, r3
 80177e0:	370c      	adds	r7, #12
 80177e2:	46bd      	mov	sp, r7
 80177e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e8:	4770      	bx	lr

080177ea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80177ea:	b480      	push	{r7}
 80177ec:	b083      	sub	sp, #12
 80177ee:	af00      	add	r7, sp, #0
 80177f0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	2200      	movs	r2, #0
 80177f6:	601a      	str	r2, [r3, #0]
}
 80177f8:	bf00      	nop
 80177fa:	370c      	adds	r7, #12
 80177fc:	46bd      	mov	sp, r7
 80177fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017802:	4770      	bx	lr

08017804 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017808:	2000      	movs	r0, #0
 801780a:	f7ee ffbb 	bl	8006784 <osMutexNew>
 801780e:	4603      	mov	r3, r0
 8017810:	4a01      	ldr	r2, [pc, #4]	; (8017818 <sys_init+0x14>)
 8017812:	6013      	str	r3, [r2, #0]
#endif
}
 8017814:	bf00      	nop
 8017816:	bd80      	pop	{r7, pc}
 8017818:	2000b734 	.word	0x2000b734

0801781c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017824:	2000      	movs	r0, #0
 8017826:	f7ee ffad 	bl	8006784 <osMutexNew>
 801782a:	4602      	mov	r2, r0
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d102      	bne.n	801783e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017838:	f04f 33ff 	mov.w	r3, #4294967295
 801783c:	e000      	b.n	8017840 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801783e:	2300      	movs	r3, #0
}
 8017840:	4618      	mov	r0, r3
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b082      	sub	sp, #8
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f04f 31ff 	mov.w	r1, #4294967295
 8017858:	4618      	mov	r0, r3
 801785a:	f7ef f82d 	bl	80068b8 <osMutexAcquire>
#endif
}
 801785e:	bf00      	nop
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	4618      	mov	r0, r3
 8017874:	f7ef f87e 	bl	8006974 <osMutexRelease>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b08e      	sub	sp, #56	; 0x38
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801788e:	f107 0314 	add.w	r3, r7, #20
 8017892:	2224      	movs	r2, #36	; 0x24
 8017894:	2100      	movs	r1, #0
 8017896:	4618      	mov	r0, r3
 8017898:	f000 f969 	bl	8017b6e <memset>
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	617b      	str	r3, [r7, #20]
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80178a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80178a8:	f107 0314 	add.w	r3, r7, #20
 80178ac:	461a      	mov	r2, r3
 80178ae:	6879      	ldr	r1, [r7, #4]
 80178b0:	68b8      	ldr	r0, [r7, #8]
 80178b2:	f7ee fe93 	bl	80065dc <osThreadNew>
 80178b6:	4603      	mov	r3, r0
#endif
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3738      	adds	r7, #56	; 0x38
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80178c4:	4b04      	ldr	r3, [pc, #16]	; (80178d8 <sys_arch_protect+0x18>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	f04f 31ff 	mov.w	r1, #4294967295
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7ee fff3 	bl	80068b8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80178d2:	2301      	movs	r3, #1
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	bd80      	pop	{r7, pc}
 80178d8:	2000b734 	.word	0x2000b734

080178dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80178e4:	4b04      	ldr	r3, [pc, #16]	; (80178f8 <sys_arch_unprotect+0x1c>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7ef f843 	bl	8006974 <osMutexRelease>
}
 80178ee:	bf00      	nop
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	2000b734 	.word	0x2000b734

080178fc <std>:
 80178fc:	2300      	movs	r3, #0
 80178fe:	b510      	push	{r4, lr}
 8017900:	4604      	mov	r4, r0
 8017902:	e9c0 3300 	strd	r3, r3, [r0]
 8017906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801790a:	6083      	str	r3, [r0, #8]
 801790c:	8181      	strh	r1, [r0, #12]
 801790e:	6643      	str	r3, [r0, #100]	; 0x64
 8017910:	81c2      	strh	r2, [r0, #14]
 8017912:	6183      	str	r3, [r0, #24]
 8017914:	4619      	mov	r1, r3
 8017916:	2208      	movs	r2, #8
 8017918:	305c      	adds	r0, #92	; 0x5c
 801791a:	f000 f928 	bl	8017b6e <memset>
 801791e:	4b05      	ldr	r3, [pc, #20]	; (8017934 <std+0x38>)
 8017920:	6263      	str	r3, [r4, #36]	; 0x24
 8017922:	4b05      	ldr	r3, [pc, #20]	; (8017938 <std+0x3c>)
 8017924:	62a3      	str	r3, [r4, #40]	; 0x28
 8017926:	4b05      	ldr	r3, [pc, #20]	; (801793c <std+0x40>)
 8017928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801792a:	4b05      	ldr	r3, [pc, #20]	; (8017940 <std+0x44>)
 801792c:	6224      	str	r4, [r4, #32]
 801792e:	6323      	str	r3, [r4, #48]	; 0x30
 8017930:	bd10      	pop	{r4, pc}
 8017932:	bf00      	nop
 8017934:	08017dd9 	.word	0x08017dd9
 8017938:	08017dfb 	.word	0x08017dfb
 801793c:	08017e33 	.word	0x08017e33
 8017940:	08017e57 	.word	0x08017e57

08017944 <_cleanup_r>:
 8017944:	4901      	ldr	r1, [pc, #4]	; (801794c <_cleanup_r+0x8>)
 8017946:	f000 b8af 	b.w	8017aa8 <_fwalk_reent>
 801794a:	bf00      	nop
 801794c:	08017fed 	.word	0x08017fed

08017950 <__sfmoreglue>:
 8017950:	b570      	push	{r4, r5, r6, lr}
 8017952:	1e4a      	subs	r2, r1, #1
 8017954:	2568      	movs	r5, #104	; 0x68
 8017956:	4355      	muls	r5, r2
 8017958:	460e      	mov	r6, r1
 801795a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801795e:	f000 f90f 	bl	8017b80 <_malloc_r>
 8017962:	4604      	mov	r4, r0
 8017964:	b140      	cbz	r0, 8017978 <__sfmoreglue+0x28>
 8017966:	2100      	movs	r1, #0
 8017968:	e9c0 1600 	strd	r1, r6, [r0]
 801796c:	300c      	adds	r0, #12
 801796e:	60a0      	str	r0, [r4, #8]
 8017970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017974:	f000 f8fb 	bl	8017b6e <memset>
 8017978:	4620      	mov	r0, r4
 801797a:	bd70      	pop	{r4, r5, r6, pc}

0801797c <__sfp_lock_acquire>:
 801797c:	4801      	ldr	r0, [pc, #4]	; (8017984 <__sfp_lock_acquire+0x8>)
 801797e:	f000 b8d8 	b.w	8017b32 <__retarget_lock_acquire_recursive>
 8017982:	bf00      	nop
 8017984:	2000b740 	.word	0x2000b740

08017988 <__sfp_lock_release>:
 8017988:	4801      	ldr	r0, [pc, #4]	; (8017990 <__sfp_lock_release+0x8>)
 801798a:	f000 b8d3 	b.w	8017b34 <__retarget_lock_release_recursive>
 801798e:	bf00      	nop
 8017990:	2000b740 	.word	0x2000b740

08017994 <__sinit_lock_acquire>:
 8017994:	4801      	ldr	r0, [pc, #4]	; (801799c <__sinit_lock_acquire+0x8>)
 8017996:	f000 b8cc 	b.w	8017b32 <__retarget_lock_acquire_recursive>
 801799a:	bf00      	nop
 801799c:	2000b73b 	.word	0x2000b73b

080179a0 <__sinit_lock_release>:
 80179a0:	4801      	ldr	r0, [pc, #4]	; (80179a8 <__sinit_lock_release+0x8>)
 80179a2:	f000 b8c7 	b.w	8017b34 <__retarget_lock_release_recursive>
 80179a6:	bf00      	nop
 80179a8:	2000b73b 	.word	0x2000b73b

080179ac <__sinit>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	4604      	mov	r4, r0
 80179b0:	f7ff fff0 	bl	8017994 <__sinit_lock_acquire>
 80179b4:	69a3      	ldr	r3, [r4, #24]
 80179b6:	b11b      	cbz	r3, 80179c0 <__sinit+0x14>
 80179b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179bc:	f7ff bff0 	b.w	80179a0 <__sinit_lock_release>
 80179c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80179c4:	6523      	str	r3, [r4, #80]	; 0x50
 80179c6:	4b13      	ldr	r3, [pc, #76]	; (8017a14 <__sinit+0x68>)
 80179c8:	4a13      	ldr	r2, [pc, #76]	; (8017a18 <__sinit+0x6c>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80179ce:	42a3      	cmp	r3, r4
 80179d0:	bf04      	itt	eq
 80179d2:	2301      	moveq	r3, #1
 80179d4:	61a3      	streq	r3, [r4, #24]
 80179d6:	4620      	mov	r0, r4
 80179d8:	f000 f820 	bl	8017a1c <__sfp>
 80179dc:	6060      	str	r0, [r4, #4]
 80179de:	4620      	mov	r0, r4
 80179e0:	f000 f81c 	bl	8017a1c <__sfp>
 80179e4:	60a0      	str	r0, [r4, #8]
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 f818 	bl	8017a1c <__sfp>
 80179ec:	2200      	movs	r2, #0
 80179ee:	60e0      	str	r0, [r4, #12]
 80179f0:	2104      	movs	r1, #4
 80179f2:	6860      	ldr	r0, [r4, #4]
 80179f4:	f7ff ff82 	bl	80178fc <std>
 80179f8:	68a0      	ldr	r0, [r4, #8]
 80179fa:	2201      	movs	r2, #1
 80179fc:	2109      	movs	r1, #9
 80179fe:	f7ff ff7d 	bl	80178fc <std>
 8017a02:	68e0      	ldr	r0, [r4, #12]
 8017a04:	2202      	movs	r2, #2
 8017a06:	2112      	movs	r1, #18
 8017a08:	f7ff ff78 	bl	80178fc <std>
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	61a3      	str	r3, [r4, #24]
 8017a10:	e7d2      	b.n	80179b8 <__sinit+0xc>
 8017a12:	bf00      	nop
 8017a14:	0801c2bc 	.word	0x0801c2bc
 8017a18:	08017945 	.word	0x08017945

08017a1c <__sfp>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	4607      	mov	r7, r0
 8017a20:	f7ff ffac 	bl	801797c <__sfp_lock_acquire>
 8017a24:	4b1e      	ldr	r3, [pc, #120]	; (8017aa0 <__sfp+0x84>)
 8017a26:	681e      	ldr	r6, [r3, #0]
 8017a28:	69b3      	ldr	r3, [r6, #24]
 8017a2a:	b913      	cbnz	r3, 8017a32 <__sfp+0x16>
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7ff ffbd 	bl	80179ac <__sinit>
 8017a32:	3648      	adds	r6, #72	; 0x48
 8017a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	d503      	bpl.n	8017a44 <__sfp+0x28>
 8017a3c:	6833      	ldr	r3, [r6, #0]
 8017a3e:	b30b      	cbz	r3, 8017a84 <__sfp+0x68>
 8017a40:	6836      	ldr	r6, [r6, #0]
 8017a42:	e7f7      	b.n	8017a34 <__sfp+0x18>
 8017a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a48:	b9d5      	cbnz	r5, 8017a80 <__sfp+0x64>
 8017a4a:	4b16      	ldr	r3, [pc, #88]	; (8017aa4 <__sfp+0x88>)
 8017a4c:	60e3      	str	r3, [r4, #12]
 8017a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a52:	6665      	str	r5, [r4, #100]	; 0x64
 8017a54:	f000 f86c 	bl	8017b30 <__retarget_lock_init_recursive>
 8017a58:	f7ff ff96 	bl	8017988 <__sfp_lock_release>
 8017a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017a64:	6025      	str	r5, [r4, #0]
 8017a66:	61a5      	str	r5, [r4, #24]
 8017a68:	2208      	movs	r2, #8
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a70:	f000 f87d 	bl	8017b6e <memset>
 8017a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a80:	3468      	adds	r4, #104	; 0x68
 8017a82:	e7d9      	b.n	8017a38 <__sfp+0x1c>
 8017a84:	2104      	movs	r1, #4
 8017a86:	4638      	mov	r0, r7
 8017a88:	f7ff ff62 	bl	8017950 <__sfmoreglue>
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	6030      	str	r0, [r6, #0]
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d1d5      	bne.n	8017a40 <__sfp+0x24>
 8017a94:	f7ff ff78 	bl	8017988 <__sfp_lock_release>
 8017a98:	230c      	movs	r3, #12
 8017a9a:	603b      	str	r3, [r7, #0]
 8017a9c:	e7ee      	b.n	8017a7c <__sfp+0x60>
 8017a9e:	bf00      	nop
 8017aa0:	0801c2bc 	.word	0x0801c2bc
 8017aa4:	ffff0001 	.word	0xffff0001

08017aa8 <_fwalk_reent>:
 8017aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017aac:	4606      	mov	r6, r0
 8017aae:	4688      	mov	r8, r1
 8017ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017ab4:	2700      	movs	r7, #0
 8017ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017aba:	f1b9 0901 	subs.w	r9, r9, #1
 8017abe:	d505      	bpl.n	8017acc <_fwalk_reent+0x24>
 8017ac0:	6824      	ldr	r4, [r4, #0]
 8017ac2:	2c00      	cmp	r4, #0
 8017ac4:	d1f7      	bne.n	8017ab6 <_fwalk_reent+0xe>
 8017ac6:	4638      	mov	r0, r7
 8017ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017acc:	89ab      	ldrh	r3, [r5, #12]
 8017ace:	2b01      	cmp	r3, #1
 8017ad0:	d907      	bls.n	8017ae2 <_fwalk_reent+0x3a>
 8017ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	d003      	beq.n	8017ae2 <_fwalk_reent+0x3a>
 8017ada:	4629      	mov	r1, r5
 8017adc:	4630      	mov	r0, r6
 8017ade:	47c0      	blx	r8
 8017ae0:	4307      	orrs	r7, r0
 8017ae2:	3568      	adds	r5, #104	; 0x68
 8017ae4:	e7e9      	b.n	8017aba <_fwalk_reent+0x12>
	...

08017ae8 <__libc_init_array>:
 8017ae8:	b570      	push	{r4, r5, r6, lr}
 8017aea:	4d0d      	ldr	r5, [pc, #52]	; (8017b20 <__libc_init_array+0x38>)
 8017aec:	4c0d      	ldr	r4, [pc, #52]	; (8017b24 <__libc_init_array+0x3c>)
 8017aee:	1b64      	subs	r4, r4, r5
 8017af0:	10a4      	asrs	r4, r4, #2
 8017af2:	2600      	movs	r6, #0
 8017af4:	42a6      	cmp	r6, r4
 8017af6:	d109      	bne.n	8017b0c <__libc_init_array+0x24>
 8017af8:	4d0b      	ldr	r5, [pc, #44]	; (8017b28 <__libc_init_array+0x40>)
 8017afa:	4c0c      	ldr	r4, [pc, #48]	; (8017b2c <__libc_init_array+0x44>)
 8017afc:	f000 ffcc 	bl	8018a98 <_init>
 8017b00:	1b64      	subs	r4, r4, r5
 8017b02:	10a4      	asrs	r4, r4, #2
 8017b04:	2600      	movs	r6, #0
 8017b06:	42a6      	cmp	r6, r4
 8017b08:	d105      	bne.n	8017b16 <__libc_init_array+0x2e>
 8017b0a:	bd70      	pop	{r4, r5, r6, pc}
 8017b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b10:	4798      	blx	r3
 8017b12:	3601      	adds	r6, #1
 8017b14:	e7ee      	b.n	8017af4 <__libc_init_array+0xc>
 8017b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b1a:	4798      	blx	r3
 8017b1c:	3601      	adds	r6, #1
 8017b1e:	e7f2      	b.n	8017b06 <__libc_init_array+0x1e>
 8017b20:	0801c3b0 	.word	0x0801c3b0
 8017b24:	0801c3b0 	.word	0x0801c3b0
 8017b28:	0801c3b0 	.word	0x0801c3b0
 8017b2c:	0801c3b4 	.word	0x0801c3b4

08017b30 <__retarget_lock_init_recursive>:
 8017b30:	4770      	bx	lr

08017b32 <__retarget_lock_acquire_recursive>:
 8017b32:	4770      	bx	lr

08017b34 <__retarget_lock_release_recursive>:
 8017b34:	4770      	bx	lr

08017b36 <memcmp>:
 8017b36:	b530      	push	{r4, r5, lr}
 8017b38:	3901      	subs	r1, #1
 8017b3a:	2400      	movs	r4, #0
 8017b3c:	42a2      	cmp	r2, r4
 8017b3e:	d101      	bne.n	8017b44 <memcmp+0xe>
 8017b40:	2000      	movs	r0, #0
 8017b42:	e005      	b.n	8017b50 <memcmp+0x1a>
 8017b44:	5d03      	ldrb	r3, [r0, r4]
 8017b46:	3401      	adds	r4, #1
 8017b48:	5d0d      	ldrb	r5, [r1, r4]
 8017b4a:	42ab      	cmp	r3, r5
 8017b4c:	d0f6      	beq.n	8017b3c <memcmp+0x6>
 8017b4e:	1b58      	subs	r0, r3, r5
 8017b50:	bd30      	pop	{r4, r5, pc}

08017b52 <memcpy>:
 8017b52:	440a      	add	r2, r1
 8017b54:	4291      	cmp	r1, r2
 8017b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b5a:	d100      	bne.n	8017b5e <memcpy+0xc>
 8017b5c:	4770      	bx	lr
 8017b5e:	b510      	push	{r4, lr}
 8017b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b68:	4291      	cmp	r1, r2
 8017b6a:	d1f9      	bne.n	8017b60 <memcpy+0xe>
 8017b6c:	bd10      	pop	{r4, pc}

08017b6e <memset>:
 8017b6e:	4402      	add	r2, r0
 8017b70:	4603      	mov	r3, r0
 8017b72:	4293      	cmp	r3, r2
 8017b74:	d100      	bne.n	8017b78 <memset+0xa>
 8017b76:	4770      	bx	lr
 8017b78:	f803 1b01 	strb.w	r1, [r3], #1
 8017b7c:	e7f9      	b.n	8017b72 <memset+0x4>
	...

08017b80 <_malloc_r>:
 8017b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b82:	1ccd      	adds	r5, r1, #3
 8017b84:	f025 0503 	bic.w	r5, r5, #3
 8017b88:	3508      	adds	r5, #8
 8017b8a:	2d0c      	cmp	r5, #12
 8017b8c:	bf38      	it	cc
 8017b8e:	250c      	movcc	r5, #12
 8017b90:	2d00      	cmp	r5, #0
 8017b92:	4606      	mov	r6, r0
 8017b94:	db01      	blt.n	8017b9a <_malloc_r+0x1a>
 8017b96:	42a9      	cmp	r1, r5
 8017b98:	d903      	bls.n	8017ba2 <_malloc_r+0x22>
 8017b9a:	230c      	movs	r3, #12
 8017b9c:	6033      	str	r3, [r6, #0]
 8017b9e:	2000      	movs	r0, #0
 8017ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ba2:	f000 fa8b 	bl	80180bc <__malloc_lock>
 8017ba6:	4921      	ldr	r1, [pc, #132]	; (8017c2c <_malloc_r+0xac>)
 8017ba8:	680a      	ldr	r2, [r1, #0]
 8017baa:	4614      	mov	r4, r2
 8017bac:	b99c      	cbnz	r4, 8017bd6 <_malloc_r+0x56>
 8017bae:	4f20      	ldr	r7, [pc, #128]	; (8017c30 <_malloc_r+0xb0>)
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	b923      	cbnz	r3, 8017bbe <_malloc_r+0x3e>
 8017bb4:	4621      	mov	r1, r4
 8017bb6:	4630      	mov	r0, r6
 8017bb8:	f000 f8fe 	bl	8017db8 <_sbrk_r>
 8017bbc:	6038      	str	r0, [r7, #0]
 8017bbe:	4629      	mov	r1, r5
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f000 f8f9 	bl	8017db8 <_sbrk_r>
 8017bc6:	1c43      	adds	r3, r0, #1
 8017bc8:	d123      	bne.n	8017c12 <_malloc_r+0x92>
 8017bca:	230c      	movs	r3, #12
 8017bcc:	6033      	str	r3, [r6, #0]
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f000 fa7a 	bl	80180c8 <__malloc_unlock>
 8017bd4:	e7e3      	b.n	8017b9e <_malloc_r+0x1e>
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	1b5b      	subs	r3, r3, r5
 8017bda:	d417      	bmi.n	8017c0c <_malloc_r+0x8c>
 8017bdc:	2b0b      	cmp	r3, #11
 8017bde:	d903      	bls.n	8017be8 <_malloc_r+0x68>
 8017be0:	6023      	str	r3, [r4, #0]
 8017be2:	441c      	add	r4, r3
 8017be4:	6025      	str	r5, [r4, #0]
 8017be6:	e004      	b.n	8017bf2 <_malloc_r+0x72>
 8017be8:	6863      	ldr	r3, [r4, #4]
 8017bea:	42a2      	cmp	r2, r4
 8017bec:	bf0c      	ite	eq
 8017bee:	600b      	streq	r3, [r1, #0]
 8017bf0:	6053      	strne	r3, [r2, #4]
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f000 fa68 	bl	80180c8 <__malloc_unlock>
 8017bf8:	f104 000b 	add.w	r0, r4, #11
 8017bfc:	1d23      	adds	r3, r4, #4
 8017bfe:	f020 0007 	bic.w	r0, r0, #7
 8017c02:	1ac2      	subs	r2, r0, r3
 8017c04:	d0cc      	beq.n	8017ba0 <_malloc_r+0x20>
 8017c06:	1a1b      	subs	r3, r3, r0
 8017c08:	50a3      	str	r3, [r4, r2]
 8017c0a:	e7c9      	b.n	8017ba0 <_malloc_r+0x20>
 8017c0c:	4622      	mov	r2, r4
 8017c0e:	6864      	ldr	r4, [r4, #4]
 8017c10:	e7cc      	b.n	8017bac <_malloc_r+0x2c>
 8017c12:	1cc4      	adds	r4, r0, #3
 8017c14:	f024 0403 	bic.w	r4, r4, #3
 8017c18:	42a0      	cmp	r0, r4
 8017c1a:	d0e3      	beq.n	8017be4 <_malloc_r+0x64>
 8017c1c:	1a21      	subs	r1, r4, r0
 8017c1e:	4630      	mov	r0, r6
 8017c20:	f000 f8ca 	bl	8017db8 <_sbrk_r>
 8017c24:	3001      	adds	r0, #1
 8017c26:	d1dd      	bne.n	8017be4 <_malloc_r+0x64>
 8017c28:	e7cf      	b.n	8017bca <_malloc_r+0x4a>
 8017c2a:	bf00      	nop
 8017c2c:	20004c2c 	.word	0x20004c2c
 8017c30:	20004c30 	.word	0x20004c30

08017c34 <iprintf>:
 8017c34:	b40f      	push	{r0, r1, r2, r3}
 8017c36:	4b0a      	ldr	r3, [pc, #40]	; (8017c60 <iprintf+0x2c>)
 8017c38:	b513      	push	{r0, r1, r4, lr}
 8017c3a:	681c      	ldr	r4, [r3, #0]
 8017c3c:	b124      	cbz	r4, 8017c48 <iprintf+0x14>
 8017c3e:	69a3      	ldr	r3, [r4, #24]
 8017c40:	b913      	cbnz	r3, 8017c48 <iprintf+0x14>
 8017c42:	4620      	mov	r0, r4
 8017c44:	f7ff feb2 	bl	80179ac <__sinit>
 8017c48:	ab05      	add	r3, sp, #20
 8017c4a:	9a04      	ldr	r2, [sp, #16]
 8017c4c:	68a1      	ldr	r1, [r4, #8]
 8017c4e:	9301      	str	r3, [sp, #4]
 8017c50:	4620      	mov	r0, r4
 8017c52:	f000 fab9 	bl	80181c8 <_vfiprintf_r>
 8017c56:	b002      	add	sp, #8
 8017c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c5c:	b004      	add	sp, #16
 8017c5e:	4770      	bx	lr
 8017c60:	20000020 	.word	0x20000020

08017c64 <rand>:
 8017c64:	4b17      	ldr	r3, [pc, #92]	; (8017cc4 <rand+0x60>)
 8017c66:	b510      	push	{r4, lr}
 8017c68:	681c      	ldr	r4, [r3, #0]
 8017c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017c6c:	b9b3      	cbnz	r3, 8017c9c <rand+0x38>
 8017c6e:	2018      	movs	r0, #24
 8017c70:	f000 fa1c 	bl	80180ac <malloc>
 8017c74:	63a0      	str	r0, [r4, #56]	; 0x38
 8017c76:	b928      	cbnz	r0, 8017c84 <rand+0x20>
 8017c78:	4602      	mov	r2, r0
 8017c7a:	4b13      	ldr	r3, [pc, #76]	; (8017cc8 <rand+0x64>)
 8017c7c:	4813      	ldr	r0, [pc, #76]	; (8017ccc <rand+0x68>)
 8017c7e:	214e      	movs	r1, #78	; 0x4e
 8017c80:	f000 f900 	bl	8017e84 <__assert_func>
 8017c84:	4a12      	ldr	r2, [pc, #72]	; (8017cd0 <rand+0x6c>)
 8017c86:	4b13      	ldr	r3, [pc, #76]	; (8017cd4 <rand+0x70>)
 8017c88:	e9c0 2300 	strd	r2, r3, [r0]
 8017c8c:	4b12      	ldr	r3, [pc, #72]	; (8017cd8 <rand+0x74>)
 8017c8e:	6083      	str	r3, [r0, #8]
 8017c90:	230b      	movs	r3, #11
 8017c92:	8183      	strh	r3, [r0, #12]
 8017c94:	2201      	movs	r2, #1
 8017c96:	2300      	movs	r3, #0
 8017c98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017c9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c9e:	480f      	ldr	r0, [pc, #60]	; (8017cdc <rand+0x78>)
 8017ca0:	690a      	ldr	r2, [r1, #16]
 8017ca2:	694b      	ldr	r3, [r1, #20]
 8017ca4:	4c0e      	ldr	r4, [pc, #56]	; (8017ce0 <rand+0x7c>)
 8017ca6:	4350      	muls	r0, r2
 8017ca8:	fb04 0003 	mla	r0, r4, r3, r0
 8017cac:	fba2 3404 	umull	r3, r4, r2, r4
 8017cb0:	1c5a      	adds	r2, r3, #1
 8017cb2:	4404      	add	r4, r0
 8017cb4:	f144 0000 	adc.w	r0, r4, #0
 8017cb8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017cbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017cc0:	bd10      	pop	{r4, pc}
 8017cc2:	bf00      	nop
 8017cc4:	20000020 	.word	0x20000020
 8017cc8:	0801c2c0 	.word	0x0801c2c0
 8017ccc:	0801c2d7 	.word	0x0801c2d7
 8017cd0:	abcd330e 	.word	0xabcd330e
 8017cd4:	e66d1234 	.word	0xe66d1234
 8017cd8:	0005deec 	.word	0x0005deec
 8017cdc:	5851f42d 	.word	0x5851f42d
 8017ce0:	4c957f2d 	.word	0x4c957f2d

08017ce4 <cleanup_glue>:
 8017ce4:	b538      	push	{r3, r4, r5, lr}
 8017ce6:	460c      	mov	r4, r1
 8017ce8:	6809      	ldr	r1, [r1, #0]
 8017cea:	4605      	mov	r5, r0
 8017cec:	b109      	cbz	r1, 8017cf2 <cleanup_glue+0xe>
 8017cee:	f7ff fff9 	bl	8017ce4 <cleanup_glue>
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cfa:	f000 b9eb 	b.w	80180d4 <_free_r>
	...

08017d00 <_reclaim_reent>:
 8017d00:	4b2c      	ldr	r3, [pc, #176]	; (8017db4 <_reclaim_reent+0xb4>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	4283      	cmp	r3, r0
 8017d06:	b570      	push	{r4, r5, r6, lr}
 8017d08:	4604      	mov	r4, r0
 8017d0a:	d051      	beq.n	8017db0 <_reclaim_reent+0xb0>
 8017d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017d0e:	b143      	cbz	r3, 8017d22 <_reclaim_reent+0x22>
 8017d10:	68db      	ldr	r3, [r3, #12]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d14a      	bne.n	8017dac <_reclaim_reent+0xac>
 8017d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d18:	6819      	ldr	r1, [r3, #0]
 8017d1a:	b111      	cbz	r1, 8017d22 <_reclaim_reent+0x22>
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f000 f9d9 	bl	80180d4 <_free_r>
 8017d22:	6961      	ldr	r1, [r4, #20]
 8017d24:	b111      	cbz	r1, 8017d2c <_reclaim_reent+0x2c>
 8017d26:	4620      	mov	r0, r4
 8017d28:	f000 f9d4 	bl	80180d4 <_free_r>
 8017d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017d2e:	b111      	cbz	r1, 8017d36 <_reclaim_reent+0x36>
 8017d30:	4620      	mov	r0, r4
 8017d32:	f000 f9cf 	bl	80180d4 <_free_r>
 8017d36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017d38:	b111      	cbz	r1, 8017d40 <_reclaim_reent+0x40>
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	f000 f9ca 	bl	80180d4 <_free_r>
 8017d40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017d42:	b111      	cbz	r1, 8017d4a <_reclaim_reent+0x4a>
 8017d44:	4620      	mov	r0, r4
 8017d46:	f000 f9c5 	bl	80180d4 <_free_r>
 8017d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017d4c:	b111      	cbz	r1, 8017d54 <_reclaim_reent+0x54>
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f000 f9c0 	bl	80180d4 <_free_r>
 8017d54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017d56:	b111      	cbz	r1, 8017d5e <_reclaim_reent+0x5e>
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f000 f9bb 	bl	80180d4 <_free_r>
 8017d5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017d60:	b111      	cbz	r1, 8017d68 <_reclaim_reent+0x68>
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 f9b6 	bl	80180d4 <_free_r>
 8017d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d6a:	b111      	cbz	r1, 8017d72 <_reclaim_reent+0x72>
 8017d6c:	4620      	mov	r0, r4
 8017d6e:	f000 f9b1 	bl	80180d4 <_free_r>
 8017d72:	69a3      	ldr	r3, [r4, #24]
 8017d74:	b1e3      	cbz	r3, 8017db0 <_reclaim_reent+0xb0>
 8017d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d78:	4620      	mov	r0, r4
 8017d7a:	4798      	blx	r3
 8017d7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017d7e:	b1b9      	cbz	r1, 8017db0 <_reclaim_reent+0xb0>
 8017d80:	4620      	mov	r0, r4
 8017d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d86:	f7ff bfad 	b.w	8017ce4 <cleanup_glue>
 8017d8a:	5949      	ldr	r1, [r1, r5]
 8017d8c:	b941      	cbnz	r1, 8017da0 <_reclaim_reent+0xa0>
 8017d8e:	3504      	adds	r5, #4
 8017d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d92:	2d80      	cmp	r5, #128	; 0x80
 8017d94:	68d9      	ldr	r1, [r3, #12]
 8017d96:	d1f8      	bne.n	8017d8a <_reclaim_reent+0x8a>
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f000 f99b 	bl	80180d4 <_free_r>
 8017d9e:	e7ba      	b.n	8017d16 <_reclaim_reent+0x16>
 8017da0:	680e      	ldr	r6, [r1, #0]
 8017da2:	4620      	mov	r0, r4
 8017da4:	f000 f996 	bl	80180d4 <_free_r>
 8017da8:	4631      	mov	r1, r6
 8017daa:	e7ef      	b.n	8017d8c <_reclaim_reent+0x8c>
 8017dac:	2500      	movs	r5, #0
 8017dae:	e7ef      	b.n	8017d90 <_reclaim_reent+0x90>
 8017db0:	bd70      	pop	{r4, r5, r6, pc}
 8017db2:	bf00      	nop
 8017db4:	20000020 	.word	0x20000020

08017db8 <_sbrk_r>:
 8017db8:	b538      	push	{r3, r4, r5, lr}
 8017dba:	4d06      	ldr	r5, [pc, #24]	; (8017dd4 <_sbrk_r+0x1c>)
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	4608      	mov	r0, r1
 8017dc2:	602b      	str	r3, [r5, #0]
 8017dc4:	f7e9 fc64 	bl	8001690 <_sbrk>
 8017dc8:	1c43      	adds	r3, r0, #1
 8017dca:	d102      	bne.n	8017dd2 <_sbrk_r+0x1a>
 8017dcc:	682b      	ldr	r3, [r5, #0]
 8017dce:	b103      	cbz	r3, 8017dd2 <_sbrk_r+0x1a>
 8017dd0:	6023      	str	r3, [r4, #0]
 8017dd2:	bd38      	pop	{r3, r4, r5, pc}
 8017dd4:	2000b730 	.word	0x2000b730

08017dd8 <__sread>:
 8017dd8:	b510      	push	{r4, lr}
 8017dda:	460c      	mov	r4, r1
 8017ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017de0:	f000 fcb6 	bl	8018750 <_read_r>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	bfab      	itete	ge
 8017de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017dea:	89a3      	ldrhlt	r3, [r4, #12]
 8017dec:	181b      	addge	r3, r3, r0
 8017dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017df2:	bfac      	ite	ge
 8017df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017df6:	81a3      	strhlt	r3, [r4, #12]
 8017df8:	bd10      	pop	{r4, pc}

08017dfa <__swrite>:
 8017dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dfe:	461f      	mov	r7, r3
 8017e00:	898b      	ldrh	r3, [r1, #12]
 8017e02:	05db      	lsls	r3, r3, #23
 8017e04:	4605      	mov	r5, r0
 8017e06:	460c      	mov	r4, r1
 8017e08:	4616      	mov	r6, r2
 8017e0a:	d505      	bpl.n	8017e18 <__swrite+0x1e>
 8017e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e10:	2302      	movs	r3, #2
 8017e12:	2200      	movs	r2, #0
 8017e14:	f000 f938 	bl	8018088 <_lseek_r>
 8017e18:	89a3      	ldrh	r3, [r4, #12]
 8017e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017e22:	81a3      	strh	r3, [r4, #12]
 8017e24:	4632      	mov	r2, r6
 8017e26:	463b      	mov	r3, r7
 8017e28:	4628      	mov	r0, r5
 8017e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e2e:	f000 b817 	b.w	8017e60 <_write_r>

08017e32 <__sseek>:
 8017e32:	b510      	push	{r4, lr}
 8017e34:	460c      	mov	r4, r1
 8017e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e3a:	f000 f925 	bl	8018088 <_lseek_r>
 8017e3e:	1c43      	adds	r3, r0, #1
 8017e40:	89a3      	ldrh	r3, [r4, #12]
 8017e42:	bf15      	itete	ne
 8017e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e4e:	81a3      	strheq	r3, [r4, #12]
 8017e50:	bf18      	it	ne
 8017e52:	81a3      	strhne	r3, [r4, #12]
 8017e54:	bd10      	pop	{r4, pc}

08017e56 <__sclose>:
 8017e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e5a:	f000 b831 	b.w	8017ec0 <_close_r>
	...

08017e60 <_write_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d07      	ldr	r5, [pc, #28]	; (8017e80 <_write_r+0x20>)
 8017e64:	4604      	mov	r4, r0
 8017e66:	4608      	mov	r0, r1
 8017e68:	4611      	mov	r1, r2
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	602a      	str	r2, [r5, #0]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	f7e9 fbbd 	bl	80015ee <_write>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_write_r+0x1e>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_write_r+0x1e>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	2000b730 	.word	0x2000b730

08017e84 <__assert_func>:
 8017e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e86:	4614      	mov	r4, r2
 8017e88:	461a      	mov	r2, r3
 8017e8a:	4b09      	ldr	r3, [pc, #36]	; (8017eb0 <__assert_func+0x2c>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	4605      	mov	r5, r0
 8017e90:	68d8      	ldr	r0, [r3, #12]
 8017e92:	b14c      	cbz	r4, 8017ea8 <__assert_func+0x24>
 8017e94:	4b07      	ldr	r3, [pc, #28]	; (8017eb4 <__assert_func+0x30>)
 8017e96:	9100      	str	r1, [sp, #0]
 8017e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e9c:	4906      	ldr	r1, [pc, #24]	; (8017eb8 <__assert_func+0x34>)
 8017e9e:	462b      	mov	r3, r5
 8017ea0:	f000 f8e0 	bl	8018064 <fiprintf>
 8017ea4:	f000 fd26 	bl	80188f4 <abort>
 8017ea8:	4b04      	ldr	r3, [pc, #16]	; (8017ebc <__assert_func+0x38>)
 8017eaa:	461c      	mov	r4, r3
 8017eac:	e7f3      	b.n	8017e96 <__assert_func+0x12>
 8017eae:	bf00      	nop
 8017eb0:	20000020 	.word	0x20000020
 8017eb4:	0801c336 	.word	0x0801c336
 8017eb8:	0801c343 	.word	0x0801c343
 8017ebc:	0801c371 	.word	0x0801c371

08017ec0 <_close_r>:
 8017ec0:	b538      	push	{r3, r4, r5, lr}
 8017ec2:	4d06      	ldr	r5, [pc, #24]	; (8017edc <_close_r+0x1c>)
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	4604      	mov	r4, r0
 8017ec8:	4608      	mov	r0, r1
 8017eca:	602b      	str	r3, [r5, #0]
 8017ecc:	f7e9 fbab 	bl	8001626 <_close>
 8017ed0:	1c43      	adds	r3, r0, #1
 8017ed2:	d102      	bne.n	8017eda <_close_r+0x1a>
 8017ed4:	682b      	ldr	r3, [r5, #0]
 8017ed6:	b103      	cbz	r3, 8017eda <_close_r+0x1a>
 8017ed8:	6023      	str	r3, [r4, #0]
 8017eda:	bd38      	pop	{r3, r4, r5, pc}
 8017edc:	2000b730 	.word	0x2000b730

08017ee0 <__sflush_r>:
 8017ee0:	898a      	ldrh	r2, [r1, #12]
 8017ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	0710      	lsls	r0, r2, #28
 8017eea:	460c      	mov	r4, r1
 8017eec:	d458      	bmi.n	8017fa0 <__sflush_r+0xc0>
 8017eee:	684b      	ldr	r3, [r1, #4]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	dc05      	bgt.n	8017f00 <__sflush_r+0x20>
 8017ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	dc02      	bgt.n	8017f00 <__sflush_r+0x20>
 8017efa:	2000      	movs	r0, #0
 8017efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f02:	2e00      	cmp	r6, #0
 8017f04:	d0f9      	beq.n	8017efa <__sflush_r+0x1a>
 8017f06:	2300      	movs	r3, #0
 8017f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f0c:	682f      	ldr	r7, [r5, #0]
 8017f0e:	602b      	str	r3, [r5, #0]
 8017f10:	d032      	beq.n	8017f78 <__sflush_r+0x98>
 8017f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017f14:	89a3      	ldrh	r3, [r4, #12]
 8017f16:	075a      	lsls	r2, r3, #29
 8017f18:	d505      	bpl.n	8017f26 <__sflush_r+0x46>
 8017f1a:	6863      	ldr	r3, [r4, #4]
 8017f1c:	1ac0      	subs	r0, r0, r3
 8017f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f20:	b10b      	cbz	r3, 8017f26 <__sflush_r+0x46>
 8017f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f24:	1ac0      	subs	r0, r0, r3
 8017f26:	2300      	movs	r3, #0
 8017f28:	4602      	mov	r2, r0
 8017f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f2c:	6a21      	ldr	r1, [r4, #32]
 8017f2e:	4628      	mov	r0, r5
 8017f30:	47b0      	blx	r6
 8017f32:	1c43      	adds	r3, r0, #1
 8017f34:	89a3      	ldrh	r3, [r4, #12]
 8017f36:	d106      	bne.n	8017f46 <__sflush_r+0x66>
 8017f38:	6829      	ldr	r1, [r5, #0]
 8017f3a:	291d      	cmp	r1, #29
 8017f3c:	d82c      	bhi.n	8017f98 <__sflush_r+0xb8>
 8017f3e:	4a2a      	ldr	r2, [pc, #168]	; (8017fe8 <__sflush_r+0x108>)
 8017f40:	40ca      	lsrs	r2, r1
 8017f42:	07d6      	lsls	r6, r2, #31
 8017f44:	d528      	bpl.n	8017f98 <__sflush_r+0xb8>
 8017f46:	2200      	movs	r2, #0
 8017f48:	6062      	str	r2, [r4, #4]
 8017f4a:	04d9      	lsls	r1, r3, #19
 8017f4c:	6922      	ldr	r2, [r4, #16]
 8017f4e:	6022      	str	r2, [r4, #0]
 8017f50:	d504      	bpl.n	8017f5c <__sflush_r+0x7c>
 8017f52:	1c42      	adds	r2, r0, #1
 8017f54:	d101      	bne.n	8017f5a <__sflush_r+0x7a>
 8017f56:	682b      	ldr	r3, [r5, #0]
 8017f58:	b903      	cbnz	r3, 8017f5c <__sflush_r+0x7c>
 8017f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8017f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f5e:	602f      	str	r7, [r5, #0]
 8017f60:	2900      	cmp	r1, #0
 8017f62:	d0ca      	beq.n	8017efa <__sflush_r+0x1a>
 8017f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f68:	4299      	cmp	r1, r3
 8017f6a:	d002      	beq.n	8017f72 <__sflush_r+0x92>
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	f000 f8b1 	bl	80180d4 <_free_r>
 8017f72:	2000      	movs	r0, #0
 8017f74:	6360      	str	r0, [r4, #52]	; 0x34
 8017f76:	e7c1      	b.n	8017efc <__sflush_r+0x1c>
 8017f78:	6a21      	ldr	r1, [r4, #32]
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	47b0      	blx	r6
 8017f80:	1c41      	adds	r1, r0, #1
 8017f82:	d1c7      	bne.n	8017f14 <__sflush_r+0x34>
 8017f84:	682b      	ldr	r3, [r5, #0]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d0c4      	beq.n	8017f14 <__sflush_r+0x34>
 8017f8a:	2b1d      	cmp	r3, #29
 8017f8c:	d001      	beq.n	8017f92 <__sflush_r+0xb2>
 8017f8e:	2b16      	cmp	r3, #22
 8017f90:	d101      	bne.n	8017f96 <__sflush_r+0xb6>
 8017f92:	602f      	str	r7, [r5, #0]
 8017f94:	e7b1      	b.n	8017efa <__sflush_r+0x1a>
 8017f96:	89a3      	ldrh	r3, [r4, #12]
 8017f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f9c:	81a3      	strh	r3, [r4, #12]
 8017f9e:	e7ad      	b.n	8017efc <__sflush_r+0x1c>
 8017fa0:	690f      	ldr	r7, [r1, #16]
 8017fa2:	2f00      	cmp	r7, #0
 8017fa4:	d0a9      	beq.n	8017efa <__sflush_r+0x1a>
 8017fa6:	0793      	lsls	r3, r2, #30
 8017fa8:	680e      	ldr	r6, [r1, #0]
 8017faa:	bf08      	it	eq
 8017fac:	694b      	ldreq	r3, [r1, #20]
 8017fae:	600f      	str	r7, [r1, #0]
 8017fb0:	bf18      	it	ne
 8017fb2:	2300      	movne	r3, #0
 8017fb4:	eba6 0807 	sub.w	r8, r6, r7
 8017fb8:	608b      	str	r3, [r1, #8]
 8017fba:	f1b8 0f00 	cmp.w	r8, #0
 8017fbe:	dd9c      	ble.n	8017efa <__sflush_r+0x1a>
 8017fc0:	6a21      	ldr	r1, [r4, #32]
 8017fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017fc4:	4643      	mov	r3, r8
 8017fc6:	463a      	mov	r2, r7
 8017fc8:	4628      	mov	r0, r5
 8017fca:	47b0      	blx	r6
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	dc06      	bgt.n	8017fde <__sflush_r+0xfe>
 8017fd0:	89a3      	ldrh	r3, [r4, #12]
 8017fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fd6:	81a3      	strh	r3, [r4, #12]
 8017fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fdc:	e78e      	b.n	8017efc <__sflush_r+0x1c>
 8017fde:	4407      	add	r7, r0
 8017fe0:	eba8 0800 	sub.w	r8, r8, r0
 8017fe4:	e7e9      	b.n	8017fba <__sflush_r+0xda>
 8017fe6:	bf00      	nop
 8017fe8:	20400001 	.word	0x20400001

08017fec <_fflush_r>:
 8017fec:	b538      	push	{r3, r4, r5, lr}
 8017fee:	690b      	ldr	r3, [r1, #16]
 8017ff0:	4605      	mov	r5, r0
 8017ff2:	460c      	mov	r4, r1
 8017ff4:	b913      	cbnz	r3, 8017ffc <_fflush_r+0x10>
 8017ff6:	2500      	movs	r5, #0
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	bd38      	pop	{r3, r4, r5, pc}
 8017ffc:	b118      	cbz	r0, 8018006 <_fflush_r+0x1a>
 8017ffe:	6983      	ldr	r3, [r0, #24]
 8018000:	b90b      	cbnz	r3, 8018006 <_fflush_r+0x1a>
 8018002:	f7ff fcd3 	bl	80179ac <__sinit>
 8018006:	4b14      	ldr	r3, [pc, #80]	; (8018058 <_fflush_r+0x6c>)
 8018008:	429c      	cmp	r4, r3
 801800a:	d11b      	bne.n	8018044 <_fflush_r+0x58>
 801800c:	686c      	ldr	r4, [r5, #4]
 801800e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d0ef      	beq.n	8017ff6 <_fflush_r+0xa>
 8018016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018018:	07d0      	lsls	r0, r2, #31
 801801a:	d404      	bmi.n	8018026 <_fflush_r+0x3a>
 801801c:	0599      	lsls	r1, r3, #22
 801801e:	d402      	bmi.n	8018026 <_fflush_r+0x3a>
 8018020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018022:	f7ff fd86 	bl	8017b32 <__retarget_lock_acquire_recursive>
 8018026:	4628      	mov	r0, r5
 8018028:	4621      	mov	r1, r4
 801802a:	f7ff ff59 	bl	8017ee0 <__sflush_r>
 801802e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018030:	07da      	lsls	r2, r3, #31
 8018032:	4605      	mov	r5, r0
 8018034:	d4e0      	bmi.n	8017ff8 <_fflush_r+0xc>
 8018036:	89a3      	ldrh	r3, [r4, #12]
 8018038:	059b      	lsls	r3, r3, #22
 801803a:	d4dd      	bmi.n	8017ff8 <_fflush_r+0xc>
 801803c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801803e:	f7ff fd79 	bl	8017b34 <__retarget_lock_release_recursive>
 8018042:	e7d9      	b.n	8017ff8 <_fflush_r+0xc>
 8018044:	4b05      	ldr	r3, [pc, #20]	; (801805c <_fflush_r+0x70>)
 8018046:	429c      	cmp	r4, r3
 8018048:	d101      	bne.n	801804e <_fflush_r+0x62>
 801804a:	68ac      	ldr	r4, [r5, #8]
 801804c:	e7df      	b.n	801800e <_fflush_r+0x22>
 801804e:	4b04      	ldr	r3, [pc, #16]	; (8018060 <_fflush_r+0x74>)
 8018050:	429c      	cmp	r4, r3
 8018052:	bf08      	it	eq
 8018054:	68ec      	ldreq	r4, [r5, #12]
 8018056:	e7da      	b.n	801800e <_fflush_r+0x22>
 8018058:	0801c27c 	.word	0x0801c27c
 801805c:	0801c29c 	.word	0x0801c29c
 8018060:	0801c25c 	.word	0x0801c25c

08018064 <fiprintf>:
 8018064:	b40e      	push	{r1, r2, r3}
 8018066:	b503      	push	{r0, r1, lr}
 8018068:	4601      	mov	r1, r0
 801806a:	ab03      	add	r3, sp, #12
 801806c:	4805      	ldr	r0, [pc, #20]	; (8018084 <fiprintf+0x20>)
 801806e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018072:	6800      	ldr	r0, [r0, #0]
 8018074:	9301      	str	r3, [sp, #4]
 8018076:	f000 f8a7 	bl	80181c8 <_vfiprintf_r>
 801807a:	b002      	add	sp, #8
 801807c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018080:	b003      	add	sp, #12
 8018082:	4770      	bx	lr
 8018084:	20000020 	.word	0x20000020

08018088 <_lseek_r>:
 8018088:	b538      	push	{r3, r4, r5, lr}
 801808a:	4d07      	ldr	r5, [pc, #28]	; (80180a8 <_lseek_r+0x20>)
 801808c:	4604      	mov	r4, r0
 801808e:	4608      	mov	r0, r1
 8018090:	4611      	mov	r1, r2
 8018092:	2200      	movs	r2, #0
 8018094:	602a      	str	r2, [r5, #0]
 8018096:	461a      	mov	r2, r3
 8018098:	f7e9 faec 	bl	8001674 <_lseek>
 801809c:	1c43      	adds	r3, r0, #1
 801809e:	d102      	bne.n	80180a6 <_lseek_r+0x1e>
 80180a0:	682b      	ldr	r3, [r5, #0]
 80180a2:	b103      	cbz	r3, 80180a6 <_lseek_r+0x1e>
 80180a4:	6023      	str	r3, [r4, #0]
 80180a6:	bd38      	pop	{r3, r4, r5, pc}
 80180a8:	2000b730 	.word	0x2000b730

080180ac <malloc>:
 80180ac:	4b02      	ldr	r3, [pc, #8]	; (80180b8 <malloc+0xc>)
 80180ae:	4601      	mov	r1, r0
 80180b0:	6818      	ldr	r0, [r3, #0]
 80180b2:	f7ff bd65 	b.w	8017b80 <_malloc_r>
 80180b6:	bf00      	nop
 80180b8:	20000020 	.word	0x20000020

080180bc <__malloc_lock>:
 80180bc:	4801      	ldr	r0, [pc, #4]	; (80180c4 <__malloc_lock+0x8>)
 80180be:	f7ff bd38 	b.w	8017b32 <__retarget_lock_acquire_recursive>
 80180c2:	bf00      	nop
 80180c4:	2000b73c 	.word	0x2000b73c

080180c8 <__malloc_unlock>:
 80180c8:	4801      	ldr	r0, [pc, #4]	; (80180d0 <__malloc_unlock+0x8>)
 80180ca:	f7ff bd33 	b.w	8017b34 <__retarget_lock_release_recursive>
 80180ce:	bf00      	nop
 80180d0:	2000b73c 	.word	0x2000b73c

080180d4 <_free_r>:
 80180d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80180d6:	2900      	cmp	r1, #0
 80180d8:	d048      	beq.n	801816c <_free_r+0x98>
 80180da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180de:	9001      	str	r0, [sp, #4]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	f1a1 0404 	sub.w	r4, r1, #4
 80180e6:	bfb8      	it	lt
 80180e8:	18e4      	addlt	r4, r4, r3
 80180ea:	f7ff ffe7 	bl	80180bc <__malloc_lock>
 80180ee:	4a20      	ldr	r2, [pc, #128]	; (8018170 <_free_r+0x9c>)
 80180f0:	9801      	ldr	r0, [sp, #4]
 80180f2:	6813      	ldr	r3, [r2, #0]
 80180f4:	4615      	mov	r5, r2
 80180f6:	b933      	cbnz	r3, 8018106 <_free_r+0x32>
 80180f8:	6063      	str	r3, [r4, #4]
 80180fa:	6014      	str	r4, [r2, #0]
 80180fc:	b003      	add	sp, #12
 80180fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018102:	f7ff bfe1 	b.w	80180c8 <__malloc_unlock>
 8018106:	42a3      	cmp	r3, r4
 8018108:	d90b      	bls.n	8018122 <_free_r+0x4e>
 801810a:	6821      	ldr	r1, [r4, #0]
 801810c:	1862      	adds	r2, r4, r1
 801810e:	4293      	cmp	r3, r2
 8018110:	bf04      	itt	eq
 8018112:	681a      	ldreq	r2, [r3, #0]
 8018114:	685b      	ldreq	r3, [r3, #4]
 8018116:	6063      	str	r3, [r4, #4]
 8018118:	bf04      	itt	eq
 801811a:	1852      	addeq	r2, r2, r1
 801811c:	6022      	streq	r2, [r4, #0]
 801811e:	602c      	str	r4, [r5, #0]
 8018120:	e7ec      	b.n	80180fc <_free_r+0x28>
 8018122:	461a      	mov	r2, r3
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	b10b      	cbz	r3, 801812c <_free_r+0x58>
 8018128:	42a3      	cmp	r3, r4
 801812a:	d9fa      	bls.n	8018122 <_free_r+0x4e>
 801812c:	6811      	ldr	r1, [r2, #0]
 801812e:	1855      	adds	r5, r2, r1
 8018130:	42a5      	cmp	r5, r4
 8018132:	d10b      	bne.n	801814c <_free_r+0x78>
 8018134:	6824      	ldr	r4, [r4, #0]
 8018136:	4421      	add	r1, r4
 8018138:	1854      	adds	r4, r2, r1
 801813a:	42a3      	cmp	r3, r4
 801813c:	6011      	str	r1, [r2, #0]
 801813e:	d1dd      	bne.n	80180fc <_free_r+0x28>
 8018140:	681c      	ldr	r4, [r3, #0]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	6053      	str	r3, [r2, #4]
 8018146:	4421      	add	r1, r4
 8018148:	6011      	str	r1, [r2, #0]
 801814a:	e7d7      	b.n	80180fc <_free_r+0x28>
 801814c:	d902      	bls.n	8018154 <_free_r+0x80>
 801814e:	230c      	movs	r3, #12
 8018150:	6003      	str	r3, [r0, #0]
 8018152:	e7d3      	b.n	80180fc <_free_r+0x28>
 8018154:	6825      	ldr	r5, [r4, #0]
 8018156:	1961      	adds	r1, r4, r5
 8018158:	428b      	cmp	r3, r1
 801815a:	bf04      	itt	eq
 801815c:	6819      	ldreq	r1, [r3, #0]
 801815e:	685b      	ldreq	r3, [r3, #4]
 8018160:	6063      	str	r3, [r4, #4]
 8018162:	bf04      	itt	eq
 8018164:	1949      	addeq	r1, r1, r5
 8018166:	6021      	streq	r1, [r4, #0]
 8018168:	6054      	str	r4, [r2, #4]
 801816a:	e7c7      	b.n	80180fc <_free_r+0x28>
 801816c:	b003      	add	sp, #12
 801816e:	bd30      	pop	{r4, r5, pc}
 8018170:	20004c2c 	.word	0x20004c2c

08018174 <__sfputc_r>:
 8018174:	6893      	ldr	r3, [r2, #8]
 8018176:	3b01      	subs	r3, #1
 8018178:	2b00      	cmp	r3, #0
 801817a:	b410      	push	{r4}
 801817c:	6093      	str	r3, [r2, #8]
 801817e:	da08      	bge.n	8018192 <__sfputc_r+0x1e>
 8018180:	6994      	ldr	r4, [r2, #24]
 8018182:	42a3      	cmp	r3, r4
 8018184:	db01      	blt.n	801818a <__sfputc_r+0x16>
 8018186:	290a      	cmp	r1, #10
 8018188:	d103      	bne.n	8018192 <__sfputc_r+0x1e>
 801818a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801818e:	f000 baf1 	b.w	8018774 <__swbuf_r>
 8018192:	6813      	ldr	r3, [r2, #0]
 8018194:	1c58      	adds	r0, r3, #1
 8018196:	6010      	str	r0, [r2, #0]
 8018198:	7019      	strb	r1, [r3, #0]
 801819a:	4608      	mov	r0, r1
 801819c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181a0:	4770      	bx	lr

080181a2 <__sfputs_r>:
 80181a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181a4:	4606      	mov	r6, r0
 80181a6:	460f      	mov	r7, r1
 80181a8:	4614      	mov	r4, r2
 80181aa:	18d5      	adds	r5, r2, r3
 80181ac:	42ac      	cmp	r4, r5
 80181ae:	d101      	bne.n	80181b4 <__sfputs_r+0x12>
 80181b0:	2000      	movs	r0, #0
 80181b2:	e007      	b.n	80181c4 <__sfputs_r+0x22>
 80181b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181b8:	463a      	mov	r2, r7
 80181ba:	4630      	mov	r0, r6
 80181bc:	f7ff ffda 	bl	8018174 <__sfputc_r>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d1f3      	bne.n	80181ac <__sfputs_r+0xa>
 80181c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181c8 <_vfiprintf_r>:
 80181c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181cc:	460d      	mov	r5, r1
 80181ce:	b09d      	sub	sp, #116	; 0x74
 80181d0:	4614      	mov	r4, r2
 80181d2:	4698      	mov	r8, r3
 80181d4:	4606      	mov	r6, r0
 80181d6:	b118      	cbz	r0, 80181e0 <_vfiprintf_r+0x18>
 80181d8:	6983      	ldr	r3, [r0, #24]
 80181da:	b90b      	cbnz	r3, 80181e0 <_vfiprintf_r+0x18>
 80181dc:	f7ff fbe6 	bl	80179ac <__sinit>
 80181e0:	4b89      	ldr	r3, [pc, #548]	; (8018408 <_vfiprintf_r+0x240>)
 80181e2:	429d      	cmp	r5, r3
 80181e4:	d11b      	bne.n	801821e <_vfiprintf_r+0x56>
 80181e6:	6875      	ldr	r5, [r6, #4]
 80181e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181ea:	07d9      	lsls	r1, r3, #31
 80181ec:	d405      	bmi.n	80181fa <_vfiprintf_r+0x32>
 80181ee:	89ab      	ldrh	r3, [r5, #12]
 80181f0:	059a      	lsls	r2, r3, #22
 80181f2:	d402      	bmi.n	80181fa <_vfiprintf_r+0x32>
 80181f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181f6:	f7ff fc9c 	bl	8017b32 <__retarget_lock_acquire_recursive>
 80181fa:	89ab      	ldrh	r3, [r5, #12]
 80181fc:	071b      	lsls	r3, r3, #28
 80181fe:	d501      	bpl.n	8018204 <_vfiprintf_r+0x3c>
 8018200:	692b      	ldr	r3, [r5, #16]
 8018202:	b9eb      	cbnz	r3, 8018240 <_vfiprintf_r+0x78>
 8018204:	4629      	mov	r1, r5
 8018206:	4630      	mov	r0, r6
 8018208:	f000 fb06 	bl	8018818 <__swsetup_r>
 801820c:	b1c0      	cbz	r0, 8018240 <_vfiprintf_r+0x78>
 801820e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018210:	07dc      	lsls	r4, r3, #31
 8018212:	d50e      	bpl.n	8018232 <_vfiprintf_r+0x6a>
 8018214:	f04f 30ff 	mov.w	r0, #4294967295
 8018218:	b01d      	add	sp, #116	; 0x74
 801821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801821e:	4b7b      	ldr	r3, [pc, #492]	; (801840c <_vfiprintf_r+0x244>)
 8018220:	429d      	cmp	r5, r3
 8018222:	d101      	bne.n	8018228 <_vfiprintf_r+0x60>
 8018224:	68b5      	ldr	r5, [r6, #8]
 8018226:	e7df      	b.n	80181e8 <_vfiprintf_r+0x20>
 8018228:	4b79      	ldr	r3, [pc, #484]	; (8018410 <_vfiprintf_r+0x248>)
 801822a:	429d      	cmp	r5, r3
 801822c:	bf08      	it	eq
 801822e:	68f5      	ldreq	r5, [r6, #12]
 8018230:	e7da      	b.n	80181e8 <_vfiprintf_r+0x20>
 8018232:	89ab      	ldrh	r3, [r5, #12]
 8018234:	0598      	lsls	r0, r3, #22
 8018236:	d4ed      	bmi.n	8018214 <_vfiprintf_r+0x4c>
 8018238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801823a:	f7ff fc7b 	bl	8017b34 <__retarget_lock_release_recursive>
 801823e:	e7e9      	b.n	8018214 <_vfiprintf_r+0x4c>
 8018240:	2300      	movs	r3, #0
 8018242:	9309      	str	r3, [sp, #36]	; 0x24
 8018244:	2320      	movs	r3, #32
 8018246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801824a:	f8cd 800c 	str.w	r8, [sp, #12]
 801824e:	2330      	movs	r3, #48	; 0x30
 8018250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018414 <_vfiprintf_r+0x24c>
 8018254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018258:	f04f 0901 	mov.w	r9, #1
 801825c:	4623      	mov	r3, r4
 801825e:	469a      	mov	sl, r3
 8018260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018264:	b10a      	cbz	r2, 801826a <_vfiprintf_r+0xa2>
 8018266:	2a25      	cmp	r2, #37	; 0x25
 8018268:	d1f9      	bne.n	801825e <_vfiprintf_r+0x96>
 801826a:	ebba 0b04 	subs.w	fp, sl, r4
 801826e:	d00b      	beq.n	8018288 <_vfiprintf_r+0xc0>
 8018270:	465b      	mov	r3, fp
 8018272:	4622      	mov	r2, r4
 8018274:	4629      	mov	r1, r5
 8018276:	4630      	mov	r0, r6
 8018278:	f7ff ff93 	bl	80181a2 <__sfputs_r>
 801827c:	3001      	adds	r0, #1
 801827e:	f000 80aa 	beq.w	80183d6 <_vfiprintf_r+0x20e>
 8018282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018284:	445a      	add	r2, fp
 8018286:	9209      	str	r2, [sp, #36]	; 0x24
 8018288:	f89a 3000 	ldrb.w	r3, [sl]
 801828c:	2b00      	cmp	r3, #0
 801828e:	f000 80a2 	beq.w	80183d6 <_vfiprintf_r+0x20e>
 8018292:	2300      	movs	r3, #0
 8018294:	f04f 32ff 	mov.w	r2, #4294967295
 8018298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801829c:	f10a 0a01 	add.w	sl, sl, #1
 80182a0:	9304      	str	r3, [sp, #16]
 80182a2:	9307      	str	r3, [sp, #28]
 80182a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80182a8:	931a      	str	r3, [sp, #104]	; 0x68
 80182aa:	4654      	mov	r4, sl
 80182ac:	2205      	movs	r2, #5
 80182ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182b2:	4858      	ldr	r0, [pc, #352]	; (8018414 <_vfiprintf_r+0x24c>)
 80182b4:	f7e7 ff9c 	bl	80001f0 <memchr>
 80182b8:	9a04      	ldr	r2, [sp, #16]
 80182ba:	b9d8      	cbnz	r0, 80182f4 <_vfiprintf_r+0x12c>
 80182bc:	06d1      	lsls	r1, r2, #27
 80182be:	bf44      	itt	mi
 80182c0:	2320      	movmi	r3, #32
 80182c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182c6:	0713      	lsls	r3, r2, #28
 80182c8:	bf44      	itt	mi
 80182ca:	232b      	movmi	r3, #43	; 0x2b
 80182cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182d0:	f89a 3000 	ldrb.w	r3, [sl]
 80182d4:	2b2a      	cmp	r3, #42	; 0x2a
 80182d6:	d015      	beq.n	8018304 <_vfiprintf_r+0x13c>
 80182d8:	9a07      	ldr	r2, [sp, #28]
 80182da:	4654      	mov	r4, sl
 80182dc:	2000      	movs	r0, #0
 80182de:	f04f 0c0a 	mov.w	ip, #10
 80182e2:	4621      	mov	r1, r4
 80182e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182e8:	3b30      	subs	r3, #48	; 0x30
 80182ea:	2b09      	cmp	r3, #9
 80182ec:	d94e      	bls.n	801838c <_vfiprintf_r+0x1c4>
 80182ee:	b1b0      	cbz	r0, 801831e <_vfiprintf_r+0x156>
 80182f0:	9207      	str	r2, [sp, #28]
 80182f2:	e014      	b.n	801831e <_vfiprintf_r+0x156>
 80182f4:	eba0 0308 	sub.w	r3, r0, r8
 80182f8:	fa09 f303 	lsl.w	r3, r9, r3
 80182fc:	4313      	orrs	r3, r2
 80182fe:	9304      	str	r3, [sp, #16]
 8018300:	46a2      	mov	sl, r4
 8018302:	e7d2      	b.n	80182aa <_vfiprintf_r+0xe2>
 8018304:	9b03      	ldr	r3, [sp, #12]
 8018306:	1d19      	adds	r1, r3, #4
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	9103      	str	r1, [sp, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	bfbb      	ittet	lt
 8018310:	425b      	neglt	r3, r3
 8018312:	f042 0202 	orrlt.w	r2, r2, #2
 8018316:	9307      	strge	r3, [sp, #28]
 8018318:	9307      	strlt	r3, [sp, #28]
 801831a:	bfb8      	it	lt
 801831c:	9204      	strlt	r2, [sp, #16]
 801831e:	7823      	ldrb	r3, [r4, #0]
 8018320:	2b2e      	cmp	r3, #46	; 0x2e
 8018322:	d10c      	bne.n	801833e <_vfiprintf_r+0x176>
 8018324:	7863      	ldrb	r3, [r4, #1]
 8018326:	2b2a      	cmp	r3, #42	; 0x2a
 8018328:	d135      	bne.n	8018396 <_vfiprintf_r+0x1ce>
 801832a:	9b03      	ldr	r3, [sp, #12]
 801832c:	1d1a      	adds	r2, r3, #4
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	9203      	str	r2, [sp, #12]
 8018332:	2b00      	cmp	r3, #0
 8018334:	bfb8      	it	lt
 8018336:	f04f 33ff 	movlt.w	r3, #4294967295
 801833a:	3402      	adds	r4, #2
 801833c:	9305      	str	r3, [sp, #20]
 801833e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018424 <_vfiprintf_r+0x25c>
 8018342:	7821      	ldrb	r1, [r4, #0]
 8018344:	2203      	movs	r2, #3
 8018346:	4650      	mov	r0, sl
 8018348:	f7e7 ff52 	bl	80001f0 <memchr>
 801834c:	b140      	cbz	r0, 8018360 <_vfiprintf_r+0x198>
 801834e:	2340      	movs	r3, #64	; 0x40
 8018350:	eba0 000a 	sub.w	r0, r0, sl
 8018354:	fa03 f000 	lsl.w	r0, r3, r0
 8018358:	9b04      	ldr	r3, [sp, #16]
 801835a:	4303      	orrs	r3, r0
 801835c:	3401      	adds	r4, #1
 801835e:	9304      	str	r3, [sp, #16]
 8018360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018364:	482c      	ldr	r0, [pc, #176]	; (8018418 <_vfiprintf_r+0x250>)
 8018366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801836a:	2206      	movs	r2, #6
 801836c:	f7e7 ff40 	bl	80001f0 <memchr>
 8018370:	2800      	cmp	r0, #0
 8018372:	d03f      	beq.n	80183f4 <_vfiprintf_r+0x22c>
 8018374:	4b29      	ldr	r3, [pc, #164]	; (801841c <_vfiprintf_r+0x254>)
 8018376:	bb1b      	cbnz	r3, 80183c0 <_vfiprintf_r+0x1f8>
 8018378:	9b03      	ldr	r3, [sp, #12]
 801837a:	3307      	adds	r3, #7
 801837c:	f023 0307 	bic.w	r3, r3, #7
 8018380:	3308      	adds	r3, #8
 8018382:	9303      	str	r3, [sp, #12]
 8018384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018386:	443b      	add	r3, r7
 8018388:	9309      	str	r3, [sp, #36]	; 0x24
 801838a:	e767      	b.n	801825c <_vfiprintf_r+0x94>
 801838c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018390:	460c      	mov	r4, r1
 8018392:	2001      	movs	r0, #1
 8018394:	e7a5      	b.n	80182e2 <_vfiprintf_r+0x11a>
 8018396:	2300      	movs	r3, #0
 8018398:	3401      	adds	r4, #1
 801839a:	9305      	str	r3, [sp, #20]
 801839c:	4619      	mov	r1, r3
 801839e:	f04f 0c0a 	mov.w	ip, #10
 80183a2:	4620      	mov	r0, r4
 80183a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183a8:	3a30      	subs	r2, #48	; 0x30
 80183aa:	2a09      	cmp	r2, #9
 80183ac:	d903      	bls.n	80183b6 <_vfiprintf_r+0x1ee>
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d0c5      	beq.n	801833e <_vfiprintf_r+0x176>
 80183b2:	9105      	str	r1, [sp, #20]
 80183b4:	e7c3      	b.n	801833e <_vfiprintf_r+0x176>
 80183b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80183ba:	4604      	mov	r4, r0
 80183bc:	2301      	movs	r3, #1
 80183be:	e7f0      	b.n	80183a2 <_vfiprintf_r+0x1da>
 80183c0:	ab03      	add	r3, sp, #12
 80183c2:	9300      	str	r3, [sp, #0]
 80183c4:	462a      	mov	r2, r5
 80183c6:	4b16      	ldr	r3, [pc, #88]	; (8018420 <_vfiprintf_r+0x258>)
 80183c8:	a904      	add	r1, sp, #16
 80183ca:	4630      	mov	r0, r6
 80183cc:	f3af 8000 	nop.w
 80183d0:	4607      	mov	r7, r0
 80183d2:	1c78      	adds	r0, r7, #1
 80183d4:	d1d6      	bne.n	8018384 <_vfiprintf_r+0x1bc>
 80183d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183d8:	07d9      	lsls	r1, r3, #31
 80183da:	d405      	bmi.n	80183e8 <_vfiprintf_r+0x220>
 80183dc:	89ab      	ldrh	r3, [r5, #12]
 80183de:	059a      	lsls	r2, r3, #22
 80183e0:	d402      	bmi.n	80183e8 <_vfiprintf_r+0x220>
 80183e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183e4:	f7ff fba6 	bl	8017b34 <__retarget_lock_release_recursive>
 80183e8:	89ab      	ldrh	r3, [r5, #12]
 80183ea:	065b      	lsls	r3, r3, #25
 80183ec:	f53f af12 	bmi.w	8018214 <_vfiprintf_r+0x4c>
 80183f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183f2:	e711      	b.n	8018218 <_vfiprintf_r+0x50>
 80183f4:	ab03      	add	r3, sp, #12
 80183f6:	9300      	str	r3, [sp, #0]
 80183f8:	462a      	mov	r2, r5
 80183fa:	4b09      	ldr	r3, [pc, #36]	; (8018420 <_vfiprintf_r+0x258>)
 80183fc:	a904      	add	r1, sp, #16
 80183fe:	4630      	mov	r0, r6
 8018400:	f000 f880 	bl	8018504 <_printf_i>
 8018404:	e7e4      	b.n	80183d0 <_vfiprintf_r+0x208>
 8018406:	bf00      	nop
 8018408:	0801c27c 	.word	0x0801c27c
 801840c:	0801c29c 	.word	0x0801c29c
 8018410:	0801c25c 	.word	0x0801c25c
 8018414:	0801c372 	.word	0x0801c372
 8018418:	0801c37c 	.word	0x0801c37c
 801841c:	00000000 	.word	0x00000000
 8018420:	080181a3 	.word	0x080181a3
 8018424:	0801c378 	.word	0x0801c378

08018428 <_printf_common>:
 8018428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801842c:	4616      	mov	r6, r2
 801842e:	4699      	mov	r9, r3
 8018430:	688a      	ldr	r2, [r1, #8]
 8018432:	690b      	ldr	r3, [r1, #16]
 8018434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018438:	4293      	cmp	r3, r2
 801843a:	bfb8      	it	lt
 801843c:	4613      	movlt	r3, r2
 801843e:	6033      	str	r3, [r6, #0]
 8018440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018444:	4607      	mov	r7, r0
 8018446:	460c      	mov	r4, r1
 8018448:	b10a      	cbz	r2, 801844e <_printf_common+0x26>
 801844a:	3301      	adds	r3, #1
 801844c:	6033      	str	r3, [r6, #0]
 801844e:	6823      	ldr	r3, [r4, #0]
 8018450:	0699      	lsls	r1, r3, #26
 8018452:	bf42      	ittt	mi
 8018454:	6833      	ldrmi	r3, [r6, #0]
 8018456:	3302      	addmi	r3, #2
 8018458:	6033      	strmi	r3, [r6, #0]
 801845a:	6825      	ldr	r5, [r4, #0]
 801845c:	f015 0506 	ands.w	r5, r5, #6
 8018460:	d106      	bne.n	8018470 <_printf_common+0x48>
 8018462:	f104 0a19 	add.w	sl, r4, #25
 8018466:	68e3      	ldr	r3, [r4, #12]
 8018468:	6832      	ldr	r2, [r6, #0]
 801846a:	1a9b      	subs	r3, r3, r2
 801846c:	42ab      	cmp	r3, r5
 801846e:	dc26      	bgt.n	80184be <_printf_common+0x96>
 8018470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018474:	1e13      	subs	r3, r2, #0
 8018476:	6822      	ldr	r2, [r4, #0]
 8018478:	bf18      	it	ne
 801847a:	2301      	movne	r3, #1
 801847c:	0692      	lsls	r2, r2, #26
 801847e:	d42b      	bmi.n	80184d8 <_printf_common+0xb0>
 8018480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018484:	4649      	mov	r1, r9
 8018486:	4638      	mov	r0, r7
 8018488:	47c0      	blx	r8
 801848a:	3001      	adds	r0, #1
 801848c:	d01e      	beq.n	80184cc <_printf_common+0xa4>
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	68e5      	ldr	r5, [r4, #12]
 8018492:	6832      	ldr	r2, [r6, #0]
 8018494:	f003 0306 	and.w	r3, r3, #6
 8018498:	2b04      	cmp	r3, #4
 801849a:	bf08      	it	eq
 801849c:	1aad      	subeq	r5, r5, r2
 801849e:	68a3      	ldr	r3, [r4, #8]
 80184a0:	6922      	ldr	r2, [r4, #16]
 80184a2:	bf0c      	ite	eq
 80184a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80184a8:	2500      	movne	r5, #0
 80184aa:	4293      	cmp	r3, r2
 80184ac:	bfc4      	itt	gt
 80184ae:	1a9b      	subgt	r3, r3, r2
 80184b0:	18ed      	addgt	r5, r5, r3
 80184b2:	2600      	movs	r6, #0
 80184b4:	341a      	adds	r4, #26
 80184b6:	42b5      	cmp	r5, r6
 80184b8:	d11a      	bne.n	80184f0 <_printf_common+0xc8>
 80184ba:	2000      	movs	r0, #0
 80184bc:	e008      	b.n	80184d0 <_printf_common+0xa8>
 80184be:	2301      	movs	r3, #1
 80184c0:	4652      	mov	r2, sl
 80184c2:	4649      	mov	r1, r9
 80184c4:	4638      	mov	r0, r7
 80184c6:	47c0      	blx	r8
 80184c8:	3001      	adds	r0, #1
 80184ca:	d103      	bne.n	80184d4 <_printf_common+0xac>
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295
 80184d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d4:	3501      	adds	r5, #1
 80184d6:	e7c6      	b.n	8018466 <_printf_common+0x3e>
 80184d8:	18e1      	adds	r1, r4, r3
 80184da:	1c5a      	adds	r2, r3, #1
 80184dc:	2030      	movs	r0, #48	; 0x30
 80184de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80184e2:	4422      	add	r2, r4
 80184e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184ec:	3302      	adds	r3, #2
 80184ee:	e7c7      	b.n	8018480 <_printf_common+0x58>
 80184f0:	2301      	movs	r3, #1
 80184f2:	4622      	mov	r2, r4
 80184f4:	4649      	mov	r1, r9
 80184f6:	4638      	mov	r0, r7
 80184f8:	47c0      	blx	r8
 80184fa:	3001      	adds	r0, #1
 80184fc:	d0e6      	beq.n	80184cc <_printf_common+0xa4>
 80184fe:	3601      	adds	r6, #1
 8018500:	e7d9      	b.n	80184b6 <_printf_common+0x8e>
	...

08018504 <_printf_i>:
 8018504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018508:	460c      	mov	r4, r1
 801850a:	4691      	mov	r9, r2
 801850c:	7e27      	ldrb	r7, [r4, #24]
 801850e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018510:	2f78      	cmp	r7, #120	; 0x78
 8018512:	4680      	mov	r8, r0
 8018514:	469a      	mov	sl, r3
 8018516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801851a:	d807      	bhi.n	801852c <_printf_i+0x28>
 801851c:	2f62      	cmp	r7, #98	; 0x62
 801851e:	d80a      	bhi.n	8018536 <_printf_i+0x32>
 8018520:	2f00      	cmp	r7, #0
 8018522:	f000 80d8 	beq.w	80186d6 <_printf_i+0x1d2>
 8018526:	2f58      	cmp	r7, #88	; 0x58
 8018528:	f000 80a3 	beq.w	8018672 <_printf_i+0x16e>
 801852c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018534:	e03a      	b.n	80185ac <_printf_i+0xa8>
 8018536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801853a:	2b15      	cmp	r3, #21
 801853c:	d8f6      	bhi.n	801852c <_printf_i+0x28>
 801853e:	a001      	add	r0, pc, #4	; (adr r0, 8018544 <_printf_i+0x40>)
 8018540:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018544:	0801859d 	.word	0x0801859d
 8018548:	080185b1 	.word	0x080185b1
 801854c:	0801852d 	.word	0x0801852d
 8018550:	0801852d 	.word	0x0801852d
 8018554:	0801852d 	.word	0x0801852d
 8018558:	0801852d 	.word	0x0801852d
 801855c:	080185b1 	.word	0x080185b1
 8018560:	0801852d 	.word	0x0801852d
 8018564:	0801852d 	.word	0x0801852d
 8018568:	0801852d 	.word	0x0801852d
 801856c:	0801852d 	.word	0x0801852d
 8018570:	080186bd 	.word	0x080186bd
 8018574:	080185e1 	.word	0x080185e1
 8018578:	0801869f 	.word	0x0801869f
 801857c:	0801852d 	.word	0x0801852d
 8018580:	0801852d 	.word	0x0801852d
 8018584:	080186df 	.word	0x080186df
 8018588:	0801852d 	.word	0x0801852d
 801858c:	080185e1 	.word	0x080185e1
 8018590:	0801852d 	.word	0x0801852d
 8018594:	0801852d 	.word	0x0801852d
 8018598:	080186a7 	.word	0x080186a7
 801859c:	680b      	ldr	r3, [r1, #0]
 801859e:	1d1a      	adds	r2, r3, #4
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	600a      	str	r2, [r1, #0]
 80185a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80185a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80185ac:	2301      	movs	r3, #1
 80185ae:	e0a3      	b.n	80186f8 <_printf_i+0x1f4>
 80185b0:	6825      	ldr	r5, [r4, #0]
 80185b2:	6808      	ldr	r0, [r1, #0]
 80185b4:	062e      	lsls	r6, r5, #24
 80185b6:	f100 0304 	add.w	r3, r0, #4
 80185ba:	d50a      	bpl.n	80185d2 <_printf_i+0xce>
 80185bc:	6805      	ldr	r5, [r0, #0]
 80185be:	600b      	str	r3, [r1, #0]
 80185c0:	2d00      	cmp	r5, #0
 80185c2:	da03      	bge.n	80185cc <_printf_i+0xc8>
 80185c4:	232d      	movs	r3, #45	; 0x2d
 80185c6:	426d      	negs	r5, r5
 80185c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185cc:	485e      	ldr	r0, [pc, #376]	; (8018748 <_printf_i+0x244>)
 80185ce:	230a      	movs	r3, #10
 80185d0:	e019      	b.n	8018606 <_printf_i+0x102>
 80185d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80185d6:	6805      	ldr	r5, [r0, #0]
 80185d8:	600b      	str	r3, [r1, #0]
 80185da:	bf18      	it	ne
 80185dc:	b22d      	sxthne	r5, r5
 80185de:	e7ef      	b.n	80185c0 <_printf_i+0xbc>
 80185e0:	680b      	ldr	r3, [r1, #0]
 80185e2:	6825      	ldr	r5, [r4, #0]
 80185e4:	1d18      	adds	r0, r3, #4
 80185e6:	6008      	str	r0, [r1, #0]
 80185e8:	0628      	lsls	r0, r5, #24
 80185ea:	d501      	bpl.n	80185f0 <_printf_i+0xec>
 80185ec:	681d      	ldr	r5, [r3, #0]
 80185ee:	e002      	b.n	80185f6 <_printf_i+0xf2>
 80185f0:	0669      	lsls	r1, r5, #25
 80185f2:	d5fb      	bpl.n	80185ec <_printf_i+0xe8>
 80185f4:	881d      	ldrh	r5, [r3, #0]
 80185f6:	4854      	ldr	r0, [pc, #336]	; (8018748 <_printf_i+0x244>)
 80185f8:	2f6f      	cmp	r7, #111	; 0x6f
 80185fa:	bf0c      	ite	eq
 80185fc:	2308      	moveq	r3, #8
 80185fe:	230a      	movne	r3, #10
 8018600:	2100      	movs	r1, #0
 8018602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018606:	6866      	ldr	r6, [r4, #4]
 8018608:	60a6      	str	r6, [r4, #8]
 801860a:	2e00      	cmp	r6, #0
 801860c:	bfa2      	ittt	ge
 801860e:	6821      	ldrge	r1, [r4, #0]
 8018610:	f021 0104 	bicge.w	r1, r1, #4
 8018614:	6021      	strge	r1, [r4, #0]
 8018616:	b90d      	cbnz	r5, 801861c <_printf_i+0x118>
 8018618:	2e00      	cmp	r6, #0
 801861a:	d04d      	beq.n	80186b8 <_printf_i+0x1b4>
 801861c:	4616      	mov	r6, r2
 801861e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018622:	fb03 5711 	mls	r7, r3, r1, r5
 8018626:	5dc7      	ldrb	r7, [r0, r7]
 8018628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801862c:	462f      	mov	r7, r5
 801862e:	42bb      	cmp	r3, r7
 8018630:	460d      	mov	r5, r1
 8018632:	d9f4      	bls.n	801861e <_printf_i+0x11a>
 8018634:	2b08      	cmp	r3, #8
 8018636:	d10b      	bne.n	8018650 <_printf_i+0x14c>
 8018638:	6823      	ldr	r3, [r4, #0]
 801863a:	07df      	lsls	r7, r3, #31
 801863c:	d508      	bpl.n	8018650 <_printf_i+0x14c>
 801863e:	6923      	ldr	r3, [r4, #16]
 8018640:	6861      	ldr	r1, [r4, #4]
 8018642:	4299      	cmp	r1, r3
 8018644:	bfde      	ittt	le
 8018646:	2330      	movle	r3, #48	; 0x30
 8018648:	f806 3c01 	strble.w	r3, [r6, #-1]
 801864c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018650:	1b92      	subs	r2, r2, r6
 8018652:	6122      	str	r2, [r4, #16]
 8018654:	f8cd a000 	str.w	sl, [sp]
 8018658:	464b      	mov	r3, r9
 801865a:	aa03      	add	r2, sp, #12
 801865c:	4621      	mov	r1, r4
 801865e:	4640      	mov	r0, r8
 8018660:	f7ff fee2 	bl	8018428 <_printf_common>
 8018664:	3001      	adds	r0, #1
 8018666:	d14c      	bne.n	8018702 <_printf_i+0x1fe>
 8018668:	f04f 30ff 	mov.w	r0, #4294967295
 801866c:	b004      	add	sp, #16
 801866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018672:	4835      	ldr	r0, [pc, #212]	; (8018748 <_printf_i+0x244>)
 8018674:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018678:	6823      	ldr	r3, [r4, #0]
 801867a:	680e      	ldr	r6, [r1, #0]
 801867c:	061f      	lsls	r7, r3, #24
 801867e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018682:	600e      	str	r6, [r1, #0]
 8018684:	d514      	bpl.n	80186b0 <_printf_i+0x1ac>
 8018686:	07d9      	lsls	r1, r3, #31
 8018688:	bf44      	itt	mi
 801868a:	f043 0320 	orrmi.w	r3, r3, #32
 801868e:	6023      	strmi	r3, [r4, #0]
 8018690:	b91d      	cbnz	r5, 801869a <_printf_i+0x196>
 8018692:	6823      	ldr	r3, [r4, #0]
 8018694:	f023 0320 	bic.w	r3, r3, #32
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	2310      	movs	r3, #16
 801869c:	e7b0      	b.n	8018600 <_printf_i+0xfc>
 801869e:	6823      	ldr	r3, [r4, #0]
 80186a0:	f043 0320 	orr.w	r3, r3, #32
 80186a4:	6023      	str	r3, [r4, #0]
 80186a6:	2378      	movs	r3, #120	; 0x78
 80186a8:	4828      	ldr	r0, [pc, #160]	; (801874c <_printf_i+0x248>)
 80186aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80186ae:	e7e3      	b.n	8018678 <_printf_i+0x174>
 80186b0:	065e      	lsls	r6, r3, #25
 80186b2:	bf48      	it	mi
 80186b4:	b2ad      	uxthmi	r5, r5
 80186b6:	e7e6      	b.n	8018686 <_printf_i+0x182>
 80186b8:	4616      	mov	r6, r2
 80186ba:	e7bb      	b.n	8018634 <_printf_i+0x130>
 80186bc:	680b      	ldr	r3, [r1, #0]
 80186be:	6826      	ldr	r6, [r4, #0]
 80186c0:	6960      	ldr	r0, [r4, #20]
 80186c2:	1d1d      	adds	r5, r3, #4
 80186c4:	600d      	str	r5, [r1, #0]
 80186c6:	0635      	lsls	r5, r6, #24
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	d501      	bpl.n	80186d0 <_printf_i+0x1cc>
 80186cc:	6018      	str	r0, [r3, #0]
 80186ce:	e002      	b.n	80186d6 <_printf_i+0x1d2>
 80186d0:	0671      	lsls	r1, r6, #25
 80186d2:	d5fb      	bpl.n	80186cc <_printf_i+0x1c8>
 80186d4:	8018      	strh	r0, [r3, #0]
 80186d6:	2300      	movs	r3, #0
 80186d8:	6123      	str	r3, [r4, #16]
 80186da:	4616      	mov	r6, r2
 80186dc:	e7ba      	b.n	8018654 <_printf_i+0x150>
 80186de:	680b      	ldr	r3, [r1, #0]
 80186e0:	1d1a      	adds	r2, r3, #4
 80186e2:	600a      	str	r2, [r1, #0]
 80186e4:	681e      	ldr	r6, [r3, #0]
 80186e6:	6862      	ldr	r2, [r4, #4]
 80186e8:	2100      	movs	r1, #0
 80186ea:	4630      	mov	r0, r6
 80186ec:	f7e7 fd80 	bl	80001f0 <memchr>
 80186f0:	b108      	cbz	r0, 80186f6 <_printf_i+0x1f2>
 80186f2:	1b80      	subs	r0, r0, r6
 80186f4:	6060      	str	r0, [r4, #4]
 80186f6:	6863      	ldr	r3, [r4, #4]
 80186f8:	6123      	str	r3, [r4, #16]
 80186fa:	2300      	movs	r3, #0
 80186fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018700:	e7a8      	b.n	8018654 <_printf_i+0x150>
 8018702:	6923      	ldr	r3, [r4, #16]
 8018704:	4632      	mov	r2, r6
 8018706:	4649      	mov	r1, r9
 8018708:	4640      	mov	r0, r8
 801870a:	47d0      	blx	sl
 801870c:	3001      	adds	r0, #1
 801870e:	d0ab      	beq.n	8018668 <_printf_i+0x164>
 8018710:	6823      	ldr	r3, [r4, #0]
 8018712:	079b      	lsls	r3, r3, #30
 8018714:	d413      	bmi.n	801873e <_printf_i+0x23a>
 8018716:	68e0      	ldr	r0, [r4, #12]
 8018718:	9b03      	ldr	r3, [sp, #12]
 801871a:	4298      	cmp	r0, r3
 801871c:	bfb8      	it	lt
 801871e:	4618      	movlt	r0, r3
 8018720:	e7a4      	b.n	801866c <_printf_i+0x168>
 8018722:	2301      	movs	r3, #1
 8018724:	4632      	mov	r2, r6
 8018726:	4649      	mov	r1, r9
 8018728:	4640      	mov	r0, r8
 801872a:	47d0      	blx	sl
 801872c:	3001      	adds	r0, #1
 801872e:	d09b      	beq.n	8018668 <_printf_i+0x164>
 8018730:	3501      	adds	r5, #1
 8018732:	68e3      	ldr	r3, [r4, #12]
 8018734:	9903      	ldr	r1, [sp, #12]
 8018736:	1a5b      	subs	r3, r3, r1
 8018738:	42ab      	cmp	r3, r5
 801873a:	dcf2      	bgt.n	8018722 <_printf_i+0x21e>
 801873c:	e7eb      	b.n	8018716 <_printf_i+0x212>
 801873e:	2500      	movs	r5, #0
 8018740:	f104 0619 	add.w	r6, r4, #25
 8018744:	e7f5      	b.n	8018732 <_printf_i+0x22e>
 8018746:	bf00      	nop
 8018748:	0801c383 	.word	0x0801c383
 801874c:	0801c394 	.word	0x0801c394

08018750 <_read_r>:
 8018750:	b538      	push	{r3, r4, r5, lr}
 8018752:	4d07      	ldr	r5, [pc, #28]	; (8018770 <_read_r+0x20>)
 8018754:	4604      	mov	r4, r0
 8018756:	4608      	mov	r0, r1
 8018758:	4611      	mov	r1, r2
 801875a:	2200      	movs	r2, #0
 801875c:	602a      	str	r2, [r5, #0]
 801875e:	461a      	mov	r2, r3
 8018760:	f7e8 ff28 	bl	80015b4 <_read>
 8018764:	1c43      	adds	r3, r0, #1
 8018766:	d102      	bne.n	801876e <_read_r+0x1e>
 8018768:	682b      	ldr	r3, [r5, #0]
 801876a:	b103      	cbz	r3, 801876e <_read_r+0x1e>
 801876c:	6023      	str	r3, [r4, #0]
 801876e:	bd38      	pop	{r3, r4, r5, pc}
 8018770:	2000b730 	.word	0x2000b730

08018774 <__swbuf_r>:
 8018774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018776:	460e      	mov	r6, r1
 8018778:	4614      	mov	r4, r2
 801877a:	4605      	mov	r5, r0
 801877c:	b118      	cbz	r0, 8018786 <__swbuf_r+0x12>
 801877e:	6983      	ldr	r3, [r0, #24]
 8018780:	b90b      	cbnz	r3, 8018786 <__swbuf_r+0x12>
 8018782:	f7ff f913 	bl	80179ac <__sinit>
 8018786:	4b21      	ldr	r3, [pc, #132]	; (801880c <__swbuf_r+0x98>)
 8018788:	429c      	cmp	r4, r3
 801878a:	d12b      	bne.n	80187e4 <__swbuf_r+0x70>
 801878c:	686c      	ldr	r4, [r5, #4]
 801878e:	69a3      	ldr	r3, [r4, #24]
 8018790:	60a3      	str	r3, [r4, #8]
 8018792:	89a3      	ldrh	r3, [r4, #12]
 8018794:	071a      	lsls	r2, r3, #28
 8018796:	d52f      	bpl.n	80187f8 <__swbuf_r+0x84>
 8018798:	6923      	ldr	r3, [r4, #16]
 801879a:	b36b      	cbz	r3, 80187f8 <__swbuf_r+0x84>
 801879c:	6923      	ldr	r3, [r4, #16]
 801879e:	6820      	ldr	r0, [r4, #0]
 80187a0:	1ac0      	subs	r0, r0, r3
 80187a2:	6963      	ldr	r3, [r4, #20]
 80187a4:	b2f6      	uxtb	r6, r6
 80187a6:	4283      	cmp	r3, r0
 80187a8:	4637      	mov	r7, r6
 80187aa:	dc04      	bgt.n	80187b6 <__swbuf_r+0x42>
 80187ac:	4621      	mov	r1, r4
 80187ae:	4628      	mov	r0, r5
 80187b0:	f7ff fc1c 	bl	8017fec <_fflush_r>
 80187b4:	bb30      	cbnz	r0, 8018804 <__swbuf_r+0x90>
 80187b6:	68a3      	ldr	r3, [r4, #8]
 80187b8:	3b01      	subs	r3, #1
 80187ba:	60a3      	str	r3, [r4, #8]
 80187bc:	6823      	ldr	r3, [r4, #0]
 80187be:	1c5a      	adds	r2, r3, #1
 80187c0:	6022      	str	r2, [r4, #0]
 80187c2:	701e      	strb	r6, [r3, #0]
 80187c4:	6963      	ldr	r3, [r4, #20]
 80187c6:	3001      	adds	r0, #1
 80187c8:	4283      	cmp	r3, r0
 80187ca:	d004      	beq.n	80187d6 <__swbuf_r+0x62>
 80187cc:	89a3      	ldrh	r3, [r4, #12]
 80187ce:	07db      	lsls	r3, r3, #31
 80187d0:	d506      	bpl.n	80187e0 <__swbuf_r+0x6c>
 80187d2:	2e0a      	cmp	r6, #10
 80187d4:	d104      	bne.n	80187e0 <__swbuf_r+0x6c>
 80187d6:	4621      	mov	r1, r4
 80187d8:	4628      	mov	r0, r5
 80187da:	f7ff fc07 	bl	8017fec <_fflush_r>
 80187de:	b988      	cbnz	r0, 8018804 <__swbuf_r+0x90>
 80187e0:	4638      	mov	r0, r7
 80187e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187e4:	4b0a      	ldr	r3, [pc, #40]	; (8018810 <__swbuf_r+0x9c>)
 80187e6:	429c      	cmp	r4, r3
 80187e8:	d101      	bne.n	80187ee <__swbuf_r+0x7a>
 80187ea:	68ac      	ldr	r4, [r5, #8]
 80187ec:	e7cf      	b.n	801878e <__swbuf_r+0x1a>
 80187ee:	4b09      	ldr	r3, [pc, #36]	; (8018814 <__swbuf_r+0xa0>)
 80187f0:	429c      	cmp	r4, r3
 80187f2:	bf08      	it	eq
 80187f4:	68ec      	ldreq	r4, [r5, #12]
 80187f6:	e7ca      	b.n	801878e <__swbuf_r+0x1a>
 80187f8:	4621      	mov	r1, r4
 80187fa:	4628      	mov	r0, r5
 80187fc:	f000 f80c 	bl	8018818 <__swsetup_r>
 8018800:	2800      	cmp	r0, #0
 8018802:	d0cb      	beq.n	801879c <__swbuf_r+0x28>
 8018804:	f04f 37ff 	mov.w	r7, #4294967295
 8018808:	e7ea      	b.n	80187e0 <__swbuf_r+0x6c>
 801880a:	bf00      	nop
 801880c:	0801c27c 	.word	0x0801c27c
 8018810:	0801c29c 	.word	0x0801c29c
 8018814:	0801c25c 	.word	0x0801c25c

08018818 <__swsetup_r>:
 8018818:	4b32      	ldr	r3, [pc, #200]	; (80188e4 <__swsetup_r+0xcc>)
 801881a:	b570      	push	{r4, r5, r6, lr}
 801881c:	681d      	ldr	r5, [r3, #0]
 801881e:	4606      	mov	r6, r0
 8018820:	460c      	mov	r4, r1
 8018822:	b125      	cbz	r5, 801882e <__swsetup_r+0x16>
 8018824:	69ab      	ldr	r3, [r5, #24]
 8018826:	b913      	cbnz	r3, 801882e <__swsetup_r+0x16>
 8018828:	4628      	mov	r0, r5
 801882a:	f7ff f8bf 	bl	80179ac <__sinit>
 801882e:	4b2e      	ldr	r3, [pc, #184]	; (80188e8 <__swsetup_r+0xd0>)
 8018830:	429c      	cmp	r4, r3
 8018832:	d10f      	bne.n	8018854 <__swsetup_r+0x3c>
 8018834:	686c      	ldr	r4, [r5, #4]
 8018836:	89a3      	ldrh	r3, [r4, #12]
 8018838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801883c:	0719      	lsls	r1, r3, #28
 801883e:	d42c      	bmi.n	801889a <__swsetup_r+0x82>
 8018840:	06dd      	lsls	r5, r3, #27
 8018842:	d411      	bmi.n	8018868 <__swsetup_r+0x50>
 8018844:	2309      	movs	r3, #9
 8018846:	6033      	str	r3, [r6, #0]
 8018848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801884c:	81a3      	strh	r3, [r4, #12]
 801884e:	f04f 30ff 	mov.w	r0, #4294967295
 8018852:	e03e      	b.n	80188d2 <__swsetup_r+0xba>
 8018854:	4b25      	ldr	r3, [pc, #148]	; (80188ec <__swsetup_r+0xd4>)
 8018856:	429c      	cmp	r4, r3
 8018858:	d101      	bne.n	801885e <__swsetup_r+0x46>
 801885a:	68ac      	ldr	r4, [r5, #8]
 801885c:	e7eb      	b.n	8018836 <__swsetup_r+0x1e>
 801885e:	4b24      	ldr	r3, [pc, #144]	; (80188f0 <__swsetup_r+0xd8>)
 8018860:	429c      	cmp	r4, r3
 8018862:	bf08      	it	eq
 8018864:	68ec      	ldreq	r4, [r5, #12]
 8018866:	e7e6      	b.n	8018836 <__swsetup_r+0x1e>
 8018868:	0758      	lsls	r0, r3, #29
 801886a:	d512      	bpl.n	8018892 <__swsetup_r+0x7a>
 801886c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801886e:	b141      	cbz	r1, 8018882 <__swsetup_r+0x6a>
 8018870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018874:	4299      	cmp	r1, r3
 8018876:	d002      	beq.n	801887e <__swsetup_r+0x66>
 8018878:	4630      	mov	r0, r6
 801887a:	f7ff fc2b 	bl	80180d4 <_free_r>
 801887e:	2300      	movs	r3, #0
 8018880:	6363      	str	r3, [r4, #52]	; 0x34
 8018882:	89a3      	ldrh	r3, [r4, #12]
 8018884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018888:	81a3      	strh	r3, [r4, #12]
 801888a:	2300      	movs	r3, #0
 801888c:	6063      	str	r3, [r4, #4]
 801888e:	6923      	ldr	r3, [r4, #16]
 8018890:	6023      	str	r3, [r4, #0]
 8018892:	89a3      	ldrh	r3, [r4, #12]
 8018894:	f043 0308 	orr.w	r3, r3, #8
 8018898:	81a3      	strh	r3, [r4, #12]
 801889a:	6923      	ldr	r3, [r4, #16]
 801889c:	b94b      	cbnz	r3, 80188b2 <__swsetup_r+0x9a>
 801889e:	89a3      	ldrh	r3, [r4, #12]
 80188a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80188a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188a8:	d003      	beq.n	80188b2 <__swsetup_r+0x9a>
 80188aa:	4621      	mov	r1, r4
 80188ac:	4630      	mov	r0, r6
 80188ae:	f000 f84d 	bl	801894c <__smakebuf_r>
 80188b2:	89a0      	ldrh	r0, [r4, #12]
 80188b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188b8:	f010 0301 	ands.w	r3, r0, #1
 80188bc:	d00a      	beq.n	80188d4 <__swsetup_r+0xbc>
 80188be:	2300      	movs	r3, #0
 80188c0:	60a3      	str	r3, [r4, #8]
 80188c2:	6963      	ldr	r3, [r4, #20]
 80188c4:	425b      	negs	r3, r3
 80188c6:	61a3      	str	r3, [r4, #24]
 80188c8:	6923      	ldr	r3, [r4, #16]
 80188ca:	b943      	cbnz	r3, 80188de <__swsetup_r+0xc6>
 80188cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80188d0:	d1ba      	bne.n	8018848 <__swsetup_r+0x30>
 80188d2:	bd70      	pop	{r4, r5, r6, pc}
 80188d4:	0781      	lsls	r1, r0, #30
 80188d6:	bf58      	it	pl
 80188d8:	6963      	ldrpl	r3, [r4, #20]
 80188da:	60a3      	str	r3, [r4, #8]
 80188dc:	e7f4      	b.n	80188c8 <__swsetup_r+0xb0>
 80188de:	2000      	movs	r0, #0
 80188e0:	e7f7      	b.n	80188d2 <__swsetup_r+0xba>
 80188e2:	bf00      	nop
 80188e4:	20000020 	.word	0x20000020
 80188e8:	0801c27c 	.word	0x0801c27c
 80188ec:	0801c29c 	.word	0x0801c29c
 80188f0:	0801c25c 	.word	0x0801c25c

080188f4 <abort>:
 80188f4:	b508      	push	{r3, lr}
 80188f6:	2006      	movs	r0, #6
 80188f8:	f000 f890 	bl	8018a1c <raise>
 80188fc:	2001      	movs	r0, #1
 80188fe:	f7e8 fe4f 	bl	80015a0 <_exit>

08018902 <__swhatbuf_r>:
 8018902:	b570      	push	{r4, r5, r6, lr}
 8018904:	460e      	mov	r6, r1
 8018906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801890a:	2900      	cmp	r1, #0
 801890c:	b096      	sub	sp, #88	; 0x58
 801890e:	4614      	mov	r4, r2
 8018910:	461d      	mov	r5, r3
 8018912:	da07      	bge.n	8018924 <__swhatbuf_r+0x22>
 8018914:	2300      	movs	r3, #0
 8018916:	602b      	str	r3, [r5, #0]
 8018918:	89b3      	ldrh	r3, [r6, #12]
 801891a:	061a      	lsls	r2, r3, #24
 801891c:	d410      	bmi.n	8018940 <__swhatbuf_r+0x3e>
 801891e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018922:	e00e      	b.n	8018942 <__swhatbuf_r+0x40>
 8018924:	466a      	mov	r2, sp
 8018926:	f000 f895 	bl	8018a54 <_fstat_r>
 801892a:	2800      	cmp	r0, #0
 801892c:	dbf2      	blt.n	8018914 <__swhatbuf_r+0x12>
 801892e:	9a01      	ldr	r2, [sp, #4]
 8018930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018938:	425a      	negs	r2, r3
 801893a:	415a      	adcs	r2, r3
 801893c:	602a      	str	r2, [r5, #0]
 801893e:	e7ee      	b.n	801891e <__swhatbuf_r+0x1c>
 8018940:	2340      	movs	r3, #64	; 0x40
 8018942:	2000      	movs	r0, #0
 8018944:	6023      	str	r3, [r4, #0]
 8018946:	b016      	add	sp, #88	; 0x58
 8018948:	bd70      	pop	{r4, r5, r6, pc}
	...

0801894c <__smakebuf_r>:
 801894c:	898b      	ldrh	r3, [r1, #12]
 801894e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018950:	079d      	lsls	r5, r3, #30
 8018952:	4606      	mov	r6, r0
 8018954:	460c      	mov	r4, r1
 8018956:	d507      	bpl.n	8018968 <__smakebuf_r+0x1c>
 8018958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801895c:	6023      	str	r3, [r4, #0]
 801895e:	6123      	str	r3, [r4, #16]
 8018960:	2301      	movs	r3, #1
 8018962:	6163      	str	r3, [r4, #20]
 8018964:	b002      	add	sp, #8
 8018966:	bd70      	pop	{r4, r5, r6, pc}
 8018968:	ab01      	add	r3, sp, #4
 801896a:	466a      	mov	r2, sp
 801896c:	f7ff ffc9 	bl	8018902 <__swhatbuf_r>
 8018970:	9900      	ldr	r1, [sp, #0]
 8018972:	4605      	mov	r5, r0
 8018974:	4630      	mov	r0, r6
 8018976:	f7ff f903 	bl	8017b80 <_malloc_r>
 801897a:	b948      	cbnz	r0, 8018990 <__smakebuf_r+0x44>
 801897c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018980:	059a      	lsls	r2, r3, #22
 8018982:	d4ef      	bmi.n	8018964 <__smakebuf_r+0x18>
 8018984:	f023 0303 	bic.w	r3, r3, #3
 8018988:	f043 0302 	orr.w	r3, r3, #2
 801898c:	81a3      	strh	r3, [r4, #12]
 801898e:	e7e3      	b.n	8018958 <__smakebuf_r+0xc>
 8018990:	4b0d      	ldr	r3, [pc, #52]	; (80189c8 <__smakebuf_r+0x7c>)
 8018992:	62b3      	str	r3, [r6, #40]	; 0x28
 8018994:	89a3      	ldrh	r3, [r4, #12]
 8018996:	6020      	str	r0, [r4, #0]
 8018998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801899c:	81a3      	strh	r3, [r4, #12]
 801899e:	9b00      	ldr	r3, [sp, #0]
 80189a0:	6163      	str	r3, [r4, #20]
 80189a2:	9b01      	ldr	r3, [sp, #4]
 80189a4:	6120      	str	r0, [r4, #16]
 80189a6:	b15b      	cbz	r3, 80189c0 <__smakebuf_r+0x74>
 80189a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ac:	4630      	mov	r0, r6
 80189ae:	f000 f863 	bl	8018a78 <_isatty_r>
 80189b2:	b128      	cbz	r0, 80189c0 <__smakebuf_r+0x74>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	f023 0303 	bic.w	r3, r3, #3
 80189ba:	f043 0301 	orr.w	r3, r3, #1
 80189be:	81a3      	strh	r3, [r4, #12]
 80189c0:	89a0      	ldrh	r0, [r4, #12]
 80189c2:	4305      	orrs	r5, r0
 80189c4:	81a5      	strh	r5, [r4, #12]
 80189c6:	e7cd      	b.n	8018964 <__smakebuf_r+0x18>
 80189c8:	08017945 	.word	0x08017945

080189cc <_raise_r>:
 80189cc:	291f      	cmp	r1, #31
 80189ce:	b538      	push	{r3, r4, r5, lr}
 80189d0:	4604      	mov	r4, r0
 80189d2:	460d      	mov	r5, r1
 80189d4:	d904      	bls.n	80189e0 <_raise_r+0x14>
 80189d6:	2316      	movs	r3, #22
 80189d8:	6003      	str	r3, [r0, #0]
 80189da:	f04f 30ff 	mov.w	r0, #4294967295
 80189de:	bd38      	pop	{r3, r4, r5, pc}
 80189e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80189e2:	b112      	cbz	r2, 80189ea <_raise_r+0x1e>
 80189e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80189e8:	b94b      	cbnz	r3, 80189fe <_raise_r+0x32>
 80189ea:	4620      	mov	r0, r4
 80189ec:	f000 f830 	bl	8018a50 <_getpid_r>
 80189f0:	462a      	mov	r2, r5
 80189f2:	4601      	mov	r1, r0
 80189f4:	4620      	mov	r0, r4
 80189f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189fa:	f000 b817 	b.w	8018a2c <_kill_r>
 80189fe:	2b01      	cmp	r3, #1
 8018a00:	d00a      	beq.n	8018a18 <_raise_r+0x4c>
 8018a02:	1c59      	adds	r1, r3, #1
 8018a04:	d103      	bne.n	8018a0e <_raise_r+0x42>
 8018a06:	2316      	movs	r3, #22
 8018a08:	6003      	str	r3, [r0, #0]
 8018a0a:	2001      	movs	r0, #1
 8018a0c:	e7e7      	b.n	80189de <_raise_r+0x12>
 8018a0e:	2400      	movs	r4, #0
 8018a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018a14:	4628      	mov	r0, r5
 8018a16:	4798      	blx	r3
 8018a18:	2000      	movs	r0, #0
 8018a1a:	e7e0      	b.n	80189de <_raise_r+0x12>

08018a1c <raise>:
 8018a1c:	4b02      	ldr	r3, [pc, #8]	; (8018a28 <raise+0xc>)
 8018a1e:	4601      	mov	r1, r0
 8018a20:	6818      	ldr	r0, [r3, #0]
 8018a22:	f7ff bfd3 	b.w	80189cc <_raise_r>
 8018a26:	bf00      	nop
 8018a28:	20000020 	.word	0x20000020

08018a2c <_kill_r>:
 8018a2c:	b538      	push	{r3, r4, r5, lr}
 8018a2e:	4d07      	ldr	r5, [pc, #28]	; (8018a4c <_kill_r+0x20>)
 8018a30:	2300      	movs	r3, #0
 8018a32:	4604      	mov	r4, r0
 8018a34:	4608      	mov	r0, r1
 8018a36:	4611      	mov	r1, r2
 8018a38:	602b      	str	r3, [r5, #0]
 8018a3a:	f7e8 fd9f 	bl	800157c <_kill>
 8018a3e:	1c43      	adds	r3, r0, #1
 8018a40:	d102      	bne.n	8018a48 <_kill_r+0x1c>
 8018a42:	682b      	ldr	r3, [r5, #0]
 8018a44:	b103      	cbz	r3, 8018a48 <_kill_r+0x1c>
 8018a46:	6023      	str	r3, [r4, #0]
 8018a48:	bd38      	pop	{r3, r4, r5, pc}
 8018a4a:	bf00      	nop
 8018a4c:	2000b730 	.word	0x2000b730

08018a50 <_getpid_r>:
 8018a50:	f7e8 bd8c 	b.w	800156c <_getpid>

08018a54 <_fstat_r>:
 8018a54:	b538      	push	{r3, r4, r5, lr}
 8018a56:	4d07      	ldr	r5, [pc, #28]	; (8018a74 <_fstat_r+0x20>)
 8018a58:	2300      	movs	r3, #0
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	4608      	mov	r0, r1
 8018a5e:	4611      	mov	r1, r2
 8018a60:	602b      	str	r3, [r5, #0]
 8018a62:	f7e8 fdec 	bl	800163e <_fstat>
 8018a66:	1c43      	adds	r3, r0, #1
 8018a68:	d102      	bne.n	8018a70 <_fstat_r+0x1c>
 8018a6a:	682b      	ldr	r3, [r5, #0]
 8018a6c:	b103      	cbz	r3, 8018a70 <_fstat_r+0x1c>
 8018a6e:	6023      	str	r3, [r4, #0]
 8018a70:	bd38      	pop	{r3, r4, r5, pc}
 8018a72:	bf00      	nop
 8018a74:	2000b730 	.word	0x2000b730

08018a78 <_isatty_r>:
 8018a78:	b538      	push	{r3, r4, r5, lr}
 8018a7a:	4d06      	ldr	r5, [pc, #24]	; (8018a94 <_isatty_r+0x1c>)
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	4604      	mov	r4, r0
 8018a80:	4608      	mov	r0, r1
 8018a82:	602b      	str	r3, [r5, #0]
 8018a84:	f7e8 fdeb 	bl	800165e <_isatty>
 8018a88:	1c43      	adds	r3, r0, #1
 8018a8a:	d102      	bne.n	8018a92 <_isatty_r+0x1a>
 8018a8c:	682b      	ldr	r3, [r5, #0]
 8018a8e:	b103      	cbz	r3, 8018a92 <_isatty_r+0x1a>
 8018a90:	6023      	str	r3, [r4, #0]
 8018a92:	bd38      	pop	{r3, r4, r5, pc}
 8018a94:	2000b730 	.word	0x2000b730

08018a98 <_init>:
 8018a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a9a:	bf00      	nop
 8018a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a9e:	bc08      	pop	{r3}
 8018aa0:	469e      	mov	lr, r3
 8018aa2:	4770      	bx	lr

08018aa4 <_fini>:
 8018aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa6:	bf00      	nop
 8018aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aaa:	bc08      	pop	{r3}
 8018aac:	469e      	mov	lr, r3
 8018aae:	4770      	bx	lr
